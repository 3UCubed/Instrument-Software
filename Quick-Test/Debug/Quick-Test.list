
Quick-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af34  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800aff8  0800aff8  0001aff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5ec  0800b5ec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b5ec  0800b5ec  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b5ec  0800b5ec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5ec  0800b5ec  0001b5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5f0  0800b5f0  0001b5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b5f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200001e0  0800b7d4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  0800b7d4  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1f5  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d7b  00000000  00000000  0002b3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0002d178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002da20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012e37  00000000  00000000  0002e200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd4a  00000000  00000000  00041037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d1a9  00000000  00000000  0004cd81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9f2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a8  00000000  00000000  000b9f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800afdc 	.word	0x0800afdc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800afdc 	.word	0x0800afdc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff7d 	bl	800133c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fecd 	bl	80011ec <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff6f 	bl	800133c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff65 	bl	800133c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fef5 	bl	8001270 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 feeb 	bl	8001270 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fdbd 	bl	800203c <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fa06 	bl	80018dc <__aeabi_dsub>
 80004d0:	f001 fdb4 	bl	800203c <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f000 ff6b 	bl	8001404 <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 fde8 	bl	8002108 <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f000 ff62 	bl	8001404 <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 f9c8 	bl	80018dc <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 fda1 	bl	80020a8 <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f000 ff4b 	bl	8001404 <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fdc8 	bl	8002108 <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_dadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	4646      	mov	r6, r8
 800058e:	46d6      	mov	lr, sl
 8000590:	000d      	movs	r5, r1
 8000592:	0004      	movs	r4, r0
 8000594:	b5c0      	push	{r6, r7, lr}
 8000596:	001f      	movs	r7, r3
 8000598:	0011      	movs	r1, r2
 800059a:	0328      	lsls	r0, r5, #12
 800059c:	0f62      	lsrs	r2, r4, #29
 800059e:	0a40      	lsrs	r0, r0, #9
 80005a0:	4310      	orrs	r0, r2
 80005a2:	007a      	lsls	r2, r7, #1
 80005a4:	0d52      	lsrs	r2, r2, #21
 80005a6:	00e3      	lsls	r3, r4, #3
 80005a8:	033c      	lsls	r4, r7, #12
 80005aa:	4691      	mov	r9, r2
 80005ac:	0a64      	lsrs	r4, r4, #9
 80005ae:	0ffa      	lsrs	r2, r7, #31
 80005b0:	0f4f      	lsrs	r7, r1, #29
 80005b2:	006e      	lsls	r6, r5, #1
 80005b4:	4327      	orrs	r7, r4
 80005b6:	4692      	mov	sl, r2
 80005b8:	46b8      	mov	r8, r7
 80005ba:	0d76      	lsrs	r6, r6, #21
 80005bc:	0fed      	lsrs	r5, r5, #31
 80005be:	00c9      	lsls	r1, r1, #3
 80005c0:	4295      	cmp	r5, r2
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x3e>
 80005c4:	e099      	b.n	80006fa <__aeabi_dadd+0x172>
 80005c6:	464c      	mov	r4, r9
 80005c8:	1b34      	subs	r4, r6, r4
 80005ca:	46a4      	mov	ip, r4
 80005cc:	2c00      	cmp	r4, #0
 80005ce:	dc00      	bgt.n	80005d2 <__aeabi_dadd+0x4a>
 80005d0:	e07c      	b.n	80006cc <__aeabi_dadd+0x144>
 80005d2:	464a      	mov	r2, r9
 80005d4:	2a00      	cmp	r2, #0
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x52>
 80005d8:	e0b8      	b.n	800074c <__aeabi_dadd+0x1c4>
 80005da:	4ac5      	ldr	r2, [pc, #788]	; (80008f0 <__aeabi_dadd+0x368>)
 80005dc:	4296      	cmp	r6, r2
 80005de:	d100      	bne.n	80005e2 <__aeabi_dadd+0x5a>
 80005e0:	e11c      	b.n	800081c <__aeabi_dadd+0x294>
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	003c      	movs	r4, r7
 80005e6:	0412      	lsls	r2, r2, #16
 80005e8:	4314      	orrs	r4, r2
 80005ea:	46a0      	mov	r8, r4
 80005ec:	4662      	mov	r2, ip
 80005ee:	2a38      	cmp	r2, #56	; 0x38
 80005f0:	dd00      	ble.n	80005f4 <__aeabi_dadd+0x6c>
 80005f2:	e161      	b.n	80008b8 <__aeabi_dadd+0x330>
 80005f4:	2a1f      	cmp	r2, #31
 80005f6:	dd00      	ble.n	80005fa <__aeabi_dadd+0x72>
 80005f8:	e1cc      	b.n	8000994 <__aeabi_dadd+0x40c>
 80005fa:	4664      	mov	r4, ip
 80005fc:	2220      	movs	r2, #32
 80005fe:	1b12      	subs	r2, r2, r4
 8000600:	4644      	mov	r4, r8
 8000602:	4094      	lsls	r4, r2
 8000604:	000f      	movs	r7, r1
 8000606:	46a1      	mov	r9, r4
 8000608:	4664      	mov	r4, ip
 800060a:	4091      	lsls	r1, r2
 800060c:	40e7      	lsrs	r7, r4
 800060e:	464c      	mov	r4, r9
 8000610:	1e4a      	subs	r2, r1, #1
 8000612:	4191      	sbcs	r1, r2
 8000614:	433c      	orrs	r4, r7
 8000616:	4642      	mov	r2, r8
 8000618:	4321      	orrs	r1, r4
 800061a:	4664      	mov	r4, ip
 800061c:	40e2      	lsrs	r2, r4
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	1a5c      	subs	r4, r3, r1
 8000622:	42a3      	cmp	r3, r4
 8000624:	419b      	sbcs	r3, r3
 8000626:	425f      	negs	r7, r3
 8000628:	1bc7      	subs	r7, r0, r7
 800062a:	023b      	lsls	r3, r7, #8
 800062c:	d400      	bmi.n	8000630 <__aeabi_dadd+0xa8>
 800062e:	e0d0      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000630:	027f      	lsls	r7, r7, #9
 8000632:	0a7f      	lsrs	r7, r7, #9
 8000634:	2f00      	cmp	r7, #0
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0xb2>
 8000638:	e0ff      	b.n	800083a <__aeabi_dadd+0x2b2>
 800063a:	0038      	movs	r0, r7
 800063c:	f001 fe5a 	bl	80022f4 <__clzsi2>
 8000640:	0001      	movs	r1, r0
 8000642:	3908      	subs	r1, #8
 8000644:	2320      	movs	r3, #32
 8000646:	0022      	movs	r2, r4
 8000648:	1a5b      	subs	r3, r3, r1
 800064a:	408f      	lsls	r7, r1
 800064c:	40da      	lsrs	r2, r3
 800064e:	408c      	lsls	r4, r1
 8000650:	4317      	orrs	r7, r2
 8000652:	42b1      	cmp	r1, r6
 8000654:	da00      	bge.n	8000658 <__aeabi_dadd+0xd0>
 8000656:	e0ff      	b.n	8000858 <__aeabi_dadd+0x2d0>
 8000658:	1b89      	subs	r1, r1, r6
 800065a:	1c4b      	adds	r3, r1, #1
 800065c:	2b1f      	cmp	r3, #31
 800065e:	dd00      	ble.n	8000662 <__aeabi_dadd+0xda>
 8000660:	e0a8      	b.n	80007b4 <__aeabi_dadd+0x22c>
 8000662:	2220      	movs	r2, #32
 8000664:	0039      	movs	r1, r7
 8000666:	1ad2      	subs	r2, r2, r3
 8000668:	0020      	movs	r0, r4
 800066a:	4094      	lsls	r4, r2
 800066c:	4091      	lsls	r1, r2
 800066e:	40d8      	lsrs	r0, r3
 8000670:	1e62      	subs	r2, r4, #1
 8000672:	4194      	sbcs	r4, r2
 8000674:	40df      	lsrs	r7, r3
 8000676:	2600      	movs	r6, #0
 8000678:	4301      	orrs	r1, r0
 800067a:	430c      	orrs	r4, r1
 800067c:	0763      	lsls	r3, r4, #29
 800067e:	d009      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000680:	230f      	movs	r3, #15
 8000682:	4023      	ands	r3, r4
 8000684:	2b04      	cmp	r3, #4
 8000686:	d005      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000688:	1d23      	adds	r3, r4, #4
 800068a:	42a3      	cmp	r3, r4
 800068c:	41a4      	sbcs	r4, r4
 800068e:	4264      	negs	r4, r4
 8000690:	193f      	adds	r7, r7, r4
 8000692:	001c      	movs	r4, r3
 8000694:	023b      	lsls	r3, r7, #8
 8000696:	d400      	bmi.n	800069a <__aeabi_dadd+0x112>
 8000698:	e09e      	b.n	80007d8 <__aeabi_dadd+0x250>
 800069a:	4b95      	ldr	r3, [pc, #596]	; (80008f0 <__aeabi_dadd+0x368>)
 800069c:	3601      	adds	r6, #1
 800069e:	429e      	cmp	r6, r3
 80006a0:	d100      	bne.n	80006a4 <__aeabi_dadd+0x11c>
 80006a2:	e0b7      	b.n	8000814 <__aeabi_dadd+0x28c>
 80006a4:	4a93      	ldr	r2, [pc, #588]	; (80008f4 <__aeabi_dadd+0x36c>)
 80006a6:	08e4      	lsrs	r4, r4, #3
 80006a8:	4017      	ands	r7, r2
 80006aa:	077b      	lsls	r3, r7, #29
 80006ac:	0571      	lsls	r1, r6, #21
 80006ae:	027f      	lsls	r7, r7, #9
 80006b0:	4323      	orrs	r3, r4
 80006b2:	0b3f      	lsrs	r7, r7, #12
 80006b4:	0d4a      	lsrs	r2, r1, #21
 80006b6:	0512      	lsls	r2, r2, #20
 80006b8:	433a      	orrs	r2, r7
 80006ba:	07ed      	lsls	r5, r5, #31
 80006bc:	432a      	orrs	r2, r5
 80006be:	0018      	movs	r0, r3
 80006c0:	0011      	movs	r1, r2
 80006c2:	bce0      	pop	{r5, r6, r7}
 80006c4:	46ba      	mov	sl, r7
 80006c6:	46b1      	mov	r9, r6
 80006c8:	46a8      	mov	r8, r5
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d04b      	beq.n	8000768 <__aeabi_dadd+0x1e0>
 80006d0:	464c      	mov	r4, r9
 80006d2:	1ba4      	subs	r4, r4, r6
 80006d4:	46a4      	mov	ip, r4
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_dadd+0x154>
 80006da:	e123      	b.n	8000924 <__aeabi_dadd+0x39c>
 80006dc:	0004      	movs	r4, r0
 80006de:	431c      	orrs	r4, r3
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dadd+0x15c>
 80006e2:	e1af      	b.n	8000a44 <__aeabi_dadd+0x4bc>
 80006e4:	4662      	mov	r2, ip
 80006e6:	1e54      	subs	r4, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x166>
 80006ec:	e215      	b.n	8000b1a <__aeabi_dadd+0x592>
 80006ee:	4d80      	ldr	r5, [pc, #512]	; (80008f0 <__aeabi_dadd+0x368>)
 80006f0:	45ac      	cmp	ip, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x16e>
 80006f4:	e1c8      	b.n	8000a88 <__aeabi_dadd+0x500>
 80006f6:	46a4      	mov	ip, r4
 80006f8:	e11b      	b.n	8000932 <__aeabi_dadd+0x3aa>
 80006fa:	464a      	mov	r2, r9
 80006fc:	1ab2      	subs	r2, r6, r2
 80006fe:	4694      	mov	ip, r2
 8000700:	2a00      	cmp	r2, #0
 8000702:	dc00      	bgt.n	8000706 <__aeabi_dadd+0x17e>
 8000704:	e0ac      	b.n	8000860 <__aeabi_dadd+0x2d8>
 8000706:	464a      	mov	r2, r9
 8000708:	2a00      	cmp	r2, #0
 800070a:	d043      	beq.n	8000794 <__aeabi_dadd+0x20c>
 800070c:	4a78      	ldr	r2, [pc, #480]	; (80008f0 <__aeabi_dadd+0x368>)
 800070e:	4296      	cmp	r6, r2
 8000710:	d100      	bne.n	8000714 <__aeabi_dadd+0x18c>
 8000712:	e1af      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	003c      	movs	r4, r7
 8000718:	0412      	lsls	r2, r2, #16
 800071a:	4314      	orrs	r4, r2
 800071c:	46a0      	mov	r8, r4
 800071e:	4662      	mov	r2, ip
 8000720:	2a38      	cmp	r2, #56	; 0x38
 8000722:	dc67      	bgt.n	80007f4 <__aeabi_dadd+0x26c>
 8000724:	2a1f      	cmp	r2, #31
 8000726:	dc00      	bgt.n	800072a <__aeabi_dadd+0x1a2>
 8000728:	e15f      	b.n	80009ea <__aeabi_dadd+0x462>
 800072a:	4647      	mov	r7, r8
 800072c:	3a20      	subs	r2, #32
 800072e:	40d7      	lsrs	r7, r2
 8000730:	4662      	mov	r2, ip
 8000732:	2a20      	cmp	r2, #32
 8000734:	d005      	beq.n	8000742 <__aeabi_dadd+0x1ba>
 8000736:	4664      	mov	r4, ip
 8000738:	2240      	movs	r2, #64	; 0x40
 800073a:	1b12      	subs	r2, r2, r4
 800073c:	4644      	mov	r4, r8
 800073e:	4094      	lsls	r4, r2
 8000740:	4321      	orrs	r1, r4
 8000742:	1e4a      	subs	r2, r1, #1
 8000744:	4191      	sbcs	r1, r2
 8000746:	000c      	movs	r4, r1
 8000748:	433c      	orrs	r4, r7
 800074a:	e057      	b.n	80007fc <__aeabi_dadd+0x274>
 800074c:	003a      	movs	r2, r7
 800074e:	430a      	orrs	r2, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_dadd+0x1cc>
 8000752:	e105      	b.n	8000960 <__aeabi_dadd+0x3d8>
 8000754:	0022      	movs	r2, r4
 8000756:	3a01      	subs	r2, #1
 8000758:	2c01      	cmp	r4, #1
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x1d6>
 800075c:	e182      	b.n	8000a64 <__aeabi_dadd+0x4dc>
 800075e:	4c64      	ldr	r4, [pc, #400]	; (80008f0 <__aeabi_dadd+0x368>)
 8000760:	45a4      	cmp	ip, r4
 8000762:	d05b      	beq.n	800081c <__aeabi_dadd+0x294>
 8000764:	4694      	mov	ip, r2
 8000766:	e741      	b.n	80005ec <__aeabi_dadd+0x64>
 8000768:	4c63      	ldr	r4, [pc, #396]	; (80008f8 <__aeabi_dadd+0x370>)
 800076a:	1c77      	adds	r7, r6, #1
 800076c:	4227      	tst	r7, r4
 800076e:	d000      	beq.n	8000772 <__aeabi_dadd+0x1ea>
 8000770:	e0c4      	b.n	80008fc <__aeabi_dadd+0x374>
 8000772:	0004      	movs	r4, r0
 8000774:	431c      	orrs	r4, r3
 8000776:	2e00      	cmp	r6, #0
 8000778:	d000      	beq.n	800077c <__aeabi_dadd+0x1f4>
 800077a:	e169      	b.n	8000a50 <__aeabi_dadd+0x4c8>
 800077c:	2c00      	cmp	r4, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0x1fa>
 8000780:	e1bf      	b.n	8000b02 <__aeabi_dadd+0x57a>
 8000782:	4644      	mov	r4, r8
 8000784:	430c      	orrs	r4, r1
 8000786:	d000      	beq.n	800078a <__aeabi_dadd+0x202>
 8000788:	e1d0      	b.n	8000b2c <__aeabi_dadd+0x5a4>
 800078a:	0742      	lsls	r2, r0, #29
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	4313      	orrs	r3, r2
 8000790:	08c0      	lsrs	r0, r0, #3
 8000792:	e029      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000794:	003a      	movs	r2, r7
 8000796:	430a      	orrs	r2, r1
 8000798:	d100      	bne.n	800079c <__aeabi_dadd+0x214>
 800079a:	e170      	b.n	8000a7e <__aeabi_dadd+0x4f6>
 800079c:	4662      	mov	r2, ip
 800079e:	4664      	mov	r4, ip
 80007a0:	3a01      	subs	r2, #1
 80007a2:	2c01      	cmp	r4, #1
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dadd+0x220>
 80007a6:	e0e0      	b.n	800096a <__aeabi_dadd+0x3e2>
 80007a8:	4c51      	ldr	r4, [pc, #324]	; (80008f0 <__aeabi_dadd+0x368>)
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x228>
 80007ae:	e161      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 80007b0:	4694      	mov	ip, r2
 80007b2:	e7b4      	b.n	800071e <__aeabi_dadd+0x196>
 80007b4:	003a      	movs	r2, r7
 80007b6:	391f      	subs	r1, #31
 80007b8:	40ca      	lsrs	r2, r1
 80007ba:	0011      	movs	r1, r2
 80007bc:	2b20      	cmp	r3, #32
 80007be:	d003      	beq.n	80007c8 <__aeabi_dadd+0x240>
 80007c0:	2240      	movs	r2, #64	; 0x40
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	409f      	lsls	r7, r3
 80007c6:	433c      	orrs	r4, r7
 80007c8:	1e63      	subs	r3, r4, #1
 80007ca:	419c      	sbcs	r4, r3
 80007cc:	2700      	movs	r7, #0
 80007ce:	2600      	movs	r6, #0
 80007d0:	430c      	orrs	r4, r1
 80007d2:	0763      	lsls	r3, r4, #29
 80007d4:	d000      	beq.n	80007d8 <__aeabi_dadd+0x250>
 80007d6:	e753      	b.n	8000680 <__aeabi_dadd+0xf8>
 80007d8:	46b4      	mov	ip, r6
 80007da:	08e4      	lsrs	r4, r4, #3
 80007dc:	077b      	lsls	r3, r7, #29
 80007de:	4323      	orrs	r3, r4
 80007e0:	08f8      	lsrs	r0, r7, #3
 80007e2:	4a43      	ldr	r2, [pc, #268]	; (80008f0 <__aeabi_dadd+0x368>)
 80007e4:	4594      	cmp	ip, r2
 80007e6:	d01d      	beq.n	8000824 <__aeabi_dadd+0x29c>
 80007e8:	4662      	mov	r2, ip
 80007ea:	0307      	lsls	r7, r0, #12
 80007ec:	0552      	lsls	r2, r2, #21
 80007ee:	0b3f      	lsrs	r7, r7, #12
 80007f0:	0d52      	lsrs	r2, r2, #21
 80007f2:	e760      	b.n	80006b6 <__aeabi_dadd+0x12e>
 80007f4:	4644      	mov	r4, r8
 80007f6:	430c      	orrs	r4, r1
 80007f8:	1e62      	subs	r2, r4, #1
 80007fa:	4194      	sbcs	r4, r2
 80007fc:	18e4      	adds	r4, r4, r3
 80007fe:	429c      	cmp	r4, r3
 8000800:	419b      	sbcs	r3, r3
 8000802:	425f      	negs	r7, r3
 8000804:	183f      	adds	r7, r7, r0
 8000806:	023b      	lsls	r3, r7, #8
 8000808:	d5e3      	bpl.n	80007d2 <__aeabi_dadd+0x24a>
 800080a:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <__aeabi_dadd+0x368>)
 800080c:	3601      	adds	r6, #1
 800080e:	429e      	cmp	r6, r3
 8000810:	d000      	beq.n	8000814 <__aeabi_dadd+0x28c>
 8000812:	e0b5      	b.n	8000980 <__aeabi_dadd+0x3f8>
 8000814:	0032      	movs	r2, r6
 8000816:	2700      	movs	r7, #0
 8000818:	2300      	movs	r3, #0
 800081a:	e74c      	b.n	80006b6 <__aeabi_dadd+0x12e>
 800081c:	0742      	lsls	r2, r0, #29
 800081e:	08db      	lsrs	r3, r3, #3
 8000820:	4313      	orrs	r3, r2
 8000822:	08c0      	lsrs	r0, r0, #3
 8000824:	001a      	movs	r2, r3
 8000826:	4302      	orrs	r2, r0
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x2a4>
 800082a:	e1e1      	b.n	8000bf0 <__aeabi_dadd+0x668>
 800082c:	2780      	movs	r7, #128	; 0x80
 800082e:	033f      	lsls	r7, r7, #12
 8000830:	4307      	orrs	r7, r0
 8000832:	033f      	lsls	r7, r7, #12
 8000834:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <__aeabi_dadd+0x368>)
 8000836:	0b3f      	lsrs	r7, r7, #12
 8000838:	e73d      	b.n	80006b6 <__aeabi_dadd+0x12e>
 800083a:	0020      	movs	r0, r4
 800083c:	f001 fd5a 	bl	80022f4 <__clzsi2>
 8000840:	0001      	movs	r1, r0
 8000842:	3118      	adds	r1, #24
 8000844:	291f      	cmp	r1, #31
 8000846:	dc00      	bgt.n	800084a <__aeabi_dadd+0x2c2>
 8000848:	e6fc      	b.n	8000644 <__aeabi_dadd+0xbc>
 800084a:	3808      	subs	r0, #8
 800084c:	4084      	lsls	r4, r0
 800084e:	0027      	movs	r7, r4
 8000850:	2400      	movs	r4, #0
 8000852:	42b1      	cmp	r1, r6
 8000854:	db00      	blt.n	8000858 <__aeabi_dadd+0x2d0>
 8000856:	e6ff      	b.n	8000658 <__aeabi_dadd+0xd0>
 8000858:	4a26      	ldr	r2, [pc, #152]	; (80008f4 <__aeabi_dadd+0x36c>)
 800085a:	1a76      	subs	r6, r6, r1
 800085c:	4017      	ands	r7, r2
 800085e:	e70d      	b.n	800067c <__aeabi_dadd+0xf4>
 8000860:	2a00      	cmp	r2, #0
 8000862:	d02f      	beq.n	80008c4 <__aeabi_dadd+0x33c>
 8000864:	464a      	mov	r2, r9
 8000866:	1b92      	subs	r2, r2, r6
 8000868:	4694      	mov	ip, r2
 800086a:	2e00      	cmp	r6, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x2e8>
 800086e:	e0ad      	b.n	80009cc <__aeabi_dadd+0x444>
 8000870:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <__aeabi_dadd+0x368>)
 8000872:	4591      	cmp	r9, r2
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x2f0>
 8000876:	e10f      	b.n	8000a98 <__aeabi_dadd+0x510>
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0412      	lsls	r2, r2, #16
 800087c:	4310      	orrs	r0, r2
 800087e:	4662      	mov	r2, ip
 8000880:	2a38      	cmp	r2, #56	; 0x38
 8000882:	dd00      	ble.n	8000886 <__aeabi_dadd+0x2fe>
 8000884:	e10f      	b.n	8000aa6 <__aeabi_dadd+0x51e>
 8000886:	2a1f      	cmp	r2, #31
 8000888:	dd00      	ble.n	800088c <__aeabi_dadd+0x304>
 800088a:	e180      	b.n	8000b8e <__aeabi_dadd+0x606>
 800088c:	4664      	mov	r4, ip
 800088e:	2220      	movs	r2, #32
 8000890:	001e      	movs	r6, r3
 8000892:	1b12      	subs	r2, r2, r4
 8000894:	4667      	mov	r7, ip
 8000896:	0004      	movs	r4, r0
 8000898:	4093      	lsls	r3, r2
 800089a:	4094      	lsls	r4, r2
 800089c:	40fe      	lsrs	r6, r7
 800089e:	1e5a      	subs	r2, r3, #1
 80008a0:	4193      	sbcs	r3, r2
 80008a2:	40f8      	lsrs	r0, r7
 80008a4:	4334      	orrs	r4, r6
 80008a6:	431c      	orrs	r4, r3
 80008a8:	4480      	add	r8, r0
 80008aa:	1864      	adds	r4, r4, r1
 80008ac:	428c      	cmp	r4, r1
 80008ae:	41bf      	sbcs	r7, r7
 80008b0:	427f      	negs	r7, r7
 80008b2:	464e      	mov	r6, r9
 80008b4:	4447      	add	r7, r8
 80008b6:	e7a6      	b.n	8000806 <__aeabi_dadd+0x27e>
 80008b8:	4642      	mov	r2, r8
 80008ba:	430a      	orrs	r2, r1
 80008bc:	0011      	movs	r1, r2
 80008be:	1e4a      	subs	r2, r1, #1
 80008c0:	4191      	sbcs	r1, r2
 80008c2:	e6ad      	b.n	8000620 <__aeabi_dadd+0x98>
 80008c4:	4c0c      	ldr	r4, [pc, #48]	; (80008f8 <__aeabi_dadd+0x370>)
 80008c6:	1c72      	adds	r2, r6, #1
 80008c8:	4222      	tst	r2, r4
 80008ca:	d000      	beq.n	80008ce <__aeabi_dadd+0x346>
 80008cc:	e0a1      	b.n	8000a12 <__aeabi_dadd+0x48a>
 80008ce:	0002      	movs	r2, r0
 80008d0:	431a      	orrs	r2, r3
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d000      	beq.n	80008d8 <__aeabi_dadd+0x350>
 80008d6:	e0fa      	b.n	8000ace <__aeabi_dadd+0x546>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x356>
 80008dc:	e145      	b.n	8000b6a <__aeabi_dadd+0x5e2>
 80008de:	003a      	movs	r2, r7
 80008e0:	430a      	orrs	r2, r1
 80008e2:	d000      	beq.n	80008e6 <__aeabi_dadd+0x35e>
 80008e4:	e146      	b.n	8000b74 <__aeabi_dadd+0x5ec>
 80008e6:	0742      	lsls	r2, r0, #29
 80008e8:	08db      	lsrs	r3, r3, #3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	08c0      	lsrs	r0, r0, #3
 80008ee:	e77b      	b.n	80007e8 <__aeabi_dadd+0x260>
 80008f0:	000007ff 	.word	0x000007ff
 80008f4:	ff7fffff 	.word	0xff7fffff
 80008f8:	000007fe 	.word	0x000007fe
 80008fc:	4647      	mov	r7, r8
 80008fe:	1a5c      	subs	r4, r3, r1
 8000900:	1bc2      	subs	r2, r0, r7
 8000902:	42a3      	cmp	r3, r4
 8000904:	41bf      	sbcs	r7, r7
 8000906:	427f      	negs	r7, r7
 8000908:	46b9      	mov	r9, r7
 800090a:	0017      	movs	r7, r2
 800090c:	464a      	mov	r2, r9
 800090e:	1abf      	subs	r7, r7, r2
 8000910:	023a      	lsls	r2, r7, #8
 8000912:	d500      	bpl.n	8000916 <__aeabi_dadd+0x38e>
 8000914:	e08d      	b.n	8000a32 <__aeabi_dadd+0x4aa>
 8000916:	0023      	movs	r3, r4
 8000918:	433b      	orrs	r3, r7
 800091a:	d000      	beq.n	800091e <__aeabi_dadd+0x396>
 800091c:	e68a      	b.n	8000634 <__aeabi_dadd+0xac>
 800091e:	2000      	movs	r0, #0
 8000920:	2500      	movs	r5, #0
 8000922:	e761      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000924:	4cb4      	ldr	r4, [pc, #720]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000926:	45a1      	cmp	r9, r4
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x3a4>
 800092a:	e0ad      	b.n	8000a88 <__aeabi_dadd+0x500>
 800092c:	2480      	movs	r4, #128	; 0x80
 800092e:	0424      	lsls	r4, r4, #16
 8000930:	4320      	orrs	r0, r4
 8000932:	4664      	mov	r4, ip
 8000934:	2c38      	cmp	r4, #56	; 0x38
 8000936:	dc3d      	bgt.n	80009b4 <__aeabi_dadd+0x42c>
 8000938:	4662      	mov	r2, ip
 800093a:	2c1f      	cmp	r4, #31
 800093c:	dd00      	ble.n	8000940 <__aeabi_dadd+0x3b8>
 800093e:	e0b7      	b.n	8000ab0 <__aeabi_dadd+0x528>
 8000940:	2520      	movs	r5, #32
 8000942:	001e      	movs	r6, r3
 8000944:	1b2d      	subs	r5, r5, r4
 8000946:	0004      	movs	r4, r0
 8000948:	40ab      	lsls	r3, r5
 800094a:	40ac      	lsls	r4, r5
 800094c:	40d6      	lsrs	r6, r2
 800094e:	40d0      	lsrs	r0, r2
 8000950:	4642      	mov	r2, r8
 8000952:	1e5d      	subs	r5, r3, #1
 8000954:	41ab      	sbcs	r3, r5
 8000956:	4334      	orrs	r4, r6
 8000958:	1a12      	subs	r2, r2, r0
 800095a:	4690      	mov	r8, r2
 800095c:	4323      	orrs	r3, r4
 800095e:	e02c      	b.n	80009ba <__aeabi_dadd+0x432>
 8000960:	0742      	lsls	r2, r0, #29
 8000962:	08db      	lsrs	r3, r3, #3
 8000964:	4313      	orrs	r3, r2
 8000966:	08c0      	lsrs	r0, r0, #3
 8000968:	e73b      	b.n	80007e2 <__aeabi_dadd+0x25a>
 800096a:	185c      	adds	r4, r3, r1
 800096c:	429c      	cmp	r4, r3
 800096e:	419b      	sbcs	r3, r3
 8000970:	4440      	add	r0, r8
 8000972:	425b      	negs	r3, r3
 8000974:	18c7      	adds	r7, r0, r3
 8000976:	2601      	movs	r6, #1
 8000978:	023b      	lsls	r3, r7, #8
 800097a:	d400      	bmi.n	800097e <__aeabi_dadd+0x3f6>
 800097c:	e729      	b.n	80007d2 <__aeabi_dadd+0x24a>
 800097e:	2602      	movs	r6, #2
 8000980:	4a9e      	ldr	r2, [pc, #632]	; (8000bfc <__aeabi_dadd+0x674>)
 8000982:	0863      	lsrs	r3, r4, #1
 8000984:	4017      	ands	r7, r2
 8000986:	2201      	movs	r2, #1
 8000988:	4014      	ands	r4, r2
 800098a:	431c      	orrs	r4, r3
 800098c:	07fb      	lsls	r3, r7, #31
 800098e:	431c      	orrs	r4, r3
 8000990:	087f      	lsrs	r7, r7, #1
 8000992:	e673      	b.n	800067c <__aeabi_dadd+0xf4>
 8000994:	4644      	mov	r4, r8
 8000996:	3a20      	subs	r2, #32
 8000998:	40d4      	lsrs	r4, r2
 800099a:	4662      	mov	r2, ip
 800099c:	2a20      	cmp	r2, #32
 800099e:	d005      	beq.n	80009ac <__aeabi_dadd+0x424>
 80009a0:	4667      	mov	r7, ip
 80009a2:	2240      	movs	r2, #64	; 0x40
 80009a4:	1bd2      	subs	r2, r2, r7
 80009a6:	4647      	mov	r7, r8
 80009a8:	4097      	lsls	r7, r2
 80009aa:	4339      	orrs	r1, r7
 80009ac:	1e4a      	subs	r2, r1, #1
 80009ae:	4191      	sbcs	r1, r2
 80009b0:	4321      	orrs	r1, r4
 80009b2:	e635      	b.n	8000620 <__aeabi_dadd+0x98>
 80009b4:	4303      	orrs	r3, r0
 80009b6:	1e58      	subs	r0, r3, #1
 80009b8:	4183      	sbcs	r3, r0
 80009ba:	1acc      	subs	r4, r1, r3
 80009bc:	42a1      	cmp	r1, r4
 80009be:	41bf      	sbcs	r7, r7
 80009c0:	4643      	mov	r3, r8
 80009c2:	427f      	negs	r7, r7
 80009c4:	4655      	mov	r5, sl
 80009c6:	464e      	mov	r6, r9
 80009c8:	1bdf      	subs	r7, r3, r7
 80009ca:	e62e      	b.n	800062a <__aeabi_dadd+0xa2>
 80009cc:	0002      	movs	r2, r0
 80009ce:	431a      	orrs	r2, r3
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x44c>
 80009d2:	e0bd      	b.n	8000b50 <__aeabi_dadd+0x5c8>
 80009d4:	4662      	mov	r2, ip
 80009d6:	4664      	mov	r4, ip
 80009d8:	3a01      	subs	r2, #1
 80009da:	2c01      	cmp	r4, #1
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x458>
 80009de:	e0e5      	b.n	8000bac <__aeabi_dadd+0x624>
 80009e0:	4c85      	ldr	r4, [pc, #532]	; (8000bf8 <__aeabi_dadd+0x670>)
 80009e2:	45a4      	cmp	ip, r4
 80009e4:	d058      	beq.n	8000a98 <__aeabi_dadd+0x510>
 80009e6:	4694      	mov	ip, r2
 80009e8:	e749      	b.n	800087e <__aeabi_dadd+0x2f6>
 80009ea:	4664      	mov	r4, ip
 80009ec:	2220      	movs	r2, #32
 80009ee:	1b12      	subs	r2, r2, r4
 80009f0:	4644      	mov	r4, r8
 80009f2:	4094      	lsls	r4, r2
 80009f4:	000f      	movs	r7, r1
 80009f6:	46a1      	mov	r9, r4
 80009f8:	4664      	mov	r4, ip
 80009fa:	4091      	lsls	r1, r2
 80009fc:	40e7      	lsrs	r7, r4
 80009fe:	464c      	mov	r4, r9
 8000a00:	1e4a      	subs	r2, r1, #1
 8000a02:	4191      	sbcs	r1, r2
 8000a04:	433c      	orrs	r4, r7
 8000a06:	4642      	mov	r2, r8
 8000a08:	430c      	orrs	r4, r1
 8000a0a:	4661      	mov	r1, ip
 8000a0c:	40ca      	lsrs	r2, r1
 8000a0e:	1880      	adds	r0, r0, r2
 8000a10:	e6f4      	b.n	80007fc <__aeabi_dadd+0x274>
 8000a12:	4c79      	ldr	r4, [pc, #484]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000a14:	42a2      	cmp	r2, r4
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dadd+0x492>
 8000a18:	e6fd      	b.n	8000816 <__aeabi_dadd+0x28e>
 8000a1a:	1859      	adds	r1, r3, r1
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	419b      	sbcs	r3, r3
 8000a20:	4440      	add	r0, r8
 8000a22:	425f      	negs	r7, r3
 8000a24:	19c7      	adds	r7, r0, r7
 8000a26:	07fc      	lsls	r4, r7, #31
 8000a28:	0849      	lsrs	r1, r1, #1
 8000a2a:	0016      	movs	r6, r2
 8000a2c:	430c      	orrs	r4, r1
 8000a2e:	087f      	lsrs	r7, r7, #1
 8000a30:	e6cf      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000a32:	1acc      	subs	r4, r1, r3
 8000a34:	42a1      	cmp	r1, r4
 8000a36:	41bf      	sbcs	r7, r7
 8000a38:	4643      	mov	r3, r8
 8000a3a:	427f      	negs	r7, r7
 8000a3c:	1a18      	subs	r0, r3, r0
 8000a3e:	4655      	mov	r5, sl
 8000a40:	1bc7      	subs	r7, r0, r7
 8000a42:	e5f7      	b.n	8000634 <__aeabi_dadd+0xac>
 8000a44:	08c9      	lsrs	r1, r1, #3
 8000a46:	077b      	lsls	r3, r7, #29
 8000a48:	4655      	mov	r5, sl
 8000a4a:	430b      	orrs	r3, r1
 8000a4c:	08f8      	lsrs	r0, r7, #3
 8000a4e:	e6c8      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000a50:	2c00      	cmp	r4, #0
 8000a52:	d000      	beq.n	8000a56 <__aeabi_dadd+0x4ce>
 8000a54:	e081      	b.n	8000b5a <__aeabi_dadd+0x5d2>
 8000a56:	4643      	mov	r3, r8
 8000a58:	430b      	orrs	r3, r1
 8000a5a:	d115      	bne.n	8000a88 <__aeabi_dadd+0x500>
 8000a5c:	2080      	movs	r0, #128	; 0x80
 8000a5e:	2500      	movs	r5, #0
 8000a60:	0300      	lsls	r0, r0, #12
 8000a62:	e6e3      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000a64:	1a5c      	subs	r4, r3, r1
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	419b      	sbcs	r3, r3
 8000a6a:	1bc7      	subs	r7, r0, r7
 8000a6c:	425b      	negs	r3, r3
 8000a6e:	2601      	movs	r6, #1
 8000a70:	1aff      	subs	r7, r7, r3
 8000a72:	e5da      	b.n	800062a <__aeabi_dadd+0xa2>
 8000a74:	0742      	lsls	r2, r0, #29
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	08c0      	lsrs	r0, r0, #3
 8000a7c:	e6d2      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000a7e:	0742      	lsls	r2, r0, #29
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	08c0      	lsrs	r0, r0, #3
 8000a86:	e6ac      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000a88:	4643      	mov	r3, r8
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	08c9      	lsrs	r1, r1, #3
 8000a8e:	075b      	lsls	r3, r3, #29
 8000a90:	4655      	mov	r5, sl
 8000a92:	430b      	orrs	r3, r1
 8000a94:	08d0      	lsrs	r0, r2, #3
 8000a96:	e6c5      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000a98:	4643      	mov	r3, r8
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	075b      	lsls	r3, r3, #29
 8000a9e:	08c9      	lsrs	r1, r1, #3
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	08d0      	lsrs	r0, r2, #3
 8000aa4:	e6be      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000aa6:	4303      	orrs	r3, r0
 8000aa8:	001c      	movs	r4, r3
 8000aaa:	1e63      	subs	r3, r4, #1
 8000aac:	419c      	sbcs	r4, r3
 8000aae:	e6fc      	b.n	80008aa <__aeabi_dadd+0x322>
 8000ab0:	0002      	movs	r2, r0
 8000ab2:	3c20      	subs	r4, #32
 8000ab4:	40e2      	lsrs	r2, r4
 8000ab6:	0014      	movs	r4, r2
 8000ab8:	4662      	mov	r2, ip
 8000aba:	2a20      	cmp	r2, #32
 8000abc:	d003      	beq.n	8000ac6 <__aeabi_dadd+0x53e>
 8000abe:	2540      	movs	r5, #64	; 0x40
 8000ac0:	1aad      	subs	r5, r5, r2
 8000ac2:	40a8      	lsls	r0, r5
 8000ac4:	4303      	orrs	r3, r0
 8000ac6:	1e58      	subs	r0, r3, #1
 8000ac8:	4183      	sbcs	r3, r0
 8000aca:	4323      	orrs	r3, r4
 8000acc:	e775      	b.n	80009ba <__aeabi_dadd+0x432>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d0e2      	beq.n	8000a98 <__aeabi_dadd+0x510>
 8000ad2:	003a      	movs	r2, r7
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	d0cd      	beq.n	8000a74 <__aeabi_dadd+0x4ec>
 8000ad8:	0742      	lsls	r2, r0, #29
 8000ada:	08db      	lsrs	r3, r3, #3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	08c0      	lsrs	r0, r0, #3
 8000ae2:	0312      	lsls	r2, r2, #12
 8000ae4:	4210      	tst	r0, r2
 8000ae6:	d006      	beq.n	8000af6 <__aeabi_dadd+0x56e>
 8000ae8:	08fc      	lsrs	r4, r7, #3
 8000aea:	4214      	tst	r4, r2
 8000aec:	d103      	bne.n	8000af6 <__aeabi_dadd+0x56e>
 8000aee:	0020      	movs	r0, r4
 8000af0:	08cb      	lsrs	r3, r1, #3
 8000af2:	077a      	lsls	r2, r7, #29
 8000af4:	4313      	orrs	r3, r2
 8000af6:	0f5a      	lsrs	r2, r3, #29
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	0752      	lsls	r2, r2, #29
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	e690      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000b02:	4643      	mov	r3, r8
 8000b04:	430b      	orrs	r3, r1
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x582>
 8000b08:	e709      	b.n	800091e <__aeabi_dadd+0x396>
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	08c9      	lsrs	r1, r1, #3
 8000b10:	075b      	lsls	r3, r3, #29
 8000b12:	4655      	mov	r5, sl
 8000b14:	430b      	orrs	r3, r1
 8000b16:	08d0      	lsrs	r0, r2, #3
 8000b18:	e666      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b1a:	1acc      	subs	r4, r1, r3
 8000b1c:	42a1      	cmp	r1, r4
 8000b1e:	4189      	sbcs	r1, r1
 8000b20:	1a3f      	subs	r7, r7, r0
 8000b22:	4249      	negs	r1, r1
 8000b24:	4655      	mov	r5, sl
 8000b26:	2601      	movs	r6, #1
 8000b28:	1a7f      	subs	r7, r7, r1
 8000b2a:	e57e      	b.n	800062a <__aeabi_dadd+0xa2>
 8000b2c:	4642      	mov	r2, r8
 8000b2e:	1a5c      	subs	r4, r3, r1
 8000b30:	1a87      	subs	r7, r0, r2
 8000b32:	42a3      	cmp	r3, r4
 8000b34:	4192      	sbcs	r2, r2
 8000b36:	4252      	negs	r2, r2
 8000b38:	1abf      	subs	r7, r7, r2
 8000b3a:	023a      	lsls	r2, r7, #8
 8000b3c:	d53d      	bpl.n	8000bba <__aeabi_dadd+0x632>
 8000b3e:	1acc      	subs	r4, r1, r3
 8000b40:	42a1      	cmp	r1, r4
 8000b42:	4189      	sbcs	r1, r1
 8000b44:	4643      	mov	r3, r8
 8000b46:	4249      	negs	r1, r1
 8000b48:	1a1f      	subs	r7, r3, r0
 8000b4a:	4655      	mov	r5, sl
 8000b4c:	1a7f      	subs	r7, r7, r1
 8000b4e:	e595      	b.n	800067c <__aeabi_dadd+0xf4>
 8000b50:	077b      	lsls	r3, r7, #29
 8000b52:	08c9      	lsrs	r1, r1, #3
 8000b54:	430b      	orrs	r3, r1
 8000b56:	08f8      	lsrs	r0, r7, #3
 8000b58:	e643      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000b5a:	4644      	mov	r4, r8
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	430c      	orrs	r4, r1
 8000b60:	d130      	bne.n	8000bc4 <__aeabi_dadd+0x63c>
 8000b62:	0742      	lsls	r2, r0, #29
 8000b64:	4313      	orrs	r3, r2
 8000b66:	08c0      	lsrs	r0, r0, #3
 8000b68:	e65c      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000b6a:	077b      	lsls	r3, r7, #29
 8000b6c:	08c9      	lsrs	r1, r1, #3
 8000b6e:	430b      	orrs	r3, r1
 8000b70:	08f8      	lsrs	r0, r7, #3
 8000b72:	e639      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b74:	185c      	adds	r4, r3, r1
 8000b76:	429c      	cmp	r4, r3
 8000b78:	419b      	sbcs	r3, r3
 8000b7a:	4440      	add	r0, r8
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	18c7      	adds	r7, r0, r3
 8000b80:	023b      	lsls	r3, r7, #8
 8000b82:	d400      	bmi.n	8000b86 <__aeabi_dadd+0x5fe>
 8000b84:	e625      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <__aeabi_dadd+0x674>)
 8000b88:	2601      	movs	r6, #1
 8000b8a:	401f      	ands	r7, r3
 8000b8c:	e621      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b8e:	0004      	movs	r4, r0
 8000b90:	3a20      	subs	r2, #32
 8000b92:	40d4      	lsrs	r4, r2
 8000b94:	4662      	mov	r2, ip
 8000b96:	2a20      	cmp	r2, #32
 8000b98:	d004      	beq.n	8000ba4 <__aeabi_dadd+0x61c>
 8000b9a:	2240      	movs	r2, #64	; 0x40
 8000b9c:	4666      	mov	r6, ip
 8000b9e:	1b92      	subs	r2, r2, r6
 8000ba0:	4090      	lsls	r0, r2
 8000ba2:	4303      	orrs	r3, r0
 8000ba4:	1e5a      	subs	r2, r3, #1
 8000ba6:	4193      	sbcs	r3, r2
 8000ba8:	431c      	orrs	r4, r3
 8000baa:	e67e      	b.n	80008aa <__aeabi_dadd+0x322>
 8000bac:	185c      	adds	r4, r3, r1
 8000bae:	428c      	cmp	r4, r1
 8000bb0:	4189      	sbcs	r1, r1
 8000bb2:	4440      	add	r0, r8
 8000bb4:	4249      	negs	r1, r1
 8000bb6:	1847      	adds	r7, r0, r1
 8000bb8:	e6dd      	b.n	8000976 <__aeabi_dadd+0x3ee>
 8000bba:	0023      	movs	r3, r4
 8000bbc:	433b      	orrs	r3, r7
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dadd+0x63a>
 8000bc0:	e6ad      	b.n	800091e <__aeabi_dadd+0x396>
 8000bc2:	e606      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000bc4:	0744      	lsls	r4, r0, #29
 8000bc6:	4323      	orrs	r3, r4
 8000bc8:	2480      	movs	r4, #128	; 0x80
 8000bca:	08c0      	lsrs	r0, r0, #3
 8000bcc:	0324      	lsls	r4, r4, #12
 8000bce:	4220      	tst	r0, r4
 8000bd0:	d008      	beq.n	8000be4 <__aeabi_dadd+0x65c>
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	08d6      	lsrs	r6, r2, #3
 8000bd6:	4226      	tst	r6, r4
 8000bd8:	d104      	bne.n	8000be4 <__aeabi_dadd+0x65c>
 8000bda:	4655      	mov	r5, sl
 8000bdc:	0030      	movs	r0, r6
 8000bde:	08cb      	lsrs	r3, r1, #3
 8000be0:	0751      	lsls	r1, r2, #29
 8000be2:	430b      	orrs	r3, r1
 8000be4:	0f5a      	lsrs	r2, r3, #29
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	0752      	lsls	r2, r2, #29
 8000bec:	4313      	orrs	r3, r2
 8000bee:	e619      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	4a01      	ldr	r2, [pc, #4]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000bf4:	001f      	movs	r7, r3
 8000bf6:	e55e      	b.n	80006b6 <__aeabi_dadd+0x12e>
 8000bf8:	000007ff 	.word	0x000007ff
 8000bfc:	ff7fffff 	.word	0xff7fffff

08000c00 <__aeabi_ddiv>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	4657      	mov	r7, sl
 8000c04:	464e      	mov	r6, r9
 8000c06:	4645      	mov	r5, r8
 8000c08:	46de      	mov	lr, fp
 8000c0a:	b5e0      	push	{r5, r6, r7, lr}
 8000c0c:	4681      	mov	r9, r0
 8000c0e:	0005      	movs	r5, r0
 8000c10:	030c      	lsls	r4, r1, #12
 8000c12:	0048      	lsls	r0, r1, #1
 8000c14:	4692      	mov	sl, r2
 8000c16:	001f      	movs	r7, r3
 8000c18:	b085      	sub	sp, #20
 8000c1a:	0b24      	lsrs	r4, r4, #12
 8000c1c:	0d40      	lsrs	r0, r0, #21
 8000c1e:	0fce      	lsrs	r6, r1, #31
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_ddiv+0x26>
 8000c24:	e156      	b.n	8000ed4 <__aeabi_ddiv+0x2d4>
 8000c26:	4bd4      	ldr	r3, [pc, #848]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_ddiv+0x2e>
 8000c2c:	e172      	b.n	8000f14 <__aeabi_ddiv+0x314>
 8000c2e:	0f6b      	lsrs	r3, r5, #29
 8000c30:	00e4      	lsls	r4, r4, #3
 8000c32:	431c      	orrs	r4, r3
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	4698      	mov	r8, r3
 8000c3c:	4bcf      	ldr	r3, [pc, #828]	; (8000f7c <__aeabi_ddiv+0x37c>)
 8000c3e:	00ed      	lsls	r5, r5, #3
 8000c40:	469b      	mov	fp, r3
 8000c42:	2300      	movs	r3, #0
 8000c44:	4699      	mov	r9, r3
 8000c46:	4483      	add	fp, r0
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	033c      	lsls	r4, r7, #12
 8000c4c:	007b      	lsls	r3, r7, #1
 8000c4e:	4650      	mov	r0, sl
 8000c50:	0b24      	lsrs	r4, r4, #12
 8000c52:	0d5b      	lsrs	r3, r3, #21
 8000c54:	0fff      	lsrs	r7, r7, #31
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_ddiv+0x5c>
 8000c5a:	e11f      	b.n	8000e9c <__aeabi_ddiv+0x29c>
 8000c5c:	4ac6      	ldr	r2, [pc, #792]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d100      	bne.n	8000c64 <__aeabi_ddiv+0x64>
 8000c62:	e162      	b.n	8000f2a <__aeabi_ddiv+0x32a>
 8000c64:	49c5      	ldr	r1, [pc, #788]	; (8000f7c <__aeabi_ddiv+0x37c>)
 8000c66:	0f42      	lsrs	r2, r0, #29
 8000c68:	468c      	mov	ip, r1
 8000c6a:	00e4      	lsls	r4, r4, #3
 8000c6c:	4659      	mov	r1, fp
 8000c6e:	4314      	orrs	r4, r2
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	4463      	add	r3, ip
 8000c74:	0412      	lsls	r2, r2, #16
 8000c76:	1acb      	subs	r3, r1, r3
 8000c78:	4314      	orrs	r4, r2
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	00c2      	lsls	r2, r0, #3
 8000c7e:	2000      	movs	r0, #0
 8000c80:	0033      	movs	r3, r6
 8000c82:	407b      	eors	r3, r7
 8000c84:	469a      	mov	sl, r3
 8000c86:	464b      	mov	r3, r9
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d827      	bhi.n	8000cdc <__aeabi_ddiv+0xdc>
 8000c8c:	49bc      	ldr	r1, [pc, #752]	; (8000f80 <__aeabi_ddiv+0x380>)
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	58cb      	ldr	r3, [r1, r3]
 8000c92:	469f      	mov	pc, r3
 8000c94:	46b2      	mov	sl, r6
 8000c96:	9b00      	ldr	r3, [sp, #0]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d016      	beq.n	8000cca <__aeabi_ddiv+0xca>
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_ddiv+0xa2>
 8000ca0:	e28e      	b.n	80011c0 <__aeabi_ddiv+0x5c0>
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_ddiv+0xa8>
 8000ca6:	e0d9      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2400      	movs	r4, #0
 8000cac:	2500      	movs	r5, #0
 8000cae:	4652      	mov	r2, sl
 8000cb0:	051b      	lsls	r3, r3, #20
 8000cb2:	4323      	orrs	r3, r4
 8000cb4:	07d2      	lsls	r2, r2, #31
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	0028      	movs	r0, r5
 8000cba:	0019      	movs	r1, r3
 8000cbc:	b005      	add	sp, #20
 8000cbe:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc0:	46bb      	mov	fp, r7
 8000cc2:	46b2      	mov	sl, r6
 8000cc4:	46a9      	mov	r9, r5
 8000cc6:	46a0      	mov	r8, r4
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cca:	2400      	movs	r4, #0
 8000ccc:	2500      	movs	r5, #0
 8000cce:	4baa      	ldr	r3, [pc, #680]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000cd0:	e7ed      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000cd2:	46ba      	mov	sl, r7
 8000cd4:	46a0      	mov	r8, r4
 8000cd6:	0015      	movs	r5, r2
 8000cd8:	9000      	str	r0, [sp, #0]
 8000cda:	e7dc      	b.n	8000c96 <__aeabi_ddiv+0x96>
 8000cdc:	4544      	cmp	r4, r8
 8000cde:	d200      	bcs.n	8000ce2 <__aeabi_ddiv+0xe2>
 8000ce0:	e1c7      	b.n	8001072 <__aeabi_ddiv+0x472>
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_ddiv+0xe6>
 8000ce4:	e1c2      	b.n	800106c <__aeabi_ddiv+0x46c>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	425b      	negs	r3, r3
 8000cea:	469c      	mov	ip, r3
 8000cec:	002e      	movs	r6, r5
 8000cee:	4640      	mov	r0, r8
 8000cf0:	2500      	movs	r5, #0
 8000cf2:	44e3      	add	fp, ip
 8000cf4:	0223      	lsls	r3, r4, #8
 8000cf6:	0e14      	lsrs	r4, r2, #24
 8000cf8:	431c      	orrs	r4, r3
 8000cfa:	0c1b      	lsrs	r3, r3, #16
 8000cfc:	4699      	mov	r9, r3
 8000cfe:	0423      	lsls	r3, r4, #16
 8000d00:	0c1f      	lsrs	r7, r3, #16
 8000d02:	0212      	lsls	r2, r2, #8
 8000d04:	4649      	mov	r1, r9
 8000d06:	9200      	str	r2, [sp, #0]
 8000d08:	9701      	str	r7, [sp, #4]
 8000d0a:	f7ff fa9f 	bl	800024c <__aeabi_uidivmod>
 8000d0e:	0002      	movs	r2, r0
 8000d10:	437a      	muls	r2, r7
 8000d12:	040b      	lsls	r3, r1, #16
 8000d14:	0c31      	lsrs	r1, r6, #16
 8000d16:	4680      	mov	r8, r0
 8000d18:	4319      	orrs	r1, r3
 8000d1a:	428a      	cmp	r2, r1
 8000d1c:	d907      	bls.n	8000d2e <__aeabi_ddiv+0x12e>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	425b      	negs	r3, r3
 8000d22:	469c      	mov	ip, r3
 8000d24:	1909      	adds	r1, r1, r4
 8000d26:	44e0      	add	r8, ip
 8000d28:	428c      	cmp	r4, r1
 8000d2a:	d800      	bhi.n	8000d2e <__aeabi_ddiv+0x12e>
 8000d2c:	e207      	b.n	800113e <__aeabi_ddiv+0x53e>
 8000d2e:	1a88      	subs	r0, r1, r2
 8000d30:	4649      	mov	r1, r9
 8000d32:	f7ff fa8b 	bl	800024c <__aeabi_uidivmod>
 8000d36:	0409      	lsls	r1, r1, #16
 8000d38:	468c      	mov	ip, r1
 8000d3a:	0431      	lsls	r1, r6, #16
 8000d3c:	4666      	mov	r6, ip
 8000d3e:	9a01      	ldr	r2, [sp, #4]
 8000d40:	0c09      	lsrs	r1, r1, #16
 8000d42:	4342      	muls	r2, r0
 8000d44:	0003      	movs	r3, r0
 8000d46:	4331      	orrs	r1, r6
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	d904      	bls.n	8000d56 <__aeabi_ddiv+0x156>
 8000d4c:	1909      	adds	r1, r1, r4
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	428c      	cmp	r4, r1
 8000d52:	d800      	bhi.n	8000d56 <__aeabi_ddiv+0x156>
 8000d54:	e1ed      	b.n	8001132 <__aeabi_ddiv+0x532>
 8000d56:	1a88      	subs	r0, r1, r2
 8000d58:	4642      	mov	r2, r8
 8000d5a:	0412      	lsls	r2, r2, #16
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	4690      	mov	r8, r2
 8000d60:	4641      	mov	r1, r8
 8000d62:	9b00      	ldr	r3, [sp, #0]
 8000d64:	040e      	lsls	r6, r1, #16
 8000d66:	0c1b      	lsrs	r3, r3, #16
 8000d68:	001f      	movs	r7, r3
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	9b00      	ldr	r3, [sp, #0]
 8000d6e:	0c36      	lsrs	r6, r6, #16
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	0c19      	lsrs	r1, r3, #16
 8000d74:	000b      	movs	r3, r1
 8000d76:	4373      	muls	r3, r6
 8000d78:	0c12      	lsrs	r2, r2, #16
 8000d7a:	437e      	muls	r6, r7
 8000d7c:	9103      	str	r1, [sp, #12]
 8000d7e:	4351      	muls	r1, r2
 8000d80:	437a      	muls	r2, r7
 8000d82:	0c1f      	lsrs	r7, r3, #16
 8000d84:	46bc      	mov	ip, r7
 8000d86:	1876      	adds	r6, r6, r1
 8000d88:	4466      	add	r6, ip
 8000d8a:	42b1      	cmp	r1, r6
 8000d8c:	d903      	bls.n	8000d96 <__aeabi_ddiv+0x196>
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	468c      	mov	ip, r1
 8000d94:	4462      	add	r2, ip
 8000d96:	0c31      	lsrs	r1, r6, #16
 8000d98:	188a      	adds	r2, r1, r2
 8000d9a:	0431      	lsls	r1, r6, #16
 8000d9c:	041e      	lsls	r6, r3, #16
 8000d9e:	0c36      	lsrs	r6, r6, #16
 8000da0:	198e      	adds	r6, r1, r6
 8000da2:	4290      	cmp	r0, r2
 8000da4:	d302      	bcc.n	8000dac <__aeabi_ddiv+0x1ac>
 8000da6:	d112      	bne.n	8000dce <__aeabi_ddiv+0x1ce>
 8000da8:	42b5      	cmp	r5, r6
 8000daa:	d210      	bcs.n	8000dce <__aeabi_ddiv+0x1ce>
 8000dac:	4643      	mov	r3, r8
 8000dae:	1e59      	subs	r1, r3, #1
 8000db0:	9b00      	ldr	r3, [sp, #0]
 8000db2:	469c      	mov	ip, r3
 8000db4:	4465      	add	r5, ip
 8000db6:	001f      	movs	r7, r3
 8000db8:	429d      	cmp	r5, r3
 8000dba:	419b      	sbcs	r3, r3
 8000dbc:	425b      	negs	r3, r3
 8000dbe:	191b      	adds	r3, r3, r4
 8000dc0:	18c0      	adds	r0, r0, r3
 8000dc2:	4284      	cmp	r4, r0
 8000dc4:	d200      	bcs.n	8000dc8 <__aeabi_ddiv+0x1c8>
 8000dc6:	e1a0      	b.n	800110a <__aeabi_ddiv+0x50a>
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_ddiv+0x1cc>
 8000dca:	e19b      	b.n	8001104 <__aeabi_ddiv+0x504>
 8000dcc:	4688      	mov	r8, r1
 8000dce:	1bae      	subs	r6, r5, r6
 8000dd0:	42b5      	cmp	r5, r6
 8000dd2:	41ad      	sbcs	r5, r5
 8000dd4:	1a80      	subs	r0, r0, r2
 8000dd6:	426d      	negs	r5, r5
 8000dd8:	1b40      	subs	r0, r0, r5
 8000dda:	4284      	cmp	r4, r0
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_ddiv+0x1e0>
 8000dde:	e1d5      	b.n	800118c <__aeabi_ddiv+0x58c>
 8000de0:	4649      	mov	r1, r9
 8000de2:	f7ff fa33 	bl	800024c <__aeabi_uidivmod>
 8000de6:	9a01      	ldr	r2, [sp, #4]
 8000de8:	040b      	lsls	r3, r1, #16
 8000dea:	4342      	muls	r2, r0
 8000dec:	0c31      	lsrs	r1, r6, #16
 8000dee:	0005      	movs	r5, r0
 8000df0:	4319      	orrs	r1, r3
 8000df2:	428a      	cmp	r2, r1
 8000df4:	d900      	bls.n	8000df8 <__aeabi_ddiv+0x1f8>
 8000df6:	e16c      	b.n	80010d2 <__aeabi_ddiv+0x4d2>
 8000df8:	1a88      	subs	r0, r1, r2
 8000dfa:	4649      	mov	r1, r9
 8000dfc:	f7ff fa26 	bl	800024c <__aeabi_uidivmod>
 8000e00:	9a01      	ldr	r2, [sp, #4]
 8000e02:	0436      	lsls	r6, r6, #16
 8000e04:	4342      	muls	r2, r0
 8000e06:	0409      	lsls	r1, r1, #16
 8000e08:	0c36      	lsrs	r6, r6, #16
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	430e      	orrs	r6, r1
 8000e0e:	42b2      	cmp	r2, r6
 8000e10:	d900      	bls.n	8000e14 <__aeabi_ddiv+0x214>
 8000e12:	e153      	b.n	80010bc <__aeabi_ddiv+0x4bc>
 8000e14:	9803      	ldr	r0, [sp, #12]
 8000e16:	1ab6      	subs	r6, r6, r2
 8000e18:	0002      	movs	r2, r0
 8000e1a:	042d      	lsls	r5, r5, #16
 8000e1c:	431d      	orrs	r5, r3
 8000e1e:	9f02      	ldr	r7, [sp, #8]
 8000e20:	042b      	lsls	r3, r5, #16
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	435a      	muls	r2, r3
 8000e26:	437b      	muls	r3, r7
 8000e28:	469c      	mov	ip, r3
 8000e2a:	0c29      	lsrs	r1, r5, #16
 8000e2c:	4348      	muls	r0, r1
 8000e2e:	0c13      	lsrs	r3, r2, #16
 8000e30:	4484      	add	ip, r0
 8000e32:	4463      	add	r3, ip
 8000e34:	4379      	muls	r1, r7
 8000e36:	4298      	cmp	r0, r3
 8000e38:	d903      	bls.n	8000e42 <__aeabi_ddiv+0x242>
 8000e3a:	2080      	movs	r0, #128	; 0x80
 8000e3c:	0240      	lsls	r0, r0, #9
 8000e3e:	4684      	mov	ip, r0
 8000e40:	4461      	add	r1, ip
 8000e42:	0c18      	lsrs	r0, r3, #16
 8000e44:	0412      	lsls	r2, r2, #16
 8000e46:	041b      	lsls	r3, r3, #16
 8000e48:	0c12      	lsrs	r2, r2, #16
 8000e4a:	1841      	adds	r1, r0, r1
 8000e4c:	189b      	adds	r3, r3, r2
 8000e4e:	428e      	cmp	r6, r1
 8000e50:	d200      	bcs.n	8000e54 <__aeabi_ddiv+0x254>
 8000e52:	e0ff      	b.n	8001054 <__aeabi_ddiv+0x454>
 8000e54:	d100      	bne.n	8000e58 <__aeabi_ddiv+0x258>
 8000e56:	e0fa      	b.n	800104e <__aeabi_ddiv+0x44e>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	431d      	orrs	r5, r3
 8000e5c:	4a49      	ldr	r2, [pc, #292]	; (8000f84 <__aeabi_ddiv+0x384>)
 8000e5e:	445a      	add	r2, fp
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	dc00      	bgt.n	8000e66 <__aeabi_ddiv+0x266>
 8000e64:	e0aa      	b.n	8000fbc <__aeabi_ddiv+0x3bc>
 8000e66:	076b      	lsls	r3, r5, #29
 8000e68:	d000      	beq.n	8000e6c <__aeabi_ddiv+0x26c>
 8000e6a:	e13d      	b.n	80010e8 <__aeabi_ddiv+0x4e8>
 8000e6c:	08ed      	lsrs	r5, r5, #3
 8000e6e:	4643      	mov	r3, r8
 8000e70:	01db      	lsls	r3, r3, #7
 8000e72:	d506      	bpl.n	8000e82 <__aeabi_ddiv+0x282>
 8000e74:	4642      	mov	r2, r8
 8000e76:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <__aeabi_ddiv+0x388>)
 8000e78:	401a      	ands	r2, r3
 8000e7a:	4690      	mov	r8, r2
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	00d2      	lsls	r2, r2, #3
 8000e80:	445a      	add	r2, fp
 8000e82:	4b42      	ldr	r3, [pc, #264]	; (8000f8c <__aeabi_ddiv+0x38c>)
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dd00      	ble.n	8000e8a <__aeabi_ddiv+0x28a>
 8000e88:	e71f      	b.n	8000cca <__aeabi_ddiv+0xca>
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	075b      	lsls	r3, r3, #29
 8000e8e:	431d      	orrs	r5, r3
 8000e90:	4643      	mov	r3, r8
 8000e92:	0552      	lsls	r2, r2, #21
 8000e94:	025c      	lsls	r4, r3, #9
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	0d53      	lsrs	r3, r2, #21
 8000e9a:	e708      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000e9c:	4652      	mov	r2, sl
 8000e9e:	4322      	orrs	r2, r4
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x2a4>
 8000ea2:	e07b      	b.n	8000f9c <__aeabi_ddiv+0x39c>
 8000ea4:	2c00      	cmp	r4, #0
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x2aa>
 8000ea8:	e0fa      	b.n	80010a0 <__aeabi_ddiv+0x4a0>
 8000eaa:	0020      	movs	r0, r4
 8000eac:	f001 fa22 	bl	80022f4 <__clzsi2>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	3a0b      	subs	r2, #11
 8000eb4:	231d      	movs	r3, #29
 8000eb6:	0001      	movs	r1, r0
 8000eb8:	1a9b      	subs	r3, r3, r2
 8000eba:	4652      	mov	r2, sl
 8000ebc:	3908      	subs	r1, #8
 8000ebe:	40da      	lsrs	r2, r3
 8000ec0:	408c      	lsls	r4, r1
 8000ec2:	4314      	orrs	r4, r2
 8000ec4:	4652      	mov	r2, sl
 8000ec6:	408a      	lsls	r2, r1
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <__aeabi_ddiv+0x390>)
 8000eca:	4458      	add	r0, fp
 8000ecc:	469b      	mov	fp, r3
 8000ece:	4483      	add	fp, r0
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	e6d5      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000ed4:	464b      	mov	r3, r9
 8000ed6:	4323      	orrs	r3, r4
 8000ed8:	4698      	mov	r8, r3
 8000eda:	d044      	beq.n	8000f66 <__aeabi_ddiv+0x366>
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x2e2>
 8000ee0:	e0ce      	b.n	8001080 <__aeabi_ddiv+0x480>
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f001 fa06 	bl	80022f4 <__clzsi2>
 8000ee8:	0001      	movs	r1, r0
 8000eea:	0002      	movs	r2, r0
 8000eec:	390b      	subs	r1, #11
 8000eee:	231d      	movs	r3, #29
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	0010      	movs	r0, r2
 8000ef6:	40d9      	lsrs	r1, r3
 8000ef8:	3808      	subs	r0, #8
 8000efa:	4084      	lsls	r4, r0
 8000efc:	000b      	movs	r3, r1
 8000efe:	464d      	mov	r5, r9
 8000f00:	4323      	orrs	r3, r4
 8000f02:	4698      	mov	r8, r3
 8000f04:	4085      	lsls	r5, r0
 8000f06:	4823      	ldr	r0, [pc, #140]	; (8000f94 <__aeabi_ddiv+0x394>)
 8000f08:	1a83      	subs	r3, r0, r2
 8000f0a:	469b      	mov	fp, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4699      	mov	r9, r3
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	e69a      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f14:	464b      	mov	r3, r9
 8000f16:	4323      	orrs	r3, r4
 8000f18:	4698      	mov	r8, r3
 8000f1a:	d11d      	bne.n	8000f58 <__aeabi_ddiv+0x358>
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	4699      	mov	r9, r3
 8000f20:	3b06      	subs	r3, #6
 8000f22:	2500      	movs	r5, #0
 8000f24:	4683      	mov	fp, r0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	e68f      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	4322      	orrs	r2, r4
 8000f2e:	d109      	bne.n	8000f44 <__aeabi_ddiv+0x344>
 8000f30:	2302      	movs	r3, #2
 8000f32:	4649      	mov	r1, r9
 8000f34:	4319      	orrs	r1, r3
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <__aeabi_ddiv+0x398>)
 8000f38:	4689      	mov	r9, r1
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	2002      	movs	r0, #2
 8000f40:	44e3      	add	fp, ip
 8000f42:	e69d      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000f44:	2303      	movs	r3, #3
 8000f46:	464a      	mov	r2, r9
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <__aeabi_ddiv+0x398>)
 8000f4c:	4691      	mov	r9, r2
 8000f4e:	469c      	mov	ip, r3
 8000f50:	4652      	mov	r2, sl
 8000f52:	2003      	movs	r0, #3
 8000f54:	44e3      	add	fp, ip
 8000f56:	e693      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000f58:	230c      	movs	r3, #12
 8000f5a:	4699      	mov	r9, r3
 8000f5c:	3b09      	subs	r3, #9
 8000f5e:	46a0      	mov	r8, r4
 8000f60:	4683      	mov	fp, r0
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	e671      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f66:	2304      	movs	r3, #4
 8000f68:	4699      	mov	r9, r3
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	469b      	mov	fp, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	2500      	movs	r5, #0
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	e669      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	000007ff 	.word	0x000007ff
 8000f7c:	fffffc01 	.word	0xfffffc01
 8000f80:	0800b05c 	.word	0x0800b05c
 8000f84:	000003ff 	.word	0x000003ff
 8000f88:	feffffff 	.word	0xfeffffff
 8000f8c:	000007fe 	.word	0x000007fe
 8000f90:	000003f3 	.word	0x000003f3
 8000f94:	fffffc0d 	.word	0xfffffc0d
 8000f98:	fffff801 	.word	0xfffff801
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	4319      	orrs	r1, r3
 8000fa2:	4689      	mov	r9, r1
 8000fa4:	2400      	movs	r4, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	e66a      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000faa:	2300      	movs	r3, #0
 8000fac:	2480      	movs	r4, #128	; 0x80
 8000fae:	469a      	mov	sl, r3
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	4b8a      	ldr	r3, [pc, #552]	; (80011dc <__aeabi_ddiv+0x5dc>)
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	e67a      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000fb8:	2501      	movs	r5, #1
 8000fba:	426d      	negs	r5, r5
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	2b38      	cmp	r3, #56	; 0x38
 8000fc2:	dd00      	ble.n	8000fc6 <__aeabi_ddiv+0x3c6>
 8000fc4:	e670      	b.n	8000ca8 <__aeabi_ddiv+0xa8>
 8000fc6:	2b1f      	cmp	r3, #31
 8000fc8:	dc00      	bgt.n	8000fcc <__aeabi_ddiv+0x3cc>
 8000fca:	e0bf      	b.n	800114c <__aeabi_ddiv+0x54c>
 8000fcc:	211f      	movs	r1, #31
 8000fce:	4249      	negs	r1, r1
 8000fd0:	1a8a      	subs	r2, r1, r2
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	40d1      	lsrs	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	2b20      	cmp	r3, #32
 8000fda:	d004      	beq.n	8000fe6 <__aeabi_ddiv+0x3e6>
 8000fdc:	4641      	mov	r1, r8
 8000fde:	4b80      	ldr	r3, [pc, #512]	; (80011e0 <__aeabi_ddiv+0x5e0>)
 8000fe0:	445b      	add	r3, fp
 8000fe2:	4099      	lsls	r1, r3
 8000fe4:	430d      	orrs	r5, r1
 8000fe6:	1e6b      	subs	r3, r5, #1
 8000fe8:	419d      	sbcs	r5, r3
 8000fea:	2307      	movs	r3, #7
 8000fec:	432a      	orrs	r2, r5
 8000fee:	001d      	movs	r5, r3
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	4015      	ands	r5, r2
 8000ff4:	4213      	tst	r3, r2
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0x3fa>
 8000ff8:	e0d4      	b.n	80011a4 <__aeabi_ddiv+0x5a4>
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4011      	ands	r1, r2
 8001000:	2904      	cmp	r1, #4
 8001002:	d100      	bne.n	8001006 <__aeabi_ddiv+0x406>
 8001004:	e0cb      	b.n	800119e <__aeabi_ddiv+0x59e>
 8001006:	1d11      	adds	r1, r2, #4
 8001008:	4291      	cmp	r1, r2
 800100a:	4192      	sbcs	r2, r2
 800100c:	4252      	negs	r2, r2
 800100e:	189b      	adds	r3, r3, r2
 8001010:	000a      	movs	r2, r1
 8001012:	0219      	lsls	r1, r3, #8
 8001014:	d400      	bmi.n	8001018 <__aeabi_ddiv+0x418>
 8001016:	e0c2      	b.n	800119e <__aeabi_ddiv+0x59e>
 8001018:	2301      	movs	r3, #1
 800101a:	2400      	movs	r4, #0
 800101c:	2500      	movs	r5, #0
 800101e:	e646      	b.n	8000cae <__aeabi_ddiv+0xae>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	4641      	mov	r1, r8
 8001024:	031b      	lsls	r3, r3, #12
 8001026:	4219      	tst	r1, r3
 8001028:	d008      	beq.n	800103c <__aeabi_ddiv+0x43c>
 800102a:	421c      	tst	r4, r3
 800102c:	d106      	bne.n	800103c <__aeabi_ddiv+0x43c>
 800102e:	431c      	orrs	r4, r3
 8001030:	0324      	lsls	r4, r4, #12
 8001032:	46ba      	mov	sl, r7
 8001034:	0015      	movs	r5, r2
 8001036:	4b69      	ldr	r3, [pc, #420]	; (80011dc <__aeabi_ddiv+0x5dc>)
 8001038:	0b24      	lsrs	r4, r4, #12
 800103a:	e638      	b.n	8000cae <__aeabi_ddiv+0xae>
 800103c:	2480      	movs	r4, #128	; 0x80
 800103e:	4643      	mov	r3, r8
 8001040:	0324      	lsls	r4, r4, #12
 8001042:	431c      	orrs	r4, r3
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	46b2      	mov	sl, r6
 8001048:	4b64      	ldr	r3, [pc, #400]	; (80011dc <__aeabi_ddiv+0x5dc>)
 800104a:	0b24      	lsrs	r4, r4, #12
 800104c:	e62f      	b.n	8000cae <__aeabi_ddiv+0xae>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x454>
 8001052:	e703      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 8001054:	19a6      	adds	r6, r4, r6
 8001056:	1e68      	subs	r0, r5, #1
 8001058:	42a6      	cmp	r6, r4
 800105a:	d200      	bcs.n	800105e <__aeabi_ddiv+0x45e>
 800105c:	e08d      	b.n	800117a <__aeabi_ddiv+0x57a>
 800105e:	428e      	cmp	r6, r1
 8001060:	d200      	bcs.n	8001064 <__aeabi_ddiv+0x464>
 8001062:	e0a3      	b.n	80011ac <__aeabi_ddiv+0x5ac>
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x468>
 8001066:	e0b3      	b.n	80011d0 <__aeabi_ddiv+0x5d0>
 8001068:	0005      	movs	r5, r0
 800106a:	e6f5      	b.n	8000e58 <__aeabi_ddiv+0x258>
 800106c:	42aa      	cmp	r2, r5
 800106e:	d900      	bls.n	8001072 <__aeabi_ddiv+0x472>
 8001070:	e639      	b.n	8000ce6 <__aeabi_ddiv+0xe6>
 8001072:	4643      	mov	r3, r8
 8001074:	07de      	lsls	r6, r3, #31
 8001076:	0858      	lsrs	r0, r3, #1
 8001078:	086b      	lsrs	r3, r5, #1
 800107a:	431e      	orrs	r6, r3
 800107c:	07ed      	lsls	r5, r5, #31
 800107e:	e639      	b.n	8000cf4 <__aeabi_ddiv+0xf4>
 8001080:	4648      	mov	r0, r9
 8001082:	f001 f937 	bl	80022f4 <__clzsi2>
 8001086:	0001      	movs	r1, r0
 8001088:	0002      	movs	r2, r0
 800108a:	3115      	adds	r1, #21
 800108c:	3220      	adds	r2, #32
 800108e:	291c      	cmp	r1, #28
 8001090:	dc00      	bgt.n	8001094 <__aeabi_ddiv+0x494>
 8001092:	e72c      	b.n	8000eee <__aeabi_ddiv+0x2ee>
 8001094:	464b      	mov	r3, r9
 8001096:	3808      	subs	r0, #8
 8001098:	4083      	lsls	r3, r0
 800109a:	2500      	movs	r5, #0
 800109c:	4698      	mov	r8, r3
 800109e:	e732      	b.n	8000f06 <__aeabi_ddiv+0x306>
 80010a0:	f001 f928 	bl	80022f4 <__clzsi2>
 80010a4:	0003      	movs	r3, r0
 80010a6:	001a      	movs	r2, r3
 80010a8:	3215      	adds	r2, #21
 80010aa:	3020      	adds	r0, #32
 80010ac:	2a1c      	cmp	r2, #28
 80010ae:	dc00      	bgt.n	80010b2 <__aeabi_ddiv+0x4b2>
 80010b0:	e700      	b.n	8000eb4 <__aeabi_ddiv+0x2b4>
 80010b2:	4654      	mov	r4, sl
 80010b4:	3b08      	subs	r3, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	409c      	lsls	r4, r3
 80010ba:	e705      	b.n	8000ec8 <__aeabi_ddiv+0x2c8>
 80010bc:	1936      	adds	r6, r6, r4
 80010be:	3b01      	subs	r3, #1
 80010c0:	42b4      	cmp	r4, r6
 80010c2:	d900      	bls.n	80010c6 <__aeabi_ddiv+0x4c6>
 80010c4:	e6a6      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010c6:	42b2      	cmp	r2, r6
 80010c8:	d800      	bhi.n	80010cc <__aeabi_ddiv+0x4cc>
 80010ca:	e6a3      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010cc:	1e83      	subs	r3, r0, #2
 80010ce:	1936      	adds	r6, r6, r4
 80010d0:	e6a0      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010d2:	1909      	adds	r1, r1, r4
 80010d4:	3d01      	subs	r5, #1
 80010d6:	428c      	cmp	r4, r1
 80010d8:	d900      	bls.n	80010dc <__aeabi_ddiv+0x4dc>
 80010da:	e68d      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010dc:	428a      	cmp	r2, r1
 80010de:	d800      	bhi.n	80010e2 <__aeabi_ddiv+0x4e2>
 80010e0:	e68a      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010e2:	1e85      	subs	r5, r0, #2
 80010e4:	1909      	adds	r1, r1, r4
 80010e6:	e687      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010e8:	230f      	movs	r3, #15
 80010ea:	402b      	ands	r3, r5
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d100      	bne.n	80010f2 <__aeabi_ddiv+0x4f2>
 80010f0:	e6bc      	b.n	8000e6c <__aeabi_ddiv+0x26c>
 80010f2:	2305      	movs	r3, #5
 80010f4:	425b      	negs	r3, r3
 80010f6:	42ab      	cmp	r3, r5
 80010f8:	419b      	sbcs	r3, r3
 80010fa:	3504      	adds	r5, #4
 80010fc:	425b      	negs	r3, r3
 80010fe:	08ed      	lsrs	r5, r5, #3
 8001100:	4498      	add	r8, r3
 8001102:	e6b4      	b.n	8000e6e <__aeabi_ddiv+0x26e>
 8001104:	42af      	cmp	r7, r5
 8001106:	d900      	bls.n	800110a <__aeabi_ddiv+0x50a>
 8001108:	e660      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 800110a:	4282      	cmp	r2, r0
 800110c:	d804      	bhi.n	8001118 <__aeabi_ddiv+0x518>
 800110e:	d000      	beq.n	8001112 <__aeabi_ddiv+0x512>
 8001110:	e65c      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8001112:	42ae      	cmp	r6, r5
 8001114:	d800      	bhi.n	8001118 <__aeabi_ddiv+0x518>
 8001116:	e659      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8001118:	2302      	movs	r3, #2
 800111a:	425b      	negs	r3, r3
 800111c:	469c      	mov	ip, r3
 800111e:	9b00      	ldr	r3, [sp, #0]
 8001120:	44e0      	add	r8, ip
 8001122:	469c      	mov	ip, r3
 8001124:	4465      	add	r5, ip
 8001126:	429d      	cmp	r5, r3
 8001128:	419b      	sbcs	r3, r3
 800112a:	425b      	negs	r3, r3
 800112c:	191b      	adds	r3, r3, r4
 800112e:	18c0      	adds	r0, r0, r3
 8001130:	e64d      	b.n	8000dce <__aeabi_ddiv+0x1ce>
 8001132:	428a      	cmp	r2, r1
 8001134:	d800      	bhi.n	8001138 <__aeabi_ddiv+0x538>
 8001136:	e60e      	b.n	8000d56 <__aeabi_ddiv+0x156>
 8001138:	1e83      	subs	r3, r0, #2
 800113a:	1909      	adds	r1, r1, r4
 800113c:	e60b      	b.n	8000d56 <__aeabi_ddiv+0x156>
 800113e:	428a      	cmp	r2, r1
 8001140:	d800      	bhi.n	8001144 <__aeabi_ddiv+0x544>
 8001142:	e5f4      	b.n	8000d2e <__aeabi_ddiv+0x12e>
 8001144:	1e83      	subs	r3, r0, #2
 8001146:	4698      	mov	r8, r3
 8001148:	1909      	adds	r1, r1, r4
 800114a:	e5f0      	b.n	8000d2e <__aeabi_ddiv+0x12e>
 800114c:	4925      	ldr	r1, [pc, #148]	; (80011e4 <__aeabi_ddiv+0x5e4>)
 800114e:	0028      	movs	r0, r5
 8001150:	4459      	add	r1, fp
 8001152:	408d      	lsls	r5, r1
 8001154:	4642      	mov	r2, r8
 8001156:	408a      	lsls	r2, r1
 8001158:	1e69      	subs	r1, r5, #1
 800115a:	418d      	sbcs	r5, r1
 800115c:	4641      	mov	r1, r8
 800115e:	40d8      	lsrs	r0, r3
 8001160:	40d9      	lsrs	r1, r3
 8001162:	4302      	orrs	r2, r0
 8001164:	432a      	orrs	r2, r5
 8001166:	000b      	movs	r3, r1
 8001168:	0751      	lsls	r1, r2, #29
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0x56e>
 800116c:	e751      	b.n	8001012 <__aeabi_ddiv+0x412>
 800116e:	210f      	movs	r1, #15
 8001170:	4011      	ands	r1, r2
 8001172:	2904      	cmp	r1, #4
 8001174:	d000      	beq.n	8001178 <__aeabi_ddiv+0x578>
 8001176:	e746      	b.n	8001006 <__aeabi_ddiv+0x406>
 8001178:	e74b      	b.n	8001012 <__aeabi_ddiv+0x412>
 800117a:	0005      	movs	r5, r0
 800117c:	428e      	cmp	r6, r1
 800117e:	d000      	beq.n	8001182 <__aeabi_ddiv+0x582>
 8001180:	e66a      	b.n	8000e58 <__aeabi_ddiv+0x258>
 8001182:	9a00      	ldr	r2, [sp, #0]
 8001184:	4293      	cmp	r3, r2
 8001186:	d000      	beq.n	800118a <__aeabi_ddiv+0x58a>
 8001188:	e666      	b.n	8000e58 <__aeabi_ddiv+0x258>
 800118a:	e667      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 800118c:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <__aeabi_ddiv+0x5e8>)
 800118e:	445a      	add	r2, fp
 8001190:	2a00      	cmp	r2, #0
 8001192:	dc00      	bgt.n	8001196 <__aeabi_ddiv+0x596>
 8001194:	e710      	b.n	8000fb8 <__aeabi_ddiv+0x3b8>
 8001196:	2301      	movs	r3, #1
 8001198:	2500      	movs	r5, #0
 800119a:	4498      	add	r8, r3
 800119c:	e667      	b.n	8000e6e <__aeabi_ddiv+0x26e>
 800119e:	075d      	lsls	r5, r3, #29
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	0b1c      	lsrs	r4, r3, #12
 80011a4:	08d2      	lsrs	r2, r2, #3
 80011a6:	2300      	movs	r3, #0
 80011a8:	4315      	orrs	r5, r2
 80011aa:	e580      	b.n	8000cae <__aeabi_ddiv+0xae>
 80011ac:	9800      	ldr	r0, [sp, #0]
 80011ae:	3d02      	subs	r5, #2
 80011b0:	0042      	lsls	r2, r0, #1
 80011b2:	4282      	cmp	r2, r0
 80011b4:	41bf      	sbcs	r7, r7
 80011b6:	427f      	negs	r7, r7
 80011b8:	193c      	adds	r4, r7, r4
 80011ba:	1936      	adds	r6, r6, r4
 80011bc:	9200      	str	r2, [sp, #0]
 80011be:	e7dd      	b.n	800117c <__aeabi_ddiv+0x57c>
 80011c0:	2480      	movs	r4, #128	; 0x80
 80011c2:	4643      	mov	r3, r8
 80011c4:	0324      	lsls	r4, r4, #12
 80011c6:	431c      	orrs	r4, r3
 80011c8:	0324      	lsls	r4, r4, #12
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__aeabi_ddiv+0x5dc>)
 80011cc:	0b24      	lsrs	r4, r4, #12
 80011ce:	e56e      	b.n	8000cae <__aeabi_ddiv+0xae>
 80011d0:	9a00      	ldr	r2, [sp, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d3ea      	bcc.n	80011ac <__aeabi_ddiv+0x5ac>
 80011d6:	0005      	movs	r5, r0
 80011d8:	e7d3      	b.n	8001182 <__aeabi_ddiv+0x582>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	000007ff 	.word	0x000007ff
 80011e0:	0000043e 	.word	0x0000043e
 80011e4:	0000041e 	.word	0x0000041e
 80011e8:	000003ff 	.word	0x000003ff

080011ec <__eqdf2>:
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	464e      	mov	r6, r9
 80011f0:	4645      	mov	r5, r8
 80011f2:	46de      	mov	lr, fp
 80011f4:	4657      	mov	r7, sl
 80011f6:	4690      	mov	r8, r2
 80011f8:	b5e0      	push	{r5, r6, r7, lr}
 80011fa:	0017      	movs	r7, r2
 80011fc:	031a      	lsls	r2, r3, #12
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0005      	movs	r5, r0
 8001202:	4684      	mov	ip, r0
 8001204:	4819      	ldr	r0, [pc, #100]	; (800126c <__eqdf2+0x80>)
 8001206:	030e      	lsls	r6, r1, #12
 8001208:	004c      	lsls	r4, r1, #1
 800120a:	4691      	mov	r9, r2
 800120c:	005a      	lsls	r2, r3, #1
 800120e:	0fdb      	lsrs	r3, r3, #31
 8001210:	469b      	mov	fp, r3
 8001212:	0b36      	lsrs	r6, r6, #12
 8001214:	0d64      	lsrs	r4, r4, #21
 8001216:	0fc9      	lsrs	r1, r1, #31
 8001218:	0d52      	lsrs	r2, r2, #21
 800121a:	4284      	cmp	r4, r0
 800121c:	d019      	beq.n	8001252 <__eqdf2+0x66>
 800121e:	4282      	cmp	r2, r0
 8001220:	d010      	beq.n	8001244 <__eqdf2+0x58>
 8001222:	2001      	movs	r0, #1
 8001224:	4294      	cmp	r4, r2
 8001226:	d10e      	bne.n	8001246 <__eqdf2+0x5a>
 8001228:	454e      	cmp	r6, r9
 800122a:	d10c      	bne.n	8001246 <__eqdf2+0x5a>
 800122c:	2001      	movs	r0, #1
 800122e:	45c4      	cmp	ip, r8
 8001230:	d109      	bne.n	8001246 <__eqdf2+0x5a>
 8001232:	4559      	cmp	r1, fp
 8001234:	d017      	beq.n	8001266 <__eqdf2+0x7a>
 8001236:	2c00      	cmp	r4, #0
 8001238:	d105      	bne.n	8001246 <__eqdf2+0x5a>
 800123a:	0030      	movs	r0, r6
 800123c:	4328      	orrs	r0, r5
 800123e:	1e43      	subs	r3, r0, #1
 8001240:	4198      	sbcs	r0, r3
 8001242:	e000      	b.n	8001246 <__eqdf2+0x5a>
 8001244:	2001      	movs	r0, #1
 8001246:	bcf0      	pop	{r4, r5, r6, r7}
 8001248:	46bb      	mov	fp, r7
 800124a:	46b2      	mov	sl, r6
 800124c:	46a9      	mov	r9, r5
 800124e:	46a0      	mov	r8, r4
 8001250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001252:	0033      	movs	r3, r6
 8001254:	2001      	movs	r0, #1
 8001256:	432b      	orrs	r3, r5
 8001258:	d1f5      	bne.n	8001246 <__eqdf2+0x5a>
 800125a:	42a2      	cmp	r2, r4
 800125c:	d1f3      	bne.n	8001246 <__eqdf2+0x5a>
 800125e:	464b      	mov	r3, r9
 8001260:	433b      	orrs	r3, r7
 8001262:	d1f0      	bne.n	8001246 <__eqdf2+0x5a>
 8001264:	e7e2      	b.n	800122c <__eqdf2+0x40>
 8001266:	2000      	movs	r0, #0
 8001268:	e7ed      	b.n	8001246 <__eqdf2+0x5a>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	000007ff 	.word	0x000007ff

08001270 <__gedf2>:
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	4647      	mov	r7, r8
 8001274:	46ce      	mov	lr, r9
 8001276:	0004      	movs	r4, r0
 8001278:	0018      	movs	r0, r3
 800127a:	0016      	movs	r6, r2
 800127c:	031b      	lsls	r3, r3, #12
 800127e:	0b1b      	lsrs	r3, r3, #12
 8001280:	4d2d      	ldr	r5, [pc, #180]	; (8001338 <__gedf2+0xc8>)
 8001282:	004a      	lsls	r2, r1, #1
 8001284:	4699      	mov	r9, r3
 8001286:	b580      	push	{r7, lr}
 8001288:	0043      	lsls	r3, r0, #1
 800128a:	030f      	lsls	r7, r1, #12
 800128c:	46a4      	mov	ip, r4
 800128e:	46b0      	mov	r8, r6
 8001290:	0b3f      	lsrs	r7, r7, #12
 8001292:	0d52      	lsrs	r2, r2, #21
 8001294:	0fc9      	lsrs	r1, r1, #31
 8001296:	0d5b      	lsrs	r3, r3, #21
 8001298:	0fc0      	lsrs	r0, r0, #31
 800129a:	42aa      	cmp	r2, r5
 800129c:	d021      	beq.n	80012e2 <__gedf2+0x72>
 800129e:	42ab      	cmp	r3, r5
 80012a0:	d013      	beq.n	80012ca <__gedf2+0x5a>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d122      	bne.n	80012ec <__gedf2+0x7c>
 80012a6:	433c      	orrs	r4, r7
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <__gedf2+0x42>
 80012ac:	464d      	mov	r5, r9
 80012ae:	432e      	orrs	r6, r5
 80012b0:	d022      	beq.n	80012f8 <__gedf2+0x88>
 80012b2:	2c00      	cmp	r4, #0
 80012b4:	d010      	beq.n	80012d8 <__gedf2+0x68>
 80012b6:	4281      	cmp	r1, r0
 80012b8:	d022      	beq.n	8001300 <__gedf2+0x90>
 80012ba:	2002      	movs	r0, #2
 80012bc:	3901      	subs	r1, #1
 80012be:	4008      	ands	r0, r1
 80012c0:	3801      	subs	r0, #1
 80012c2:	bcc0      	pop	{r6, r7}
 80012c4:	46b9      	mov	r9, r7
 80012c6:	46b0      	mov	r8, r6
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ca:	464d      	mov	r5, r9
 80012cc:	432e      	orrs	r6, r5
 80012ce:	d129      	bne.n	8001324 <__gedf2+0xb4>
 80012d0:	2a00      	cmp	r2, #0
 80012d2:	d1f0      	bne.n	80012b6 <__gedf2+0x46>
 80012d4:	433c      	orrs	r4, r7
 80012d6:	d1ee      	bne.n	80012b6 <__gedf2+0x46>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1f2      	bne.n	80012c2 <__gedf2+0x52>
 80012dc:	2001      	movs	r0, #1
 80012de:	4240      	negs	r0, r0
 80012e0:	e7ef      	b.n	80012c2 <__gedf2+0x52>
 80012e2:	003d      	movs	r5, r7
 80012e4:	4325      	orrs	r5, r4
 80012e6:	d11d      	bne.n	8001324 <__gedf2+0xb4>
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d0ee      	beq.n	80012ca <__gedf2+0x5a>
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e2      	bne.n	80012b6 <__gedf2+0x46>
 80012f0:	464c      	mov	r4, r9
 80012f2:	4326      	orrs	r6, r4
 80012f4:	d1df      	bne.n	80012b6 <__gedf2+0x46>
 80012f6:	e7e0      	b.n	80012ba <__gedf2+0x4a>
 80012f8:	2000      	movs	r0, #0
 80012fa:	2c00      	cmp	r4, #0
 80012fc:	d0e1      	beq.n	80012c2 <__gedf2+0x52>
 80012fe:	e7dc      	b.n	80012ba <__gedf2+0x4a>
 8001300:	429a      	cmp	r2, r3
 8001302:	dc0a      	bgt.n	800131a <__gedf2+0xaa>
 8001304:	dbe8      	blt.n	80012d8 <__gedf2+0x68>
 8001306:	454f      	cmp	r7, r9
 8001308:	d8d7      	bhi.n	80012ba <__gedf2+0x4a>
 800130a:	d00e      	beq.n	800132a <__gedf2+0xba>
 800130c:	2000      	movs	r0, #0
 800130e:	454f      	cmp	r7, r9
 8001310:	d2d7      	bcs.n	80012c2 <__gedf2+0x52>
 8001312:	2900      	cmp	r1, #0
 8001314:	d0e2      	beq.n	80012dc <__gedf2+0x6c>
 8001316:	0008      	movs	r0, r1
 8001318:	e7d3      	b.n	80012c2 <__gedf2+0x52>
 800131a:	4243      	negs	r3, r0
 800131c:	4158      	adcs	r0, r3
 800131e:	0040      	lsls	r0, r0, #1
 8001320:	3801      	subs	r0, #1
 8001322:	e7ce      	b.n	80012c2 <__gedf2+0x52>
 8001324:	2002      	movs	r0, #2
 8001326:	4240      	negs	r0, r0
 8001328:	e7cb      	b.n	80012c2 <__gedf2+0x52>
 800132a:	45c4      	cmp	ip, r8
 800132c:	d8c5      	bhi.n	80012ba <__gedf2+0x4a>
 800132e:	2000      	movs	r0, #0
 8001330:	45c4      	cmp	ip, r8
 8001332:	d2c6      	bcs.n	80012c2 <__gedf2+0x52>
 8001334:	e7ed      	b.n	8001312 <__gedf2+0xa2>
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	000007ff 	.word	0x000007ff

0800133c <__ledf2>:
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	4647      	mov	r7, r8
 8001340:	46ce      	mov	lr, r9
 8001342:	0004      	movs	r4, r0
 8001344:	0018      	movs	r0, r3
 8001346:	0016      	movs	r6, r2
 8001348:	031b      	lsls	r3, r3, #12
 800134a:	0b1b      	lsrs	r3, r3, #12
 800134c:	4d2c      	ldr	r5, [pc, #176]	; (8001400 <__ledf2+0xc4>)
 800134e:	004a      	lsls	r2, r1, #1
 8001350:	4699      	mov	r9, r3
 8001352:	b580      	push	{r7, lr}
 8001354:	0043      	lsls	r3, r0, #1
 8001356:	030f      	lsls	r7, r1, #12
 8001358:	46a4      	mov	ip, r4
 800135a:	46b0      	mov	r8, r6
 800135c:	0b3f      	lsrs	r7, r7, #12
 800135e:	0d52      	lsrs	r2, r2, #21
 8001360:	0fc9      	lsrs	r1, r1, #31
 8001362:	0d5b      	lsrs	r3, r3, #21
 8001364:	0fc0      	lsrs	r0, r0, #31
 8001366:	42aa      	cmp	r2, r5
 8001368:	d00d      	beq.n	8001386 <__ledf2+0x4a>
 800136a:	42ab      	cmp	r3, r5
 800136c:	d010      	beq.n	8001390 <__ledf2+0x54>
 800136e:	2a00      	cmp	r2, #0
 8001370:	d127      	bne.n	80013c2 <__ledf2+0x86>
 8001372:	433c      	orrs	r4, r7
 8001374:	2b00      	cmp	r3, #0
 8001376:	d111      	bne.n	800139c <__ledf2+0x60>
 8001378:	464d      	mov	r5, r9
 800137a:	432e      	orrs	r6, r5
 800137c:	d10e      	bne.n	800139c <__ledf2+0x60>
 800137e:	2000      	movs	r0, #0
 8001380:	2c00      	cmp	r4, #0
 8001382:	d015      	beq.n	80013b0 <__ledf2+0x74>
 8001384:	e00e      	b.n	80013a4 <__ledf2+0x68>
 8001386:	003d      	movs	r5, r7
 8001388:	4325      	orrs	r5, r4
 800138a:	d110      	bne.n	80013ae <__ledf2+0x72>
 800138c:	4293      	cmp	r3, r2
 800138e:	d118      	bne.n	80013c2 <__ledf2+0x86>
 8001390:	464d      	mov	r5, r9
 8001392:	432e      	orrs	r6, r5
 8001394:	d10b      	bne.n	80013ae <__ledf2+0x72>
 8001396:	2a00      	cmp	r2, #0
 8001398:	d102      	bne.n	80013a0 <__ledf2+0x64>
 800139a:	433c      	orrs	r4, r7
 800139c:	2c00      	cmp	r4, #0
 800139e:	d00b      	beq.n	80013b8 <__ledf2+0x7c>
 80013a0:	4281      	cmp	r1, r0
 80013a2:	d014      	beq.n	80013ce <__ledf2+0x92>
 80013a4:	2002      	movs	r0, #2
 80013a6:	3901      	subs	r1, #1
 80013a8:	4008      	ands	r0, r1
 80013aa:	3801      	subs	r0, #1
 80013ac:	e000      	b.n	80013b0 <__ledf2+0x74>
 80013ae:	2002      	movs	r0, #2
 80013b0:	bcc0      	pop	{r6, r7}
 80013b2:	46b9      	mov	r9, r7
 80013b4:	46b0      	mov	r8, r6
 80013b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d1f9      	bne.n	80013b0 <__ledf2+0x74>
 80013bc:	2001      	movs	r0, #1
 80013be:	4240      	negs	r0, r0
 80013c0:	e7f6      	b.n	80013b0 <__ledf2+0x74>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1ec      	bne.n	80013a0 <__ledf2+0x64>
 80013c6:	464c      	mov	r4, r9
 80013c8:	4326      	orrs	r6, r4
 80013ca:	d1e9      	bne.n	80013a0 <__ledf2+0x64>
 80013cc:	e7ea      	b.n	80013a4 <__ledf2+0x68>
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dd04      	ble.n	80013dc <__ledf2+0xa0>
 80013d2:	4243      	negs	r3, r0
 80013d4:	4158      	adcs	r0, r3
 80013d6:	0040      	lsls	r0, r0, #1
 80013d8:	3801      	subs	r0, #1
 80013da:	e7e9      	b.n	80013b0 <__ledf2+0x74>
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbeb      	blt.n	80013b8 <__ledf2+0x7c>
 80013e0:	454f      	cmp	r7, r9
 80013e2:	d8df      	bhi.n	80013a4 <__ledf2+0x68>
 80013e4:	d006      	beq.n	80013f4 <__ledf2+0xb8>
 80013e6:	2000      	movs	r0, #0
 80013e8:	454f      	cmp	r7, r9
 80013ea:	d2e1      	bcs.n	80013b0 <__ledf2+0x74>
 80013ec:	2900      	cmp	r1, #0
 80013ee:	d0e5      	beq.n	80013bc <__ledf2+0x80>
 80013f0:	0008      	movs	r0, r1
 80013f2:	e7dd      	b.n	80013b0 <__ledf2+0x74>
 80013f4:	45c4      	cmp	ip, r8
 80013f6:	d8d5      	bhi.n	80013a4 <__ledf2+0x68>
 80013f8:	2000      	movs	r0, #0
 80013fa:	45c4      	cmp	ip, r8
 80013fc:	d2d8      	bcs.n	80013b0 <__ledf2+0x74>
 80013fe:	e7f5      	b.n	80013ec <__ledf2+0xb0>
 8001400:	000007ff 	.word	0x000007ff

08001404 <__aeabi_dmul>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4657      	mov	r7, sl
 8001408:	464e      	mov	r6, r9
 800140a:	4645      	mov	r5, r8
 800140c:	46de      	mov	lr, fp
 800140e:	b5e0      	push	{r5, r6, r7, lr}
 8001410:	4698      	mov	r8, r3
 8001412:	030c      	lsls	r4, r1, #12
 8001414:	004b      	lsls	r3, r1, #1
 8001416:	0006      	movs	r6, r0
 8001418:	4692      	mov	sl, r2
 800141a:	b087      	sub	sp, #28
 800141c:	0b24      	lsrs	r4, r4, #12
 800141e:	0d5b      	lsrs	r3, r3, #21
 8001420:	0fcf      	lsrs	r7, r1, #31
 8001422:	2b00      	cmp	r3, #0
 8001424:	d100      	bne.n	8001428 <__aeabi_dmul+0x24>
 8001426:	e15c      	b.n	80016e2 <__aeabi_dmul+0x2de>
 8001428:	4ad9      	ldr	r2, [pc, #868]	; (8001790 <__aeabi_dmul+0x38c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d100      	bne.n	8001430 <__aeabi_dmul+0x2c>
 800142e:	e175      	b.n	800171c <__aeabi_dmul+0x318>
 8001430:	0f42      	lsrs	r2, r0, #29
 8001432:	00e4      	lsls	r4, r4, #3
 8001434:	4314      	orrs	r4, r2
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	0412      	lsls	r2, r2, #16
 800143a:	4314      	orrs	r4, r2
 800143c:	4ad5      	ldr	r2, [pc, #852]	; (8001794 <__aeabi_dmul+0x390>)
 800143e:	00c5      	lsls	r5, r0, #3
 8001440:	4694      	mov	ip, r2
 8001442:	4463      	add	r3, ip
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	4699      	mov	r9, r3
 800144a:	469b      	mov	fp, r3
 800144c:	4643      	mov	r3, r8
 800144e:	4642      	mov	r2, r8
 8001450:	031e      	lsls	r6, r3, #12
 8001452:	0fd2      	lsrs	r2, r2, #31
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4650      	mov	r0, sl
 8001458:	4690      	mov	r8, r2
 800145a:	0b36      	lsrs	r6, r6, #12
 800145c:	0d5b      	lsrs	r3, r3, #21
 800145e:	d100      	bne.n	8001462 <__aeabi_dmul+0x5e>
 8001460:	e120      	b.n	80016a4 <__aeabi_dmul+0x2a0>
 8001462:	4acb      	ldr	r2, [pc, #812]	; (8001790 <__aeabi_dmul+0x38c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x66>
 8001468:	e162      	b.n	8001730 <__aeabi_dmul+0x32c>
 800146a:	49ca      	ldr	r1, [pc, #808]	; (8001794 <__aeabi_dmul+0x390>)
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	468c      	mov	ip, r1
 8001470:	9900      	ldr	r1, [sp, #0]
 8001472:	4463      	add	r3, ip
 8001474:	00f6      	lsls	r6, r6, #3
 8001476:	468c      	mov	ip, r1
 8001478:	4316      	orrs	r6, r2
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	449c      	add	ip, r3
 800147e:	0412      	lsls	r2, r2, #16
 8001480:	4663      	mov	r3, ip
 8001482:	4316      	orrs	r6, r2
 8001484:	00c2      	lsls	r2, r0, #3
 8001486:	2000      	movs	r0, #0
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	9900      	ldr	r1, [sp, #0]
 800148c:	4643      	mov	r3, r8
 800148e:	3101      	adds	r1, #1
 8001490:	468c      	mov	ip, r1
 8001492:	4649      	mov	r1, r9
 8001494:	407b      	eors	r3, r7
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	290f      	cmp	r1, #15
 800149a:	d826      	bhi.n	80014ea <__aeabi_dmul+0xe6>
 800149c:	4bbe      	ldr	r3, [pc, #760]	; (8001798 <__aeabi_dmul+0x394>)
 800149e:	0089      	lsls	r1, r1, #2
 80014a0:	5859      	ldr	r1, [r3, r1]
 80014a2:	468f      	mov	pc, r1
 80014a4:	4643      	mov	r3, r8
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	0034      	movs	r4, r6
 80014aa:	0015      	movs	r5, r2
 80014ac:	4683      	mov	fp, r0
 80014ae:	465b      	mov	r3, fp
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d016      	beq.n	80014e2 <__aeabi_dmul+0xde>
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d100      	bne.n	80014ba <__aeabi_dmul+0xb6>
 80014b8:	e203      	b.n	80018c2 <__aeabi_dmul+0x4be>
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d000      	beq.n	80014c0 <__aeabi_dmul+0xbc>
 80014be:	e0cd      	b.n	800165c <__aeabi_dmul+0x258>
 80014c0:	2200      	movs	r2, #0
 80014c2:	2400      	movs	r4, #0
 80014c4:	2500      	movs	r5, #0
 80014c6:	9b01      	ldr	r3, [sp, #4]
 80014c8:	0512      	lsls	r2, r2, #20
 80014ca:	4322      	orrs	r2, r4
 80014cc:	07db      	lsls	r3, r3, #31
 80014ce:	431a      	orrs	r2, r3
 80014d0:	0028      	movs	r0, r5
 80014d2:	0011      	movs	r1, r2
 80014d4:	b007      	add	sp, #28
 80014d6:	bcf0      	pop	{r4, r5, r6, r7}
 80014d8:	46bb      	mov	fp, r7
 80014da:	46b2      	mov	sl, r6
 80014dc:	46a9      	mov	r9, r5
 80014de:	46a0      	mov	r8, r4
 80014e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e2:	2400      	movs	r4, #0
 80014e4:	2500      	movs	r5, #0
 80014e6:	4aaa      	ldr	r2, [pc, #680]	; (8001790 <__aeabi_dmul+0x38c>)
 80014e8:	e7ed      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80014ea:	0c28      	lsrs	r0, r5, #16
 80014ec:	042d      	lsls	r5, r5, #16
 80014ee:	0c2d      	lsrs	r5, r5, #16
 80014f0:	002b      	movs	r3, r5
 80014f2:	0c11      	lsrs	r1, r2, #16
 80014f4:	0412      	lsls	r2, r2, #16
 80014f6:	0c12      	lsrs	r2, r2, #16
 80014f8:	4353      	muls	r3, r2
 80014fa:	4698      	mov	r8, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	002f      	movs	r7, r5
 8001500:	4343      	muls	r3, r0
 8001502:	4699      	mov	r9, r3
 8001504:	434f      	muls	r7, r1
 8001506:	444f      	add	r7, r9
 8001508:	46bb      	mov	fp, r7
 800150a:	4647      	mov	r7, r8
 800150c:	000b      	movs	r3, r1
 800150e:	0c3f      	lsrs	r7, r7, #16
 8001510:	46ba      	mov	sl, r7
 8001512:	4343      	muls	r3, r0
 8001514:	44da      	add	sl, fp
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	45d1      	cmp	r9, sl
 800151a:	d904      	bls.n	8001526 <__aeabi_dmul+0x122>
 800151c:	2780      	movs	r7, #128	; 0x80
 800151e:	027f      	lsls	r7, r7, #9
 8001520:	46b9      	mov	r9, r7
 8001522:	444b      	add	r3, r9
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	4653      	mov	r3, sl
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	469b      	mov	fp, r3
 800152c:	4653      	mov	r3, sl
 800152e:	041f      	lsls	r7, r3, #16
 8001530:	4643      	mov	r3, r8
 8001532:	041b      	lsls	r3, r3, #16
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	4698      	mov	r8, r3
 8001538:	003b      	movs	r3, r7
 800153a:	4443      	add	r3, r8
 800153c:	9304      	str	r3, [sp, #16]
 800153e:	0c33      	lsrs	r3, r6, #16
 8001540:	0436      	lsls	r6, r6, #16
 8001542:	0c36      	lsrs	r6, r6, #16
 8001544:	4698      	mov	r8, r3
 8001546:	0033      	movs	r3, r6
 8001548:	4343      	muls	r3, r0
 800154a:	4699      	mov	r9, r3
 800154c:	4643      	mov	r3, r8
 800154e:	4343      	muls	r3, r0
 8001550:	002f      	movs	r7, r5
 8001552:	469a      	mov	sl, r3
 8001554:	4643      	mov	r3, r8
 8001556:	4377      	muls	r7, r6
 8001558:	435d      	muls	r5, r3
 800155a:	0c38      	lsrs	r0, r7, #16
 800155c:	444d      	add	r5, r9
 800155e:	1945      	adds	r5, r0, r5
 8001560:	45a9      	cmp	r9, r5
 8001562:	d903      	bls.n	800156c <__aeabi_dmul+0x168>
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	4699      	mov	r9, r3
 800156a:	44ca      	add	sl, r9
 800156c:	043f      	lsls	r7, r7, #16
 800156e:	0c28      	lsrs	r0, r5, #16
 8001570:	0c3f      	lsrs	r7, r7, #16
 8001572:	042d      	lsls	r5, r5, #16
 8001574:	19ed      	adds	r5, r5, r7
 8001576:	0c27      	lsrs	r7, r4, #16
 8001578:	0424      	lsls	r4, r4, #16
 800157a:	0c24      	lsrs	r4, r4, #16
 800157c:	0003      	movs	r3, r0
 800157e:	0020      	movs	r0, r4
 8001580:	4350      	muls	r0, r2
 8001582:	437a      	muls	r2, r7
 8001584:	4691      	mov	r9, r2
 8001586:	003a      	movs	r2, r7
 8001588:	4453      	add	r3, sl
 800158a:	9305      	str	r3, [sp, #20]
 800158c:	0c03      	lsrs	r3, r0, #16
 800158e:	469a      	mov	sl, r3
 8001590:	434a      	muls	r2, r1
 8001592:	4361      	muls	r1, r4
 8001594:	4449      	add	r1, r9
 8001596:	4451      	add	r1, sl
 8001598:	44ab      	add	fp, r5
 800159a:	4589      	cmp	r9, r1
 800159c:	d903      	bls.n	80015a6 <__aeabi_dmul+0x1a2>
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	025b      	lsls	r3, r3, #9
 80015a2:	4699      	mov	r9, r3
 80015a4:	444a      	add	r2, r9
 80015a6:	0400      	lsls	r0, r0, #16
 80015a8:	0c0b      	lsrs	r3, r1, #16
 80015aa:	0c00      	lsrs	r0, r0, #16
 80015ac:	0409      	lsls	r1, r1, #16
 80015ae:	1809      	adds	r1, r1, r0
 80015b0:	0020      	movs	r0, r4
 80015b2:	4699      	mov	r9, r3
 80015b4:	4643      	mov	r3, r8
 80015b6:	4370      	muls	r0, r6
 80015b8:	435c      	muls	r4, r3
 80015ba:	437e      	muls	r6, r7
 80015bc:	435f      	muls	r7, r3
 80015be:	0c03      	lsrs	r3, r0, #16
 80015c0:	4698      	mov	r8, r3
 80015c2:	19a4      	adds	r4, r4, r6
 80015c4:	4444      	add	r4, r8
 80015c6:	444a      	add	r2, r9
 80015c8:	9703      	str	r7, [sp, #12]
 80015ca:	42a6      	cmp	r6, r4
 80015cc:	d904      	bls.n	80015d8 <__aeabi_dmul+0x1d4>
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	025b      	lsls	r3, r3, #9
 80015d2:	4698      	mov	r8, r3
 80015d4:	4447      	add	r7, r8
 80015d6:	9703      	str	r7, [sp, #12]
 80015d8:	0423      	lsls	r3, r4, #16
 80015da:	9e02      	ldr	r6, [sp, #8]
 80015dc:	469a      	mov	sl, r3
 80015de:	9b05      	ldr	r3, [sp, #20]
 80015e0:	445e      	add	r6, fp
 80015e2:	4698      	mov	r8, r3
 80015e4:	42ae      	cmp	r6, r5
 80015e6:	41ad      	sbcs	r5, r5
 80015e8:	1876      	adds	r6, r6, r1
 80015ea:	428e      	cmp	r6, r1
 80015ec:	4189      	sbcs	r1, r1
 80015ee:	0400      	lsls	r0, r0, #16
 80015f0:	0c00      	lsrs	r0, r0, #16
 80015f2:	4450      	add	r0, sl
 80015f4:	4440      	add	r0, r8
 80015f6:	426d      	negs	r5, r5
 80015f8:	1947      	adds	r7, r0, r5
 80015fa:	46b8      	mov	r8, r7
 80015fc:	4693      	mov	fp, r2
 80015fe:	4249      	negs	r1, r1
 8001600:	4689      	mov	r9, r1
 8001602:	44c3      	add	fp, r8
 8001604:	44d9      	add	r9, fp
 8001606:	4298      	cmp	r0, r3
 8001608:	4180      	sbcs	r0, r0
 800160a:	45a8      	cmp	r8, r5
 800160c:	41ad      	sbcs	r5, r5
 800160e:	4593      	cmp	fp, r2
 8001610:	4192      	sbcs	r2, r2
 8001612:	4589      	cmp	r9, r1
 8001614:	4189      	sbcs	r1, r1
 8001616:	426d      	negs	r5, r5
 8001618:	4240      	negs	r0, r0
 800161a:	4328      	orrs	r0, r5
 800161c:	0c24      	lsrs	r4, r4, #16
 800161e:	4252      	negs	r2, r2
 8001620:	4249      	negs	r1, r1
 8001622:	430a      	orrs	r2, r1
 8001624:	9b03      	ldr	r3, [sp, #12]
 8001626:	1900      	adds	r0, r0, r4
 8001628:	1880      	adds	r0, r0, r2
 800162a:	18c7      	adds	r7, r0, r3
 800162c:	464b      	mov	r3, r9
 800162e:	0ddc      	lsrs	r4, r3, #23
 8001630:	9b04      	ldr	r3, [sp, #16]
 8001632:	0275      	lsls	r5, r6, #9
 8001634:	431d      	orrs	r5, r3
 8001636:	1e6a      	subs	r2, r5, #1
 8001638:	4195      	sbcs	r5, r2
 800163a:	464b      	mov	r3, r9
 800163c:	0df6      	lsrs	r6, r6, #23
 800163e:	027f      	lsls	r7, r7, #9
 8001640:	4335      	orrs	r5, r6
 8001642:	025a      	lsls	r2, r3, #9
 8001644:	433c      	orrs	r4, r7
 8001646:	4315      	orrs	r5, r2
 8001648:	01fb      	lsls	r3, r7, #7
 800164a:	d400      	bmi.n	800164e <__aeabi_dmul+0x24a>
 800164c:	e11c      	b.n	8001888 <__aeabi_dmul+0x484>
 800164e:	2101      	movs	r1, #1
 8001650:	086a      	lsrs	r2, r5, #1
 8001652:	400d      	ands	r5, r1
 8001654:	4315      	orrs	r5, r2
 8001656:	07e2      	lsls	r2, r4, #31
 8001658:	4315      	orrs	r5, r2
 800165a:	0864      	lsrs	r4, r4, #1
 800165c:	494f      	ldr	r1, [pc, #316]	; (800179c <__aeabi_dmul+0x398>)
 800165e:	4461      	add	r1, ip
 8001660:	2900      	cmp	r1, #0
 8001662:	dc00      	bgt.n	8001666 <__aeabi_dmul+0x262>
 8001664:	e0b0      	b.n	80017c8 <__aeabi_dmul+0x3c4>
 8001666:	076b      	lsls	r3, r5, #29
 8001668:	d009      	beq.n	800167e <__aeabi_dmul+0x27a>
 800166a:	220f      	movs	r2, #15
 800166c:	402a      	ands	r2, r5
 800166e:	2a04      	cmp	r2, #4
 8001670:	d005      	beq.n	800167e <__aeabi_dmul+0x27a>
 8001672:	1d2a      	adds	r2, r5, #4
 8001674:	42aa      	cmp	r2, r5
 8001676:	41ad      	sbcs	r5, r5
 8001678:	426d      	negs	r5, r5
 800167a:	1964      	adds	r4, r4, r5
 800167c:	0015      	movs	r5, r2
 800167e:	01e3      	lsls	r3, r4, #7
 8001680:	d504      	bpl.n	800168c <__aeabi_dmul+0x288>
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	4a46      	ldr	r2, [pc, #280]	; (80017a0 <__aeabi_dmul+0x39c>)
 8001686:	00c9      	lsls	r1, r1, #3
 8001688:	4014      	ands	r4, r2
 800168a:	4461      	add	r1, ip
 800168c:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <__aeabi_dmul+0x3a0>)
 800168e:	4291      	cmp	r1, r2
 8001690:	dd00      	ble.n	8001694 <__aeabi_dmul+0x290>
 8001692:	e726      	b.n	80014e2 <__aeabi_dmul+0xde>
 8001694:	0762      	lsls	r2, r4, #29
 8001696:	08ed      	lsrs	r5, r5, #3
 8001698:	0264      	lsls	r4, r4, #9
 800169a:	0549      	lsls	r1, r1, #21
 800169c:	4315      	orrs	r5, r2
 800169e:	0b24      	lsrs	r4, r4, #12
 80016a0:	0d4a      	lsrs	r2, r1, #21
 80016a2:	e710      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80016a4:	4652      	mov	r2, sl
 80016a6:	4332      	orrs	r2, r6
 80016a8:	d100      	bne.n	80016ac <__aeabi_dmul+0x2a8>
 80016aa:	e07f      	b.n	80017ac <__aeabi_dmul+0x3a8>
 80016ac:	2e00      	cmp	r6, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dmul+0x2ae>
 80016b0:	e0dc      	b.n	800186c <__aeabi_dmul+0x468>
 80016b2:	0030      	movs	r0, r6
 80016b4:	f000 fe1e 	bl	80022f4 <__clzsi2>
 80016b8:	0002      	movs	r2, r0
 80016ba:	3a0b      	subs	r2, #11
 80016bc:	231d      	movs	r3, #29
 80016be:	0001      	movs	r1, r0
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	4652      	mov	r2, sl
 80016c4:	3908      	subs	r1, #8
 80016c6:	40da      	lsrs	r2, r3
 80016c8:	408e      	lsls	r6, r1
 80016ca:	4316      	orrs	r6, r2
 80016cc:	4652      	mov	r2, sl
 80016ce:	408a      	lsls	r2, r1
 80016d0:	9b00      	ldr	r3, [sp, #0]
 80016d2:	4935      	ldr	r1, [pc, #212]	; (80017a8 <__aeabi_dmul+0x3a4>)
 80016d4:	1a18      	subs	r0, r3, r0
 80016d6:	0003      	movs	r3, r0
 80016d8:	468c      	mov	ip, r1
 80016da:	4463      	add	r3, ip
 80016dc:	2000      	movs	r0, #0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	e6d3      	b.n	800148a <__aeabi_dmul+0x86>
 80016e2:	0025      	movs	r5, r4
 80016e4:	4305      	orrs	r5, r0
 80016e6:	d04a      	beq.n	800177e <__aeabi_dmul+0x37a>
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d100      	bne.n	80016ee <__aeabi_dmul+0x2ea>
 80016ec:	e0b0      	b.n	8001850 <__aeabi_dmul+0x44c>
 80016ee:	0020      	movs	r0, r4
 80016f0:	f000 fe00 	bl	80022f4 <__clzsi2>
 80016f4:	0001      	movs	r1, r0
 80016f6:	0002      	movs	r2, r0
 80016f8:	390b      	subs	r1, #11
 80016fa:	231d      	movs	r3, #29
 80016fc:	0010      	movs	r0, r2
 80016fe:	1a5b      	subs	r3, r3, r1
 8001700:	0031      	movs	r1, r6
 8001702:	0035      	movs	r5, r6
 8001704:	3808      	subs	r0, #8
 8001706:	4084      	lsls	r4, r0
 8001708:	40d9      	lsrs	r1, r3
 800170a:	4085      	lsls	r5, r0
 800170c:	430c      	orrs	r4, r1
 800170e:	4826      	ldr	r0, [pc, #152]	; (80017a8 <__aeabi_dmul+0x3a4>)
 8001710:	1a83      	subs	r3, r0, r2
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2300      	movs	r3, #0
 8001716:	4699      	mov	r9, r3
 8001718:	469b      	mov	fp, r3
 800171a:	e697      	b.n	800144c <__aeabi_dmul+0x48>
 800171c:	0005      	movs	r5, r0
 800171e:	4325      	orrs	r5, r4
 8001720:	d126      	bne.n	8001770 <__aeabi_dmul+0x36c>
 8001722:	2208      	movs	r2, #8
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2302      	movs	r3, #2
 8001728:	2400      	movs	r4, #0
 800172a:	4691      	mov	r9, r2
 800172c:	469b      	mov	fp, r3
 800172e:	e68d      	b.n	800144c <__aeabi_dmul+0x48>
 8001730:	4652      	mov	r2, sl
 8001732:	9b00      	ldr	r3, [sp, #0]
 8001734:	4332      	orrs	r2, r6
 8001736:	d110      	bne.n	800175a <__aeabi_dmul+0x356>
 8001738:	4915      	ldr	r1, [pc, #84]	; (8001790 <__aeabi_dmul+0x38c>)
 800173a:	2600      	movs	r6, #0
 800173c:	468c      	mov	ip, r1
 800173e:	4463      	add	r3, ip
 8001740:	4649      	mov	r1, r9
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2302      	movs	r3, #2
 8001746:	4319      	orrs	r1, r3
 8001748:	4689      	mov	r9, r1
 800174a:	2002      	movs	r0, #2
 800174c:	e69d      	b.n	800148a <__aeabi_dmul+0x86>
 800174e:	465b      	mov	r3, fp
 8001750:	9701      	str	r7, [sp, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d000      	beq.n	8001758 <__aeabi_dmul+0x354>
 8001756:	e6ad      	b.n	80014b4 <__aeabi_dmul+0xb0>
 8001758:	e6c3      	b.n	80014e2 <__aeabi_dmul+0xde>
 800175a:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <__aeabi_dmul+0x38c>)
 800175c:	2003      	movs	r0, #3
 800175e:	4694      	mov	ip, r2
 8001760:	4463      	add	r3, ip
 8001762:	464a      	mov	r2, r9
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2303      	movs	r3, #3
 8001768:	431a      	orrs	r2, r3
 800176a:	4691      	mov	r9, r2
 800176c:	4652      	mov	r2, sl
 800176e:	e68c      	b.n	800148a <__aeabi_dmul+0x86>
 8001770:	220c      	movs	r2, #12
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2303      	movs	r3, #3
 8001776:	0005      	movs	r5, r0
 8001778:	4691      	mov	r9, r2
 800177a:	469b      	mov	fp, r3
 800177c:	e666      	b.n	800144c <__aeabi_dmul+0x48>
 800177e:	2304      	movs	r3, #4
 8001780:	4699      	mov	r9, r3
 8001782:	2300      	movs	r3, #0
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	2400      	movs	r4, #0
 800178a:	469b      	mov	fp, r3
 800178c:	e65e      	b.n	800144c <__aeabi_dmul+0x48>
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	000007ff 	.word	0x000007ff
 8001794:	fffffc01 	.word	0xfffffc01
 8001798:	0800b09c 	.word	0x0800b09c
 800179c:	000003ff 	.word	0x000003ff
 80017a0:	feffffff 	.word	0xfeffffff
 80017a4:	000007fe 	.word	0x000007fe
 80017a8:	fffffc0d 	.word	0xfffffc0d
 80017ac:	4649      	mov	r1, r9
 80017ae:	2301      	movs	r3, #1
 80017b0:	4319      	orrs	r1, r3
 80017b2:	4689      	mov	r9, r1
 80017b4:	2600      	movs	r6, #0
 80017b6:	2001      	movs	r0, #1
 80017b8:	e667      	b.n	800148a <__aeabi_dmul+0x86>
 80017ba:	2300      	movs	r3, #0
 80017bc:	2480      	movs	r4, #128	; 0x80
 80017be:	2500      	movs	r5, #0
 80017c0:	4a43      	ldr	r2, [pc, #268]	; (80018d0 <__aeabi_dmul+0x4cc>)
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	0324      	lsls	r4, r4, #12
 80017c6:	e67e      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80017c8:	2001      	movs	r0, #1
 80017ca:	1a40      	subs	r0, r0, r1
 80017cc:	2838      	cmp	r0, #56	; 0x38
 80017ce:	dd00      	ble.n	80017d2 <__aeabi_dmul+0x3ce>
 80017d0:	e676      	b.n	80014c0 <__aeabi_dmul+0xbc>
 80017d2:	281f      	cmp	r0, #31
 80017d4:	dd5b      	ble.n	800188e <__aeabi_dmul+0x48a>
 80017d6:	221f      	movs	r2, #31
 80017d8:	0023      	movs	r3, r4
 80017da:	4252      	negs	r2, r2
 80017dc:	1a51      	subs	r1, r2, r1
 80017de:	40cb      	lsrs	r3, r1
 80017e0:	0019      	movs	r1, r3
 80017e2:	2820      	cmp	r0, #32
 80017e4:	d003      	beq.n	80017ee <__aeabi_dmul+0x3ea>
 80017e6:	4a3b      	ldr	r2, [pc, #236]	; (80018d4 <__aeabi_dmul+0x4d0>)
 80017e8:	4462      	add	r2, ip
 80017ea:	4094      	lsls	r4, r2
 80017ec:	4325      	orrs	r5, r4
 80017ee:	1e6a      	subs	r2, r5, #1
 80017f0:	4195      	sbcs	r5, r2
 80017f2:	002a      	movs	r2, r5
 80017f4:	430a      	orrs	r2, r1
 80017f6:	2107      	movs	r1, #7
 80017f8:	000d      	movs	r5, r1
 80017fa:	2400      	movs	r4, #0
 80017fc:	4015      	ands	r5, r2
 80017fe:	4211      	tst	r1, r2
 8001800:	d05b      	beq.n	80018ba <__aeabi_dmul+0x4b6>
 8001802:	210f      	movs	r1, #15
 8001804:	2400      	movs	r4, #0
 8001806:	4011      	ands	r1, r2
 8001808:	2904      	cmp	r1, #4
 800180a:	d053      	beq.n	80018b4 <__aeabi_dmul+0x4b0>
 800180c:	1d11      	adds	r1, r2, #4
 800180e:	4291      	cmp	r1, r2
 8001810:	4192      	sbcs	r2, r2
 8001812:	4252      	negs	r2, r2
 8001814:	18a4      	adds	r4, r4, r2
 8001816:	000a      	movs	r2, r1
 8001818:	0223      	lsls	r3, r4, #8
 800181a:	d54b      	bpl.n	80018b4 <__aeabi_dmul+0x4b0>
 800181c:	2201      	movs	r2, #1
 800181e:	2400      	movs	r4, #0
 8001820:	2500      	movs	r5, #0
 8001822:	e650      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	031b      	lsls	r3, r3, #12
 8001828:	421c      	tst	r4, r3
 800182a:	d009      	beq.n	8001840 <__aeabi_dmul+0x43c>
 800182c:	421e      	tst	r6, r3
 800182e:	d107      	bne.n	8001840 <__aeabi_dmul+0x43c>
 8001830:	4333      	orrs	r3, r6
 8001832:	031c      	lsls	r4, r3, #12
 8001834:	4643      	mov	r3, r8
 8001836:	0015      	movs	r5, r2
 8001838:	0b24      	lsrs	r4, r4, #12
 800183a:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <__aeabi_dmul+0x4cc>)
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	e642      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	0312      	lsls	r2, r2, #12
 8001844:	4314      	orrs	r4, r2
 8001846:	0324      	lsls	r4, r4, #12
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <__aeabi_dmul+0x4cc>)
 800184a:	0b24      	lsrs	r4, r4, #12
 800184c:	9701      	str	r7, [sp, #4]
 800184e:	e63a      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001850:	f000 fd50 	bl	80022f4 <__clzsi2>
 8001854:	0001      	movs	r1, r0
 8001856:	0002      	movs	r2, r0
 8001858:	3115      	adds	r1, #21
 800185a:	3220      	adds	r2, #32
 800185c:	291c      	cmp	r1, #28
 800185e:	dc00      	bgt.n	8001862 <__aeabi_dmul+0x45e>
 8001860:	e74b      	b.n	80016fa <__aeabi_dmul+0x2f6>
 8001862:	0034      	movs	r4, r6
 8001864:	3808      	subs	r0, #8
 8001866:	2500      	movs	r5, #0
 8001868:	4084      	lsls	r4, r0
 800186a:	e750      	b.n	800170e <__aeabi_dmul+0x30a>
 800186c:	f000 fd42 	bl	80022f4 <__clzsi2>
 8001870:	0003      	movs	r3, r0
 8001872:	001a      	movs	r2, r3
 8001874:	3215      	adds	r2, #21
 8001876:	3020      	adds	r0, #32
 8001878:	2a1c      	cmp	r2, #28
 800187a:	dc00      	bgt.n	800187e <__aeabi_dmul+0x47a>
 800187c:	e71e      	b.n	80016bc <__aeabi_dmul+0x2b8>
 800187e:	4656      	mov	r6, sl
 8001880:	3b08      	subs	r3, #8
 8001882:	2200      	movs	r2, #0
 8001884:	409e      	lsls	r6, r3
 8001886:	e723      	b.n	80016d0 <__aeabi_dmul+0x2cc>
 8001888:	9b00      	ldr	r3, [sp, #0]
 800188a:	469c      	mov	ip, r3
 800188c:	e6e6      	b.n	800165c <__aeabi_dmul+0x258>
 800188e:	4912      	ldr	r1, [pc, #72]	; (80018d8 <__aeabi_dmul+0x4d4>)
 8001890:	0022      	movs	r2, r4
 8001892:	4461      	add	r1, ip
 8001894:	002e      	movs	r6, r5
 8001896:	408d      	lsls	r5, r1
 8001898:	408a      	lsls	r2, r1
 800189a:	40c6      	lsrs	r6, r0
 800189c:	1e69      	subs	r1, r5, #1
 800189e:	418d      	sbcs	r5, r1
 80018a0:	4332      	orrs	r2, r6
 80018a2:	432a      	orrs	r2, r5
 80018a4:	40c4      	lsrs	r4, r0
 80018a6:	0753      	lsls	r3, r2, #29
 80018a8:	d0b6      	beq.n	8001818 <__aeabi_dmul+0x414>
 80018aa:	210f      	movs	r1, #15
 80018ac:	4011      	ands	r1, r2
 80018ae:	2904      	cmp	r1, #4
 80018b0:	d1ac      	bne.n	800180c <__aeabi_dmul+0x408>
 80018b2:	e7b1      	b.n	8001818 <__aeabi_dmul+0x414>
 80018b4:	0765      	lsls	r5, r4, #29
 80018b6:	0264      	lsls	r4, r4, #9
 80018b8:	0b24      	lsrs	r4, r4, #12
 80018ba:	08d2      	lsrs	r2, r2, #3
 80018bc:	4315      	orrs	r5, r2
 80018be:	2200      	movs	r2, #0
 80018c0:	e601      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	0312      	lsls	r2, r2, #12
 80018c6:	4314      	orrs	r4, r2
 80018c8:	0324      	lsls	r4, r4, #12
 80018ca:	4a01      	ldr	r2, [pc, #4]	; (80018d0 <__aeabi_dmul+0x4cc>)
 80018cc:	0b24      	lsrs	r4, r4, #12
 80018ce:	e5fa      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80018d0:	000007ff 	.word	0x000007ff
 80018d4:	0000043e 	.word	0x0000043e
 80018d8:	0000041e 	.word	0x0000041e

080018dc <__aeabi_dsub>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	4657      	mov	r7, sl
 80018e0:	464e      	mov	r6, r9
 80018e2:	4645      	mov	r5, r8
 80018e4:	46de      	mov	lr, fp
 80018e6:	b5e0      	push	{r5, r6, r7, lr}
 80018e8:	001e      	movs	r6, r3
 80018ea:	0017      	movs	r7, r2
 80018ec:	004a      	lsls	r2, r1, #1
 80018ee:	030b      	lsls	r3, r1, #12
 80018f0:	0d52      	lsrs	r2, r2, #21
 80018f2:	0a5b      	lsrs	r3, r3, #9
 80018f4:	4690      	mov	r8, r2
 80018f6:	0f42      	lsrs	r2, r0, #29
 80018f8:	431a      	orrs	r2, r3
 80018fa:	0fcd      	lsrs	r5, r1, #31
 80018fc:	4ccd      	ldr	r4, [pc, #820]	; (8001c34 <__aeabi_dsub+0x358>)
 80018fe:	0331      	lsls	r1, r6, #12
 8001900:	00c3      	lsls	r3, r0, #3
 8001902:	4694      	mov	ip, r2
 8001904:	0070      	lsls	r0, r6, #1
 8001906:	0f7a      	lsrs	r2, r7, #29
 8001908:	0a49      	lsrs	r1, r1, #9
 800190a:	00ff      	lsls	r7, r7, #3
 800190c:	469a      	mov	sl, r3
 800190e:	46b9      	mov	r9, r7
 8001910:	0d40      	lsrs	r0, r0, #21
 8001912:	0ff6      	lsrs	r6, r6, #31
 8001914:	4311      	orrs	r1, r2
 8001916:	42a0      	cmp	r0, r4
 8001918:	d100      	bne.n	800191c <__aeabi_dsub+0x40>
 800191a:	e0b1      	b.n	8001a80 <__aeabi_dsub+0x1a4>
 800191c:	2201      	movs	r2, #1
 800191e:	4056      	eors	r6, r2
 8001920:	46b3      	mov	fp, r6
 8001922:	42b5      	cmp	r5, r6
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x4c>
 8001926:	e088      	b.n	8001a3a <__aeabi_dsub+0x15e>
 8001928:	4642      	mov	r2, r8
 800192a:	1a12      	subs	r2, r2, r0
 800192c:	2a00      	cmp	r2, #0
 800192e:	dc00      	bgt.n	8001932 <__aeabi_dsub+0x56>
 8001930:	e0ae      	b.n	8001a90 <__aeabi_dsub+0x1b4>
 8001932:	2800      	cmp	r0, #0
 8001934:	d100      	bne.n	8001938 <__aeabi_dsub+0x5c>
 8001936:	e0c1      	b.n	8001abc <__aeabi_dsub+0x1e0>
 8001938:	48be      	ldr	r0, [pc, #760]	; (8001c34 <__aeabi_dsub+0x358>)
 800193a:	4580      	cmp	r8, r0
 800193c:	d100      	bne.n	8001940 <__aeabi_dsub+0x64>
 800193e:	e151      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001940:	2080      	movs	r0, #128	; 0x80
 8001942:	0400      	lsls	r0, r0, #16
 8001944:	4301      	orrs	r1, r0
 8001946:	2a38      	cmp	r2, #56	; 0x38
 8001948:	dd00      	ble.n	800194c <__aeabi_dsub+0x70>
 800194a:	e17b      	b.n	8001c44 <__aeabi_dsub+0x368>
 800194c:	2a1f      	cmp	r2, #31
 800194e:	dd00      	ble.n	8001952 <__aeabi_dsub+0x76>
 8001950:	e1ee      	b.n	8001d30 <__aeabi_dsub+0x454>
 8001952:	2020      	movs	r0, #32
 8001954:	003e      	movs	r6, r7
 8001956:	1a80      	subs	r0, r0, r2
 8001958:	000c      	movs	r4, r1
 800195a:	40d6      	lsrs	r6, r2
 800195c:	40d1      	lsrs	r1, r2
 800195e:	4087      	lsls	r7, r0
 8001960:	4662      	mov	r2, ip
 8001962:	4084      	lsls	r4, r0
 8001964:	1a52      	subs	r2, r2, r1
 8001966:	1e78      	subs	r0, r7, #1
 8001968:	4187      	sbcs	r7, r0
 800196a:	4694      	mov	ip, r2
 800196c:	4334      	orrs	r4, r6
 800196e:	4327      	orrs	r7, r4
 8001970:	1bdc      	subs	r4, r3, r7
 8001972:	42a3      	cmp	r3, r4
 8001974:	419b      	sbcs	r3, r3
 8001976:	4662      	mov	r2, ip
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	4699      	mov	r9, r3
 800197e:	464b      	mov	r3, r9
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	d400      	bmi.n	8001986 <__aeabi_dsub+0xaa>
 8001984:	e118      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001986:	464b      	mov	r3, r9
 8001988:	0258      	lsls	r0, r3, #9
 800198a:	0a43      	lsrs	r3, r0, #9
 800198c:	4699      	mov	r9, r3
 800198e:	464b      	mov	r3, r9
 8001990:	2b00      	cmp	r3, #0
 8001992:	d100      	bne.n	8001996 <__aeabi_dsub+0xba>
 8001994:	e137      	b.n	8001c06 <__aeabi_dsub+0x32a>
 8001996:	4648      	mov	r0, r9
 8001998:	f000 fcac 	bl	80022f4 <__clzsi2>
 800199c:	0001      	movs	r1, r0
 800199e:	3908      	subs	r1, #8
 80019a0:	2320      	movs	r3, #32
 80019a2:	0022      	movs	r2, r4
 80019a4:	4648      	mov	r0, r9
 80019a6:	1a5b      	subs	r3, r3, r1
 80019a8:	40da      	lsrs	r2, r3
 80019aa:	4088      	lsls	r0, r1
 80019ac:	408c      	lsls	r4, r1
 80019ae:	4643      	mov	r3, r8
 80019b0:	4310      	orrs	r0, r2
 80019b2:	4588      	cmp	r8, r1
 80019b4:	dd00      	ble.n	80019b8 <__aeabi_dsub+0xdc>
 80019b6:	e136      	b.n	8001c26 <__aeabi_dsub+0x34a>
 80019b8:	1ac9      	subs	r1, r1, r3
 80019ba:	1c4b      	adds	r3, r1, #1
 80019bc:	2b1f      	cmp	r3, #31
 80019be:	dd00      	ble.n	80019c2 <__aeabi_dsub+0xe6>
 80019c0:	e0ea      	b.n	8001b98 <__aeabi_dsub+0x2bc>
 80019c2:	2220      	movs	r2, #32
 80019c4:	0026      	movs	r6, r4
 80019c6:	1ad2      	subs	r2, r2, r3
 80019c8:	0001      	movs	r1, r0
 80019ca:	4094      	lsls	r4, r2
 80019cc:	40de      	lsrs	r6, r3
 80019ce:	40d8      	lsrs	r0, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	4091      	lsls	r1, r2
 80019d4:	1e62      	subs	r2, r4, #1
 80019d6:	4194      	sbcs	r4, r2
 80019d8:	4681      	mov	r9, r0
 80019da:	4698      	mov	r8, r3
 80019dc:	4331      	orrs	r1, r6
 80019de:	430c      	orrs	r4, r1
 80019e0:	0763      	lsls	r3, r4, #29
 80019e2:	d009      	beq.n	80019f8 <__aeabi_dsub+0x11c>
 80019e4:	230f      	movs	r3, #15
 80019e6:	4023      	ands	r3, r4
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d005      	beq.n	80019f8 <__aeabi_dsub+0x11c>
 80019ec:	1d23      	adds	r3, r4, #4
 80019ee:	42a3      	cmp	r3, r4
 80019f0:	41a4      	sbcs	r4, r4
 80019f2:	4264      	negs	r4, r4
 80019f4:	44a1      	add	r9, r4
 80019f6:	001c      	movs	r4, r3
 80019f8:	464b      	mov	r3, r9
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	d400      	bmi.n	8001a00 <__aeabi_dsub+0x124>
 80019fe:	e0de      	b.n	8001bbe <__aeabi_dsub+0x2e2>
 8001a00:	4641      	mov	r1, r8
 8001a02:	4b8c      	ldr	r3, [pc, #560]	; (8001c34 <__aeabi_dsub+0x358>)
 8001a04:	3101      	adds	r1, #1
 8001a06:	4299      	cmp	r1, r3
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dsub+0x130>
 8001a0a:	e0e7      	b.n	8001bdc <__aeabi_dsub+0x300>
 8001a0c:	464b      	mov	r3, r9
 8001a0e:	488a      	ldr	r0, [pc, #552]	; (8001c38 <__aeabi_dsub+0x35c>)
 8001a10:	08e4      	lsrs	r4, r4, #3
 8001a12:	4003      	ands	r3, r0
 8001a14:	0018      	movs	r0, r3
 8001a16:	0549      	lsls	r1, r1, #21
 8001a18:	075b      	lsls	r3, r3, #29
 8001a1a:	0240      	lsls	r0, r0, #9
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	0d4a      	lsrs	r2, r1, #21
 8001a20:	0b04      	lsrs	r4, r0, #12
 8001a22:	0512      	lsls	r2, r2, #20
 8001a24:	07ed      	lsls	r5, r5, #31
 8001a26:	4322      	orrs	r2, r4
 8001a28:	432a      	orrs	r2, r5
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	0011      	movs	r1, r2
 8001a2e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a30:	46bb      	mov	fp, r7
 8001a32:	46b2      	mov	sl, r6
 8001a34:	46a9      	mov	r9, r5
 8001a36:	46a0      	mov	r8, r4
 8001a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a3a:	4642      	mov	r2, r8
 8001a3c:	1a12      	subs	r2, r2, r0
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	dd52      	ble.n	8001ae8 <__aeabi_dsub+0x20c>
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x16c>
 8001a46:	e09c      	b.n	8001b82 <__aeabi_dsub+0x2a6>
 8001a48:	45a0      	cmp	r8, r4
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x172>
 8001a4c:	e0ca      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001a4e:	2080      	movs	r0, #128	; 0x80
 8001a50:	0400      	lsls	r0, r0, #16
 8001a52:	4301      	orrs	r1, r0
 8001a54:	2a38      	cmp	r2, #56	; 0x38
 8001a56:	dd00      	ble.n	8001a5a <__aeabi_dsub+0x17e>
 8001a58:	e149      	b.n	8001cee <__aeabi_dsub+0x412>
 8001a5a:	2a1f      	cmp	r2, #31
 8001a5c:	dc00      	bgt.n	8001a60 <__aeabi_dsub+0x184>
 8001a5e:	e197      	b.n	8001d90 <__aeabi_dsub+0x4b4>
 8001a60:	0010      	movs	r0, r2
 8001a62:	000e      	movs	r6, r1
 8001a64:	3820      	subs	r0, #32
 8001a66:	40c6      	lsrs	r6, r0
 8001a68:	2a20      	cmp	r2, #32
 8001a6a:	d004      	beq.n	8001a76 <__aeabi_dsub+0x19a>
 8001a6c:	2040      	movs	r0, #64	; 0x40
 8001a6e:	1a82      	subs	r2, r0, r2
 8001a70:	4091      	lsls	r1, r2
 8001a72:	430f      	orrs	r7, r1
 8001a74:	46b9      	mov	r9, r7
 8001a76:	464c      	mov	r4, r9
 8001a78:	1e62      	subs	r2, r4, #1
 8001a7a:	4194      	sbcs	r4, r2
 8001a7c:	4334      	orrs	r4, r6
 8001a7e:	e13a      	b.n	8001cf6 <__aeabi_dsub+0x41a>
 8001a80:	000a      	movs	r2, r1
 8001a82:	433a      	orrs	r2, r7
 8001a84:	d028      	beq.n	8001ad8 <__aeabi_dsub+0x1fc>
 8001a86:	46b3      	mov	fp, r6
 8001a88:	42b5      	cmp	r5, r6
 8001a8a:	d02b      	beq.n	8001ae4 <__aeabi_dsub+0x208>
 8001a8c:	4a6b      	ldr	r2, [pc, #428]	; (8001c3c <__aeabi_dsub+0x360>)
 8001a8e:	4442      	add	r2, r8
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d05d      	beq.n	8001b50 <__aeabi_dsub+0x274>
 8001a94:	4642      	mov	r2, r8
 8001a96:	4644      	mov	r4, r8
 8001a98:	1a82      	subs	r2, r0, r2
 8001a9a:	2c00      	cmp	r4, #0
 8001a9c:	d000      	beq.n	8001aa0 <__aeabi_dsub+0x1c4>
 8001a9e:	e0f5      	b.n	8001c8c <__aeabi_dsub+0x3b0>
 8001aa0:	4665      	mov	r5, ip
 8001aa2:	431d      	orrs	r5, r3
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dsub+0x1cc>
 8001aa6:	e19c      	b.n	8001de2 <__aeabi_dsub+0x506>
 8001aa8:	1e55      	subs	r5, r2, #1
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x1d4>
 8001aae:	e1fb      	b.n	8001ea8 <__aeabi_dsub+0x5cc>
 8001ab0:	4c60      	ldr	r4, [pc, #384]	; (8001c34 <__aeabi_dsub+0x358>)
 8001ab2:	42a2      	cmp	r2, r4
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dsub+0x1dc>
 8001ab6:	e1bd      	b.n	8001e34 <__aeabi_dsub+0x558>
 8001ab8:	002a      	movs	r2, r5
 8001aba:	e0f0      	b.n	8001c9e <__aeabi_dsub+0x3c2>
 8001abc:	0008      	movs	r0, r1
 8001abe:	4338      	orrs	r0, r7
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x1e8>
 8001ac2:	e0c3      	b.n	8001c4c <__aeabi_dsub+0x370>
 8001ac4:	1e50      	subs	r0, r2, #1
 8001ac6:	2a01      	cmp	r2, #1
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x1f0>
 8001aca:	e1a8      	b.n	8001e1e <__aeabi_dsub+0x542>
 8001acc:	4c59      	ldr	r4, [pc, #356]	; (8001c34 <__aeabi_dsub+0x358>)
 8001ace:	42a2      	cmp	r2, r4
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x1f8>
 8001ad2:	e087      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	e736      	b.n	8001946 <__aeabi_dsub+0x6a>
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4056      	eors	r6, r2
 8001adc:	46b3      	mov	fp, r6
 8001ade:	42b5      	cmp	r5, r6
 8001ae0:	d000      	beq.n	8001ae4 <__aeabi_dsub+0x208>
 8001ae2:	e721      	b.n	8001928 <__aeabi_dsub+0x4c>
 8001ae4:	4a55      	ldr	r2, [pc, #340]	; (8001c3c <__aeabi_dsub+0x360>)
 8001ae6:	4442      	add	r2, r8
 8001ae8:	2a00      	cmp	r2, #0
 8001aea:	d100      	bne.n	8001aee <__aeabi_dsub+0x212>
 8001aec:	e0b5      	b.n	8001c5a <__aeabi_dsub+0x37e>
 8001aee:	4642      	mov	r2, r8
 8001af0:	4644      	mov	r4, r8
 8001af2:	1a82      	subs	r2, r0, r2
 8001af4:	2c00      	cmp	r4, #0
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x21e>
 8001af8:	e138      	b.n	8001d6c <__aeabi_dsub+0x490>
 8001afa:	4e4e      	ldr	r6, [pc, #312]	; (8001c34 <__aeabi_dsub+0x358>)
 8001afc:	42b0      	cmp	r0, r6
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x226>
 8001b00:	e1de      	b.n	8001ec0 <__aeabi_dsub+0x5e4>
 8001b02:	2680      	movs	r6, #128	; 0x80
 8001b04:	4664      	mov	r4, ip
 8001b06:	0436      	lsls	r6, r6, #16
 8001b08:	4334      	orrs	r4, r6
 8001b0a:	46a4      	mov	ip, r4
 8001b0c:	2a38      	cmp	r2, #56	; 0x38
 8001b0e:	dd00      	ble.n	8001b12 <__aeabi_dsub+0x236>
 8001b10:	e196      	b.n	8001e40 <__aeabi_dsub+0x564>
 8001b12:	2a1f      	cmp	r2, #31
 8001b14:	dd00      	ble.n	8001b18 <__aeabi_dsub+0x23c>
 8001b16:	e224      	b.n	8001f62 <__aeabi_dsub+0x686>
 8001b18:	2620      	movs	r6, #32
 8001b1a:	1ab4      	subs	r4, r6, r2
 8001b1c:	46a2      	mov	sl, r4
 8001b1e:	4664      	mov	r4, ip
 8001b20:	4656      	mov	r6, sl
 8001b22:	40b4      	lsls	r4, r6
 8001b24:	46a1      	mov	r9, r4
 8001b26:	001c      	movs	r4, r3
 8001b28:	464e      	mov	r6, r9
 8001b2a:	40d4      	lsrs	r4, r2
 8001b2c:	4326      	orrs	r6, r4
 8001b2e:	0034      	movs	r4, r6
 8001b30:	4656      	mov	r6, sl
 8001b32:	40b3      	lsls	r3, r6
 8001b34:	1e5e      	subs	r6, r3, #1
 8001b36:	41b3      	sbcs	r3, r6
 8001b38:	431c      	orrs	r4, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	40d3      	lsrs	r3, r2
 8001b3e:	18c9      	adds	r1, r1, r3
 8001b40:	19e4      	adds	r4, r4, r7
 8001b42:	42bc      	cmp	r4, r7
 8001b44:	41bf      	sbcs	r7, r7
 8001b46:	427f      	negs	r7, r7
 8001b48:	46b9      	mov	r9, r7
 8001b4a:	4680      	mov	r8, r0
 8001b4c:	4489      	add	r9, r1
 8001b4e:	e0d8      	b.n	8001d02 <__aeabi_dsub+0x426>
 8001b50:	4640      	mov	r0, r8
 8001b52:	4c3b      	ldr	r4, [pc, #236]	; (8001c40 <__aeabi_dsub+0x364>)
 8001b54:	3001      	adds	r0, #1
 8001b56:	4220      	tst	r0, r4
 8001b58:	d000      	beq.n	8001b5c <__aeabi_dsub+0x280>
 8001b5a:	e0b4      	b.n	8001cc6 <__aeabi_dsub+0x3ea>
 8001b5c:	4640      	mov	r0, r8
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d000      	beq.n	8001b64 <__aeabi_dsub+0x288>
 8001b62:	e144      	b.n	8001dee <__aeabi_dsub+0x512>
 8001b64:	4660      	mov	r0, ip
 8001b66:	4318      	orrs	r0, r3
 8001b68:	d100      	bne.n	8001b6c <__aeabi_dsub+0x290>
 8001b6a:	e190      	b.n	8001e8e <__aeabi_dsub+0x5b2>
 8001b6c:	0008      	movs	r0, r1
 8001b6e:	4338      	orrs	r0, r7
 8001b70:	d000      	beq.n	8001b74 <__aeabi_dsub+0x298>
 8001b72:	e1aa      	b.n	8001eca <__aeabi_dsub+0x5ee>
 8001b74:	4661      	mov	r1, ip
 8001b76:	08db      	lsrs	r3, r3, #3
 8001b78:	0749      	lsls	r1, r1, #29
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	4661      	mov	r1, ip
 8001b7e:	08cc      	lsrs	r4, r1, #3
 8001b80:	e027      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001b82:	0008      	movs	r0, r1
 8001b84:	4338      	orrs	r0, r7
 8001b86:	d061      	beq.n	8001c4c <__aeabi_dsub+0x370>
 8001b88:	1e50      	subs	r0, r2, #1
 8001b8a:	2a01      	cmp	r2, #1
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_dsub+0x2b4>
 8001b8e:	e139      	b.n	8001e04 <__aeabi_dsub+0x528>
 8001b90:	42a2      	cmp	r2, r4
 8001b92:	d027      	beq.n	8001be4 <__aeabi_dsub+0x308>
 8001b94:	0002      	movs	r2, r0
 8001b96:	e75d      	b.n	8001a54 <__aeabi_dsub+0x178>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	391f      	subs	r1, #31
 8001b9c:	40ca      	lsrs	r2, r1
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	2b20      	cmp	r3, #32
 8001ba2:	d003      	beq.n	8001bac <__aeabi_dsub+0x2d0>
 8001ba4:	2240      	movs	r2, #64	; 0x40
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	4098      	lsls	r0, r3
 8001baa:	4304      	orrs	r4, r0
 8001bac:	1e63      	subs	r3, r4, #1
 8001bae:	419c      	sbcs	r4, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4699      	mov	r9, r3
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	430c      	orrs	r4, r1
 8001bb8:	0763      	lsls	r3, r4, #29
 8001bba:	d000      	beq.n	8001bbe <__aeabi_dsub+0x2e2>
 8001bbc:	e712      	b.n	80019e4 <__aeabi_dsub+0x108>
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	464a      	mov	r2, r9
 8001bc2:	08e4      	lsrs	r4, r4, #3
 8001bc4:	075b      	lsls	r3, r3, #29
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	08d4      	lsrs	r4, r2, #3
 8001bca:	4642      	mov	r2, r8
 8001bcc:	4919      	ldr	r1, [pc, #100]	; (8001c34 <__aeabi_dsub+0x358>)
 8001bce:	428a      	cmp	r2, r1
 8001bd0:	d00e      	beq.n	8001bf0 <__aeabi_dsub+0x314>
 8001bd2:	0324      	lsls	r4, r4, #12
 8001bd4:	0552      	lsls	r2, r2, #21
 8001bd6:	0b24      	lsrs	r4, r4, #12
 8001bd8:	0d52      	lsrs	r2, r2, #21
 8001bda:	e722      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001bdc:	000a      	movs	r2, r1
 8001bde:	2400      	movs	r4, #0
 8001be0:	2300      	movs	r3, #0
 8001be2:	e71e      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	4662      	mov	r2, ip
 8001be8:	0752      	lsls	r2, r2, #29
 8001bea:	4313      	orrs	r3, r2
 8001bec:	4662      	mov	r2, ip
 8001bee:	08d4      	lsrs	r4, r2, #3
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	4322      	orrs	r2, r4
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dsub+0x31c>
 8001bf6:	e1fc      	b.n	8001ff2 <__aeabi_dsub+0x716>
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	0312      	lsls	r2, r2, #12
 8001bfc:	4314      	orrs	r4, r2
 8001bfe:	0324      	lsls	r4, r4, #12
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <__aeabi_dsub+0x358>)
 8001c02:	0b24      	lsrs	r4, r4, #12
 8001c04:	e70d      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001c06:	0020      	movs	r0, r4
 8001c08:	f000 fb74 	bl	80022f4 <__clzsi2>
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	3118      	adds	r1, #24
 8001c10:	291f      	cmp	r1, #31
 8001c12:	dc00      	bgt.n	8001c16 <__aeabi_dsub+0x33a>
 8001c14:	e6c4      	b.n	80019a0 <__aeabi_dsub+0xc4>
 8001c16:	3808      	subs	r0, #8
 8001c18:	4084      	lsls	r4, r0
 8001c1a:	4643      	mov	r3, r8
 8001c1c:	0020      	movs	r0, r4
 8001c1e:	2400      	movs	r4, #0
 8001c20:	4588      	cmp	r8, r1
 8001c22:	dc00      	bgt.n	8001c26 <__aeabi_dsub+0x34a>
 8001c24:	e6c8      	b.n	80019b8 <__aeabi_dsub+0xdc>
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__aeabi_dsub+0x35c>)
 8001c28:	1a5b      	subs	r3, r3, r1
 8001c2a:	4010      	ands	r0, r2
 8001c2c:	4698      	mov	r8, r3
 8001c2e:	4681      	mov	r9, r0
 8001c30:	e6d6      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	000007ff 	.word	0x000007ff
 8001c38:	ff7fffff 	.word	0xff7fffff
 8001c3c:	fffff801 	.word	0xfffff801
 8001c40:	000007fe 	.word	0x000007fe
 8001c44:	430f      	orrs	r7, r1
 8001c46:	1e7a      	subs	r2, r7, #1
 8001c48:	4197      	sbcs	r7, r2
 8001c4a:	e691      	b.n	8001970 <__aeabi_dsub+0x94>
 8001c4c:	4661      	mov	r1, ip
 8001c4e:	08db      	lsrs	r3, r3, #3
 8001c50:	0749      	lsls	r1, r1, #29
 8001c52:	430b      	orrs	r3, r1
 8001c54:	4661      	mov	r1, ip
 8001c56:	08cc      	lsrs	r4, r1, #3
 8001c58:	e7b8      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	4cd3      	ldr	r4, [pc, #844]	; (8001fac <__aeabi_dsub+0x6d0>)
 8001c5e:	3001      	adds	r0, #1
 8001c60:	4220      	tst	r0, r4
 8001c62:	d000      	beq.n	8001c66 <__aeabi_dsub+0x38a>
 8001c64:	e0a2      	b.n	8001dac <__aeabi_dsub+0x4d0>
 8001c66:	4640      	mov	r0, r8
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d000      	beq.n	8001c6e <__aeabi_dsub+0x392>
 8001c6c:	e101      	b.n	8001e72 <__aeabi_dsub+0x596>
 8001c6e:	4660      	mov	r0, ip
 8001c70:	4318      	orrs	r0, r3
 8001c72:	d100      	bne.n	8001c76 <__aeabi_dsub+0x39a>
 8001c74:	e15e      	b.n	8001f34 <__aeabi_dsub+0x658>
 8001c76:	0008      	movs	r0, r1
 8001c78:	4338      	orrs	r0, r7
 8001c7a:	d000      	beq.n	8001c7e <__aeabi_dsub+0x3a2>
 8001c7c:	e15f      	b.n	8001f3e <__aeabi_dsub+0x662>
 8001c7e:	4661      	mov	r1, ip
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	0749      	lsls	r1, r1, #29
 8001c84:	430b      	orrs	r3, r1
 8001c86:	4661      	mov	r1, ip
 8001c88:	08cc      	lsrs	r4, r1, #3
 8001c8a:	e7a2      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001c8c:	4dc8      	ldr	r5, [pc, #800]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001c8e:	42a8      	cmp	r0, r5
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x3b8>
 8001c92:	e0cf      	b.n	8001e34 <__aeabi_dsub+0x558>
 8001c94:	2580      	movs	r5, #128	; 0x80
 8001c96:	4664      	mov	r4, ip
 8001c98:	042d      	lsls	r5, r5, #16
 8001c9a:	432c      	orrs	r4, r5
 8001c9c:	46a4      	mov	ip, r4
 8001c9e:	2a38      	cmp	r2, #56	; 0x38
 8001ca0:	dc56      	bgt.n	8001d50 <__aeabi_dsub+0x474>
 8001ca2:	2a1f      	cmp	r2, #31
 8001ca4:	dd00      	ble.n	8001ca8 <__aeabi_dsub+0x3cc>
 8001ca6:	e0d1      	b.n	8001e4c <__aeabi_dsub+0x570>
 8001ca8:	2520      	movs	r5, #32
 8001caa:	001e      	movs	r6, r3
 8001cac:	1aad      	subs	r5, r5, r2
 8001cae:	4664      	mov	r4, ip
 8001cb0:	40ab      	lsls	r3, r5
 8001cb2:	40ac      	lsls	r4, r5
 8001cb4:	40d6      	lsrs	r6, r2
 8001cb6:	1e5d      	subs	r5, r3, #1
 8001cb8:	41ab      	sbcs	r3, r5
 8001cba:	4334      	orrs	r4, r6
 8001cbc:	4323      	orrs	r3, r4
 8001cbe:	4664      	mov	r4, ip
 8001cc0:	40d4      	lsrs	r4, r2
 8001cc2:	1b09      	subs	r1, r1, r4
 8001cc4:	e049      	b.n	8001d5a <__aeabi_dsub+0x47e>
 8001cc6:	4660      	mov	r0, ip
 8001cc8:	1bdc      	subs	r4, r3, r7
 8001cca:	1a46      	subs	r6, r0, r1
 8001ccc:	42a3      	cmp	r3, r4
 8001cce:	4180      	sbcs	r0, r0
 8001cd0:	4240      	negs	r0, r0
 8001cd2:	4681      	mov	r9, r0
 8001cd4:	0030      	movs	r0, r6
 8001cd6:	464e      	mov	r6, r9
 8001cd8:	1b80      	subs	r0, r0, r6
 8001cda:	4681      	mov	r9, r0
 8001cdc:	0200      	lsls	r0, r0, #8
 8001cde:	d476      	bmi.n	8001dce <__aeabi_dsub+0x4f2>
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	4323      	orrs	r3, r4
 8001ce4:	d000      	beq.n	8001ce8 <__aeabi_dsub+0x40c>
 8001ce6:	e652      	b.n	800198e <__aeabi_dsub+0xb2>
 8001ce8:	2400      	movs	r4, #0
 8001cea:	2500      	movs	r5, #0
 8001cec:	e771      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001cee:	4339      	orrs	r1, r7
 8001cf0:	000c      	movs	r4, r1
 8001cf2:	1e62      	subs	r2, r4, #1
 8001cf4:	4194      	sbcs	r4, r2
 8001cf6:	18e4      	adds	r4, r4, r3
 8001cf8:	429c      	cmp	r4, r3
 8001cfa:	419b      	sbcs	r3, r3
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	4463      	add	r3, ip
 8001d00:	4699      	mov	r9, r3
 8001d02:	464b      	mov	r3, r9
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	d400      	bmi.n	8001d0a <__aeabi_dsub+0x42e>
 8001d08:	e756      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	469c      	mov	ip, r3
 8001d0e:	4ba8      	ldr	r3, [pc, #672]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001d10:	44e0      	add	r8, ip
 8001d12:	4598      	cmp	r8, r3
 8001d14:	d038      	beq.n	8001d88 <__aeabi_dsub+0x4ac>
 8001d16:	464b      	mov	r3, r9
 8001d18:	48a6      	ldr	r0, [pc, #664]	; (8001fb4 <__aeabi_dsub+0x6d8>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4003      	ands	r3, r0
 8001d1e:	0018      	movs	r0, r3
 8001d20:	0863      	lsrs	r3, r4, #1
 8001d22:	4014      	ands	r4, r2
 8001d24:	431c      	orrs	r4, r3
 8001d26:	07c3      	lsls	r3, r0, #31
 8001d28:	431c      	orrs	r4, r3
 8001d2a:	0843      	lsrs	r3, r0, #1
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	e657      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001d30:	0010      	movs	r0, r2
 8001d32:	000e      	movs	r6, r1
 8001d34:	3820      	subs	r0, #32
 8001d36:	40c6      	lsrs	r6, r0
 8001d38:	2a20      	cmp	r2, #32
 8001d3a:	d004      	beq.n	8001d46 <__aeabi_dsub+0x46a>
 8001d3c:	2040      	movs	r0, #64	; 0x40
 8001d3e:	1a82      	subs	r2, r0, r2
 8001d40:	4091      	lsls	r1, r2
 8001d42:	430f      	orrs	r7, r1
 8001d44:	46b9      	mov	r9, r7
 8001d46:	464f      	mov	r7, r9
 8001d48:	1e7a      	subs	r2, r7, #1
 8001d4a:	4197      	sbcs	r7, r2
 8001d4c:	4337      	orrs	r7, r6
 8001d4e:	e60f      	b.n	8001970 <__aeabi_dsub+0x94>
 8001d50:	4662      	mov	r2, ip
 8001d52:	431a      	orrs	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	1e5a      	subs	r2, r3, #1
 8001d58:	4193      	sbcs	r3, r2
 8001d5a:	1afc      	subs	r4, r7, r3
 8001d5c:	42a7      	cmp	r7, r4
 8001d5e:	41bf      	sbcs	r7, r7
 8001d60:	427f      	negs	r7, r7
 8001d62:	1bcb      	subs	r3, r1, r7
 8001d64:	4699      	mov	r9, r3
 8001d66:	465d      	mov	r5, fp
 8001d68:	4680      	mov	r8, r0
 8001d6a:	e608      	b.n	800197e <__aeabi_dsub+0xa2>
 8001d6c:	4666      	mov	r6, ip
 8001d6e:	431e      	orrs	r6, r3
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dsub+0x498>
 8001d72:	e0be      	b.n	8001ef2 <__aeabi_dsub+0x616>
 8001d74:	1e56      	subs	r6, r2, #1
 8001d76:	2a01      	cmp	r2, #1
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x4a0>
 8001d7a:	e109      	b.n	8001f90 <__aeabi_dsub+0x6b4>
 8001d7c:	4c8c      	ldr	r4, [pc, #560]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001d7e:	42a2      	cmp	r2, r4
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x4a8>
 8001d82:	e119      	b.n	8001fb8 <__aeabi_dsub+0x6dc>
 8001d84:	0032      	movs	r2, r6
 8001d86:	e6c1      	b.n	8001b0c <__aeabi_dsub+0x230>
 8001d88:	4642      	mov	r2, r8
 8001d8a:	2400      	movs	r4, #0
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e648      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001d90:	2020      	movs	r0, #32
 8001d92:	000c      	movs	r4, r1
 8001d94:	1a80      	subs	r0, r0, r2
 8001d96:	003e      	movs	r6, r7
 8001d98:	4087      	lsls	r7, r0
 8001d9a:	4084      	lsls	r4, r0
 8001d9c:	40d6      	lsrs	r6, r2
 8001d9e:	1e78      	subs	r0, r7, #1
 8001da0:	4187      	sbcs	r7, r0
 8001da2:	40d1      	lsrs	r1, r2
 8001da4:	4334      	orrs	r4, r6
 8001da6:	433c      	orrs	r4, r7
 8001da8:	448c      	add	ip, r1
 8001daa:	e7a4      	b.n	8001cf6 <__aeabi_dsub+0x41a>
 8001dac:	4a80      	ldr	r2, [pc, #512]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001dae:	4290      	cmp	r0, r2
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x4d8>
 8001db2:	e0e9      	b.n	8001f88 <__aeabi_dsub+0x6ac>
 8001db4:	19df      	adds	r7, r3, r7
 8001db6:	429f      	cmp	r7, r3
 8001db8:	419b      	sbcs	r3, r3
 8001dba:	4461      	add	r1, ip
 8001dbc:	425b      	negs	r3, r3
 8001dbe:	18c9      	adds	r1, r1, r3
 8001dc0:	07cc      	lsls	r4, r1, #31
 8001dc2:	087f      	lsrs	r7, r7, #1
 8001dc4:	084b      	lsrs	r3, r1, #1
 8001dc6:	4699      	mov	r9, r3
 8001dc8:	4680      	mov	r8, r0
 8001dca:	433c      	orrs	r4, r7
 8001dcc:	e6f4      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001dce:	1afc      	subs	r4, r7, r3
 8001dd0:	42a7      	cmp	r7, r4
 8001dd2:	41bf      	sbcs	r7, r7
 8001dd4:	4663      	mov	r3, ip
 8001dd6:	427f      	negs	r7, r7
 8001dd8:	1ac9      	subs	r1, r1, r3
 8001dda:	1bcb      	subs	r3, r1, r7
 8001ddc:	4699      	mov	r9, r3
 8001dde:	465d      	mov	r5, fp
 8001de0:	e5d5      	b.n	800198e <__aeabi_dsub+0xb2>
 8001de2:	08ff      	lsrs	r7, r7, #3
 8001de4:	074b      	lsls	r3, r1, #29
 8001de6:	465d      	mov	r5, fp
 8001de8:	433b      	orrs	r3, r7
 8001dea:	08cc      	lsrs	r4, r1, #3
 8001dec:	e6ee      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001dee:	4662      	mov	r2, ip
 8001df0:	431a      	orrs	r2, r3
 8001df2:	d000      	beq.n	8001df6 <__aeabi_dsub+0x51a>
 8001df4:	e082      	b.n	8001efc <__aeabi_dsub+0x620>
 8001df6:	000b      	movs	r3, r1
 8001df8:	433b      	orrs	r3, r7
 8001dfa:	d11b      	bne.n	8001e34 <__aeabi_dsub+0x558>
 8001dfc:	2480      	movs	r4, #128	; 0x80
 8001dfe:	2500      	movs	r5, #0
 8001e00:	0324      	lsls	r4, r4, #12
 8001e02:	e6f9      	b.n	8001bf8 <__aeabi_dsub+0x31c>
 8001e04:	19dc      	adds	r4, r3, r7
 8001e06:	429c      	cmp	r4, r3
 8001e08:	419b      	sbcs	r3, r3
 8001e0a:	4461      	add	r1, ip
 8001e0c:	4689      	mov	r9, r1
 8001e0e:	425b      	negs	r3, r3
 8001e10:	4499      	add	r9, r3
 8001e12:	464b      	mov	r3, r9
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	d444      	bmi.n	8001ea2 <__aeabi_dsub+0x5c6>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	4698      	mov	r8, r3
 8001e1c:	e6cc      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001e1e:	1bdc      	subs	r4, r3, r7
 8001e20:	4662      	mov	r2, ip
 8001e22:	42a3      	cmp	r3, r4
 8001e24:	419b      	sbcs	r3, r3
 8001e26:	1a51      	subs	r1, r2, r1
 8001e28:	425b      	negs	r3, r3
 8001e2a:	1acb      	subs	r3, r1, r3
 8001e2c:	4699      	mov	r9, r3
 8001e2e:	2301      	movs	r3, #1
 8001e30:	4698      	mov	r8, r3
 8001e32:	e5a4      	b.n	800197e <__aeabi_dsub+0xa2>
 8001e34:	08ff      	lsrs	r7, r7, #3
 8001e36:	074b      	lsls	r3, r1, #29
 8001e38:	465d      	mov	r5, fp
 8001e3a:	433b      	orrs	r3, r7
 8001e3c:	08cc      	lsrs	r4, r1, #3
 8001e3e:	e6d7      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e40:	4662      	mov	r2, ip
 8001e42:	431a      	orrs	r2, r3
 8001e44:	0014      	movs	r4, r2
 8001e46:	1e63      	subs	r3, r4, #1
 8001e48:	419c      	sbcs	r4, r3
 8001e4a:	e679      	b.n	8001b40 <__aeabi_dsub+0x264>
 8001e4c:	0015      	movs	r5, r2
 8001e4e:	4664      	mov	r4, ip
 8001e50:	3d20      	subs	r5, #32
 8001e52:	40ec      	lsrs	r4, r5
 8001e54:	46a0      	mov	r8, r4
 8001e56:	2a20      	cmp	r2, #32
 8001e58:	d005      	beq.n	8001e66 <__aeabi_dsub+0x58a>
 8001e5a:	2540      	movs	r5, #64	; 0x40
 8001e5c:	4664      	mov	r4, ip
 8001e5e:	1aaa      	subs	r2, r5, r2
 8001e60:	4094      	lsls	r4, r2
 8001e62:	4323      	orrs	r3, r4
 8001e64:	469a      	mov	sl, r3
 8001e66:	4654      	mov	r4, sl
 8001e68:	1e63      	subs	r3, r4, #1
 8001e6a:	419c      	sbcs	r4, r3
 8001e6c:	4643      	mov	r3, r8
 8001e6e:	4323      	orrs	r3, r4
 8001e70:	e773      	b.n	8001d5a <__aeabi_dsub+0x47e>
 8001e72:	4662      	mov	r2, ip
 8001e74:	431a      	orrs	r2, r3
 8001e76:	d023      	beq.n	8001ec0 <__aeabi_dsub+0x5e4>
 8001e78:	000a      	movs	r2, r1
 8001e7a:	433a      	orrs	r2, r7
 8001e7c:	d000      	beq.n	8001e80 <__aeabi_dsub+0x5a4>
 8001e7e:	e0a0      	b.n	8001fc2 <__aeabi_dsub+0x6e6>
 8001e80:	4662      	mov	r2, ip
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	0752      	lsls	r2, r2, #29
 8001e86:	4313      	orrs	r3, r2
 8001e88:	4662      	mov	r2, ip
 8001e8a:	08d4      	lsrs	r4, r2, #3
 8001e8c:	e6b0      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e8e:	000b      	movs	r3, r1
 8001e90:	433b      	orrs	r3, r7
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x5ba>
 8001e94:	e728      	b.n	8001ce8 <__aeabi_dsub+0x40c>
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	074b      	lsls	r3, r1, #29
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	433b      	orrs	r3, r7
 8001e9e:	08cc      	lsrs	r4, r1, #3
 8001ea0:	e697      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	4698      	mov	r8, r3
 8001ea6:	e736      	b.n	8001d16 <__aeabi_dsub+0x43a>
 8001ea8:	1afc      	subs	r4, r7, r3
 8001eaa:	42a7      	cmp	r7, r4
 8001eac:	41bf      	sbcs	r7, r7
 8001eae:	4663      	mov	r3, ip
 8001eb0:	427f      	negs	r7, r7
 8001eb2:	1ac9      	subs	r1, r1, r3
 8001eb4:	1bcb      	subs	r3, r1, r7
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	2301      	movs	r3, #1
 8001eba:	465d      	mov	r5, fp
 8001ebc:	4698      	mov	r8, r3
 8001ebe:	e55e      	b.n	800197e <__aeabi_dsub+0xa2>
 8001ec0:	074b      	lsls	r3, r1, #29
 8001ec2:	08ff      	lsrs	r7, r7, #3
 8001ec4:	433b      	orrs	r3, r7
 8001ec6:	08cc      	lsrs	r4, r1, #3
 8001ec8:	e692      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001eca:	1bdc      	subs	r4, r3, r7
 8001ecc:	4660      	mov	r0, ip
 8001ece:	42a3      	cmp	r3, r4
 8001ed0:	41b6      	sbcs	r6, r6
 8001ed2:	1a40      	subs	r0, r0, r1
 8001ed4:	4276      	negs	r6, r6
 8001ed6:	1b80      	subs	r0, r0, r6
 8001ed8:	4681      	mov	r9, r0
 8001eda:	0200      	lsls	r0, r0, #8
 8001edc:	d560      	bpl.n	8001fa0 <__aeabi_dsub+0x6c4>
 8001ede:	1afc      	subs	r4, r7, r3
 8001ee0:	42a7      	cmp	r7, r4
 8001ee2:	41bf      	sbcs	r7, r7
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	427f      	negs	r7, r7
 8001ee8:	1ac9      	subs	r1, r1, r3
 8001eea:	1bcb      	subs	r3, r1, r7
 8001eec:	4699      	mov	r9, r3
 8001eee:	465d      	mov	r5, fp
 8001ef0:	e576      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001ef2:	08ff      	lsrs	r7, r7, #3
 8001ef4:	074b      	lsls	r3, r1, #29
 8001ef6:	433b      	orrs	r3, r7
 8001ef8:	08cc      	lsrs	r4, r1, #3
 8001efa:	e667      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001efc:	000a      	movs	r2, r1
 8001efe:	08db      	lsrs	r3, r3, #3
 8001f00:	433a      	orrs	r2, r7
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x62a>
 8001f04:	e66f      	b.n	8001be6 <__aeabi_dsub+0x30a>
 8001f06:	4662      	mov	r2, ip
 8001f08:	0752      	lsls	r2, r2, #29
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	4662      	mov	r2, ip
 8001f0e:	08d4      	lsrs	r4, r2, #3
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	0312      	lsls	r2, r2, #12
 8001f14:	4214      	tst	r4, r2
 8001f16:	d007      	beq.n	8001f28 <__aeabi_dsub+0x64c>
 8001f18:	08c8      	lsrs	r0, r1, #3
 8001f1a:	4210      	tst	r0, r2
 8001f1c:	d104      	bne.n	8001f28 <__aeabi_dsub+0x64c>
 8001f1e:	465d      	mov	r5, fp
 8001f20:	0004      	movs	r4, r0
 8001f22:	08fb      	lsrs	r3, r7, #3
 8001f24:	0749      	lsls	r1, r1, #29
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0f5a      	lsrs	r2, r3, #29
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	08db      	lsrs	r3, r3, #3
 8001f2e:	0752      	lsls	r2, r2, #29
 8001f30:	4313      	orrs	r3, r2
 8001f32:	e65d      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001f34:	074b      	lsls	r3, r1, #29
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	433b      	orrs	r3, r7
 8001f3a:	08cc      	lsrs	r4, r1, #3
 8001f3c:	e649      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001f3e:	19dc      	adds	r4, r3, r7
 8001f40:	429c      	cmp	r4, r3
 8001f42:	419b      	sbcs	r3, r3
 8001f44:	4461      	add	r1, ip
 8001f46:	4689      	mov	r9, r1
 8001f48:	425b      	negs	r3, r3
 8001f4a:	4499      	add	r9, r3
 8001f4c:	464b      	mov	r3, r9
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	d400      	bmi.n	8001f54 <__aeabi_dsub+0x678>
 8001f52:	e631      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001f54:	464a      	mov	r2, r9
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <__aeabi_dsub+0x6d8>)
 8001f58:	401a      	ands	r2, r3
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	4691      	mov	r9, r2
 8001f5e:	4698      	mov	r8, r3
 8001f60:	e62a      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001f62:	0016      	movs	r6, r2
 8001f64:	4664      	mov	r4, ip
 8001f66:	3e20      	subs	r6, #32
 8001f68:	40f4      	lsrs	r4, r6
 8001f6a:	46a0      	mov	r8, r4
 8001f6c:	2a20      	cmp	r2, #32
 8001f6e:	d005      	beq.n	8001f7c <__aeabi_dsub+0x6a0>
 8001f70:	2640      	movs	r6, #64	; 0x40
 8001f72:	4664      	mov	r4, ip
 8001f74:	1ab2      	subs	r2, r6, r2
 8001f76:	4094      	lsls	r4, r2
 8001f78:	4323      	orrs	r3, r4
 8001f7a:	469a      	mov	sl, r3
 8001f7c:	4654      	mov	r4, sl
 8001f7e:	1e63      	subs	r3, r4, #1
 8001f80:	419c      	sbcs	r4, r3
 8001f82:	4643      	mov	r3, r8
 8001f84:	431c      	orrs	r4, r3
 8001f86:	e5db      	b.n	8001b40 <__aeabi_dsub+0x264>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e548      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001f90:	19dc      	adds	r4, r3, r7
 8001f92:	42bc      	cmp	r4, r7
 8001f94:	41bf      	sbcs	r7, r7
 8001f96:	4461      	add	r1, ip
 8001f98:	4689      	mov	r9, r1
 8001f9a:	427f      	negs	r7, r7
 8001f9c:	44b9      	add	r9, r7
 8001f9e:	e738      	b.n	8001e12 <__aeabi_dsub+0x536>
 8001fa0:	464b      	mov	r3, r9
 8001fa2:	4323      	orrs	r3, r4
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x6cc>
 8001fa6:	e69f      	b.n	8001ce8 <__aeabi_dsub+0x40c>
 8001fa8:	e606      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	000007fe 	.word	0x000007fe
 8001fb0:	000007ff 	.word	0x000007ff
 8001fb4:	ff7fffff 	.word	0xff7fffff
 8001fb8:	08ff      	lsrs	r7, r7, #3
 8001fba:	074b      	lsls	r3, r1, #29
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	08cc      	lsrs	r4, r1, #3
 8001fc0:	e616      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	0752      	lsls	r2, r2, #29
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	4662      	mov	r2, ip
 8001fcc:	08d4      	lsrs	r4, r2, #3
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	0312      	lsls	r2, r2, #12
 8001fd2:	4214      	tst	r4, r2
 8001fd4:	d007      	beq.n	8001fe6 <__aeabi_dsub+0x70a>
 8001fd6:	08c8      	lsrs	r0, r1, #3
 8001fd8:	4210      	tst	r0, r2
 8001fda:	d104      	bne.n	8001fe6 <__aeabi_dsub+0x70a>
 8001fdc:	465d      	mov	r5, fp
 8001fde:	0004      	movs	r4, r0
 8001fe0:	08fb      	lsrs	r3, r7, #3
 8001fe2:	0749      	lsls	r1, r1, #29
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	0f5a      	lsrs	r2, r3, #29
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	0752      	lsls	r2, r2, #29
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	e5fe      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	4a01      	ldr	r2, [pc, #4]	; (8001ffc <__aeabi_dsub+0x720>)
 8001ff6:	001c      	movs	r4, r3
 8001ff8:	e513      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	000007ff 	.word	0x000007ff

08002000 <__aeabi_dcmpun>:
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	0005      	movs	r5, r0
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <__aeabi_dcmpun+0x38>)
 8002006:	031c      	lsls	r4, r3, #12
 8002008:	0016      	movs	r6, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	030a      	lsls	r2, r1, #12
 800200e:	0049      	lsls	r1, r1, #1
 8002010:	0b12      	lsrs	r2, r2, #12
 8002012:	0d49      	lsrs	r1, r1, #21
 8002014:	0b24      	lsrs	r4, r4, #12
 8002016:	0d5b      	lsrs	r3, r3, #21
 8002018:	4281      	cmp	r1, r0
 800201a:	d008      	beq.n	800202e <__aeabi_dcmpun+0x2e>
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <__aeabi_dcmpun+0x38>)
 800201e:	2000      	movs	r0, #0
 8002020:	4293      	cmp	r3, r2
 8002022:	d103      	bne.n	800202c <__aeabi_dcmpun+0x2c>
 8002024:	0020      	movs	r0, r4
 8002026:	4330      	orrs	r0, r6
 8002028:	1e43      	subs	r3, r0, #1
 800202a:	4198      	sbcs	r0, r3
 800202c:	bd70      	pop	{r4, r5, r6, pc}
 800202e:	2001      	movs	r0, #1
 8002030:	432a      	orrs	r2, r5
 8002032:	d1fb      	bne.n	800202c <__aeabi_dcmpun+0x2c>
 8002034:	e7f2      	b.n	800201c <__aeabi_dcmpun+0x1c>
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	000007ff 	.word	0x000007ff

0800203c <__aeabi_d2iz>:
 800203c:	000a      	movs	r2, r1
 800203e:	b530      	push	{r4, r5, lr}
 8002040:	4c13      	ldr	r4, [pc, #76]	; (8002090 <__aeabi_d2iz+0x54>)
 8002042:	0053      	lsls	r3, r2, #1
 8002044:	0309      	lsls	r1, r1, #12
 8002046:	0005      	movs	r5, r0
 8002048:	0b09      	lsrs	r1, r1, #12
 800204a:	2000      	movs	r0, #0
 800204c:	0d5b      	lsrs	r3, r3, #21
 800204e:	0fd2      	lsrs	r2, r2, #31
 8002050:	42a3      	cmp	r3, r4
 8002052:	dd04      	ble.n	800205e <__aeabi_d2iz+0x22>
 8002054:	480f      	ldr	r0, [pc, #60]	; (8002094 <__aeabi_d2iz+0x58>)
 8002056:	4283      	cmp	r3, r0
 8002058:	dd02      	ble.n	8002060 <__aeabi_d2iz+0x24>
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <__aeabi_d2iz+0x5c>)
 800205c:	18d0      	adds	r0, r2, r3
 800205e:	bd30      	pop	{r4, r5, pc}
 8002060:	2080      	movs	r0, #128	; 0x80
 8002062:	0340      	lsls	r0, r0, #13
 8002064:	4301      	orrs	r1, r0
 8002066:	480d      	ldr	r0, [pc, #52]	; (800209c <__aeabi_d2iz+0x60>)
 8002068:	1ac0      	subs	r0, r0, r3
 800206a:	281f      	cmp	r0, #31
 800206c:	dd08      	ble.n	8002080 <__aeabi_d2iz+0x44>
 800206e:	480c      	ldr	r0, [pc, #48]	; (80020a0 <__aeabi_d2iz+0x64>)
 8002070:	1ac3      	subs	r3, r0, r3
 8002072:	40d9      	lsrs	r1, r3
 8002074:	000b      	movs	r3, r1
 8002076:	4258      	negs	r0, r3
 8002078:	2a00      	cmp	r2, #0
 800207a:	d1f0      	bne.n	800205e <__aeabi_d2iz+0x22>
 800207c:	0018      	movs	r0, r3
 800207e:	e7ee      	b.n	800205e <__aeabi_d2iz+0x22>
 8002080:	4c08      	ldr	r4, [pc, #32]	; (80020a4 <__aeabi_d2iz+0x68>)
 8002082:	40c5      	lsrs	r5, r0
 8002084:	46a4      	mov	ip, r4
 8002086:	4463      	add	r3, ip
 8002088:	4099      	lsls	r1, r3
 800208a:	000b      	movs	r3, r1
 800208c:	432b      	orrs	r3, r5
 800208e:	e7f2      	b.n	8002076 <__aeabi_d2iz+0x3a>
 8002090:	000003fe 	.word	0x000003fe
 8002094:	0000041d 	.word	0x0000041d
 8002098:	7fffffff 	.word	0x7fffffff
 800209c:	00000433 	.word	0x00000433
 80020a0:	00000413 	.word	0x00000413
 80020a4:	fffffbed 	.word	0xfffffbed

080020a8 <__aeabi_i2d>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	2800      	cmp	r0, #0
 80020ac:	d016      	beq.n	80020dc <__aeabi_i2d+0x34>
 80020ae:	17c3      	asrs	r3, r0, #31
 80020b0:	18c5      	adds	r5, r0, r3
 80020b2:	405d      	eors	r5, r3
 80020b4:	0fc4      	lsrs	r4, r0, #31
 80020b6:	0028      	movs	r0, r5
 80020b8:	f000 f91c 	bl	80022f4 <__clzsi2>
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <__aeabi_i2d+0x5c>)
 80020be:	1a12      	subs	r2, r2, r0
 80020c0:	280a      	cmp	r0, #10
 80020c2:	dc16      	bgt.n	80020f2 <__aeabi_i2d+0x4a>
 80020c4:	0003      	movs	r3, r0
 80020c6:	002e      	movs	r6, r5
 80020c8:	3315      	adds	r3, #21
 80020ca:	409e      	lsls	r6, r3
 80020cc:	230b      	movs	r3, #11
 80020ce:	1a18      	subs	r0, r3, r0
 80020d0:	40c5      	lsrs	r5, r0
 80020d2:	0552      	lsls	r2, r2, #21
 80020d4:	032d      	lsls	r5, r5, #12
 80020d6:	0b2d      	lsrs	r5, r5, #12
 80020d8:	0d53      	lsrs	r3, r2, #21
 80020da:	e003      	b.n	80020e4 <__aeabi_i2d+0x3c>
 80020dc:	2400      	movs	r4, #0
 80020de:	2300      	movs	r3, #0
 80020e0:	2500      	movs	r5, #0
 80020e2:	2600      	movs	r6, #0
 80020e4:	051b      	lsls	r3, r3, #20
 80020e6:	432b      	orrs	r3, r5
 80020e8:	07e4      	lsls	r4, r4, #31
 80020ea:	4323      	orrs	r3, r4
 80020ec:	0030      	movs	r0, r6
 80020ee:	0019      	movs	r1, r3
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
 80020f2:	380b      	subs	r0, #11
 80020f4:	4085      	lsls	r5, r0
 80020f6:	0552      	lsls	r2, r2, #21
 80020f8:	032d      	lsls	r5, r5, #12
 80020fa:	2600      	movs	r6, #0
 80020fc:	0b2d      	lsrs	r5, r5, #12
 80020fe:	0d53      	lsrs	r3, r2, #21
 8002100:	e7f0      	b.n	80020e4 <__aeabi_i2d+0x3c>
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	0000041e 	.word	0x0000041e

08002108 <__aeabi_ui2d>:
 8002108:	b510      	push	{r4, lr}
 800210a:	1e04      	subs	r4, r0, #0
 800210c:	d010      	beq.n	8002130 <__aeabi_ui2d+0x28>
 800210e:	f000 f8f1 	bl	80022f4 <__clzsi2>
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <__aeabi_ui2d+0x48>)
 8002114:	1a1b      	subs	r3, r3, r0
 8002116:	280a      	cmp	r0, #10
 8002118:	dc11      	bgt.n	800213e <__aeabi_ui2d+0x36>
 800211a:	220b      	movs	r2, #11
 800211c:	0021      	movs	r1, r4
 800211e:	1a12      	subs	r2, r2, r0
 8002120:	40d1      	lsrs	r1, r2
 8002122:	3015      	adds	r0, #21
 8002124:	030a      	lsls	r2, r1, #12
 8002126:	055b      	lsls	r3, r3, #21
 8002128:	4084      	lsls	r4, r0
 800212a:	0b12      	lsrs	r2, r2, #12
 800212c:	0d5b      	lsrs	r3, r3, #21
 800212e:	e001      	b.n	8002134 <__aeabi_ui2d+0x2c>
 8002130:	2300      	movs	r3, #0
 8002132:	2200      	movs	r2, #0
 8002134:	051b      	lsls	r3, r3, #20
 8002136:	4313      	orrs	r3, r2
 8002138:	0020      	movs	r0, r4
 800213a:	0019      	movs	r1, r3
 800213c:	bd10      	pop	{r4, pc}
 800213e:	0022      	movs	r2, r4
 8002140:	380b      	subs	r0, #11
 8002142:	4082      	lsls	r2, r0
 8002144:	055b      	lsls	r3, r3, #21
 8002146:	0312      	lsls	r2, r2, #12
 8002148:	2400      	movs	r4, #0
 800214a:	0b12      	lsrs	r2, r2, #12
 800214c:	0d5b      	lsrs	r3, r3, #21
 800214e:	e7f1      	b.n	8002134 <__aeabi_ui2d+0x2c>
 8002150:	0000041e 	.word	0x0000041e

08002154 <__aeabi_f2d>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	0043      	lsls	r3, r0, #1
 8002158:	0246      	lsls	r6, r0, #9
 800215a:	0fc4      	lsrs	r4, r0, #31
 800215c:	20fe      	movs	r0, #254	; 0xfe
 800215e:	0e1b      	lsrs	r3, r3, #24
 8002160:	1c59      	adds	r1, r3, #1
 8002162:	0a75      	lsrs	r5, r6, #9
 8002164:	4208      	tst	r0, r1
 8002166:	d00c      	beq.n	8002182 <__aeabi_f2d+0x2e>
 8002168:	22e0      	movs	r2, #224	; 0xe0
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	4694      	mov	ip, r2
 800216e:	076d      	lsls	r5, r5, #29
 8002170:	0b36      	lsrs	r6, r6, #12
 8002172:	4463      	add	r3, ip
 8002174:	051b      	lsls	r3, r3, #20
 8002176:	4333      	orrs	r3, r6
 8002178:	07e4      	lsls	r4, r4, #31
 800217a:	4323      	orrs	r3, r4
 800217c:	0028      	movs	r0, r5
 800217e:	0019      	movs	r1, r3
 8002180:	bd70      	pop	{r4, r5, r6, pc}
 8002182:	2b00      	cmp	r3, #0
 8002184:	d114      	bne.n	80021b0 <__aeabi_f2d+0x5c>
 8002186:	2d00      	cmp	r5, #0
 8002188:	d01b      	beq.n	80021c2 <__aeabi_f2d+0x6e>
 800218a:	0028      	movs	r0, r5
 800218c:	f000 f8b2 	bl	80022f4 <__clzsi2>
 8002190:	280a      	cmp	r0, #10
 8002192:	dc1c      	bgt.n	80021ce <__aeabi_f2d+0x7a>
 8002194:	230b      	movs	r3, #11
 8002196:	002e      	movs	r6, r5
 8002198:	1a1b      	subs	r3, r3, r0
 800219a:	40de      	lsrs	r6, r3
 800219c:	0003      	movs	r3, r0
 800219e:	3315      	adds	r3, #21
 80021a0:	409d      	lsls	r5, r3
 80021a2:	4a0e      	ldr	r2, [pc, #56]	; (80021dc <__aeabi_f2d+0x88>)
 80021a4:	0336      	lsls	r6, r6, #12
 80021a6:	1a12      	subs	r2, r2, r0
 80021a8:	0552      	lsls	r2, r2, #21
 80021aa:	0b36      	lsrs	r6, r6, #12
 80021ac:	0d53      	lsrs	r3, r2, #21
 80021ae:	e7e1      	b.n	8002174 <__aeabi_f2d+0x20>
 80021b0:	2d00      	cmp	r5, #0
 80021b2:	d009      	beq.n	80021c8 <__aeabi_f2d+0x74>
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	0b36      	lsrs	r6, r6, #12
 80021b8:	0312      	lsls	r2, r2, #12
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <__aeabi_f2d+0x8c>)
 80021bc:	076d      	lsls	r5, r5, #29
 80021be:	4316      	orrs	r6, r2
 80021c0:	e7d8      	b.n	8002174 <__aeabi_f2d+0x20>
 80021c2:	2300      	movs	r3, #0
 80021c4:	2600      	movs	r6, #0
 80021c6:	e7d5      	b.n	8002174 <__aeabi_f2d+0x20>
 80021c8:	2600      	movs	r6, #0
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <__aeabi_f2d+0x8c>)
 80021cc:	e7d2      	b.n	8002174 <__aeabi_f2d+0x20>
 80021ce:	0003      	movs	r3, r0
 80021d0:	3b0b      	subs	r3, #11
 80021d2:	409d      	lsls	r5, r3
 80021d4:	002e      	movs	r6, r5
 80021d6:	2500      	movs	r5, #0
 80021d8:	e7e3      	b.n	80021a2 <__aeabi_f2d+0x4e>
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	00000389 	.word	0x00000389
 80021e0:	000007ff 	.word	0x000007ff

080021e4 <__aeabi_d2f>:
 80021e4:	0002      	movs	r2, r0
 80021e6:	004b      	lsls	r3, r1, #1
 80021e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ea:	0d5b      	lsrs	r3, r3, #21
 80021ec:	030c      	lsls	r4, r1, #12
 80021ee:	4e3d      	ldr	r6, [pc, #244]	; (80022e4 <__aeabi_d2f+0x100>)
 80021f0:	0a64      	lsrs	r4, r4, #9
 80021f2:	0f40      	lsrs	r0, r0, #29
 80021f4:	1c5f      	adds	r7, r3, #1
 80021f6:	0fc9      	lsrs	r1, r1, #31
 80021f8:	4304      	orrs	r4, r0
 80021fa:	00d5      	lsls	r5, r2, #3
 80021fc:	4237      	tst	r7, r6
 80021fe:	d00a      	beq.n	8002216 <__aeabi_d2f+0x32>
 8002200:	4839      	ldr	r0, [pc, #228]	; (80022e8 <__aeabi_d2f+0x104>)
 8002202:	181e      	adds	r6, r3, r0
 8002204:	2efe      	cmp	r6, #254	; 0xfe
 8002206:	dd16      	ble.n	8002236 <__aeabi_d2f+0x52>
 8002208:	20ff      	movs	r0, #255	; 0xff
 800220a:	2400      	movs	r4, #0
 800220c:	05c0      	lsls	r0, r0, #23
 800220e:	4320      	orrs	r0, r4
 8002210:	07c9      	lsls	r1, r1, #31
 8002212:	4308      	orrs	r0, r1
 8002214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <__aeabi_d2f+0x44>
 800221a:	432c      	orrs	r4, r5
 800221c:	d026      	beq.n	800226c <__aeabi_d2f+0x88>
 800221e:	2205      	movs	r2, #5
 8002220:	0192      	lsls	r2, r2, #6
 8002222:	0a54      	lsrs	r4, r2, #9
 8002224:	b2d8      	uxtb	r0, r3
 8002226:	e7f1      	b.n	800220c <__aeabi_d2f+0x28>
 8002228:	4325      	orrs	r5, r4
 800222a:	d0ed      	beq.n	8002208 <__aeabi_d2f+0x24>
 800222c:	2080      	movs	r0, #128	; 0x80
 800222e:	03c0      	lsls	r0, r0, #15
 8002230:	4304      	orrs	r4, r0
 8002232:	20ff      	movs	r0, #255	; 0xff
 8002234:	e7ea      	b.n	800220c <__aeabi_d2f+0x28>
 8002236:	2e00      	cmp	r6, #0
 8002238:	dd1b      	ble.n	8002272 <__aeabi_d2f+0x8e>
 800223a:	0192      	lsls	r2, r2, #6
 800223c:	1e53      	subs	r3, r2, #1
 800223e:	419a      	sbcs	r2, r3
 8002240:	00e4      	lsls	r4, r4, #3
 8002242:	0f6d      	lsrs	r5, r5, #29
 8002244:	4322      	orrs	r2, r4
 8002246:	432a      	orrs	r2, r5
 8002248:	0753      	lsls	r3, r2, #29
 800224a:	d048      	beq.n	80022de <__aeabi_d2f+0xfa>
 800224c:	230f      	movs	r3, #15
 800224e:	4013      	ands	r3, r2
 8002250:	2b04      	cmp	r3, #4
 8002252:	d000      	beq.n	8002256 <__aeabi_d2f+0x72>
 8002254:	3204      	adds	r2, #4
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	04db      	lsls	r3, r3, #19
 800225a:	4013      	ands	r3, r2
 800225c:	d03f      	beq.n	80022de <__aeabi_d2f+0xfa>
 800225e:	1c70      	adds	r0, r6, #1
 8002260:	2efe      	cmp	r6, #254	; 0xfe
 8002262:	d0d1      	beq.n	8002208 <__aeabi_d2f+0x24>
 8002264:	0192      	lsls	r2, r2, #6
 8002266:	0a54      	lsrs	r4, r2, #9
 8002268:	b2c0      	uxtb	r0, r0
 800226a:	e7cf      	b.n	800220c <__aeabi_d2f+0x28>
 800226c:	2000      	movs	r0, #0
 800226e:	2400      	movs	r4, #0
 8002270:	e7cc      	b.n	800220c <__aeabi_d2f+0x28>
 8002272:	0032      	movs	r2, r6
 8002274:	3217      	adds	r2, #23
 8002276:	db22      	blt.n	80022be <__aeabi_d2f+0xda>
 8002278:	2080      	movs	r0, #128	; 0x80
 800227a:	0400      	lsls	r0, r0, #16
 800227c:	4320      	orrs	r0, r4
 800227e:	241e      	movs	r4, #30
 8002280:	1ba4      	subs	r4, r4, r6
 8002282:	2c1f      	cmp	r4, #31
 8002284:	dd1d      	ble.n	80022c2 <__aeabi_d2f+0xde>
 8002286:	2202      	movs	r2, #2
 8002288:	4252      	negs	r2, r2
 800228a:	1b96      	subs	r6, r2, r6
 800228c:	0002      	movs	r2, r0
 800228e:	40f2      	lsrs	r2, r6
 8002290:	0016      	movs	r6, r2
 8002292:	2c20      	cmp	r4, #32
 8002294:	d004      	beq.n	80022a0 <__aeabi_d2f+0xbc>
 8002296:	4a15      	ldr	r2, [pc, #84]	; (80022ec <__aeabi_d2f+0x108>)
 8002298:	4694      	mov	ip, r2
 800229a:	4463      	add	r3, ip
 800229c:	4098      	lsls	r0, r3
 800229e:	4305      	orrs	r5, r0
 80022a0:	002a      	movs	r2, r5
 80022a2:	1e53      	subs	r3, r2, #1
 80022a4:	419a      	sbcs	r2, r3
 80022a6:	4332      	orrs	r2, r6
 80022a8:	2600      	movs	r6, #0
 80022aa:	0753      	lsls	r3, r2, #29
 80022ac:	d1ce      	bne.n	800224c <__aeabi_d2f+0x68>
 80022ae:	2480      	movs	r4, #128	; 0x80
 80022b0:	0013      	movs	r3, r2
 80022b2:	04e4      	lsls	r4, r4, #19
 80022b4:	2001      	movs	r0, #1
 80022b6:	4023      	ands	r3, r4
 80022b8:	4222      	tst	r2, r4
 80022ba:	d1d3      	bne.n	8002264 <__aeabi_d2f+0x80>
 80022bc:	e7b0      	b.n	8002220 <__aeabi_d2f+0x3c>
 80022be:	2300      	movs	r3, #0
 80022c0:	e7ad      	b.n	800221e <__aeabi_d2f+0x3a>
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <__aeabi_d2f+0x10c>)
 80022c4:	4694      	mov	ip, r2
 80022c6:	002a      	movs	r2, r5
 80022c8:	40e2      	lsrs	r2, r4
 80022ca:	0014      	movs	r4, r2
 80022cc:	002a      	movs	r2, r5
 80022ce:	4463      	add	r3, ip
 80022d0:	409a      	lsls	r2, r3
 80022d2:	4098      	lsls	r0, r3
 80022d4:	1e55      	subs	r5, r2, #1
 80022d6:	41aa      	sbcs	r2, r5
 80022d8:	4302      	orrs	r2, r0
 80022da:	4322      	orrs	r2, r4
 80022dc:	e7e4      	b.n	80022a8 <__aeabi_d2f+0xc4>
 80022de:	0033      	movs	r3, r6
 80022e0:	e79e      	b.n	8002220 <__aeabi_d2f+0x3c>
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	fffffc80 	.word	0xfffffc80
 80022ec:	fffffca2 	.word	0xfffffca2
 80022f0:	fffffc82 	.word	0xfffffc82

080022f4 <__clzsi2>:
 80022f4:	211c      	movs	r1, #28
 80022f6:	2301      	movs	r3, #1
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	4298      	cmp	r0, r3
 80022fc:	d301      	bcc.n	8002302 <__clzsi2+0xe>
 80022fe:	0c00      	lsrs	r0, r0, #16
 8002300:	3910      	subs	r1, #16
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	4298      	cmp	r0, r3
 8002306:	d301      	bcc.n	800230c <__clzsi2+0x18>
 8002308:	0a00      	lsrs	r0, r0, #8
 800230a:	3908      	subs	r1, #8
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	4298      	cmp	r0, r3
 8002310:	d301      	bcc.n	8002316 <__clzsi2+0x22>
 8002312:	0900      	lsrs	r0, r0, #4
 8002314:	3904      	subs	r1, #4
 8002316:	a202      	add	r2, pc, #8	; (adr r2, 8002320 <__clzsi2+0x2c>)
 8002318:	5c10      	ldrb	r0, [r2, r0]
 800231a:	1840      	adds	r0, r0, r1
 800231c:	4770      	bx	lr
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	02020304 	.word	0x02020304
 8002324:	01010101 	.word	0x01010101
	...

08002330 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b0a3      	sub	sp, #140	; 0x8c
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4ad5      	ldr	r2, [pc, #852]	; (8002694 <HAL_UART_RxCpltCallback+0x364>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d001      	beq.n	8002346 <HAL_UART_RxCpltCallback+0x16>
 8002342:	f000 fbc9 	bl	8002ad8 <HAL_UART_RxCpltCallback+0x7a8>
		 HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8002346:	49d4      	ldr	r1, [pc, #848]	; (8002698 <HAL_UART_RxCpltCallback+0x368>)
 8002348:	4bd4      	ldr	r3, [pc, #848]	; (800269c <HAL_UART_RxCpltCallback+0x36c>)
 800234a:	2201      	movs	r2, #1
 800234c:	0018      	movs	r0, r3
 800234e:	f002 ffe8 	bl	8005322 <HAL_UART_Receive_IT>
		 if (rx_buf[0] == 'k') {
 8002352:	4bd1      	ldr	r3, [pc, #836]	; (8002698 <HAL_UART_RxCpltCallback+0x368>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b6b      	cmp	r3, #107	; 0x6b
 8002358:	d001      	beq.n	800235e <HAL_UART_RxCpltCallback+0x2e>
 800235a:	f000 fbbd 	bl	8002ad8 <HAL_UART_RxCpltCallback+0x7a8>

			 // Read all the ADCs (adcResultsDMA needs to be uint32_t!!!)
			 HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcResultsDMA, adcChannelCount);
 800235e:	230f      	movs	r3, #15
 8002360:	001a      	movs	r2, r3
 8002362:	49cf      	ldr	r1, [pc, #828]	; (80026a0 <HAL_UART_RxCpltCallback+0x370>)
 8002364:	4bcf      	ldr	r3, [pc, #828]	; (80026a4 <HAL_UART_RxCpltCallback+0x374>)
 8002366:	0018      	movs	r0, r3
 8002368:	f001 fa2a 	bl	80037c0 <HAL_ADC_Start_DMA>

			 // For each ADC get its voltage
			 for (int i = 0; i < adcChannelCount; i++) {
 800236c:	2300      	movs	r3, #0
 800236e:	2284      	movs	r2, #132	; 0x84
 8002370:	18ba      	adds	r2, r7, r2
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	e342      	b.n	80029fc <HAL_UART_RxCpltCallback+0x6cc>

				 // Parsing ADCs value based on gpio_count
				 uint16_t adc = adcResultsDMA[i];
 8002376:	4bca      	ldr	r3, [pc, #808]	; (80026a0 <HAL_UART_RxCpltCallback+0x370>)
 8002378:	2084      	movs	r0, #132	; 0x84
 800237a:	183a      	adds	r2, r7, r0
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	0092      	lsls	r2, r2, #2
 8002380:	58d2      	ldr	r2, [r2, r3]
 8002382:	2182      	movs	r1, #130	; 0x82
 8002384:	187b      	adds	r3, r7, r1
 8002386:	801a      	strh	r2, [r3, #0]
				 uint8_t adcval[2];
				 adcval[0] = ((adc & 0xFF00) >> 8); // ADC reading MSB
 8002388:	187b      	adds	r3, r7, r1
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	b29b      	uxth	r3, r3
 8002390:	b2da      	uxtb	r2, r3
 8002392:	2440      	movs	r4, #64	; 0x40
 8002394:	193b      	adds	r3, r7, r4
 8002396:	701a      	strb	r2, [r3, #0]
				 adcval[1] = (adc & 0xFF); // ADC reading LSB
 8002398:	187b      	adds	r3, r7, r1
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	193b      	adds	r3, r7, r4
 80023a0:	705a      	strb	r2, [r3, #1]

				 // Processing results for UART Transmission

				 char value[8];
				 if (i == 0) { // When i is < 8 you read from one of the ADC channels
 80023a2:	0004      	movs	r4, r0
 80023a4:	183b      	adds	r3, r7, r0
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d12f      	bne.n	800240c <HAL_UART_RxCpltCallback+0xdc>
					 float voltage = adc * (3.3/4095);
 80023ac:	187b      	adds	r3, r7, r1
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f7ff fe79 	bl	80020a8 <__aeabi_i2d>
 80023b6:	4abc      	ldr	r2, [pc, #752]	; (80026a8 <HAL_UART_RxCpltCallback+0x378>)
 80023b8:	4bbc      	ldr	r3, [pc, #752]	; (80026ac <HAL_UART_RxCpltCallback+0x37c>)
 80023ba:	f7ff f823 	bl	8001404 <__aeabi_dmul>
 80023be:	0002      	movs	r2, r0
 80023c0:	000b      	movs	r3, r1
 80023c2:	0010      	movs	r0, r2
 80023c4:	0019      	movs	r1, r3
 80023c6:	f7ff ff0d 	bl	80021e4 <__aeabi_d2f>
 80023ca:	1c03      	adds	r3, r0, #0
 80023cc:	647b      	str	r3, [r7, #68]	; 0x44
					 sprintf(value, "%f", voltage);
 80023ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80023d0:	f7ff fec0 	bl	8002154 <__aeabi_f2d>
 80023d4:	0002      	movs	r2, r0
 80023d6:	000b      	movs	r3, r1
 80023d8:	49b5      	ldr	r1, [pc, #724]	; (80026b0 <HAL_UART_RxCpltCallback+0x380>)
 80023da:	2038      	movs	r0, #56	; 0x38
 80023dc:	1838      	adds	r0, r7, r0
 80023de:	f004 ff51 	bl	8007284 <siprintf>
					 HAL_UART_Transmit(&huart1, "ADC ", 4, 100);
 80023e2:	49b4      	ldr	r1, [pc, #720]	; (80026b4 <HAL_UART_RxCpltCallback+0x384>)
 80023e4:	48ad      	ldr	r0, [pc, #692]	; (800269c <HAL_UART_RxCpltCallback+0x36c>)
 80023e6:	2364      	movs	r3, #100	; 0x64
 80023e8:	2204      	movs	r2, #4
 80023ea:	f002 fef1 	bl	80051d0 <HAL_UART_Transmit>
					 char count[2];
					 sprintf(count, "%d", i);
 80023ee:	193b      	adds	r3, r7, r4
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	49b1      	ldr	r1, [pc, #708]	; (80026b8 <HAL_UART_RxCpltCallback+0x388>)
 80023f4:	2434      	movs	r4, #52	; 0x34
 80023f6:	193b      	adds	r3, r7, r4
 80023f8:	0018      	movs	r0, r3
 80023fa:	f004 ff43 	bl	8007284 <siprintf>

					 // Transmit the parsed data
					 HAL_UART_Transmit(&huart1, count, 2, 100);
 80023fe:	1939      	adds	r1, r7, r4
 8002400:	48a6      	ldr	r0, [pc, #664]	; (800269c <HAL_UART_RxCpltCallback+0x36c>)
 8002402:	2364      	movs	r3, #100	; 0x64
 8002404:	2202      	movs	r2, #2
 8002406:	f002 fee3 	bl	80051d0 <HAL_UART_Transmit>
 800240a:	e2de      	b.n	80029ca <HAL_UART_RxCpltCallback+0x69a>

				 } else if (i == 1) {
 800240c:	2484      	movs	r4, #132	; 0x84
 800240e:	193b      	adds	r3, r7, r4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d130      	bne.n	8002478 <HAL_UART_RxCpltCallback+0x148>
					 float voltage = adc * (3.3/4095);
 8002416:	2382      	movs	r3, #130	; 0x82
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	0018      	movs	r0, r3
 800241e:	f7ff fe43 	bl	80020a8 <__aeabi_i2d>
 8002422:	4aa1      	ldr	r2, [pc, #644]	; (80026a8 <HAL_UART_RxCpltCallback+0x378>)
 8002424:	4ba1      	ldr	r3, [pc, #644]	; (80026ac <HAL_UART_RxCpltCallback+0x37c>)
 8002426:	f7fe ffed 	bl	8001404 <__aeabi_dmul>
 800242a:	0002      	movs	r2, r0
 800242c:	000b      	movs	r3, r1
 800242e:	0010      	movs	r0, r2
 8002430:	0019      	movs	r1, r3
 8002432:	f7ff fed7 	bl	80021e4 <__aeabi_d2f>
 8002436:	1c03      	adds	r3, r0, #0
 8002438:	64bb      	str	r3, [r7, #72]	; 0x48
					 sprintf(value, "%f", voltage);
 800243a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800243c:	f7ff fe8a 	bl	8002154 <__aeabi_f2d>
 8002440:	0002      	movs	r2, r0
 8002442:	000b      	movs	r3, r1
 8002444:	499a      	ldr	r1, [pc, #616]	; (80026b0 <HAL_UART_RxCpltCallback+0x380>)
 8002446:	2038      	movs	r0, #56	; 0x38
 8002448:	1838      	adds	r0, r7, r0
 800244a:	f004 ff1b 	bl	8007284 <siprintf>
					 HAL_UART_Transmit(&huart1, "ADC ", 4, 100);
 800244e:	4999      	ldr	r1, [pc, #612]	; (80026b4 <HAL_UART_RxCpltCallback+0x384>)
 8002450:	4892      	ldr	r0, [pc, #584]	; (800269c <HAL_UART_RxCpltCallback+0x36c>)
 8002452:	2364      	movs	r3, #100	; 0x64
 8002454:	2204      	movs	r2, #4
 8002456:	f002 febb 	bl	80051d0 <HAL_UART_Transmit>
					 char count[2];
					 sprintf(count, "%d", i);
 800245a:	193b      	adds	r3, r7, r4
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4996      	ldr	r1, [pc, #600]	; (80026b8 <HAL_UART_RxCpltCallback+0x388>)
 8002460:	2430      	movs	r4, #48	; 0x30
 8002462:	193b      	adds	r3, r7, r4
 8002464:	0018      	movs	r0, r3
 8002466:	f004 ff0d 	bl	8007284 <siprintf>

					 // Transmit the parsed data
					 HAL_UART_Transmit(&huart1, count, 2, 100);
 800246a:	1939      	adds	r1, r7, r4
 800246c:	488b      	ldr	r0, [pc, #556]	; (800269c <HAL_UART_RxCpltCallback+0x36c>)
 800246e:	2364      	movs	r3, #100	; 0x64
 8002470:	2202      	movs	r2, #2
 8002472:	f002 fead 	bl	80051d0 <HAL_UART_Transmit>
 8002476:	e2a8      	b.n	80029ca <HAL_UART_RxCpltCallback+0x69a>

				 } else if (i == 2) {
 8002478:	2484      	movs	r4, #132	; 0x84
 800247a:	193b      	adds	r3, r7, r4
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d130      	bne.n	80024e4 <HAL_UART_RxCpltCallback+0x1b4>
					 float voltage = adc * (3.3/4095);
 8002482:	2382      	movs	r3, #130	; 0x82
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	0018      	movs	r0, r3
 800248a:	f7ff fe0d 	bl	80020a8 <__aeabi_i2d>
 800248e:	4a86      	ldr	r2, [pc, #536]	; (80026a8 <HAL_UART_RxCpltCallback+0x378>)
 8002490:	4b86      	ldr	r3, [pc, #536]	; (80026ac <HAL_UART_RxCpltCallback+0x37c>)
 8002492:	f7fe ffb7 	bl	8001404 <__aeabi_dmul>
 8002496:	0002      	movs	r2, r0
 8002498:	000b      	movs	r3, r1
 800249a:	0010      	movs	r0, r2
 800249c:	0019      	movs	r1, r3
 800249e:	f7ff fea1 	bl	80021e4 <__aeabi_d2f>
 80024a2:	1c03      	adds	r3, r0, #0
 80024a4:	64fb      	str	r3, [r7, #76]	; 0x4c
					 sprintf(value, "%f", voltage);
 80024a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80024a8:	f7ff fe54 	bl	8002154 <__aeabi_f2d>
 80024ac:	0002      	movs	r2, r0
 80024ae:	000b      	movs	r3, r1
 80024b0:	497f      	ldr	r1, [pc, #508]	; (80026b0 <HAL_UART_RxCpltCallback+0x380>)
 80024b2:	2038      	movs	r0, #56	; 0x38
 80024b4:	1838      	adds	r0, r7, r0
 80024b6:	f004 fee5 	bl	8007284 <siprintf>
					 HAL_UART_Transmit(&huart1, "ADC ", 4, 100);
 80024ba:	497e      	ldr	r1, [pc, #504]	; (80026b4 <HAL_UART_RxCpltCallback+0x384>)
 80024bc:	4877      	ldr	r0, [pc, #476]	; (800269c <HAL_UART_RxCpltCallback+0x36c>)
 80024be:	2364      	movs	r3, #100	; 0x64
 80024c0:	2204      	movs	r2, #4
 80024c2:	f002 fe85 	bl	80051d0 <HAL_UART_Transmit>
					 char count[2];
					 sprintf(count, "%d", i);
 80024c6:	193b      	adds	r3, r7, r4
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	497b      	ldr	r1, [pc, #492]	; (80026b8 <HAL_UART_RxCpltCallback+0x388>)
 80024cc:	242c      	movs	r4, #44	; 0x2c
 80024ce:	193b      	adds	r3, r7, r4
 80024d0:	0018      	movs	r0, r3
 80024d2:	f004 fed7 	bl	8007284 <siprintf>

					 // Transmit the parsed data
					 HAL_UART_Transmit(&huart1, count, 2, 100);
 80024d6:	1939      	adds	r1, r7, r4
 80024d8:	4870      	ldr	r0, [pc, #448]	; (800269c <HAL_UART_RxCpltCallback+0x36c>)
 80024da:	2364      	movs	r3, #100	; 0x64
 80024dc:	2202      	movs	r2, #2
 80024de:	f002 fe77 	bl	80051d0 <HAL_UART_Transmit>
 80024e2:	e272      	b.n	80029ca <HAL_UART_RxCpltCallback+0x69a>

				 } else if (i == 3) {
 80024e4:	2484      	movs	r4, #132	; 0x84
 80024e6:	193b      	adds	r3, r7, r4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	d130      	bne.n	8002550 <HAL_UART_RxCpltCallback+0x220>
					 float voltage = adc * (3.3/4095);
 80024ee:	2382      	movs	r3, #130	; 0x82
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7ff fdd7 	bl	80020a8 <__aeabi_i2d>
 80024fa:	4a6b      	ldr	r2, [pc, #428]	; (80026a8 <HAL_UART_RxCpltCallback+0x378>)
 80024fc:	4b6b      	ldr	r3, [pc, #428]	; (80026ac <HAL_UART_RxCpltCallback+0x37c>)
 80024fe:	f7fe ff81 	bl	8001404 <__aeabi_dmul>
 8002502:	0002      	movs	r2, r0
 8002504:	000b      	movs	r3, r1
 8002506:	0010      	movs	r0, r2
 8002508:	0019      	movs	r1, r3
 800250a:	f7ff fe6b 	bl	80021e4 <__aeabi_d2f>
 800250e:	1c03      	adds	r3, r0, #0
 8002510:	653b      	str	r3, [r7, #80]	; 0x50
					 sprintf(value, "%f", voltage);
 8002512:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002514:	f7ff fe1e 	bl	8002154 <__aeabi_f2d>
 8002518:	0002      	movs	r2, r0
 800251a:	000b      	movs	r3, r1
 800251c:	4964      	ldr	r1, [pc, #400]	; (80026b0 <HAL_UART_RxCpltCallback+0x380>)
 800251e:	2038      	movs	r0, #56	; 0x38
 8002520:	1838      	adds	r0, r7, r0
 8002522:	f004 feaf 	bl	8007284 <siprintf>
					 HAL_UART_Transmit(&huart1, "ADC ", 4, 100);
 8002526:	4963      	ldr	r1, [pc, #396]	; (80026b4 <HAL_UART_RxCpltCallback+0x384>)
 8002528:	485c      	ldr	r0, [pc, #368]	; (800269c <HAL_UART_RxCpltCallback+0x36c>)
 800252a:	2364      	movs	r3, #100	; 0x64
 800252c:	2204      	movs	r2, #4
 800252e:	f002 fe4f 	bl	80051d0 <HAL_UART_Transmit>
					 char count[2];
					 sprintf(count, "%d", i);
 8002532:	193b      	adds	r3, r7, r4
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4960      	ldr	r1, [pc, #384]	; (80026b8 <HAL_UART_RxCpltCallback+0x388>)
 8002538:	2428      	movs	r4, #40	; 0x28
 800253a:	193b      	adds	r3, r7, r4
 800253c:	0018      	movs	r0, r3
 800253e:	f004 fea1 	bl	8007284 <siprintf>

					 // Transmit the parsed data
					 HAL_UART_Transmit(&huart1, count, 2, 100);
 8002542:	1939      	adds	r1, r7, r4
 8002544:	4855      	ldr	r0, [pc, #340]	; (800269c <HAL_UART_RxCpltCallback+0x36c>)
 8002546:	2364      	movs	r3, #100	; 0x64
 8002548:	2202      	movs	r2, #2
 800254a:	f002 fe41 	bl	80051d0 <HAL_UART_Transmit>
 800254e:	e23c      	b.n	80029ca <HAL_UART_RxCpltCallback+0x69a>

				 } else if (i == 4) {
 8002550:	2484      	movs	r4, #132	; 0x84
 8002552:	193b      	adds	r3, r7, r4
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b04      	cmp	r3, #4
 8002558:	d130      	bne.n	80025bc <HAL_UART_RxCpltCallback+0x28c>
					 float voltage = adc * (3.3/4095);
 800255a:	2382      	movs	r3, #130	; 0x82
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	0018      	movs	r0, r3
 8002562:	f7ff fda1 	bl	80020a8 <__aeabi_i2d>
 8002566:	4a50      	ldr	r2, [pc, #320]	; (80026a8 <HAL_UART_RxCpltCallback+0x378>)
 8002568:	4b50      	ldr	r3, [pc, #320]	; (80026ac <HAL_UART_RxCpltCallback+0x37c>)
 800256a:	f7fe ff4b 	bl	8001404 <__aeabi_dmul>
 800256e:	0002      	movs	r2, r0
 8002570:	000b      	movs	r3, r1
 8002572:	0010      	movs	r0, r2
 8002574:	0019      	movs	r1, r3
 8002576:	f7ff fe35 	bl	80021e4 <__aeabi_d2f>
 800257a:	1c03      	adds	r3, r0, #0
 800257c:	657b      	str	r3, [r7, #84]	; 0x54
					 sprintf(value, "%f", voltage);
 800257e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002580:	f7ff fde8 	bl	8002154 <__aeabi_f2d>
 8002584:	0002      	movs	r2, r0
 8002586:	000b      	movs	r3, r1
 8002588:	4949      	ldr	r1, [pc, #292]	; (80026b0 <HAL_UART_RxCpltCallback+0x380>)
 800258a:	2038      	movs	r0, #56	; 0x38
 800258c:	1838      	adds	r0, r7, r0
 800258e:	f004 fe79 	bl	8007284 <siprintf>
					 HAL_UART_Transmit(&huart1, "ADC ", 4, 100);
 8002592:	4948      	ldr	r1, [pc, #288]	; (80026b4 <HAL_UART_RxCpltCallback+0x384>)
 8002594:	4841      	ldr	r0, [pc, #260]	; (800269c <HAL_UART_RxCpltCallback+0x36c>)
 8002596:	2364      	movs	r3, #100	; 0x64
 8002598:	2204      	movs	r2, #4
 800259a:	f002 fe19 	bl	80051d0 <HAL_UART_Transmit>
					 char count[2];
					 sprintf(count, "%d", i);
 800259e:	193b      	adds	r3, r7, r4
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4945      	ldr	r1, [pc, #276]	; (80026b8 <HAL_UART_RxCpltCallback+0x388>)
 80025a4:	2424      	movs	r4, #36	; 0x24
 80025a6:	193b      	adds	r3, r7, r4
 80025a8:	0018      	movs	r0, r3
 80025aa:	f004 fe6b 	bl	8007284 <siprintf>

					 // Transmit the parsed data
					 HAL_UART_Transmit(&huart1, count, 2, 100);
 80025ae:	1939      	adds	r1, r7, r4
 80025b0:	483a      	ldr	r0, [pc, #232]	; (800269c <HAL_UART_RxCpltCallback+0x36c>)
 80025b2:	2364      	movs	r3, #100	; 0x64
 80025b4:	2202      	movs	r2, #2
 80025b6:	f002 fe0b 	bl	80051d0 <HAL_UART_Transmit>
 80025ba:	e206      	b.n	80029ca <HAL_UART_RxCpltCallback+0x69a>

				 } else if (i == 5) {
 80025bc:	2484      	movs	r4, #132	; 0x84
 80025be:	193b      	adds	r3, r7, r4
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d130      	bne.n	8002628 <HAL_UART_RxCpltCallback+0x2f8>
					 float voltage = adc * (3.3/4095);
 80025c6:	2382      	movs	r3, #130	; 0x82
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f7ff fd6b 	bl	80020a8 <__aeabi_i2d>
 80025d2:	4a35      	ldr	r2, [pc, #212]	; (80026a8 <HAL_UART_RxCpltCallback+0x378>)
 80025d4:	4b35      	ldr	r3, [pc, #212]	; (80026ac <HAL_UART_RxCpltCallback+0x37c>)
 80025d6:	f7fe ff15 	bl	8001404 <__aeabi_dmul>
 80025da:	0002      	movs	r2, r0
 80025dc:	000b      	movs	r3, r1
 80025de:	0010      	movs	r0, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	f7ff fdff 	bl	80021e4 <__aeabi_d2f>
 80025e6:	1c03      	adds	r3, r0, #0
 80025e8:	65bb      	str	r3, [r7, #88]	; 0x58
					 sprintf(value, "%f", voltage);
 80025ea:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80025ec:	f7ff fdb2 	bl	8002154 <__aeabi_f2d>
 80025f0:	0002      	movs	r2, r0
 80025f2:	000b      	movs	r3, r1
 80025f4:	492e      	ldr	r1, [pc, #184]	; (80026b0 <HAL_UART_RxCpltCallback+0x380>)
 80025f6:	2038      	movs	r0, #56	; 0x38
 80025f8:	1838      	adds	r0, r7, r0
 80025fa:	f004 fe43 	bl	8007284 <siprintf>
					 HAL_UART_Transmit(&huart1, "ADC ", 4, 100);
 80025fe:	492d      	ldr	r1, [pc, #180]	; (80026b4 <HAL_UART_RxCpltCallback+0x384>)
 8002600:	4826      	ldr	r0, [pc, #152]	; (800269c <HAL_UART_RxCpltCallback+0x36c>)
 8002602:	2364      	movs	r3, #100	; 0x64
 8002604:	2204      	movs	r2, #4
 8002606:	f002 fde3 	bl	80051d0 <HAL_UART_Transmit>
					 char count[2];
					 sprintf(count, "%d", i);
 800260a:	193b      	adds	r3, r7, r4
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	492a      	ldr	r1, [pc, #168]	; (80026b8 <HAL_UART_RxCpltCallback+0x388>)
 8002610:	2420      	movs	r4, #32
 8002612:	193b      	adds	r3, r7, r4
 8002614:	0018      	movs	r0, r3
 8002616:	f004 fe35 	bl	8007284 <siprintf>

					 // Transmit the parsed data
					 HAL_UART_Transmit(&huart1, count, 2, 100);
 800261a:	1939      	adds	r1, r7, r4
 800261c:	481f      	ldr	r0, [pc, #124]	; (800269c <HAL_UART_RxCpltCallback+0x36c>)
 800261e:	2364      	movs	r3, #100	; 0x64
 8002620:	2202      	movs	r2, #2
 8002622:	f002 fdd5 	bl	80051d0 <HAL_UART_Transmit>
 8002626:	e1d0      	b.n	80029ca <HAL_UART_RxCpltCallback+0x69a>

				 } else if (i == 6) {
 8002628:	2484      	movs	r4, #132	; 0x84
 800262a:	193b      	adds	r3, r7, r4
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b06      	cmp	r3, #6
 8002630:	d144      	bne.n	80026bc <HAL_UART_RxCpltCallback+0x38c>
					 float voltage = adc * (3.3/4095);
 8002632:	2382      	movs	r3, #130	; 0x82
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	0018      	movs	r0, r3
 800263a:	f7ff fd35 	bl	80020a8 <__aeabi_i2d>
 800263e:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <HAL_UART_RxCpltCallback+0x378>)
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <HAL_UART_RxCpltCallback+0x37c>)
 8002642:	f7fe fedf 	bl	8001404 <__aeabi_dmul>
 8002646:	0002      	movs	r2, r0
 8002648:	000b      	movs	r3, r1
 800264a:	0010      	movs	r0, r2
 800264c:	0019      	movs	r1, r3
 800264e:	f7ff fdc9 	bl	80021e4 <__aeabi_d2f>
 8002652:	1c03      	adds	r3, r0, #0
 8002654:	65fb      	str	r3, [r7, #92]	; 0x5c
					 sprintf(value, "%f", voltage);
 8002656:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002658:	f7ff fd7c 	bl	8002154 <__aeabi_f2d>
 800265c:	0002      	movs	r2, r0
 800265e:	000b      	movs	r3, r1
 8002660:	4913      	ldr	r1, [pc, #76]	; (80026b0 <HAL_UART_RxCpltCallback+0x380>)
 8002662:	2038      	movs	r0, #56	; 0x38
 8002664:	1838      	adds	r0, r7, r0
 8002666:	f004 fe0d 	bl	8007284 <siprintf>
					 HAL_UART_Transmit(&huart1, "ADC ", 4, 100);
 800266a:	4912      	ldr	r1, [pc, #72]	; (80026b4 <HAL_UART_RxCpltCallback+0x384>)
 800266c:	480b      	ldr	r0, [pc, #44]	; (800269c <HAL_UART_RxCpltCallback+0x36c>)
 800266e:	2364      	movs	r3, #100	; 0x64
 8002670:	2204      	movs	r2, #4
 8002672:	f002 fdad 	bl	80051d0 <HAL_UART_Transmit>
					 char count[2];
					 sprintf(count, "%d", i);
 8002676:	193b      	adds	r3, r7, r4
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	490f      	ldr	r1, [pc, #60]	; (80026b8 <HAL_UART_RxCpltCallback+0x388>)
 800267c:	241c      	movs	r4, #28
 800267e:	193b      	adds	r3, r7, r4
 8002680:	0018      	movs	r0, r3
 8002682:	f004 fdff 	bl	8007284 <siprintf>

					 // Transmit the parsed data
					 HAL_UART_Transmit(&huart1, count, 2, 100);
 8002686:	1939      	adds	r1, r7, r4
 8002688:	4804      	ldr	r0, [pc, #16]	; (800269c <HAL_UART_RxCpltCallback+0x36c>)
 800268a:	2364      	movs	r3, #100	; 0x64
 800268c:	2202      	movs	r2, #2
 800268e:	f002 fd9f 	bl	80051d0 <HAL_UART_Transmit>
 8002692:	e19a      	b.n	80029ca <HAL_UART_RxCpltCallback+0x69a>
 8002694:	40013800 	.word	0x40013800
 8002698:	20000304 	.word	0x20000304
 800269c:	20000280 	.word	0x20000280
 80026a0:	2000036c 	.word	0x2000036c
 80026a4:	200001fc 	.word	0x200001fc
 80026a8:	e734d9b4 	.word	0xe734d9b4
 80026ac:	3f4a680c 	.word	0x3f4a680c
 80026b0:	0800aff8 	.word	0x0800aff8
 80026b4:	0800affc 	.word	0x0800affc
 80026b8:	0800b004 	.word	0x0800b004

				 } else if (i == 7) {
 80026bc:	2484      	movs	r4, #132	; 0x84
 80026be:	193b      	adds	r3, r7, r4
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b07      	cmp	r3, #7
 80026c4:	d130      	bne.n	8002728 <HAL_UART_RxCpltCallback+0x3f8>
					 float voltage = adc * (3.3/4095);
 80026c6:	2382      	movs	r3, #130	; 0x82
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f7ff fceb 	bl	80020a8 <__aeabi_i2d>
 80026d2:	4ae6      	ldr	r2, [pc, #920]	; (8002a6c <HAL_UART_RxCpltCallback+0x73c>)
 80026d4:	4be6      	ldr	r3, [pc, #920]	; (8002a70 <HAL_UART_RxCpltCallback+0x740>)
 80026d6:	f7fe fe95 	bl	8001404 <__aeabi_dmul>
 80026da:	0002      	movs	r2, r0
 80026dc:	000b      	movs	r3, r1
 80026de:	0010      	movs	r0, r2
 80026e0:	0019      	movs	r1, r3
 80026e2:	f7ff fd7f 	bl	80021e4 <__aeabi_d2f>
 80026e6:	1c03      	adds	r3, r0, #0
 80026e8:	663b      	str	r3, [r7, #96]	; 0x60
					 sprintf(value, "%f", voltage);
 80026ea:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80026ec:	f7ff fd32 	bl	8002154 <__aeabi_f2d>
 80026f0:	0002      	movs	r2, r0
 80026f2:	000b      	movs	r3, r1
 80026f4:	49df      	ldr	r1, [pc, #892]	; (8002a74 <HAL_UART_RxCpltCallback+0x744>)
 80026f6:	2038      	movs	r0, #56	; 0x38
 80026f8:	1838      	adds	r0, r7, r0
 80026fa:	f004 fdc3 	bl	8007284 <siprintf>
					 HAL_UART_Transmit(&huart1, "ADC ", 4, 100);
 80026fe:	49de      	ldr	r1, [pc, #888]	; (8002a78 <HAL_UART_RxCpltCallback+0x748>)
 8002700:	48de      	ldr	r0, [pc, #888]	; (8002a7c <HAL_UART_RxCpltCallback+0x74c>)
 8002702:	2364      	movs	r3, #100	; 0x64
 8002704:	2204      	movs	r2, #4
 8002706:	f002 fd63 	bl	80051d0 <HAL_UART_Transmit>
					 char count[2];
					 sprintf(count, "%d", i);
 800270a:	193b      	adds	r3, r7, r4
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	49dc      	ldr	r1, [pc, #880]	; (8002a80 <HAL_UART_RxCpltCallback+0x750>)
 8002710:	2418      	movs	r4, #24
 8002712:	193b      	adds	r3, r7, r4
 8002714:	0018      	movs	r0, r3
 8002716:	f004 fdb5 	bl	8007284 <siprintf>

					 // Transmit the parsed data
					 HAL_UART_Transmit(&huart1, count, 2, 100);
 800271a:	1939      	adds	r1, r7, r4
 800271c:	48d7      	ldr	r0, [pc, #860]	; (8002a7c <HAL_UART_RxCpltCallback+0x74c>)
 800271e:	2364      	movs	r3, #100	; 0x64
 8002720:	2202      	movs	r2, #2
 8002722:	f002 fd55 	bl	80051d0 <HAL_UART_Transmit>
 8002726:	e150      	b.n	80029ca <HAL_UART_RxCpltCallback+0x69a>

				 } else if (i == 8) {
 8002728:	2484      	movs	r4, #132	; 0x84
 800272a:	193b      	adds	r3, r7, r4
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b08      	cmp	r3, #8
 8002730:	d130      	bne.n	8002794 <HAL_UART_RxCpltCallback+0x464>
					 float voltage = adc * (3.3/4095);
 8002732:	2382      	movs	r3, #130	; 0x82
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	0018      	movs	r0, r3
 800273a:	f7ff fcb5 	bl	80020a8 <__aeabi_i2d>
 800273e:	4acb      	ldr	r2, [pc, #812]	; (8002a6c <HAL_UART_RxCpltCallback+0x73c>)
 8002740:	4bcb      	ldr	r3, [pc, #812]	; (8002a70 <HAL_UART_RxCpltCallback+0x740>)
 8002742:	f7fe fe5f 	bl	8001404 <__aeabi_dmul>
 8002746:	0002      	movs	r2, r0
 8002748:	000b      	movs	r3, r1
 800274a:	0010      	movs	r0, r2
 800274c:	0019      	movs	r1, r3
 800274e:	f7ff fd49 	bl	80021e4 <__aeabi_d2f>
 8002752:	1c03      	adds	r3, r0, #0
 8002754:	667b      	str	r3, [r7, #100]	; 0x64
					 sprintf(value, "%f", voltage);
 8002756:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002758:	f7ff fcfc 	bl	8002154 <__aeabi_f2d>
 800275c:	0002      	movs	r2, r0
 800275e:	000b      	movs	r3, r1
 8002760:	49c4      	ldr	r1, [pc, #784]	; (8002a74 <HAL_UART_RxCpltCallback+0x744>)
 8002762:	2038      	movs	r0, #56	; 0x38
 8002764:	1838      	adds	r0, r7, r0
 8002766:	f004 fd8d 	bl	8007284 <siprintf>
					 HAL_UART_Transmit(&huart1, "ADC ", 4, 100);
 800276a:	49c3      	ldr	r1, [pc, #780]	; (8002a78 <HAL_UART_RxCpltCallback+0x748>)
 800276c:	48c3      	ldr	r0, [pc, #780]	; (8002a7c <HAL_UART_RxCpltCallback+0x74c>)
 800276e:	2364      	movs	r3, #100	; 0x64
 8002770:	2204      	movs	r2, #4
 8002772:	f002 fd2d 	bl	80051d0 <HAL_UART_Transmit>
					 char count[2];
					 sprintf(count, "%d", i);
 8002776:	193b      	adds	r3, r7, r4
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	49c1      	ldr	r1, [pc, #772]	; (8002a80 <HAL_UART_RxCpltCallback+0x750>)
 800277c:	2414      	movs	r4, #20
 800277e:	193b      	adds	r3, r7, r4
 8002780:	0018      	movs	r0, r3
 8002782:	f004 fd7f 	bl	8007284 <siprintf>

					 // Transmit the parsed data
					 HAL_UART_Transmit(&huart1, count, 2, 100);
 8002786:	1939      	adds	r1, r7, r4
 8002788:	48bc      	ldr	r0, [pc, #752]	; (8002a7c <HAL_UART_RxCpltCallback+0x74c>)
 800278a:	2364      	movs	r3, #100	; 0x64
 800278c:	2202      	movs	r2, #2
 800278e:	f002 fd1f 	bl	80051d0 <HAL_UART_Transmit>
 8002792:	e11a      	b.n	80029ca <HAL_UART_RxCpltCallback+0x69a>

				 } else if (i == 9) {
 8002794:	2484      	movs	r4, #132	; 0x84
 8002796:	193b      	adds	r3, r7, r4
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b09      	cmp	r3, #9
 800279c:	d130      	bne.n	8002800 <HAL_UART_RxCpltCallback+0x4d0>
					 float voltage = adc * (3.3/4095);
 800279e:	2382      	movs	r3, #130	; 0x82
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7ff fc7f 	bl	80020a8 <__aeabi_i2d>
 80027aa:	4ab0      	ldr	r2, [pc, #704]	; (8002a6c <HAL_UART_RxCpltCallback+0x73c>)
 80027ac:	4bb0      	ldr	r3, [pc, #704]	; (8002a70 <HAL_UART_RxCpltCallback+0x740>)
 80027ae:	f7fe fe29 	bl	8001404 <__aeabi_dmul>
 80027b2:	0002      	movs	r2, r0
 80027b4:	000b      	movs	r3, r1
 80027b6:	0010      	movs	r0, r2
 80027b8:	0019      	movs	r1, r3
 80027ba:	f7ff fd13 	bl	80021e4 <__aeabi_d2f>
 80027be:	1c03      	adds	r3, r0, #0
 80027c0:	66bb      	str	r3, [r7, #104]	; 0x68
					 sprintf(value, "%f", voltage);
 80027c2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80027c4:	f7ff fcc6 	bl	8002154 <__aeabi_f2d>
 80027c8:	0002      	movs	r2, r0
 80027ca:	000b      	movs	r3, r1
 80027cc:	49a9      	ldr	r1, [pc, #676]	; (8002a74 <HAL_UART_RxCpltCallback+0x744>)
 80027ce:	2038      	movs	r0, #56	; 0x38
 80027d0:	1838      	adds	r0, r7, r0
 80027d2:	f004 fd57 	bl	8007284 <siprintf>
					 HAL_UART_Transmit(&huart1, "ADC ", 4, 100);
 80027d6:	49a8      	ldr	r1, [pc, #672]	; (8002a78 <HAL_UART_RxCpltCallback+0x748>)
 80027d8:	48a8      	ldr	r0, [pc, #672]	; (8002a7c <HAL_UART_RxCpltCallback+0x74c>)
 80027da:	2364      	movs	r3, #100	; 0x64
 80027dc:	2204      	movs	r2, #4
 80027de:	f002 fcf7 	bl	80051d0 <HAL_UART_Transmit>
					 char count[2];
					 sprintf(count, "%d", i);
 80027e2:	193b      	adds	r3, r7, r4
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	49a6      	ldr	r1, [pc, #664]	; (8002a80 <HAL_UART_RxCpltCallback+0x750>)
 80027e8:	2410      	movs	r4, #16
 80027ea:	193b      	adds	r3, r7, r4
 80027ec:	0018      	movs	r0, r3
 80027ee:	f004 fd49 	bl	8007284 <siprintf>

					 // Transmit the parsed data
					 HAL_UART_Transmit(&huart1, count, 2, 100);
 80027f2:	1939      	adds	r1, r7, r4
 80027f4:	48a1      	ldr	r0, [pc, #644]	; (8002a7c <HAL_UART_RxCpltCallback+0x74c>)
 80027f6:	2364      	movs	r3, #100	; 0x64
 80027f8:	2202      	movs	r2, #2
 80027fa:	f002 fce9 	bl	80051d0 <HAL_UART_Transmit>
 80027fe:	e0e4      	b.n	80029ca <HAL_UART_RxCpltCallback+0x69a>

				 } else if (i == 10) {
 8002800:	2384      	movs	r3, #132	; 0x84
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b0a      	cmp	r3, #10
 8002808:	d12a      	bne.n	8002860 <HAL_UART_RxCpltCallback+0x530>
					 float voltage = adc * (3.3/4095) * 2;
 800280a:	2382      	movs	r3, #130	; 0x82
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	0018      	movs	r0, r3
 8002812:	f7ff fc49 	bl	80020a8 <__aeabi_i2d>
 8002816:	4a95      	ldr	r2, [pc, #596]	; (8002a6c <HAL_UART_RxCpltCallback+0x73c>)
 8002818:	4b95      	ldr	r3, [pc, #596]	; (8002a70 <HAL_UART_RxCpltCallback+0x740>)
 800281a:	f7fe fdf3 	bl	8001404 <__aeabi_dmul>
 800281e:	0002      	movs	r2, r0
 8002820:	000b      	movs	r3, r1
 8002822:	0010      	movs	r0, r2
 8002824:	0019      	movs	r1, r3
 8002826:	0002      	movs	r2, r0
 8002828:	000b      	movs	r3, r1
 800282a:	f7fd fead 	bl	8000588 <__aeabi_dadd>
 800282e:	0002      	movs	r2, r0
 8002830:	000b      	movs	r3, r1
 8002832:	0010      	movs	r0, r2
 8002834:	0019      	movs	r1, r3
 8002836:	f7ff fcd5 	bl	80021e4 <__aeabi_d2f>
 800283a:	1c03      	adds	r3, r0, #0
 800283c:	66fb      	str	r3, [r7, #108]	; 0x6c
					 sprintf(value, "%f", voltage);
 800283e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002840:	f7ff fc88 	bl	8002154 <__aeabi_f2d>
 8002844:	0002      	movs	r2, r0
 8002846:	000b      	movs	r3, r1
 8002848:	498a      	ldr	r1, [pc, #552]	; (8002a74 <HAL_UART_RxCpltCallback+0x744>)
 800284a:	2038      	movs	r0, #56	; 0x38
 800284c:	1838      	adds	r0, r7, r0
 800284e:	f004 fd19 	bl	8007284 <siprintf>
					 HAL_UART_Transmit(&huart1, "5vref_mon", 9, 100);
 8002852:	498c      	ldr	r1, [pc, #560]	; (8002a84 <HAL_UART_RxCpltCallback+0x754>)
 8002854:	4889      	ldr	r0, [pc, #548]	; (8002a7c <HAL_UART_RxCpltCallback+0x74c>)
 8002856:	2364      	movs	r3, #100	; 0x64
 8002858:	2209      	movs	r2, #9
 800285a:	f002 fcb9 	bl	80051d0 <HAL_UART_Transmit>
 800285e:	e0b4      	b.n	80029ca <HAL_UART_RxCpltCallback+0x69a>
				 } else if (i == 11) {
 8002860:	2384      	movs	r3, #132	; 0x84
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b0b      	cmp	r3, #11
 8002868:	d12a      	bne.n	80028c0 <HAL_UART_RxCpltCallback+0x590>
					 float voltage = adc * (3.3/4095) * 5;
 800286a:	2382      	movs	r3, #130	; 0x82
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	0018      	movs	r0, r3
 8002872:	f7ff fc19 	bl	80020a8 <__aeabi_i2d>
 8002876:	4a7d      	ldr	r2, [pc, #500]	; (8002a6c <HAL_UART_RxCpltCallback+0x73c>)
 8002878:	4b7d      	ldr	r3, [pc, #500]	; (8002a70 <HAL_UART_RxCpltCallback+0x740>)
 800287a:	f7fe fdc3 	bl	8001404 <__aeabi_dmul>
 800287e:	0002      	movs	r2, r0
 8002880:	000b      	movs	r3, r1
 8002882:	0010      	movs	r0, r2
 8002884:	0019      	movs	r1, r3
 8002886:	2200      	movs	r2, #0
 8002888:	4b7f      	ldr	r3, [pc, #508]	; (8002a88 <HAL_UART_RxCpltCallback+0x758>)
 800288a:	f7fe fdbb 	bl	8001404 <__aeabi_dmul>
 800288e:	0002      	movs	r2, r0
 8002890:	000b      	movs	r3, r1
 8002892:	0010      	movs	r0, r2
 8002894:	0019      	movs	r1, r3
 8002896:	f7ff fca5 	bl	80021e4 <__aeabi_d2f>
 800289a:	1c03      	adds	r3, r0, #0
 800289c:	673b      	str	r3, [r7, #112]	; 0x70
					 sprintf(value, "%f", voltage);
 800289e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80028a0:	f7ff fc58 	bl	8002154 <__aeabi_f2d>
 80028a4:	0002      	movs	r2, r0
 80028a6:	000b      	movs	r3, r1
 80028a8:	4972      	ldr	r1, [pc, #456]	; (8002a74 <HAL_UART_RxCpltCallback+0x744>)
 80028aa:	2038      	movs	r0, #56	; 0x38
 80028ac:	1838      	adds	r0, r7, r0
 80028ae:	f004 fce9 	bl	8007284 <siprintf>
					 HAL_UART_Transmit(&huart1, "15vref_mon", 10, 100);
 80028b2:	4976      	ldr	r1, [pc, #472]	; (8002a8c <HAL_UART_RxCpltCallback+0x75c>)
 80028b4:	4871      	ldr	r0, [pc, #452]	; (8002a7c <HAL_UART_RxCpltCallback+0x74c>)
 80028b6:	2364      	movs	r3, #100	; 0x64
 80028b8:	220a      	movs	r2, #10
 80028ba:	f002 fc89 	bl	80051d0 <HAL_UART_Transmit>
 80028be:	e084      	b.n	80029ca <HAL_UART_RxCpltCallback+0x69a>

				 } else if (i == 12) {
 80028c0:	2484      	movs	r4, #132	; 0x84
 80028c2:	193b      	adds	r3, r7, r4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d130      	bne.n	800292c <HAL_UART_RxCpltCallback+0x5fc>
					 float voltage = adc * (3.3/4095);
 80028ca:	2382      	movs	r3, #130	; 0x82
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7ff fbe9 	bl	80020a8 <__aeabi_i2d>
 80028d6:	4a65      	ldr	r2, [pc, #404]	; (8002a6c <HAL_UART_RxCpltCallback+0x73c>)
 80028d8:	4b65      	ldr	r3, [pc, #404]	; (8002a70 <HAL_UART_RxCpltCallback+0x740>)
 80028da:	f7fe fd93 	bl	8001404 <__aeabi_dmul>
 80028de:	0002      	movs	r2, r0
 80028e0:	000b      	movs	r3, r1
 80028e2:	0010      	movs	r0, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	f7ff fc7d 	bl	80021e4 <__aeabi_d2f>
 80028ea:	1c03      	adds	r3, r0, #0
 80028ec:	677b      	str	r3, [r7, #116]	; 0x74
					 sprintf(value, "%f", voltage);
 80028ee:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80028f0:	f7ff fc30 	bl	8002154 <__aeabi_f2d>
 80028f4:	0002      	movs	r2, r0
 80028f6:	000b      	movs	r3, r1
 80028f8:	495e      	ldr	r1, [pc, #376]	; (8002a74 <HAL_UART_RxCpltCallback+0x744>)
 80028fa:	2038      	movs	r0, #56	; 0x38
 80028fc:	1838      	adds	r0, r7, r0
 80028fe:	f004 fcc1 	bl	8007284 <siprintf>
					 HAL_UART_Transmit(&huart1, "ADC ", 4, 100);
 8002902:	495d      	ldr	r1, [pc, #372]	; (8002a78 <HAL_UART_RxCpltCallback+0x748>)
 8002904:	485d      	ldr	r0, [pc, #372]	; (8002a7c <HAL_UART_RxCpltCallback+0x74c>)
 8002906:	2364      	movs	r3, #100	; 0x64
 8002908:	2204      	movs	r2, #4
 800290a:	f002 fc61 	bl	80051d0 <HAL_UART_Transmit>
					 char count[2];
					 sprintf(count, "%d", i);
 800290e:	193b      	adds	r3, r7, r4
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	495b      	ldr	r1, [pc, #364]	; (8002a80 <HAL_UART_RxCpltCallback+0x750>)
 8002914:	240c      	movs	r4, #12
 8002916:	193b      	adds	r3, r7, r4
 8002918:	0018      	movs	r0, r3
 800291a:	f004 fcb3 	bl	8007284 <siprintf>

					 // Transmit the parsed data
					 HAL_UART_Transmit(&huart1, count, 2, 100);
 800291e:	1939      	adds	r1, r7, r4
 8002920:	4856      	ldr	r0, [pc, #344]	; (8002a7c <HAL_UART_RxCpltCallback+0x74c>)
 8002922:	2364      	movs	r3, #100	; 0x64
 8002924:	2202      	movs	r2, #2
 8002926:	f002 fc53 	bl	80051d0 <HAL_UART_Transmit>
 800292a:	e04e      	b.n	80029ca <HAL_UART_RxCpltCallback+0x69a>

				 } else if (i == 13) { // for i = 13 you read the internal temperature
 800292c:	2384      	movs	r3, #132	; 0x84
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b0d      	cmp	r3, #13
 8002934:	d122      	bne.n	800297c <HAL_UART_RxCpltCallback+0x64c>
					 // Should be 1.5ish for our actual Signal Board
					 float voltage = adc * (3.0/4095);
 8002936:	2382      	movs	r3, #130	; 0x82
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	0018      	movs	r0, r3
 800293e:	f7ff fbb3 	bl	80020a8 <__aeabi_i2d>
 8002942:	4a53      	ldr	r2, [pc, #332]	; (8002a90 <HAL_UART_RxCpltCallback+0x760>)
 8002944:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <HAL_UART_RxCpltCallback+0x764>)
 8002946:	f7fe fd5d 	bl	8001404 <__aeabi_dmul>
 800294a:	0002      	movs	r2, r0
 800294c:	000b      	movs	r3, r1
 800294e:	0010      	movs	r0, r2
 8002950:	0019      	movs	r1, r3
 8002952:	f7ff fc47 	bl	80021e4 <__aeabi_d2f>
 8002956:	1c03      	adds	r3, r0, #0
 8002958:	67bb      	str	r3, [r7, #120]	; 0x78
					 sprintf(value, "%f", voltage);
 800295a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800295c:	f7ff fbfa 	bl	8002154 <__aeabi_f2d>
 8002960:	0002      	movs	r2, r0
 8002962:	000b      	movs	r3, r1
 8002964:	4943      	ldr	r1, [pc, #268]	; (8002a74 <HAL_UART_RxCpltCallback+0x744>)
 8002966:	2038      	movs	r0, #56	; 0x38
 8002968:	1838      	adds	r0, r7, r0
 800296a:	f004 fc8b 	bl	8007284 <siprintf>

					 // Transmit the parsed data
					 HAL_UART_Transmit(&huart1, "TMPSENSE", 8, 100);
 800296e:	494a      	ldr	r1, [pc, #296]	; (8002a98 <HAL_UART_RxCpltCallback+0x768>)
 8002970:	4842      	ldr	r0, [pc, #264]	; (8002a7c <HAL_UART_RxCpltCallback+0x74c>)
 8002972:	2364      	movs	r3, #100	; 0x64
 8002974:	2208      	movs	r2, #8
 8002976:	f002 fc2b 	bl	80051d0 <HAL_UART_Transmit>
 800297a:	e026      	b.n	80029ca <HAL_UART_RxCpltCallback+0x69a>

				 } else if (i == 14) { // for i = 14 you read the internal voltage
 800297c:	2384      	movs	r3, #132	; 0x84
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b0e      	cmp	r3, #14
 8002984:	d121      	bne.n	80029ca <HAL_UART_RxCpltCallback+0x69a>
					 // Should be 3.3 for our actual Signal Board
					 float voltage = adc * (3.0/4095);
 8002986:	2382      	movs	r3, #130	; 0x82
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	0018      	movs	r0, r3
 800298e:	f7ff fb8b 	bl	80020a8 <__aeabi_i2d>
 8002992:	4a3f      	ldr	r2, [pc, #252]	; (8002a90 <HAL_UART_RxCpltCallback+0x760>)
 8002994:	4b3f      	ldr	r3, [pc, #252]	; (8002a94 <HAL_UART_RxCpltCallback+0x764>)
 8002996:	f7fe fd35 	bl	8001404 <__aeabi_dmul>
 800299a:	0002      	movs	r2, r0
 800299c:	000b      	movs	r3, r1
 800299e:	0010      	movs	r0, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	f7ff fc1f 	bl	80021e4 <__aeabi_d2f>
 80029a6:	1c03      	adds	r3, r0, #0
 80029a8:	67fb      	str	r3, [r7, #124]	; 0x7c
					 sprintf(value, "%f", voltage);
 80029aa:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80029ac:	f7ff fbd2 	bl	8002154 <__aeabi_f2d>
 80029b0:	0002      	movs	r2, r0
 80029b2:	000b      	movs	r3, r1
 80029b4:	492f      	ldr	r1, [pc, #188]	; (8002a74 <HAL_UART_RxCpltCallback+0x744>)
 80029b6:	2038      	movs	r0, #56	; 0x38
 80029b8:	1838      	adds	r0, r7, r0
 80029ba:	f004 fc63 	bl	8007284 <siprintf>

					 // Transmit the parsed data
					 HAL_UART_Transmit(&huart1, "VREFINT", 7, 100);
 80029be:	4937      	ldr	r1, [pc, #220]	; (8002a9c <HAL_UART_RxCpltCallback+0x76c>)
 80029c0:	482e      	ldr	r0, [pc, #184]	; (8002a7c <HAL_UART_RxCpltCallback+0x74c>)
 80029c2:	2364      	movs	r3, #100	; 0x64
 80029c4:	2207      	movs	r2, #7
 80029c6:	f002 fc03 	bl	80051d0 <HAL_UART_Transmit>

				 }

				 HAL_UART_Transmit(&huart1, ": ", 2, 100);
 80029ca:	4935      	ldr	r1, [pc, #212]	; (8002aa0 <HAL_UART_RxCpltCallback+0x770>)
 80029cc:	482b      	ldr	r0, [pc, #172]	; (8002a7c <HAL_UART_RxCpltCallback+0x74c>)
 80029ce:	2364      	movs	r3, #100	; 0x64
 80029d0:	2202      	movs	r2, #2
 80029d2:	f002 fbfd 	bl	80051d0 <HAL_UART_Transmit>
				 HAL_UART_Transmit(&huart1, value, 8, 100);
 80029d6:	2338      	movs	r3, #56	; 0x38
 80029d8:	18f9      	adds	r1, r7, r3
 80029da:	4828      	ldr	r0, [pc, #160]	; (8002a7c <HAL_UART_RxCpltCallback+0x74c>)
 80029dc:	2364      	movs	r3, #100	; 0x64
 80029de:	2208      	movs	r2, #8
 80029e0:	f002 fbf6 	bl	80051d0 <HAL_UART_Transmit>
				 HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 80029e4:	492f      	ldr	r1, [pc, #188]	; (8002aa4 <HAL_UART_RxCpltCallback+0x774>)
 80029e6:	4825      	ldr	r0, [pc, #148]	; (8002a7c <HAL_UART_RxCpltCallback+0x74c>)
 80029e8:	2364      	movs	r3, #100	; 0x64
 80029ea:	2202      	movs	r2, #2
 80029ec:	f002 fbf0 	bl	80051d0 <HAL_UART_Transmit>
			 for (int i = 0; i < adcChannelCount; i++) {
 80029f0:	2284      	movs	r2, #132	; 0x84
 80029f2:	18bb      	adds	r3, r7, r2
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3301      	adds	r3, #1
 80029f8:	18ba      	adds	r2, r7, r2
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	220f      	movs	r2, #15
 80029fe:	2384      	movs	r3, #132	; 0x84
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4293      	cmp	r3, r2
 8002a06:	da00      	bge.n	8002a0a <HAL_UART_RxCpltCallback+0x6da>
 8002a08:	e4b5      	b.n	8002376 <HAL_UART_RxCpltCallback+0x46>
			  * Here we need to add I2C reading
			  * Already doing this in the main firmware
			  */


			 HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8002a0a:	4926      	ldr	r1, [pc, #152]	; (8002aa4 <HAL_UART_RxCpltCallback+0x774>)
 8002a0c:	481b      	ldr	r0, [pc, #108]	; (8002a7c <HAL_UART_RxCpltCallback+0x74c>)
 8002a0e:	2364      	movs	r3, #100	; 0x64
 8002a10:	2202      	movs	r2, #2
 8002a12:	f002 fbdd 	bl	80051d0 <HAL_UART_Transmit>




			 // Changing to the next GPIO
			 if (HAL_GPIO_ReadPin(gpios[gpio_count].gpio, gpios[gpio_count].pin) == GPIO_PIN_SET){
 8002a16:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <HAL_UART_RxCpltCallback+0x778>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_UART_RxCpltCallback+0x77c>)
 8002a1c:	00d2      	lsls	r2, r2, #3
 8002a1e:	58d0      	ldr	r0, [r2, r3]
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <HAL_UART_RxCpltCallback+0x778>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a21      	ldr	r2, [pc, #132]	; (8002aac <HAL_UART_RxCpltCallback+0x77c>)
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	18d3      	adds	r3, r2, r3
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	0019      	movs	r1, r3
 8002a30:	f001 fdda 	bl	80045e8 <HAL_GPIO_ReadPin>
 8002a34:	0003      	movs	r3, r0
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d10f      	bne.n	8002a5a <HAL_UART_RxCpltCallback+0x72a>
				HAL_GPIO_WritePin(gpios[gpio_count].gpio, gpios[gpio_count].pin, GPIO_PIN_RESET);
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <HAL_UART_RxCpltCallback+0x778>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <HAL_UART_RxCpltCallback+0x77c>)
 8002a40:	00d2      	lsls	r2, r2, #3
 8002a42:	58d0      	ldr	r0, [r2, r3]
 8002a44:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <HAL_UART_RxCpltCallback+0x778>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a18      	ldr	r2, [pc, #96]	; (8002aac <HAL_UART_RxCpltCallback+0x77c>)
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	18d3      	adds	r3, r2, r3
 8002a4e:	3304      	adds	r3, #4
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	2200      	movs	r2, #0
 8002a54:	0019      	movs	r1, r3
 8002a56:	f001 fde4 	bl	8004622 <HAL_GPIO_WritePin>
			 }

			 gpio_count == 9 ? gpio_count = 0 : gpio_count++;
 8002a5a:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <HAL_UART_RxCpltCallback+0x778>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b09      	cmp	r3, #9
 8002a60:	d126      	bne.n	8002ab0 <HAL_UART_RxCpltCallback+0x780>
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_UART_RxCpltCallback+0x778>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e027      	b.n	8002aba <HAL_UART_RxCpltCallback+0x78a>
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	e734d9b4 	.word	0xe734d9b4
 8002a70:	3f4a680c 	.word	0x3f4a680c
 8002a74:	0800aff8 	.word	0x0800aff8
 8002a78:	0800affc 	.word	0x0800affc
 8002a7c:	20000280 	.word	0x20000280
 8002a80:	0800b004 	.word	0x0800b004
 8002a84:	0800b008 	.word	0x0800b008
 8002a88:	40140000 	.word	0x40140000
 8002a8c:	0800b014 	.word	0x0800b014
 8002a90:	18018018 	.word	0x18018018
 8002a94:	3f480180 	.word	0x3f480180
 8002a98:	0800b020 	.word	0x0800b020
 8002a9c:	0800b02c 	.word	0x0800b02c
 8002aa0:	0800b034 	.word	0x0800b034
 8002aa4:	0800b038 	.word	0x0800b038
 8002aa8:	20000368 	.word	0x20000368
 8002aac:	0800b0dc 	.word	0x0800b0dc
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_UART_RxCpltCallback+0x7b0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_UART_RxCpltCallback+0x7b0>)
 8002ab8:	601a      	str	r2, [r3, #0]

			 HAL_GPIO_TogglePin(gpios[gpio_count].gpio, gpios[gpio_count].pin);
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_UART_RxCpltCallback+0x7b0>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_UART_RxCpltCallback+0x7b4>)
 8002ac0:	00d2      	lsls	r2, r2, #3
 8002ac2:	58d0      	ldr	r0, [r2, r3]
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_UART_RxCpltCallback+0x7b0>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a06      	ldr	r2, [pc, #24]	; (8002ae4 <HAL_UART_RxCpltCallback+0x7b4>)
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	18d3      	adds	r3, r2, r3
 8002ace:	3304      	adds	r3, #4
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	f001 fdc2 	bl	800465c <HAL_GPIO_TogglePin>


		 }

	}
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b023      	add	sp, #140	; 0x8c
 8002ade:	bd90      	pop	{r4, r7, pc}
 8002ae0:	20000368 	.word	0x20000368
 8002ae4:	0800b0dc 	.word	0x0800b0dc

08002ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aec:	f000 fcc4 	bl	8003478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002af0:	f000 f81c 	bl	8002b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002af4:	f000 f9d8 	bl	8002ea8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002af8:	f000 f9b8 	bl	8002e6c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002afc:	f000 f986 	bl	8002e0c <MX_USART1_UART_Init>
  MX_ADC_Init();
 8002b00:	f000 f872 	bl	8002be8 <MX_ADC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8002b04:	4906      	ldr	r1, [pc, #24]	; (8002b20 <main+0x38>)
 8002b06:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <main+0x3c>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f002 fc09 	bl	8005322 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <main+0x40>)
 8002b12:	2140      	movs	r1, #64	; 0x40
 8002b14:	2201      	movs	r2, #1
 8002b16:	0018      	movs	r0, r3
 8002b18:	f001 fd83 	bl	8004622 <HAL_GPIO_WritePin>


  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <main+0x34>
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	20000304 	.word	0x20000304
 8002b24:	20000280 	.word	0x20000280
 8002b28:	48000400 	.word	0x48000400

08002b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b097      	sub	sp, #92	; 0x5c
 8002b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b32:	2428      	movs	r4, #40	; 0x28
 8002b34:	193b      	adds	r3, r7, r4
 8002b36:	0018      	movs	r0, r3
 8002b38:	2330      	movs	r3, #48	; 0x30
 8002b3a:	001a      	movs	r2, r3
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	f003 fd1f 	bl	8006580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b42:	2318      	movs	r3, #24
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	0018      	movs	r0, r3
 8002b48:	2310      	movs	r3, #16
 8002b4a:	001a      	movs	r2, r3
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	f003 fd17 	bl	8006580 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	0018      	movs	r0, r3
 8002b56:	2314      	movs	r3, #20
 8002b58:	001a      	movs	r2, r3
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	f003 fd10 	bl	8006580 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002b60:	0021      	movs	r1, r4
 8002b62:	187b      	adds	r3, r7, r1
 8002b64:	2212      	movs	r2, #18
 8002b66:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b68:	187b      	adds	r3, r7, r1
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002b6e:	187b      	adds	r3, r7, r1
 8002b70:	2201      	movs	r2, #1
 8002b72:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b74:	187b      	adds	r3, r7, r1
 8002b76:	2210      	movs	r2, #16
 8002b78:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002b7a:	187b      	adds	r3, r7, r1
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b80:	187b      	adds	r3, r7, r1
 8002b82:	2200      	movs	r2, #0
 8002b84:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b86:	187b      	adds	r3, r7, r1
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f001 fd83 	bl	8004694 <HAL_RCC_OscConfig>
 8002b8e:	1e03      	subs	r3, r0, #0
 8002b90:	d001      	beq.n	8002b96 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002b92:	f000 fa23 	bl	8002fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b96:	2118      	movs	r1, #24
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	2207      	movs	r2, #7
 8002b9c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b9e:	187b      	adds	r3, r7, r1
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ba4:	187b      	adds	r3, r7, r1
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002baa:	187b      	adds	r3, r7, r1
 8002bac:	2200      	movs	r2, #0
 8002bae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002bb0:	187b      	adds	r3, r7, r1
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f002 f887 	bl	8004cc8 <HAL_RCC_ClockConfig>
 8002bba:	1e03      	subs	r3, r0, #0
 8002bbc:	d001      	beq.n	8002bc2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002bbe:	f000 fa0d 	bl	8002fdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bce:	1d3b      	adds	r3, r7, #4
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f002 f9cb 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 8002bd6:	1e03      	subs	r3, r0, #0
 8002bd8:	d001      	beq.n	8002bde <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002bda:	f000 f9ff 	bl	8002fdc <Error_Handler>
  }
}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b017      	add	sp, #92	; 0x5c
 8002be4:	bd90      	pop	{r4, r7, pc}
	...

08002be8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	230c      	movs	r3, #12
 8002bf4:	001a      	movs	r2, r3
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	f003 fcc2 	bl	8006580 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002bfc:	4b81      	ldr	r3, [pc, #516]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002bfe:	4a82      	ldr	r2, [pc, #520]	; (8002e08 <MX_ADC_Init+0x220>)
 8002c00:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002c02:	4b80      	ldr	r3, [pc, #512]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002c08:	4b7e      	ldr	r3, [pc, #504]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c0e:	4b7d      	ldr	r3, [pc, #500]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002c14:	4b7b      	ldr	r3, [pc, #492]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c1a:	4b7a      	ldr	r3, [pc, #488]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002c20:	4b78      	ldr	r3, [pc, #480]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002c26:	4b77      	ldr	r3, [pc, #476]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002c2c:	4b75      	ldr	r3, [pc, #468]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002c32:	4b74      	ldr	r3, [pc, #464]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c38:	4b72      	ldr	r3, [pc, #456]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002c3a:	22c2      	movs	r2, #194	; 0xc2
 8002c3c:	32ff      	adds	r2, #255	; 0xff
 8002c3e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c40:	4b70      	ldr	r3, [pc, #448]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002c46:	4b6f      	ldr	r3, [pc, #444]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002c48:	2224      	movs	r2, #36	; 0x24
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002c4e:	4b6d      	ldr	r3, [pc, #436]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002c54:	4b6b      	ldr	r3, [pc, #428]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002c56:	0018      	movs	r0, r3
 8002c58:	f000 fc72 	bl	8003540 <HAL_ADC_Init>
 8002c5c:	1e03      	subs	r3, r0, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002c60:	f000 f9bc 	bl	8002fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	0152      	lsls	r2, r2, #5
 8002c70:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	2280      	movs	r2, #128	; 0x80
 8002c76:	0552      	lsls	r2, r2, #21
 8002c78:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002c7a:	1d3a      	adds	r2, r7, #4
 8002c7c:	4b61      	ldr	r3, [pc, #388]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002c7e:	0011      	movs	r1, r2
 8002c80:	0018      	movs	r0, r3
 8002c82:	f000 fe37 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002c86:	1e03      	subs	r3, r0, #0
 8002c88:	d001      	beq.n	8002c8e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002c8a:	f000 f9a7 	bl	8002fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	2201      	movs	r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002c94:	1d3a      	adds	r2, r7, #4
 8002c96:	4b5b      	ldr	r3, [pc, #364]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002c98:	0011      	movs	r1, r2
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f000 fe2a 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002ca0:	1e03      	subs	r3, r0, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8002ca4:	f000 f99a 	bl	8002fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002ca8:	1d3b      	adds	r3, r7, #4
 8002caa:	2202      	movs	r2, #2
 8002cac:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002cae:	1d3a      	adds	r2, r7, #4
 8002cb0:	4b54      	ldr	r3, [pc, #336]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002cb2:	0011      	movs	r1, r2
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 fe1d 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002cba:	1e03      	subs	r3, r0, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8002cbe:	f000 f98d 	bl	8002fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002cc8:	1d3a      	adds	r2, r7, #4
 8002cca:	4b4e      	ldr	r3, [pc, #312]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002ccc:	0011      	movs	r1, r2
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f000 fe10 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002cd4:	1e03      	subs	r3, r0, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8002cd8:	f000 f980 	bl	8002fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	2207      	movs	r2, #7
 8002ce0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ce2:	1d3a      	adds	r2, r7, #4
 8002ce4:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002ce6:	0011      	movs	r1, r2
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 fe03 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002cee:	1e03      	subs	r3, r0, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8002cf2:	f000 f973 	bl	8002fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002cfc:	1d3a      	adds	r2, r7, #4
 8002cfe:	4b41      	ldr	r3, [pc, #260]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002d00:	0011      	movs	r1, r2
 8002d02:	0018      	movs	r0, r3
 8002d04:	f000 fdf6 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002d08:	1e03      	subs	r3, r0, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8002d0c:	f000 f966 	bl	8002fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	2209      	movs	r2, #9
 8002d14:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002d16:	1d3a      	adds	r2, r7, #4
 8002d18:	4b3a      	ldr	r3, [pc, #232]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002d1a:	0011      	movs	r1, r2
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f000 fde9 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002d22:	1e03      	subs	r3, r0, #0
 8002d24:	d001      	beq.n	8002d2a <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8002d26:	f000 f959 	bl	8002fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	220a      	movs	r2, #10
 8002d2e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002d30:	1d3a      	adds	r2, r7, #4
 8002d32:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002d34:	0011      	movs	r1, r2
 8002d36:	0018      	movs	r0, r3
 8002d38:	f000 fddc 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002d3c:	1e03      	subs	r3, r0, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8002d40:	f000 f94c 	bl	8002fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002d44:	1d3b      	adds	r3, r7, #4
 8002d46:	220b      	movs	r2, #11
 8002d48:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002d4a:	1d3a      	adds	r2, r7, #4
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002d4e:	0011      	movs	r1, r2
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 fdcf 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002d56:	1e03      	subs	r3, r0, #0
 8002d58:	d001      	beq.n	8002d5e <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8002d5a:	f000 f93f 	bl	8002fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	220c      	movs	r2, #12
 8002d62:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002d64:	1d3a      	adds	r2, r7, #4
 8002d66:	4b27      	ldr	r3, [pc, #156]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002d68:	0011      	movs	r1, r2
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 fdc2 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002d70:	1e03      	subs	r3, r0, #0
 8002d72:	d001      	beq.n	8002d78 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8002d74:	f000 f932 	bl	8002fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	220d      	movs	r2, #13
 8002d7c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002d7e:	1d3a      	adds	r2, r7, #4
 8002d80:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002d82:	0011      	movs	r1, r2
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 fdb5 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002d8a:	1e03      	subs	r3, r0, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8002d8e:	f000 f925 	bl	8002fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	220e      	movs	r2, #14
 8002d96:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002d98:	1d3a      	adds	r2, r7, #4
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002d9c:	0011      	movs	r1, r2
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f000 fda8 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d001      	beq.n	8002dac <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8002da8:	f000 f918 	bl	8002fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002dac:	1d3b      	adds	r3, r7, #4
 8002dae:	220f      	movs	r2, #15
 8002db0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002db2:	1d3a      	adds	r2, r7, #4
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002db6:	0011      	movs	r1, r2
 8002db8:	0018      	movs	r0, r3
 8002dba:	f000 fd9b 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002dbe:	1e03      	subs	r3, r0, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8002dc2:	f000 f90b 	bl	8002fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	2210      	movs	r2, #16
 8002dca:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002dcc:	1d3a      	adds	r2, r7, #4
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002dd0:	0011      	movs	r1, r2
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 fd8e 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002dd8:	1e03      	subs	r3, r0, #0
 8002dda:	d001      	beq.n	8002de0 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8002ddc:	f000 f8fe 	bl	8002fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	2211      	movs	r2, #17
 8002de4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002de6:	1d3a      	adds	r2, r7, #4
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <MX_ADC_Init+0x21c>)
 8002dea:	0011      	movs	r1, r2
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 fd81 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002df2:	1e03      	subs	r3, r0, #0
 8002df4:	d001      	beq.n	8002dfa <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8002df6:	f000 f8f1 	bl	8002fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b004      	add	sp, #16
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	200001fc 	.word	0x200001fc
 8002e08:	40012400 	.word	0x40012400

08002e0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <MX_USART1_UART_Init+0x58>)
 8002e12:	4a15      	ldr	r2, [pc, #84]	; (8002e68 <MX_USART1_UART_Init+0x5c>)
 8002e14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <MX_USART1_UART_Init+0x58>)
 8002e18:	22e1      	movs	r2, #225	; 0xe1
 8002e1a:	0252      	lsls	r2, r2, #9
 8002e1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e1e:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <MX_USART1_UART_Init+0x58>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <MX_USART1_UART_Init+0x58>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <MX_USART1_UART_Init+0x58>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <MX_USART1_UART_Init+0x58>)
 8002e32:	220c      	movs	r2, #12
 8002e34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <MX_USART1_UART_Init+0x58>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <MX_USART1_UART_Init+0x58>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <MX_USART1_UART_Init+0x58>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <MX_USART1_UART_Init+0x58>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <MX_USART1_UART_Init+0x58>)
 8002e50:	0018      	movs	r0, r3
 8002e52:	f002 f969 	bl	8005128 <HAL_UART_Init>
 8002e56:	1e03      	subs	r3, r0, #0
 8002e58:	d001      	beq.n	8002e5e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002e5a:	f000 f8bf 	bl	8002fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000280 	.word	0x20000280
 8002e68:	40013800 	.word	0x40013800

08002e6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e72:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <MX_DMA_Init+0x38>)
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <MX_DMA_Init+0x38>)
 8002e78:	2101      	movs	r1, #1
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	615a      	str	r2, [r3, #20]
 8002e7e:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <MX_DMA_Init+0x38>)
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	2201      	movs	r2, #1
 8002e84:	4013      	ands	r3, r2
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	2009      	movs	r0, #9
 8002e90:	f000 fff2 	bl	8003e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002e94:	2009      	movs	r0, #9
 8002e96:	f001 f804 	bl	8003ea2 <HAL_NVIC_EnableIRQ>

}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b002      	add	sp, #8
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	40021000 	.word	0x40021000

08002ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b08b      	sub	sp, #44	; 0x2c
 8002eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eae:	2414      	movs	r4, #20
 8002eb0:	193b      	adds	r3, r7, r4
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	2314      	movs	r3, #20
 8002eb6:	001a      	movs	r2, r3
 8002eb8:	2100      	movs	r1, #0
 8002eba:	f003 fb61 	bl	8006580 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ebe:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <MX_GPIO_Init+0x124>)
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	4b42      	ldr	r3, [pc, #264]	; (8002fcc <MX_GPIO_Init+0x124>)
 8002ec4:	2180      	movs	r1, #128	; 0x80
 8002ec6:	0309      	lsls	r1, r1, #12
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	615a      	str	r2, [r3, #20]
 8002ecc:	4b3f      	ldr	r3, [pc, #252]	; (8002fcc <MX_GPIO_Init+0x124>)
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	2380      	movs	r3, #128	; 0x80
 8002ed2:	031b      	lsls	r3, r3, #12
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eda:	4b3c      	ldr	r3, [pc, #240]	; (8002fcc <MX_GPIO_Init+0x124>)
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <MX_GPIO_Init+0x124>)
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	0289      	lsls	r1, r1, #10
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	615a      	str	r2, [r3, #20]
 8002ee8:	4b38      	ldr	r3, [pc, #224]	; (8002fcc <MX_GPIO_Init+0x124>)
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	029b      	lsls	r3, r3, #10
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef6:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <MX_GPIO_Init+0x124>)
 8002ef8:	695a      	ldr	r2, [r3, #20]
 8002efa:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <MX_GPIO_Init+0x124>)
 8002efc:	2180      	movs	r1, #128	; 0x80
 8002efe:	02c9      	lsls	r1, r1, #11
 8002f00:	430a      	orrs	r2, r1
 8002f02:	615a      	str	r2, [r3, #20]
 8002f04:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <MX_GPIO_Init+0x124>)
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	02db      	lsls	r3, r3, #11
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f12:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <MX_GPIO_Init+0x124>)
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <MX_GPIO_Init+0x124>)
 8002f18:	2180      	movs	r1, #128	; 0x80
 8002f1a:	03c9      	lsls	r1, r1, #15
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	615a      	str	r2, [r3, #20]
 8002f20:	4b2a      	ldr	r3, [pc, #168]	; (8002fcc <MX_GPIO_Init+0x124>)
 8002f22:	695a      	ldr	r2, [r3, #20]
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	03db      	lsls	r3, r3, #15
 8002f28:	4013      	ands	r3, r2
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002f2e:	239f      	movs	r3, #159	; 0x9f
 8002f30:	019b      	lsls	r3, r3, #6
 8002f32:	4827      	ldr	r0, [pc, #156]	; (8002fd0 <MX_GPIO_Init+0x128>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	0019      	movs	r1, r3
 8002f38:	f001 fb73 	bl	8004622 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002f3c:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <MX_GPIO_Init+0x12c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	21c0      	movs	r1, #192	; 0xc0
 8002f42:	0018      	movs	r0, r3
 8002f44:	f001 fb6d 	bl	8004622 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002f48:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <MX_GPIO_Init+0x130>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2160      	movs	r1, #96	; 0x60
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f001 fb67 	bl	8004622 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002f54:	193b      	adds	r3, r7, r4
 8002f56:	229f      	movs	r2, #159	; 0x9f
 8002f58:	0192      	lsls	r2, r2, #6
 8002f5a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f5c:	193b      	adds	r3, r7, r4
 8002f5e:	2201      	movs	r2, #1
 8002f60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	193b      	adds	r3, r7, r4
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f68:	193b      	adds	r3, r7, r4
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f6e:	193b      	adds	r3, r7, r4
 8002f70:	4a17      	ldr	r2, [pc, #92]	; (8002fd0 <MX_GPIO_Init+0x128>)
 8002f72:	0019      	movs	r1, r3
 8002f74:	0010      	movs	r0, r2
 8002f76:	f001 f9c7 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f7a:	193b      	adds	r3, r7, r4
 8002f7c:	22c0      	movs	r2, #192	; 0xc0
 8002f7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f80:	193b      	adds	r3, r7, r4
 8002f82:	2201      	movs	r2, #1
 8002f84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	193b      	adds	r3, r7, r4
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8c:	193b      	adds	r3, r7, r4
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f92:	193b      	adds	r3, r7, r4
 8002f94:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <MX_GPIO_Init+0x12c>)
 8002f96:	0019      	movs	r1, r3
 8002f98:	0010      	movs	r0, r2
 8002f9a:	f001 f9b5 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002f9e:	0021      	movs	r1, r4
 8002fa0:	187b      	adds	r3, r7, r1
 8002fa2:	2260      	movs	r2, #96	; 0x60
 8002fa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa6:	187b      	adds	r3, r7, r1
 8002fa8:	2201      	movs	r2, #1
 8002faa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	187b      	adds	r3, r7, r1
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	187b      	adds	r3, r7, r1
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb8:	187b      	adds	r3, r7, r1
 8002fba:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <MX_GPIO_Init+0x130>)
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	0010      	movs	r0, r2
 8002fc0:	f001 f9a2 	bl	8004308 <HAL_GPIO_Init>

}
 8002fc4:	46c0      	nop			; (mov r8, r8)
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b00b      	add	sp, #44	; 0x2c
 8002fca:	bd90      	pop	{r4, r7, pc}
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	48000800 	.word	0x48000800
 8002fd4:	48001400 	.word	0x48001400
 8002fd8:	48000400 	.word	0x48000400

08002fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe0:	b672      	cpsid	i
}
 8002fe2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fe4:	e7fe      	b.n	8002fe4 <Error_Handler+0x8>
	...

08002fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fee:	4b0f      	ldr	r3, [pc, #60]	; (800302c <HAL_MspInit+0x44>)
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	; (800302c <HAL_MspInit+0x44>)
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	619a      	str	r2, [r3, #24]
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	; (800302c <HAL_MspInit+0x44>)
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2201      	movs	r2, #1
 8003000:	4013      	ands	r3, r2
 8003002:	607b      	str	r3, [r7, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_MspInit+0x44>)
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <HAL_MspInit+0x44>)
 800300c:	2180      	movs	r1, #128	; 0x80
 800300e:	0549      	lsls	r1, r1, #21
 8003010:	430a      	orrs	r2, r1
 8003012:	61da      	str	r2, [r3, #28]
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_MspInit+0x44>)
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	055b      	lsls	r3, r3, #21
 800301c:	4013      	ands	r3, r2
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	46bd      	mov	sp, r7
 8003026:	b002      	add	sp, #8
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	40021000 	.word	0x40021000

08003030 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b08d      	sub	sp, #52	; 0x34
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	241c      	movs	r4, #28
 800303a:	193b      	adds	r3, r7, r4
 800303c:	0018      	movs	r0, r3
 800303e:	2314      	movs	r3, #20
 8003040:	001a      	movs	r2, r3
 8003042:	2100      	movs	r1, #0
 8003044:	f003 fa9c 	bl	8006580 <memset>
  if(hadc->Instance==ADC1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a4a      	ldr	r2, [pc, #296]	; (8003178 <HAL_ADC_MspInit+0x148>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d000      	beq.n	8003054 <HAL_ADC_MspInit+0x24>
 8003052:	e08d      	b.n	8003170 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003054:	4b49      	ldr	r3, [pc, #292]	; (800317c <HAL_ADC_MspInit+0x14c>)
 8003056:	699a      	ldr	r2, [r3, #24]
 8003058:	4b48      	ldr	r3, [pc, #288]	; (800317c <HAL_ADC_MspInit+0x14c>)
 800305a:	2180      	movs	r1, #128	; 0x80
 800305c:	0089      	lsls	r1, r1, #2
 800305e:	430a      	orrs	r2, r1
 8003060:	619a      	str	r2, [r3, #24]
 8003062:	4b46      	ldr	r3, [pc, #280]	; (800317c <HAL_ADC_MspInit+0x14c>)
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003070:	4b42      	ldr	r3, [pc, #264]	; (800317c <HAL_ADC_MspInit+0x14c>)
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	4b41      	ldr	r3, [pc, #260]	; (800317c <HAL_ADC_MspInit+0x14c>)
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	0309      	lsls	r1, r1, #12
 800307a:	430a      	orrs	r2, r1
 800307c:	615a      	str	r2, [r3, #20]
 800307e:	4b3f      	ldr	r3, [pc, #252]	; (800317c <HAL_ADC_MspInit+0x14c>)
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	031b      	lsls	r3, r3, #12
 8003086:	4013      	ands	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308c:	4b3b      	ldr	r3, [pc, #236]	; (800317c <HAL_ADC_MspInit+0x14c>)
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	4b3a      	ldr	r3, [pc, #232]	; (800317c <HAL_ADC_MspInit+0x14c>)
 8003092:	2180      	movs	r1, #128	; 0x80
 8003094:	0289      	lsls	r1, r1, #10
 8003096:	430a      	orrs	r2, r1
 8003098:	615a      	str	r2, [r3, #20]
 800309a:	4b38      	ldr	r3, [pc, #224]	; (800317c <HAL_ADC_MspInit+0x14c>)
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	029b      	lsls	r3, r3, #10
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a8:	4b34      	ldr	r3, [pc, #208]	; (800317c <HAL_ADC_MspInit+0x14c>)
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	4b33      	ldr	r3, [pc, #204]	; (800317c <HAL_ADC_MspInit+0x14c>)
 80030ae:	2180      	movs	r1, #128	; 0x80
 80030b0:	02c9      	lsls	r1, r1, #11
 80030b2:	430a      	orrs	r2, r1
 80030b4:	615a      	str	r2, [r3, #20]
 80030b6:	4b31      	ldr	r3, [pc, #196]	; (800317c <HAL_ADC_MspInit+0x14c>)
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	02db      	lsls	r3, r3, #11
 80030be:	4013      	ands	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80030c4:	193b      	adds	r3, r7, r4
 80030c6:	223f      	movs	r2, #63	; 0x3f
 80030c8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ca:	193b      	adds	r3, r7, r4
 80030cc:	2203      	movs	r2, #3
 80030ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	193b      	adds	r3, r7, r4
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030d6:	193b      	adds	r3, r7, r4
 80030d8:	4a29      	ldr	r2, [pc, #164]	; (8003180 <HAL_ADC_MspInit+0x150>)
 80030da:	0019      	movs	r1, r3
 80030dc:	0010      	movs	r0, r2
 80030de:	f001 f913 	bl	8004308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80030e2:	193b      	adds	r3, r7, r4
 80030e4:	228f      	movs	r2, #143	; 0x8f
 80030e6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030e8:	193b      	adds	r3, r7, r4
 80030ea:	2203      	movs	r2, #3
 80030ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ee:	193b      	adds	r3, r7, r4
 80030f0:	2200      	movs	r2, #0
 80030f2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f4:	193a      	adds	r2, r7, r4
 80030f6:	2390      	movs	r3, #144	; 0x90
 80030f8:	05db      	lsls	r3, r3, #23
 80030fa:	0011      	movs	r1, r2
 80030fc:	0018      	movs	r0, r3
 80030fe:	f001 f903 	bl	8004308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003102:	193b      	adds	r3, r7, r4
 8003104:	2203      	movs	r2, #3
 8003106:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003108:	193b      	adds	r3, r7, r4
 800310a:	2203      	movs	r2, #3
 800310c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	193b      	adds	r3, r7, r4
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003114:	193b      	adds	r3, r7, r4
 8003116:	4a1b      	ldr	r2, [pc, #108]	; (8003184 <HAL_ADC_MspInit+0x154>)
 8003118:	0019      	movs	r1, r3
 800311a:	0010      	movs	r0, r2
 800311c:	f001 f8f4 	bl	8004308 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003120:	4b19      	ldr	r3, [pc, #100]	; (8003188 <HAL_ADC_MspInit+0x158>)
 8003122:	4a1a      	ldr	r2, [pc, #104]	; (800318c <HAL_ADC_MspInit+0x15c>)
 8003124:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003126:	4b18      	ldr	r3, [pc, #96]	; (8003188 <HAL_ADC_MspInit+0x158>)
 8003128:	2200      	movs	r2, #0
 800312a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800312c:	4b16      	ldr	r3, [pc, #88]	; (8003188 <HAL_ADC_MspInit+0x158>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <HAL_ADC_MspInit+0x158>)
 8003134:	2280      	movs	r2, #128	; 0x80
 8003136:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003138:	4b13      	ldr	r3, [pc, #76]	; (8003188 <HAL_ADC_MspInit+0x158>)
 800313a:	2280      	movs	r2, #128	; 0x80
 800313c:	0092      	lsls	r2, r2, #2
 800313e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <HAL_ADC_MspInit+0x158>)
 8003142:	2280      	movs	r2, #128	; 0x80
 8003144:	0112      	lsls	r2, r2, #4
 8003146:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003148:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <HAL_ADC_MspInit+0x158>)
 800314a:	2220      	movs	r2, #32
 800314c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800314e:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <HAL_ADC_MspInit+0x158>)
 8003150:	2200      	movs	r2, #0
 8003152:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <HAL_ADC_MspInit+0x158>)
 8003156:	0018      	movs	r0, r3
 8003158:	f000 fec0 	bl	8003edc <HAL_DMA_Init>
 800315c:	1e03      	subs	r3, r0, #0
 800315e:	d001      	beq.n	8003164 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8003160:	f7ff ff3c 	bl	8002fdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a08      	ldr	r2, [pc, #32]	; (8003188 <HAL_ADC_MspInit+0x158>)
 8003168:	631a      	str	r2, [r3, #48]	; 0x30
 800316a:	4b07      	ldr	r3, [pc, #28]	; (8003188 <HAL_ADC_MspInit+0x158>)
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003170:	46c0      	nop			; (mov r8, r8)
 8003172:	46bd      	mov	sp, r7
 8003174:	b00d      	add	sp, #52	; 0x34
 8003176:	bd90      	pop	{r4, r7, pc}
 8003178:	40012400 	.word	0x40012400
 800317c:	40021000 	.word	0x40021000
 8003180:	48000800 	.word	0x48000800
 8003184:	48000400 	.word	0x48000400
 8003188:	2000023c 	.word	0x2000023c
 800318c:	40020008 	.word	0x40020008

08003190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b08b      	sub	sp, #44	; 0x2c
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	2414      	movs	r4, #20
 800319a:	193b      	adds	r3, r7, r4
 800319c:	0018      	movs	r0, r3
 800319e:	2314      	movs	r3, #20
 80031a0:	001a      	movs	r2, r3
 80031a2:	2100      	movs	r1, #0
 80031a4:	f003 f9ec 	bl	8006580 <memset>
  if(huart->Instance==USART1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a21      	ldr	r2, [pc, #132]	; (8003234 <HAL_UART_MspInit+0xa4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d13b      	bne.n	800322a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031b2:	4b21      	ldr	r3, [pc, #132]	; (8003238 <HAL_UART_MspInit+0xa8>)
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	4b20      	ldr	r3, [pc, #128]	; (8003238 <HAL_UART_MspInit+0xa8>)
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	01c9      	lsls	r1, r1, #7
 80031bc:	430a      	orrs	r2, r1
 80031be:	619a      	str	r2, [r3, #24]
 80031c0:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_UART_MspInit+0xa8>)
 80031c2:	699a      	ldr	r2, [r3, #24]
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	01db      	lsls	r3, r3, #7
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ce:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <HAL_UART_MspInit+0xa8>)
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_UART_MspInit+0xa8>)
 80031d4:	2180      	movs	r1, #128	; 0x80
 80031d6:	0289      	lsls	r1, r1, #10
 80031d8:	430a      	orrs	r2, r1
 80031da:	615a      	str	r2, [r3, #20]
 80031dc:	4b16      	ldr	r3, [pc, #88]	; (8003238 <HAL_UART_MspInit+0xa8>)
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	029b      	lsls	r3, r3, #10
 80031e4:	4013      	ands	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031ea:	193b      	adds	r3, r7, r4
 80031ec:	22c0      	movs	r2, #192	; 0xc0
 80031ee:	00d2      	lsls	r2, r2, #3
 80031f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f2:	0021      	movs	r1, r4
 80031f4:	187b      	adds	r3, r7, r1
 80031f6:	2202      	movs	r2, #2
 80031f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fa:	187b      	adds	r3, r7, r1
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003200:	187b      	adds	r3, r7, r1
 8003202:	2203      	movs	r2, #3
 8003204:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003206:	187b      	adds	r3, r7, r1
 8003208:	2201      	movs	r2, #1
 800320a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320c:	187a      	adds	r2, r7, r1
 800320e:	2390      	movs	r3, #144	; 0x90
 8003210:	05db      	lsls	r3, r3, #23
 8003212:	0011      	movs	r1, r2
 8003214:	0018      	movs	r0, r3
 8003216:	f001 f877 	bl	8004308 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800321a:	2200      	movs	r2, #0
 800321c:	2100      	movs	r1, #0
 800321e:	201b      	movs	r0, #27
 8003220:	f000 fe2a 	bl	8003e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003224:	201b      	movs	r0, #27
 8003226:	f000 fe3c 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	b00b      	add	sp, #44	; 0x2c
 8003230:	bd90      	pop	{r4, r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	40013800 	.word	0x40013800
 8003238:	40021000 	.word	0x40021000

0800323c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003240:	e7fe      	b.n	8003240 <NMI_Handler+0x4>

08003242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003246:	e7fe      	b.n	8003246 <HardFault_Handler+0x4>

08003248 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800324c:	46c0      	nop			; (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003260:	f000 f952 	bl	8003508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <DMA1_Channel1_IRQHandler+0x14>)
 8003272:	0018      	movs	r0, r3
 8003274:	f000 ff5d 	bl	8004132 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	2000023c 	.word	0x2000023c

08003284 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <USART1_IRQHandler+0x14>)
 800328a:	0018      	movs	r0, r3
 800328c:	f002 f8aa 	bl	80053e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	20000280 	.word	0x20000280

0800329c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
	return 1;
 80032a0:	2301      	movs	r3, #1
}
 80032a2:	0018      	movs	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <_kill>:

int _kill(int pid, int sig)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80032b2:	f003 f93b 	bl	800652c <__errno>
 80032b6:	0003      	movs	r3, r0
 80032b8:	2216      	movs	r2, #22
 80032ba:	601a      	str	r2, [r3, #0]
	return -1;
 80032bc:	2301      	movs	r3, #1
 80032be:	425b      	negs	r3, r3
}
 80032c0:	0018      	movs	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b002      	add	sp, #8
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <_exit>:

void _exit (int status)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80032d0:	2301      	movs	r3, #1
 80032d2:	425a      	negs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	0011      	movs	r1, r2
 80032d8:	0018      	movs	r0, r3
 80032da:	f7ff ffe5 	bl	80032a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80032de:	e7fe      	b.n	80032de <_exit+0x16>

080032e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e00a      	b.n	8003308 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80032f2:	e000      	b.n	80032f6 <_read+0x16>
 80032f4:	bf00      	nop
 80032f6:	0001      	movs	r1, r0
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	60ba      	str	r2, [r7, #8]
 80032fe:	b2ca      	uxtb	r2, r1
 8003300:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	3301      	adds	r3, #1
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	429a      	cmp	r2, r3
 800330e:	dbf0      	blt.n	80032f2 <_read+0x12>
	}

return len;
 8003310:	687b      	ldr	r3, [r7, #4]
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b006      	add	sp, #24
 8003318:	bd80      	pop	{r7, pc}

0800331a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	e009      	b.n	8003340 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	60ba      	str	r2, [r7, #8]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	0018      	movs	r0, r3
 8003336:	e000      	b.n	800333a <_write+0x20>
 8003338:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	3301      	adds	r3, #1
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	429a      	cmp	r2, r3
 8003346:	dbf1      	blt.n	800332c <_write+0x12>
	}
	return len;
 8003348:	687b      	ldr	r3, [r7, #4]
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b006      	add	sp, #24
 8003350:	bd80      	pop	{r7, pc}

08003352 <_close>:

int _close(int file)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
	return -1;
 800335a:	2301      	movs	r3, #1
 800335c:	425b      	negs	r3, r3
}
 800335e:	0018      	movs	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	b002      	add	sp, #8
 8003364:	bd80      	pop	{r7, pc}

08003366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2280      	movs	r2, #128	; 0x80
 8003374:	0192      	lsls	r2, r2, #6
 8003376:	605a      	str	r2, [r3, #4]
	return 0;
 8003378:	2300      	movs	r3, #0
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b002      	add	sp, #8
 8003380:	bd80      	pop	{r7, pc}

08003382 <_isatty>:

int _isatty(int file)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
	return 1;
 800338a:	2301      	movs	r3, #1
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bd80      	pop	{r7, pc}

08003394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
	return 0;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	0018      	movs	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b004      	add	sp, #16
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033b4:	4a14      	ldr	r2, [pc, #80]	; (8003408 <_sbrk+0x5c>)
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <_sbrk+0x60>)
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033c0:	4b13      	ldr	r3, [pc, #76]	; (8003410 <_sbrk+0x64>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033c8:	4b11      	ldr	r3, [pc, #68]	; (8003410 <_sbrk+0x64>)
 80033ca:	4a12      	ldr	r2, [pc, #72]	; (8003414 <_sbrk+0x68>)
 80033cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <_sbrk+0x64>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	18d3      	adds	r3, r2, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d207      	bcs.n	80033ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033dc:	f003 f8a6 	bl	800652c <__errno>
 80033e0:	0003      	movs	r3, r0
 80033e2:	220c      	movs	r2, #12
 80033e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	425b      	negs	r3, r3
 80033ea:	e009      	b.n	8003400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033ec:	4b08      	ldr	r3, [pc, #32]	; (8003410 <_sbrk+0x64>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033f2:	4b07      	ldr	r3, [pc, #28]	; (8003410 <_sbrk+0x64>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	18d2      	adds	r2, r2, r3
 80033fa:	4b05      	ldr	r3, [pc, #20]	; (8003410 <_sbrk+0x64>)
 80033fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80033fe:	68fb      	ldr	r3, [r7, #12]
}
 8003400:	0018      	movs	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	b006      	add	sp, #24
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20002000 	.word	0x20002000
 800340c:	00000400 	.word	0x00000400
 8003410:	200003a8 	.word	0x200003a8
 8003414:	200003c0 	.word	0x200003c0

08003418 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800341c:	46c0      	nop			; (mov r8, r8)
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003424:	480d      	ldr	r0, [pc, #52]	; (800345c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003426:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003428:	480d      	ldr	r0, [pc, #52]	; (8003460 <LoopForever+0x6>)
  ldr r1, =_edata
 800342a:	490e      	ldr	r1, [pc, #56]	; (8003464 <LoopForever+0xa>)
  ldr r2, =_sidata
 800342c:	4a0e      	ldr	r2, [pc, #56]	; (8003468 <LoopForever+0xe>)
  movs r3, #0
 800342e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003430:	e002      	b.n	8003438 <LoopCopyDataInit>

08003432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003436:	3304      	adds	r3, #4

08003438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800343a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800343c:	d3f9      	bcc.n	8003432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800343e:	4a0b      	ldr	r2, [pc, #44]	; (800346c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003440:	4c0b      	ldr	r4, [pc, #44]	; (8003470 <LoopForever+0x16>)
  movs r3, #0
 8003442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003444:	e001      	b.n	800344a <LoopFillZerobss>

08003446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003448:	3204      	adds	r2, #4

0800344a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800344a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800344c:	d3fb      	bcc.n	8003446 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800344e:	f7ff ffe3 	bl	8003418 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003452:	f003 f871 	bl	8006538 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003456:	f7ff fb47 	bl	8002ae8 <main>

0800345a <LoopForever>:

LoopForever:
    b LoopForever
 800345a:	e7fe      	b.n	800345a <LoopForever>
  ldr   r0, =_estack
 800345c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003464:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003468:	0800b5f4 	.word	0x0800b5f4
  ldr r2, =_sbss
 800346c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003470:	200003c0 	.word	0x200003c0

08003474 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003474:	e7fe      	b.n	8003474 <ADC1_COMP_IRQHandler>
	...

08003478 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800347c:	4b07      	ldr	r3, [pc, #28]	; (800349c <HAL_Init+0x24>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_Init+0x24>)
 8003482:	2110      	movs	r1, #16
 8003484:	430a      	orrs	r2, r1
 8003486:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003488:	2003      	movs	r0, #3
 800348a:	f000 f809 	bl	80034a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800348e:	f7ff fdab 	bl	8002fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	40022000 	.word	0x40022000

080034a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <HAL_InitTick+0x5c>)
 80034aa:	681c      	ldr	r4, [r3, #0]
 80034ac:	4b14      	ldr	r3, [pc, #80]	; (8003500 <HAL_InitTick+0x60>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	0019      	movs	r1, r3
 80034b2:	23fa      	movs	r3, #250	; 0xfa
 80034b4:	0098      	lsls	r0, r3, #2
 80034b6:	f7fc fe43 	bl	8000140 <__udivsi3>
 80034ba:	0003      	movs	r3, r0
 80034bc:	0019      	movs	r1, r3
 80034be:	0020      	movs	r0, r4
 80034c0:	f7fc fe3e 	bl	8000140 <__udivsi3>
 80034c4:	0003      	movs	r3, r0
 80034c6:	0018      	movs	r0, r3
 80034c8:	f000 fcfb 	bl	8003ec2 <HAL_SYSTICK_Config>
 80034cc:	1e03      	subs	r3, r0, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e00f      	b.n	80034f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d80b      	bhi.n	80034f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	2301      	movs	r3, #1
 80034de:	425b      	negs	r3, r3
 80034e0:	2200      	movs	r2, #0
 80034e2:	0018      	movs	r0, r3
 80034e4:	f000 fcc8 	bl	8003e78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_InitTick+0x64>)
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e000      	b.n	80034f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b003      	add	sp, #12
 80034fa:	bd90      	pop	{r4, r7, pc}
 80034fc:	20000000 	.word	0x20000000
 8003500:	20000008 	.word	0x20000008
 8003504:	20000004 	.word	0x20000004

08003508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <HAL_IncTick+0x1c>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	001a      	movs	r2, r3
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_IncTick+0x20>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	18d2      	adds	r2, r2, r3
 8003518:	4b03      	ldr	r3, [pc, #12]	; (8003528 <HAL_IncTick+0x20>)
 800351a:	601a      	str	r2, [r3, #0]
}
 800351c:	46c0      	nop			; (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	20000008 	.word	0x20000008
 8003528:	200003ac 	.word	0x200003ac

0800352c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  return uwTick;
 8003530:	4b02      	ldr	r3, [pc, #8]	; (800353c <HAL_GetTick+0x10>)
 8003532:	681b      	ldr	r3, [r3, #0]
}
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	200003ac 	.word	0x200003ac

08003540 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003548:	230f      	movs	r3, #15
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e125      	b.n	80037aa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10a      	bne.n	800357c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2234      	movs	r2, #52	; 0x34
 8003570:	2100      	movs	r1, #0
 8003572:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	0018      	movs	r0, r3
 8003578:	f7ff fd5a 	bl	8003030 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003580:	2210      	movs	r2, #16
 8003582:	4013      	ands	r3, r2
 8003584:	d000      	beq.n	8003588 <HAL_ADC_Init+0x48>
 8003586:	e103      	b.n	8003790 <HAL_ADC_Init+0x250>
 8003588:	230f      	movs	r3, #15
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d000      	beq.n	8003594 <HAL_ADC_Init+0x54>
 8003592:	e0fd      	b.n	8003790 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2204      	movs	r2, #4
 800359c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800359e:	d000      	beq.n	80035a2 <HAL_ADC_Init+0x62>
 80035a0:	e0f6      	b.n	8003790 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	4a83      	ldr	r2, [pc, #524]	; (80037b4 <HAL_ADC_Init+0x274>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	2202      	movs	r2, #2
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2203      	movs	r2, #3
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d112      	bne.n	80035e6 <HAL_ADC_Init+0xa6>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2201      	movs	r2, #1
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d009      	beq.n	80035e2 <HAL_ADC_Init+0xa2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	401a      	ands	r2, r3
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	429a      	cmp	r2, r3
 80035e0:	d101      	bne.n	80035e6 <HAL_ADC_Init+0xa6>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_ADC_Init+0xa8>
 80035e6:	2300      	movs	r3, #0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d116      	bne.n	800361a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2218      	movs	r2, #24
 80035f4:	4393      	bics	r3, r2
 80035f6:	0019      	movs	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	0899      	lsrs	r1, r3, #2
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4964      	ldr	r1, [pc, #400]	; (80037b8 <HAL_ADC_Init+0x278>)
 8003626:	400a      	ands	r2, r1
 8003628:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7e1b      	ldrb	r3, [r3, #24]
 800362e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	7e5b      	ldrb	r3, [r3, #25]
 8003634:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003636:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	7e9b      	ldrb	r3, [r3, #26]
 800363c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800363e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	2b01      	cmp	r3, #1
 8003646:	d002      	beq.n	800364e <HAL_ADC_Init+0x10e>
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	015b      	lsls	r3, r3, #5
 800364c:	e000      	b.n	8003650 <HAL_ADC_Init+0x110>
 800364e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003650:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003656:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d101      	bne.n	8003664 <HAL_ADC_Init+0x124>
 8003660:	2304      	movs	r3, #4
 8003662:	e000      	b.n	8003666 <HAL_ADC_Init+0x126>
 8003664:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003666:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2124      	movs	r1, #36	; 0x24
 800366c:	5c5b      	ldrb	r3, [r3, r1]
 800366e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003670:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	4313      	orrs	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7edb      	ldrb	r3, [r3, #27]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d115      	bne.n	80036ac <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7e9b      	ldrb	r3, [r3, #26]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d105      	bne.n	8003694 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2280      	movs	r2, #128	; 0x80
 800368c:	0252      	lsls	r2, r2, #9
 800368e:	4313      	orrs	r3, r2
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	e00b      	b.n	80036ac <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	2220      	movs	r2, #32
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	2201      	movs	r2, #1
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69da      	ldr	r2, [r3, #28]
 80036b0:	23c2      	movs	r3, #194	; 0xc2
 80036b2:	33ff      	adds	r3, #255	; 0xff
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d007      	beq.n	80036c8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80036c0:	4313      	orrs	r3, r2
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68d9      	ldr	r1, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	055b      	lsls	r3, r3, #21
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d01b      	beq.n	800371c <HAL_ADC_Init+0x1dc>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d017      	beq.n	800371c <HAL_ADC_Init+0x1dc>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d013      	beq.n	800371c <HAL_ADC_Init+0x1dc>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d00f      	beq.n	800371c <HAL_ADC_Init+0x1dc>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	2b04      	cmp	r3, #4
 8003702:	d00b      	beq.n	800371c <HAL_ADC_Init+0x1dc>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	2b05      	cmp	r3, #5
 800370a:	d007      	beq.n	800371c <HAL_ADC_Init+0x1dc>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	2b06      	cmp	r3, #6
 8003712:	d003      	beq.n	800371c <HAL_ADC_Init+0x1dc>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	2b07      	cmp	r3, #7
 800371a:	d112      	bne.n	8003742 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2107      	movs	r1, #7
 8003728:	438a      	bics	r2, r1
 800372a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6959      	ldr	r1, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	2207      	movs	r2, #7
 8003738:	401a      	ands	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <HAL_ADC_Init+0x27c>)
 800374a:	4013      	ands	r3, r2
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	d10b      	bne.n	800376a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	2203      	movs	r2, #3
 800375e:	4393      	bics	r3, r2
 8003760:	2201      	movs	r2, #1
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003768:	e01c      	b.n	80037a4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	2212      	movs	r2, #18
 8003770:	4393      	bics	r3, r2
 8003772:	2210      	movs	r2, #16
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377e:	2201      	movs	r2, #1
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003786:	230f      	movs	r3, #15
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	2201      	movs	r2, #1
 800378c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800378e:	e009      	b.n	80037a4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	2210      	movs	r2, #16
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800379c:	230f      	movs	r3, #15
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	2201      	movs	r2, #1
 80037a2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80037a4:	230f      	movs	r3, #15
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	781b      	ldrb	r3, [r3, #0]
}
 80037aa:	0018      	movs	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b004      	add	sp, #16
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	fffffefd 	.word	0xfffffefd
 80037b8:	fffe0219 	.word	0xfffe0219
 80037bc:	833fffe7 	.word	0x833fffe7

080037c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037cc:	2317      	movs	r3, #23
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2204      	movs	r2, #4
 80037dc:	4013      	ands	r3, r2
 80037de:	d15e      	bne.n	800389e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2234      	movs	r2, #52	; 0x34
 80037e4:	5c9b      	ldrb	r3, [r3, r2]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_ADC_Start_DMA+0x2e>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e05e      	b.n	80038ac <HAL_ADC_Start_DMA+0xec>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2234      	movs	r2, #52	; 0x34
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	7e5b      	ldrb	r3, [r3, #25]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d007      	beq.n	800380e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80037fe:	2317      	movs	r3, #23
 8003800:	18fc      	adds	r4, r7, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	0018      	movs	r0, r3
 8003806:	f000 f983 	bl	8003b10 <ADC_Enable>
 800380a:	0003      	movs	r3, r0
 800380c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800380e:	2317      	movs	r3, #23
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d146      	bne.n	80038a6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	4a25      	ldr	r2, [pc, #148]	; (80038b4 <HAL_ADC_Start_DMA+0xf4>)
 800381e:	4013      	ands	r3, r2
 8003820:	2280      	movs	r2, #128	; 0x80
 8003822:	0052      	lsls	r2, r2, #1
 8003824:	431a      	orrs	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2234      	movs	r2, #52	; 0x34
 8003834:	2100      	movs	r1, #0
 8003836:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	4a1e      	ldr	r2, [pc, #120]	; (80038b8 <HAL_ADC_Start_DMA+0xf8>)
 800383e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	4a1d      	ldr	r2, [pc, #116]	; (80038bc <HAL_ADC_Start_DMA+0xfc>)
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	4a1c      	ldr	r2, [pc, #112]	; (80038c0 <HAL_ADC_Start_DMA+0x100>)
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	221c      	movs	r2, #28
 8003856:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2110      	movs	r1, #16
 8003864:	430a      	orrs	r2, r1
 8003866:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2101      	movs	r1, #1
 8003874:	430a      	orrs	r2, r1
 8003876:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3340      	adds	r3, #64	; 0x40
 8003882:	0019      	movs	r1, r3
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f000 fb70 	bl	8003f6c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2104      	movs	r1, #4
 8003898:	430a      	orrs	r2, r1
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	e003      	b.n	80038a6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800389e:	2317      	movs	r3, #23
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	2202      	movs	r2, #2
 80038a4:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80038a6:	2317      	movs	r3, #23
 80038a8:	18fb      	adds	r3, r7, r3
 80038aa:	781b      	ldrb	r3, [r3, #0]
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b007      	add	sp, #28
 80038b2:	bd90      	pop	{r4, r7, pc}
 80038b4:	fffff0fe 	.word	0xfffff0fe
 80038b8:	08003c19 	.word	0x08003c19
 80038bc:	08003ccd 	.word	0x08003ccd
 80038c0:	08003ceb 	.word	0x08003ceb

080038c4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80038cc:	46c0      	nop			; (mov r8, r8)
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b002      	add	sp, #8
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	46bd      	mov	sp, r7
 80038e0:	b002      	add	sp, #8
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b002      	add	sp, #8
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038fe:	230f      	movs	r3, #15
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	055b      	lsls	r3, r3, #21
 8003912:	429a      	cmp	r2, r3
 8003914:	d011      	beq.n	800393a <HAL_ADC_ConfigChannel+0x46>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	2b01      	cmp	r3, #1
 800391c:	d00d      	beq.n	800393a <HAL_ADC_ConfigChannel+0x46>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	2b02      	cmp	r3, #2
 8003924:	d009      	beq.n	800393a <HAL_ADC_ConfigChannel+0x46>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	2b03      	cmp	r3, #3
 800392c:	d005      	beq.n	800393a <HAL_ADC_ConfigChannel+0x46>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	2b04      	cmp	r3, #4
 8003934:	d001      	beq.n	800393a <HAL_ADC_ConfigChannel+0x46>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2234      	movs	r2, #52	; 0x34
 800393e:	5c9b      	ldrb	r3, [r3, r2]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x54>
 8003944:	2302      	movs	r3, #2
 8003946:	e0d0      	b.n	8003aea <HAL_ADC_ConfigChannel+0x1f6>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2234      	movs	r2, #52	; 0x34
 800394c:	2101      	movs	r1, #1
 800394e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2204      	movs	r2, #4
 8003958:	4013      	ands	r3, r2
 800395a:	d000      	beq.n	800395e <HAL_ADC_ConfigChannel+0x6a>
 800395c:	e0b4      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4a64      	ldr	r2, [pc, #400]	; (8003af4 <HAL_ADC_ConfigChannel+0x200>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d100      	bne.n	800396a <HAL_ADC_ConfigChannel+0x76>
 8003968:	e082      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2201      	movs	r2, #1
 8003976:	409a      	lsls	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003984:	2380      	movs	r3, #128	; 0x80
 8003986:	055b      	lsls	r3, r3, #21
 8003988:	429a      	cmp	r2, r3
 800398a:	d037      	beq.n	80039fc <HAL_ADC_ConfigChannel+0x108>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d033      	beq.n	80039fc <HAL_ADC_ConfigChannel+0x108>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	2b02      	cmp	r3, #2
 800399a:	d02f      	beq.n	80039fc <HAL_ADC_ConfigChannel+0x108>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d02b      	beq.n	80039fc <HAL_ADC_ConfigChannel+0x108>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d027      	beq.n	80039fc <HAL_ADC_ConfigChannel+0x108>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	2b05      	cmp	r3, #5
 80039b2:	d023      	beq.n	80039fc <HAL_ADC_ConfigChannel+0x108>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	2b06      	cmp	r3, #6
 80039ba:	d01f      	beq.n	80039fc <HAL_ADC_ConfigChannel+0x108>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	2b07      	cmp	r3, #7
 80039c2:	d01b      	beq.n	80039fc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	2107      	movs	r1, #7
 80039d0:	400b      	ands	r3, r1
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d012      	beq.n	80039fc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2107      	movs	r1, #7
 80039e2:	438a      	bics	r2, r1
 80039e4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6959      	ldr	r1, [r3, #20]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2207      	movs	r2, #7
 80039f2:	401a      	ands	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b10      	cmp	r3, #16
 8003a02:	d007      	beq.n	8003a14 <HAL_ADC_ConfigChannel+0x120>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b11      	cmp	r3, #17
 8003a0a:	d003      	beq.n	8003a14 <HAL_ADC_ConfigChannel+0x120>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b12      	cmp	r3, #18
 8003a12:	d163      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003a14:	4b38      	ldr	r3, [pc, #224]	; (8003af8 <HAL_ADC_ConfigChannel+0x204>)
 8003a16:	6819      	ldr	r1, [r3, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d009      	beq.n	8003a34 <HAL_ADC_ConfigChannel+0x140>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b11      	cmp	r3, #17
 8003a26:	d102      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x13a>
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	03db      	lsls	r3, r3, #15
 8003a2c:	e004      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x144>
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	045b      	lsls	r3, r3, #17
 8003a32:	e001      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x144>
 8003a34:	2380      	movs	r3, #128	; 0x80
 8003a36:	041b      	lsls	r3, r3, #16
 8003a38:	4a2f      	ldr	r2, [pc, #188]	; (8003af8 <HAL_ADC_ConfigChannel+0x204>)
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	d14a      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a46:	4b2d      	ldr	r3, [pc, #180]	; (8003afc <HAL_ADC_ConfigChannel+0x208>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	492d      	ldr	r1, [pc, #180]	; (8003b00 <HAL_ADC_ConfigChannel+0x20c>)
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7fc fb77 	bl	8000140 <__udivsi3>
 8003a52:	0003      	movs	r3, r0
 8003a54:	001a      	movs	r2, r3
 8003a56:	0013      	movs	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	189b      	adds	r3, r3, r2
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a60:	e002      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f9      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x16e>
 8003a6e:	e035      	b.n	8003adc <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	4099      	lsls	r1, r3
 8003a7e:	000b      	movs	r3, r1
 8003a80:	43d9      	mvns	r1, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	400a      	ands	r2, r1
 8003a88:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d007      	beq.n	8003aa2 <HAL_ADC_ConfigChannel+0x1ae>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b11      	cmp	r3, #17
 8003a98:	d003      	beq.n	8003aa2 <HAL_ADC_ConfigChannel+0x1ae>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b12      	cmp	r3, #18
 8003aa0:	d11c      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003aa2:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <HAL_ADC_ConfigChannel+0x204>)
 8003aa4:	6819      	ldr	r1, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b10      	cmp	r3, #16
 8003aac:	d007      	beq.n	8003abe <HAL_ADC_ConfigChannel+0x1ca>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b11      	cmp	r3, #17
 8003ab4:	d101      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x1c6>
 8003ab6:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <HAL_ADC_ConfigChannel+0x210>)
 8003ab8:	e002      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x1cc>
 8003aba:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <HAL_ADC_ConfigChannel+0x214>)
 8003abc:	e000      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x1cc>
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <HAL_ADC_ConfigChannel+0x218>)
 8003ac0:	4a0d      	ldr	r2, [pc, #52]	; (8003af8 <HAL_ADC_ConfigChannel+0x204>)
 8003ac2:	400b      	ands	r3, r1
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	e009      	b.n	8003adc <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	2220      	movs	r2, #32
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003ad4:	230f      	movs	r3, #15
 8003ad6:	18fb      	adds	r3, r7, r3
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2234      	movs	r2, #52	; 0x34
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003ae4:	230f      	movs	r3, #15
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	781b      	ldrb	r3, [r3, #0]
}
 8003aea:	0018      	movs	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b004      	add	sp, #16
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	00001001 	.word	0x00001001
 8003af8:	40012708 	.word	0x40012708
 8003afc:	20000000 	.word	0x20000000
 8003b00:	000f4240 	.word	0x000f4240
 8003b04:	ffbfffff 	.word	0xffbfffff
 8003b08:	feffffff 	.word	0xfeffffff
 8003b0c:	ff7fffff 	.word	0xff7fffff

08003b10 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2203      	movs	r2, #3
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d112      	bne.n	8003b54 <ADC_Enable+0x44>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2201      	movs	r2, #1
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d009      	beq.n	8003b50 <ADC_Enable+0x40>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	401a      	ands	r2, r3
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d101      	bne.n	8003b54 <ADC_Enable+0x44>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <ADC_Enable+0x46>
 8003b54:	2300      	movs	r3, #0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d152      	bne.n	8003c00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	4a2a      	ldr	r2, [pc, #168]	; (8003c0c <ADC_Enable+0xfc>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	d00d      	beq.n	8003b82 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	2210      	movs	r2, #16
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	2201      	movs	r2, #1
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e03f      	b.n	8003c02 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b92:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <ADC_Enable+0x100>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	491f      	ldr	r1, [pc, #124]	; (8003c14 <ADC_Enable+0x104>)
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7fc fad1 	bl	8000140 <__udivsi3>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ba2:	e002      	b.n	8003baa <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f9      	bne.n	8003ba4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bb0:	f7ff fcbc 	bl	800352c <HAL_GetTick>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bb8:	e01b      	b.n	8003bf2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bba:	f7ff fcb7 	bl	800352c <HAL_GetTick>
 8003bbe:	0002      	movs	r2, r0
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d914      	bls.n	8003bf2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d00d      	beq.n	8003bf2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	2210      	movs	r2, #16
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	2201      	movs	r2, #1
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e007      	b.n	8003c02 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d1dc      	bne.n	8003bba <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	0018      	movs	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b004      	add	sp, #16
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	80000017 	.word	0x80000017
 8003c10:	20000000 	.word	0x20000000
 8003c14:	000f4240 	.word	0x000f4240

08003c18 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	2250      	movs	r2, #80	; 0x50
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d140      	bne.n	8003cb2 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	2280      	movs	r2, #128	; 0x80
 8003c36:	0092      	lsls	r2, r2, #2
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	23c0      	movs	r3, #192	; 0xc0
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d12d      	bne.n	8003ca8 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d129      	bne.n	8003ca8 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2208      	movs	r2, #8
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d122      	bne.n	8003ca8 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2204      	movs	r2, #4
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d110      	bne.n	8003c90 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	210c      	movs	r1, #12
 8003c7a:	438a      	bics	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	4a11      	ldr	r2, [pc, #68]	; (8003cc8 <ADC_DMAConvCplt+0xb0>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	2201      	movs	r2, #1
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
 8003c8e:	e00b      	b.n	8003ca8 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	2220      	movs	r2, #32
 8003c96:	431a      	orrs	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	0018      	movs	r0, r3
 8003cac:	f7ff fe0a 	bl	80038c4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003cb0:	e005      	b.n	8003cbe <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	0010      	movs	r0, r2
 8003cbc:	4798      	blx	r3
}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b004      	add	sp, #16
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	fffffefe 	.word	0xfffffefe

08003ccc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f7ff fdf9 	bl	80038d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b004      	add	sp, #16
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	2240      	movs	r2, #64	; 0x40
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	2204      	movs	r2, #4
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	0018      	movs	r0, r3
 8003d14:	f7ff fde6 	bl	80038e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b004      	add	sp, #16
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	0002      	movs	r2, r0
 8003d28:	1dfb      	adds	r3, r7, #7
 8003d2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d2c:	1dfb      	adds	r3, r7, #7
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b7f      	cmp	r3, #127	; 0x7f
 8003d32:	d809      	bhi.n	8003d48 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d34:	1dfb      	adds	r3, r7, #7
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	001a      	movs	r2, r3
 8003d3a:	231f      	movs	r3, #31
 8003d3c:	401a      	ands	r2, r3
 8003d3e:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <__NVIC_EnableIRQ+0x30>)
 8003d40:	2101      	movs	r1, #1
 8003d42:	4091      	lsls	r1, r2
 8003d44:	000a      	movs	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]
  }
}
 8003d48:	46c0      	nop			; (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b002      	add	sp, #8
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	e000e100 	.word	0xe000e100

08003d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d54:	b590      	push	{r4, r7, lr}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	0002      	movs	r2, r0
 8003d5c:	6039      	str	r1, [r7, #0]
 8003d5e:	1dfb      	adds	r3, r7, #7
 8003d60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d62:	1dfb      	adds	r3, r7, #7
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b7f      	cmp	r3, #127	; 0x7f
 8003d68:	d828      	bhi.n	8003dbc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d6a:	4a2f      	ldr	r2, [pc, #188]	; (8003e28 <__NVIC_SetPriority+0xd4>)
 8003d6c:	1dfb      	adds	r3, r7, #7
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	b25b      	sxtb	r3, r3
 8003d72:	089b      	lsrs	r3, r3, #2
 8003d74:	33c0      	adds	r3, #192	; 0xc0
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	589b      	ldr	r3, [r3, r2]
 8003d7a:	1dfa      	adds	r2, r7, #7
 8003d7c:	7812      	ldrb	r2, [r2, #0]
 8003d7e:	0011      	movs	r1, r2
 8003d80:	2203      	movs	r2, #3
 8003d82:	400a      	ands	r2, r1
 8003d84:	00d2      	lsls	r2, r2, #3
 8003d86:	21ff      	movs	r1, #255	; 0xff
 8003d88:	4091      	lsls	r1, r2
 8003d8a:	000a      	movs	r2, r1
 8003d8c:	43d2      	mvns	r2, r2
 8003d8e:	401a      	ands	r2, r3
 8003d90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	019b      	lsls	r3, r3, #6
 8003d96:	22ff      	movs	r2, #255	; 0xff
 8003d98:	401a      	ands	r2, r3
 8003d9a:	1dfb      	adds	r3, r7, #7
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	0018      	movs	r0, r3
 8003da0:	2303      	movs	r3, #3
 8003da2:	4003      	ands	r3, r0
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003da8:	481f      	ldr	r0, [pc, #124]	; (8003e28 <__NVIC_SetPriority+0xd4>)
 8003daa:	1dfb      	adds	r3, r7, #7
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	b25b      	sxtb	r3, r3
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	430a      	orrs	r2, r1
 8003db4:	33c0      	adds	r3, #192	; 0xc0
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003dba:	e031      	b.n	8003e20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dbc:	4a1b      	ldr	r2, [pc, #108]	; (8003e2c <__NVIC_SetPriority+0xd8>)
 8003dbe:	1dfb      	adds	r3, r7, #7
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	0019      	movs	r1, r3
 8003dc4:	230f      	movs	r3, #15
 8003dc6:	400b      	ands	r3, r1
 8003dc8:	3b08      	subs	r3, #8
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	3306      	adds	r3, #6
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	18d3      	adds	r3, r2, r3
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	1dfa      	adds	r2, r7, #7
 8003dd8:	7812      	ldrb	r2, [r2, #0]
 8003dda:	0011      	movs	r1, r2
 8003ddc:	2203      	movs	r2, #3
 8003dde:	400a      	ands	r2, r1
 8003de0:	00d2      	lsls	r2, r2, #3
 8003de2:	21ff      	movs	r1, #255	; 0xff
 8003de4:	4091      	lsls	r1, r2
 8003de6:	000a      	movs	r2, r1
 8003de8:	43d2      	mvns	r2, r2
 8003dea:	401a      	ands	r2, r3
 8003dec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	019b      	lsls	r3, r3, #6
 8003df2:	22ff      	movs	r2, #255	; 0xff
 8003df4:	401a      	ands	r2, r3
 8003df6:	1dfb      	adds	r3, r7, #7
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	4003      	ands	r3, r0
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e04:	4809      	ldr	r0, [pc, #36]	; (8003e2c <__NVIC_SetPriority+0xd8>)
 8003e06:	1dfb      	adds	r3, r7, #7
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	001c      	movs	r4, r3
 8003e0c:	230f      	movs	r3, #15
 8003e0e:	4023      	ands	r3, r4
 8003e10:	3b08      	subs	r3, #8
 8003e12:	089b      	lsrs	r3, r3, #2
 8003e14:	430a      	orrs	r2, r1
 8003e16:	3306      	adds	r3, #6
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	18c3      	adds	r3, r0, r3
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	601a      	str	r2, [r3, #0]
}
 8003e20:	46c0      	nop			; (mov r8, r8)
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b003      	add	sp, #12
 8003e26:	bd90      	pop	{r4, r7, pc}
 8003e28:	e000e100 	.word	0xe000e100
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	1e5a      	subs	r2, r3, #1
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	045b      	lsls	r3, r3, #17
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d301      	bcc.n	8003e48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e44:	2301      	movs	r3, #1
 8003e46:	e010      	b.n	8003e6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e48:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <SysTick_Config+0x44>)
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	3a01      	subs	r2, #1
 8003e4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e50:	2301      	movs	r3, #1
 8003e52:	425b      	negs	r3, r3
 8003e54:	2103      	movs	r1, #3
 8003e56:	0018      	movs	r0, r3
 8003e58:	f7ff ff7c 	bl	8003d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <SysTick_Config+0x44>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e62:	4b04      	ldr	r3, [pc, #16]	; (8003e74 <SysTick_Config+0x44>)
 8003e64:	2207      	movs	r2, #7
 8003e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b002      	add	sp, #8
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	e000e010 	.word	0xe000e010

08003e78 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	210f      	movs	r1, #15
 8003e84:	187b      	adds	r3, r7, r1
 8003e86:	1c02      	adds	r2, r0, #0
 8003e88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	187b      	adds	r3, r7, r1
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	b25b      	sxtb	r3, r3
 8003e92:	0011      	movs	r1, r2
 8003e94:	0018      	movs	r0, r3
 8003e96:	f7ff ff5d 	bl	8003d54 <__NVIC_SetPriority>
}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b004      	add	sp, #16
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	0002      	movs	r2, r0
 8003eaa:	1dfb      	adds	r3, r7, #7
 8003eac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	b25b      	sxtb	r3, r3
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7ff ff33 	bl	8003d20 <__NVIC_EnableIRQ>
}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b002      	add	sp, #8
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f7ff ffaf 	bl	8003e30 <SysTick_Config>
 8003ed2:	0003      	movs	r3, r0
}
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b002      	add	sp, #8
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e036      	b.n	8003f60 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2221      	movs	r2, #33	; 0x21
 8003ef6:	2102      	movs	r1, #2
 8003ef8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a18      	ldr	r2, [pc, #96]	; (8003f68 <HAL_DMA_Init+0x8c>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	0018      	movs	r0, r3
 8003f44:	f000 f9c4 	bl	80042d0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2221      	movs	r2, #33	; 0x21
 8003f52:	2101      	movs	r1, #1
 8003f54:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}  
 8003f60:	0018      	movs	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b004      	add	sp, #16
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	ffffc00f 	.word	0xffffc00f

08003f6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003f7a:	2317      	movs	r3, #23
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	5c9b      	ldrb	r3, [r3, r2]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_DMA_Start_IT+0x24>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e04f      	b.n	8004030 <HAL_DMA_Start_IT+0xc4>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	2101      	movs	r1, #1
 8003f96:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2221      	movs	r2, #33	; 0x21
 8003f9c:	5c9b      	ldrb	r3, [r3, r2]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d13a      	bne.n	800401a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2221      	movs	r2, #33	; 0x21
 8003fa8:	2102      	movs	r1, #2
 8003faa:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	438a      	bics	r2, r1
 8003fc0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f954 	bl	8004276 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d008      	beq.n	8003fe8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	210e      	movs	r1, #14
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	e00f      	b.n	8004008 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	210a      	movs	r1, #10
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2104      	movs	r1, #4
 8004004:	438a      	bics	r2, r1
 8004006:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2101      	movs	r1, #1
 8004014:	430a      	orrs	r2, r1
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e007      	b.n	800402a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2220      	movs	r2, #32
 800401e:	2100      	movs	r1, #0
 8004020:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004022:	2317      	movs	r3, #23
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	2202      	movs	r2, #2
 8004028:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800402a:	2317      	movs	r3, #23
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	781b      	ldrb	r3, [r3, #0]
} 
 8004030:	0018      	movs	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	b006      	add	sp, #24
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2221      	movs	r2, #33	; 0x21
 8004044:	5c9b      	ldrb	r3, [r3, r2]
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d008      	beq.n	800405e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2204      	movs	r2, #4
 8004050:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	2100      	movs	r1, #0
 8004058:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e020      	b.n	80040a0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	210e      	movs	r1, #14
 800406a:	438a      	bics	r2, r1
 800406c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2101      	movs	r1, #1
 800407a:	438a      	bics	r2, r1
 800407c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004086:	2101      	movs	r1, #1
 8004088:	4091      	lsls	r1, r2
 800408a:	000a      	movs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2221      	movs	r2, #33	; 0x21
 8004092:	2101      	movs	r1, #1
 8004094:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	2100      	movs	r1, #0
 800409c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	0018      	movs	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b002      	add	sp, #8
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b0:	210f      	movs	r1, #15
 80040b2:	187b      	adds	r3, r7, r1
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2221      	movs	r2, #33	; 0x21
 80040bc:	5c9b      	ldrb	r3, [r3, r2]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d006      	beq.n	80040d2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2204      	movs	r2, #4
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80040ca:	187b      	adds	r3, r7, r1
 80040cc:	2201      	movs	r2, #1
 80040ce:	701a      	strb	r2, [r3, #0]
 80040d0:	e028      	b.n	8004124 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	210e      	movs	r1, #14
 80040de:	438a      	bics	r2, r1
 80040e0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2101      	movs	r1, #1
 80040ee:	438a      	bics	r2, r1
 80040f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	2101      	movs	r1, #1
 80040fc:	4091      	lsls	r1, r2
 80040fe:	000a      	movs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2221      	movs	r2, #33	; 0x21
 8004106:	2101      	movs	r1, #1
 8004108:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	2100      	movs	r1, #0
 8004110:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004116:	2b00      	cmp	r3, #0
 8004118:	d004      	beq.n	8004124 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	0010      	movs	r0, r2
 8004122:	4798      	blx	r3
    } 
  }
  return status;
 8004124:	230f      	movs	r3, #15
 8004126:	18fb      	adds	r3, r7, r3
 8004128:	781b      	ldrb	r3, [r3, #0]
}
 800412a:	0018      	movs	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	b004      	add	sp, #16
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	2204      	movs	r2, #4
 8004150:	409a      	lsls	r2, r3
 8004152:	0013      	movs	r3, r2
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4013      	ands	r3, r2
 8004158:	d024      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x72>
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2204      	movs	r2, #4
 800415e:	4013      	ands	r3, r2
 8004160:	d020      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2220      	movs	r2, #32
 800416a:	4013      	ands	r3, r2
 800416c:	d107      	bne.n	800417e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2104      	movs	r1, #4
 800417a:	438a      	bics	r2, r1
 800417c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	2104      	movs	r1, #4
 8004188:	4091      	lsls	r1, r2
 800418a:	000a      	movs	r2, r1
 800418c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d100      	bne.n	8004198 <HAL_DMA_IRQHandler+0x66>
 8004196:	e06a      	b.n	800426e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	0010      	movs	r0, r2
 80041a0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80041a2:	e064      	b.n	800426e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	2202      	movs	r2, #2
 80041aa:	409a      	lsls	r2, r3
 80041ac:	0013      	movs	r3, r2
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4013      	ands	r3, r2
 80041b2:	d02b      	beq.n	800420c <HAL_DMA_IRQHandler+0xda>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2202      	movs	r2, #2
 80041b8:	4013      	ands	r3, r2
 80041ba:	d027      	beq.n	800420c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2220      	movs	r2, #32
 80041c4:	4013      	ands	r3, r2
 80041c6:	d10b      	bne.n	80041e0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	210a      	movs	r1, #10
 80041d4:	438a      	bics	r2, r1
 80041d6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2221      	movs	r2, #33	; 0x21
 80041dc:	2101      	movs	r1, #1
 80041de:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e8:	2102      	movs	r1, #2
 80041ea:	4091      	lsls	r1, r2
 80041ec:	000a      	movs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	2100      	movs	r1, #0
 80041f6:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d036      	beq.n	800426e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	0010      	movs	r0, r2
 8004208:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800420a:	e030      	b.n	800426e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	2208      	movs	r2, #8
 8004212:	409a      	lsls	r2, r3
 8004214:	0013      	movs	r3, r2
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4013      	ands	r3, r2
 800421a:	d028      	beq.n	800426e <HAL_DMA_IRQHandler+0x13c>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2208      	movs	r2, #8
 8004220:	4013      	ands	r3, r2
 8004222:	d024      	beq.n	800426e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	210e      	movs	r1, #14
 8004230:	438a      	bics	r2, r1
 8004232:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423c:	2101      	movs	r1, #1
 800423e:	4091      	lsls	r1, r2
 8004240:	000a      	movs	r2, r1
 8004242:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2221      	movs	r2, #33	; 0x21
 800424e:	2101      	movs	r1, #1
 8004250:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	2100      	movs	r1, #0
 8004258:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	0010      	movs	r0, r2
 800426a:	4798      	blx	r3
    }
   }
}  
 800426c:	e7ff      	b.n	800426e <HAL_DMA_IRQHandler+0x13c>
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	46bd      	mov	sp, r7
 8004272:	b004      	add	sp, #16
 8004274:	bd80      	pop	{r7, pc}

08004276 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428c:	2101      	movs	r1, #1
 800428e:	4091      	lsls	r1, r2
 8004290:	000a      	movs	r2, r1
 8004292:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d108      	bne.n	80042b6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042b4:	e007      	b.n	80042c6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	60da      	str	r2, [r3, #12]
}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b004      	add	sp, #16
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a08      	ldr	r2, [pc, #32]	; (8004300 <DMA_CalcBaseAndBitshift+0x30>)
 80042de:	4694      	mov	ip, r2
 80042e0:	4463      	add	r3, ip
 80042e2:	2114      	movs	r1, #20
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7fb ff2b 	bl	8000140 <__udivsi3>
 80042ea:	0003      	movs	r3, r0
 80042ec:	009a      	lsls	r2, r3, #2
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a03      	ldr	r2, [pc, #12]	; (8004304 <DMA_CalcBaseAndBitshift+0x34>)
 80042f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80042f8:	46c0      	nop			; (mov r8, r8)
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b002      	add	sp, #8
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	bffdfff8 	.word	0xbffdfff8
 8004304:	40020000 	.word	0x40020000

08004308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004316:	e14f      	b.n	80045b8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2101      	movs	r1, #1
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4091      	lsls	r1, r2
 8004322:	000a      	movs	r2, r1
 8004324:	4013      	ands	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d100      	bne.n	8004330 <HAL_GPIO_Init+0x28>
 800432e:	e140      	b.n	80045b2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2203      	movs	r2, #3
 8004336:	4013      	ands	r3, r2
 8004338:	2b01      	cmp	r3, #1
 800433a:	d005      	beq.n	8004348 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2203      	movs	r2, #3
 8004342:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004344:	2b02      	cmp	r3, #2
 8004346:	d130      	bne.n	80043aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	2203      	movs	r2, #3
 8004354:	409a      	lsls	r2, r3
 8004356:	0013      	movs	r3, r2
 8004358:	43da      	mvns	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4013      	ands	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	409a      	lsls	r2, r3
 800436a:	0013      	movs	r3, r2
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800437e:	2201      	movs	r2, #1
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	409a      	lsls	r2, r3
 8004384:	0013      	movs	r3, r2
 8004386:	43da      	mvns	r2, r3
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4013      	ands	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	091b      	lsrs	r3, r3, #4
 8004394:	2201      	movs	r2, #1
 8004396:	401a      	ands	r2, r3
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	409a      	lsls	r2, r3
 800439c:	0013      	movs	r3, r2
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2203      	movs	r2, #3
 80043b0:	4013      	ands	r3, r2
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d017      	beq.n	80043e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	2203      	movs	r2, #3
 80043c2:	409a      	lsls	r2, r3
 80043c4:	0013      	movs	r3, r2
 80043c6:	43da      	mvns	r2, r3
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	4013      	ands	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	409a      	lsls	r2, r3
 80043d8:	0013      	movs	r3, r2
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2203      	movs	r2, #3
 80043ec:	4013      	ands	r3, r2
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d123      	bne.n	800443a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	08da      	lsrs	r2, r3, #3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3208      	adds	r2, #8
 80043fa:	0092      	lsls	r2, r2, #2
 80043fc:	58d3      	ldr	r3, [r2, r3]
 80043fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2207      	movs	r2, #7
 8004404:	4013      	ands	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	220f      	movs	r2, #15
 800440a:	409a      	lsls	r2, r3
 800440c:	0013      	movs	r3, r2
 800440e:	43da      	mvns	r2, r3
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4013      	ands	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2107      	movs	r1, #7
 800441e:	400b      	ands	r3, r1
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	409a      	lsls	r2, r3
 8004424:	0013      	movs	r3, r2
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	08da      	lsrs	r2, r3, #3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3208      	adds	r2, #8
 8004434:	0092      	lsls	r2, r2, #2
 8004436:	6939      	ldr	r1, [r7, #16]
 8004438:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	2203      	movs	r2, #3
 8004446:	409a      	lsls	r2, r3
 8004448:	0013      	movs	r3, r2
 800444a:	43da      	mvns	r2, r3
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4013      	ands	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2203      	movs	r2, #3
 8004458:	401a      	ands	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	409a      	lsls	r2, r3
 8004460:	0013      	movs	r3, r2
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	23c0      	movs	r3, #192	; 0xc0
 8004474:	029b      	lsls	r3, r3, #10
 8004476:	4013      	ands	r3, r2
 8004478:	d100      	bne.n	800447c <HAL_GPIO_Init+0x174>
 800447a:	e09a      	b.n	80045b2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800447c:	4b54      	ldr	r3, [pc, #336]	; (80045d0 <HAL_GPIO_Init+0x2c8>)
 800447e:	699a      	ldr	r2, [r3, #24]
 8004480:	4b53      	ldr	r3, [pc, #332]	; (80045d0 <HAL_GPIO_Init+0x2c8>)
 8004482:	2101      	movs	r1, #1
 8004484:	430a      	orrs	r2, r1
 8004486:	619a      	str	r2, [r3, #24]
 8004488:	4b51      	ldr	r3, [pc, #324]	; (80045d0 <HAL_GPIO_Init+0x2c8>)
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	2201      	movs	r2, #1
 800448e:	4013      	ands	r3, r2
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004494:	4a4f      	ldr	r2, [pc, #316]	; (80045d4 <HAL_GPIO_Init+0x2cc>)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	089b      	lsrs	r3, r3, #2
 800449a:	3302      	adds	r3, #2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	589b      	ldr	r3, [r3, r2]
 80044a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2203      	movs	r2, #3
 80044a6:	4013      	ands	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	220f      	movs	r2, #15
 80044ac:	409a      	lsls	r2, r3
 80044ae:	0013      	movs	r3, r2
 80044b0:	43da      	mvns	r2, r3
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	2390      	movs	r3, #144	; 0x90
 80044bc:	05db      	lsls	r3, r3, #23
 80044be:	429a      	cmp	r2, r3
 80044c0:	d013      	beq.n	80044ea <HAL_GPIO_Init+0x1e2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a44      	ldr	r2, [pc, #272]	; (80045d8 <HAL_GPIO_Init+0x2d0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00d      	beq.n	80044e6 <HAL_GPIO_Init+0x1de>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a43      	ldr	r2, [pc, #268]	; (80045dc <HAL_GPIO_Init+0x2d4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <HAL_GPIO_Init+0x1da>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a42      	ldr	r2, [pc, #264]	; (80045e0 <HAL_GPIO_Init+0x2d8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <HAL_GPIO_Init+0x1d6>
 80044da:	2303      	movs	r3, #3
 80044dc:	e006      	b.n	80044ec <HAL_GPIO_Init+0x1e4>
 80044de:	2305      	movs	r3, #5
 80044e0:	e004      	b.n	80044ec <HAL_GPIO_Init+0x1e4>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e002      	b.n	80044ec <HAL_GPIO_Init+0x1e4>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_GPIO_Init+0x1e4>
 80044ea:	2300      	movs	r3, #0
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	2103      	movs	r1, #3
 80044f0:	400a      	ands	r2, r1
 80044f2:	0092      	lsls	r2, r2, #2
 80044f4:	4093      	lsls	r3, r2
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044fc:	4935      	ldr	r1, [pc, #212]	; (80045d4 <HAL_GPIO_Init+0x2cc>)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	089b      	lsrs	r3, r3, #2
 8004502:	3302      	adds	r3, #2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800450a:	4b36      	ldr	r3, [pc, #216]	; (80045e4 <HAL_GPIO_Init+0x2dc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	43da      	mvns	r2, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4013      	ands	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	025b      	lsls	r3, r3, #9
 8004522:	4013      	ands	r3, r2
 8004524:	d003      	beq.n	800452e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800452e:	4b2d      	ldr	r3, [pc, #180]	; (80045e4 <HAL_GPIO_Init+0x2dc>)
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004534:	4b2b      	ldr	r3, [pc, #172]	; (80045e4 <HAL_GPIO_Init+0x2dc>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	43da      	mvns	r2, r3
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4013      	ands	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	029b      	lsls	r3, r3, #10
 800454c:	4013      	ands	r3, r2
 800454e:	d003      	beq.n	8004558 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004558:	4b22      	ldr	r3, [pc, #136]	; (80045e4 <HAL_GPIO_Init+0x2dc>)
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800455e:	4b21      	ldr	r3, [pc, #132]	; (80045e4 <HAL_GPIO_Init+0x2dc>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	43da      	mvns	r2, r3
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4013      	ands	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	2380      	movs	r3, #128	; 0x80
 8004574:	035b      	lsls	r3, r3, #13
 8004576:	4013      	ands	r3, r2
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004582:	4b18      	ldr	r3, [pc, #96]	; (80045e4 <HAL_GPIO_Init+0x2dc>)
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004588:	4b16      	ldr	r3, [pc, #88]	; (80045e4 <HAL_GPIO_Init+0x2dc>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	43da      	mvns	r2, r3
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4013      	ands	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	2380      	movs	r3, #128	; 0x80
 800459e:	039b      	lsls	r3, r3, #14
 80045a0:	4013      	ands	r3, r2
 80045a2:	d003      	beq.n	80045ac <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80045ac:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <HAL_GPIO_Init+0x2dc>)
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	3301      	adds	r3, #1
 80045b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	40da      	lsrs	r2, r3
 80045c0:	1e13      	subs	r3, r2, #0
 80045c2:	d000      	beq.n	80045c6 <HAL_GPIO_Init+0x2be>
 80045c4:	e6a8      	b.n	8004318 <HAL_GPIO_Init+0x10>
  } 
}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b006      	add	sp, #24
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40021000 	.word	0x40021000
 80045d4:	40010000 	.word	0x40010000
 80045d8:	48000400 	.word	0x48000400
 80045dc:	48000800 	.word	0x48000800
 80045e0:	48000c00 	.word	0x48000c00
 80045e4:	40010400 	.word	0x40010400

080045e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	000a      	movs	r2, r1
 80045f2:	1cbb      	adds	r3, r7, #2
 80045f4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	1cba      	adds	r2, r7, #2
 80045fc:	8812      	ldrh	r2, [r2, #0]
 80045fe:	4013      	ands	r3, r2
 8004600:	d004      	beq.n	800460c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004602:	230f      	movs	r3, #15
 8004604:	18fb      	adds	r3, r7, r3
 8004606:	2201      	movs	r2, #1
 8004608:	701a      	strb	r2, [r3, #0]
 800460a:	e003      	b.n	8004614 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800460c:	230f      	movs	r3, #15
 800460e:	18fb      	adds	r3, r7, r3
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004614:	230f      	movs	r3, #15
 8004616:	18fb      	adds	r3, r7, r3
 8004618:	781b      	ldrb	r3, [r3, #0]
  }
 800461a:	0018      	movs	r0, r3
 800461c:	46bd      	mov	sp, r7
 800461e:	b004      	add	sp, #16
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	0008      	movs	r0, r1
 800462c:	0011      	movs	r1, r2
 800462e:	1cbb      	adds	r3, r7, #2
 8004630:	1c02      	adds	r2, r0, #0
 8004632:	801a      	strh	r2, [r3, #0]
 8004634:	1c7b      	adds	r3, r7, #1
 8004636:	1c0a      	adds	r2, r1, #0
 8004638:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800463a:	1c7b      	adds	r3, r7, #1
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d004      	beq.n	800464c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004642:	1cbb      	adds	r3, r7, #2
 8004644:	881a      	ldrh	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800464a:	e003      	b.n	8004654 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800464c:	1cbb      	adds	r3, r7, #2
 800464e:	881a      	ldrh	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004654:	46c0      	nop			; (mov r8, r8)
 8004656:	46bd      	mov	sp, r7
 8004658:	b002      	add	sp, #8
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	000a      	movs	r2, r1
 8004666:	1cbb      	adds	r3, r7, #2
 8004668:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004670:	1cbb      	adds	r3, r7, #2
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4013      	ands	r3, r2
 8004678:	041a      	lsls	r2, r3, #16
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	43db      	mvns	r3, r3
 800467e:	1cb9      	adds	r1, r7, #2
 8004680:	8809      	ldrh	r1, [r1, #0]
 8004682:	400b      	ands	r3, r1
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	619a      	str	r2, [r3, #24]
}
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	46bd      	mov	sp, r7
 800468e:	b004      	add	sp, #16
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e301      	b.n	8004caa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2201      	movs	r2, #1
 80046ac:	4013      	ands	r3, r2
 80046ae:	d100      	bne.n	80046b2 <HAL_RCC_OscConfig+0x1e>
 80046b0:	e08d      	b.n	80047ce <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80046b2:	4bc3      	ldr	r3, [pc, #780]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	220c      	movs	r2, #12
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d00e      	beq.n	80046dc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046be:	4bc0      	ldr	r3, [pc, #768]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	220c      	movs	r2, #12
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d116      	bne.n	80046f8 <HAL_RCC_OscConfig+0x64>
 80046ca:	4bbd      	ldr	r3, [pc, #756]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	025b      	lsls	r3, r3, #9
 80046d2:	401a      	ands	r2, r3
 80046d4:	2380      	movs	r3, #128	; 0x80
 80046d6:	025b      	lsls	r3, r3, #9
 80046d8:	429a      	cmp	r2, r3
 80046da:	d10d      	bne.n	80046f8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046dc:	4bb8      	ldr	r3, [pc, #736]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	2380      	movs	r3, #128	; 0x80
 80046e2:	029b      	lsls	r3, r3, #10
 80046e4:	4013      	ands	r3, r2
 80046e6:	d100      	bne.n	80046ea <HAL_RCC_OscConfig+0x56>
 80046e8:	e070      	b.n	80047cc <HAL_RCC_OscConfig+0x138>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d000      	beq.n	80046f4 <HAL_RCC_OscConfig+0x60>
 80046f2:	e06b      	b.n	80047cc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e2d8      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d107      	bne.n	8004710 <HAL_RCC_OscConfig+0x7c>
 8004700:	4baf      	ldr	r3, [pc, #700]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	4bae      	ldr	r3, [pc, #696]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 8004706:	2180      	movs	r1, #128	; 0x80
 8004708:	0249      	lsls	r1, r1, #9
 800470a:	430a      	orrs	r2, r1
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e02f      	b.n	8004770 <HAL_RCC_OscConfig+0xdc>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10c      	bne.n	8004732 <HAL_RCC_OscConfig+0x9e>
 8004718:	4ba9      	ldr	r3, [pc, #676]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	4ba8      	ldr	r3, [pc, #672]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 800471e:	49a9      	ldr	r1, [pc, #676]	; (80049c4 <HAL_RCC_OscConfig+0x330>)
 8004720:	400a      	ands	r2, r1
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	4ba6      	ldr	r3, [pc, #664]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	4ba5      	ldr	r3, [pc, #660]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 800472a:	49a7      	ldr	r1, [pc, #668]	; (80049c8 <HAL_RCC_OscConfig+0x334>)
 800472c:	400a      	ands	r2, r1
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	e01e      	b.n	8004770 <HAL_RCC_OscConfig+0xdc>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b05      	cmp	r3, #5
 8004738:	d10e      	bne.n	8004758 <HAL_RCC_OscConfig+0xc4>
 800473a:	4ba1      	ldr	r3, [pc, #644]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4ba0      	ldr	r3, [pc, #640]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 8004740:	2180      	movs	r1, #128	; 0x80
 8004742:	02c9      	lsls	r1, r1, #11
 8004744:	430a      	orrs	r2, r1
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	4b9d      	ldr	r3, [pc, #628]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	4b9c      	ldr	r3, [pc, #624]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 800474e:	2180      	movs	r1, #128	; 0x80
 8004750:	0249      	lsls	r1, r1, #9
 8004752:	430a      	orrs	r2, r1
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	e00b      	b.n	8004770 <HAL_RCC_OscConfig+0xdc>
 8004758:	4b99      	ldr	r3, [pc, #612]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4b98      	ldr	r3, [pc, #608]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 800475e:	4999      	ldr	r1, [pc, #612]	; (80049c4 <HAL_RCC_OscConfig+0x330>)
 8004760:	400a      	ands	r2, r1
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	4b96      	ldr	r3, [pc, #600]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b95      	ldr	r3, [pc, #596]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 800476a:	4997      	ldr	r1, [pc, #604]	; (80049c8 <HAL_RCC_OscConfig+0x334>)
 800476c:	400a      	ands	r2, r1
 800476e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d014      	beq.n	80047a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fe fed8 	bl	800352c <HAL_GetTick>
 800477c:	0003      	movs	r3, r0
 800477e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004782:	f7fe fed3 	bl	800352c <HAL_GetTick>
 8004786:	0002      	movs	r2, r0
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b64      	cmp	r3, #100	; 0x64
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e28a      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004794:	4b8a      	ldr	r3, [pc, #552]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	2380      	movs	r3, #128	; 0x80
 800479a:	029b      	lsls	r3, r3, #10
 800479c:	4013      	ands	r3, r2
 800479e:	d0f0      	beq.n	8004782 <HAL_RCC_OscConfig+0xee>
 80047a0:	e015      	b.n	80047ce <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a2:	f7fe fec3 	bl	800352c <HAL_GetTick>
 80047a6:	0003      	movs	r3, r0
 80047a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ac:	f7fe febe 	bl	800352c <HAL_GetTick>
 80047b0:	0002      	movs	r2, r0
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	; 0x64
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e275      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047be:	4b80      	ldr	r3, [pc, #512]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	2380      	movs	r3, #128	; 0x80
 80047c4:	029b      	lsls	r3, r3, #10
 80047c6:	4013      	ands	r3, r2
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x118>
 80047ca:	e000      	b.n	80047ce <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2202      	movs	r2, #2
 80047d4:	4013      	ands	r3, r2
 80047d6:	d100      	bne.n	80047da <HAL_RCC_OscConfig+0x146>
 80047d8:	e069      	b.n	80048ae <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80047da:	4b79      	ldr	r3, [pc, #484]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	220c      	movs	r2, #12
 80047e0:	4013      	ands	r3, r2
 80047e2:	d00b      	beq.n	80047fc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80047e4:	4b76      	ldr	r3, [pc, #472]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	220c      	movs	r2, #12
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d11c      	bne.n	800482a <HAL_RCC_OscConfig+0x196>
 80047f0:	4b73      	ldr	r3, [pc, #460]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	025b      	lsls	r3, r3, #9
 80047f8:	4013      	ands	r3, r2
 80047fa:	d116      	bne.n	800482a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fc:	4b70      	ldr	r3, [pc, #448]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2202      	movs	r2, #2
 8004802:	4013      	ands	r3, r2
 8004804:	d005      	beq.n	8004812 <HAL_RCC_OscConfig+0x17e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d001      	beq.n	8004812 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e24b      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004812:	4b6b      	ldr	r3, [pc, #428]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	22f8      	movs	r2, #248	; 0xf8
 8004818:	4393      	bics	r3, r2
 800481a:	0019      	movs	r1, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	00da      	lsls	r2, r3, #3
 8004822:	4b67      	ldr	r3, [pc, #412]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004828:	e041      	b.n	80048ae <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d024      	beq.n	800487c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004832:	4b63      	ldr	r3, [pc, #396]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4b62      	ldr	r3, [pc, #392]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 8004838:	2101      	movs	r1, #1
 800483a:	430a      	orrs	r2, r1
 800483c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483e:	f7fe fe75 	bl	800352c <HAL_GetTick>
 8004842:	0003      	movs	r3, r0
 8004844:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004848:	f7fe fe70 	bl	800352c <HAL_GetTick>
 800484c:	0002      	movs	r2, r0
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e227      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485a:	4b59      	ldr	r3, [pc, #356]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2202      	movs	r2, #2
 8004860:	4013      	ands	r3, r2
 8004862:	d0f1      	beq.n	8004848 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004864:	4b56      	ldr	r3, [pc, #344]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	22f8      	movs	r2, #248	; 0xf8
 800486a:	4393      	bics	r3, r2
 800486c:	0019      	movs	r1, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	00da      	lsls	r2, r3, #3
 8004874:	4b52      	ldr	r3, [pc, #328]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 8004876:	430a      	orrs	r2, r1
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e018      	b.n	80048ae <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800487c:	4b50      	ldr	r3, [pc, #320]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	4b4f      	ldr	r3, [pc, #316]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 8004882:	2101      	movs	r1, #1
 8004884:	438a      	bics	r2, r1
 8004886:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004888:	f7fe fe50 	bl	800352c <HAL_GetTick>
 800488c:	0003      	movs	r3, r0
 800488e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004892:	f7fe fe4b 	bl	800352c <HAL_GetTick>
 8004896:	0002      	movs	r2, r0
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e202      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a4:	4b46      	ldr	r3, [pc, #280]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2202      	movs	r2, #2
 80048aa:	4013      	ands	r3, r2
 80048ac:	d1f1      	bne.n	8004892 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2208      	movs	r2, #8
 80048b4:	4013      	ands	r3, r2
 80048b6:	d036      	beq.n	8004926 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d019      	beq.n	80048f4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048c0:	4b3f      	ldr	r3, [pc, #252]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80048c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048c4:	4b3e      	ldr	r3, [pc, #248]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80048c6:	2101      	movs	r1, #1
 80048c8:	430a      	orrs	r2, r1
 80048ca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048cc:	f7fe fe2e 	bl	800352c <HAL_GetTick>
 80048d0:	0003      	movs	r3, r0
 80048d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d6:	f7fe fe29 	bl	800352c <HAL_GetTick>
 80048da:	0002      	movs	r2, r0
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e1e0      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e8:	4b35      	ldr	r3, [pc, #212]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	2202      	movs	r2, #2
 80048ee:	4013      	ands	r3, r2
 80048f0:	d0f1      	beq.n	80048d6 <HAL_RCC_OscConfig+0x242>
 80048f2:	e018      	b.n	8004926 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f4:	4b32      	ldr	r3, [pc, #200]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80048f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f8:	4b31      	ldr	r3, [pc, #196]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80048fa:	2101      	movs	r1, #1
 80048fc:	438a      	bics	r2, r1
 80048fe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004900:	f7fe fe14 	bl	800352c <HAL_GetTick>
 8004904:	0003      	movs	r3, r0
 8004906:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800490a:	f7fe fe0f 	bl	800352c <HAL_GetTick>
 800490e:	0002      	movs	r2, r0
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e1c6      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800491c:	4b28      	ldr	r3, [pc, #160]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	2202      	movs	r2, #2
 8004922:	4013      	ands	r3, r2
 8004924:	d1f1      	bne.n	800490a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2204      	movs	r2, #4
 800492c:	4013      	ands	r3, r2
 800492e:	d100      	bne.n	8004932 <HAL_RCC_OscConfig+0x29e>
 8004930:	e0b4      	b.n	8004a9c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004932:	201f      	movs	r0, #31
 8004934:	183b      	adds	r3, r7, r0
 8004936:	2200      	movs	r2, #0
 8004938:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800493a:	4b21      	ldr	r3, [pc, #132]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 800493c:	69da      	ldr	r2, [r3, #28]
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	055b      	lsls	r3, r3, #21
 8004942:	4013      	ands	r3, r2
 8004944:	d110      	bne.n	8004968 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004946:	4b1e      	ldr	r3, [pc, #120]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 8004948:	69da      	ldr	r2, [r3, #28]
 800494a:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 800494c:	2180      	movs	r1, #128	; 0x80
 800494e:	0549      	lsls	r1, r1, #21
 8004950:	430a      	orrs	r2, r1
 8004952:	61da      	str	r2, [r3, #28]
 8004954:	4b1a      	ldr	r3, [pc, #104]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 8004956:	69da      	ldr	r2, [r3, #28]
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	055b      	lsls	r3, r3, #21
 800495c:	4013      	ands	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004962:	183b      	adds	r3, r7, r0
 8004964:	2201      	movs	r2, #1
 8004966:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004968:	4b18      	ldr	r3, [pc, #96]	; (80049cc <HAL_RCC_OscConfig+0x338>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	4013      	ands	r3, r2
 8004972:	d11a      	bne.n	80049aa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004974:	4b15      	ldr	r3, [pc, #84]	; (80049cc <HAL_RCC_OscConfig+0x338>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	4b14      	ldr	r3, [pc, #80]	; (80049cc <HAL_RCC_OscConfig+0x338>)
 800497a:	2180      	movs	r1, #128	; 0x80
 800497c:	0049      	lsls	r1, r1, #1
 800497e:	430a      	orrs	r2, r1
 8004980:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004982:	f7fe fdd3 	bl	800352c <HAL_GetTick>
 8004986:	0003      	movs	r3, r0
 8004988:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498c:	f7fe fdce 	bl	800352c <HAL_GetTick>
 8004990:	0002      	movs	r2, r0
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b64      	cmp	r3, #100	; 0x64
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e185      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499e:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_RCC_OscConfig+0x338>)
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	2380      	movs	r3, #128	; 0x80
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	4013      	ands	r3, r2
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d10e      	bne.n	80049d0 <HAL_RCC_OscConfig+0x33c>
 80049b2:	4b03      	ldr	r3, [pc, #12]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80049b4:	6a1a      	ldr	r2, [r3, #32]
 80049b6:	4b02      	ldr	r3, [pc, #8]	; (80049c0 <HAL_RCC_OscConfig+0x32c>)
 80049b8:	2101      	movs	r1, #1
 80049ba:	430a      	orrs	r2, r1
 80049bc:	621a      	str	r2, [r3, #32]
 80049be:	e035      	b.n	8004a2c <HAL_RCC_OscConfig+0x398>
 80049c0:	40021000 	.word	0x40021000
 80049c4:	fffeffff 	.word	0xfffeffff
 80049c8:	fffbffff 	.word	0xfffbffff
 80049cc:	40007000 	.word	0x40007000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10c      	bne.n	80049f2 <HAL_RCC_OscConfig+0x35e>
 80049d8:	4bb6      	ldr	r3, [pc, #728]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 80049da:	6a1a      	ldr	r2, [r3, #32]
 80049dc:	4bb5      	ldr	r3, [pc, #724]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 80049de:	2101      	movs	r1, #1
 80049e0:	438a      	bics	r2, r1
 80049e2:	621a      	str	r2, [r3, #32]
 80049e4:	4bb3      	ldr	r3, [pc, #716]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 80049e6:	6a1a      	ldr	r2, [r3, #32]
 80049e8:	4bb2      	ldr	r3, [pc, #712]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 80049ea:	2104      	movs	r1, #4
 80049ec:	438a      	bics	r2, r1
 80049ee:	621a      	str	r2, [r3, #32]
 80049f0:	e01c      	b.n	8004a2c <HAL_RCC_OscConfig+0x398>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b05      	cmp	r3, #5
 80049f8:	d10c      	bne.n	8004a14 <HAL_RCC_OscConfig+0x380>
 80049fa:	4bae      	ldr	r3, [pc, #696]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 80049fc:	6a1a      	ldr	r2, [r3, #32]
 80049fe:	4bad      	ldr	r3, [pc, #692]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004a00:	2104      	movs	r1, #4
 8004a02:	430a      	orrs	r2, r1
 8004a04:	621a      	str	r2, [r3, #32]
 8004a06:	4bab      	ldr	r3, [pc, #684]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004a08:	6a1a      	ldr	r2, [r3, #32]
 8004a0a:	4baa      	ldr	r3, [pc, #680]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	621a      	str	r2, [r3, #32]
 8004a12:	e00b      	b.n	8004a2c <HAL_RCC_OscConfig+0x398>
 8004a14:	4ba7      	ldr	r3, [pc, #668]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004a16:	6a1a      	ldr	r2, [r3, #32]
 8004a18:	4ba6      	ldr	r3, [pc, #664]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	438a      	bics	r2, r1
 8004a1e:	621a      	str	r2, [r3, #32]
 8004a20:	4ba4      	ldr	r3, [pc, #656]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004a22:	6a1a      	ldr	r2, [r3, #32]
 8004a24:	4ba3      	ldr	r3, [pc, #652]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004a26:	2104      	movs	r1, #4
 8004a28:	438a      	bics	r2, r1
 8004a2a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d014      	beq.n	8004a5e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a34:	f7fe fd7a 	bl	800352c <HAL_GetTick>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3c:	e009      	b.n	8004a52 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a3e:	f7fe fd75 	bl	800352c <HAL_GetTick>
 8004a42:	0002      	movs	r2, r0
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	4a9b      	ldr	r2, [pc, #620]	; (8004cb8 <HAL_RCC_OscConfig+0x624>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e12b      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a52:	4b98      	ldr	r3, [pc, #608]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	2202      	movs	r2, #2
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0x3aa>
 8004a5c:	e013      	b.n	8004a86 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a5e:	f7fe fd65 	bl	800352c <HAL_GetTick>
 8004a62:	0003      	movs	r3, r0
 8004a64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a66:	e009      	b.n	8004a7c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a68:	f7fe fd60 	bl	800352c <HAL_GetTick>
 8004a6c:	0002      	movs	r2, r0
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	4a91      	ldr	r2, [pc, #580]	; (8004cb8 <HAL_RCC_OscConfig+0x624>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e116      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7c:	4b8d      	ldr	r3, [pc, #564]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	2202      	movs	r2, #2
 8004a82:	4013      	ands	r3, r2
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a86:	231f      	movs	r3, #31
 8004a88:	18fb      	adds	r3, r7, r3
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d105      	bne.n	8004a9c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a90:	4b88      	ldr	r3, [pc, #544]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	4b87      	ldr	r3, [pc, #540]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004a96:	4989      	ldr	r1, [pc, #548]	; (8004cbc <HAL_RCC_OscConfig+0x628>)
 8004a98:	400a      	ands	r2, r1
 8004a9a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2210      	movs	r2, #16
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d063      	beq.n	8004b6e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d12a      	bne.n	8004b04 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004aae:	4b81      	ldr	r3, [pc, #516]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ab2:	4b80      	ldr	r3, [pc, #512]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004ab4:	2104      	movs	r1, #4
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004aba:	4b7e      	ldr	r3, [pc, #504]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004abe:	4b7d      	ldr	r3, [pc, #500]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac6:	f7fe fd31 	bl	800352c <HAL_GetTick>
 8004aca:	0003      	movs	r3, r0
 8004acc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004ad0:	f7fe fd2c 	bl	800352c <HAL_GetTick>
 8004ad4:	0002      	movs	r2, r0
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e0e3      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004ae2:	4b74      	ldr	r3, [pc, #464]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d0f1      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004aec:	4b71      	ldr	r3, [pc, #452]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af0:	22f8      	movs	r2, #248	; 0xf8
 8004af2:	4393      	bics	r3, r2
 8004af4:	0019      	movs	r1, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	00da      	lsls	r2, r3, #3
 8004afc:	4b6d      	ldr	r3, [pc, #436]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004afe:	430a      	orrs	r2, r1
 8004b00:	635a      	str	r2, [r3, #52]	; 0x34
 8004b02:	e034      	b.n	8004b6e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	3305      	adds	r3, #5
 8004b0a:	d111      	bne.n	8004b30 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004b0c:	4b69      	ldr	r3, [pc, #420]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b10:	4b68      	ldr	r3, [pc, #416]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004b12:	2104      	movs	r1, #4
 8004b14:	438a      	bics	r2, r1
 8004b16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004b18:	4b66      	ldr	r3, [pc, #408]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1c:	22f8      	movs	r2, #248	; 0xf8
 8004b1e:	4393      	bics	r3, r2
 8004b20:	0019      	movs	r1, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	00da      	lsls	r2, r3, #3
 8004b28:	4b62      	ldr	r3, [pc, #392]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	635a      	str	r2, [r3, #52]	; 0x34
 8004b2e:	e01e      	b.n	8004b6e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004b30:	4b60      	ldr	r3, [pc, #384]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b34:	4b5f      	ldr	r3, [pc, #380]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004b36:	2104      	movs	r1, #4
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004b3c:	4b5d      	ldr	r3, [pc, #372]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b40:	4b5c      	ldr	r3, [pc, #368]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004b42:	2101      	movs	r1, #1
 8004b44:	438a      	bics	r2, r1
 8004b46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b48:	f7fe fcf0 	bl	800352c <HAL_GetTick>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004b52:	f7fe fceb 	bl	800352c <HAL_GetTick>
 8004b56:	0002      	movs	r2, r0
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e0a2      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004b64:	4b53      	ldr	r3, [pc, #332]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b68:	2202      	movs	r2, #2
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d1f1      	bne.n	8004b52 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d100      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4e4>
 8004b76:	e097      	b.n	8004ca8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b78:	4b4e      	ldr	r3, [pc, #312]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	220c      	movs	r2, #12
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d100      	bne.n	8004b86 <HAL_RCC_OscConfig+0x4f2>
 8004b84:	e06b      	b.n	8004c5e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d14c      	bne.n	8004c28 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8e:	4b49      	ldr	r3, [pc, #292]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4b48      	ldr	r3, [pc, #288]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004b94:	494a      	ldr	r1, [pc, #296]	; (8004cc0 <HAL_RCC_OscConfig+0x62c>)
 8004b96:	400a      	ands	r2, r1
 8004b98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9a:	f7fe fcc7 	bl	800352c <HAL_GetTick>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7fe fcc2 	bl	800352c <HAL_GetTick>
 8004ba8:	0002      	movs	r2, r0
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e079      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bb6:	4b3f      	ldr	r3, [pc, #252]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	049b      	lsls	r3, r3, #18
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bc2:	4b3c      	ldr	r3, [pc, #240]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	220f      	movs	r2, #15
 8004bc8:	4393      	bics	r3, r2
 8004bca:	0019      	movs	r1, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd0:	4b38      	ldr	r3, [pc, #224]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bd6:	4b37      	ldr	r3, [pc, #220]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4a3a      	ldr	r2, [pc, #232]	; (8004cc4 <HAL_RCC_OscConfig+0x630>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	0019      	movs	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	431a      	orrs	r2, r3
 8004bea:	4b32      	ldr	r3, [pc, #200]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004bec:	430a      	orrs	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bf0:	4b30      	ldr	r3, [pc, #192]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b2f      	ldr	r3, [pc, #188]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004bf6:	2180      	movs	r1, #128	; 0x80
 8004bf8:	0449      	lsls	r1, r1, #17
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfe:	f7fe fc95 	bl	800352c <HAL_GetTick>
 8004c02:	0003      	movs	r3, r0
 8004c04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c08:	f7fe fc90 	bl	800352c <HAL_GetTick>
 8004c0c:	0002      	movs	r2, r0
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e047      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c1a:	4b26      	ldr	r3, [pc, #152]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	049b      	lsls	r3, r3, #18
 8004c22:	4013      	ands	r3, r2
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0x574>
 8004c26:	e03f      	b.n	8004ca8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c28:	4b22      	ldr	r3, [pc, #136]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4b21      	ldr	r3, [pc, #132]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004c2e:	4924      	ldr	r1, [pc, #144]	; (8004cc0 <HAL_RCC_OscConfig+0x62c>)
 8004c30:	400a      	ands	r2, r1
 8004c32:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c34:	f7fe fc7a 	bl	800352c <HAL_GetTick>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c3e:	f7fe fc75 	bl	800352c <HAL_GetTick>
 8004c42:	0002      	movs	r2, r0
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e02c      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c50:	4b18      	ldr	r3, [pc, #96]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	049b      	lsls	r3, r3, #18
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d1f0      	bne.n	8004c3e <HAL_RCC_OscConfig+0x5aa>
 8004c5c:	e024      	b.n	8004ca8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e01f      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004c70:	4b10      	ldr	r3, [pc, #64]	; (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	2380      	movs	r3, #128	; 0x80
 8004c7a:	025b      	lsls	r3, r3, #9
 8004c7c:	401a      	ands	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d10e      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	220f      	movs	r2, #15
 8004c8a:	401a      	ands	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d107      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	23f0      	movs	r3, #240	; 0xf0
 8004c98:	039b      	lsls	r3, r3, #14
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	0018      	movs	r0, r3
 8004cac:	46bd      	mov	sp, r7
 8004cae:	b008      	add	sp, #32
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	00001388 	.word	0x00001388
 8004cbc:	efffffff 	.word	0xefffffff
 8004cc0:	feffffff 	.word	0xfeffffff
 8004cc4:	ffc2ffff 	.word	0xffc2ffff

08004cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e0b3      	b.n	8004e44 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cdc:	4b5b      	ldr	r3, [pc, #364]	; (8004e4c <HAL_RCC_ClockConfig+0x184>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d911      	bls.n	8004d0e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cea:	4b58      	ldr	r3, [pc, #352]	; (8004e4c <HAL_RCC_ClockConfig+0x184>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	4393      	bics	r3, r2
 8004cf2:	0019      	movs	r1, r3
 8004cf4:	4b55      	ldr	r3, [pc, #340]	; (8004e4c <HAL_RCC_ClockConfig+0x184>)
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfc:	4b53      	ldr	r3, [pc, #332]	; (8004e4c <HAL_RCC_ClockConfig+0x184>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2201      	movs	r2, #1
 8004d02:	4013      	ands	r3, r2
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d001      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e09a      	b.n	8004e44 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2202      	movs	r2, #2
 8004d14:	4013      	ands	r3, r2
 8004d16:	d015      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d006      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004d22:	4b4b      	ldr	r3, [pc, #300]	; (8004e50 <HAL_RCC_ClockConfig+0x188>)
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	4b4a      	ldr	r3, [pc, #296]	; (8004e50 <HAL_RCC_ClockConfig+0x188>)
 8004d28:	21e0      	movs	r1, #224	; 0xe0
 8004d2a:	00c9      	lsls	r1, r1, #3
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d30:	4b47      	ldr	r3, [pc, #284]	; (8004e50 <HAL_RCC_ClockConfig+0x188>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	22f0      	movs	r2, #240	; 0xf0
 8004d36:	4393      	bics	r3, r2
 8004d38:	0019      	movs	r1, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	4b44      	ldr	r3, [pc, #272]	; (8004e50 <HAL_RCC_ClockConfig+0x188>)
 8004d40:	430a      	orrs	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d040      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d107      	bne.n	8004d66 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d56:	4b3e      	ldr	r3, [pc, #248]	; (8004e50 <HAL_RCC_ClockConfig+0x188>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	2380      	movs	r3, #128	; 0x80
 8004d5c:	029b      	lsls	r3, r3, #10
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d114      	bne.n	8004d8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e06e      	b.n	8004e44 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d107      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6e:	4b38      	ldr	r3, [pc, #224]	; (8004e50 <HAL_RCC_ClockConfig+0x188>)
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	2380      	movs	r3, #128	; 0x80
 8004d74:	049b      	lsls	r3, r3, #18
 8004d76:	4013      	ands	r3, r2
 8004d78:	d108      	bne.n	8004d8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e062      	b.n	8004e44 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7e:	4b34      	ldr	r3, [pc, #208]	; (8004e50 <HAL_RCC_ClockConfig+0x188>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2202      	movs	r2, #2
 8004d84:	4013      	ands	r3, r2
 8004d86:	d101      	bne.n	8004d8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e05b      	b.n	8004e44 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d8c:	4b30      	ldr	r3, [pc, #192]	; (8004e50 <HAL_RCC_ClockConfig+0x188>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2203      	movs	r2, #3
 8004d92:	4393      	bics	r3, r2
 8004d94:	0019      	movs	r1, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	4b2d      	ldr	r3, [pc, #180]	; (8004e50 <HAL_RCC_ClockConfig+0x188>)
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004da0:	f7fe fbc4 	bl	800352c <HAL_GetTick>
 8004da4:	0003      	movs	r3, r0
 8004da6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da8:	e009      	b.n	8004dbe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004daa:	f7fe fbbf 	bl	800352c <HAL_GetTick>
 8004dae:	0002      	movs	r2, r0
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	4a27      	ldr	r2, [pc, #156]	; (8004e54 <HAL_RCC_ClockConfig+0x18c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e042      	b.n	8004e44 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbe:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <HAL_RCC_ClockConfig+0x188>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	220c      	movs	r2, #12
 8004dc4:	401a      	ands	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d1ec      	bne.n	8004daa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd0:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <HAL_RCC_ClockConfig+0x184>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d211      	bcs.n	8004e02 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dde:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <HAL_RCC_ClockConfig+0x184>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2201      	movs	r2, #1
 8004de4:	4393      	bics	r3, r2
 8004de6:	0019      	movs	r1, r3
 8004de8:	4b18      	ldr	r3, [pc, #96]	; (8004e4c <HAL_RCC_ClockConfig+0x184>)
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df0:	4b16      	ldr	r3, [pc, #88]	; (8004e4c <HAL_RCC_ClockConfig+0x184>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2201      	movs	r2, #1
 8004df6:	4013      	ands	r3, r2
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d001      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e020      	b.n	8004e44 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2204      	movs	r2, #4
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d009      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004e0c:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <HAL_RCC_ClockConfig+0x188>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	4a11      	ldr	r2, [pc, #68]	; (8004e58 <HAL_RCC_ClockConfig+0x190>)
 8004e12:	4013      	ands	r3, r2
 8004e14:	0019      	movs	r1, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	; (8004e50 <HAL_RCC_ClockConfig+0x188>)
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e20:	f000 f820 	bl	8004e64 <HAL_RCC_GetSysClockFreq>
 8004e24:	0001      	movs	r1, r0
 8004e26:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <HAL_RCC_ClockConfig+0x188>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	091b      	lsrs	r3, r3, #4
 8004e2c:	220f      	movs	r2, #15
 8004e2e:	4013      	ands	r3, r2
 8004e30:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <HAL_RCC_ClockConfig+0x194>)
 8004e32:	5cd3      	ldrb	r3, [r2, r3]
 8004e34:	000a      	movs	r2, r1
 8004e36:	40da      	lsrs	r2, r3
 8004e38:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <HAL_RCC_ClockConfig+0x198>)
 8004e3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004e3c:	2003      	movs	r0, #3
 8004e3e:	f7fe fb2f 	bl	80034a0 <HAL_InitTick>
  
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	0018      	movs	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b004      	add	sp, #16
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40022000 	.word	0x40022000
 8004e50:	40021000 	.word	0x40021000
 8004e54:	00001388 	.word	0x00001388
 8004e58:	fffff8ff 	.word	0xfffff8ff
 8004e5c:	0800b12c 	.word	0x0800b12c
 8004e60:	20000000 	.word	0x20000000

08004e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e64:	b590      	push	{r4, r7, lr}
 8004e66:	b08f      	sub	sp, #60	; 0x3c
 8004e68:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004e6a:	2314      	movs	r3, #20
 8004e6c:	18fb      	adds	r3, r7, r3
 8004e6e:	4a2b      	ldr	r2, [pc, #172]	; (8004f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e70:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004e72:	c313      	stmia	r3!, {r0, r1, r4}
 8004e74:	6812      	ldr	r2, [r2, #0]
 8004e76:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004e78:	1d3b      	adds	r3, r7, #4
 8004e7a:	4a29      	ldr	r2, [pc, #164]	; (8004f20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004e7e:	c313      	stmia	r3!, {r0, r1, r4}
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e88:	2300      	movs	r3, #0
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e90:	2300      	movs	r3, #0
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004e98:	4b22      	ldr	r3, [pc, #136]	; (8004f24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	220c      	movs	r2, #12
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d002      	beq.n	8004eae <HAL_RCC_GetSysClockFreq+0x4a>
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d003      	beq.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x50>
 8004eac:	e02d      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004eae:	4b1e      	ldr	r3, [pc, #120]	; (8004f28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004eb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004eb2:	e02d      	b.n	8004f10 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	0c9b      	lsrs	r3, r3, #18
 8004eb8:	220f      	movs	r2, #15
 8004eba:	4013      	ands	r3, r2
 8004ebc:	2214      	movs	r2, #20
 8004ebe:	18ba      	adds	r2, r7, r2
 8004ec0:	5cd3      	ldrb	r3, [r2, r3]
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004ec4:	4b17      	ldr	r3, [pc, #92]	; (8004f24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	220f      	movs	r2, #15
 8004eca:	4013      	ands	r3, r2
 8004ecc:	1d3a      	adds	r2, r7, #4
 8004ece:	5cd3      	ldrb	r3, [r2, r3]
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed4:	2380      	movs	r3, #128	; 0x80
 8004ed6:	025b      	lsls	r3, r3, #9
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d009      	beq.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ede:	4812      	ldr	r0, [pc, #72]	; (8004f28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ee0:	f7fb f92e 	bl	8000140 <__udivsi3>
 8004ee4:	0003      	movs	r3, r0
 8004ee6:	001a      	movs	r2, r3
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	4353      	muls	r3, r2
 8004eec:	637b      	str	r3, [r7, #52]	; 0x34
 8004eee:	e009      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ef2:	000a      	movs	r2, r1
 8004ef4:	0152      	lsls	r2, r2, #5
 8004ef6:	1a52      	subs	r2, r2, r1
 8004ef8:	0193      	lsls	r3, r2, #6
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	185b      	adds	r3, r3, r1
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f08:	e002      	b.n	8004f10 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f0a:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f0c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f0e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004f12:	0018      	movs	r0, r3
 8004f14:	46bd      	mov	sp, r7
 8004f16:	b00f      	add	sp, #60	; 0x3c
 8004f18:	bd90      	pop	{r4, r7, pc}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	0800b03c 	.word	0x0800b03c
 8004f20:	0800b04c 	.word	0x0800b04c
 8004f24:	40021000 	.word	0x40021000
 8004f28:	007a1200 	.word	0x007a1200

08004f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f30:	4b02      	ldr	r3, [pc, #8]	; (8004f3c <HAL_RCC_GetHCLKFreq+0x10>)
 8004f32:	681b      	ldr	r3, [r3, #0]
}
 8004f34:	0018      	movs	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	20000000 	.word	0x20000000

08004f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004f44:	f7ff fff2 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
 8004f48:	0001      	movs	r1, r0
 8004f4a:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	2207      	movs	r2, #7
 8004f52:	4013      	ands	r3, r2
 8004f54:	4a04      	ldr	r2, [pc, #16]	; (8004f68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f56:	5cd3      	ldrb	r3, [r2, r3]
 8004f58:	40d9      	lsrs	r1, r3
 8004f5a:	000b      	movs	r3, r1
}    
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	40021000 	.word	0x40021000
 8004f68:	0800b13c 	.word	0x0800b13c

08004f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	2380      	movs	r3, #128	; 0x80
 8004f82:	025b      	lsls	r3, r3, #9
 8004f84:	4013      	ands	r3, r2
 8004f86:	d100      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004f88:	e08e      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004f8a:	2017      	movs	r0, #23
 8004f8c:	183b      	adds	r3, r7, r0
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f92:	4b5f      	ldr	r3, [pc, #380]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f94:	69da      	ldr	r2, [r3, #28]
 8004f96:	2380      	movs	r3, #128	; 0x80
 8004f98:	055b      	lsls	r3, r3, #21
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d110      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f9e:	4b5c      	ldr	r3, [pc, #368]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004fa0:	69da      	ldr	r2, [r3, #28]
 8004fa2:	4b5b      	ldr	r3, [pc, #364]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004fa4:	2180      	movs	r1, #128	; 0x80
 8004fa6:	0549      	lsls	r1, r1, #21
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	61da      	str	r2, [r3, #28]
 8004fac:	4b58      	ldr	r3, [pc, #352]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	055b      	lsls	r3, r3, #21
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	60bb      	str	r3, [r7, #8]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fba:	183b      	adds	r3, r7, r0
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc0:	4b54      	ldr	r3, [pc, #336]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	2380      	movs	r3, #128	; 0x80
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d11a      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fcc:	4b51      	ldr	r3, [pc, #324]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	4b50      	ldr	r3, [pc, #320]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004fd2:	2180      	movs	r1, #128	; 0x80
 8004fd4:	0049      	lsls	r1, r1, #1
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fda:	f7fe faa7 	bl	800352c <HAL_GetTick>
 8004fde:	0003      	movs	r3, r0
 8004fe0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe4:	f7fe faa2 	bl	800352c <HAL_GetTick>
 8004fe8:	0002      	movs	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b64      	cmp	r3, #100	; 0x64
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e087      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff6:	4b47      	ldr	r3, [pc, #284]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	2380      	movs	r3, #128	; 0x80
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	4013      	ands	r3, r2
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005002:	4b43      	ldr	r3, [pc, #268]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005004:	6a1a      	ldr	r2, [r3, #32]
 8005006:	23c0      	movs	r3, #192	; 0xc0
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4013      	ands	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d034      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	23c0      	movs	r3, #192	; 0xc0
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4013      	ands	r3, r2
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	429a      	cmp	r2, r3
 8005022:	d02c      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005024:	4b3a      	ldr	r3, [pc, #232]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	4a3b      	ldr	r2, [pc, #236]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800502a:	4013      	ands	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800502e:	4b38      	ldr	r3, [pc, #224]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005030:	6a1a      	ldr	r2, [r3, #32]
 8005032:	4b37      	ldr	r3, [pc, #220]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005034:	2180      	movs	r1, #128	; 0x80
 8005036:	0249      	lsls	r1, r1, #9
 8005038:	430a      	orrs	r2, r1
 800503a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800503c:	4b34      	ldr	r3, [pc, #208]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800503e:	6a1a      	ldr	r2, [r3, #32]
 8005040:	4b33      	ldr	r3, [pc, #204]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005042:	4936      	ldr	r1, [pc, #216]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005044:	400a      	ands	r2, r1
 8005046:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005048:	4b31      	ldr	r3, [pc, #196]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	4013      	ands	r3, r2
 8005054:	d013      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005056:	f7fe fa69 	bl	800352c <HAL_GetTick>
 800505a:	0003      	movs	r3, r0
 800505c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800505e:	e009      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005060:	f7fe fa64 	bl	800352c <HAL_GetTick>
 8005064:	0002      	movs	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	4a2d      	ldr	r2, [pc, #180]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d901      	bls.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e048      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005074:	4b26      	ldr	r3, [pc, #152]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	2202      	movs	r2, #2
 800507a:	4013      	ands	r3, r2
 800507c:	d0f0      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800507e:	4b24      	ldr	r3, [pc, #144]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	4a25      	ldr	r2, [pc, #148]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005084:	4013      	ands	r3, r2
 8005086:	0019      	movs	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	4b20      	ldr	r3, [pc, #128]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800508e:	430a      	orrs	r2, r1
 8005090:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005092:	2317      	movs	r3, #23
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d105      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800509c:	4b1c      	ldr	r3, [pc, #112]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800509e:	69da      	ldr	r2, [r3, #28]
 80050a0:	4b1b      	ldr	r3, [pc, #108]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80050a2:	4920      	ldr	r1, [pc, #128]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a4:	400a      	ands	r2, r1
 80050a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2201      	movs	r2, #1
 80050ae:	4013      	ands	r3, r2
 80050b0:	d009      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050b2:	4b17      	ldr	r3, [pc, #92]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	2203      	movs	r2, #3
 80050b8:	4393      	bics	r3, r2
 80050ba:	0019      	movs	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	4b13      	ldr	r3, [pc, #76]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80050c2:	430a      	orrs	r2, r1
 80050c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2220      	movs	r2, #32
 80050cc:	4013      	ands	r3, r2
 80050ce:	d009      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050d0:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	2210      	movs	r2, #16
 80050d6:	4393      	bics	r3, r2
 80050d8:	0019      	movs	r1, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80050e0:	430a      	orrs	r2, r1
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	2380      	movs	r3, #128	; 0x80
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4013      	ands	r3, r2
 80050ee:	d009      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050f0:	4b07      	ldr	r3, [pc, #28]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	2240      	movs	r2, #64	; 0x40
 80050f6:	4393      	bics	r3, r2
 80050f8:	0019      	movs	r1, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691a      	ldr	r2, [r3, #16]
 80050fe:	4b04      	ldr	r3, [pc, #16]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005100:	430a      	orrs	r2, r1
 8005102:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	0018      	movs	r0, r3
 8005108:	46bd      	mov	sp, r7
 800510a:	b006      	add	sp, #24
 800510c:	bd80      	pop	{r7, pc}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	40021000 	.word	0x40021000
 8005114:	40007000 	.word	0x40007000
 8005118:	fffffcff 	.word	0xfffffcff
 800511c:	fffeffff 	.word	0xfffeffff
 8005120:	00001388 	.word	0x00001388
 8005124:	efffffff 	.word	0xefffffff

08005128 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e044      	b.n	80051c4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800513e:	2b00      	cmp	r3, #0
 8005140:	d107      	bne.n	8005152 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2274      	movs	r2, #116	; 0x74
 8005146:	2100      	movs	r1, #0
 8005148:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	0018      	movs	r0, r3
 800514e:	f7fe f81f 	bl	8003190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2224      	movs	r2, #36	; 0x24
 8005156:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2101      	movs	r1, #1
 8005164:	438a      	bics	r2, r1
 8005166:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	0018      	movs	r0, r3
 800516c:	f000 fc2e 	bl	80059cc <UART_SetConfig>
 8005170:	0003      	movs	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e024      	b.n	80051c4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	0018      	movs	r0, r3
 8005186:	f000 fd61 	bl	8005c4c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	490d      	ldr	r1, [pc, #52]	; (80051cc <HAL_UART_Init+0xa4>)
 8005196:	400a      	ands	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	212a      	movs	r1, #42	; 0x2a
 80051a6:	438a      	bics	r2, r1
 80051a8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2101      	movs	r1, #1
 80051b6:	430a      	orrs	r2, r1
 80051b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	0018      	movs	r0, r3
 80051be:	f000 fdf9 	bl	8005db4 <UART_CheckIdleState>
 80051c2:	0003      	movs	r3, r0
}
 80051c4:	0018      	movs	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	b002      	add	sp, #8
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	ffffb7ff 	.word	0xffffb7ff

080051d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	; 0x28
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	1dbb      	adds	r3, r7, #6
 80051de:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d000      	beq.n	80051ea <HAL_UART_Transmit+0x1a>
 80051e8:	e096      	b.n	8005318 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_UART_Transmit+0x28>
 80051f0:	1dbb      	adds	r3, r7, #6
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e08e      	b.n	800531a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	2380      	movs	r3, #128	; 0x80
 8005202:	015b      	lsls	r3, r3, #5
 8005204:	429a      	cmp	r2, r3
 8005206:	d109      	bne.n	800521c <HAL_UART_Transmit+0x4c>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d105      	bne.n	800521c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2201      	movs	r2, #1
 8005214:	4013      	ands	r3, r2
 8005216:	d001      	beq.n	800521c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e07e      	b.n	800531a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2274      	movs	r2, #116	; 0x74
 8005220:	5c9b      	ldrb	r3, [r3, r2]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_UART_Transmit+0x5a>
 8005226:	2302      	movs	r3, #2
 8005228:	e077      	b.n	800531a <HAL_UART_Transmit+0x14a>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2274      	movs	r2, #116	; 0x74
 800522e:	2101      	movs	r1, #1
 8005230:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2280      	movs	r2, #128	; 0x80
 8005236:	2100      	movs	r1, #0
 8005238:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2221      	movs	r2, #33	; 0x21
 800523e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005240:	f7fe f974 	bl	800352c <HAL_GetTick>
 8005244:	0003      	movs	r3, r0
 8005246:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	1dba      	adds	r2, r7, #6
 800524c:	2150      	movs	r1, #80	; 0x50
 800524e:	8812      	ldrh	r2, [r2, #0]
 8005250:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	1dba      	adds	r2, r7, #6
 8005256:	2152      	movs	r1, #82	; 0x52
 8005258:	8812      	ldrh	r2, [r2, #0]
 800525a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	015b      	lsls	r3, r3, #5
 8005264:	429a      	cmp	r2, r3
 8005266:	d108      	bne.n	800527a <HAL_UART_Transmit+0xaa>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005270:	2300      	movs	r3, #0
 8005272:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	61bb      	str	r3, [r7, #24]
 8005278:	e003      	b.n	8005282 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800527e:	2300      	movs	r3, #0
 8005280:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2274      	movs	r2, #116	; 0x74
 8005286:	2100      	movs	r1, #0
 8005288:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800528a:	e02d      	b.n	80052e8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	0013      	movs	r3, r2
 8005296:	2200      	movs	r2, #0
 8005298:	2180      	movs	r1, #128	; 0x80
 800529a:	f000 fdd3 	bl	8005e44 <UART_WaitOnFlagUntilTimeout>
 800529e:	1e03      	subs	r3, r0, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e039      	b.n	800531a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10b      	bne.n	80052c4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	881a      	ldrh	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	05d2      	lsls	r2, r2, #23
 80052b6:	0dd2      	lsrs	r2, r2, #23
 80052b8:	b292      	uxth	r2, r2
 80052ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	3302      	adds	r3, #2
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	e008      	b.n	80052d6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	781a      	ldrb	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	b292      	uxth	r2, r2
 80052ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	3301      	adds	r3, #1
 80052d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2252      	movs	r2, #82	; 0x52
 80052da:	5a9b      	ldrh	r3, [r3, r2]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b299      	uxth	r1, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2252      	movs	r2, #82	; 0x52
 80052e6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2252      	movs	r2, #82	; 0x52
 80052ec:	5a9b      	ldrh	r3, [r3, r2]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1cb      	bne.n	800528c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	0013      	movs	r3, r2
 80052fe:	2200      	movs	r2, #0
 8005300:	2140      	movs	r1, #64	; 0x40
 8005302:	f000 fd9f 	bl	8005e44 <UART_WaitOnFlagUntilTimeout>
 8005306:	1e03      	subs	r3, r0, #0
 8005308:	d001      	beq.n	800530e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e005      	b.n	800531a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2220      	movs	r2, #32
 8005312:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	e000      	b.n	800531a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005318:	2302      	movs	r3, #2
  }
}
 800531a:	0018      	movs	r0, r3
 800531c:	46bd      	mov	sp, r7
 800531e:	b008      	add	sp, #32
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b088      	sub	sp, #32
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	1dbb      	adds	r3, r7, #6
 800532e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005334:	2b20      	cmp	r3, #32
 8005336:	d150      	bne.n	80053da <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_UART_Receive_IT+0x24>
 800533e:	1dbb      	adds	r3, r7, #6
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e048      	b.n	80053dc <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	2380      	movs	r3, #128	; 0x80
 8005350:	015b      	lsls	r3, r3, #5
 8005352:	429a      	cmp	r2, r3
 8005354:	d109      	bne.n	800536a <HAL_UART_Receive_IT+0x48>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d105      	bne.n	800536a <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2201      	movs	r2, #1
 8005362:	4013      	ands	r3, r2
 8005364:	d001      	beq.n	800536a <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e038      	b.n	80053dc <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2274      	movs	r2, #116	; 0x74
 800536e:	5c9b      	ldrb	r3, [r3, r2]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_UART_Receive_IT+0x56>
 8005374:	2302      	movs	r3, #2
 8005376:	e031      	b.n	80053dc <HAL_UART_Receive_IT+0xba>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2274      	movs	r2, #116	; 0x74
 800537c:	2101      	movs	r1, #1
 800537e:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	2380      	movs	r3, #128	; 0x80
 800538e:	041b      	lsls	r3, r3, #16
 8005390:	4013      	ands	r3, r2
 8005392:	d019      	beq.n	80053c8 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005394:	f3ef 8310 	mrs	r3, PRIMASK
 8005398:	613b      	str	r3, [r7, #16]
  return(result);
 800539a:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	2301      	movs	r3, #1
 80053a0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f383 8810 	msr	PRIMASK, r3
}
 80053a8:	46c0      	nop			; (mov r8, r8)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2180      	movs	r1, #128	; 0x80
 80053b6:	04c9      	lsls	r1, r1, #19
 80053b8:	430a      	orrs	r2, r1
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	f383 8810 	msr	PRIMASK, r3
}
 80053c6:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053c8:	1dbb      	adds	r3, r7, #6
 80053ca:	881a      	ldrh	r2, [r3, #0]
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	0018      	movs	r0, r3
 80053d2:	f000 fdfb 	bl	8005fcc <UART_Start_Receive_IT>
 80053d6:	0003      	movs	r3, r0
 80053d8:	e000      	b.n	80053dc <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80053da:	2302      	movs	r3, #2
  }
}
 80053dc:	0018      	movs	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	b008      	add	sp, #32
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053e4:	b590      	push	{r4, r7, lr}
 80053e6:	b0ab      	sub	sp, #172	; 0xac
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	22a4      	movs	r2, #164	; 0xa4
 80053f4:	18b9      	adds	r1, r7, r2
 80053f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	20a0      	movs	r0, #160	; 0xa0
 8005400:	1839      	adds	r1, r7, r0
 8005402:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	219c      	movs	r1, #156	; 0x9c
 800540c:	1879      	adds	r1, r7, r1
 800540e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005410:	0011      	movs	r1, r2
 8005412:	18bb      	adds	r3, r7, r2
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a99      	ldr	r2, [pc, #612]	; (800567c <HAL_UART_IRQHandler+0x298>)
 8005418:	4013      	ands	r3, r2
 800541a:	2298      	movs	r2, #152	; 0x98
 800541c:	18bc      	adds	r4, r7, r2
 800541e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005420:	18bb      	adds	r3, r7, r2
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d114      	bne.n	8005452 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005428:	187b      	adds	r3, r7, r1
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2220      	movs	r2, #32
 800542e:	4013      	ands	r3, r2
 8005430:	d00f      	beq.n	8005452 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005432:	183b      	adds	r3, r7, r0
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2220      	movs	r2, #32
 8005438:	4013      	ands	r3, r2
 800543a:	d00a      	beq.n	8005452 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005440:	2b00      	cmp	r3, #0
 8005442:	d100      	bne.n	8005446 <HAL_UART_IRQHandler+0x62>
 8005444:	e296      	b.n	8005974 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	0010      	movs	r0, r2
 800544e:	4798      	blx	r3
      }
      return;
 8005450:	e290      	b.n	8005974 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005452:	2398      	movs	r3, #152	; 0x98
 8005454:	18fb      	adds	r3, r7, r3
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d100      	bne.n	800545e <HAL_UART_IRQHandler+0x7a>
 800545c:	e114      	b.n	8005688 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800545e:	239c      	movs	r3, #156	; 0x9c
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2201      	movs	r2, #1
 8005466:	4013      	ands	r3, r2
 8005468:	d106      	bne.n	8005478 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800546a:	23a0      	movs	r3, #160	; 0xa0
 800546c:	18fb      	adds	r3, r7, r3
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a83      	ldr	r2, [pc, #524]	; (8005680 <HAL_UART_IRQHandler+0x29c>)
 8005472:	4013      	ands	r3, r2
 8005474:	d100      	bne.n	8005478 <HAL_UART_IRQHandler+0x94>
 8005476:	e107      	b.n	8005688 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005478:	23a4      	movs	r3, #164	; 0xa4
 800547a:	18fb      	adds	r3, r7, r3
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2201      	movs	r2, #1
 8005480:	4013      	ands	r3, r2
 8005482:	d012      	beq.n	80054aa <HAL_UART_IRQHandler+0xc6>
 8005484:	23a0      	movs	r3, #160	; 0xa0
 8005486:	18fb      	adds	r3, r7, r3
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	2380      	movs	r3, #128	; 0x80
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	4013      	ands	r3, r2
 8005490:	d00b      	beq.n	80054aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2201      	movs	r2, #1
 8005498:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2280      	movs	r2, #128	; 0x80
 800549e:	589b      	ldr	r3, [r3, r2]
 80054a0:	2201      	movs	r2, #1
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2180      	movs	r1, #128	; 0x80
 80054a8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054aa:	23a4      	movs	r3, #164	; 0xa4
 80054ac:	18fb      	adds	r3, r7, r3
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2202      	movs	r2, #2
 80054b2:	4013      	ands	r3, r2
 80054b4:	d011      	beq.n	80054da <HAL_UART_IRQHandler+0xf6>
 80054b6:	239c      	movs	r3, #156	; 0x9c
 80054b8:	18fb      	adds	r3, r7, r3
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2201      	movs	r2, #1
 80054be:	4013      	ands	r3, r2
 80054c0:	d00b      	beq.n	80054da <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2202      	movs	r2, #2
 80054c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2280      	movs	r2, #128	; 0x80
 80054ce:	589b      	ldr	r3, [r3, r2]
 80054d0:	2204      	movs	r2, #4
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2180      	movs	r1, #128	; 0x80
 80054d8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054da:	23a4      	movs	r3, #164	; 0xa4
 80054dc:	18fb      	adds	r3, r7, r3
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2204      	movs	r2, #4
 80054e2:	4013      	ands	r3, r2
 80054e4:	d011      	beq.n	800550a <HAL_UART_IRQHandler+0x126>
 80054e6:	239c      	movs	r3, #156	; 0x9c
 80054e8:	18fb      	adds	r3, r7, r3
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2201      	movs	r2, #1
 80054ee:	4013      	ands	r3, r2
 80054f0:	d00b      	beq.n	800550a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2204      	movs	r2, #4
 80054f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2280      	movs	r2, #128	; 0x80
 80054fe:	589b      	ldr	r3, [r3, r2]
 8005500:	2202      	movs	r2, #2
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2180      	movs	r1, #128	; 0x80
 8005508:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800550a:	23a4      	movs	r3, #164	; 0xa4
 800550c:	18fb      	adds	r3, r7, r3
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2208      	movs	r2, #8
 8005512:	4013      	ands	r3, r2
 8005514:	d017      	beq.n	8005546 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005516:	23a0      	movs	r3, #160	; 0xa0
 8005518:	18fb      	adds	r3, r7, r3
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2220      	movs	r2, #32
 800551e:	4013      	ands	r3, r2
 8005520:	d105      	bne.n	800552e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005522:	239c      	movs	r3, #156	; 0x9c
 8005524:	18fb      	adds	r3, r7, r3
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2201      	movs	r2, #1
 800552a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800552c:	d00b      	beq.n	8005546 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2208      	movs	r2, #8
 8005534:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2280      	movs	r2, #128	; 0x80
 800553a:	589b      	ldr	r3, [r3, r2]
 800553c:	2208      	movs	r2, #8
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2180      	movs	r1, #128	; 0x80
 8005544:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005546:	23a4      	movs	r3, #164	; 0xa4
 8005548:	18fb      	adds	r3, r7, r3
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	2380      	movs	r3, #128	; 0x80
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	4013      	ands	r3, r2
 8005552:	d013      	beq.n	800557c <HAL_UART_IRQHandler+0x198>
 8005554:	23a0      	movs	r3, #160	; 0xa0
 8005556:	18fb      	adds	r3, r7, r3
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	04db      	lsls	r3, r3, #19
 800555e:	4013      	ands	r3, r2
 8005560:	d00c      	beq.n	800557c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2280      	movs	r2, #128	; 0x80
 8005568:	0112      	lsls	r2, r2, #4
 800556a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2280      	movs	r2, #128	; 0x80
 8005570:	589b      	ldr	r3, [r3, r2]
 8005572:	2220      	movs	r2, #32
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2180      	movs	r1, #128	; 0x80
 800557a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2280      	movs	r2, #128	; 0x80
 8005580:	589b      	ldr	r3, [r3, r2]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d100      	bne.n	8005588 <HAL_UART_IRQHandler+0x1a4>
 8005586:	e1f7      	b.n	8005978 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005588:	23a4      	movs	r3, #164	; 0xa4
 800558a:	18fb      	adds	r3, r7, r3
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2220      	movs	r2, #32
 8005590:	4013      	ands	r3, r2
 8005592:	d00e      	beq.n	80055b2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005594:	23a0      	movs	r3, #160	; 0xa0
 8005596:	18fb      	adds	r3, r7, r3
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2220      	movs	r2, #32
 800559c:	4013      	ands	r3, r2
 800559e:	d008      	beq.n	80055b2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d004      	beq.n	80055b2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	0010      	movs	r0, r2
 80055b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2280      	movs	r2, #128	; 0x80
 80055b6:	589b      	ldr	r3, [r3, r2]
 80055b8:	2194      	movs	r1, #148	; 0x94
 80055ba:	187a      	adds	r2, r7, r1
 80055bc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	2240      	movs	r2, #64	; 0x40
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b40      	cmp	r3, #64	; 0x40
 80055ca:	d004      	beq.n	80055d6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055cc:	187b      	adds	r3, r7, r1
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2228      	movs	r2, #40	; 0x28
 80055d2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055d4:	d047      	beq.n	8005666 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	0018      	movs	r0, r3
 80055da:	f000 fd93 	bl	8006104 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2240      	movs	r2, #64	; 0x40
 80055e6:	4013      	ands	r3, r2
 80055e8:	2b40      	cmp	r3, #64	; 0x40
 80055ea:	d137      	bne.n	800565c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ec:	f3ef 8310 	mrs	r3, PRIMASK
 80055f0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80055f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055f4:	2090      	movs	r0, #144	; 0x90
 80055f6:	183a      	adds	r2, r7, r0
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	2301      	movs	r3, #1
 80055fc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005600:	f383 8810 	msr	PRIMASK, r3
}
 8005604:	46c0      	nop			; (mov r8, r8)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2140      	movs	r1, #64	; 0x40
 8005612:	438a      	bics	r2, r1
 8005614:	609a      	str	r2, [r3, #8]
 8005616:	183b      	adds	r3, r7, r0
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800561c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800561e:	f383 8810 	msr	PRIMASK, r3
}
 8005622:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005628:	2b00      	cmp	r3, #0
 800562a:	d012      	beq.n	8005652 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	4a14      	ldr	r2, [pc, #80]	; (8005684 <HAL_UART_IRQHandler+0x2a0>)
 8005632:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005638:	0018      	movs	r0, r3
 800563a:	f7fe fd35 	bl	80040a8 <HAL_DMA_Abort_IT>
 800563e:	1e03      	subs	r3, r0, #0
 8005640:	d01a      	beq.n	8005678 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564c:	0018      	movs	r0, r3
 800564e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005650:	e012      	b.n	8005678 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	0018      	movs	r0, r3
 8005656:	f000 f9a5 	bl	80059a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565a:	e00d      	b.n	8005678 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	0018      	movs	r0, r3
 8005660:	f000 f9a0 	bl	80059a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005664:	e008      	b.n	8005678 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	0018      	movs	r0, r3
 800566a:	f000 f99b 	bl	80059a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2280      	movs	r2, #128	; 0x80
 8005672:	2100      	movs	r1, #0
 8005674:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005676:	e17f      	b.n	8005978 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005678:	46c0      	nop			; (mov r8, r8)
    return;
 800567a:	e17d      	b.n	8005978 <HAL_UART_IRQHandler+0x594>
 800567c:	0000080f 	.word	0x0000080f
 8005680:	04000120 	.word	0x04000120
 8005684:	080061c9 	.word	0x080061c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568c:	2b01      	cmp	r3, #1
 800568e:	d000      	beq.n	8005692 <HAL_UART_IRQHandler+0x2ae>
 8005690:	e131      	b.n	80058f6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005692:	23a4      	movs	r3, #164	; 0xa4
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2210      	movs	r2, #16
 800569a:	4013      	ands	r3, r2
 800569c:	d100      	bne.n	80056a0 <HAL_UART_IRQHandler+0x2bc>
 800569e:	e12a      	b.n	80058f6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80056a0:	23a0      	movs	r3, #160	; 0xa0
 80056a2:	18fb      	adds	r3, r7, r3
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2210      	movs	r2, #16
 80056a8:	4013      	ands	r3, r2
 80056aa:	d100      	bne.n	80056ae <HAL_UART_IRQHandler+0x2ca>
 80056ac:	e123      	b.n	80058f6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2210      	movs	r2, #16
 80056b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2240      	movs	r2, #64	; 0x40
 80056be:	4013      	ands	r3, r2
 80056c0:	2b40      	cmp	r3, #64	; 0x40
 80056c2:	d000      	beq.n	80056c6 <HAL_UART_IRQHandler+0x2e2>
 80056c4:	e09b      	b.n	80057fe <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	217e      	movs	r1, #126	; 0x7e
 80056d0:	187b      	adds	r3, r7, r1
 80056d2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80056d4:	187b      	adds	r3, r7, r1
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d100      	bne.n	80056de <HAL_UART_IRQHandler+0x2fa>
 80056dc:	e14e      	b.n	800597c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2258      	movs	r2, #88	; 0x58
 80056e2:	5a9b      	ldrh	r3, [r3, r2]
 80056e4:	187a      	adds	r2, r7, r1
 80056e6:	8812      	ldrh	r2, [r2, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d300      	bcc.n	80056ee <HAL_UART_IRQHandler+0x30a>
 80056ec:	e146      	b.n	800597c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	187a      	adds	r2, r7, r1
 80056f2:	215a      	movs	r1, #90	; 0x5a
 80056f4:	8812      	ldrh	r2, [r2, #0]
 80056f6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d06e      	beq.n	80057e0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005702:	f3ef 8310 	mrs	r3, PRIMASK
 8005706:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800570a:	67bb      	str	r3, [r7, #120]	; 0x78
 800570c:	2301      	movs	r3, #1
 800570e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005712:	f383 8810 	msr	PRIMASK, r3
}
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	499a      	ldr	r1, [pc, #616]	; (800598c <HAL_UART_IRQHandler+0x5a8>)
 8005724:	400a      	ands	r2, r1
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800572a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	f383 8810 	msr	PRIMASK, r3
}
 8005732:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005734:	f3ef 8310 	mrs	r3, PRIMASK
 8005738:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800573a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573c:	677b      	str	r3, [r7, #116]	; 0x74
 800573e:	2301      	movs	r3, #1
 8005740:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005744:	f383 8810 	msr	PRIMASK, r3
}
 8005748:	46c0      	nop			; (mov r8, r8)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2101      	movs	r1, #1
 8005756:	438a      	bics	r2, r1
 8005758:	609a      	str	r2, [r3, #8]
 800575a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800575c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005760:	f383 8810 	msr	PRIMASK, r3
}
 8005764:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005766:	f3ef 8310 	mrs	r3, PRIMASK
 800576a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800576c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576e:	673b      	str	r3, [r7, #112]	; 0x70
 8005770:	2301      	movs	r3, #1
 8005772:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005776:	f383 8810 	msr	PRIMASK, r3
}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2140      	movs	r1, #64	; 0x40
 8005788:	438a      	bics	r2, r1
 800578a:	609a      	str	r2, [r3, #8]
 800578c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800578e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005792:	f383 8810 	msr	PRIMASK, r3
}
 8005796:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2220      	movs	r2, #32
 800579c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a4:	f3ef 8310 	mrs	r3, PRIMASK
 80057a8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80057aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057ae:	2301      	movs	r3, #1
 80057b0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057b4:	f383 8810 	msr	PRIMASK, r3
}
 80057b8:	46c0      	nop			; (mov r8, r8)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2110      	movs	r1, #16
 80057c6:	438a      	bics	r2, r1
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057d0:	f383 8810 	msr	PRIMASK, r3
}
 80057d4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	0018      	movs	r0, r3
 80057dc:	f7fe fc2c 	bl	8004038 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2258      	movs	r2, #88	; 0x58
 80057e4:	5a9a      	ldrh	r2, [r3, r2]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	215a      	movs	r1, #90	; 0x5a
 80057ea:	5a5b      	ldrh	r3, [r3, r1]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	0011      	movs	r1, r2
 80057f6:	0018      	movs	r0, r3
 80057f8:	f000 f8dc 	bl	80059b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057fc:	e0be      	b.n	800597c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2258      	movs	r2, #88	; 0x58
 8005802:	5a99      	ldrh	r1, [r3, r2]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	225a      	movs	r2, #90	; 0x5a
 8005808:	5a9b      	ldrh	r3, [r3, r2]
 800580a:	b29a      	uxth	r2, r3
 800580c:	208e      	movs	r0, #142	; 0x8e
 800580e:	183b      	adds	r3, r7, r0
 8005810:	1a8a      	subs	r2, r1, r2
 8005812:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	225a      	movs	r2, #90	; 0x5a
 8005818:	5a9b      	ldrh	r3, [r3, r2]
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d100      	bne.n	8005822 <HAL_UART_IRQHandler+0x43e>
 8005820:	e0ae      	b.n	8005980 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8005822:	183b      	adds	r3, r7, r0
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d100      	bne.n	800582c <HAL_UART_IRQHandler+0x448>
 800582a:	e0a9      	b.n	8005980 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800582c:	f3ef 8310 	mrs	r3, PRIMASK
 8005830:	60fb      	str	r3, [r7, #12]
  return(result);
 8005832:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005834:	2488      	movs	r4, #136	; 0x88
 8005836:	193a      	adds	r2, r7, r4
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	2301      	movs	r3, #1
 800583c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f383 8810 	msr	PRIMASK, r3
}
 8005844:	46c0      	nop			; (mov r8, r8)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	494f      	ldr	r1, [pc, #316]	; (8005990 <HAL_UART_IRQHandler+0x5ac>)
 8005852:	400a      	ands	r2, r1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	193b      	adds	r3, r7, r4
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f383 8810 	msr	PRIMASK, r3
}
 8005862:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005864:	f3ef 8310 	mrs	r3, PRIMASK
 8005868:	61bb      	str	r3, [r7, #24]
  return(result);
 800586a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586c:	2484      	movs	r4, #132	; 0x84
 800586e:	193a      	adds	r2, r7, r4
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	2301      	movs	r3, #1
 8005874:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	f383 8810 	msr	PRIMASK, r3
}
 800587c:	46c0      	nop			; (mov r8, r8)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2101      	movs	r1, #1
 800588a:	438a      	bics	r2, r1
 800588c:	609a      	str	r2, [r3, #8]
 800588e:	193b      	adds	r3, r7, r4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	f383 8810 	msr	PRIMASK, r3
}
 800589a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ae:	f3ef 8310 	mrs	r3, PRIMASK
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b6:	2480      	movs	r4, #128	; 0x80
 80058b8:	193a      	adds	r2, r7, r4
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	2301      	movs	r3, #1
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	f383 8810 	msr	PRIMASK, r3
}
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2110      	movs	r1, #16
 80058d4:	438a      	bics	r2, r1
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	193b      	adds	r3, r7, r4
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e0:	f383 8810 	msr	PRIMASK, r3
}
 80058e4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058e6:	183b      	adds	r3, r7, r0
 80058e8:	881a      	ldrh	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	0011      	movs	r1, r2
 80058ee:	0018      	movs	r0, r3
 80058f0:	f000 f860 	bl	80059b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058f4:	e044      	b.n	8005980 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058f6:	23a4      	movs	r3, #164	; 0xa4
 80058f8:	18fb      	adds	r3, r7, r3
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	035b      	lsls	r3, r3, #13
 8005900:	4013      	ands	r3, r2
 8005902:	d010      	beq.n	8005926 <HAL_UART_IRQHandler+0x542>
 8005904:	239c      	movs	r3, #156	; 0x9c
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	2380      	movs	r3, #128	; 0x80
 800590c:	03db      	lsls	r3, r3, #15
 800590e:	4013      	ands	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2280      	movs	r2, #128	; 0x80
 8005918:	0352      	lsls	r2, r2, #13
 800591a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	0018      	movs	r0, r3
 8005920:	f000 fdfc 	bl	800651c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005924:	e02f      	b.n	8005986 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005926:	23a4      	movs	r3, #164	; 0xa4
 8005928:	18fb      	adds	r3, r7, r3
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2280      	movs	r2, #128	; 0x80
 800592e:	4013      	ands	r3, r2
 8005930:	d00f      	beq.n	8005952 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005932:	23a0      	movs	r3, #160	; 0xa0
 8005934:	18fb      	adds	r3, r7, r3
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2280      	movs	r2, #128	; 0x80
 800593a:	4013      	ands	r3, r2
 800593c:	d009      	beq.n	8005952 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01e      	beq.n	8005984 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	0010      	movs	r0, r2
 800594e:	4798      	blx	r3
    }
    return;
 8005950:	e018      	b.n	8005984 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005952:	23a4      	movs	r3, #164	; 0xa4
 8005954:	18fb      	adds	r3, r7, r3
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2240      	movs	r2, #64	; 0x40
 800595a:	4013      	ands	r3, r2
 800595c:	d013      	beq.n	8005986 <HAL_UART_IRQHandler+0x5a2>
 800595e:	23a0      	movs	r3, #160	; 0xa0
 8005960:	18fb      	adds	r3, r7, r3
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2240      	movs	r2, #64	; 0x40
 8005966:	4013      	ands	r3, r2
 8005968:	d00d      	beq.n	8005986 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	0018      	movs	r0, r3
 800596e:	f000 fc42 	bl	80061f6 <UART_EndTransmit_IT>
    return;
 8005972:	e008      	b.n	8005986 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005974:	46c0      	nop			; (mov r8, r8)
 8005976:	e006      	b.n	8005986 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005978:	46c0      	nop			; (mov r8, r8)
 800597a:	e004      	b.n	8005986 <HAL_UART_IRQHandler+0x5a2>
      return;
 800597c:	46c0      	nop			; (mov r8, r8)
 800597e:	e002      	b.n	8005986 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005980:	46c0      	nop			; (mov r8, r8)
 8005982:	e000      	b.n	8005986 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005984:	46c0      	nop			; (mov r8, r8)
  }

}
 8005986:	46bd      	mov	sp, r7
 8005988:	b02b      	add	sp, #172	; 0xac
 800598a:	bd90      	pop	{r4, r7, pc}
 800598c:	fffffeff 	.word	0xfffffeff
 8005990:	fffffedf 	.word	0xfffffedf

08005994 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800599c:	46c0      	nop			; (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	b002      	add	sp, #8
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059ac:	46c0      	nop			; (mov r8, r8)
 80059ae:	46bd      	mov	sp, r7
 80059b0:	b002      	add	sp, #8
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	000a      	movs	r2, r1
 80059be:	1cbb      	adds	r3, r7, #2
 80059c0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b002      	add	sp, #8
 80059c8:	bd80      	pop	{r7, pc}
	...

080059cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059d4:	231e      	movs	r3, #30
 80059d6:	18fb      	adds	r3, r7, r3
 80059d8:	2200      	movs	r2, #0
 80059da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a8d      	ldr	r2, [pc, #564]	; (8005c30 <UART_SetConfig+0x264>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	0019      	movs	r1, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	4a88      	ldr	r2, [pc, #544]	; (8005c34 <UART_SetConfig+0x268>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	0019      	movs	r1, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4a7f      	ldr	r2, [pc, #508]	; (8005c38 <UART_SetConfig+0x26c>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	0019      	movs	r1, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a7b      	ldr	r2, [pc, #492]	; (8005c3c <UART_SetConfig+0x270>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d127      	bne.n	8005aa2 <UART_SetConfig+0xd6>
 8005a52:	4b7b      	ldr	r3, [pc, #492]	; (8005c40 <UART_SetConfig+0x274>)
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	2203      	movs	r2, #3
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d00d      	beq.n	8005a7a <UART_SetConfig+0xae>
 8005a5e:	d81b      	bhi.n	8005a98 <UART_SetConfig+0xcc>
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d014      	beq.n	8005a8e <UART_SetConfig+0xc2>
 8005a64:	d818      	bhi.n	8005a98 <UART_SetConfig+0xcc>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <UART_SetConfig+0xa4>
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d00a      	beq.n	8005a84 <UART_SetConfig+0xb8>
 8005a6e:	e013      	b.n	8005a98 <UART_SetConfig+0xcc>
 8005a70:	231f      	movs	r3, #31
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	2200      	movs	r2, #0
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	e021      	b.n	8005abe <UART_SetConfig+0xf2>
 8005a7a:	231f      	movs	r3, #31
 8005a7c:	18fb      	adds	r3, r7, r3
 8005a7e:	2202      	movs	r2, #2
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	e01c      	b.n	8005abe <UART_SetConfig+0xf2>
 8005a84:	231f      	movs	r3, #31
 8005a86:	18fb      	adds	r3, r7, r3
 8005a88:	2204      	movs	r2, #4
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	e017      	b.n	8005abe <UART_SetConfig+0xf2>
 8005a8e:	231f      	movs	r3, #31
 8005a90:	18fb      	adds	r3, r7, r3
 8005a92:	2208      	movs	r2, #8
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	e012      	b.n	8005abe <UART_SetConfig+0xf2>
 8005a98:	231f      	movs	r3, #31
 8005a9a:	18fb      	adds	r3, r7, r3
 8005a9c:	2210      	movs	r2, #16
 8005a9e:	701a      	strb	r2, [r3, #0]
 8005aa0:	e00d      	b.n	8005abe <UART_SetConfig+0xf2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a67      	ldr	r2, [pc, #412]	; (8005c44 <UART_SetConfig+0x278>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d104      	bne.n	8005ab6 <UART_SetConfig+0xea>
 8005aac:	231f      	movs	r3, #31
 8005aae:	18fb      	adds	r3, r7, r3
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	e003      	b.n	8005abe <UART_SetConfig+0xf2>
 8005ab6:	231f      	movs	r3, #31
 8005ab8:	18fb      	adds	r3, r7, r3
 8005aba:	2210      	movs	r2, #16
 8005abc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	69da      	ldr	r2, [r3, #28]
 8005ac2:	2380      	movs	r3, #128	; 0x80
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d15d      	bne.n	8005b86 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005aca:	231f      	movs	r3, #31
 8005acc:	18fb      	adds	r3, r7, r3
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d015      	beq.n	8005b00 <UART_SetConfig+0x134>
 8005ad4:	dc18      	bgt.n	8005b08 <UART_SetConfig+0x13c>
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d00d      	beq.n	8005af6 <UART_SetConfig+0x12a>
 8005ada:	dc15      	bgt.n	8005b08 <UART_SetConfig+0x13c>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <UART_SetConfig+0x11a>
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d005      	beq.n	8005af0 <UART_SetConfig+0x124>
 8005ae4:	e010      	b.n	8005b08 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ae6:	f7ff fa2b 	bl	8004f40 <HAL_RCC_GetPCLK1Freq>
 8005aea:	0003      	movs	r3, r0
 8005aec:	61bb      	str	r3, [r7, #24]
        break;
 8005aee:	e012      	b.n	8005b16 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005af0:	4b55      	ldr	r3, [pc, #340]	; (8005c48 <UART_SetConfig+0x27c>)
 8005af2:	61bb      	str	r3, [r7, #24]
        break;
 8005af4:	e00f      	b.n	8005b16 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005af6:	f7ff f9b5 	bl	8004e64 <HAL_RCC_GetSysClockFreq>
 8005afa:	0003      	movs	r3, r0
 8005afc:	61bb      	str	r3, [r7, #24]
        break;
 8005afe:	e00a      	b.n	8005b16 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b00:	2380      	movs	r3, #128	; 0x80
 8005b02:	021b      	lsls	r3, r3, #8
 8005b04:	61bb      	str	r3, [r7, #24]
        break;
 8005b06:	e006      	b.n	8005b16 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b0c:	231e      	movs	r3, #30
 8005b0e:	18fb      	adds	r3, r7, r3
 8005b10:	2201      	movs	r2, #1
 8005b12:	701a      	strb	r2, [r3, #0]
        break;
 8005b14:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d100      	bne.n	8005b1e <UART_SetConfig+0x152>
 8005b1c:	e07b      	b.n	8005c16 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	005a      	lsls	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	18d2      	adds	r2, r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	0019      	movs	r1, r3
 8005b30:	0010      	movs	r0, r2
 8005b32:	f7fa fb05 	bl	8000140 <__udivsi3>
 8005b36:	0003      	movs	r3, r0
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2b0f      	cmp	r3, #15
 8005b40:	d91c      	bls.n	8005b7c <UART_SetConfig+0x1b0>
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	025b      	lsls	r3, r3, #9
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d217      	bcs.n	8005b7c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	200e      	movs	r0, #14
 8005b52:	183b      	adds	r3, r7, r0
 8005b54:	210f      	movs	r1, #15
 8005b56:	438a      	bics	r2, r1
 8005b58:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	085b      	lsrs	r3, r3, #1
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2207      	movs	r2, #7
 8005b62:	4013      	ands	r3, r2
 8005b64:	b299      	uxth	r1, r3
 8005b66:	183b      	adds	r3, r7, r0
 8005b68:	183a      	adds	r2, r7, r0
 8005b6a:	8812      	ldrh	r2, [r2, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	183a      	adds	r2, r7, r0
 8005b76:	8812      	ldrh	r2, [r2, #0]
 8005b78:	60da      	str	r2, [r3, #12]
 8005b7a:	e04c      	b.n	8005c16 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005b7c:	231e      	movs	r3, #30
 8005b7e:	18fb      	adds	r3, r7, r3
 8005b80:	2201      	movs	r2, #1
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	e047      	b.n	8005c16 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b86:	231f      	movs	r3, #31
 8005b88:	18fb      	adds	r3, r7, r3
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d015      	beq.n	8005bbc <UART_SetConfig+0x1f0>
 8005b90:	dc18      	bgt.n	8005bc4 <UART_SetConfig+0x1f8>
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d00d      	beq.n	8005bb2 <UART_SetConfig+0x1e6>
 8005b96:	dc15      	bgt.n	8005bc4 <UART_SetConfig+0x1f8>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <UART_SetConfig+0x1d6>
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d005      	beq.n	8005bac <UART_SetConfig+0x1e0>
 8005ba0:	e010      	b.n	8005bc4 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba2:	f7ff f9cd 	bl	8004f40 <HAL_RCC_GetPCLK1Freq>
 8005ba6:	0003      	movs	r3, r0
 8005ba8:	61bb      	str	r3, [r7, #24]
        break;
 8005baa:	e012      	b.n	8005bd2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bac:	4b26      	ldr	r3, [pc, #152]	; (8005c48 <UART_SetConfig+0x27c>)
 8005bae:	61bb      	str	r3, [r7, #24]
        break;
 8005bb0:	e00f      	b.n	8005bd2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bb2:	f7ff f957 	bl	8004e64 <HAL_RCC_GetSysClockFreq>
 8005bb6:	0003      	movs	r3, r0
 8005bb8:	61bb      	str	r3, [r7, #24]
        break;
 8005bba:	e00a      	b.n	8005bd2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bbc:	2380      	movs	r3, #128	; 0x80
 8005bbe:	021b      	lsls	r3, r3, #8
 8005bc0:	61bb      	str	r3, [r7, #24]
        break;
 8005bc2:	e006      	b.n	8005bd2 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bc8:	231e      	movs	r3, #30
 8005bca:	18fb      	adds	r3, r7, r3
 8005bcc:	2201      	movs	r2, #1
 8005bce:	701a      	strb	r2, [r3, #0]
        break;
 8005bd0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01e      	beq.n	8005c16 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	085a      	lsrs	r2, r3, #1
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	18d2      	adds	r2, r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	0019      	movs	r1, r3
 8005be8:	0010      	movs	r0, r2
 8005bea:	f7fa faa9 	bl	8000140 <__udivsi3>
 8005bee:	0003      	movs	r3, r0
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d909      	bls.n	8005c0e <UART_SetConfig+0x242>
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	2380      	movs	r3, #128	; 0x80
 8005bfe:	025b      	lsls	r3, r3, #9
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d204      	bcs.n	8005c0e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	60da      	str	r2, [r3, #12]
 8005c0c:	e003      	b.n	8005c16 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005c0e:	231e      	movs	r3, #30
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	2201      	movs	r2, #1
 8005c14:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c22:	231e      	movs	r3, #30
 8005c24:	18fb      	adds	r3, r7, r3
 8005c26:	781b      	ldrb	r3, [r3, #0]
}
 8005c28:	0018      	movs	r0, r3
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	b008      	add	sp, #32
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	ffff69f3 	.word	0xffff69f3
 8005c34:	ffffcfff 	.word	0xffffcfff
 8005c38:	fffff4ff 	.word	0xfffff4ff
 8005c3c:	40013800 	.word	0x40013800
 8005c40:	40021000 	.word	0x40021000
 8005c44:	40004400 	.word	0x40004400
 8005c48:	007a1200 	.word	0x007a1200

08005c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	2201      	movs	r2, #1
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d00b      	beq.n	8005c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	4a4a      	ldr	r2, [pc, #296]	; (8005d90 <UART_AdvFeatureConfig+0x144>)
 8005c66:	4013      	ands	r3, r2
 8005c68:	0019      	movs	r1, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	d00b      	beq.n	8005c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	4a43      	ldr	r2, [pc, #268]	; (8005d94 <UART_AdvFeatureConfig+0x148>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	0019      	movs	r1, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	2204      	movs	r2, #4
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d00b      	beq.n	8005cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	4a3b      	ldr	r2, [pc, #236]	; (8005d98 <UART_AdvFeatureConfig+0x14c>)
 8005caa:	4013      	ands	r3, r2
 8005cac:	0019      	movs	r1, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	2208      	movs	r2, #8
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	d00b      	beq.n	8005cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	4a34      	ldr	r2, [pc, #208]	; (8005d9c <UART_AdvFeatureConfig+0x150>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	0019      	movs	r1, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	2210      	movs	r2, #16
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	d00b      	beq.n	8005cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4a2c      	ldr	r2, [pc, #176]	; (8005da0 <UART_AdvFeatureConfig+0x154>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	0019      	movs	r1, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	2220      	movs	r2, #32
 8005d04:	4013      	ands	r3, r2
 8005d06:	d00b      	beq.n	8005d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	4a25      	ldr	r2, [pc, #148]	; (8005da4 <UART_AdvFeatureConfig+0x158>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	0019      	movs	r1, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	2240      	movs	r2, #64	; 0x40
 8005d26:	4013      	ands	r3, r2
 8005d28:	d01d      	beq.n	8005d66 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	4a1d      	ldr	r2, [pc, #116]	; (8005da8 <UART_AdvFeatureConfig+0x15c>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	0019      	movs	r1, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d46:	2380      	movs	r3, #128	; 0x80
 8005d48:	035b      	lsls	r3, r3, #13
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d10b      	bne.n	8005d66 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	4a15      	ldr	r2, [pc, #84]	; (8005dac <UART_AdvFeatureConfig+0x160>)
 8005d56:	4013      	ands	r3, r2
 8005d58:	0019      	movs	r1, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	2280      	movs	r2, #128	; 0x80
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	d00b      	beq.n	8005d88 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	4a0e      	ldr	r2, [pc, #56]	; (8005db0 <UART_AdvFeatureConfig+0x164>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	0019      	movs	r1, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	605a      	str	r2, [r3, #4]
  }
}
 8005d88:	46c0      	nop			; (mov r8, r8)
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b002      	add	sp, #8
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	fffdffff 	.word	0xfffdffff
 8005d94:	fffeffff 	.word	0xfffeffff
 8005d98:	fffbffff 	.word	0xfffbffff
 8005d9c:	ffff7fff 	.word	0xffff7fff
 8005da0:	ffffefff 	.word	0xffffefff
 8005da4:	ffffdfff 	.word	0xffffdfff
 8005da8:	ffefffff 	.word	0xffefffff
 8005dac:	ff9fffff 	.word	0xff9fffff
 8005db0:	fff7ffff 	.word	0xfff7ffff

08005db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2280      	movs	r2, #128	; 0x80
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dc4:	f7fd fbb2 	bl	800352c <HAL_GetTick>
 8005dc8:	0003      	movs	r3, r0
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2208      	movs	r2, #8
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d10c      	bne.n	8005df4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2280      	movs	r2, #128	; 0x80
 8005dde:	0391      	lsls	r1, r2, #14
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	4a17      	ldr	r2, [pc, #92]	; (8005e40 <UART_CheckIdleState+0x8c>)
 8005de4:	9200      	str	r2, [sp, #0]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f000 f82c 	bl	8005e44 <UART_WaitOnFlagUntilTimeout>
 8005dec:	1e03      	subs	r3, r0, #0
 8005dee:	d001      	beq.n	8005df4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e021      	b.n	8005e38 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d10c      	bne.n	8005e1c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2280      	movs	r2, #128	; 0x80
 8005e06:	03d1      	lsls	r1, r2, #15
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	4a0d      	ldr	r2, [pc, #52]	; (8005e40 <UART_CheckIdleState+0x8c>)
 8005e0c:	9200      	str	r2, [sp, #0]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f000 f818 	bl	8005e44 <UART_WaitOnFlagUntilTimeout>
 8005e14:	1e03      	subs	r3, r0, #0
 8005e16:	d001      	beq.n	8005e1c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e00d      	b.n	8005e38 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2220      	movs	r2, #32
 8005e26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2274      	movs	r2, #116	; 0x74
 8005e32:	2100      	movs	r1, #0
 8005e34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	0018      	movs	r0, r3
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b004      	add	sp, #16
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	01ffffff 	.word	0x01ffffff

08005e44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b094      	sub	sp, #80	; 0x50
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	1dfb      	adds	r3, r7, #7
 8005e52:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e54:	e0a3      	b.n	8005f9e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e58:	3301      	adds	r3, #1
 8005e5a:	d100      	bne.n	8005e5e <UART_WaitOnFlagUntilTimeout+0x1a>
 8005e5c:	e09f      	b.n	8005f9e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e5e:	f7fd fb65 	bl	800352c <HAL_GetTick>
 8005e62:	0002      	movs	r2, r0
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d302      	bcc.n	8005e74 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d13d      	bne.n	8005ef0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e74:	f3ef 8310 	mrs	r3, PRIMASK
 8005e78:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e7e:	2301      	movs	r3, #1
 8005e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	f383 8810 	msr	PRIMASK, r3
}
 8005e88:	46c0      	nop			; (mov r8, r8)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	494c      	ldr	r1, [pc, #304]	; (8005fc8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005e96:	400a      	ands	r2, r1
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e9c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	f383 8810 	msr	PRIMASK, r3
}
 8005ea4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8005eaa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eae:	643b      	str	r3, [r7, #64]	; 0x40
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	f383 8810 	msr	PRIMASK, r3
}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	438a      	bics	r2, r1
 8005eca:	609a      	str	r2, [r3, #8]
 8005ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed2:	f383 8810 	msr	PRIMASK, r3
}
 8005ed6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2274      	movs	r2, #116	; 0x74
 8005ee8:	2100      	movs	r1, #0
 8005eea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e067      	b.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2204      	movs	r2, #4
 8005ef8:	4013      	ands	r3, r2
 8005efa:	d050      	beq.n	8005f9e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	69da      	ldr	r2, [r3, #28]
 8005f02:	2380      	movs	r3, #128	; 0x80
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	401a      	ands	r2, r3
 8005f08:	2380      	movs	r3, #128	; 0x80
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d146      	bne.n	8005f9e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2280      	movs	r2, #128	; 0x80
 8005f16:	0112      	lsls	r2, r2, #4
 8005f18:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f1e:	613b      	str	r3, [r7, #16]
  return(result);
 8005f20:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f24:	2301      	movs	r3, #1
 8005f26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f383 8810 	msr	PRIMASK, r3
}
 8005f2e:	46c0      	nop			; (mov r8, r8)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4923      	ldr	r1, [pc, #140]	; (8005fc8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005f3c:	400a      	ands	r2, r1
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	f383 8810 	msr	PRIMASK, r3
}
 8005f4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f50:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f52:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f56:	2301      	movs	r3, #1
 8005f58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	f383 8810 	msr	PRIMASK, r3
}
 8005f60:	46c0      	nop			; (mov r8, r8)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	438a      	bics	r2, r1
 8005f70:	609a      	str	r2, [r3, #8]
 8005f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	f383 8810 	msr	PRIMASK, r3
}
 8005f7c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2220      	movs	r2, #32
 8005f82:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2280      	movs	r2, #128	; 0x80
 8005f8e:	2120      	movs	r1, #32
 8005f90:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2274      	movs	r2, #116	; 0x74
 8005f96:	2100      	movs	r1, #0
 8005f98:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e010      	b.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	425a      	negs	r2, r3
 8005fae:	4153      	adcs	r3, r2
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	001a      	movs	r2, r3
 8005fb4:	1dfb      	adds	r3, r7, #7
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d100      	bne.n	8005fbe <UART_WaitOnFlagUntilTimeout+0x17a>
 8005fbc:	e74b      	b.n	8005e56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	b014      	add	sp, #80	; 0x50
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	fffffe5f 	.word	0xfffffe5f

08005fcc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08c      	sub	sp, #48	; 0x30
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	1dbb      	adds	r3, r7, #6
 8005fd8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	1dba      	adds	r2, r7, #6
 8005fe4:	2158      	movs	r1, #88	; 0x58
 8005fe6:	8812      	ldrh	r2, [r2, #0]
 8005fe8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	1dba      	adds	r2, r7, #6
 8005fee:	215a      	movs	r1, #90	; 0x5a
 8005ff0:	8812      	ldrh	r2, [r2, #0]
 8005ff2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	2380      	movs	r3, #128	; 0x80
 8006000:	015b      	lsls	r3, r3, #5
 8006002:	429a      	cmp	r2, r3
 8006004:	d10d      	bne.n	8006022 <UART_Start_Receive_IT+0x56>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d104      	bne.n	8006018 <UART_Start_Receive_IT+0x4c>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	225c      	movs	r2, #92	; 0x5c
 8006012:	4939      	ldr	r1, [pc, #228]	; (80060f8 <UART_Start_Receive_IT+0x12c>)
 8006014:	5299      	strh	r1, [r3, r2]
 8006016:	e01a      	b.n	800604e <UART_Start_Receive_IT+0x82>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	225c      	movs	r2, #92	; 0x5c
 800601c:	21ff      	movs	r1, #255	; 0xff
 800601e:	5299      	strh	r1, [r3, r2]
 8006020:	e015      	b.n	800604e <UART_Start_Receive_IT+0x82>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10d      	bne.n	8006046 <UART_Start_Receive_IT+0x7a>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d104      	bne.n	800603c <UART_Start_Receive_IT+0x70>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	225c      	movs	r2, #92	; 0x5c
 8006036:	21ff      	movs	r1, #255	; 0xff
 8006038:	5299      	strh	r1, [r3, r2]
 800603a:	e008      	b.n	800604e <UART_Start_Receive_IT+0x82>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	225c      	movs	r2, #92	; 0x5c
 8006040:	217f      	movs	r1, #127	; 0x7f
 8006042:	5299      	strh	r1, [r3, r2]
 8006044:	e003      	b.n	800604e <UART_Start_Receive_IT+0x82>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	225c      	movs	r2, #92	; 0x5c
 800604a:	2100      	movs	r1, #0
 800604c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2280      	movs	r2, #128	; 0x80
 8006052:	2100      	movs	r1, #0
 8006054:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2222      	movs	r2, #34	; 0x22
 800605a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800605c:	f3ef 8310 	mrs	r3, PRIMASK
 8006060:	61fb      	str	r3, [r7, #28]
  return(result);
 8006062:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006066:	2301      	movs	r3, #1
 8006068:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	f383 8810 	msr	PRIMASK, r3
}
 8006070:	46c0      	nop			; (mov r8, r8)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2101      	movs	r1, #1
 800607e:	430a      	orrs	r2, r1
 8006080:	609a      	str	r2, [r3, #8]
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	f383 8810 	msr	PRIMASK, r3
}
 800608c:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	2380      	movs	r3, #128	; 0x80
 8006094:	015b      	lsls	r3, r3, #5
 8006096:	429a      	cmp	r2, r3
 8006098:	d107      	bne.n	80060aa <UART_Start_Receive_IT+0xde>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d103      	bne.n	80060aa <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4a15      	ldr	r2, [pc, #84]	; (80060fc <UART_Start_Receive_IT+0x130>)
 80060a6:	665a      	str	r2, [r3, #100]	; 0x64
 80060a8:	e002      	b.n	80060b0 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4a14      	ldr	r2, [pc, #80]	; (8006100 <UART_Start_Receive_IT+0x134>)
 80060ae:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2274      	movs	r2, #116	; 0x74
 80060b4:	2100      	movs	r1, #0
 80060b6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060b8:	f3ef 8310 	mrs	r3, PRIMASK
 80060bc:	613b      	str	r3, [r7, #16]
  return(result);
 80060be:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80060c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c2:	2301      	movs	r3, #1
 80060c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f383 8810 	msr	PRIMASK, r3
}
 80060cc:	46c0      	nop			; (mov r8, r8)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2190      	movs	r1, #144	; 0x90
 80060da:	0049      	lsls	r1, r1, #1
 80060dc:	430a      	orrs	r2, r1
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	f383 8810 	msr	PRIMASK, r3
}
 80060ea:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	0018      	movs	r0, r3
 80060f0:	46bd      	mov	sp, r7
 80060f2:	b00c      	add	sp, #48	; 0x30
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	000001ff 	.word	0x000001ff
 80060fc:	080063b5 	.word	0x080063b5
 8006100:	0800624d 	.word	0x0800624d

08006104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08e      	sub	sp, #56	; 0x38
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800610c:	f3ef 8310 	mrs	r3, PRIMASK
 8006110:	617b      	str	r3, [r7, #20]
  return(result);
 8006112:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
 8006116:	2301      	movs	r3, #1
 8006118:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	f383 8810 	msr	PRIMASK, r3
}
 8006120:	46c0      	nop			; (mov r8, r8)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4925      	ldr	r1, [pc, #148]	; (80061c4 <UART_EndRxTransfer+0xc0>)
 800612e:	400a      	ands	r2, r1
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006134:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	f383 8810 	msr	PRIMASK, r3
}
 800613c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800613e:	f3ef 8310 	mrs	r3, PRIMASK
 8006142:	623b      	str	r3, [r7, #32]
  return(result);
 8006144:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006146:	633b      	str	r3, [r7, #48]	; 0x30
 8006148:	2301      	movs	r3, #1
 800614a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	f383 8810 	msr	PRIMASK, r3
}
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2101      	movs	r1, #1
 8006160:	438a      	bics	r2, r1
 8006162:	609a      	str	r2, [r3, #8]
 8006164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006166:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	f383 8810 	msr	PRIMASK, r3
}
 800616e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006174:	2b01      	cmp	r3, #1
 8006176:	d118      	bne.n	80061aa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006178:	f3ef 8310 	mrs	r3, PRIMASK
 800617c:	60bb      	str	r3, [r7, #8]
  return(result);
 800617e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006182:	2301      	movs	r3, #1
 8006184:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f383 8810 	msr	PRIMASK, r3
}
 800618c:	46c0      	nop			; (mov r8, r8)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2110      	movs	r1, #16
 800619a:	438a      	bics	r2, r1
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f383 8810 	msr	PRIMASK, r3
}
 80061a8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	665a      	str	r2, [r3, #100]	; 0x64
}
 80061bc:	46c0      	nop			; (mov r8, r8)
 80061be:	46bd      	mov	sp, r7
 80061c0:	b00e      	add	sp, #56	; 0x38
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	fffffedf 	.word	0xfffffedf

080061c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	225a      	movs	r2, #90	; 0x5a
 80061da:	2100      	movs	r1, #0
 80061dc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2252      	movs	r2, #82	; 0x52
 80061e2:	2100      	movs	r1, #0
 80061e4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	0018      	movs	r0, r3
 80061ea:	f7ff fbdb 	bl	80059a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ee:	46c0      	nop			; (mov r8, r8)
 80061f0:	46bd      	mov	sp, r7
 80061f2:	b004      	add	sp, #16
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b086      	sub	sp, #24
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006202:	60bb      	str	r3, [r7, #8]
  return(result);
 8006204:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	2301      	movs	r3, #1
 800620a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f383 8810 	msr	PRIMASK, r3
}
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2140      	movs	r1, #64	; 0x40
 8006220:	438a      	bics	r2, r1
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f383 8810 	msr	PRIMASK, r3
}
 800622e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2220      	movs	r2, #32
 8006234:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	0018      	movs	r0, r3
 8006240:	f7ff fba8 	bl	8005994 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006244:	46c0      	nop			; (mov r8, r8)
 8006246:	46bd      	mov	sp, r7
 8006248:	b006      	add	sp, #24
 800624a:	bd80      	pop	{r7, pc}

0800624c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b090      	sub	sp, #64	; 0x40
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006254:	203e      	movs	r0, #62	; 0x3e
 8006256:	183b      	adds	r3, r7, r0
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	215c      	movs	r1, #92	; 0x5c
 800625c:	5a52      	ldrh	r2, [r2, r1]
 800625e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006264:	2b22      	cmp	r3, #34	; 0x22
 8006266:	d000      	beq.n	800626a <UART_RxISR_8BIT+0x1e>
 8006268:	e095      	b.n	8006396 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	213c      	movs	r1, #60	; 0x3c
 8006270:	187b      	adds	r3, r7, r1
 8006272:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006274:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006276:	187b      	adds	r3, r7, r1
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	b2da      	uxtb	r2, r3
 800627c:	183b      	adds	r3, r7, r0
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b2d9      	uxtb	r1, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006286:	400a      	ands	r2, r1
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	225a      	movs	r2, #90	; 0x5a
 800629a:	5a9b      	ldrh	r3, [r3, r2]
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	b299      	uxth	r1, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	225a      	movs	r2, #90	; 0x5a
 80062a6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	225a      	movs	r2, #90	; 0x5a
 80062ac:	5a9b      	ldrh	r3, [r3, r2]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d178      	bne.n	80063a6 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062b4:	f3ef 8310 	mrs	r3, PRIMASK
 80062b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80062ba:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80062be:	2301      	movs	r3, #1
 80062c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	f383 8810 	msr	PRIMASK, r3
}
 80062c8:	46c0      	nop			; (mov r8, r8)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4936      	ldr	r1, [pc, #216]	; (80063b0 <UART_RxISR_8BIT+0x164>)
 80062d6:	400a      	ands	r2, r1
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	f383 8810 	msr	PRIMASK, r3
}
 80062e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062e6:	f3ef 8310 	mrs	r3, PRIMASK
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ee:	637b      	str	r3, [r7, #52]	; 0x34
 80062f0:	2301      	movs	r3, #1
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	f383 8810 	msr	PRIMASK, r3
}
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2101      	movs	r1, #1
 8006308:	438a      	bics	r2, r1
 800630a:	609a      	str	r2, [r3, #8]
 800630c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	f383 8810 	msr	PRIMASK, r3
}
 8006316:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2220      	movs	r2, #32
 800631c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006328:	2b01      	cmp	r3, #1
 800632a:	d12f      	bne.n	800638c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006332:	f3ef 8310 	mrs	r3, PRIMASK
 8006336:	60fb      	str	r3, [r7, #12]
  return(result);
 8006338:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800633a:	633b      	str	r3, [r7, #48]	; 0x30
 800633c:	2301      	movs	r3, #1
 800633e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f383 8810 	msr	PRIMASK, r3
}
 8006346:	46c0      	nop			; (mov r8, r8)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2110      	movs	r1, #16
 8006354:	438a      	bics	r2, r1
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f383 8810 	msr	PRIMASK, r3
}
 8006362:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	2210      	movs	r2, #16
 800636c:	4013      	ands	r3, r2
 800636e:	2b10      	cmp	r3, #16
 8006370:	d103      	bne.n	800637a <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2210      	movs	r2, #16
 8006378:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2258      	movs	r2, #88	; 0x58
 800637e:	5a9a      	ldrh	r2, [r3, r2]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	0011      	movs	r1, r2
 8006384:	0018      	movs	r0, r3
 8006386:	f7ff fb15 	bl	80059b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800638a:	e00c      	b.n	80063a6 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	0018      	movs	r0, r3
 8006390:	f7fb ffce 	bl	8002330 <HAL_UART_RxCpltCallback>
}
 8006394:	e007      	b.n	80063a6 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699a      	ldr	r2, [r3, #24]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2108      	movs	r1, #8
 80063a2:	430a      	orrs	r2, r1
 80063a4:	619a      	str	r2, [r3, #24]
}
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	46bd      	mov	sp, r7
 80063aa:	b010      	add	sp, #64	; 0x40
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	fffffedf 	.word	0xfffffedf

080063b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b090      	sub	sp, #64	; 0x40
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80063bc:	203e      	movs	r0, #62	; 0x3e
 80063be:	183b      	adds	r3, r7, r0
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	215c      	movs	r1, #92	; 0x5c
 80063c4:	5a52      	ldrh	r2, [r2, r1]
 80063c6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063cc:	2b22      	cmp	r3, #34	; 0x22
 80063ce:	d000      	beq.n	80063d2 <UART_RxISR_16BIT+0x1e>
 80063d0:	e095      	b.n	80064fe <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	213c      	movs	r1, #60	; 0x3c
 80063d8:	187b      	adds	r3, r7, r1
 80063da:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80063dc:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e2:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80063e4:	187b      	adds	r3, r7, r1
 80063e6:	183a      	adds	r2, r7, r0
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	8812      	ldrh	r2, [r2, #0]
 80063ec:	4013      	ands	r3, r2
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f8:	1c9a      	adds	r2, r3, #2
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	225a      	movs	r2, #90	; 0x5a
 8006402:	5a9b      	ldrh	r3, [r3, r2]
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b299      	uxth	r1, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	225a      	movs	r2, #90	; 0x5a
 800640e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	225a      	movs	r2, #90	; 0x5a
 8006414:	5a9b      	ldrh	r3, [r3, r2]
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d178      	bne.n	800650e <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800641c:	f3ef 8310 	mrs	r3, PRIMASK
 8006420:	617b      	str	r3, [r7, #20]
  return(result);
 8006422:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006424:	637b      	str	r3, [r7, #52]	; 0x34
 8006426:	2301      	movs	r3, #1
 8006428:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	f383 8810 	msr	PRIMASK, r3
}
 8006430:	46c0      	nop			; (mov r8, r8)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4936      	ldr	r1, [pc, #216]	; (8006518 <UART_RxISR_16BIT+0x164>)
 800643e:	400a      	ands	r2, r1
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006444:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	f383 8810 	msr	PRIMASK, r3
}
 800644c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800644e:	f3ef 8310 	mrs	r3, PRIMASK
 8006452:	623b      	str	r3, [r7, #32]
  return(result);
 8006454:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006456:	633b      	str	r3, [r7, #48]	; 0x30
 8006458:	2301      	movs	r3, #1
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	f383 8810 	msr	PRIMASK, r3
}
 8006462:	46c0      	nop			; (mov r8, r8)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2101      	movs	r1, #1
 8006470:	438a      	bics	r2, r1
 8006472:	609a      	str	r2, [r3, #8]
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	f383 8810 	msr	PRIMASK, r3
}
 800647e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2220      	movs	r2, #32
 8006484:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006490:	2b01      	cmp	r3, #1
 8006492:	d12f      	bne.n	80064f4 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800649a:	f3ef 8310 	mrs	r3, PRIMASK
 800649e:	60bb      	str	r3, [r7, #8]
  return(result);
 80064a0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a4:	2301      	movs	r3, #1
 80064a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f383 8810 	msr	PRIMASK, r3
}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2110      	movs	r1, #16
 80064bc:	438a      	bics	r2, r1
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f383 8810 	msr	PRIMASK, r3
}
 80064ca:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	2210      	movs	r2, #16
 80064d4:	4013      	ands	r3, r2
 80064d6:	2b10      	cmp	r3, #16
 80064d8:	d103      	bne.n	80064e2 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2210      	movs	r2, #16
 80064e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2258      	movs	r2, #88	; 0x58
 80064e6:	5a9a      	ldrh	r2, [r3, r2]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	0011      	movs	r1, r2
 80064ec:	0018      	movs	r0, r3
 80064ee:	f7ff fa61 	bl	80059b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064f2:	e00c      	b.n	800650e <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	0018      	movs	r0, r3
 80064f8:	f7fb ff1a 	bl	8002330 <HAL_UART_RxCpltCallback>
}
 80064fc:	e007      	b.n	800650e <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	699a      	ldr	r2, [r3, #24]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2108      	movs	r1, #8
 800650a:	430a      	orrs	r2, r1
 800650c:	619a      	str	r2, [r3, #24]
}
 800650e:	46c0      	nop			; (mov r8, r8)
 8006510:	46bd      	mov	sp, r7
 8006512:	b010      	add	sp, #64	; 0x40
 8006514:	bd80      	pop	{r7, pc}
 8006516:	46c0      	nop			; (mov r8, r8)
 8006518:	fffffedf 	.word	0xfffffedf

0800651c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006524:	46c0      	nop			; (mov r8, r8)
 8006526:	46bd      	mov	sp, r7
 8006528:	b002      	add	sp, #8
 800652a:	bd80      	pop	{r7, pc}

0800652c <__errno>:
 800652c:	4b01      	ldr	r3, [pc, #4]	; (8006534 <__errno+0x8>)
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	4770      	bx	lr
 8006532:	46c0      	nop			; (mov r8, r8)
 8006534:	2000000c 	.word	0x2000000c

08006538 <__libc_init_array>:
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	2600      	movs	r6, #0
 800653c:	4d0c      	ldr	r5, [pc, #48]	; (8006570 <__libc_init_array+0x38>)
 800653e:	4c0d      	ldr	r4, [pc, #52]	; (8006574 <__libc_init_array+0x3c>)
 8006540:	1b64      	subs	r4, r4, r5
 8006542:	10a4      	asrs	r4, r4, #2
 8006544:	42a6      	cmp	r6, r4
 8006546:	d109      	bne.n	800655c <__libc_init_array+0x24>
 8006548:	2600      	movs	r6, #0
 800654a:	f004 fd47 	bl	800afdc <_init>
 800654e:	4d0a      	ldr	r5, [pc, #40]	; (8006578 <__libc_init_array+0x40>)
 8006550:	4c0a      	ldr	r4, [pc, #40]	; (800657c <__libc_init_array+0x44>)
 8006552:	1b64      	subs	r4, r4, r5
 8006554:	10a4      	asrs	r4, r4, #2
 8006556:	42a6      	cmp	r6, r4
 8006558:	d105      	bne.n	8006566 <__libc_init_array+0x2e>
 800655a:	bd70      	pop	{r4, r5, r6, pc}
 800655c:	00b3      	lsls	r3, r6, #2
 800655e:	58eb      	ldr	r3, [r5, r3]
 8006560:	4798      	blx	r3
 8006562:	3601      	adds	r6, #1
 8006564:	e7ee      	b.n	8006544 <__libc_init_array+0xc>
 8006566:	00b3      	lsls	r3, r6, #2
 8006568:	58eb      	ldr	r3, [r5, r3]
 800656a:	4798      	blx	r3
 800656c:	3601      	adds	r6, #1
 800656e:	e7f2      	b.n	8006556 <__libc_init_array+0x1e>
 8006570:	0800b5ec 	.word	0x0800b5ec
 8006574:	0800b5ec 	.word	0x0800b5ec
 8006578:	0800b5ec 	.word	0x0800b5ec
 800657c:	0800b5f0 	.word	0x0800b5f0

08006580 <memset>:
 8006580:	0003      	movs	r3, r0
 8006582:	1882      	adds	r2, r0, r2
 8006584:	4293      	cmp	r3, r2
 8006586:	d100      	bne.n	800658a <memset+0xa>
 8006588:	4770      	bx	lr
 800658a:	7019      	strb	r1, [r3, #0]
 800658c:	3301      	adds	r3, #1
 800658e:	e7f9      	b.n	8006584 <memset+0x4>

08006590 <__cvt>:
 8006590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006592:	001e      	movs	r6, r3
 8006594:	2300      	movs	r3, #0
 8006596:	0014      	movs	r4, r2
 8006598:	b08b      	sub	sp, #44	; 0x2c
 800659a:	429e      	cmp	r6, r3
 800659c:	da04      	bge.n	80065a8 <__cvt+0x18>
 800659e:	2180      	movs	r1, #128	; 0x80
 80065a0:	0609      	lsls	r1, r1, #24
 80065a2:	1873      	adds	r3, r6, r1
 80065a4:	001e      	movs	r6, r3
 80065a6:	232d      	movs	r3, #45	; 0x2d
 80065a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80065ac:	7013      	strb	r3, [r2, #0]
 80065ae:	2320      	movs	r3, #32
 80065b0:	2203      	movs	r2, #3
 80065b2:	439f      	bics	r7, r3
 80065b4:	2f46      	cmp	r7, #70	; 0x46
 80065b6:	d007      	beq.n	80065c8 <__cvt+0x38>
 80065b8:	003b      	movs	r3, r7
 80065ba:	3b45      	subs	r3, #69	; 0x45
 80065bc:	4259      	negs	r1, r3
 80065be:	414b      	adcs	r3, r1
 80065c0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80065c2:	3a01      	subs	r2, #1
 80065c4:	18cb      	adds	r3, r1, r3
 80065c6:	9310      	str	r3, [sp, #64]	; 0x40
 80065c8:	ab09      	add	r3, sp, #36	; 0x24
 80065ca:	9304      	str	r3, [sp, #16]
 80065cc:	ab08      	add	r3, sp, #32
 80065ce:	9303      	str	r3, [sp, #12]
 80065d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065d2:	9200      	str	r2, [sp, #0]
 80065d4:	9302      	str	r3, [sp, #8]
 80065d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065d8:	0022      	movs	r2, r4
 80065da:	9301      	str	r3, [sp, #4]
 80065dc:	0033      	movs	r3, r6
 80065de:	f001 fdc3 	bl	8008168 <_dtoa_r>
 80065e2:	0005      	movs	r5, r0
 80065e4:	2f47      	cmp	r7, #71	; 0x47
 80065e6:	d102      	bne.n	80065ee <__cvt+0x5e>
 80065e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065ea:	07db      	lsls	r3, r3, #31
 80065ec:	d528      	bpl.n	8006640 <__cvt+0xb0>
 80065ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065f0:	18eb      	adds	r3, r5, r3
 80065f2:	9307      	str	r3, [sp, #28]
 80065f4:	2f46      	cmp	r7, #70	; 0x46
 80065f6:	d114      	bne.n	8006622 <__cvt+0x92>
 80065f8:	782b      	ldrb	r3, [r5, #0]
 80065fa:	2b30      	cmp	r3, #48	; 0x30
 80065fc:	d10c      	bne.n	8006618 <__cvt+0x88>
 80065fe:	2200      	movs	r2, #0
 8006600:	2300      	movs	r3, #0
 8006602:	0020      	movs	r0, r4
 8006604:	0031      	movs	r1, r6
 8006606:	f7f9 ff21 	bl	800044c <__aeabi_dcmpeq>
 800660a:	2800      	cmp	r0, #0
 800660c:	d104      	bne.n	8006618 <__cvt+0x88>
 800660e:	2301      	movs	r3, #1
 8006610:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006612:	1a9b      	subs	r3, r3, r2
 8006614:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800661a:	9a07      	ldr	r2, [sp, #28]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	18d3      	adds	r3, r2, r3
 8006620:	9307      	str	r3, [sp, #28]
 8006622:	2200      	movs	r2, #0
 8006624:	2300      	movs	r3, #0
 8006626:	0020      	movs	r0, r4
 8006628:	0031      	movs	r1, r6
 800662a:	f7f9 ff0f 	bl	800044c <__aeabi_dcmpeq>
 800662e:	2800      	cmp	r0, #0
 8006630:	d001      	beq.n	8006636 <__cvt+0xa6>
 8006632:	9b07      	ldr	r3, [sp, #28]
 8006634:	9309      	str	r3, [sp, #36]	; 0x24
 8006636:	2230      	movs	r2, #48	; 0x30
 8006638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800663a:	9907      	ldr	r1, [sp, #28]
 800663c:	428b      	cmp	r3, r1
 800663e:	d306      	bcc.n	800664e <__cvt+0xbe>
 8006640:	0028      	movs	r0, r5
 8006642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006644:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006646:	1b5b      	subs	r3, r3, r5
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	b00b      	add	sp, #44	; 0x2c
 800664c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664e:	1c59      	adds	r1, r3, #1
 8006650:	9109      	str	r1, [sp, #36]	; 0x24
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	e7f0      	b.n	8006638 <__cvt+0xa8>

08006656 <__exponent>:
 8006656:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006658:	1c83      	adds	r3, r0, #2
 800665a:	b087      	sub	sp, #28
 800665c:	9303      	str	r3, [sp, #12]
 800665e:	0005      	movs	r5, r0
 8006660:	000c      	movs	r4, r1
 8006662:	232b      	movs	r3, #43	; 0x2b
 8006664:	7002      	strb	r2, [r0, #0]
 8006666:	2900      	cmp	r1, #0
 8006668:	da01      	bge.n	800666e <__exponent+0x18>
 800666a:	424c      	negs	r4, r1
 800666c:	3302      	adds	r3, #2
 800666e:	706b      	strb	r3, [r5, #1]
 8006670:	2c09      	cmp	r4, #9
 8006672:	dd31      	ble.n	80066d8 <__exponent+0x82>
 8006674:	270a      	movs	r7, #10
 8006676:	ab04      	add	r3, sp, #16
 8006678:	1dde      	adds	r6, r3, #7
 800667a:	0020      	movs	r0, r4
 800667c:	0039      	movs	r1, r7
 800667e:	9601      	str	r6, [sp, #4]
 8006680:	f7f9 fece 	bl	8000420 <__aeabi_idivmod>
 8006684:	3e01      	subs	r6, #1
 8006686:	3130      	adds	r1, #48	; 0x30
 8006688:	0020      	movs	r0, r4
 800668a:	7031      	strb	r1, [r6, #0]
 800668c:	0039      	movs	r1, r7
 800668e:	9402      	str	r4, [sp, #8]
 8006690:	f7f9 fde0 	bl	8000254 <__divsi3>
 8006694:	9b02      	ldr	r3, [sp, #8]
 8006696:	0004      	movs	r4, r0
 8006698:	2b63      	cmp	r3, #99	; 0x63
 800669a:	dcee      	bgt.n	800667a <__exponent+0x24>
 800669c:	9b01      	ldr	r3, [sp, #4]
 800669e:	3430      	adds	r4, #48	; 0x30
 80066a0:	1e9a      	subs	r2, r3, #2
 80066a2:	0013      	movs	r3, r2
 80066a4:	9903      	ldr	r1, [sp, #12]
 80066a6:	7014      	strb	r4, [r2, #0]
 80066a8:	a804      	add	r0, sp, #16
 80066aa:	3007      	adds	r0, #7
 80066ac:	4298      	cmp	r0, r3
 80066ae:	d80e      	bhi.n	80066ce <__exponent+0x78>
 80066b0:	ab04      	add	r3, sp, #16
 80066b2:	3307      	adds	r3, #7
 80066b4:	2000      	movs	r0, #0
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d804      	bhi.n	80066c4 <__exponent+0x6e>
 80066ba:	ab04      	add	r3, sp, #16
 80066bc:	3009      	adds	r0, #9
 80066be:	18c0      	adds	r0, r0, r3
 80066c0:	9b01      	ldr	r3, [sp, #4]
 80066c2:	1ac0      	subs	r0, r0, r3
 80066c4:	9b03      	ldr	r3, [sp, #12]
 80066c6:	1818      	adds	r0, r3, r0
 80066c8:	1b40      	subs	r0, r0, r5
 80066ca:	b007      	add	sp, #28
 80066cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ce:	7818      	ldrb	r0, [r3, #0]
 80066d0:	3301      	adds	r3, #1
 80066d2:	7008      	strb	r0, [r1, #0]
 80066d4:	3101      	adds	r1, #1
 80066d6:	e7e7      	b.n	80066a8 <__exponent+0x52>
 80066d8:	2330      	movs	r3, #48	; 0x30
 80066da:	18e4      	adds	r4, r4, r3
 80066dc:	70ab      	strb	r3, [r5, #2]
 80066de:	1d28      	adds	r0, r5, #4
 80066e0:	70ec      	strb	r4, [r5, #3]
 80066e2:	e7f1      	b.n	80066c8 <__exponent+0x72>

080066e4 <_printf_float>:
 80066e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066e6:	b095      	sub	sp, #84	; 0x54
 80066e8:	000c      	movs	r4, r1
 80066ea:	9209      	str	r2, [sp, #36]	; 0x24
 80066ec:	001e      	movs	r6, r3
 80066ee:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80066f0:	0007      	movs	r7, r0
 80066f2:	f002 fec7 	bl	8009484 <_localeconv_r>
 80066f6:	6803      	ldr	r3, [r0, #0]
 80066f8:	0018      	movs	r0, r3
 80066fa:	930c      	str	r3, [sp, #48]	; 0x30
 80066fc:	f7f9 fd04 	bl	8000108 <strlen>
 8006700:	2300      	movs	r3, #0
 8006702:	9312      	str	r3, [sp, #72]	; 0x48
 8006704:	7e23      	ldrb	r3, [r4, #24]
 8006706:	2207      	movs	r2, #7
 8006708:	930a      	str	r3, [sp, #40]	; 0x28
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	900e      	str	r0, [sp, #56]	; 0x38
 800670e:	930d      	str	r3, [sp, #52]	; 0x34
 8006710:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006712:	682b      	ldr	r3, [r5, #0]
 8006714:	05c9      	lsls	r1, r1, #23
 8006716:	d547      	bpl.n	80067a8 <_printf_float+0xc4>
 8006718:	189b      	adds	r3, r3, r2
 800671a:	4393      	bics	r3, r2
 800671c:	001a      	movs	r2, r3
 800671e:	3208      	adds	r2, #8
 8006720:	602a      	str	r2, [r5, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	64a2      	str	r2, [r4, #72]	; 0x48
 8006728:	64e3      	str	r3, [r4, #76]	; 0x4c
 800672a:	2201      	movs	r2, #1
 800672c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800672e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006730:	930b      	str	r3, [sp, #44]	; 0x2c
 8006732:	006b      	lsls	r3, r5, #1
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	930f      	str	r3, [sp, #60]	; 0x3c
 8006738:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800673a:	4ba7      	ldr	r3, [pc, #668]	; (80069d8 <_printf_float+0x2f4>)
 800673c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800673e:	4252      	negs	r2, r2
 8006740:	f7fb fc5e 	bl	8002000 <__aeabi_dcmpun>
 8006744:	2800      	cmp	r0, #0
 8006746:	d131      	bne.n	80067ac <_printf_float+0xc8>
 8006748:	2201      	movs	r2, #1
 800674a:	4ba3      	ldr	r3, [pc, #652]	; (80069d8 <_printf_float+0x2f4>)
 800674c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800674e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006750:	4252      	negs	r2, r2
 8006752:	f7f9 fe8b 	bl	800046c <__aeabi_dcmple>
 8006756:	2800      	cmp	r0, #0
 8006758:	d128      	bne.n	80067ac <_printf_float+0xc8>
 800675a:	2200      	movs	r2, #0
 800675c:	2300      	movs	r3, #0
 800675e:	0029      	movs	r1, r5
 8006760:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006762:	f7f9 fe79 	bl	8000458 <__aeabi_dcmplt>
 8006766:	2800      	cmp	r0, #0
 8006768:	d003      	beq.n	8006772 <_printf_float+0x8e>
 800676a:	0023      	movs	r3, r4
 800676c:	222d      	movs	r2, #45	; 0x2d
 800676e:	3343      	adds	r3, #67	; 0x43
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006774:	4d99      	ldr	r5, [pc, #612]	; (80069dc <_printf_float+0x2f8>)
 8006776:	2b47      	cmp	r3, #71	; 0x47
 8006778:	d900      	bls.n	800677c <_printf_float+0x98>
 800677a:	4d99      	ldr	r5, [pc, #612]	; (80069e0 <_printf_float+0x2fc>)
 800677c:	2303      	movs	r3, #3
 800677e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006780:	6123      	str	r3, [r4, #16]
 8006782:	3301      	adds	r3, #1
 8006784:	439a      	bics	r2, r3
 8006786:	2300      	movs	r3, #0
 8006788:	6022      	str	r2, [r4, #0]
 800678a:	930b      	str	r3, [sp, #44]	; 0x2c
 800678c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800678e:	0021      	movs	r1, r4
 8006790:	0038      	movs	r0, r7
 8006792:	9600      	str	r6, [sp, #0]
 8006794:	aa13      	add	r2, sp, #76	; 0x4c
 8006796:	f000 f9e7 	bl	8006b68 <_printf_common>
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	d000      	beq.n	80067a0 <_printf_float+0xbc>
 800679e:	e0a2      	b.n	80068e6 <_printf_float+0x202>
 80067a0:	2001      	movs	r0, #1
 80067a2:	4240      	negs	r0, r0
 80067a4:	b015      	add	sp, #84	; 0x54
 80067a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a8:	3307      	adds	r3, #7
 80067aa:	e7b6      	b.n	800671a <_printf_float+0x36>
 80067ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067ae:	002b      	movs	r3, r5
 80067b0:	0010      	movs	r0, r2
 80067b2:	0029      	movs	r1, r5
 80067b4:	f7fb fc24 	bl	8002000 <__aeabi_dcmpun>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d00b      	beq.n	80067d4 <_printf_float+0xf0>
 80067bc:	2d00      	cmp	r5, #0
 80067be:	da03      	bge.n	80067c8 <_printf_float+0xe4>
 80067c0:	0023      	movs	r3, r4
 80067c2:	222d      	movs	r2, #45	; 0x2d
 80067c4:	3343      	adds	r3, #67	; 0x43
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ca:	4d86      	ldr	r5, [pc, #536]	; (80069e4 <_printf_float+0x300>)
 80067cc:	2b47      	cmp	r3, #71	; 0x47
 80067ce:	d9d5      	bls.n	800677c <_printf_float+0x98>
 80067d0:	4d85      	ldr	r5, [pc, #532]	; (80069e8 <_printf_float+0x304>)
 80067d2:	e7d3      	b.n	800677c <_printf_float+0x98>
 80067d4:	2220      	movs	r2, #32
 80067d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067d8:	6863      	ldr	r3, [r4, #4]
 80067da:	4391      	bics	r1, r2
 80067dc:	910f      	str	r1, [sp, #60]	; 0x3c
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	d149      	bne.n	8006876 <_printf_float+0x192>
 80067e2:	3307      	adds	r3, #7
 80067e4:	6063      	str	r3, [r4, #4]
 80067e6:	2380      	movs	r3, #128	; 0x80
 80067e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	4313      	orrs	r3, r2
 80067ee:	2200      	movs	r2, #0
 80067f0:	9206      	str	r2, [sp, #24]
 80067f2:	aa12      	add	r2, sp, #72	; 0x48
 80067f4:	9205      	str	r2, [sp, #20]
 80067f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067f8:	a908      	add	r1, sp, #32
 80067fa:	9204      	str	r2, [sp, #16]
 80067fc:	aa11      	add	r2, sp, #68	; 0x44
 80067fe:	9203      	str	r2, [sp, #12]
 8006800:	2223      	movs	r2, #35	; 0x23
 8006802:	6023      	str	r3, [r4, #0]
 8006804:	9301      	str	r3, [sp, #4]
 8006806:	6863      	ldr	r3, [r4, #4]
 8006808:	1852      	adds	r2, r2, r1
 800680a:	9202      	str	r2, [sp, #8]
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	0038      	movs	r0, r7
 8006810:	002b      	movs	r3, r5
 8006812:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006814:	f7ff febc 	bl	8006590 <__cvt>
 8006818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800681a:	0005      	movs	r5, r0
 800681c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800681e:	2b47      	cmp	r3, #71	; 0x47
 8006820:	d108      	bne.n	8006834 <_printf_float+0x150>
 8006822:	1ccb      	adds	r3, r1, #3
 8006824:	db02      	blt.n	800682c <_printf_float+0x148>
 8006826:	6863      	ldr	r3, [r4, #4]
 8006828:	4299      	cmp	r1, r3
 800682a:	dd48      	ble.n	80068be <_printf_float+0x1da>
 800682c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800682e:	3b02      	subs	r3, #2
 8006830:	b2db      	uxtb	r3, r3
 8006832:	930a      	str	r3, [sp, #40]	; 0x28
 8006834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006836:	2b65      	cmp	r3, #101	; 0x65
 8006838:	d824      	bhi.n	8006884 <_printf_float+0x1a0>
 800683a:	0020      	movs	r0, r4
 800683c:	001a      	movs	r2, r3
 800683e:	3901      	subs	r1, #1
 8006840:	3050      	adds	r0, #80	; 0x50
 8006842:	9111      	str	r1, [sp, #68]	; 0x44
 8006844:	f7ff ff07 	bl	8006656 <__exponent>
 8006848:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800684a:	900b      	str	r0, [sp, #44]	; 0x2c
 800684c:	1813      	adds	r3, r2, r0
 800684e:	6123      	str	r3, [r4, #16]
 8006850:	2a01      	cmp	r2, #1
 8006852:	dc02      	bgt.n	800685a <_printf_float+0x176>
 8006854:	6822      	ldr	r2, [r4, #0]
 8006856:	07d2      	lsls	r2, r2, #31
 8006858:	d501      	bpl.n	800685e <_printf_float+0x17a>
 800685a:	3301      	adds	r3, #1
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	2323      	movs	r3, #35	; 0x23
 8006860:	aa08      	add	r2, sp, #32
 8006862:	189b      	adds	r3, r3, r2
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d100      	bne.n	800686c <_printf_float+0x188>
 800686a:	e78f      	b.n	800678c <_printf_float+0xa8>
 800686c:	0023      	movs	r3, r4
 800686e:	222d      	movs	r2, #45	; 0x2d
 8006870:	3343      	adds	r3, #67	; 0x43
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	e78a      	b.n	800678c <_printf_float+0xa8>
 8006876:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006878:	2a47      	cmp	r2, #71	; 0x47
 800687a:	d1b4      	bne.n	80067e6 <_printf_float+0x102>
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1b2      	bne.n	80067e6 <_printf_float+0x102>
 8006880:	3301      	adds	r3, #1
 8006882:	e7af      	b.n	80067e4 <_printf_float+0x100>
 8006884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006886:	2b66      	cmp	r3, #102	; 0x66
 8006888:	d11b      	bne.n	80068c2 <_printf_float+0x1de>
 800688a:	6863      	ldr	r3, [r4, #4]
 800688c:	2900      	cmp	r1, #0
 800688e:	dd0d      	ble.n	80068ac <_printf_float+0x1c8>
 8006890:	6121      	str	r1, [r4, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d102      	bne.n	800689c <_printf_float+0x1b8>
 8006896:	6822      	ldr	r2, [r4, #0]
 8006898:	07d2      	lsls	r2, r2, #31
 800689a:	d502      	bpl.n	80068a2 <_printf_float+0x1be>
 800689c:	3301      	adds	r3, #1
 800689e:	1859      	adds	r1, r3, r1
 80068a0:	6121      	str	r1, [r4, #16]
 80068a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068a4:	65a3      	str	r3, [r4, #88]	; 0x58
 80068a6:	2300      	movs	r3, #0
 80068a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80068aa:	e7d8      	b.n	800685e <_printf_float+0x17a>
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d103      	bne.n	80068b8 <_printf_float+0x1d4>
 80068b0:	2201      	movs	r2, #1
 80068b2:	6821      	ldr	r1, [r4, #0]
 80068b4:	4211      	tst	r1, r2
 80068b6:	d000      	beq.n	80068ba <_printf_float+0x1d6>
 80068b8:	1c9a      	adds	r2, r3, #2
 80068ba:	6122      	str	r2, [r4, #16]
 80068bc:	e7f1      	b.n	80068a2 <_printf_float+0x1be>
 80068be:	2367      	movs	r3, #103	; 0x67
 80068c0:	930a      	str	r3, [sp, #40]	; 0x28
 80068c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068c6:	4293      	cmp	r3, r2
 80068c8:	db06      	blt.n	80068d8 <_printf_float+0x1f4>
 80068ca:	6822      	ldr	r2, [r4, #0]
 80068cc:	6123      	str	r3, [r4, #16]
 80068ce:	07d2      	lsls	r2, r2, #31
 80068d0:	d5e7      	bpl.n	80068a2 <_printf_float+0x1be>
 80068d2:	3301      	adds	r3, #1
 80068d4:	6123      	str	r3, [r4, #16]
 80068d6:	e7e4      	b.n	80068a2 <_printf_float+0x1be>
 80068d8:	2101      	movs	r1, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	dc01      	bgt.n	80068e2 <_printf_float+0x1fe>
 80068de:	1849      	adds	r1, r1, r1
 80068e0:	1ac9      	subs	r1, r1, r3
 80068e2:	1852      	adds	r2, r2, r1
 80068e4:	e7e9      	b.n	80068ba <_printf_float+0x1d6>
 80068e6:	6822      	ldr	r2, [r4, #0]
 80068e8:	0553      	lsls	r3, r2, #21
 80068ea:	d407      	bmi.n	80068fc <_printf_float+0x218>
 80068ec:	6923      	ldr	r3, [r4, #16]
 80068ee:	002a      	movs	r2, r5
 80068f0:	0038      	movs	r0, r7
 80068f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068f4:	47b0      	blx	r6
 80068f6:	1c43      	adds	r3, r0, #1
 80068f8:	d128      	bne.n	800694c <_printf_float+0x268>
 80068fa:	e751      	b.n	80067a0 <_printf_float+0xbc>
 80068fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068fe:	2b65      	cmp	r3, #101	; 0x65
 8006900:	d800      	bhi.n	8006904 <_printf_float+0x220>
 8006902:	e0e1      	b.n	8006ac8 <_printf_float+0x3e4>
 8006904:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006906:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006908:	2200      	movs	r2, #0
 800690a:	2300      	movs	r3, #0
 800690c:	f7f9 fd9e 	bl	800044c <__aeabi_dcmpeq>
 8006910:	2800      	cmp	r0, #0
 8006912:	d031      	beq.n	8006978 <_printf_float+0x294>
 8006914:	2301      	movs	r3, #1
 8006916:	0038      	movs	r0, r7
 8006918:	4a34      	ldr	r2, [pc, #208]	; (80069ec <_printf_float+0x308>)
 800691a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800691c:	47b0      	blx	r6
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	d100      	bne.n	8006924 <_printf_float+0x240>
 8006922:	e73d      	b.n	80067a0 <_printf_float+0xbc>
 8006924:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006926:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006928:	4293      	cmp	r3, r2
 800692a:	db02      	blt.n	8006932 <_printf_float+0x24e>
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	07db      	lsls	r3, r3, #31
 8006930:	d50c      	bpl.n	800694c <_printf_float+0x268>
 8006932:	0038      	movs	r0, r7
 8006934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006938:	9909      	ldr	r1, [sp, #36]	; 0x24
 800693a:	47b0      	blx	r6
 800693c:	2500      	movs	r5, #0
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	d100      	bne.n	8006944 <_printf_float+0x260>
 8006942:	e72d      	b.n	80067a0 <_printf_float+0xbc>
 8006944:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006946:	3b01      	subs	r3, #1
 8006948:	42ab      	cmp	r3, r5
 800694a:	dc0a      	bgt.n	8006962 <_printf_float+0x27e>
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	079b      	lsls	r3, r3, #30
 8006950:	d500      	bpl.n	8006954 <_printf_float+0x270>
 8006952:	e106      	b.n	8006b62 <_printf_float+0x47e>
 8006954:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006956:	68e0      	ldr	r0, [r4, #12]
 8006958:	4298      	cmp	r0, r3
 800695a:	db00      	blt.n	800695e <_printf_float+0x27a>
 800695c:	e722      	b.n	80067a4 <_printf_float+0xc0>
 800695e:	0018      	movs	r0, r3
 8006960:	e720      	b.n	80067a4 <_printf_float+0xc0>
 8006962:	0022      	movs	r2, r4
 8006964:	2301      	movs	r3, #1
 8006966:	0038      	movs	r0, r7
 8006968:	9909      	ldr	r1, [sp, #36]	; 0x24
 800696a:	321a      	adds	r2, #26
 800696c:	47b0      	blx	r6
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	d100      	bne.n	8006974 <_printf_float+0x290>
 8006972:	e715      	b.n	80067a0 <_printf_float+0xbc>
 8006974:	3501      	adds	r5, #1
 8006976:	e7e5      	b.n	8006944 <_printf_float+0x260>
 8006978:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800697a:	2b00      	cmp	r3, #0
 800697c:	dc38      	bgt.n	80069f0 <_printf_float+0x30c>
 800697e:	2301      	movs	r3, #1
 8006980:	0038      	movs	r0, r7
 8006982:	4a1a      	ldr	r2, [pc, #104]	; (80069ec <_printf_float+0x308>)
 8006984:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006986:	47b0      	blx	r6
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d100      	bne.n	800698e <_printf_float+0x2aa>
 800698c:	e708      	b.n	80067a0 <_printf_float+0xbc>
 800698e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006990:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006992:	4313      	orrs	r3, r2
 8006994:	d102      	bne.n	800699c <_printf_float+0x2b8>
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	07db      	lsls	r3, r3, #31
 800699a:	d5d7      	bpl.n	800694c <_printf_float+0x268>
 800699c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800699e:	0038      	movs	r0, r7
 80069a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069a4:	47b0      	blx	r6
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	d100      	bne.n	80069ac <_printf_float+0x2c8>
 80069aa:	e6f9      	b.n	80067a0 <_printf_float+0xbc>
 80069ac:	2300      	movs	r3, #0
 80069ae:	930a      	str	r3, [sp, #40]	; 0x28
 80069b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069b4:	425b      	negs	r3, r3
 80069b6:	4293      	cmp	r3, r2
 80069b8:	dc01      	bgt.n	80069be <_printf_float+0x2da>
 80069ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069bc:	e797      	b.n	80068ee <_printf_float+0x20a>
 80069be:	0022      	movs	r2, r4
 80069c0:	2301      	movs	r3, #1
 80069c2:	0038      	movs	r0, r7
 80069c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069c6:	321a      	adds	r2, #26
 80069c8:	47b0      	blx	r6
 80069ca:	1c43      	adds	r3, r0, #1
 80069cc:	d100      	bne.n	80069d0 <_printf_float+0x2ec>
 80069ce:	e6e7      	b.n	80067a0 <_printf_float+0xbc>
 80069d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d2:	3301      	adds	r3, #1
 80069d4:	e7eb      	b.n	80069ae <_printf_float+0x2ca>
 80069d6:	46c0      	nop			; (mov r8, r8)
 80069d8:	7fefffff 	.word	0x7fefffff
 80069dc:	0800b148 	.word	0x0800b148
 80069e0:	0800b14c 	.word	0x0800b14c
 80069e4:	0800b150 	.word	0x0800b150
 80069e8:	0800b154 	.word	0x0800b154
 80069ec:	0800b158 	.word	0x0800b158
 80069f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069f4:	920a      	str	r2, [sp, #40]	; 0x28
 80069f6:	429a      	cmp	r2, r3
 80069f8:	dd00      	ble.n	80069fc <_printf_float+0x318>
 80069fa:	930a      	str	r3, [sp, #40]	; 0x28
 80069fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	dc3c      	bgt.n	8006a7c <_printf_float+0x398>
 8006a02:	2300      	movs	r3, #0
 8006a04:	930d      	str	r3, [sp, #52]	; 0x34
 8006a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a08:	43db      	mvns	r3, r3
 8006a0a:	17db      	asrs	r3, r3, #31
 8006a0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a12:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a16:	4013      	ands	r3, r2
 8006a18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	dc34      	bgt.n	8006a8c <_printf_float+0x3a8>
 8006a22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a26:	4293      	cmp	r3, r2
 8006a28:	db3d      	blt.n	8006aa6 <_printf_float+0x3c2>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	07db      	lsls	r3, r3, #31
 8006a2e:	d43a      	bmi.n	8006aa6 <_printf_float+0x3c2>
 8006a30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a34:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	1a52      	subs	r2, r2, r1
 8006a3a:	920a      	str	r2, [sp, #40]	; 0x28
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	dd00      	ble.n	8006a42 <_printf_float+0x35e>
 8006a40:	930a      	str	r3, [sp, #40]	; 0x28
 8006a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	dc36      	bgt.n	8006ab6 <_printf_float+0x3d2>
 8006a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4a:	2500      	movs	r5, #0
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	17db      	asrs	r3, r3, #31
 8006a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a58:	1a9b      	subs	r3, r3, r2
 8006a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a5c:	400a      	ands	r2, r1
 8006a5e:	1a9b      	subs	r3, r3, r2
 8006a60:	42ab      	cmp	r3, r5
 8006a62:	dc00      	bgt.n	8006a66 <_printf_float+0x382>
 8006a64:	e772      	b.n	800694c <_printf_float+0x268>
 8006a66:	0022      	movs	r2, r4
 8006a68:	2301      	movs	r3, #1
 8006a6a:	0038      	movs	r0, r7
 8006a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a6e:	321a      	adds	r2, #26
 8006a70:	47b0      	blx	r6
 8006a72:	1c43      	adds	r3, r0, #1
 8006a74:	d100      	bne.n	8006a78 <_printf_float+0x394>
 8006a76:	e693      	b.n	80067a0 <_printf_float+0xbc>
 8006a78:	3501      	adds	r5, #1
 8006a7a:	e7ea      	b.n	8006a52 <_printf_float+0x36e>
 8006a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a7e:	002a      	movs	r2, r5
 8006a80:	0038      	movs	r0, r7
 8006a82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a84:	47b0      	blx	r6
 8006a86:	1c43      	adds	r3, r0, #1
 8006a88:	d1bb      	bne.n	8006a02 <_printf_float+0x31e>
 8006a8a:	e689      	b.n	80067a0 <_printf_float+0xbc>
 8006a8c:	0022      	movs	r2, r4
 8006a8e:	2301      	movs	r3, #1
 8006a90:	0038      	movs	r0, r7
 8006a92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a94:	321a      	adds	r2, #26
 8006a96:	47b0      	blx	r6
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d100      	bne.n	8006a9e <_printf_float+0x3ba>
 8006a9c:	e680      	b.n	80067a0 <_printf_float+0xbc>
 8006a9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	930d      	str	r3, [sp, #52]	; 0x34
 8006aa4:	e7b3      	b.n	8006a0e <_printf_float+0x32a>
 8006aa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006aa8:	0038      	movs	r0, r7
 8006aaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006aac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aae:	47b0      	blx	r6
 8006ab0:	1c43      	adds	r3, r0, #1
 8006ab2:	d1bd      	bne.n	8006a30 <_printf_float+0x34c>
 8006ab4:	e674      	b.n	80067a0 <_printf_float+0xbc>
 8006ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ab8:	0038      	movs	r0, r7
 8006aba:	18ea      	adds	r2, r5, r3
 8006abc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac0:	47b0      	blx	r6
 8006ac2:	1c43      	adds	r3, r0, #1
 8006ac4:	d1c0      	bne.n	8006a48 <_printf_float+0x364>
 8006ac6:	e66b      	b.n	80067a0 <_printf_float+0xbc>
 8006ac8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	dc02      	bgt.n	8006ad4 <_printf_float+0x3f0>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	421a      	tst	r2, r3
 8006ad2:	d034      	beq.n	8006b3e <_printf_float+0x45a>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	002a      	movs	r2, r5
 8006ad8:	0038      	movs	r0, r7
 8006ada:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006adc:	47b0      	blx	r6
 8006ade:	1c43      	adds	r3, r0, #1
 8006ae0:	d100      	bne.n	8006ae4 <_printf_float+0x400>
 8006ae2:	e65d      	b.n	80067a0 <_printf_float+0xbc>
 8006ae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ae6:	0038      	movs	r0, r7
 8006ae8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006aea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aec:	47b0      	blx	r6
 8006aee:	1c43      	adds	r3, r0, #1
 8006af0:	d100      	bne.n	8006af4 <_printf_float+0x410>
 8006af2:	e655      	b.n	80067a0 <_printf_float+0xbc>
 8006af4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006af6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006af8:	2200      	movs	r2, #0
 8006afa:	2300      	movs	r3, #0
 8006afc:	f7f9 fca6 	bl	800044c <__aeabi_dcmpeq>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d11a      	bne.n	8006b3a <_printf_float+0x456>
 8006b04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b06:	1c6a      	adds	r2, r5, #1
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	0038      	movs	r0, r7
 8006b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b0e:	47b0      	blx	r6
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d10e      	bne.n	8006b32 <_printf_float+0x44e>
 8006b14:	e644      	b.n	80067a0 <_printf_float+0xbc>
 8006b16:	0022      	movs	r2, r4
 8006b18:	2301      	movs	r3, #1
 8006b1a:	0038      	movs	r0, r7
 8006b1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b1e:	321a      	adds	r2, #26
 8006b20:	47b0      	blx	r6
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	d100      	bne.n	8006b28 <_printf_float+0x444>
 8006b26:	e63b      	b.n	80067a0 <_printf_float+0xbc>
 8006b28:	3501      	adds	r5, #1
 8006b2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	42ab      	cmp	r3, r5
 8006b30:	dcf1      	bgt.n	8006b16 <_printf_float+0x432>
 8006b32:	0022      	movs	r2, r4
 8006b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b36:	3250      	adds	r2, #80	; 0x50
 8006b38:	e6da      	b.n	80068f0 <_printf_float+0x20c>
 8006b3a:	2500      	movs	r5, #0
 8006b3c:	e7f5      	b.n	8006b2a <_printf_float+0x446>
 8006b3e:	002a      	movs	r2, r5
 8006b40:	e7e3      	b.n	8006b0a <_printf_float+0x426>
 8006b42:	0022      	movs	r2, r4
 8006b44:	2301      	movs	r3, #1
 8006b46:	0038      	movs	r0, r7
 8006b48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b4a:	3219      	adds	r2, #25
 8006b4c:	47b0      	blx	r6
 8006b4e:	1c43      	adds	r3, r0, #1
 8006b50:	d100      	bne.n	8006b54 <_printf_float+0x470>
 8006b52:	e625      	b.n	80067a0 <_printf_float+0xbc>
 8006b54:	3501      	adds	r5, #1
 8006b56:	68e3      	ldr	r3, [r4, #12]
 8006b58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b5a:	1a9b      	subs	r3, r3, r2
 8006b5c:	42ab      	cmp	r3, r5
 8006b5e:	dcf0      	bgt.n	8006b42 <_printf_float+0x45e>
 8006b60:	e6f8      	b.n	8006954 <_printf_float+0x270>
 8006b62:	2500      	movs	r5, #0
 8006b64:	e7f7      	b.n	8006b56 <_printf_float+0x472>
 8006b66:	46c0      	nop			; (mov r8, r8)

08006b68 <_printf_common>:
 8006b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b6a:	0015      	movs	r5, r2
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	688a      	ldr	r2, [r1, #8]
 8006b70:	690b      	ldr	r3, [r1, #16]
 8006b72:	000c      	movs	r4, r1
 8006b74:	9000      	str	r0, [sp, #0]
 8006b76:	4293      	cmp	r3, r2
 8006b78:	da00      	bge.n	8006b7c <_printf_common+0x14>
 8006b7a:	0013      	movs	r3, r2
 8006b7c:	0022      	movs	r2, r4
 8006b7e:	602b      	str	r3, [r5, #0]
 8006b80:	3243      	adds	r2, #67	; 0x43
 8006b82:	7812      	ldrb	r2, [r2, #0]
 8006b84:	2a00      	cmp	r2, #0
 8006b86:	d001      	beq.n	8006b8c <_printf_common+0x24>
 8006b88:	3301      	adds	r3, #1
 8006b8a:	602b      	str	r3, [r5, #0]
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	069b      	lsls	r3, r3, #26
 8006b90:	d502      	bpl.n	8006b98 <_printf_common+0x30>
 8006b92:	682b      	ldr	r3, [r5, #0]
 8006b94:	3302      	adds	r3, #2
 8006b96:	602b      	str	r3, [r5, #0]
 8006b98:	6822      	ldr	r2, [r4, #0]
 8006b9a:	2306      	movs	r3, #6
 8006b9c:	0017      	movs	r7, r2
 8006b9e:	401f      	ands	r7, r3
 8006ba0:	421a      	tst	r2, r3
 8006ba2:	d027      	beq.n	8006bf4 <_printf_common+0x8c>
 8006ba4:	0023      	movs	r3, r4
 8006ba6:	3343      	adds	r3, #67	; 0x43
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	1e5a      	subs	r2, r3, #1
 8006bac:	4193      	sbcs	r3, r2
 8006bae:	6822      	ldr	r2, [r4, #0]
 8006bb0:	0692      	lsls	r2, r2, #26
 8006bb2:	d430      	bmi.n	8006c16 <_printf_common+0xae>
 8006bb4:	0022      	movs	r2, r4
 8006bb6:	9901      	ldr	r1, [sp, #4]
 8006bb8:	9800      	ldr	r0, [sp, #0]
 8006bba:	9e08      	ldr	r6, [sp, #32]
 8006bbc:	3243      	adds	r2, #67	; 0x43
 8006bbe:	47b0      	blx	r6
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	d025      	beq.n	8006c10 <_printf_common+0xa8>
 8006bc4:	2306      	movs	r3, #6
 8006bc6:	6820      	ldr	r0, [r4, #0]
 8006bc8:	682a      	ldr	r2, [r5, #0]
 8006bca:	68e1      	ldr	r1, [r4, #12]
 8006bcc:	2500      	movs	r5, #0
 8006bce:	4003      	ands	r3, r0
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d103      	bne.n	8006bdc <_printf_common+0x74>
 8006bd4:	1a8d      	subs	r5, r1, r2
 8006bd6:	43eb      	mvns	r3, r5
 8006bd8:	17db      	asrs	r3, r3, #31
 8006bda:	401d      	ands	r5, r3
 8006bdc:	68a3      	ldr	r3, [r4, #8]
 8006bde:	6922      	ldr	r2, [r4, #16]
 8006be0:	4293      	cmp	r3, r2
 8006be2:	dd01      	ble.n	8006be8 <_printf_common+0x80>
 8006be4:	1a9b      	subs	r3, r3, r2
 8006be6:	18ed      	adds	r5, r5, r3
 8006be8:	2700      	movs	r7, #0
 8006bea:	42bd      	cmp	r5, r7
 8006bec:	d120      	bne.n	8006c30 <_printf_common+0xc8>
 8006bee:	2000      	movs	r0, #0
 8006bf0:	e010      	b.n	8006c14 <_printf_common+0xac>
 8006bf2:	3701      	adds	r7, #1
 8006bf4:	68e3      	ldr	r3, [r4, #12]
 8006bf6:	682a      	ldr	r2, [r5, #0]
 8006bf8:	1a9b      	subs	r3, r3, r2
 8006bfa:	42bb      	cmp	r3, r7
 8006bfc:	ddd2      	ble.n	8006ba4 <_printf_common+0x3c>
 8006bfe:	0022      	movs	r2, r4
 8006c00:	2301      	movs	r3, #1
 8006c02:	9901      	ldr	r1, [sp, #4]
 8006c04:	9800      	ldr	r0, [sp, #0]
 8006c06:	9e08      	ldr	r6, [sp, #32]
 8006c08:	3219      	adds	r2, #25
 8006c0a:	47b0      	blx	r6
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d1f0      	bne.n	8006bf2 <_printf_common+0x8a>
 8006c10:	2001      	movs	r0, #1
 8006c12:	4240      	negs	r0, r0
 8006c14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c16:	2030      	movs	r0, #48	; 0x30
 8006c18:	18e1      	adds	r1, r4, r3
 8006c1a:	3143      	adds	r1, #67	; 0x43
 8006c1c:	7008      	strb	r0, [r1, #0]
 8006c1e:	0021      	movs	r1, r4
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	3145      	adds	r1, #69	; 0x45
 8006c24:	7809      	ldrb	r1, [r1, #0]
 8006c26:	18a2      	adds	r2, r4, r2
 8006c28:	3243      	adds	r2, #67	; 0x43
 8006c2a:	3302      	adds	r3, #2
 8006c2c:	7011      	strb	r1, [r2, #0]
 8006c2e:	e7c1      	b.n	8006bb4 <_printf_common+0x4c>
 8006c30:	0022      	movs	r2, r4
 8006c32:	2301      	movs	r3, #1
 8006c34:	9901      	ldr	r1, [sp, #4]
 8006c36:	9800      	ldr	r0, [sp, #0]
 8006c38:	9e08      	ldr	r6, [sp, #32]
 8006c3a:	321a      	adds	r2, #26
 8006c3c:	47b0      	blx	r6
 8006c3e:	1c43      	adds	r3, r0, #1
 8006c40:	d0e6      	beq.n	8006c10 <_printf_common+0xa8>
 8006c42:	3701      	adds	r7, #1
 8006c44:	e7d1      	b.n	8006bea <_printf_common+0x82>
	...

08006c48 <_printf_i>:
 8006c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c4a:	b08b      	sub	sp, #44	; 0x2c
 8006c4c:	9206      	str	r2, [sp, #24]
 8006c4e:	000a      	movs	r2, r1
 8006c50:	3243      	adds	r2, #67	; 0x43
 8006c52:	9307      	str	r3, [sp, #28]
 8006c54:	9005      	str	r0, [sp, #20]
 8006c56:	9204      	str	r2, [sp, #16]
 8006c58:	7e0a      	ldrb	r2, [r1, #24]
 8006c5a:	000c      	movs	r4, r1
 8006c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c5e:	2a78      	cmp	r2, #120	; 0x78
 8006c60:	d807      	bhi.n	8006c72 <_printf_i+0x2a>
 8006c62:	2a62      	cmp	r2, #98	; 0x62
 8006c64:	d809      	bhi.n	8006c7a <_printf_i+0x32>
 8006c66:	2a00      	cmp	r2, #0
 8006c68:	d100      	bne.n	8006c6c <_printf_i+0x24>
 8006c6a:	e0c1      	b.n	8006df0 <_printf_i+0x1a8>
 8006c6c:	2a58      	cmp	r2, #88	; 0x58
 8006c6e:	d100      	bne.n	8006c72 <_printf_i+0x2a>
 8006c70:	e08c      	b.n	8006d8c <_printf_i+0x144>
 8006c72:	0026      	movs	r6, r4
 8006c74:	3642      	adds	r6, #66	; 0x42
 8006c76:	7032      	strb	r2, [r6, #0]
 8006c78:	e022      	b.n	8006cc0 <_printf_i+0x78>
 8006c7a:	0010      	movs	r0, r2
 8006c7c:	3863      	subs	r0, #99	; 0x63
 8006c7e:	2815      	cmp	r0, #21
 8006c80:	d8f7      	bhi.n	8006c72 <_printf_i+0x2a>
 8006c82:	f7f9 fa53 	bl	800012c <__gnu_thumb1_case_shi>
 8006c86:	0016      	.short	0x0016
 8006c88:	fff6001f 	.word	0xfff6001f
 8006c8c:	fff6fff6 	.word	0xfff6fff6
 8006c90:	001ffff6 	.word	0x001ffff6
 8006c94:	fff6fff6 	.word	0xfff6fff6
 8006c98:	fff6fff6 	.word	0xfff6fff6
 8006c9c:	003600a8 	.word	0x003600a8
 8006ca0:	fff6009a 	.word	0xfff6009a
 8006ca4:	00b9fff6 	.word	0x00b9fff6
 8006ca8:	0036fff6 	.word	0x0036fff6
 8006cac:	fff6fff6 	.word	0xfff6fff6
 8006cb0:	009e      	.short	0x009e
 8006cb2:	0026      	movs	r6, r4
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	3642      	adds	r6, #66	; 0x42
 8006cb8:	1d11      	adds	r1, r2, #4
 8006cba:	6019      	str	r1, [r3, #0]
 8006cbc:	6813      	ldr	r3, [r2, #0]
 8006cbe:	7033      	strb	r3, [r6, #0]
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0a7      	b.n	8006e14 <_printf_i+0x1cc>
 8006cc4:	6808      	ldr	r0, [r1, #0]
 8006cc6:	6819      	ldr	r1, [r3, #0]
 8006cc8:	1d0a      	adds	r2, r1, #4
 8006cca:	0605      	lsls	r5, r0, #24
 8006ccc:	d50b      	bpl.n	8006ce6 <_printf_i+0x9e>
 8006cce:	680d      	ldr	r5, [r1, #0]
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	2d00      	cmp	r5, #0
 8006cd4:	da03      	bge.n	8006cde <_printf_i+0x96>
 8006cd6:	232d      	movs	r3, #45	; 0x2d
 8006cd8:	9a04      	ldr	r2, [sp, #16]
 8006cda:	426d      	negs	r5, r5
 8006cdc:	7013      	strb	r3, [r2, #0]
 8006cde:	4b61      	ldr	r3, [pc, #388]	; (8006e64 <_printf_i+0x21c>)
 8006ce0:	270a      	movs	r7, #10
 8006ce2:	9303      	str	r3, [sp, #12]
 8006ce4:	e01b      	b.n	8006d1e <_printf_i+0xd6>
 8006ce6:	680d      	ldr	r5, [r1, #0]
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	0641      	lsls	r1, r0, #25
 8006cec:	d5f1      	bpl.n	8006cd2 <_printf_i+0x8a>
 8006cee:	b22d      	sxth	r5, r5
 8006cf0:	e7ef      	b.n	8006cd2 <_printf_i+0x8a>
 8006cf2:	680d      	ldr	r5, [r1, #0]
 8006cf4:	6819      	ldr	r1, [r3, #0]
 8006cf6:	1d08      	adds	r0, r1, #4
 8006cf8:	6018      	str	r0, [r3, #0]
 8006cfa:	062e      	lsls	r6, r5, #24
 8006cfc:	d501      	bpl.n	8006d02 <_printf_i+0xba>
 8006cfe:	680d      	ldr	r5, [r1, #0]
 8006d00:	e003      	b.n	8006d0a <_printf_i+0xc2>
 8006d02:	066d      	lsls	r5, r5, #25
 8006d04:	d5fb      	bpl.n	8006cfe <_printf_i+0xb6>
 8006d06:	680d      	ldr	r5, [r1, #0]
 8006d08:	b2ad      	uxth	r5, r5
 8006d0a:	4b56      	ldr	r3, [pc, #344]	; (8006e64 <_printf_i+0x21c>)
 8006d0c:	2708      	movs	r7, #8
 8006d0e:	9303      	str	r3, [sp, #12]
 8006d10:	2a6f      	cmp	r2, #111	; 0x6f
 8006d12:	d000      	beq.n	8006d16 <_printf_i+0xce>
 8006d14:	3702      	adds	r7, #2
 8006d16:	0023      	movs	r3, r4
 8006d18:	2200      	movs	r2, #0
 8006d1a:	3343      	adds	r3, #67	; 0x43
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	6863      	ldr	r3, [r4, #4]
 8006d20:	60a3      	str	r3, [r4, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	db03      	blt.n	8006d2e <_printf_i+0xe6>
 8006d26:	2204      	movs	r2, #4
 8006d28:	6821      	ldr	r1, [r4, #0]
 8006d2a:	4391      	bics	r1, r2
 8006d2c:	6021      	str	r1, [r4, #0]
 8006d2e:	2d00      	cmp	r5, #0
 8006d30:	d102      	bne.n	8006d38 <_printf_i+0xf0>
 8006d32:	9e04      	ldr	r6, [sp, #16]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00c      	beq.n	8006d52 <_printf_i+0x10a>
 8006d38:	9e04      	ldr	r6, [sp, #16]
 8006d3a:	0028      	movs	r0, r5
 8006d3c:	0039      	movs	r1, r7
 8006d3e:	f7f9 fa85 	bl	800024c <__aeabi_uidivmod>
 8006d42:	9b03      	ldr	r3, [sp, #12]
 8006d44:	3e01      	subs	r6, #1
 8006d46:	5c5b      	ldrb	r3, [r3, r1]
 8006d48:	7033      	strb	r3, [r6, #0]
 8006d4a:	002b      	movs	r3, r5
 8006d4c:	0005      	movs	r5, r0
 8006d4e:	429f      	cmp	r7, r3
 8006d50:	d9f3      	bls.n	8006d3a <_printf_i+0xf2>
 8006d52:	2f08      	cmp	r7, #8
 8006d54:	d109      	bne.n	8006d6a <_printf_i+0x122>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	07db      	lsls	r3, r3, #31
 8006d5a:	d506      	bpl.n	8006d6a <_printf_i+0x122>
 8006d5c:	6863      	ldr	r3, [r4, #4]
 8006d5e:	6922      	ldr	r2, [r4, #16]
 8006d60:	4293      	cmp	r3, r2
 8006d62:	dc02      	bgt.n	8006d6a <_printf_i+0x122>
 8006d64:	2330      	movs	r3, #48	; 0x30
 8006d66:	3e01      	subs	r6, #1
 8006d68:	7033      	strb	r3, [r6, #0]
 8006d6a:	9b04      	ldr	r3, [sp, #16]
 8006d6c:	1b9b      	subs	r3, r3, r6
 8006d6e:	6123      	str	r3, [r4, #16]
 8006d70:	9b07      	ldr	r3, [sp, #28]
 8006d72:	0021      	movs	r1, r4
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	9805      	ldr	r0, [sp, #20]
 8006d78:	9b06      	ldr	r3, [sp, #24]
 8006d7a:	aa09      	add	r2, sp, #36	; 0x24
 8006d7c:	f7ff fef4 	bl	8006b68 <_printf_common>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d14c      	bne.n	8006e1e <_printf_i+0x1d6>
 8006d84:	2001      	movs	r0, #1
 8006d86:	4240      	negs	r0, r0
 8006d88:	b00b      	add	sp, #44	; 0x2c
 8006d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d8c:	3145      	adds	r1, #69	; 0x45
 8006d8e:	700a      	strb	r2, [r1, #0]
 8006d90:	4a34      	ldr	r2, [pc, #208]	; (8006e64 <_printf_i+0x21c>)
 8006d92:	9203      	str	r2, [sp, #12]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	6821      	ldr	r1, [r4, #0]
 8006d98:	ca20      	ldmia	r2!, {r5}
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	0608      	lsls	r0, r1, #24
 8006d9e:	d516      	bpl.n	8006dce <_printf_i+0x186>
 8006da0:	07cb      	lsls	r3, r1, #31
 8006da2:	d502      	bpl.n	8006daa <_printf_i+0x162>
 8006da4:	2320      	movs	r3, #32
 8006da6:	4319      	orrs	r1, r3
 8006da8:	6021      	str	r1, [r4, #0]
 8006daa:	2710      	movs	r7, #16
 8006dac:	2d00      	cmp	r5, #0
 8006dae:	d1b2      	bne.n	8006d16 <_printf_i+0xce>
 8006db0:	2320      	movs	r3, #32
 8006db2:	6822      	ldr	r2, [r4, #0]
 8006db4:	439a      	bics	r2, r3
 8006db6:	6022      	str	r2, [r4, #0]
 8006db8:	e7ad      	b.n	8006d16 <_printf_i+0xce>
 8006dba:	2220      	movs	r2, #32
 8006dbc:	6809      	ldr	r1, [r1, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	6022      	str	r2, [r4, #0]
 8006dc2:	0022      	movs	r2, r4
 8006dc4:	2178      	movs	r1, #120	; 0x78
 8006dc6:	3245      	adds	r2, #69	; 0x45
 8006dc8:	7011      	strb	r1, [r2, #0]
 8006dca:	4a27      	ldr	r2, [pc, #156]	; (8006e68 <_printf_i+0x220>)
 8006dcc:	e7e1      	b.n	8006d92 <_printf_i+0x14a>
 8006dce:	0648      	lsls	r0, r1, #25
 8006dd0:	d5e6      	bpl.n	8006da0 <_printf_i+0x158>
 8006dd2:	b2ad      	uxth	r5, r5
 8006dd4:	e7e4      	b.n	8006da0 <_printf_i+0x158>
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	680d      	ldr	r5, [r1, #0]
 8006dda:	1d10      	adds	r0, r2, #4
 8006ddc:	6949      	ldr	r1, [r1, #20]
 8006dde:	6018      	str	r0, [r3, #0]
 8006de0:	6813      	ldr	r3, [r2, #0]
 8006de2:	062e      	lsls	r6, r5, #24
 8006de4:	d501      	bpl.n	8006dea <_printf_i+0x1a2>
 8006de6:	6019      	str	r1, [r3, #0]
 8006de8:	e002      	b.n	8006df0 <_printf_i+0x1a8>
 8006dea:	066d      	lsls	r5, r5, #25
 8006dec:	d5fb      	bpl.n	8006de6 <_printf_i+0x19e>
 8006dee:	8019      	strh	r1, [r3, #0]
 8006df0:	2300      	movs	r3, #0
 8006df2:	9e04      	ldr	r6, [sp, #16]
 8006df4:	6123      	str	r3, [r4, #16]
 8006df6:	e7bb      	b.n	8006d70 <_printf_i+0x128>
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	1d11      	adds	r1, r2, #4
 8006dfc:	6019      	str	r1, [r3, #0]
 8006dfe:	6816      	ldr	r6, [r2, #0]
 8006e00:	2100      	movs	r1, #0
 8006e02:	0030      	movs	r0, r6
 8006e04:	6862      	ldr	r2, [r4, #4]
 8006e06:	f002 fb5d 	bl	80094c4 <memchr>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d001      	beq.n	8006e12 <_printf_i+0x1ca>
 8006e0e:	1b80      	subs	r0, r0, r6
 8006e10:	6060      	str	r0, [r4, #4]
 8006e12:	6863      	ldr	r3, [r4, #4]
 8006e14:	6123      	str	r3, [r4, #16]
 8006e16:	2300      	movs	r3, #0
 8006e18:	9a04      	ldr	r2, [sp, #16]
 8006e1a:	7013      	strb	r3, [r2, #0]
 8006e1c:	e7a8      	b.n	8006d70 <_printf_i+0x128>
 8006e1e:	6923      	ldr	r3, [r4, #16]
 8006e20:	0032      	movs	r2, r6
 8006e22:	9906      	ldr	r1, [sp, #24]
 8006e24:	9805      	ldr	r0, [sp, #20]
 8006e26:	9d07      	ldr	r5, [sp, #28]
 8006e28:	47a8      	blx	r5
 8006e2a:	1c43      	adds	r3, r0, #1
 8006e2c:	d0aa      	beq.n	8006d84 <_printf_i+0x13c>
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	079b      	lsls	r3, r3, #30
 8006e32:	d415      	bmi.n	8006e60 <_printf_i+0x218>
 8006e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e36:	68e0      	ldr	r0, [r4, #12]
 8006e38:	4298      	cmp	r0, r3
 8006e3a:	daa5      	bge.n	8006d88 <_printf_i+0x140>
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	e7a3      	b.n	8006d88 <_printf_i+0x140>
 8006e40:	0022      	movs	r2, r4
 8006e42:	2301      	movs	r3, #1
 8006e44:	9906      	ldr	r1, [sp, #24]
 8006e46:	9805      	ldr	r0, [sp, #20]
 8006e48:	9e07      	ldr	r6, [sp, #28]
 8006e4a:	3219      	adds	r2, #25
 8006e4c:	47b0      	blx	r6
 8006e4e:	1c43      	adds	r3, r0, #1
 8006e50:	d098      	beq.n	8006d84 <_printf_i+0x13c>
 8006e52:	3501      	adds	r5, #1
 8006e54:	68e3      	ldr	r3, [r4, #12]
 8006e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e58:	1a9b      	subs	r3, r3, r2
 8006e5a:	42ab      	cmp	r3, r5
 8006e5c:	dcf0      	bgt.n	8006e40 <_printf_i+0x1f8>
 8006e5e:	e7e9      	b.n	8006e34 <_printf_i+0x1ec>
 8006e60:	2500      	movs	r5, #0
 8006e62:	e7f7      	b.n	8006e54 <_printf_i+0x20c>
 8006e64:	0800b15a 	.word	0x0800b15a
 8006e68:	0800b16b 	.word	0x0800b16b

08006e6c <_scanf_float>:
 8006e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e6e:	b08b      	sub	sp, #44	; 0x2c
 8006e70:	0015      	movs	r5, r2
 8006e72:	9001      	str	r0, [sp, #4]
 8006e74:	22ae      	movs	r2, #174	; 0xae
 8006e76:	2000      	movs	r0, #0
 8006e78:	9306      	str	r3, [sp, #24]
 8006e7a:	688b      	ldr	r3, [r1, #8]
 8006e7c:	000e      	movs	r6, r1
 8006e7e:	1e59      	subs	r1, r3, #1
 8006e80:	0052      	lsls	r2, r2, #1
 8006e82:	9005      	str	r0, [sp, #20]
 8006e84:	4291      	cmp	r1, r2
 8006e86:	d905      	bls.n	8006e94 <_scanf_float+0x28>
 8006e88:	3b5e      	subs	r3, #94	; 0x5e
 8006e8a:	3bff      	subs	r3, #255	; 0xff
 8006e8c:	9305      	str	r3, [sp, #20]
 8006e8e:	235e      	movs	r3, #94	; 0x5e
 8006e90:	33ff      	adds	r3, #255	; 0xff
 8006e92:	60b3      	str	r3, [r6, #8]
 8006e94:	23f0      	movs	r3, #240	; 0xf0
 8006e96:	6832      	ldr	r2, [r6, #0]
 8006e98:	00db      	lsls	r3, r3, #3
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	6033      	str	r3, [r6, #0]
 8006e9e:	0033      	movs	r3, r6
 8006ea0:	2400      	movs	r4, #0
 8006ea2:	331c      	adds	r3, #28
 8006ea4:	001f      	movs	r7, r3
 8006ea6:	9303      	str	r3, [sp, #12]
 8006ea8:	9402      	str	r4, [sp, #8]
 8006eaa:	9408      	str	r4, [sp, #32]
 8006eac:	9407      	str	r4, [sp, #28]
 8006eae:	9400      	str	r4, [sp, #0]
 8006eb0:	9404      	str	r4, [sp, #16]
 8006eb2:	68b2      	ldr	r2, [r6, #8]
 8006eb4:	2a00      	cmp	r2, #0
 8006eb6:	d00a      	beq.n	8006ece <_scanf_float+0x62>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	2b4e      	cmp	r3, #78	; 0x4e
 8006ebe:	d844      	bhi.n	8006f4a <_scanf_float+0xde>
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	2b40      	cmp	r3, #64	; 0x40
 8006ec4:	d82c      	bhi.n	8006f20 <_scanf_float+0xb4>
 8006ec6:	382b      	subs	r0, #43	; 0x2b
 8006ec8:	b2c1      	uxtb	r1, r0
 8006eca:	290e      	cmp	r1, #14
 8006ecc:	d92a      	bls.n	8006f24 <_scanf_float+0xb8>
 8006ece:	9b00      	ldr	r3, [sp, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <_scanf_float+0x70>
 8006ed4:	6832      	ldr	r2, [r6, #0]
 8006ed6:	4ba4      	ldr	r3, [pc, #656]	; (8007168 <_scanf_float+0x2fc>)
 8006ed8:	4013      	ands	r3, r2
 8006eda:	6033      	str	r3, [r6, #0]
 8006edc:	9b02      	ldr	r3, [sp, #8]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d900      	bls.n	8006ee6 <_scanf_float+0x7a>
 8006ee4:	e0f9      	b.n	80070da <_scanf_float+0x26e>
 8006ee6:	24be      	movs	r4, #190	; 0xbe
 8006ee8:	0064      	lsls	r4, r4, #1
 8006eea:	9b03      	ldr	r3, [sp, #12]
 8006eec:	429f      	cmp	r7, r3
 8006eee:	d900      	bls.n	8006ef2 <_scanf_float+0x86>
 8006ef0:	e0e9      	b.n	80070c6 <_scanf_float+0x25a>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	9302      	str	r3, [sp, #8]
 8006ef6:	e185      	b.n	8007204 <_scanf_float+0x398>
 8006ef8:	0018      	movs	r0, r3
 8006efa:	3861      	subs	r0, #97	; 0x61
 8006efc:	280d      	cmp	r0, #13
 8006efe:	d8e6      	bhi.n	8006ece <_scanf_float+0x62>
 8006f00:	f7f9 f914 	bl	800012c <__gnu_thumb1_case_shi>
 8006f04:	ffe50083 	.word	0xffe50083
 8006f08:	ffe5ffe5 	.word	0xffe5ffe5
 8006f0c:	00a200b6 	.word	0x00a200b6
 8006f10:	ffe5ffe5 	.word	0xffe5ffe5
 8006f14:	ffe50089 	.word	0xffe50089
 8006f18:	ffe5ffe5 	.word	0xffe5ffe5
 8006f1c:	0065ffe5 	.word	0x0065ffe5
 8006f20:	3841      	subs	r0, #65	; 0x41
 8006f22:	e7eb      	b.n	8006efc <_scanf_float+0x90>
 8006f24:	280e      	cmp	r0, #14
 8006f26:	d8d2      	bhi.n	8006ece <_scanf_float+0x62>
 8006f28:	f7f9 f900 	bl	800012c <__gnu_thumb1_case_shi>
 8006f2c:	ffd1004b 	.word	0xffd1004b
 8006f30:	0098004b 	.word	0x0098004b
 8006f34:	0020ffd1 	.word	0x0020ffd1
 8006f38:	00400040 	.word	0x00400040
 8006f3c:	00400040 	.word	0x00400040
 8006f40:	00400040 	.word	0x00400040
 8006f44:	00400040 	.word	0x00400040
 8006f48:	0040      	.short	0x0040
 8006f4a:	2b6e      	cmp	r3, #110	; 0x6e
 8006f4c:	d809      	bhi.n	8006f62 <_scanf_float+0xf6>
 8006f4e:	2b60      	cmp	r3, #96	; 0x60
 8006f50:	d8d2      	bhi.n	8006ef8 <_scanf_float+0x8c>
 8006f52:	2b54      	cmp	r3, #84	; 0x54
 8006f54:	d07d      	beq.n	8007052 <_scanf_float+0x1e6>
 8006f56:	2b59      	cmp	r3, #89	; 0x59
 8006f58:	d1b9      	bne.n	8006ece <_scanf_float+0x62>
 8006f5a:	2c07      	cmp	r4, #7
 8006f5c:	d1b7      	bne.n	8006ece <_scanf_float+0x62>
 8006f5e:	2408      	movs	r4, #8
 8006f60:	e02c      	b.n	8006fbc <_scanf_float+0x150>
 8006f62:	2b74      	cmp	r3, #116	; 0x74
 8006f64:	d075      	beq.n	8007052 <_scanf_float+0x1e6>
 8006f66:	2b79      	cmp	r3, #121	; 0x79
 8006f68:	d0f7      	beq.n	8006f5a <_scanf_float+0xee>
 8006f6a:	e7b0      	b.n	8006ece <_scanf_float+0x62>
 8006f6c:	6831      	ldr	r1, [r6, #0]
 8006f6e:	05c8      	lsls	r0, r1, #23
 8006f70:	d51c      	bpl.n	8006fac <_scanf_float+0x140>
 8006f72:	2380      	movs	r3, #128	; 0x80
 8006f74:	4399      	bics	r1, r3
 8006f76:	9b00      	ldr	r3, [sp, #0]
 8006f78:	6031      	str	r1, [r6, #0]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	9b05      	ldr	r3, [sp, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <_scanf_float+0x120>
 8006f84:	3b01      	subs	r3, #1
 8006f86:	3201      	adds	r2, #1
 8006f88:	9305      	str	r3, [sp, #20]
 8006f8a:	60b2      	str	r2, [r6, #8]
 8006f8c:	68b3      	ldr	r3, [r6, #8]
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	60b3      	str	r3, [r6, #8]
 8006f92:	6933      	ldr	r3, [r6, #16]
 8006f94:	3301      	adds	r3, #1
 8006f96:	6133      	str	r3, [r6, #16]
 8006f98:	686b      	ldr	r3, [r5, #4]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	606b      	str	r3, [r5, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	dc00      	bgt.n	8006fa4 <_scanf_float+0x138>
 8006fa2:	e086      	b.n	80070b2 <_scanf_float+0x246>
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	602b      	str	r3, [r5, #0]
 8006faa:	e782      	b.n	8006eb2 <_scanf_float+0x46>
 8006fac:	9a02      	ldr	r2, [sp, #8]
 8006fae:	1912      	adds	r2, r2, r4
 8006fb0:	2a00      	cmp	r2, #0
 8006fb2:	d18c      	bne.n	8006ece <_scanf_float+0x62>
 8006fb4:	4a6d      	ldr	r2, [pc, #436]	; (800716c <_scanf_float+0x300>)
 8006fb6:	6831      	ldr	r1, [r6, #0]
 8006fb8:	400a      	ands	r2, r1
 8006fba:	6032      	str	r2, [r6, #0]
 8006fbc:	703b      	strb	r3, [r7, #0]
 8006fbe:	3701      	adds	r7, #1
 8006fc0:	e7e4      	b.n	8006f8c <_scanf_float+0x120>
 8006fc2:	2180      	movs	r1, #128	; 0x80
 8006fc4:	6832      	ldr	r2, [r6, #0]
 8006fc6:	420a      	tst	r2, r1
 8006fc8:	d081      	beq.n	8006ece <_scanf_float+0x62>
 8006fca:	438a      	bics	r2, r1
 8006fcc:	e7f5      	b.n	8006fba <_scanf_float+0x14e>
 8006fce:	9a02      	ldr	r2, [sp, #8]
 8006fd0:	2a00      	cmp	r2, #0
 8006fd2:	d10f      	bne.n	8006ff4 <_scanf_float+0x188>
 8006fd4:	9a00      	ldr	r2, [sp, #0]
 8006fd6:	2a00      	cmp	r2, #0
 8006fd8:	d10f      	bne.n	8006ffa <_scanf_float+0x18e>
 8006fda:	6832      	ldr	r2, [r6, #0]
 8006fdc:	21e0      	movs	r1, #224	; 0xe0
 8006fde:	0010      	movs	r0, r2
 8006fe0:	00c9      	lsls	r1, r1, #3
 8006fe2:	4008      	ands	r0, r1
 8006fe4:	4288      	cmp	r0, r1
 8006fe6:	d108      	bne.n	8006ffa <_scanf_float+0x18e>
 8006fe8:	4961      	ldr	r1, [pc, #388]	; (8007170 <_scanf_float+0x304>)
 8006fea:	400a      	ands	r2, r1
 8006fec:	6032      	str	r2, [r6, #0]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	9202      	str	r2, [sp, #8]
 8006ff2:	e7e3      	b.n	8006fbc <_scanf_float+0x150>
 8006ff4:	9a02      	ldr	r2, [sp, #8]
 8006ff6:	2a02      	cmp	r2, #2
 8006ff8:	d059      	beq.n	80070ae <_scanf_float+0x242>
 8006ffa:	2c01      	cmp	r4, #1
 8006ffc:	d002      	beq.n	8007004 <_scanf_float+0x198>
 8006ffe:	2c04      	cmp	r4, #4
 8007000:	d000      	beq.n	8007004 <_scanf_float+0x198>
 8007002:	e764      	b.n	8006ece <_scanf_float+0x62>
 8007004:	3401      	adds	r4, #1
 8007006:	b2e4      	uxtb	r4, r4
 8007008:	e7d8      	b.n	8006fbc <_scanf_float+0x150>
 800700a:	9a02      	ldr	r2, [sp, #8]
 800700c:	2a01      	cmp	r2, #1
 800700e:	d000      	beq.n	8007012 <_scanf_float+0x1a6>
 8007010:	e75d      	b.n	8006ece <_scanf_float+0x62>
 8007012:	2202      	movs	r2, #2
 8007014:	e7ec      	b.n	8006ff0 <_scanf_float+0x184>
 8007016:	2c00      	cmp	r4, #0
 8007018:	d110      	bne.n	800703c <_scanf_float+0x1d0>
 800701a:	9a00      	ldr	r2, [sp, #0]
 800701c:	2a00      	cmp	r2, #0
 800701e:	d000      	beq.n	8007022 <_scanf_float+0x1b6>
 8007020:	e758      	b.n	8006ed4 <_scanf_float+0x68>
 8007022:	6832      	ldr	r2, [r6, #0]
 8007024:	21e0      	movs	r1, #224	; 0xe0
 8007026:	0010      	movs	r0, r2
 8007028:	00c9      	lsls	r1, r1, #3
 800702a:	4008      	ands	r0, r1
 800702c:	4288      	cmp	r0, r1
 800702e:	d000      	beq.n	8007032 <_scanf_float+0x1c6>
 8007030:	e754      	b.n	8006edc <_scanf_float+0x70>
 8007032:	494f      	ldr	r1, [pc, #316]	; (8007170 <_scanf_float+0x304>)
 8007034:	3401      	adds	r4, #1
 8007036:	400a      	ands	r2, r1
 8007038:	6032      	str	r2, [r6, #0]
 800703a:	e7bf      	b.n	8006fbc <_scanf_float+0x150>
 800703c:	21fd      	movs	r1, #253	; 0xfd
 800703e:	1ee2      	subs	r2, r4, #3
 8007040:	420a      	tst	r2, r1
 8007042:	d000      	beq.n	8007046 <_scanf_float+0x1da>
 8007044:	e743      	b.n	8006ece <_scanf_float+0x62>
 8007046:	e7dd      	b.n	8007004 <_scanf_float+0x198>
 8007048:	2c02      	cmp	r4, #2
 800704a:	d000      	beq.n	800704e <_scanf_float+0x1e2>
 800704c:	e73f      	b.n	8006ece <_scanf_float+0x62>
 800704e:	2403      	movs	r4, #3
 8007050:	e7b4      	b.n	8006fbc <_scanf_float+0x150>
 8007052:	2c06      	cmp	r4, #6
 8007054:	d000      	beq.n	8007058 <_scanf_float+0x1ec>
 8007056:	e73a      	b.n	8006ece <_scanf_float+0x62>
 8007058:	2407      	movs	r4, #7
 800705a:	e7af      	b.n	8006fbc <_scanf_float+0x150>
 800705c:	6832      	ldr	r2, [r6, #0]
 800705e:	0591      	lsls	r1, r2, #22
 8007060:	d400      	bmi.n	8007064 <_scanf_float+0x1f8>
 8007062:	e734      	b.n	8006ece <_scanf_float+0x62>
 8007064:	4943      	ldr	r1, [pc, #268]	; (8007174 <_scanf_float+0x308>)
 8007066:	400a      	ands	r2, r1
 8007068:	6032      	str	r2, [r6, #0]
 800706a:	9a00      	ldr	r2, [sp, #0]
 800706c:	9204      	str	r2, [sp, #16]
 800706e:	e7a5      	b.n	8006fbc <_scanf_float+0x150>
 8007070:	21a0      	movs	r1, #160	; 0xa0
 8007072:	2080      	movs	r0, #128	; 0x80
 8007074:	6832      	ldr	r2, [r6, #0]
 8007076:	00c9      	lsls	r1, r1, #3
 8007078:	4011      	ands	r1, r2
 800707a:	00c0      	lsls	r0, r0, #3
 800707c:	4281      	cmp	r1, r0
 800707e:	d006      	beq.n	800708e <_scanf_float+0x222>
 8007080:	4202      	tst	r2, r0
 8007082:	d100      	bne.n	8007086 <_scanf_float+0x21a>
 8007084:	e723      	b.n	8006ece <_scanf_float+0x62>
 8007086:	9900      	ldr	r1, [sp, #0]
 8007088:	2900      	cmp	r1, #0
 800708a:	d100      	bne.n	800708e <_scanf_float+0x222>
 800708c:	e726      	b.n	8006edc <_scanf_float+0x70>
 800708e:	0591      	lsls	r1, r2, #22
 8007090:	d404      	bmi.n	800709c <_scanf_float+0x230>
 8007092:	9900      	ldr	r1, [sp, #0]
 8007094:	9804      	ldr	r0, [sp, #16]
 8007096:	9708      	str	r7, [sp, #32]
 8007098:	1a09      	subs	r1, r1, r0
 800709a:	9107      	str	r1, [sp, #28]
 800709c:	4934      	ldr	r1, [pc, #208]	; (8007170 <_scanf_float+0x304>)
 800709e:	400a      	ands	r2, r1
 80070a0:	21c0      	movs	r1, #192	; 0xc0
 80070a2:	0049      	lsls	r1, r1, #1
 80070a4:	430a      	orrs	r2, r1
 80070a6:	6032      	str	r2, [r6, #0]
 80070a8:	2200      	movs	r2, #0
 80070aa:	9200      	str	r2, [sp, #0]
 80070ac:	e786      	b.n	8006fbc <_scanf_float+0x150>
 80070ae:	2203      	movs	r2, #3
 80070b0:	e79e      	b.n	8006ff0 <_scanf_float+0x184>
 80070b2:	23c0      	movs	r3, #192	; 0xc0
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	0029      	movs	r1, r5
 80070b8:	58f3      	ldr	r3, [r6, r3]
 80070ba:	9801      	ldr	r0, [sp, #4]
 80070bc:	4798      	blx	r3
 80070be:	2800      	cmp	r0, #0
 80070c0:	d100      	bne.n	80070c4 <_scanf_float+0x258>
 80070c2:	e6f6      	b.n	8006eb2 <_scanf_float+0x46>
 80070c4:	e703      	b.n	8006ece <_scanf_float+0x62>
 80070c6:	3f01      	subs	r7, #1
 80070c8:	5933      	ldr	r3, [r6, r4]
 80070ca:	002a      	movs	r2, r5
 80070cc:	7839      	ldrb	r1, [r7, #0]
 80070ce:	9801      	ldr	r0, [sp, #4]
 80070d0:	4798      	blx	r3
 80070d2:	6933      	ldr	r3, [r6, #16]
 80070d4:	3b01      	subs	r3, #1
 80070d6:	6133      	str	r3, [r6, #16]
 80070d8:	e707      	b.n	8006eea <_scanf_float+0x7e>
 80070da:	1e63      	subs	r3, r4, #1
 80070dc:	2b06      	cmp	r3, #6
 80070de:	d80e      	bhi.n	80070fe <_scanf_float+0x292>
 80070e0:	9702      	str	r7, [sp, #8]
 80070e2:	2c02      	cmp	r4, #2
 80070e4:	d920      	bls.n	8007128 <_scanf_float+0x2bc>
 80070e6:	1be3      	subs	r3, r4, r7
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	9305      	str	r3, [sp, #20]
 80070ec:	9b02      	ldr	r3, [sp, #8]
 80070ee:	9a05      	ldr	r2, [sp, #20]
 80070f0:	189b      	adds	r3, r3, r2
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d827      	bhi.n	8007148 <_scanf_float+0x2dc>
 80070f8:	3c03      	subs	r4, #3
 80070fa:	b2e4      	uxtb	r4, r4
 80070fc:	1b3f      	subs	r7, r7, r4
 80070fe:	6833      	ldr	r3, [r6, #0]
 8007100:	05da      	lsls	r2, r3, #23
 8007102:	d554      	bpl.n	80071ae <_scanf_float+0x342>
 8007104:	055b      	lsls	r3, r3, #21
 8007106:	d537      	bpl.n	8007178 <_scanf_float+0x30c>
 8007108:	24be      	movs	r4, #190	; 0xbe
 800710a:	0064      	lsls	r4, r4, #1
 800710c:	9b03      	ldr	r3, [sp, #12]
 800710e:	429f      	cmp	r7, r3
 8007110:	d800      	bhi.n	8007114 <_scanf_float+0x2a8>
 8007112:	e6ee      	b.n	8006ef2 <_scanf_float+0x86>
 8007114:	3f01      	subs	r7, #1
 8007116:	5933      	ldr	r3, [r6, r4]
 8007118:	002a      	movs	r2, r5
 800711a:	7839      	ldrb	r1, [r7, #0]
 800711c:	9801      	ldr	r0, [sp, #4]
 800711e:	4798      	blx	r3
 8007120:	6933      	ldr	r3, [r6, #16]
 8007122:	3b01      	subs	r3, #1
 8007124:	6133      	str	r3, [r6, #16]
 8007126:	e7f1      	b.n	800710c <_scanf_float+0x2a0>
 8007128:	24be      	movs	r4, #190	; 0xbe
 800712a:	0064      	lsls	r4, r4, #1
 800712c:	9b03      	ldr	r3, [sp, #12]
 800712e:	429f      	cmp	r7, r3
 8007130:	d800      	bhi.n	8007134 <_scanf_float+0x2c8>
 8007132:	e6de      	b.n	8006ef2 <_scanf_float+0x86>
 8007134:	3f01      	subs	r7, #1
 8007136:	5933      	ldr	r3, [r6, r4]
 8007138:	002a      	movs	r2, r5
 800713a:	7839      	ldrb	r1, [r7, #0]
 800713c:	9801      	ldr	r0, [sp, #4]
 800713e:	4798      	blx	r3
 8007140:	6933      	ldr	r3, [r6, #16]
 8007142:	3b01      	subs	r3, #1
 8007144:	6133      	str	r3, [r6, #16]
 8007146:	e7f1      	b.n	800712c <_scanf_float+0x2c0>
 8007148:	9b02      	ldr	r3, [sp, #8]
 800714a:	002a      	movs	r2, r5
 800714c:	3b01      	subs	r3, #1
 800714e:	7819      	ldrb	r1, [r3, #0]
 8007150:	9302      	str	r3, [sp, #8]
 8007152:	23be      	movs	r3, #190	; 0xbe
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	58f3      	ldr	r3, [r6, r3]
 8007158:	9801      	ldr	r0, [sp, #4]
 800715a:	9309      	str	r3, [sp, #36]	; 0x24
 800715c:	4798      	blx	r3
 800715e:	6933      	ldr	r3, [r6, #16]
 8007160:	3b01      	subs	r3, #1
 8007162:	6133      	str	r3, [r6, #16]
 8007164:	e7c2      	b.n	80070ec <_scanf_float+0x280>
 8007166:	46c0      	nop			; (mov r8, r8)
 8007168:	fffffeff 	.word	0xfffffeff
 800716c:	fffffe7f 	.word	0xfffffe7f
 8007170:	fffff87f 	.word	0xfffff87f
 8007174:	fffffd7f 	.word	0xfffffd7f
 8007178:	6933      	ldr	r3, [r6, #16]
 800717a:	1e7c      	subs	r4, r7, #1
 800717c:	7821      	ldrb	r1, [r4, #0]
 800717e:	3b01      	subs	r3, #1
 8007180:	6133      	str	r3, [r6, #16]
 8007182:	2965      	cmp	r1, #101	; 0x65
 8007184:	d00c      	beq.n	80071a0 <_scanf_float+0x334>
 8007186:	2945      	cmp	r1, #69	; 0x45
 8007188:	d00a      	beq.n	80071a0 <_scanf_float+0x334>
 800718a:	23be      	movs	r3, #190	; 0xbe
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	58f3      	ldr	r3, [r6, r3]
 8007190:	002a      	movs	r2, r5
 8007192:	9801      	ldr	r0, [sp, #4]
 8007194:	4798      	blx	r3
 8007196:	6933      	ldr	r3, [r6, #16]
 8007198:	1ebc      	subs	r4, r7, #2
 800719a:	3b01      	subs	r3, #1
 800719c:	7821      	ldrb	r1, [r4, #0]
 800719e:	6133      	str	r3, [r6, #16]
 80071a0:	23be      	movs	r3, #190	; 0xbe
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	002a      	movs	r2, r5
 80071a6:	58f3      	ldr	r3, [r6, r3]
 80071a8:	9801      	ldr	r0, [sp, #4]
 80071aa:	4798      	blx	r3
 80071ac:	0027      	movs	r7, r4
 80071ae:	6832      	ldr	r2, [r6, #0]
 80071b0:	2310      	movs	r3, #16
 80071b2:	0011      	movs	r1, r2
 80071b4:	4019      	ands	r1, r3
 80071b6:	9102      	str	r1, [sp, #8]
 80071b8:	421a      	tst	r2, r3
 80071ba:	d158      	bne.n	800726e <_scanf_float+0x402>
 80071bc:	23c0      	movs	r3, #192	; 0xc0
 80071be:	7039      	strb	r1, [r7, #0]
 80071c0:	6832      	ldr	r2, [r6, #0]
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	4013      	ands	r3, r2
 80071c6:	2280      	movs	r2, #128	; 0x80
 80071c8:	00d2      	lsls	r2, r2, #3
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d11d      	bne.n	800720a <_scanf_float+0x39e>
 80071ce:	9b04      	ldr	r3, [sp, #16]
 80071d0:	9a00      	ldr	r2, [sp, #0]
 80071d2:	9900      	ldr	r1, [sp, #0]
 80071d4:	1a9a      	subs	r2, r3, r2
 80071d6:	428b      	cmp	r3, r1
 80071d8:	d124      	bne.n	8007224 <_scanf_float+0x3b8>
 80071da:	2200      	movs	r2, #0
 80071dc:	9903      	ldr	r1, [sp, #12]
 80071de:	9801      	ldr	r0, [sp, #4]
 80071e0:	f000 fe9c 	bl	8007f1c <_strtod_r>
 80071e4:	9b06      	ldr	r3, [sp, #24]
 80071e6:	000d      	movs	r5, r1
 80071e8:	6831      	ldr	r1, [r6, #0]
 80071ea:	0004      	movs	r4, r0
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	078a      	lsls	r2, r1, #30
 80071f0:	d525      	bpl.n	800723e <_scanf_float+0x3d2>
 80071f2:	1d1a      	adds	r2, r3, #4
 80071f4:	9906      	ldr	r1, [sp, #24]
 80071f6:	600a      	str	r2, [r1, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	601c      	str	r4, [r3, #0]
 80071fc:	605d      	str	r5, [r3, #4]
 80071fe:	68f3      	ldr	r3, [r6, #12]
 8007200:	3301      	adds	r3, #1
 8007202:	60f3      	str	r3, [r6, #12]
 8007204:	9802      	ldr	r0, [sp, #8]
 8007206:	b00b      	add	sp, #44	; 0x2c
 8007208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800720a:	9b07      	ldr	r3, [sp, #28]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0e4      	beq.n	80071da <_scanf_float+0x36e>
 8007210:	9b08      	ldr	r3, [sp, #32]
 8007212:	9a02      	ldr	r2, [sp, #8]
 8007214:	1c59      	adds	r1, r3, #1
 8007216:	9801      	ldr	r0, [sp, #4]
 8007218:	230a      	movs	r3, #10
 800721a:	f000 ff15 	bl	8008048 <_strtol_r>
 800721e:	9b07      	ldr	r3, [sp, #28]
 8007220:	9f08      	ldr	r7, [sp, #32]
 8007222:	1ac2      	subs	r2, r0, r3
 8007224:	0033      	movs	r3, r6
 8007226:	3370      	adds	r3, #112	; 0x70
 8007228:	33ff      	adds	r3, #255	; 0xff
 800722a:	429f      	cmp	r7, r3
 800722c:	d302      	bcc.n	8007234 <_scanf_float+0x3c8>
 800722e:	0037      	movs	r7, r6
 8007230:	376f      	adds	r7, #111	; 0x6f
 8007232:	37ff      	adds	r7, #255	; 0xff
 8007234:	0038      	movs	r0, r7
 8007236:	490f      	ldr	r1, [pc, #60]	; (8007274 <_scanf_float+0x408>)
 8007238:	f000 f824 	bl	8007284 <siprintf>
 800723c:	e7cd      	b.n	80071da <_scanf_float+0x36e>
 800723e:	1d1a      	adds	r2, r3, #4
 8007240:	0749      	lsls	r1, r1, #29
 8007242:	d4d7      	bmi.n	80071f4 <_scanf_float+0x388>
 8007244:	9906      	ldr	r1, [sp, #24]
 8007246:	0020      	movs	r0, r4
 8007248:	600a      	str	r2, [r1, #0]
 800724a:	681f      	ldr	r7, [r3, #0]
 800724c:	0022      	movs	r2, r4
 800724e:	002b      	movs	r3, r5
 8007250:	0029      	movs	r1, r5
 8007252:	f7fa fed5 	bl	8002000 <__aeabi_dcmpun>
 8007256:	2800      	cmp	r0, #0
 8007258:	d004      	beq.n	8007264 <_scanf_float+0x3f8>
 800725a:	4807      	ldr	r0, [pc, #28]	; (8007278 <_scanf_float+0x40c>)
 800725c:	f000 f80e 	bl	800727c <nanf>
 8007260:	6038      	str	r0, [r7, #0]
 8007262:	e7cc      	b.n	80071fe <_scanf_float+0x392>
 8007264:	0020      	movs	r0, r4
 8007266:	0029      	movs	r1, r5
 8007268:	f7fa ffbc 	bl	80021e4 <__aeabi_d2f>
 800726c:	e7f8      	b.n	8007260 <_scanf_float+0x3f4>
 800726e:	2300      	movs	r3, #0
 8007270:	e640      	b.n	8006ef4 <_scanf_float+0x88>
 8007272:	46c0      	nop			; (mov r8, r8)
 8007274:	0800b17c 	.word	0x0800b17c
 8007278:	0800b588 	.word	0x0800b588

0800727c <nanf>:
 800727c:	4800      	ldr	r0, [pc, #0]	; (8007280 <nanf+0x4>)
 800727e:	4770      	bx	lr
 8007280:	7fc00000 	.word	0x7fc00000

08007284 <siprintf>:
 8007284:	b40e      	push	{r1, r2, r3}
 8007286:	b500      	push	{lr}
 8007288:	490b      	ldr	r1, [pc, #44]	; (80072b8 <siprintf+0x34>)
 800728a:	b09c      	sub	sp, #112	; 0x70
 800728c:	ab1d      	add	r3, sp, #116	; 0x74
 800728e:	9002      	str	r0, [sp, #8]
 8007290:	9006      	str	r0, [sp, #24]
 8007292:	9107      	str	r1, [sp, #28]
 8007294:	9104      	str	r1, [sp, #16]
 8007296:	4809      	ldr	r0, [pc, #36]	; (80072bc <siprintf+0x38>)
 8007298:	4909      	ldr	r1, [pc, #36]	; (80072c0 <siprintf+0x3c>)
 800729a:	cb04      	ldmia	r3!, {r2}
 800729c:	9105      	str	r1, [sp, #20]
 800729e:	6800      	ldr	r0, [r0, #0]
 80072a0:	a902      	add	r1, sp, #8
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	f002 ff5c 	bl	800a160 <_svfiprintf_r>
 80072a8:	2300      	movs	r3, #0
 80072aa:	9a02      	ldr	r2, [sp, #8]
 80072ac:	7013      	strb	r3, [r2, #0]
 80072ae:	b01c      	add	sp, #112	; 0x70
 80072b0:	bc08      	pop	{r3}
 80072b2:	b003      	add	sp, #12
 80072b4:	4718      	bx	r3
 80072b6:	46c0      	nop			; (mov r8, r8)
 80072b8:	7fffffff 	.word	0x7fffffff
 80072bc:	2000000c 	.word	0x2000000c
 80072c0:	ffff0208 	.word	0xffff0208

080072c4 <sulp>:
 80072c4:	b570      	push	{r4, r5, r6, lr}
 80072c6:	0016      	movs	r6, r2
 80072c8:	000d      	movs	r5, r1
 80072ca:	f002 fc93 	bl	8009bf4 <__ulp>
 80072ce:	2e00      	cmp	r6, #0
 80072d0:	d00d      	beq.n	80072ee <sulp+0x2a>
 80072d2:	236b      	movs	r3, #107	; 0x6b
 80072d4:	006a      	lsls	r2, r5, #1
 80072d6:	0d52      	lsrs	r2, r2, #21
 80072d8:	1a9b      	subs	r3, r3, r2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	dd07      	ble.n	80072ee <sulp+0x2a>
 80072de:	2400      	movs	r4, #0
 80072e0:	4a03      	ldr	r2, [pc, #12]	; (80072f0 <sulp+0x2c>)
 80072e2:	051b      	lsls	r3, r3, #20
 80072e4:	189d      	adds	r5, r3, r2
 80072e6:	002b      	movs	r3, r5
 80072e8:	0022      	movs	r2, r4
 80072ea:	f7fa f88b 	bl	8001404 <__aeabi_dmul>
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	3ff00000 	.word	0x3ff00000

080072f4 <_strtod_l>:
 80072f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f6:	001d      	movs	r5, r3
 80072f8:	2300      	movs	r3, #0
 80072fa:	b0a5      	sub	sp, #148	; 0x94
 80072fc:	9320      	str	r3, [sp, #128]	; 0x80
 80072fe:	4bac      	ldr	r3, [pc, #688]	; (80075b0 <_strtod_l+0x2bc>)
 8007300:	9005      	str	r0, [sp, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	9108      	str	r1, [sp, #32]
 8007306:	0018      	movs	r0, r3
 8007308:	9307      	str	r3, [sp, #28]
 800730a:	921b      	str	r2, [sp, #108]	; 0x6c
 800730c:	f7f8 fefc 	bl	8000108 <strlen>
 8007310:	2600      	movs	r6, #0
 8007312:	0004      	movs	r4, r0
 8007314:	2700      	movs	r7, #0
 8007316:	9b08      	ldr	r3, [sp, #32]
 8007318:	931f      	str	r3, [sp, #124]	; 0x7c
 800731a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800731c:	7813      	ldrb	r3, [r2, #0]
 800731e:	2b2b      	cmp	r3, #43	; 0x2b
 8007320:	d058      	beq.n	80073d4 <_strtod_l+0xe0>
 8007322:	d844      	bhi.n	80073ae <_strtod_l+0xba>
 8007324:	2b0d      	cmp	r3, #13
 8007326:	d83d      	bhi.n	80073a4 <_strtod_l+0xb0>
 8007328:	2b08      	cmp	r3, #8
 800732a:	d83d      	bhi.n	80073a8 <_strtod_l+0xb4>
 800732c:	2b00      	cmp	r3, #0
 800732e:	d047      	beq.n	80073c0 <_strtod_l+0xcc>
 8007330:	2300      	movs	r3, #0
 8007332:	930e      	str	r3, [sp, #56]	; 0x38
 8007334:	2200      	movs	r2, #0
 8007336:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007338:	920a      	str	r2, [sp, #40]	; 0x28
 800733a:	9306      	str	r3, [sp, #24]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b30      	cmp	r3, #48	; 0x30
 8007340:	d000      	beq.n	8007344 <_strtod_l+0x50>
 8007342:	e07f      	b.n	8007444 <_strtod_l+0x150>
 8007344:	9b06      	ldr	r3, [sp, #24]
 8007346:	3220      	adds	r2, #32
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	4393      	bics	r3, r2
 800734c:	2b58      	cmp	r3, #88	; 0x58
 800734e:	d000      	beq.n	8007352 <_strtod_l+0x5e>
 8007350:	e06e      	b.n	8007430 <_strtod_l+0x13c>
 8007352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007354:	9502      	str	r5, [sp, #8]
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	ab20      	add	r3, sp, #128	; 0x80
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	4a95      	ldr	r2, [pc, #596]	; (80075b4 <_strtod_l+0x2c0>)
 800735e:	ab21      	add	r3, sp, #132	; 0x84
 8007360:	9805      	ldr	r0, [sp, #20]
 8007362:	a91f      	add	r1, sp, #124	; 0x7c
 8007364:	f001 fd84 	bl	8008e70 <__gethex>
 8007368:	2307      	movs	r3, #7
 800736a:	0005      	movs	r5, r0
 800736c:	0004      	movs	r4, r0
 800736e:	401d      	ands	r5, r3
 8007370:	4218      	tst	r0, r3
 8007372:	d006      	beq.n	8007382 <_strtod_l+0x8e>
 8007374:	2d06      	cmp	r5, #6
 8007376:	d12f      	bne.n	80073d8 <_strtod_l+0xe4>
 8007378:	9b06      	ldr	r3, [sp, #24]
 800737a:	3301      	adds	r3, #1
 800737c:	931f      	str	r3, [sp, #124]	; 0x7c
 800737e:	2300      	movs	r3, #0
 8007380:	930e      	str	r3, [sp, #56]	; 0x38
 8007382:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <_strtod_l+0x9a>
 8007388:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800738a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007390:	2b00      	cmp	r3, #0
 8007392:	d01c      	beq.n	80073ce <_strtod_l+0xda>
 8007394:	2380      	movs	r3, #128	; 0x80
 8007396:	0032      	movs	r2, r6
 8007398:	061b      	lsls	r3, r3, #24
 800739a:	18fb      	adds	r3, r7, r3
 800739c:	0010      	movs	r0, r2
 800739e:	0019      	movs	r1, r3
 80073a0:	b025      	add	sp, #148	; 0x94
 80073a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073a4:	2b20      	cmp	r3, #32
 80073a6:	d1c3      	bne.n	8007330 <_strtod_l+0x3c>
 80073a8:	3201      	adds	r2, #1
 80073aa:	921f      	str	r2, [sp, #124]	; 0x7c
 80073ac:	e7b5      	b.n	800731a <_strtod_l+0x26>
 80073ae:	2b2d      	cmp	r3, #45	; 0x2d
 80073b0:	d1be      	bne.n	8007330 <_strtod_l+0x3c>
 80073b2:	3b2c      	subs	r3, #44	; 0x2c
 80073b4:	930e      	str	r3, [sp, #56]	; 0x38
 80073b6:	1c53      	adds	r3, r2, #1
 80073b8:	931f      	str	r3, [sp, #124]	; 0x7c
 80073ba:	7853      	ldrb	r3, [r2, #1]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1b9      	bne.n	8007334 <_strtod_l+0x40>
 80073c0:	9b08      	ldr	r3, [sp, #32]
 80073c2:	931f      	str	r3, [sp, #124]	; 0x7c
 80073c4:	2300      	movs	r3, #0
 80073c6:	930e      	str	r3, [sp, #56]	; 0x38
 80073c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1dc      	bne.n	8007388 <_strtod_l+0x94>
 80073ce:	0032      	movs	r2, r6
 80073d0:	003b      	movs	r3, r7
 80073d2:	e7e3      	b.n	800739c <_strtod_l+0xa8>
 80073d4:	2300      	movs	r3, #0
 80073d6:	e7ed      	b.n	80073b4 <_strtod_l+0xc0>
 80073d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80073da:	2a00      	cmp	r2, #0
 80073dc:	d007      	beq.n	80073ee <_strtod_l+0xfa>
 80073de:	2135      	movs	r1, #53	; 0x35
 80073e0:	a822      	add	r0, sp, #136	; 0x88
 80073e2:	f002 fd08 	bl	8009df6 <__copybits>
 80073e6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80073e8:	9805      	ldr	r0, [sp, #20]
 80073ea:	f002 f8c3 	bl	8009574 <_Bfree>
 80073ee:	1e68      	subs	r0, r5, #1
 80073f0:	2804      	cmp	r0, #4
 80073f2:	d806      	bhi.n	8007402 <_strtod_l+0x10e>
 80073f4:	f7f8 fe90 	bl	8000118 <__gnu_thumb1_case_uqi>
 80073f8:	1816030b 	.word	0x1816030b
 80073fc:	0b          	.byte	0x0b
 80073fd:	00          	.byte	0x00
 80073fe:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007400:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8007402:	0723      	lsls	r3, r4, #28
 8007404:	d5bd      	bpl.n	8007382 <_strtod_l+0x8e>
 8007406:	2380      	movs	r3, #128	; 0x80
 8007408:	061b      	lsls	r3, r3, #24
 800740a:	431f      	orrs	r7, r3
 800740c:	e7b9      	b.n	8007382 <_strtod_l+0x8e>
 800740e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007410:	4a69      	ldr	r2, [pc, #420]	; (80075b8 <_strtod_l+0x2c4>)
 8007412:	496a      	ldr	r1, [pc, #424]	; (80075bc <_strtod_l+0x2c8>)
 8007414:	401a      	ands	r2, r3
 8007416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007418:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800741a:	185b      	adds	r3, r3, r1
 800741c:	051b      	lsls	r3, r3, #20
 800741e:	431a      	orrs	r2, r3
 8007420:	0017      	movs	r7, r2
 8007422:	e7ee      	b.n	8007402 <_strtod_l+0x10e>
 8007424:	4f66      	ldr	r7, [pc, #408]	; (80075c0 <_strtod_l+0x2cc>)
 8007426:	e7ec      	b.n	8007402 <_strtod_l+0x10e>
 8007428:	2601      	movs	r6, #1
 800742a:	4f66      	ldr	r7, [pc, #408]	; (80075c4 <_strtod_l+0x2d0>)
 800742c:	4276      	negs	r6, r6
 800742e:	e7e8      	b.n	8007402 <_strtod_l+0x10e>
 8007430:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	921f      	str	r2, [sp, #124]	; 0x7c
 8007436:	785b      	ldrb	r3, [r3, #1]
 8007438:	2b30      	cmp	r3, #48	; 0x30
 800743a:	d0f9      	beq.n	8007430 <_strtod_l+0x13c>
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0a0      	beq.n	8007382 <_strtod_l+0x8e>
 8007440:	2301      	movs	r3, #1
 8007442:	930a      	str	r3, [sp, #40]	; 0x28
 8007444:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007446:	220a      	movs	r2, #10
 8007448:	9310      	str	r3, [sp, #64]	; 0x40
 800744a:	2300      	movs	r3, #0
 800744c:	930f      	str	r3, [sp, #60]	; 0x3c
 800744e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007450:	9309      	str	r3, [sp, #36]	; 0x24
 8007452:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007454:	7805      	ldrb	r5, [r0, #0]
 8007456:	002b      	movs	r3, r5
 8007458:	3b30      	subs	r3, #48	; 0x30
 800745a:	b2d9      	uxtb	r1, r3
 800745c:	2909      	cmp	r1, #9
 800745e:	d927      	bls.n	80074b0 <_strtod_l+0x1bc>
 8007460:	0022      	movs	r2, r4
 8007462:	9907      	ldr	r1, [sp, #28]
 8007464:	f002 ff94 	bl	800a390 <strncmp>
 8007468:	2800      	cmp	r0, #0
 800746a:	d033      	beq.n	80074d4 <_strtod_l+0x1e0>
 800746c:	2000      	movs	r0, #0
 800746e:	002b      	movs	r3, r5
 8007470:	4684      	mov	ip, r0
 8007472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007474:	900c      	str	r0, [sp, #48]	; 0x30
 8007476:	9206      	str	r2, [sp, #24]
 8007478:	2220      	movs	r2, #32
 800747a:	0019      	movs	r1, r3
 800747c:	4391      	bics	r1, r2
 800747e:	000a      	movs	r2, r1
 8007480:	2100      	movs	r1, #0
 8007482:	9107      	str	r1, [sp, #28]
 8007484:	2a45      	cmp	r2, #69	; 0x45
 8007486:	d000      	beq.n	800748a <_strtod_l+0x196>
 8007488:	e0c5      	b.n	8007616 <_strtod_l+0x322>
 800748a:	9b06      	ldr	r3, [sp, #24]
 800748c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800748e:	4303      	orrs	r3, r0
 8007490:	4313      	orrs	r3, r2
 8007492:	428b      	cmp	r3, r1
 8007494:	d094      	beq.n	80073c0 <_strtod_l+0xcc>
 8007496:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007498:	9308      	str	r3, [sp, #32]
 800749a:	3301      	adds	r3, #1
 800749c:	931f      	str	r3, [sp, #124]	; 0x7c
 800749e:	9b08      	ldr	r3, [sp, #32]
 80074a0:	785b      	ldrb	r3, [r3, #1]
 80074a2:	2b2b      	cmp	r3, #43	; 0x2b
 80074a4:	d076      	beq.n	8007594 <_strtod_l+0x2a0>
 80074a6:	000c      	movs	r4, r1
 80074a8:	2b2d      	cmp	r3, #45	; 0x2d
 80074aa:	d179      	bne.n	80075a0 <_strtod_l+0x2ac>
 80074ac:	2401      	movs	r4, #1
 80074ae:	e072      	b.n	8007596 <_strtod_l+0x2a2>
 80074b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074b2:	2908      	cmp	r1, #8
 80074b4:	dc09      	bgt.n	80074ca <_strtod_l+0x1d6>
 80074b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074b8:	4351      	muls	r1, r2
 80074ba:	185b      	adds	r3, r3, r1
 80074bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80074be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c0:	3001      	adds	r0, #1
 80074c2:	3301      	adds	r3, #1
 80074c4:	9309      	str	r3, [sp, #36]	; 0x24
 80074c6:	901f      	str	r0, [sp, #124]	; 0x7c
 80074c8:	e7c3      	b.n	8007452 <_strtod_l+0x15e>
 80074ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80074cc:	4351      	muls	r1, r2
 80074ce:	185b      	adds	r3, r3, r1
 80074d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80074d2:	e7f4      	b.n	80074be <_strtod_l+0x1ca>
 80074d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80074d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074d8:	191c      	adds	r4, r3, r4
 80074da:	941f      	str	r4, [sp, #124]	; 0x7c
 80074dc:	7823      	ldrb	r3, [r4, #0]
 80074de:	2a00      	cmp	r2, #0
 80074e0:	d039      	beq.n	8007556 <_strtod_l+0x262>
 80074e2:	900c      	str	r0, [sp, #48]	; 0x30
 80074e4:	9206      	str	r2, [sp, #24]
 80074e6:	001a      	movs	r2, r3
 80074e8:	3a30      	subs	r2, #48	; 0x30
 80074ea:	2a09      	cmp	r2, #9
 80074ec:	d912      	bls.n	8007514 <_strtod_l+0x220>
 80074ee:	2201      	movs	r2, #1
 80074f0:	4694      	mov	ip, r2
 80074f2:	e7c1      	b.n	8007478 <_strtod_l+0x184>
 80074f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80074f6:	3001      	adds	r0, #1
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	921f      	str	r2, [sp, #124]	; 0x7c
 80074fc:	785b      	ldrb	r3, [r3, #1]
 80074fe:	2b30      	cmp	r3, #48	; 0x30
 8007500:	d0f8      	beq.n	80074f4 <_strtod_l+0x200>
 8007502:	001a      	movs	r2, r3
 8007504:	3a31      	subs	r2, #49	; 0x31
 8007506:	2a08      	cmp	r2, #8
 8007508:	d83f      	bhi.n	800758a <_strtod_l+0x296>
 800750a:	900c      	str	r0, [sp, #48]	; 0x30
 800750c:	2000      	movs	r0, #0
 800750e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007510:	9006      	str	r0, [sp, #24]
 8007512:	9210      	str	r2, [sp, #64]	; 0x40
 8007514:	001a      	movs	r2, r3
 8007516:	1c41      	adds	r1, r0, #1
 8007518:	3a30      	subs	r2, #48	; 0x30
 800751a:	2b30      	cmp	r3, #48	; 0x30
 800751c:	d015      	beq.n	800754a <_strtod_l+0x256>
 800751e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007520:	185b      	adds	r3, r3, r1
 8007522:	210a      	movs	r1, #10
 8007524:	930c      	str	r3, [sp, #48]	; 0x30
 8007526:	9b06      	ldr	r3, [sp, #24]
 8007528:	18c4      	adds	r4, r0, r3
 800752a:	42a3      	cmp	r3, r4
 800752c:	d115      	bne.n	800755a <_strtod_l+0x266>
 800752e:	9906      	ldr	r1, [sp, #24]
 8007530:	9b06      	ldr	r3, [sp, #24]
 8007532:	3101      	adds	r1, #1
 8007534:	1809      	adds	r1, r1, r0
 8007536:	181b      	adds	r3, r3, r0
 8007538:	9106      	str	r1, [sp, #24]
 800753a:	2b08      	cmp	r3, #8
 800753c:	dc1b      	bgt.n	8007576 <_strtod_l+0x282>
 800753e:	230a      	movs	r3, #10
 8007540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007542:	434b      	muls	r3, r1
 8007544:	2100      	movs	r1, #0
 8007546:	18d3      	adds	r3, r2, r3
 8007548:	930b      	str	r3, [sp, #44]	; 0x2c
 800754a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800754c:	0008      	movs	r0, r1
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	921f      	str	r2, [sp, #124]	; 0x7c
 8007552:	785b      	ldrb	r3, [r3, #1]
 8007554:	e7c7      	b.n	80074e6 <_strtod_l+0x1f2>
 8007556:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007558:	e7d1      	b.n	80074fe <_strtod_l+0x20a>
 800755a:	2b08      	cmp	r3, #8
 800755c:	dc04      	bgt.n	8007568 <_strtod_l+0x274>
 800755e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007560:	434d      	muls	r5, r1
 8007562:	950b      	str	r5, [sp, #44]	; 0x2c
 8007564:	3301      	adds	r3, #1
 8007566:	e7e0      	b.n	800752a <_strtod_l+0x236>
 8007568:	1c5d      	adds	r5, r3, #1
 800756a:	2d10      	cmp	r5, #16
 800756c:	dcfa      	bgt.n	8007564 <_strtod_l+0x270>
 800756e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007570:	434d      	muls	r5, r1
 8007572:	950f      	str	r5, [sp, #60]	; 0x3c
 8007574:	e7f6      	b.n	8007564 <_strtod_l+0x270>
 8007576:	9b06      	ldr	r3, [sp, #24]
 8007578:	2100      	movs	r1, #0
 800757a:	2b10      	cmp	r3, #16
 800757c:	dce5      	bgt.n	800754a <_strtod_l+0x256>
 800757e:	230a      	movs	r3, #10
 8007580:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007582:	4343      	muls	r3, r0
 8007584:	18d3      	adds	r3, r2, r3
 8007586:	930f      	str	r3, [sp, #60]	; 0x3c
 8007588:	e7df      	b.n	800754a <_strtod_l+0x256>
 800758a:	2200      	movs	r2, #0
 800758c:	920c      	str	r2, [sp, #48]	; 0x30
 800758e:	9206      	str	r2, [sp, #24]
 8007590:	3201      	adds	r2, #1
 8007592:	e7ad      	b.n	80074f0 <_strtod_l+0x1fc>
 8007594:	2400      	movs	r4, #0
 8007596:	9b08      	ldr	r3, [sp, #32]
 8007598:	3302      	adds	r3, #2
 800759a:	931f      	str	r3, [sp, #124]	; 0x7c
 800759c:	9b08      	ldr	r3, [sp, #32]
 800759e:	789b      	ldrb	r3, [r3, #2]
 80075a0:	001a      	movs	r2, r3
 80075a2:	3a30      	subs	r2, #48	; 0x30
 80075a4:	2a09      	cmp	r2, #9
 80075a6:	d913      	bls.n	80075d0 <_strtod_l+0x2dc>
 80075a8:	9a08      	ldr	r2, [sp, #32]
 80075aa:	921f      	str	r2, [sp, #124]	; 0x7c
 80075ac:	2200      	movs	r2, #0
 80075ae:	e031      	b.n	8007614 <_strtod_l+0x320>
 80075b0:	0800b3d0 	.word	0x0800b3d0
 80075b4:	0800b184 	.word	0x0800b184
 80075b8:	ffefffff 	.word	0xffefffff
 80075bc:	00000433 	.word	0x00000433
 80075c0:	7ff00000 	.word	0x7ff00000
 80075c4:	7fffffff 	.word	0x7fffffff
 80075c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	921f      	str	r2, [sp, #124]	; 0x7c
 80075ce:	785b      	ldrb	r3, [r3, #1]
 80075d0:	2b30      	cmp	r3, #48	; 0x30
 80075d2:	d0f9      	beq.n	80075c8 <_strtod_l+0x2d4>
 80075d4:	2200      	movs	r2, #0
 80075d6:	9207      	str	r2, [sp, #28]
 80075d8:	001a      	movs	r2, r3
 80075da:	3a31      	subs	r2, #49	; 0x31
 80075dc:	2a08      	cmp	r2, #8
 80075de:	d81a      	bhi.n	8007616 <_strtod_l+0x322>
 80075e0:	3b30      	subs	r3, #48	; 0x30
 80075e2:	001a      	movs	r2, r3
 80075e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075e6:	9307      	str	r3, [sp, #28]
 80075e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075ea:	1c59      	adds	r1, r3, #1
 80075ec:	911f      	str	r1, [sp, #124]	; 0x7c
 80075ee:	785b      	ldrb	r3, [r3, #1]
 80075f0:	001d      	movs	r5, r3
 80075f2:	3d30      	subs	r5, #48	; 0x30
 80075f4:	2d09      	cmp	r5, #9
 80075f6:	d939      	bls.n	800766c <_strtod_l+0x378>
 80075f8:	9d07      	ldr	r5, [sp, #28]
 80075fa:	1b49      	subs	r1, r1, r5
 80075fc:	4db0      	ldr	r5, [pc, #704]	; (80078c0 <_strtod_l+0x5cc>)
 80075fe:	9507      	str	r5, [sp, #28]
 8007600:	2908      	cmp	r1, #8
 8007602:	dc03      	bgt.n	800760c <_strtod_l+0x318>
 8007604:	9207      	str	r2, [sp, #28]
 8007606:	42aa      	cmp	r2, r5
 8007608:	dd00      	ble.n	800760c <_strtod_l+0x318>
 800760a:	9507      	str	r5, [sp, #28]
 800760c:	2c00      	cmp	r4, #0
 800760e:	d002      	beq.n	8007616 <_strtod_l+0x322>
 8007610:	9a07      	ldr	r2, [sp, #28]
 8007612:	4252      	negs	r2, r2
 8007614:	9207      	str	r2, [sp, #28]
 8007616:	9a06      	ldr	r2, [sp, #24]
 8007618:	2a00      	cmp	r2, #0
 800761a:	d14b      	bne.n	80076b4 <_strtod_l+0x3c0>
 800761c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800761e:	4310      	orrs	r0, r2
 8007620:	d000      	beq.n	8007624 <_strtod_l+0x330>
 8007622:	e6ae      	b.n	8007382 <_strtod_l+0x8e>
 8007624:	4662      	mov	r2, ip
 8007626:	2a00      	cmp	r2, #0
 8007628:	d000      	beq.n	800762c <_strtod_l+0x338>
 800762a:	e6c9      	b.n	80073c0 <_strtod_l+0xcc>
 800762c:	2b69      	cmp	r3, #105	; 0x69
 800762e:	d025      	beq.n	800767c <_strtod_l+0x388>
 8007630:	dc21      	bgt.n	8007676 <_strtod_l+0x382>
 8007632:	2b49      	cmp	r3, #73	; 0x49
 8007634:	d022      	beq.n	800767c <_strtod_l+0x388>
 8007636:	2b4e      	cmp	r3, #78	; 0x4e
 8007638:	d000      	beq.n	800763c <_strtod_l+0x348>
 800763a:	e6c1      	b.n	80073c0 <_strtod_l+0xcc>
 800763c:	49a1      	ldr	r1, [pc, #644]	; (80078c4 <_strtod_l+0x5d0>)
 800763e:	a81f      	add	r0, sp, #124	; 0x7c
 8007640:	f001 fe64 	bl	800930c <__match>
 8007644:	2800      	cmp	r0, #0
 8007646:	d100      	bne.n	800764a <_strtod_l+0x356>
 8007648:	e6ba      	b.n	80073c0 <_strtod_l+0xcc>
 800764a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	2b28      	cmp	r3, #40	; 0x28
 8007650:	d12a      	bne.n	80076a8 <_strtod_l+0x3b4>
 8007652:	499d      	ldr	r1, [pc, #628]	; (80078c8 <_strtod_l+0x5d4>)
 8007654:	aa22      	add	r2, sp, #136	; 0x88
 8007656:	a81f      	add	r0, sp, #124	; 0x7c
 8007658:	f001 fe6c 	bl	8009334 <__hexnan>
 800765c:	2805      	cmp	r0, #5
 800765e:	d123      	bne.n	80076a8 <_strtod_l+0x3b4>
 8007660:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007662:	4a9a      	ldr	r2, [pc, #616]	; (80078cc <_strtod_l+0x5d8>)
 8007664:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007666:	431a      	orrs	r2, r3
 8007668:	0017      	movs	r7, r2
 800766a:	e68a      	b.n	8007382 <_strtod_l+0x8e>
 800766c:	210a      	movs	r1, #10
 800766e:	434a      	muls	r2, r1
 8007670:	18d2      	adds	r2, r2, r3
 8007672:	3a30      	subs	r2, #48	; 0x30
 8007674:	e7b8      	b.n	80075e8 <_strtod_l+0x2f4>
 8007676:	2b6e      	cmp	r3, #110	; 0x6e
 8007678:	d0e0      	beq.n	800763c <_strtod_l+0x348>
 800767a:	e6a1      	b.n	80073c0 <_strtod_l+0xcc>
 800767c:	4994      	ldr	r1, [pc, #592]	; (80078d0 <_strtod_l+0x5dc>)
 800767e:	a81f      	add	r0, sp, #124	; 0x7c
 8007680:	f001 fe44 	bl	800930c <__match>
 8007684:	2800      	cmp	r0, #0
 8007686:	d100      	bne.n	800768a <_strtod_l+0x396>
 8007688:	e69a      	b.n	80073c0 <_strtod_l+0xcc>
 800768a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800768c:	4991      	ldr	r1, [pc, #580]	; (80078d4 <_strtod_l+0x5e0>)
 800768e:	3b01      	subs	r3, #1
 8007690:	a81f      	add	r0, sp, #124	; 0x7c
 8007692:	931f      	str	r3, [sp, #124]	; 0x7c
 8007694:	f001 fe3a 	bl	800930c <__match>
 8007698:	2800      	cmp	r0, #0
 800769a:	d102      	bne.n	80076a2 <_strtod_l+0x3ae>
 800769c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800769e:	3301      	adds	r3, #1
 80076a0:	931f      	str	r3, [sp, #124]	; 0x7c
 80076a2:	2600      	movs	r6, #0
 80076a4:	4f89      	ldr	r7, [pc, #548]	; (80078cc <_strtod_l+0x5d8>)
 80076a6:	e66c      	b.n	8007382 <_strtod_l+0x8e>
 80076a8:	488b      	ldr	r0, [pc, #556]	; (80078d8 <_strtod_l+0x5e4>)
 80076aa:	f002 fe59 	bl	800a360 <nan>
 80076ae:	0006      	movs	r6, r0
 80076b0:	000f      	movs	r7, r1
 80076b2:	e666      	b.n	8007382 <_strtod_l+0x8e>
 80076b4:	9b07      	ldr	r3, [sp, #28]
 80076b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076b8:	1a9b      	subs	r3, r3, r2
 80076ba:	930a      	str	r3, [sp, #40]	; 0x28
 80076bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <_strtod_l+0x3d2>
 80076c2:	9b06      	ldr	r3, [sp, #24]
 80076c4:	9309      	str	r3, [sp, #36]	; 0x24
 80076c6:	9c06      	ldr	r4, [sp, #24]
 80076c8:	2c10      	cmp	r4, #16
 80076ca:	dd00      	ble.n	80076ce <_strtod_l+0x3da>
 80076cc:	2410      	movs	r4, #16
 80076ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80076d0:	f7fa fd1a 	bl	8002108 <__aeabi_ui2d>
 80076d4:	9b06      	ldr	r3, [sp, #24]
 80076d6:	0006      	movs	r6, r0
 80076d8:	000f      	movs	r7, r1
 80076da:	2b09      	cmp	r3, #9
 80076dc:	dd15      	ble.n	800770a <_strtod_l+0x416>
 80076de:	0022      	movs	r2, r4
 80076e0:	4b7e      	ldr	r3, [pc, #504]	; (80078dc <_strtod_l+0x5e8>)
 80076e2:	3a09      	subs	r2, #9
 80076e4:	00d2      	lsls	r2, r2, #3
 80076e6:	189b      	adds	r3, r3, r2
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f7f9 fe8a 	bl	8001404 <__aeabi_dmul>
 80076f0:	0006      	movs	r6, r0
 80076f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80076f4:	000f      	movs	r7, r1
 80076f6:	f7fa fd07 	bl	8002108 <__aeabi_ui2d>
 80076fa:	0002      	movs	r2, r0
 80076fc:	000b      	movs	r3, r1
 80076fe:	0030      	movs	r0, r6
 8007700:	0039      	movs	r1, r7
 8007702:	f7f8 ff41 	bl	8000588 <__aeabi_dadd>
 8007706:	0006      	movs	r6, r0
 8007708:	000f      	movs	r7, r1
 800770a:	9b06      	ldr	r3, [sp, #24]
 800770c:	2b0f      	cmp	r3, #15
 800770e:	dc39      	bgt.n	8007784 <_strtod_l+0x490>
 8007710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007712:	2b00      	cmp	r3, #0
 8007714:	d100      	bne.n	8007718 <_strtod_l+0x424>
 8007716:	e634      	b.n	8007382 <_strtod_l+0x8e>
 8007718:	dd24      	ble.n	8007764 <_strtod_l+0x470>
 800771a:	2b16      	cmp	r3, #22
 800771c:	dc09      	bgt.n	8007732 <_strtod_l+0x43e>
 800771e:	496f      	ldr	r1, [pc, #444]	; (80078dc <_strtod_l+0x5e8>)
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	18c9      	adds	r1, r1, r3
 8007724:	0032      	movs	r2, r6
 8007726:	6808      	ldr	r0, [r1, #0]
 8007728:	6849      	ldr	r1, [r1, #4]
 800772a:	003b      	movs	r3, r7
 800772c:	f7f9 fe6a 	bl	8001404 <__aeabi_dmul>
 8007730:	e7bd      	b.n	80076ae <_strtod_l+0x3ba>
 8007732:	2325      	movs	r3, #37	; 0x25
 8007734:	9a06      	ldr	r2, [sp, #24]
 8007736:	1a9b      	subs	r3, r3, r2
 8007738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800773a:	4293      	cmp	r3, r2
 800773c:	db22      	blt.n	8007784 <_strtod_l+0x490>
 800773e:	240f      	movs	r4, #15
 8007740:	9b06      	ldr	r3, [sp, #24]
 8007742:	4d66      	ldr	r5, [pc, #408]	; (80078dc <_strtod_l+0x5e8>)
 8007744:	1ae4      	subs	r4, r4, r3
 8007746:	00e1      	lsls	r1, r4, #3
 8007748:	1869      	adds	r1, r5, r1
 800774a:	0032      	movs	r2, r6
 800774c:	6808      	ldr	r0, [r1, #0]
 800774e:	6849      	ldr	r1, [r1, #4]
 8007750:	003b      	movs	r3, r7
 8007752:	f7f9 fe57 	bl	8001404 <__aeabi_dmul>
 8007756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007758:	1b1c      	subs	r4, r3, r4
 800775a:	00e4      	lsls	r4, r4, #3
 800775c:	192c      	adds	r4, r5, r4
 800775e:	6822      	ldr	r2, [r4, #0]
 8007760:	6863      	ldr	r3, [r4, #4]
 8007762:	e7e3      	b.n	800772c <_strtod_l+0x438>
 8007764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007766:	3316      	adds	r3, #22
 8007768:	db0c      	blt.n	8007784 <_strtod_l+0x490>
 800776a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800776c:	9a07      	ldr	r2, [sp, #28]
 800776e:	0030      	movs	r0, r6
 8007770:	1a9a      	subs	r2, r3, r2
 8007772:	4b5a      	ldr	r3, [pc, #360]	; (80078dc <_strtod_l+0x5e8>)
 8007774:	00d2      	lsls	r2, r2, #3
 8007776:	189b      	adds	r3, r3, r2
 8007778:	0039      	movs	r1, r7
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f7f9 fa3f 	bl	8000c00 <__aeabi_ddiv>
 8007782:	e794      	b.n	80076ae <_strtod_l+0x3ba>
 8007784:	9b06      	ldr	r3, [sp, #24]
 8007786:	1b1c      	subs	r4, r3, r4
 8007788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800778a:	18e4      	adds	r4, r4, r3
 800778c:	2c00      	cmp	r4, #0
 800778e:	dd72      	ble.n	8007876 <_strtod_l+0x582>
 8007790:	230f      	movs	r3, #15
 8007792:	0021      	movs	r1, r4
 8007794:	4019      	ands	r1, r3
 8007796:	421c      	tst	r4, r3
 8007798:	d00a      	beq.n	80077b0 <_strtod_l+0x4bc>
 800779a:	00cb      	lsls	r3, r1, #3
 800779c:	494f      	ldr	r1, [pc, #316]	; (80078dc <_strtod_l+0x5e8>)
 800779e:	0032      	movs	r2, r6
 80077a0:	18c9      	adds	r1, r1, r3
 80077a2:	6808      	ldr	r0, [r1, #0]
 80077a4:	6849      	ldr	r1, [r1, #4]
 80077a6:	003b      	movs	r3, r7
 80077a8:	f7f9 fe2c 	bl	8001404 <__aeabi_dmul>
 80077ac:	0006      	movs	r6, r0
 80077ae:	000f      	movs	r7, r1
 80077b0:	230f      	movs	r3, #15
 80077b2:	439c      	bics	r4, r3
 80077b4:	d04a      	beq.n	800784c <_strtod_l+0x558>
 80077b6:	3326      	adds	r3, #38	; 0x26
 80077b8:	33ff      	adds	r3, #255	; 0xff
 80077ba:	429c      	cmp	r4, r3
 80077bc:	dd22      	ble.n	8007804 <_strtod_l+0x510>
 80077be:	2300      	movs	r3, #0
 80077c0:	9306      	str	r3, [sp, #24]
 80077c2:	9307      	str	r3, [sp, #28]
 80077c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80077c6:	9309      	str	r3, [sp, #36]	; 0x24
 80077c8:	2322      	movs	r3, #34	; 0x22
 80077ca:	2600      	movs	r6, #0
 80077cc:	9a05      	ldr	r2, [sp, #20]
 80077ce:	4f3f      	ldr	r7, [pc, #252]	; (80078cc <_strtod_l+0x5d8>)
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077d4:	42b3      	cmp	r3, r6
 80077d6:	d100      	bne.n	80077da <_strtod_l+0x4e6>
 80077d8:	e5d3      	b.n	8007382 <_strtod_l+0x8e>
 80077da:	9920      	ldr	r1, [sp, #128]	; 0x80
 80077dc:	9805      	ldr	r0, [sp, #20]
 80077de:	f001 fec9 	bl	8009574 <_Bfree>
 80077e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077e4:	9805      	ldr	r0, [sp, #20]
 80077e6:	f001 fec5 	bl	8009574 <_Bfree>
 80077ea:	9907      	ldr	r1, [sp, #28]
 80077ec:	9805      	ldr	r0, [sp, #20]
 80077ee:	f001 fec1 	bl	8009574 <_Bfree>
 80077f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077f4:	9805      	ldr	r0, [sp, #20]
 80077f6:	f001 febd 	bl	8009574 <_Bfree>
 80077fa:	9906      	ldr	r1, [sp, #24]
 80077fc:	9805      	ldr	r0, [sp, #20]
 80077fe:	f001 feb9 	bl	8009574 <_Bfree>
 8007802:	e5be      	b.n	8007382 <_strtod_l+0x8e>
 8007804:	2300      	movs	r3, #0
 8007806:	0030      	movs	r0, r6
 8007808:	0039      	movs	r1, r7
 800780a:	4d35      	ldr	r5, [pc, #212]	; (80078e0 <_strtod_l+0x5ec>)
 800780c:	1124      	asrs	r4, r4, #4
 800780e:	9308      	str	r3, [sp, #32]
 8007810:	2c01      	cmp	r4, #1
 8007812:	dc1e      	bgt.n	8007852 <_strtod_l+0x55e>
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <_strtod_l+0x528>
 8007818:	0006      	movs	r6, r0
 800781a:	000f      	movs	r7, r1
 800781c:	4b31      	ldr	r3, [pc, #196]	; (80078e4 <_strtod_l+0x5f0>)
 800781e:	0032      	movs	r2, r6
 8007820:	18ff      	adds	r7, r7, r3
 8007822:	9b08      	ldr	r3, [sp, #32]
 8007824:	00dd      	lsls	r5, r3, #3
 8007826:	4b2e      	ldr	r3, [pc, #184]	; (80078e0 <_strtod_l+0x5ec>)
 8007828:	195d      	adds	r5, r3, r5
 800782a:	6828      	ldr	r0, [r5, #0]
 800782c:	6869      	ldr	r1, [r5, #4]
 800782e:	003b      	movs	r3, r7
 8007830:	f7f9 fde8 	bl	8001404 <__aeabi_dmul>
 8007834:	4b25      	ldr	r3, [pc, #148]	; (80078cc <_strtod_l+0x5d8>)
 8007836:	4a2c      	ldr	r2, [pc, #176]	; (80078e8 <_strtod_l+0x5f4>)
 8007838:	0006      	movs	r6, r0
 800783a:	400b      	ands	r3, r1
 800783c:	4293      	cmp	r3, r2
 800783e:	d8be      	bhi.n	80077be <_strtod_l+0x4ca>
 8007840:	4a2a      	ldr	r2, [pc, #168]	; (80078ec <_strtod_l+0x5f8>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d913      	bls.n	800786e <_strtod_l+0x57a>
 8007846:	2601      	movs	r6, #1
 8007848:	4f29      	ldr	r7, [pc, #164]	; (80078f0 <_strtod_l+0x5fc>)
 800784a:	4276      	negs	r6, r6
 800784c:	2300      	movs	r3, #0
 800784e:	9308      	str	r3, [sp, #32]
 8007850:	e087      	b.n	8007962 <_strtod_l+0x66e>
 8007852:	2201      	movs	r2, #1
 8007854:	4214      	tst	r4, r2
 8007856:	d004      	beq.n	8007862 <_strtod_l+0x56e>
 8007858:	682a      	ldr	r2, [r5, #0]
 800785a:	686b      	ldr	r3, [r5, #4]
 800785c:	f7f9 fdd2 	bl	8001404 <__aeabi_dmul>
 8007860:	2301      	movs	r3, #1
 8007862:	9a08      	ldr	r2, [sp, #32]
 8007864:	1064      	asrs	r4, r4, #1
 8007866:	3201      	adds	r2, #1
 8007868:	9208      	str	r2, [sp, #32]
 800786a:	3508      	adds	r5, #8
 800786c:	e7d0      	b.n	8007810 <_strtod_l+0x51c>
 800786e:	23d4      	movs	r3, #212	; 0xd4
 8007870:	049b      	lsls	r3, r3, #18
 8007872:	18cf      	adds	r7, r1, r3
 8007874:	e7ea      	b.n	800784c <_strtod_l+0x558>
 8007876:	2c00      	cmp	r4, #0
 8007878:	d0e8      	beq.n	800784c <_strtod_l+0x558>
 800787a:	4264      	negs	r4, r4
 800787c:	220f      	movs	r2, #15
 800787e:	0023      	movs	r3, r4
 8007880:	4013      	ands	r3, r2
 8007882:	4214      	tst	r4, r2
 8007884:	d00a      	beq.n	800789c <_strtod_l+0x5a8>
 8007886:	00da      	lsls	r2, r3, #3
 8007888:	4b14      	ldr	r3, [pc, #80]	; (80078dc <_strtod_l+0x5e8>)
 800788a:	0030      	movs	r0, r6
 800788c:	189b      	adds	r3, r3, r2
 800788e:	0039      	movs	r1, r7
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f7f9 f9b4 	bl	8000c00 <__aeabi_ddiv>
 8007898:	0006      	movs	r6, r0
 800789a:	000f      	movs	r7, r1
 800789c:	1124      	asrs	r4, r4, #4
 800789e:	d0d5      	beq.n	800784c <_strtod_l+0x558>
 80078a0:	2c1f      	cmp	r4, #31
 80078a2:	dd27      	ble.n	80078f4 <_strtod_l+0x600>
 80078a4:	2300      	movs	r3, #0
 80078a6:	9306      	str	r3, [sp, #24]
 80078a8:	9307      	str	r3, [sp, #28]
 80078aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80078ac:	9309      	str	r3, [sp, #36]	; 0x24
 80078ae:	2322      	movs	r3, #34	; 0x22
 80078b0:	9a05      	ldr	r2, [sp, #20]
 80078b2:	2600      	movs	r6, #0
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078b8:	2700      	movs	r7, #0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d18d      	bne.n	80077da <_strtod_l+0x4e6>
 80078be:	e560      	b.n	8007382 <_strtod_l+0x8e>
 80078c0:	00004e1f 	.word	0x00004e1f
 80078c4:	0800b155 	.word	0x0800b155
 80078c8:	0800b198 	.word	0x0800b198
 80078cc:	7ff00000 	.word	0x7ff00000
 80078d0:	0800b14d 	.word	0x0800b14d
 80078d4:	0800b2dc 	.word	0x0800b2dc
 80078d8:	0800b588 	.word	0x0800b588
 80078dc:	0800b468 	.word	0x0800b468
 80078e0:	0800b440 	.word	0x0800b440
 80078e4:	fcb00000 	.word	0xfcb00000
 80078e8:	7ca00000 	.word	0x7ca00000
 80078ec:	7c900000 	.word	0x7c900000
 80078f0:	7fefffff 	.word	0x7fefffff
 80078f4:	2310      	movs	r3, #16
 80078f6:	0022      	movs	r2, r4
 80078f8:	401a      	ands	r2, r3
 80078fa:	9208      	str	r2, [sp, #32]
 80078fc:	421c      	tst	r4, r3
 80078fe:	d001      	beq.n	8007904 <_strtod_l+0x610>
 8007900:	335a      	adds	r3, #90	; 0x5a
 8007902:	9308      	str	r3, [sp, #32]
 8007904:	0030      	movs	r0, r6
 8007906:	0039      	movs	r1, r7
 8007908:	2300      	movs	r3, #0
 800790a:	4dc5      	ldr	r5, [pc, #788]	; (8007c20 <_strtod_l+0x92c>)
 800790c:	2201      	movs	r2, #1
 800790e:	4214      	tst	r4, r2
 8007910:	d004      	beq.n	800791c <_strtod_l+0x628>
 8007912:	682a      	ldr	r2, [r5, #0]
 8007914:	686b      	ldr	r3, [r5, #4]
 8007916:	f7f9 fd75 	bl	8001404 <__aeabi_dmul>
 800791a:	2301      	movs	r3, #1
 800791c:	1064      	asrs	r4, r4, #1
 800791e:	3508      	adds	r5, #8
 8007920:	2c00      	cmp	r4, #0
 8007922:	d1f3      	bne.n	800790c <_strtod_l+0x618>
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <_strtod_l+0x638>
 8007928:	0006      	movs	r6, r0
 800792a:	000f      	movs	r7, r1
 800792c:	9b08      	ldr	r3, [sp, #32]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00f      	beq.n	8007952 <_strtod_l+0x65e>
 8007932:	236b      	movs	r3, #107	; 0x6b
 8007934:	007a      	lsls	r2, r7, #1
 8007936:	0d52      	lsrs	r2, r2, #21
 8007938:	0039      	movs	r1, r7
 800793a:	1a9b      	subs	r3, r3, r2
 800793c:	2b00      	cmp	r3, #0
 800793e:	dd08      	ble.n	8007952 <_strtod_l+0x65e>
 8007940:	2b1f      	cmp	r3, #31
 8007942:	dc00      	bgt.n	8007946 <_strtod_l+0x652>
 8007944:	e124      	b.n	8007b90 <_strtod_l+0x89c>
 8007946:	2600      	movs	r6, #0
 8007948:	2b34      	cmp	r3, #52	; 0x34
 800794a:	dc00      	bgt.n	800794e <_strtod_l+0x65a>
 800794c:	e119      	b.n	8007b82 <_strtod_l+0x88e>
 800794e:	27dc      	movs	r7, #220	; 0xdc
 8007950:	04bf      	lsls	r7, r7, #18
 8007952:	2200      	movs	r2, #0
 8007954:	2300      	movs	r3, #0
 8007956:	0030      	movs	r0, r6
 8007958:	0039      	movs	r1, r7
 800795a:	f7f8 fd77 	bl	800044c <__aeabi_dcmpeq>
 800795e:	2800      	cmp	r0, #0
 8007960:	d1a0      	bne.n	80078a4 <_strtod_l+0x5b0>
 8007962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	9910      	ldr	r1, [sp, #64]	; 0x40
 800796a:	9b06      	ldr	r3, [sp, #24]
 800796c:	9805      	ldr	r0, [sp, #20]
 800796e:	f001 fe69 	bl	8009644 <__s2b>
 8007972:	900b      	str	r0, [sp, #44]	; 0x2c
 8007974:	2800      	cmp	r0, #0
 8007976:	d100      	bne.n	800797a <_strtod_l+0x686>
 8007978:	e721      	b.n	80077be <_strtod_l+0x4ca>
 800797a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800797c:	9907      	ldr	r1, [sp, #28]
 800797e:	17da      	asrs	r2, r3, #31
 8007980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007982:	1a5b      	subs	r3, r3, r1
 8007984:	401a      	ands	r2, r3
 8007986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007988:	9215      	str	r2, [sp, #84]	; 0x54
 800798a:	43db      	mvns	r3, r3
 800798c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800798e:	17db      	asrs	r3, r3, #31
 8007990:	401a      	ands	r2, r3
 8007992:	2300      	movs	r3, #0
 8007994:	921a      	str	r2, [sp, #104]	; 0x68
 8007996:	9306      	str	r3, [sp, #24]
 8007998:	9307      	str	r3, [sp, #28]
 800799a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800799c:	9805      	ldr	r0, [sp, #20]
 800799e:	6859      	ldr	r1, [r3, #4]
 80079a0:	f001 fda4 	bl	80094ec <_Balloc>
 80079a4:	9009      	str	r0, [sp, #36]	; 0x24
 80079a6:	2800      	cmp	r0, #0
 80079a8:	d100      	bne.n	80079ac <_strtod_l+0x6b8>
 80079aa:	e70d      	b.n	80077c8 <_strtod_l+0x4d4>
 80079ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	310c      	adds	r1, #12
 80079b4:	1c9a      	adds	r2, r3, #2
 80079b6:	0092      	lsls	r2, r2, #2
 80079b8:	300c      	adds	r0, #12
 80079ba:	930c      	str	r3, [sp, #48]	; 0x30
 80079bc:	f001 fd8d 	bl	80094da <memcpy>
 80079c0:	ab22      	add	r3, sp, #136	; 0x88
 80079c2:	9301      	str	r3, [sp, #4]
 80079c4:	ab21      	add	r3, sp, #132	; 0x84
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	0032      	movs	r2, r6
 80079ca:	003b      	movs	r3, r7
 80079cc:	9805      	ldr	r0, [sp, #20]
 80079ce:	9612      	str	r6, [sp, #72]	; 0x48
 80079d0:	9713      	str	r7, [sp, #76]	; 0x4c
 80079d2:	f002 f983 	bl	8009cdc <__d2b>
 80079d6:	9020      	str	r0, [sp, #128]	; 0x80
 80079d8:	2800      	cmp	r0, #0
 80079da:	d100      	bne.n	80079de <_strtod_l+0x6ea>
 80079dc:	e6f4      	b.n	80077c8 <_strtod_l+0x4d4>
 80079de:	2101      	movs	r1, #1
 80079e0:	9805      	ldr	r0, [sp, #20]
 80079e2:	f001 fec3 	bl	800976c <__i2b>
 80079e6:	9007      	str	r0, [sp, #28]
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d100      	bne.n	80079ee <_strtod_l+0x6fa>
 80079ec:	e6ec      	b.n	80077c8 <_strtod_l+0x4d4>
 80079ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80079f2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80079f4:	1ad4      	subs	r4, r2, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	db01      	blt.n	80079fe <_strtod_l+0x70a>
 80079fa:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80079fc:	195d      	adds	r5, r3, r5
 80079fe:	9908      	ldr	r1, [sp, #32]
 8007a00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a02:	1a5b      	subs	r3, r3, r1
 8007a04:	2136      	movs	r1, #54	; 0x36
 8007a06:	189b      	adds	r3, r3, r2
 8007a08:	1a8a      	subs	r2, r1, r2
 8007a0a:	4986      	ldr	r1, [pc, #536]	; (8007c24 <_strtod_l+0x930>)
 8007a0c:	2001      	movs	r0, #1
 8007a0e:	468c      	mov	ip, r1
 8007a10:	2100      	movs	r1, #0
 8007a12:	3b01      	subs	r3, #1
 8007a14:	9110      	str	r1, [sp, #64]	; 0x40
 8007a16:	9014      	str	r0, [sp, #80]	; 0x50
 8007a18:	4563      	cmp	r3, ip
 8007a1a:	da07      	bge.n	8007a2c <_strtod_l+0x738>
 8007a1c:	4661      	mov	r1, ip
 8007a1e:	1ac9      	subs	r1, r1, r3
 8007a20:	1a52      	subs	r2, r2, r1
 8007a22:	291f      	cmp	r1, #31
 8007a24:	dd00      	ble.n	8007a28 <_strtod_l+0x734>
 8007a26:	e0b8      	b.n	8007b9a <_strtod_l+0x8a6>
 8007a28:	4088      	lsls	r0, r1
 8007a2a:	9014      	str	r0, [sp, #80]	; 0x50
 8007a2c:	18ab      	adds	r3, r5, r2
 8007a2e:	930c      	str	r3, [sp, #48]	; 0x30
 8007a30:	18a4      	adds	r4, r4, r2
 8007a32:	9b08      	ldr	r3, [sp, #32]
 8007a34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a36:	191c      	adds	r4, r3, r4
 8007a38:	002b      	movs	r3, r5
 8007a3a:	4295      	cmp	r5, r2
 8007a3c:	dd00      	ble.n	8007a40 <_strtod_l+0x74c>
 8007a3e:	0013      	movs	r3, r2
 8007a40:	42a3      	cmp	r3, r4
 8007a42:	dd00      	ble.n	8007a46 <_strtod_l+0x752>
 8007a44:	0023      	movs	r3, r4
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	dd04      	ble.n	8007a54 <_strtod_l+0x760>
 8007a4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a4c:	1ae4      	subs	r4, r4, r3
 8007a4e:	1ad2      	subs	r2, r2, r3
 8007a50:	920c      	str	r2, [sp, #48]	; 0x30
 8007a52:	1aed      	subs	r5, r5, r3
 8007a54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	dd17      	ble.n	8007a8a <_strtod_l+0x796>
 8007a5a:	001a      	movs	r2, r3
 8007a5c:	9907      	ldr	r1, [sp, #28]
 8007a5e:	9805      	ldr	r0, [sp, #20]
 8007a60:	f001 ff4a 	bl	80098f8 <__pow5mult>
 8007a64:	9007      	str	r0, [sp, #28]
 8007a66:	2800      	cmp	r0, #0
 8007a68:	d100      	bne.n	8007a6c <_strtod_l+0x778>
 8007a6a:	e6ad      	b.n	80077c8 <_strtod_l+0x4d4>
 8007a6c:	0001      	movs	r1, r0
 8007a6e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a70:	9805      	ldr	r0, [sp, #20]
 8007a72:	f001 fe91 	bl	8009798 <__multiply>
 8007a76:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d100      	bne.n	8007a7e <_strtod_l+0x78a>
 8007a7c:	e6a4      	b.n	80077c8 <_strtod_l+0x4d4>
 8007a7e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007a80:	9805      	ldr	r0, [sp, #20]
 8007a82:	f001 fd77 	bl	8009574 <_Bfree>
 8007a86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a88:	9320      	str	r3, [sp, #128]	; 0x80
 8007a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dd00      	ble.n	8007a92 <_strtod_l+0x79e>
 8007a90:	e089      	b.n	8007ba6 <_strtod_l+0x8b2>
 8007a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	dd08      	ble.n	8007aaa <_strtod_l+0x7b6>
 8007a98:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a9c:	9805      	ldr	r0, [sp, #20]
 8007a9e:	f001 ff2b 	bl	80098f8 <__pow5mult>
 8007aa2:	9009      	str	r0, [sp, #36]	; 0x24
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d100      	bne.n	8007aaa <_strtod_l+0x7b6>
 8007aa8:	e68e      	b.n	80077c8 <_strtod_l+0x4d4>
 8007aaa:	2c00      	cmp	r4, #0
 8007aac:	dd08      	ble.n	8007ac0 <_strtod_l+0x7cc>
 8007aae:	0022      	movs	r2, r4
 8007ab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ab2:	9805      	ldr	r0, [sp, #20]
 8007ab4:	f001 ff7c 	bl	80099b0 <__lshift>
 8007ab8:	9009      	str	r0, [sp, #36]	; 0x24
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d100      	bne.n	8007ac0 <_strtod_l+0x7cc>
 8007abe:	e683      	b.n	80077c8 <_strtod_l+0x4d4>
 8007ac0:	2d00      	cmp	r5, #0
 8007ac2:	dd08      	ble.n	8007ad6 <_strtod_l+0x7e2>
 8007ac4:	002a      	movs	r2, r5
 8007ac6:	9907      	ldr	r1, [sp, #28]
 8007ac8:	9805      	ldr	r0, [sp, #20]
 8007aca:	f001 ff71 	bl	80099b0 <__lshift>
 8007ace:	9007      	str	r0, [sp, #28]
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d100      	bne.n	8007ad6 <_strtod_l+0x7e2>
 8007ad4:	e678      	b.n	80077c8 <_strtod_l+0x4d4>
 8007ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ad8:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007ada:	9805      	ldr	r0, [sp, #20]
 8007adc:	f001 fff2 	bl	8009ac4 <__mdiff>
 8007ae0:	9006      	str	r0, [sp, #24]
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	d100      	bne.n	8007ae8 <_strtod_l+0x7f4>
 8007ae6:	e66f      	b.n	80077c8 <_strtod_l+0x4d4>
 8007ae8:	2200      	movs	r2, #0
 8007aea:	68c3      	ldr	r3, [r0, #12]
 8007aec:	9907      	ldr	r1, [sp, #28]
 8007aee:	60c2      	str	r2, [r0, #12]
 8007af0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007af2:	f001 ffcb 	bl	8009a8c <__mcmp>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	da5f      	bge.n	8007bba <_strtod_l+0x8c6>
 8007afa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007afc:	4333      	orrs	r3, r6
 8007afe:	d000      	beq.n	8007b02 <_strtod_l+0x80e>
 8007b00:	e08a      	b.n	8007c18 <_strtod_l+0x924>
 8007b02:	033b      	lsls	r3, r7, #12
 8007b04:	d000      	beq.n	8007b08 <_strtod_l+0x814>
 8007b06:	e087      	b.n	8007c18 <_strtod_l+0x924>
 8007b08:	22d6      	movs	r2, #214	; 0xd6
 8007b0a:	4b47      	ldr	r3, [pc, #284]	; (8007c28 <_strtod_l+0x934>)
 8007b0c:	04d2      	lsls	r2, r2, #19
 8007b0e:	403b      	ands	r3, r7
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d800      	bhi.n	8007b16 <_strtod_l+0x822>
 8007b14:	e080      	b.n	8007c18 <_strtod_l+0x924>
 8007b16:	9b06      	ldr	r3, [sp, #24]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d104      	bne.n	8007b2a <_strtod_l+0x836>
 8007b20:	9b06      	ldr	r3, [sp, #24]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	930a      	str	r3, [sp, #40]	; 0x28
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	dd76      	ble.n	8007c18 <_strtod_l+0x924>
 8007b2a:	9906      	ldr	r1, [sp, #24]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	9805      	ldr	r0, [sp, #20]
 8007b30:	f001 ff3e 	bl	80099b0 <__lshift>
 8007b34:	9907      	ldr	r1, [sp, #28]
 8007b36:	9006      	str	r0, [sp, #24]
 8007b38:	f001 ffa8 	bl	8009a8c <__mcmp>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	dd6b      	ble.n	8007c18 <_strtod_l+0x924>
 8007b40:	9908      	ldr	r1, [sp, #32]
 8007b42:	003b      	movs	r3, r7
 8007b44:	4a38      	ldr	r2, [pc, #224]	; (8007c28 <_strtod_l+0x934>)
 8007b46:	2900      	cmp	r1, #0
 8007b48:	d100      	bne.n	8007b4c <_strtod_l+0x858>
 8007b4a:	e092      	b.n	8007c72 <_strtod_l+0x97e>
 8007b4c:	0011      	movs	r1, r2
 8007b4e:	20d6      	movs	r0, #214	; 0xd6
 8007b50:	4039      	ands	r1, r7
 8007b52:	04c0      	lsls	r0, r0, #19
 8007b54:	4281      	cmp	r1, r0
 8007b56:	dd00      	ble.n	8007b5a <_strtod_l+0x866>
 8007b58:	e08b      	b.n	8007c72 <_strtod_l+0x97e>
 8007b5a:	23dc      	movs	r3, #220	; 0xdc
 8007b5c:	049b      	lsls	r3, r3, #18
 8007b5e:	4299      	cmp	r1, r3
 8007b60:	dc00      	bgt.n	8007b64 <_strtod_l+0x870>
 8007b62:	e6a4      	b.n	80078ae <_strtod_l+0x5ba>
 8007b64:	0030      	movs	r0, r6
 8007b66:	0039      	movs	r1, r7
 8007b68:	2200      	movs	r2, #0
 8007b6a:	4b30      	ldr	r3, [pc, #192]	; (8007c2c <_strtod_l+0x938>)
 8007b6c:	f7f9 fc4a 	bl	8001404 <__aeabi_dmul>
 8007b70:	0006      	movs	r6, r0
 8007b72:	000f      	movs	r7, r1
 8007b74:	4308      	orrs	r0, r1
 8007b76:	d000      	beq.n	8007b7a <_strtod_l+0x886>
 8007b78:	e62f      	b.n	80077da <_strtod_l+0x4e6>
 8007b7a:	2322      	movs	r3, #34	; 0x22
 8007b7c:	9a05      	ldr	r2, [sp, #20]
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	e62b      	b.n	80077da <_strtod_l+0x4e6>
 8007b82:	234b      	movs	r3, #75	; 0x4b
 8007b84:	1a9a      	subs	r2, r3, r2
 8007b86:	3b4c      	subs	r3, #76	; 0x4c
 8007b88:	4093      	lsls	r3, r2
 8007b8a:	4019      	ands	r1, r3
 8007b8c:	000f      	movs	r7, r1
 8007b8e:	e6e0      	b.n	8007952 <_strtod_l+0x65e>
 8007b90:	2201      	movs	r2, #1
 8007b92:	4252      	negs	r2, r2
 8007b94:	409a      	lsls	r2, r3
 8007b96:	4016      	ands	r6, r2
 8007b98:	e6db      	b.n	8007952 <_strtod_l+0x65e>
 8007b9a:	4925      	ldr	r1, [pc, #148]	; (8007c30 <_strtod_l+0x93c>)
 8007b9c:	1acb      	subs	r3, r1, r3
 8007b9e:	0001      	movs	r1, r0
 8007ba0:	4099      	lsls	r1, r3
 8007ba2:	9110      	str	r1, [sp, #64]	; 0x40
 8007ba4:	e741      	b.n	8007a2a <_strtod_l+0x736>
 8007ba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ba8:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007baa:	9805      	ldr	r0, [sp, #20]
 8007bac:	f001 ff00 	bl	80099b0 <__lshift>
 8007bb0:	9020      	str	r0, [sp, #128]	; 0x80
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d000      	beq.n	8007bb8 <_strtod_l+0x8c4>
 8007bb6:	e76c      	b.n	8007a92 <_strtod_l+0x79e>
 8007bb8:	e606      	b.n	80077c8 <_strtod_l+0x4d4>
 8007bba:	970c      	str	r7, [sp, #48]	; 0x30
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d176      	bne.n	8007cae <_strtod_l+0x9ba>
 8007bc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bc2:	033b      	lsls	r3, r7, #12
 8007bc4:	0b1b      	lsrs	r3, r3, #12
 8007bc6:	2a00      	cmp	r2, #0
 8007bc8:	d038      	beq.n	8007c3c <_strtod_l+0x948>
 8007bca:	4a1a      	ldr	r2, [pc, #104]	; (8007c34 <_strtod_l+0x940>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d138      	bne.n	8007c42 <_strtod_l+0x94e>
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	9b08      	ldr	r3, [sp, #32]
 8007bd4:	4252      	negs	r2, r2
 8007bd6:	0031      	movs	r1, r6
 8007bd8:	0010      	movs	r0, r2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00b      	beq.n	8007bf6 <_strtod_l+0x902>
 8007bde:	24d4      	movs	r4, #212	; 0xd4
 8007be0:	4b11      	ldr	r3, [pc, #68]	; (8007c28 <_strtod_l+0x934>)
 8007be2:	0010      	movs	r0, r2
 8007be4:	403b      	ands	r3, r7
 8007be6:	04e4      	lsls	r4, r4, #19
 8007be8:	42a3      	cmp	r3, r4
 8007bea:	d804      	bhi.n	8007bf6 <_strtod_l+0x902>
 8007bec:	306c      	adds	r0, #108	; 0x6c
 8007bee:	0d1b      	lsrs	r3, r3, #20
 8007bf0:	1ac3      	subs	r3, r0, r3
 8007bf2:	409a      	lsls	r2, r3
 8007bf4:	0010      	movs	r0, r2
 8007bf6:	4281      	cmp	r1, r0
 8007bf8:	d123      	bne.n	8007c42 <_strtod_l+0x94e>
 8007bfa:	4b0f      	ldr	r3, [pc, #60]	; (8007c38 <_strtod_l+0x944>)
 8007bfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d102      	bne.n	8007c08 <_strtod_l+0x914>
 8007c02:	1c4b      	adds	r3, r1, #1
 8007c04:	d100      	bne.n	8007c08 <_strtod_l+0x914>
 8007c06:	e5df      	b.n	80077c8 <_strtod_l+0x4d4>
 8007c08:	4b07      	ldr	r3, [pc, #28]	; (8007c28 <_strtod_l+0x934>)
 8007c0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c0c:	2600      	movs	r6, #0
 8007c0e:	401a      	ands	r2, r3
 8007c10:	0013      	movs	r3, r2
 8007c12:	2280      	movs	r2, #128	; 0x80
 8007c14:	0352      	lsls	r2, r2, #13
 8007c16:	189f      	adds	r7, r3, r2
 8007c18:	9b08      	ldr	r3, [sp, #32]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1a2      	bne.n	8007b64 <_strtod_l+0x870>
 8007c1e:	e5dc      	b.n	80077da <_strtod_l+0x4e6>
 8007c20:	0800b1b0 	.word	0x0800b1b0
 8007c24:	fffffc02 	.word	0xfffffc02
 8007c28:	7ff00000 	.word	0x7ff00000
 8007c2c:	39500000 	.word	0x39500000
 8007c30:	fffffbe2 	.word	0xfffffbe2
 8007c34:	000fffff 	.word	0x000fffff
 8007c38:	7fefffff 	.word	0x7fefffff
 8007c3c:	4333      	orrs	r3, r6
 8007c3e:	d100      	bne.n	8007c42 <_strtod_l+0x94e>
 8007c40:	e77e      	b.n	8007b40 <_strtod_l+0x84c>
 8007c42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d01d      	beq.n	8007c84 <_strtod_l+0x990>
 8007c48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c4c:	4213      	tst	r3, r2
 8007c4e:	d0e3      	beq.n	8007c18 <_strtod_l+0x924>
 8007c50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c52:	0030      	movs	r0, r6
 8007c54:	0039      	movs	r1, r7
 8007c56:	9a08      	ldr	r2, [sp, #32]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d017      	beq.n	8007c8c <_strtod_l+0x998>
 8007c5c:	f7ff fb32 	bl	80072c4 <sulp>
 8007c60:	0002      	movs	r2, r0
 8007c62:	000b      	movs	r3, r1
 8007c64:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c66:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007c68:	f7f8 fc8e 	bl	8000588 <__aeabi_dadd>
 8007c6c:	0006      	movs	r6, r0
 8007c6e:	000f      	movs	r7, r1
 8007c70:	e7d2      	b.n	8007c18 <_strtod_l+0x924>
 8007c72:	2601      	movs	r6, #1
 8007c74:	4013      	ands	r3, r2
 8007c76:	4a99      	ldr	r2, [pc, #612]	; (8007edc <_strtod_l+0xbe8>)
 8007c78:	4276      	negs	r6, r6
 8007c7a:	189b      	adds	r3, r3, r2
 8007c7c:	4a98      	ldr	r2, [pc, #608]	; (8007ee0 <_strtod_l+0xbec>)
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	0017      	movs	r7, r2
 8007c82:	e7c9      	b.n	8007c18 <_strtod_l+0x924>
 8007c84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c86:	4233      	tst	r3, r6
 8007c88:	d0c6      	beq.n	8007c18 <_strtod_l+0x924>
 8007c8a:	e7e1      	b.n	8007c50 <_strtod_l+0x95c>
 8007c8c:	f7ff fb1a 	bl	80072c4 <sulp>
 8007c90:	0002      	movs	r2, r0
 8007c92:	000b      	movs	r3, r1
 8007c94:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007c98:	f7f9 fe20 	bl	80018dc <__aeabi_dsub>
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	0006      	movs	r6, r0
 8007ca2:	000f      	movs	r7, r1
 8007ca4:	f7f8 fbd2 	bl	800044c <__aeabi_dcmpeq>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d0b5      	beq.n	8007c18 <_strtod_l+0x924>
 8007cac:	e5ff      	b.n	80078ae <_strtod_l+0x5ba>
 8007cae:	9907      	ldr	r1, [sp, #28]
 8007cb0:	9806      	ldr	r0, [sp, #24]
 8007cb2:	f002 f877 	bl	8009da4 <__ratio>
 8007cb6:	2380      	movs	r3, #128	; 0x80
 8007cb8:	2200      	movs	r2, #0
 8007cba:	05db      	lsls	r3, r3, #23
 8007cbc:	0004      	movs	r4, r0
 8007cbe:	000d      	movs	r5, r1
 8007cc0:	f7f8 fbd4 	bl	800046c <__aeabi_dcmple>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d075      	beq.n	8007db4 <_strtod_l+0xac0>
 8007cc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d047      	beq.n	8007d5e <_strtod_l+0xa6a>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	4c84      	ldr	r4, [pc, #528]	; (8007ee4 <_strtod_l+0xbf0>)
 8007cd2:	2500      	movs	r5, #0
 8007cd4:	9310      	str	r3, [sp, #64]	; 0x40
 8007cd6:	9411      	str	r4, [sp, #68]	; 0x44
 8007cd8:	4c82      	ldr	r4, [pc, #520]	; (8007ee4 <_strtod_l+0xbf0>)
 8007cda:	4a83      	ldr	r2, [pc, #524]	; (8007ee8 <_strtod_l+0xbf4>)
 8007cdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cde:	4013      	ands	r3, r2
 8007ce0:	9314      	str	r3, [sp, #80]	; 0x50
 8007ce2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ce4:	4b81      	ldr	r3, [pc, #516]	; (8007eec <_strtod_l+0xbf8>)
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d000      	beq.n	8007cec <_strtod_l+0x9f8>
 8007cea:	e0ac      	b.n	8007e46 <_strtod_l+0xb52>
 8007cec:	4a80      	ldr	r2, [pc, #512]	; (8007ef0 <_strtod_l+0xbfc>)
 8007cee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cf0:	4694      	mov	ip, r2
 8007cf2:	4463      	add	r3, ip
 8007cf4:	001f      	movs	r7, r3
 8007cf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007cf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cfa:	0030      	movs	r0, r6
 8007cfc:	0039      	movs	r1, r7
 8007cfe:	920c      	str	r2, [sp, #48]	; 0x30
 8007d00:	930d      	str	r3, [sp, #52]	; 0x34
 8007d02:	f001 ff77 	bl	8009bf4 <__ulp>
 8007d06:	0002      	movs	r2, r0
 8007d08:	000b      	movs	r3, r1
 8007d0a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007d0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d0e:	f7f9 fb79 	bl	8001404 <__aeabi_dmul>
 8007d12:	0032      	movs	r2, r6
 8007d14:	003b      	movs	r3, r7
 8007d16:	f7f8 fc37 	bl	8000588 <__aeabi_dadd>
 8007d1a:	4a73      	ldr	r2, [pc, #460]	; (8007ee8 <_strtod_l+0xbf4>)
 8007d1c:	4b75      	ldr	r3, [pc, #468]	; (8007ef4 <_strtod_l+0xc00>)
 8007d1e:	0006      	movs	r6, r0
 8007d20:	400a      	ands	r2, r1
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d95e      	bls.n	8007de4 <_strtod_l+0xaf0>
 8007d26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d28:	4b73      	ldr	r3, [pc, #460]	; (8007ef8 <_strtod_l+0xc04>)
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d103      	bne.n	8007d36 <_strtod_l+0xa42>
 8007d2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d30:	3301      	adds	r3, #1
 8007d32:	d100      	bne.n	8007d36 <_strtod_l+0xa42>
 8007d34:	e548      	b.n	80077c8 <_strtod_l+0x4d4>
 8007d36:	2601      	movs	r6, #1
 8007d38:	4f6f      	ldr	r7, [pc, #444]	; (8007ef8 <_strtod_l+0xc04>)
 8007d3a:	4276      	negs	r6, r6
 8007d3c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007d3e:	9805      	ldr	r0, [sp, #20]
 8007d40:	f001 fc18 	bl	8009574 <_Bfree>
 8007d44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d46:	9805      	ldr	r0, [sp, #20]
 8007d48:	f001 fc14 	bl	8009574 <_Bfree>
 8007d4c:	9907      	ldr	r1, [sp, #28]
 8007d4e:	9805      	ldr	r0, [sp, #20]
 8007d50:	f001 fc10 	bl	8009574 <_Bfree>
 8007d54:	9906      	ldr	r1, [sp, #24]
 8007d56:	9805      	ldr	r0, [sp, #20]
 8007d58:	f001 fc0c 	bl	8009574 <_Bfree>
 8007d5c:	e61d      	b.n	800799a <_strtod_l+0x6a6>
 8007d5e:	2e00      	cmp	r6, #0
 8007d60:	d11c      	bne.n	8007d9c <_strtod_l+0xaa8>
 8007d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d64:	031b      	lsls	r3, r3, #12
 8007d66:	d11f      	bne.n	8007da8 <_strtod_l+0xab4>
 8007d68:	2200      	movs	r2, #0
 8007d6a:	0020      	movs	r0, r4
 8007d6c:	0029      	movs	r1, r5
 8007d6e:	4b5d      	ldr	r3, [pc, #372]	; (8007ee4 <_strtod_l+0xbf0>)
 8007d70:	f7f8 fb72 	bl	8000458 <__aeabi_dcmplt>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d11a      	bne.n	8007dae <_strtod_l+0xaba>
 8007d78:	0020      	movs	r0, r4
 8007d7a:	0029      	movs	r1, r5
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	4b5f      	ldr	r3, [pc, #380]	; (8007efc <_strtod_l+0xc08>)
 8007d80:	f7f9 fb40 	bl	8001404 <__aeabi_dmul>
 8007d84:	0005      	movs	r5, r0
 8007d86:	000c      	movs	r4, r1
 8007d88:	2380      	movs	r3, #128	; 0x80
 8007d8a:	061b      	lsls	r3, r3, #24
 8007d8c:	18e3      	adds	r3, r4, r3
 8007d8e:	951c      	str	r5, [sp, #112]	; 0x70
 8007d90:	931d      	str	r3, [sp, #116]	; 0x74
 8007d92:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d96:	9210      	str	r2, [sp, #64]	; 0x40
 8007d98:	9311      	str	r3, [sp, #68]	; 0x44
 8007d9a:	e79e      	b.n	8007cda <_strtod_l+0x9e6>
 8007d9c:	2e01      	cmp	r6, #1
 8007d9e:	d103      	bne.n	8007da8 <_strtod_l+0xab4>
 8007da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d100      	bne.n	8007da8 <_strtod_l+0xab4>
 8007da6:	e582      	b.n	80078ae <_strtod_l+0x5ba>
 8007da8:	2300      	movs	r3, #0
 8007daa:	4c55      	ldr	r4, [pc, #340]	; (8007f00 <_strtod_l+0xc0c>)
 8007dac:	e791      	b.n	8007cd2 <_strtod_l+0x9de>
 8007dae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007db0:	4c52      	ldr	r4, [pc, #328]	; (8007efc <_strtod_l+0xc08>)
 8007db2:	e7e9      	b.n	8007d88 <_strtod_l+0xa94>
 8007db4:	2200      	movs	r2, #0
 8007db6:	0020      	movs	r0, r4
 8007db8:	0029      	movs	r1, r5
 8007dba:	4b50      	ldr	r3, [pc, #320]	; (8007efc <_strtod_l+0xc08>)
 8007dbc:	f7f9 fb22 	bl	8001404 <__aeabi_dmul>
 8007dc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dc2:	0005      	movs	r5, r0
 8007dc4:	000b      	movs	r3, r1
 8007dc6:	000c      	movs	r4, r1
 8007dc8:	2a00      	cmp	r2, #0
 8007dca:	d107      	bne.n	8007ddc <_strtod_l+0xae8>
 8007dcc:	2280      	movs	r2, #128	; 0x80
 8007dce:	0612      	lsls	r2, r2, #24
 8007dd0:	188b      	adds	r3, r1, r2
 8007dd2:	9016      	str	r0, [sp, #88]	; 0x58
 8007dd4:	9317      	str	r3, [sp, #92]	; 0x5c
 8007dd6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007dd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dda:	e7dc      	b.n	8007d96 <_strtod_l+0xaa2>
 8007ddc:	0002      	movs	r2, r0
 8007dde:	9216      	str	r2, [sp, #88]	; 0x58
 8007de0:	9317      	str	r3, [sp, #92]	; 0x5c
 8007de2:	e7f8      	b.n	8007dd6 <_strtod_l+0xae2>
 8007de4:	23d4      	movs	r3, #212	; 0xd4
 8007de6:	049b      	lsls	r3, r3, #18
 8007de8:	18cf      	adds	r7, r1, r3
 8007dea:	9b08      	ldr	r3, [sp, #32]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1a5      	bne.n	8007d3c <_strtod_l+0xa48>
 8007df0:	4b3d      	ldr	r3, [pc, #244]	; (8007ee8 <_strtod_l+0xbf4>)
 8007df2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007df4:	403b      	ands	r3, r7
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d1a0      	bne.n	8007d3c <_strtod_l+0xa48>
 8007dfa:	0028      	movs	r0, r5
 8007dfc:	0021      	movs	r1, r4
 8007dfe:	f7f8 fb71 	bl	80004e4 <__aeabi_d2lz>
 8007e02:	f7f8 fbab 	bl	800055c <__aeabi_l2d>
 8007e06:	0002      	movs	r2, r0
 8007e08:	000b      	movs	r3, r1
 8007e0a:	0028      	movs	r0, r5
 8007e0c:	0021      	movs	r1, r4
 8007e0e:	f7f9 fd65 	bl	80018dc <__aeabi_dsub>
 8007e12:	033b      	lsls	r3, r7, #12
 8007e14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e16:	0b1b      	lsrs	r3, r3, #12
 8007e18:	4333      	orrs	r3, r6
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	0004      	movs	r4, r0
 8007e1e:	000d      	movs	r5, r1
 8007e20:	4a38      	ldr	r2, [pc, #224]	; (8007f04 <_strtod_l+0xc10>)
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d055      	beq.n	8007ed2 <_strtod_l+0xbde>
 8007e26:	4b38      	ldr	r3, [pc, #224]	; (8007f08 <_strtod_l+0xc14>)
 8007e28:	f7f8 fb16 	bl	8000458 <__aeabi_dcmplt>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d000      	beq.n	8007e32 <_strtod_l+0xb3e>
 8007e30:	e4d3      	b.n	80077da <_strtod_l+0x4e6>
 8007e32:	0020      	movs	r0, r4
 8007e34:	0029      	movs	r1, r5
 8007e36:	4a35      	ldr	r2, [pc, #212]	; (8007f0c <_strtod_l+0xc18>)
 8007e38:	4b30      	ldr	r3, [pc, #192]	; (8007efc <_strtod_l+0xc08>)
 8007e3a:	f7f8 fb21 	bl	8000480 <__aeabi_dcmpgt>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d100      	bne.n	8007e44 <_strtod_l+0xb50>
 8007e42:	e77b      	b.n	8007d3c <_strtod_l+0xa48>
 8007e44:	e4c9      	b.n	80077da <_strtod_l+0x4e6>
 8007e46:	9b08      	ldr	r3, [sp, #32]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d02b      	beq.n	8007ea4 <_strtod_l+0xbb0>
 8007e4c:	23d4      	movs	r3, #212	; 0xd4
 8007e4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e50:	04db      	lsls	r3, r3, #19
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d826      	bhi.n	8007ea4 <_strtod_l+0xbb0>
 8007e56:	0028      	movs	r0, r5
 8007e58:	0021      	movs	r1, r4
 8007e5a:	4a2d      	ldr	r2, [pc, #180]	; (8007f10 <_strtod_l+0xc1c>)
 8007e5c:	4b2d      	ldr	r3, [pc, #180]	; (8007f14 <_strtod_l+0xc20>)
 8007e5e:	f7f8 fb05 	bl	800046c <__aeabi_dcmple>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d017      	beq.n	8007e96 <_strtod_l+0xba2>
 8007e66:	0028      	movs	r0, r5
 8007e68:	0021      	movs	r1, r4
 8007e6a:	f7f8 fb1d 	bl	80004a8 <__aeabi_d2uiz>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d100      	bne.n	8007e74 <_strtod_l+0xb80>
 8007e72:	3001      	adds	r0, #1
 8007e74:	f7fa f948 	bl	8002108 <__aeabi_ui2d>
 8007e78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e7a:	0005      	movs	r5, r0
 8007e7c:	000b      	movs	r3, r1
 8007e7e:	000c      	movs	r4, r1
 8007e80:	2a00      	cmp	r2, #0
 8007e82:	d122      	bne.n	8007eca <_strtod_l+0xbd6>
 8007e84:	2280      	movs	r2, #128	; 0x80
 8007e86:	0612      	lsls	r2, r2, #24
 8007e88:	188b      	adds	r3, r1, r2
 8007e8a:	9018      	str	r0, [sp, #96]	; 0x60
 8007e8c:	9319      	str	r3, [sp, #100]	; 0x64
 8007e8e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e92:	9210      	str	r2, [sp, #64]	; 0x40
 8007e94:	9311      	str	r3, [sp, #68]	; 0x44
 8007e96:	22d6      	movs	r2, #214	; 0xd6
 8007e98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e9a:	04d2      	lsls	r2, r2, #19
 8007e9c:	189b      	adds	r3, r3, r2
 8007e9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ea0:	1a9b      	subs	r3, r3, r2
 8007ea2:	9311      	str	r3, [sp, #68]	; 0x44
 8007ea4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007ea6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ea8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007eaa:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007eac:	f001 fea2 	bl	8009bf4 <__ulp>
 8007eb0:	0002      	movs	r2, r0
 8007eb2:	000b      	movs	r3, r1
 8007eb4:	0030      	movs	r0, r6
 8007eb6:	0039      	movs	r1, r7
 8007eb8:	f7f9 faa4 	bl	8001404 <__aeabi_dmul>
 8007ebc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ebe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ec0:	f7f8 fb62 	bl	8000588 <__aeabi_dadd>
 8007ec4:	0006      	movs	r6, r0
 8007ec6:	000f      	movs	r7, r1
 8007ec8:	e78f      	b.n	8007dea <_strtod_l+0xaf6>
 8007eca:	0002      	movs	r2, r0
 8007ecc:	9218      	str	r2, [sp, #96]	; 0x60
 8007ece:	9319      	str	r3, [sp, #100]	; 0x64
 8007ed0:	e7dd      	b.n	8007e8e <_strtod_l+0xb9a>
 8007ed2:	4b11      	ldr	r3, [pc, #68]	; (8007f18 <_strtod_l+0xc24>)
 8007ed4:	f7f8 fac0 	bl	8000458 <__aeabi_dcmplt>
 8007ed8:	e7b1      	b.n	8007e3e <_strtod_l+0xb4a>
 8007eda:	46c0      	nop			; (mov r8, r8)
 8007edc:	fff00000 	.word	0xfff00000
 8007ee0:	000fffff 	.word	0x000fffff
 8007ee4:	3ff00000 	.word	0x3ff00000
 8007ee8:	7ff00000 	.word	0x7ff00000
 8007eec:	7fe00000 	.word	0x7fe00000
 8007ef0:	fcb00000 	.word	0xfcb00000
 8007ef4:	7c9fffff 	.word	0x7c9fffff
 8007ef8:	7fefffff 	.word	0x7fefffff
 8007efc:	3fe00000 	.word	0x3fe00000
 8007f00:	bff00000 	.word	0xbff00000
 8007f04:	94a03595 	.word	0x94a03595
 8007f08:	3fdfffff 	.word	0x3fdfffff
 8007f0c:	35afe535 	.word	0x35afe535
 8007f10:	ffc00000 	.word	0xffc00000
 8007f14:	41dfffff 	.word	0x41dfffff
 8007f18:	3fcfffff 	.word	0x3fcfffff

08007f1c <_strtod_r>:
 8007f1c:	b510      	push	{r4, lr}
 8007f1e:	4b02      	ldr	r3, [pc, #8]	; (8007f28 <_strtod_r+0xc>)
 8007f20:	f7ff f9e8 	bl	80072f4 <_strtod_l>
 8007f24:	bd10      	pop	{r4, pc}
 8007f26:	46c0      	nop			; (mov r8, r8)
 8007f28:	20000074 	.word	0x20000074

08007f2c <_strtol_l.constprop.0>:
 8007f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	001e      	movs	r6, r3
 8007f32:	9005      	str	r0, [sp, #20]
 8007f34:	9101      	str	r1, [sp, #4]
 8007f36:	9202      	str	r2, [sp, #8]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d045      	beq.n	8007fc8 <_strtol_l.constprop.0+0x9c>
 8007f3c:	000b      	movs	r3, r1
 8007f3e:	2e24      	cmp	r6, #36	; 0x24
 8007f40:	d842      	bhi.n	8007fc8 <_strtol_l.constprop.0+0x9c>
 8007f42:	4a3f      	ldr	r2, [pc, #252]	; (8008040 <_strtol_l.constprop.0+0x114>)
 8007f44:	2108      	movs	r1, #8
 8007f46:	4694      	mov	ip, r2
 8007f48:	001a      	movs	r2, r3
 8007f4a:	4660      	mov	r0, ip
 8007f4c:	7814      	ldrb	r4, [r2, #0]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	5d00      	ldrb	r0, [r0, r4]
 8007f52:	001d      	movs	r5, r3
 8007f54:	0007      	movs	r7, r0
 8007f56:	400f      	ands	r7, r1
 8007f58:	4208      	tst	r0, r1
 8007f5a:	d1f5      	bne.n	8007f48 <_strtol_l.constprop.0+0x1c>
 8007f5c:	2c2d      	cmp	r4, #45	; 0x2d
 8007f5e:	d13a      	bne.n	8007fd6 <_strtol_l.constprop.0+0xaa>
 8007f60:	2701      	movs	r7, #1
 8007f62:	781c      	ldrb	r4, [r3, #0]
 8007f64:	1c95      	adds	r5, r2, #2
 8007f66:	2e00      	cmp	r6, #0
 8007f68:	d065      	beq.n	8008036 <_strtol_l.constprop.0+0x10a>
 8007f6a:	2e10      	cmp	r6, #16
 8007f6c:	d109      	bne.n	8007f82 <_strtol_l.constprop.0+0x56>
 8007f6e:	2c30      	cmp	r4, #48	; 0x30
 8007f70:	d107      	bne.n	8007f82 <_strtol_l.constprop.0+0x56>
 8007f72:	2220      	movs	r2, #32
 8007f74:	782b      	ldrb	r3, [r5, #0]
 8007f76:	4393      	bics	r3, r2
 8007f78:	2b58      	cmp	r3, #88	; 0x58
 8007f7a:	d157      	bne.n	800802c <_strtol_l.constprop.0+0x100>
 8007f7c:	2610      	movs	r6, #16
 8007f7e:	786c      	ldrb	r4, [r5, #1]
 8007f80:	3502      	adds	r5, #2
 8007f82:	4b30      	ldr	r3, [pc, #192]	; (8008044 <_strtol_l.constprop.0+0x118>)
 8007f84:	0031      	movs	r1, r6
 8007f86:	18fb      	adds	r3, r7, r3
 8007f88:	0018      	movs	r0, r3
 8007f8a:	9303      	str	r3, [sp, #12]
 8007f8c:	f7f8 f95e 	bl	800024c <__aeabi_uidivmod>
 8007f90:	2300      	movs	r3, #0
 8007f92:	2201      	movs	r2, #1
 8007f94:	4684      	mov	ip, r0
 8007f96:	0018      	movs	r0, r3
 8007f98:	9104      	str	r1, [sp, #16]
 8007f9a:	4252      	negs	r2, r2
 8007f9c:	0021      	movs	r1, r4
 8007f9e:	3930      	subs	r1, #48	; 0x30
 8007fa0:	2909      	cmp	r1, #9
 8007fa2:	d81d      	bhi.n	8007fe0 <_strtol_l.constprop.0+0xb4>
 8007fa4:	000c      	movs	r4, r1
 8007fa6:	42a6      	cmp	r6, r4
 8007fa8:	dd28      	ble.n	8007ffc <_strtol_l.constprop.0+0xd0>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	db24      	blt.n	8007ff8 <_strtol_l.constprop.0+0xcc>
 8007fae:	0013      	movs	r3, r2
 8007fb0:	4584      	cmp	ip, r0
 8007fb2:	d306      	bcc.n	8007fc2 <_strtol_l.constprop.0+0x96>
 8007fb4:	d102      	bne.n	8007fbc <_strtol_l.constprop.0+0x90>
 8007fb6:	9904      	ldr	r1, [sp, #16]
 8007fb8:	42a1      	cmp	r1, r4
 8007fba:	db02      	blt.n	8007fc2 <_strtol_l.constprop.0+0x96>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	4370      	muls	r0, r6
 8007fc0:	1820      	adds	r0, r4, r0
 8007fc2:	782c      	ldrb	r4, [r5, #0]
 8007fc4:	3501      	adds	r5, #1
 8007fc6:	e7e9      	b.n	8007f9c <_strtol_l.constprop.0+0x70>
 8007fc8:	f7fe fab0 	bl	800652c <__errno>
 8007fcc:	2316      	movs	r3, #22
 8007fce:	6003      	str	r3, [r0, #0]
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	b007      	add	sp, #28
 8007fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd6:	2c2b      	cmp	r4, #43	; 0x2b
 8007fd8:	d1c5      	bne.n	8007f66 <_strtol_l.constprop.0+0x3a>
 8007fda:	781c      	ldrb	r4, [r3, #0]
 8007fdc:	1c95      	adds	r5, r2, #2
 8007fde:	e7c2      	b.n	8007f66 <_strtol_l.constprop.0+0x3a>
 8007fe0:	0021      	movs	r1, r4
 8007fe2:	3941      	subs	r1, #65	; 0x41
 8007fe4:	2919      	cmp	r1, #25
 8007fe6:	d801      	bhi.n	8007fec <_strtol_l.constprop.0+0xc0>
 8007fe8:	3c37      	subs	r4, #55	; 0x37
 8007fea:	e7dc      	b.n	8007fa6 <_strtol_l.constprop.0+0x7a>
 8007fec:	0021      	movs	r1, r4
 8007fee:	3961      	subs	r1, #97	; 0x61
 8007ff0:	2919      	cmp	r1, #25
 8007ff2:	d803      	bhi.n	8007ffc <_strtol_l.constprop.0+0xd0>
 8007ff4:	3c57      	subs	r4, #87	; 0x57
 8007ff6:	e7d6      	b.n	8007fa6 <_strtol_l.constprop.0+0x7a>
 8007ff8:	0013      	movs	r3, r2
 8007ffa:	e7e2      	b.n	8007fc2 <_strtol_l.constprop.0+0x96>
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	da09      	bge.n	8008014 <_strtol_l.constprop.0+0xe8>
 8008000:	2322      	movs	r3, #34	; 0x22
 8008002:	9a05      	ldr	r2, [sp, #20]
 8008004:	9803      	ldr	r0, [sp, #12]
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	9b02      	ldr	r3, [sp, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0e1      	beq.n	8007fd2 <_strtol_l.constprop.0+0xa6>
 800800e:	1e6b      	subs	r3, r5, #1
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	e007      	b.n	8008024 <_strtol_l.constprop.0+0xf8>
 8008014:	2f00      	cmp	r7, #0
 8008016:	d000      	beq.n	800801a <_strtol_l.constprop.0+0xee>
 8008018:	4240      	negs	r0, r0
 800801a:	9a02      	ldr	r2, [sp, #8]
 800801c:	2a00      	cmp	r2, #0
 800801e:	d0d8      	beq.n	8007fd2 <_strtol_l.constprop.0+0xa6>
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1f4      	bne.n	800800e <_strtol_l.constprop.0+0xe2>
 8008024:	9b02      	ldr	r3, [sp, #8]
 8008026:	9a01      	ldr	r2, [sp, #4]
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	e7d2      	b.n	8007fd2 <_strtol_l.constprop.0+0xa6>
 800802c:	2430      	movs	r4, #48	; 0x30
 800802e:	2e00      	cmp	r6, #0
 8008030:	d1a7      	bne.n	8007f82 <_strtol_l.constprop.0+0x56>
 8008032:	3608      	adds	r6, #8
 8008034:	e7a5      	b.n	8007f82 <_strtol_l.constprop.0+0x56>
 8008036:	2c30      	cmp	r4, #48	; 0x30
 8008038:	d09b      	beq.n	8007f72 <_strtol_l.constprop.0+0x46>
 800803a:	260a      	movs	r6, #10
 800803c:	e7a1      	b.n	8007f82 <_strtol_l.constprop.0+0x56>
 800803e:	46c0      	nop			; (mov r8, r8)
 8008040:	0800b1d9 	.word	0x0800b1d9
 8008044:	7fffffff 	.word	0x7fffffff

08008048 <_strtol_r>:
 8008048:	b510      	push	{r4, lr}
 800804a:	f7ff ff6f 	bl	8007f2c <_strtol_l.constprop.0>
 800804e:	bd10      	pop	{r4, pc}

08008050 <quorem>:
 8008050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008052:	0006      	movs	r6, r0
 8008054:	690b      	ldr	r3, [r1, #16]
 8008056:	6932      	ldr	r2, [r6, #16]
 8008058:	b087      	sub	sp, #28
 800805a:	2000      	movs	r0, #0
 800805c:	9103      	str	r1, [sp, #12]
 800805e:	429a      	cmp	r2, r3
 8008060:	db65      	blt.n	800812e <quorem+0xde>
 8008062:	3b01      	subs	r3, #1
 8008064:	009c      	lsls	r4, r3, #2
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	000b      	movs	r3, r1
 800806a:	3314      	adds	r3, #20
 800806c:	9305      	str	r3, [sp, #20]
 800806e:	191b      	adds	r3, r3, r4
 8008070:	9304      	str	r3, [sp, #16]
 8008072:	0033      	movs	r3, r6
 8008074:	3314      	adds	r3, #20
 8008076:	9302      	str	r3, [sp, #8]
 8008078:	191c      	adds	r4, r3, r4
 800807a:	9b04      	ldr	r3, [sp, #16]
 800807c:	6827      	ldr	r7, [r4, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	0038      	movs	r0, r7
 8008082:	1c5d      	adds	r5, r3, #1
 8008084:	0029      	movs	r1, r5
 8008086:	9301      	str	r3, [sp, #4]
 8008088:	f7f8 f85a 	bl	8000140 <__udivsi3>
 800808c:	9001      	str	r0, [sp, #4]
 800808e:	42af      	cmp	r7, r5
 8008090:	d324      	bcc.n	80080dc <quorem+0x8c>
 8008092:	2500      	movs	r5, #0
 8008094:	46ac      	mov	ip, r5
 8008096:	9802      	ldr	r0, [sp, #8]
 8008098:	9f05      	ldr	r7, [sp, #20]
 800809a:	cf08      	ldmia	r7!, {r3}
 800809c:	9a01      	ldr	r2, [sp, #4]
 800809e:	b299      	uxth	r1, r3
 80080a0:	4351      	muls	r1, r2
 80080a2:	0c1b      	lsrs	r3, r3, #16
 80080a4:	4353      	muls	r3, r2
 80080a6:	1949      	adds	r1, r1, r5
 80080a8:	0c0a      	lsrs	r2, r1, #16
 80080aa:	189b      	adds	r3, r3, r2
 80080ac:	6802      	ldr	r2, [r0, #0]
 80080ae:	b289      	uxth	r1, r1
 80080b0:	b292      	uxth	r2, r2
 80080b2:	4462      	add	r2, ip
 80080b4:	1a52      	subs	r2, r2, r1
 80080b6:	6801      	ldr	r1, [r0, #0]
 80080b8:	0c1d      	lsrs	r5, r3, #16
 80080ba:	0c09      	lsrs	r1, r1, #16
 80080bc:	b29b      	uxth	r3, r3
 80080be:	1acb      	subs	r3, r1, r3
 80080c0:	1411      	asrs	r1, r2, #16
 80080c2:	185b      	adds	r3, r3, r1
 80080c4:	1419      	asrs	r1, r3, #16
 80080c6:	b292      	uxth	r2, r2
 80080c8:	041b      	lsls	r3, r3, #16
 80080ca:	431a      	orrs	r2, r3
 80080cc:	9b04      	ldr	r3, [sp, #16]
 80080ce:	468c      	mov	ip, r1
 80080d0:	c004      	stmia	r0!, {r2}
 80080d2:	42bb      	cmp	r3, r7
 80080d4:	d2e1      	bcs.n	800809a <quorem+0x4a>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d030      	beq.n	800813e <quorem+0xee>
 80080dc:	0030      	movs	r0, r6
 80080de:	9903      	ldr	r1, [sp, #12]
 80080e0:	f001 fcd4 	bl	8009a8c <__mcmp>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	db21      	blt.n	800812c <quorem+0xdc>
 80080e8:	0030      	movs	r0, r6
 80080ea:	2400      	movs	r4, #0
 80080ec:	9b01      	ldr	r3, [sp, #4]
 80080ee:	9903      	ldr	r1, [sp, #12]
 80080f0:	3301      	adds	r3, #1
 80080f2:	9301      	str	r3, [sp, #4]
 80080f4:	3014      	adds	r0, #20
 80080f6:	3114      	adds	r1, #20
 80080f8:	6803      	ldr	r3, [r0, #0]
 80080fa:	c920      	ldmia	r1!, {r5}
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	1914      	adds	r4, r2, r4
 8008100:	b2aa      	uxth	r2, r5
 8008102:	1aa2      	subs	r2, r4, r2
 8008104:	0c1b      	lsrs	r3, r3, #16
 8008106:	0c2d      	lsrs	r5, r5, #16
 8008108:	1414      	asrs	r4, r2, #16
 800810a:	1b5b      	subs	r3, r3, r5
 800810c:	191b      	adds	r3, r3, r4
 800810e:	141c      	asrs	r4, r3, #16
 8008110:	b292      	uxth	r2, r2
 8008112:	041b      	lsls	r3, r3, #16
 8008114:	4313      	orrs	r3, r2
 8008116:	c008      	stmia	r0!, {r3}
 8008118:	9b04      	ldr	r3, [sp, #16]
 800811a:	428b      	cmp	r3, r1
 800811c:	d2ec      	bcs.n	80080f8 <quorem+0xa8>
 800811e:	9b00      	ldr	r3, [sp, #0]
 8008120:	9a02      	ldr	r2, [sp, #8]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	18d3      	adds	r3, r2, r3
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	2a00      	cmp	r2, #0
 800812a:	d015      	beq.n	8008158 <quorem+0x108>
 800812c:	9801      	ldr	r0, [sp, #4]
 800812e:	b007      	add	sp, #28
 8008130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d106      	bne.n	8008146 <quorem+0xf6>
 8008138:	9b00      	ldr	r3, [sp, #0]
 800813a:	3b01      	subs	r3, #1
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	9b02      	ldr	r3, [sp, #8]
 8008140:	3c04      	subs	r4, #4
 8008142:	42a3      	cmp	r3, r4
 8008144:	d3f5      	bcc.n	8008132 <quorem+0xe2>
 8008146:	9b00      	ldr	r3, [sp, #0]
 8008148:	6133      	str	r3, [r6, #16]
 800814a:	e7c7      	b.n	80080dc <quorem+0x8c>
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	2a00      	cmp	r2, #0
 8008150:	d106      	bne.n	8008160 <quorem+0x110>
 8008152:	9a00      	ldr	r2, [sp, #0]
 8008154:	3a01      	subs	r2, #1
 8008156:	9200      	str	r2, [sp, #0]
 8008158:	9a02      	ldr	r2, [sp, #8]
 800815a:	3b04      	subs	r3, #4
 800815c:	429a      	cmp	r2, r3
 800815e:	d3f5      	bcc.n	800814c <quorem+0xfc>
 8008160:	9b00      	ldr	r3, [sp, #0]
 8008162:	6133      	str	r3, [r6, #16]
 8008164:	e7e2      	b.n	800812c <quorem+0xdc>
	...

08008168 <_dtoa_r>:
 8008168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800816a:	b09d      	sub	sp, #116	; 0x74
 800816c:	9202      	str	r2, [sp, #8]
 800816e:	9303      	str	r3, [sp, #12]
 8008170:	9b02      	ldr	r3, [sp, #8]
 8008172:	9c03      	ldr	r4, [sp, #12]
 8008174:	9308      	str	r3, [sp, #32]
 8008176:	9409      	str	r4, [sp, #36]	; 0x24
 8008178:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800817a:	0007      	movs	r7, r0
 800817c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800817e:	2c00      	cmp	r4, #0
 8008180:	d10e      	bne.n	80081a0 <_dtoa_r+0x38>
 8008182:	2010      	movs	r0, #16
 8008184:	f001 f982 	bl	800948c <malloc>
 8008188:	1e02      	subs	r2, r0, #0
 800818a:	6278      	str	r0, [r7, #36]	; 0x24
 800818c:	d104      	bne.n	8008198 <_dtoa_r+0x30>
 800818e:	21ea      	movs	r1, #234	; 0xea
 8008190:	4bc7      	ldr	r3, [pc, #796]	; (80084b0 <_dtoa_r+0x348>)
 8008192:	48c8      	ldr	r0, [pc, #800]	; (80084b4 <_dtoa_r+0x34c>)
 8008194:	f002 f91c 	bl	800a3d0 <__assert_func>
 8008198:	6044      	str	r4, [r0, #4]
 800819a:	6084      	str	r4, [r0, #8]
 800819c:	6004      	str	r4, [r0, #0]
 800819e:	60c4      	str	r4, [r0, #12]
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	6819      	ldr	r1, [r3, #0]
 80081a4:	2900      	cmp	r1, #0
 80081a6:	d00a      	beq.n	80081be <_dtoa_r+0x56>
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	2301      	movs	r3, #1
 80081ac:	4093      	lsls	r3, r2
 80081ae:	604a      	str	r2, [r1, #4]
 80081b0:	608b      	str	r3, [r1, #8]
 80081b2:	0038      	movs	r0, r7
 80081b4:	f001 f9de 	bl	8009574 <_Bfree>
 80081b8:	2200      	movs	r2, #0
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	9b03      	ldr	r3, [sp, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	da20      	bge.n	8008206 <_dtoa_r+0x9e>
 80081c4:	2301      	movs	r3, #1
 80081c6:	602b      	str	r3, [r5, #0]
 80081c8:	9b03      	ldr	r3, [sp, #12]
 80081ca:	005b      	lsls	r3, r3, #1
 80081cc:	085b      	lsrs	r3, r3, #1
 80081ce:	9309      	str	r3, [sp, #36]	; 0x24
 80081d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80081d2:	4bb9      	ldr	r3, [pc, #740]	; (80084b8 <_dtoa_r+0x350>)
 80081d4:	4ab8      	ldr	r2, [pc, #736]	; (80084b8 <_dtoa_r+0x350>)
 80081d6:	402b      	ands	r3, r5
 80081d8:	4293      	cmp	r3, r2
 80081da:	d117      	bne.n	800820c <_dtoa_r+0xa4>
 80081dc:	4bb7      	ldr	r3, [pc, #732]	; (80084bc <_dtoa_r+0x354>)
 80081de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80081e0:	0328      	lsls	r0, r5, #12
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	9b02      	ldr	r3, [sp, #8]
 80081e6:	0b00      	lsrs	r0, r0, #12
 80081e8:	4318      	orrs	r0, r3
 80081ea:	d101      	bne.n	80081f0 <_dtoa_r+0x88>
 80081ec:	f000 fdbf 	bl	8008d6e <_dtoa_r+0xc06>
 80081f0:	48b3      	ldr	r0, [pc, #716]	; (80084c0 <_dtoa_r+0x358>)
 80081f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081f4:	9006      	str	r0, [sp, #24]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <_dtoa_r+0x98>
 80081fa:	4bb2      	ldr	r3, [pc, #712]	; (80084c4 <_dtoa_r+0x35c>)
 80081fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	9806      	ldr	r0, [sp, #24]
 8008202:	b01d      	add	sp, #116	; 0x74
 8008204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008206:	2300      	movs	r3, #0
 8008208:	602b      	str	r3, [r5, #0]
 800820a:	e7e1      	b.n	80081d0 <_dtoa_r+0x68>
 800820c:	9b08      	ldr	r3, [sp, #32]
 800820e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008210:	9312      	str	r3, [sp, #72]	; 0x48
 8008212:	9413      	str	r4, [sp, #76]	; 0x4c
 8008214:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008216:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008218:	2200      	movs	r2, #0
 800821a:	2300      	movs	r3, #0
 800821c:	f7f8 f916 	bl	800044c <__aeabi_dcmpeq>
 8008220:	1e04      	subs	r4, r0, #0
 8008222:	d009      	beq.n	8008238 <_dtoa_r+0xd0>
 8008224:	2301      	movs	r3, #1
 8008226:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008228:	6013      	str	r3, [r2, #0]
 800822a:	4ba7      	ldr	r3, [pc, #668]	; (80084c8 <_dtoa_r+0x360>)
 800822c:	9306      	str	r3, [sp, #24]
 800822e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008230:	2b00      	cmp	r3, #0
 8008232:	d0e5      	beq.n	8008200 <_dtoa_r+0x98>
 8008234:	4ba5      	ldr	r3, [pc, #660]	; (80084cc <_dtoa_r+0x364>)
 8008236:	e7e1      	b.n	80081fc <_dtoa_r+0x94>
 8008238:	ab1a      	add	r3, sp, #104	; 0x68
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	ab1b      	add	r3, sp, #108	; 0x6c
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	0038      	movs	r0, r7
 8008242:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008244:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008246:	f001 fd49 	bl	8009cdc <__d2b>
 800824a:	006e      	lsls	r6, r5, #1
 800824c:	9005      	str	r0, [sp, #20]
 800824e:	0d76      	lsrs	r6, r6, #21
 8008250:	d100      	bne.n	8008254 <_dtoa_r+0xec>
 8008252:	e07c      	b.n	800834e <_dtoa_r+0x1e6>
 8008254:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008256:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008258:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800825a:	4a9d      	ldr	r2, [pc, #628]	; (80084d0 <_dtoa_r+0x368>)
 800825c:	031b      	lsls	r3, r3, #12
 800825e:	0b1b      	lsrs	r3, r3, #12
 8008260:	431a      	orrs	r2, r3
 8008262:	0011      	movs	r1, r2
 8008264:	4b9b      	ldr	r3, [pc, #620]	; (80084d4 <_dtoa_r+0x36c>)
 8008266:	9418      	str	r4, [sp, #96]	; 0x60
 8008268:	18f6      	adds	r6, r6, r3
 800826a:	2200      	movs	r2, #0
 800826c:	4b9a      	ldr	r3, [pc, #616]	; (80084d8 <_dtoa_r+0x370>)
 800826e:	f7f9 fb35 	bl	80018dc <__aeabi_dsub>
 8008272:	4a9a      	ldr	r2, [pc, #616]	; (80084dc <_dtoa_r+0x374>)
 8008274:	4b9a      	ldr	r3, [pc, #616]	; (80084e0 <_dtoa_r+0x378>)
 8008276:	f7f9 f8c5 	bl	8001404 <__aeabi_dmul>
 800827a:	4a9a      	ldr	r2, [pc, #616]	; (80084e4 <_dtoa_r+0x37c>)
 800827c:	4b9a      	ldr	r3, [pc, #616]	; (80084e8 <_dtoa_r+0x380>)
 800827e:	f7f8 f983 	bl	8000588 <__aeabi_dadd>
 8008282:	0004      	movs	r4, r0
 8008284:	0030      	movs	r0, r6
 8008286:	000d      	movs	r5, r1
 8008288:	f7f9 ff0e 	bl	80020a8 <__aeabi_i2d>
 800828c:	4a97      	ldr	r2, [pc, #604]	; (80084ec <_dtoa_r+0x384>)
 800828e:	4b98      	ldr	r3, [pc, #608]	; (80084f0 <_dtoa_r+0x388>)
 8008290:	f7f9 f8b8 	bl	8001404 <__aeabi_dmul>
 8008294:	0002      	movs	r2, r0
 8008296:	000b      	movs	r3, r1
 8008298:	0020      	movs	r0, r4
 800829a:	0029      	movs	r1, r5
 800829c:	f7f8 f974 	bl	8000588 <__aeabi_dadd>
 80082a0:	0004      	movs	r4, r0
 80082a2:	000d      	movs	r5, r1
 80082a4:	f7f9 feca 	bl	800203c <__aeabi_d2iz>
 80082a8:	2200      	movs	r2, #0
 80082aa:	9002      	str	r0, [sp, #8]
 80082ac:	2300      	movs	r3, #0
 80082ae:	0020      	movs	r0, r4
 80082b0:	0029      	movs	r1, r5
 80082b2:	f7f8 f8d1 	bl	8000458 <__aeabi_dcmplt>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d00b      	beq.n	80082d2 <_dtoa_r+0x16a>
 80082ba:	9802      	ldr	r0, [sp, #8]
 80082bc:	f7f9 fef4 	bl	80020a8 <__aeabi_i2d>
 80082c0:	002b      	movs	r3, r5
 80082c2:	0022      	movs	r2, r4
 80082c4:	f7f8 f8c2 	bl	800044c <__aeabi_dcmpeq>
 80082c8:	4243      	negs	r3, r0
 80082ca:	4158      	adcs	r0, r3
 80082cc:	9b02      	ldr	r3, [sp, #8]
 80082ce:	1a1b      	subs	r3, r3, r0
 80082d0:	9302      	str	r3, [sp, #8]
 80082d2:	2301      	movs	r3, #1
 80082d4:	9316      	str	r3, [sp, #88]	; 0x58
 80082d6:	9b02      	ldr	r3, [sp, #8]
 80082d8:	2b16      	cmp	r3, #22
 80082da:	d80f      	bhi.n	80082fc <_dtoa_r+0x194>
 80082dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80082de:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80082e0:	00da      	lsls	r2, r3, #3
 80082e2:	4b84      	ldr	r3, [pc, #528]	; (80084f4 <_dtoa_r+0x38c>)
 80082e4:	189b      	adds	r3, r3, r2
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	f7f8 f8b5 	bl	8000458 <__aeabi_dcmplt>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	d049      	beq.n	8008386 <_dtoa_r+0x21e>
 80082f2:	9b02      	ldr	r3, [sp, #8]
 80082f4:	3b01      	subs	r3, #1
 80082f6:	9302      	str	r3, [sp, #8]
 80082f8:	2300      	movs	r3, #0
 80082fa:	9316      	str	r3, [sp, #88]	; 0x58
 80082fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80082fe:	1b9e      	subs	r6, r3, r6
 8008300:	2300      	movs	r3, #0
 8008302:	930a      	str	r3, [sp, #40]	; 0x28
 8008304:	0033      	movs	r3, r6
 8008306:	3b01      	subs	r3, #1
 8008308:	930d      	str	r3, [sp, #52]	; 0x34
 800830a:	d504      	bpl.n	8008316 <_dtoa_r+0x1ae>
 800830c:	2301      	movs	r3, #1
 800830e:	1b9b      	subs	r3, r3, r6
 8008310:	930a      	str	r3, [sp, #40]	; 0x28
 8008312:	2300      	movs	r3, #0
 8008314:	930d      	str	r3, [sp, #52]	; 0x34
 8008316:	9b02      	ldr	r3, [sp, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	db36      	blt.n	800838a <_dtoa_r+0x222>
 800831c:	9a02      	ldr	r2, [sp, #8]
 800831e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008320:	4694      	mov	ip, r2
 8008322:	4463      	add	r3, ip
 8008324:	930d      	str	r3, [sp, #52]	; 0x34
 8008326:	2300      	movs	r3, #0
 8008328:	9215      	str	r2, [sp, #84]	; 0x54
 800832a:	930e      	str	r3, [sp, #56]	; 0x38
 800832c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800832e:	2401      	movs	r4, #1
 8008330:	2b09      	cmp	r3, #9
 8008332:	d864      	bhi.n	80083fe <_dtoa_r+0x296>
 8008334:	2b05      	cmp	r3, #5
 8008336:	dd02      	ble.n	800833e <_dtoa_r+0x1d6>
 8008338:	2400      	movs	r4, #0
 800833a:	3b04      	subs	r3, #4
 800833c:	9322      	str	r3, [sp, #136]	; 0x88
 800833e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008340:	1e98      	subs	r0, r3, #2
 8008342:	2803      	cmp	r0, #3
 8008344:	d864      	bhi.n	8008410 <_dtoa_r+0x2a8>
 8008346:	f7f7 fee7 	bl	8000118 <__gnu_thumb1_case_uqi>
 800834a:	3829      	.short	0x3829
 800834c:	5836      	.short	0x5836
 800834e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008350:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008352:	189e      	adds	r6, r3, r2
 8008354:	4b68      	ldr	r3, [pc, #416]	; (80084f8 <_dtoa_r+0x390>)
 8008356:	18f2      	adds	r2, r6, r3
 8008358:	2a20      	cmp	r2, #32
 800835a:	dd0f      	ble.n	800837c <_dtoa_r+0x214>
 800835c:	2340      	movs	r3, #64	; 0x40
 800835e:	1a9b      	subs	r3, r3, r2
 8008360:	409d      	lsls	r5, r3
 8008362:	4b66      	ldr	r3, [pc, #408]	; (80084fc <_dtoa_r+0x394>)
 8008364:	9802      	ldr	r0, [sp, #8]
 8008366:	18f3      	adds	r3, r6, r3
 8008368:	40d8      	lsrs	r0, r3
 800836a:	4328      	orrs	r0, r5
 800836c:	f7f9 fecc 	bl	8002108 <__aeabi_ui2d>
 8008370:	2301      	movs	r3, #1
 8008372:	4c63      	ldr	r4, [pc, #396]	; (8008500 <_dtoa_r+0x398>)
 8008374:	3e01      	subs	r6, #1
 8008376:	1909      	adds	r1, r1, r4
 8008378:	9318      	str	r3, [sp, #96]	; 0x60
 800837a:	e776      	b.n	800826a <_dtoa_r+0x102>
 800837c:	2320      	movs	r3, #32
 800837e:	9802      	ldr	r0, [sp, #8]
 8008380:	1a9b      	subs	r3, r3, r2
 8008382:	4098      	lsls	r0, r3
 8008384:	e7f2      	b.n	800836c <_dtoa_r+0x204>
 8008386:	9016      	str	r0, [sp, #88]	; 0x58
 8008388:	e7b8      	b.n	80082fc <_dtoa_r+0x194>
 800838a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800838c:	9a02      	ldr	r2, [sp, #8]
 800838e:	1a9b      	subs	r3, r3, r2
 8008390:	930a      	str	r3, [sp, #40]	; 0x28
 8008392:	4253      	negs	r3, r2
 8008394:	930e      	str	r3, [sp, #56]	; 0x38
 8008396:	2300      	movs	r3, #0
 8008398:	9315      	str	r3, [sp, #84]	; 0x54
 800839a:	e7c7      	b.n	800832c <_dtoa_r+0x1c4>
 800839c:	2300      	movs	r3, #0
 800839e:	930f      	str	r3, [sp, #60]	; 0x3c
 80083a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083a2:	930c      	str	r3, [sp, #48]	; 0x30
 80083a4:	9307      	str	r3, [sp, #28]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	dc13      	bgt.n	80083d2 <_dtoa_r+0x26a>
 80083aa:	2301      	movs	r3, #1
 80083ac:	001a      	movs	r2, r3
 80083ae:	930c      	str	r3, [sp, #48]	; 0x30
 80083b0:	9307      	str	r3, [sp, #28]
 80083b2:	9223      	str	r2, [sp, #140]	; 0x8c
 80083b4:	e00d      	b.n	80083d2 <_dtoa_r+0x26a>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e7f1      	b.n	800839e <_dtoa_r+0x236>
 80083ba:	2300      	movs	r3, #0
 80083bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80083be:	930f      	str	r3, [sp, #60]	; 0x3c
 80083c0:	4694      	mov	ip, r2
 80083c2:	9b02      	ldr	r3, [sp, #8]
 80083c4:	4463      	add	r3, ip
 80083c6:	930c      	str	r3, [sp, #48]	; 0x30
 80083c8:	3301      	adds	r3, #1
 80083ca:	9307      	str	r3, [sp, #28]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	dc00      	bgt.n	80083d2 <_dtoa_r+0x26a>
 80083d0:	2301      	movs	r3, #1
 80083d2:	2200      	movs	r2, #0
 80083d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083d6:	6042      	str	r2, [r0, #4]
 80083d8:	3204      	adds	r2, #4
 80083da:	0015      	movs	r5, r2
 80083dc:	3514      	adds	r5, #20
 80083de:	6841      	ldr	r1, [r0, #4]
 80083e0:	429d      	cmp	r5, r3
 80083e2:	d919      	bls.n	8008418 <_dtoa_r+0x2b0>
 80083e4:	0038      	movs	r0, r7
 80083e6:	f001 f881 	bl	80094ec <_Balloc>
 80083ea:	9006      	str	r0, [sp, #24]
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d117      	bne.n	8008420 <_dtoa_r+0x2b8>
 80083f0:	21d5      	movs	r1, #213	; 0xd5
 80083f2:	0002      	movs	r2, r0
 80083f4:	4b43      	ldr	r3, [pc, #268]	; (8008504 <_dtoa_r+0x39c>)
 80083f6:	0049      	lsls	r1, r1, #1
 80083f8:	e6cb      	b.n	8008192 <_dtoa_r+0x2a>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e7de      	b.n	80083bc <_dtoa_r+0x254>
 80083fe:	2300      	movs	r3, #0
 8008400:	940f      	str	r4, [sp, #60]	; 0x3c
 8008402:	9322      	str	r3, [sp, #136]	; 0x88
 8008404:	3b01      	subs	r3, #1
 8008406:	930c      	str	r3, [sp, #48]	; 0x30
 8008408:	9307      	str	r3, [sp, #28]
 800840a:	2200      	movs	r2, #0
 800840c:	3313      	adds	r3, #19
 800840e:	e7d0      	b.n	80083b2 <_dtoa_r+0x24a>
 8008410:	2301      	movs	r3, #1
 8008412:	930f      	str	r3, [sp, #60]	; 0x3c
 8008414:	3b02      	subs	r3, #2
 8008416:	e7f6      	b.n	8008406 <_dtoa_r+0x29e>
 8008418:	3101      	adds	r1, #1
 800841a:	6041      	str	r1, [r0, #4]
 800841c:	0052      	lsls	r2, r2, #1
 800841e:	e7dc      	b.n	80083da <_dtoa_r+0x272>
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	9a06      	ldr	r2, [sp, #24]
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	9b07      	ldr	r3, [sp, #28]
 8008428:	2b0e      	cmp	r3, #14
 800842a:	d900      	bls.n	800842e <_dtoa_r+0x2c6>
 800842c:	e0eb      	b.n	8008606 <_dtoa_r+0x49e>
 800842e:	2c00      	cmp	r4, #0
 8008430:	d100      	bne.n	8008434 <_dtoa_r+0x2cc>
 8008432:	e0e8      	b.n	8008606 <_dtoa_r+0x49e>
 8008434:	9b02      	ldr	r3, [sp, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	dd68      	ble.n	800850c <_dtoa_r+0x3a4>
 800843a:	001a      	movs	r2, r3
 800843c:	210f      	movs	r1, #15
 800843e:	4b2d      	ldr	r3, [pc, #180]	; (80084f4 <_dtoa_r+0x38c>)
 8008440:	400a      	ands	r2, r1
 8008442:	00d2      	lsls	r2, r2, #3
 8008444:	189b      	adds	r3, r3, r2
 8008446:	681d      	ldr	r5, [r3, #0]
 8008448:	685e      	ldr	r6, [r3, #4]
 800844a:	9b02      	ldr	r3, [sp, #8]
 800844c:	111c      	asrs	r4, r3, #4
 800844e:	2302      	movs	r3, #2
 8008450:	9310      	str	r3, [sp, #64]	; 0x40
 8008452:	9b02      	ldr	r3, [sp, #8]
 8008454:	05db      	lsls	r3, r3, #23
 8008456:	d50b      	bpl.n	8008470 <_dtoa_r+0x308>
 8008458:	4b2b      	ldr	r3, [pc, #172]	; (8008508 <_dtoa_r+0x3a0>)
 800845a:	400c      	ands	r4, r1
 800845c:	6a1a      	ldr	r2, [r3, #32]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008462:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008464:	f7f8 fbcc 	bl	8000c00 <__aeabi_ddiv>
 8008468:	2303      	movs	r3, #3
 800846a:	9008      	str	r0, [sp, #32]
 800846c:	9109      	str	r1, [sp, #36]	; 0x24
 800846e:	9310      	str	r3, [sp, #64]	; 0x40
 8008470:	4b25      	ldr	r3, [pc, #148]	; (8008508 <_dtoa_r+0x3a0>)
 8008472:	9314      	str	r3, [sp, #80]	; 0x50
 8008474:	2c00      	cmp	r4, #0
 8008476:	d108      	bne.n	800848a <_dtoa_r+0x322>
 8008478:	9808      	ldr	r0, [sp, #32]
 800847a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800847c:	002a      	movs	r2, r5
 800847e:	0033      	movs	r3, r6
 8008480:	f7f8 fbbe 	bl	8000c00 <__aeabi_ddiv>
 8008484:	9008      	str	r0, [sp, #32]
 8008486:	9109      	str	r1, [sp, #36]	; 0x24
 8008488:	e05c      	b.n	8008544 <_dtoa_r+0x3dc>
 800848a:	2301      	movs	r3, #1
 800848c:	421c      	tst	r4, r3
 800848e:	d00b      	beq.n	80084a8 <_dtoa_r+0x340>
 8008490:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008492:	0028      	movs	r0, r5
 8008494:	3301      	adds	r3, #1
 8008496:	9310      	str	r3, [sp, #64]	; 0x40
 8008498:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800849a:	0031      	movs	r1, r6
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f7f8 ffb0 	bl	8001404 <__aeabi_dmul>
 80084a4:	0005      	movs	r5, r0
 80084a6:	000e      	movs	r6, r1
 80084a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084aa:	1064      	asrs	r4, r4, #1
 80084ac:	3308      	adds	r3, #8
 80084ae:	e7e0      	b.n	8008472 <_dtoa_r+0x30a>
 80084b0:	0800b2e6 	.word	0x0800b2e6
 80084b4:	0800b2fd 	.word	0x0800b2fd
 80084b8:	7ff00000 	.word	0x7ff00000
 80084bc:	0000270f 	.word	0x0000270f
 80084c0:	0800b2e2 	.word	0x0800b2e2
 80084c4:	0800b2e5 	.word	0x0800b2e5
 80084c8:	0800b158 	.word	0x0800b158
 80084cc:	0800b159 	.word	0x0800b159
 80084d0:	3ff00000 	.word	0x3ff00000
 80084d4:	fffffc01 	.word	0xfffffc01
 80084d8:	3ff80000 	.word	0x3ff80000
 80084dc:	636f4361 	.word	0x636f4361
 80084e0:	3fd287a7 	.word	0x3fd287a7
 80084e4:	8b60c8b3 	.word	0x8b60c8b3
 80084e8:	3fc68a28 	.word	0x3fc68a28
 80084ec:	509f79fb 	.word	0x509f79fb
 80084f0:	3fd34413 	.word	0x3fd34413
 80084f4:	0800b468 	.word	0x0800b468
 80084f8:	00000432 	.word	0x00000432
 80084fc:	00000412 	.word	0x00000412
 8008500:	fe100000 	.word	0xfe100000
 8008504:	0800b358 	.word	0x0800b358
 8008508:	0800b440 	.word	0x0800b440
 800850c:	2302      	movs	r3, #2
 800850e:	9310      	str	r3, [sp, #64]	; 0x40
 8008510:	9b02      	ldr	r3, [sp, #8]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d016      	beq.n	8008544 <_dtoa_r+0x3dc>
 8008516:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008518:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800851a:	425c      	negs	r4, r3
 800851c:	230f      	movs	r3, #15
 800851e:	4ab6      	ldr	r2, [pc, #728]	; (80087f8 <_dtoa_r+0x690>)
 8008520:	4023      	ands	r3, r4
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	18d3      	adds	r3, r2, r3
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f7f8 ff6b 	bl	8001404 <__aeabi_dmul>
 800852e:	2601      	movs	r6, #1
 8008530:	2300      	movs	r3, #0
 8008532:	9008      	str	r0, [sp, #32]
 8008534:	9109      	str	r1, [sp, #36]	; 0x24
 8008536:	4db1      	ldr	r5, [pc, #708]	; (80087fc <_dtoa_r+0x694>)
 8008538:	1124      	asrs	r4, r4, #4
 800853a:	2c00      	cmp	r4, #0
 800853c:	d000      	beq.n	8008540 <_dtoa_r+0x3d8>
 800853e:	e094      	b.n	800866a <_dtoa_r+0x502>
 8008540:	2b00      	cmp	r3, #0
 8008542:	d19f      	bne.n	8008484 <_dtoa_r+0x31c>
 8008544:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008546:	2b00      	cmp	r3, #0
 8008548:	d100      	bne.n	800854c <_dtoa_r+0x3e4>
 800854a:	e09b      	b.n	8008684 <_dtoa_r+0x51c>
 800854c:	9c08      	ldr	r4, [sp, #32]
 800854e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008550:	2200      	movs	r2, #0
 8008552:	0020      	movs	r0, r4
 8008554:	0029      	movs	r1, r5
 8008556:	4baa      	ldr	r3, [pc, #680]	; (8008800 <_dtoa_r+0x698>)
 8008558:	f7f7 ff7e 	bl	8000458 <__aeabi_dcmplt>
 800855c:	2800      	cmp	r0, #0
 800855e:	d100      	bne.n	8008562 <_dtoa_r+0x3fa>
 8008560:	e090      	b.n	8008684 <_dtoa_r+0x51c>
 8008562:	9b07      	ldr	r3, [sp, #28]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d100      	bne.n	800856a <_dtoa_r+0x402>
 8008568:	e08c      	b.n	8008684 <_dtoa_r+0x51c>
 800856a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800856c:	2b00      	cmp	r3, #0
 800856e:	dd46      	ble.n	80085fe <_dtoa_r+0x496>
 8008570:	9b02      	ldr	r3, [sp, #8]
 8008572:	2200      	movs	r2, #0
 8008574:	0020      	movs	r0, r4
 8008576:	0029      	movs	r1, r5
 8008578:	1e5e      	subs	r6, r3, #1
 800857a:	4ba2      	ldr	r3, [pc, #648]	; (8008804 <_dtoa_r+0x69c>)
 800857c:	f7f8 ff42 	bl	8001404 <__aeabi_dmul>
 8008580:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008582:	9008      	str	r0, [sp, #32]
 8008584:	9109      	str	r1, [sp, #36]	; 0x24
 8008586:	3301      	adds	r3, #1
 8008588:	9310      	str	r3, [sp, #64]	; 0x40
 800858a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800858c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800858e:	9c08      	ldr	r4, [sp, #32]
 8008590:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008592:	9314      	str	r3, [sp, #80]	; 0x50
 8008594:	f7f9 fd88 	bl	80020a8 <__aeabi_i2d>
 8008598:	0022      	movs	r2, r4
 800859a:	002b      	movs	r3, r5
 800859c:	f7f8 ff32 	bl	8001404 <__aeabi_dmul>
 80085a0:	2200      	movs	r2, #0
 80085a2:	4b99      	ldr	r3, [pc, #612]	; (8008808 <_dtoa_r+0x6a0>)
 80085a4:	f7f7 fff0 	bl	8000588 <__aeabi_dadd>
 80085a8:	9010      	str	r0, [sp, #64]	; 0x40
 80085aa:	9111      	str	r1, [sp, #68]	; 0x44
 80085ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80085ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085b0:	9208      	str	r2, [sp, #32]
 80085b2:	9309      	str	r3, [sp, #36]	; 0x24
 80085b4:	4a95      	ldr	r2, [pc, #596]	; (800880c <_dtoa_r+0x6a4>)
 80085b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085b8:	4694      	mov	ip, r2
 80085ba:	4463      	add	r3, ip
 80085bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80085be:	9309      	str	r3, [sp, #36]	; 0x24
 80085c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d161      	bne.n	800868a <_dtoa_r+0x522>
 80085c6:	2200      	movs	r2, #0
 80085c8:	0020      	movs	r0, r4
 80085ca:	0029      	movs	r1, r5
 80085cc:	4b90      	ldr	r3, [pc, #576]	; (8008810 <_dtoa_r+0x6a8>)
 80085ce:	f7f9 f985 	bl	80018dc <__aeabi_dsub>
 80085d2:	9a08      	ldr	r2, [sp, #32]
 80085d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085d6:	0004      	movs	r4, r0
 80085d8:	000d      	movs	r5, r1
 80085da:	f7f7 ff51 	bl	8000480 <__aeabi_dcmpgt>
 80085de:	2800      	cmp	r0, #0
 80085e0:	d000      	beq.n	80085e4 <_dtoa_r+0x47c>
 80085e2:	e2af      	b.n	8008b44 <_dtoa_r+0x9dc>
 80085e4:	488b      	ldr	r0, [pc, #556]	; (8008814 <_dtoa_r+0x6ac>)
 80085e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80085e8:	4684      	mov	ip, r0
 80085ea:	4461      	add	r1, ip
 80085ec:	000b      	movs	r3, r1
 80085ee:	0020      	movs	r0, r4
 80085f0:	0029      	movs	r1, r5
 80085f2:	9a08      	ldr	r2, [sp, #32]
 80085f4:	f7f7 ff30 	bl	8000458 <__aeabi_dcmplt>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d000      	beq.n	80085fe <_dtoa_r+0x496>
 80085fc:	e29f      	b.n	8008b3e <_dtoa_r+0x9d6>
 80085fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008600:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008602:	9308      	str	r3, [sp, #32]
 8008604:	9409      	str	r4, [sp, #36]	; 0x24
 8008606:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008608:	2b00      	cmp	r3, #0
 800860a:	da00      	bge.n	800860e <_dtoa_r+0x4a6>
 800860c:	e172      	b.n	80088f4 <_dtoa_r+0x78c>
 800860e:	9a02      	ldr	r2, [sp, #8]
 8008610:	2a0e      	cmp	r2, #14
 8008612:	dd00      	ble.n	8008616 <_dtoa_r+0x4ae>
 8008614:	e16e      	b.n	80088f4 <_dtoa_r+0x78c>
 8008616:	4b78      	ldr	r3, [pc, #480]	; (80087f8 <_dtoa_r+0x690>)
 8008618:	00d2      	lsls	r2, r2, #3
 800861a:	189b      	adds	r3, r3, r2
 800861c:	685c      	ldr	r4, [r3, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	930a      	str	r3, [sp, #40]	; 0x28
 8008622:	940b      	str	r4, [sp, #44]	; 0x2c
 8008624:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008626:	2b00      	cmp	r3, #0
 8008628:	db00      	blt.n	800862c <_dtoa_r+0x4c4>
 800862a:	e0f7      	b.n	800881c <_dtoa_r+0x6b4>
 800862c:	9b07      	ldr	r3, [sp, #28]
 800862e:	2b00      	cmp	r3, #0
 8008630:	dd00      	ble.n	8008634 <_dtoa_r+0x4cc>
 8008632:	e0f3      	b.n	800881c <_dtoa_r+0x6b4>
 8008634:	d000      	beq.n	8008638 <_dtoa_r+0x4d0>
 8008636:	e282      	b.n	8008b3e <_dtoa_r+0x9d6>
 8008638:	980a      	ldr	r0, [sp, #40]	; 0x28
 800863a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800863c:	2200      	movs	r2, #0
 800863e:	4b74      	ldr	r3, [pc, #464]	; (8008810 <_dtoa_r+0x6a8>)
 8008640:	f7f8 fee0 	bl	8001404 <__aeabi_dmul>
 8008644:	9a08      	ldr	r2, [sp, #32]
 8008646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008648:	f7f7 ff24 	bl	8000494 <__aeabi_dcmpge>
 800864c:	9e07      	ldr	r6, [sp, #28]
 800864e:	0035      	movs	r5, r6
 8008650:	2800      	cmp	r0, #0
 8008652:	d000      	beq.n	8008656 <_dtoa_r+0x4ee>
 8008654:	e259      	b.n	8008b0a <_dtoa_r+0x9a2>
 8008656:	9b06      	ldr	r3, [sp, #24]
 8008658:	9a06      	ldr	r2, [sp, #24]
 800865a:	3301      	adds	r3, #1
 800865c:	9308      	str	r3, [sp, #32]
 800865e:	2331      	movs	r3, #49	; 0x31
 8008660:	7013      	strb	r3, [r2, #0]
 8008662:	9b02      	ldr	r3, [sp, #8]
 8008664:	3301      	adds	r3, #1
 8008666:	9302      	str	r3, [sp, #8]
 8008668:	e254      	b.n	8008b14 <_dtoa_r+0x9ac>
 800866a:	4234      	tst	r4, r6
 800866c:	d007      	beq.n	800867e <_dtoa_r+0x516>
 800866e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008670:	3301      	adds	r3, #1
 8008672:	9310      	str	r3, [sp, #64]	; 0x40
 8008674:	682a      	ldr	r2, [r5, #0]
 8008676:	686b      	ldr	r3, [r5, #4]
 8008678:	f7f8 fec4 	bl	8001404 <__aeabi_dmul>
 800867c:	0033      	movs	r3, r6
 800867e:	1064      	asrs	r4, r4, #1
 8008680:	3508      	adds	r5, #8
 8008682:	e75a      	b.n	800853a <_dtoa_r+0x3d2>
 8008684:	9e02      	ldr	r6, [sp, #8]
 8008686:	9b07      	ldr	r3, [sp, #28]
 8008688:	e780      	b.n	800858c <_dtoa_r+0x424>
 800868a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800868c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800868e:	1e5a      	subs	r2, r3, #1
 8008690:	4b59      	ldr	r3, [pc, #356]	; (80087f8 <_dtoa_r+0x690>)
 8008692:	00d2      	lsls	r2, r2, #3
 8008694:	189b      	adds	r3, r3, r2
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	2900      	cmp	r1, #0
 800869c:	d051      	beq.n	8008742 <_dtoa_r+0x5da>
 800869e:	2000      	movs	r0, #0
 80086a0:	495d      	ldr	r1, [pc, #372]	; (8008818 <_dtoa_r+0x6b0>)
 80086a2:	f7f8 faad 	bl	8000c00 <__aeabi_ddiv>
 80086a6:	9a08      	ldr	r2, [sp, #32]
 80086a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086aa:	f7f9 f917 	bl	80018dc <__aeabi_dsub>
 80086ae:	9a06      	ldr	r2, [sp, #24]
 80086b0:	9b06      	ldr	r3, [sp, #24]
 80086b2:	4694      	mov	ip, r2
 80086b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80086b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086b8:	9010      	str	r0, [sp, #64]	; 0x40
 80086ba:	9111      	str	r1, [sp, #68]	; 0x44
 80086bc:	4463      	add	r3, ip
 80086be:	9319      	str	r3, [sp, #100]	; 0x64
 80086c0:	0029      	movs	r1, r5
 80086c2:	0020      	movs	r0, r4
 80086c4:	f7f9 fcba 	bl	800203c <__aeabi_d2iz>
 80086c8:	9014      	str	r0, [sp, #80]	; 0x50
 80086ca:	f7f9 fced 	bl	80020a8 <__aeabi_i2d>
 80086ce:	0002      	movs	r2, r0
 80086d0:	000b      	movs	r3, r1
 80086d2:	0020      	movs	r0, r4
 80086d4:	0029      	movs	r1, r5
 80086d6:	f7f9 f901 	bl	80018dc <__aeabi_dsub>
 80086da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80086de:	3301      	adds	r3, #1
 80086e0:	9308      	str	r3, [sp, #32]
 80086e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086e4:	0004      	movs	r4, r0
 80086e6:	3330      	adds	r3, #48	; 0x30
 80086e8:	7013      	strb	r3, [r2, #0]
 80086ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086ee:	000d      	movs	r5, r1
 80086f0:	f7f7 feb2 	bl	8000458 <__aeabi_dcmplt>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d175      	bne.n	80087e4 <_dtoa_r+0x67c>
 80086f8:	0022      	movs	r2, r4
 80086fa:	002b      	movs	r3, r5
 80086fc:	2000      	movs	r0, #0
 80086fe:	4940      	ldr	r1, [pc, #256]	; (8008800 <_dtoa_r+0x698>)
 8008700:	f7f9 f8ec 	bl	80018dc <__aeabi_dsub>
 8008704:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008706:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008708:	f7f7 fea6 	bl	8000458 <__aeabi_dcmplt>
 800870c:	2800      	cmp	r0, #0
 800870e:	d000      	beq.n	8008712 <_dtoa_r+0x5aa>
 8008710:	e0d2      	b.n	80088b8 <_dtoa_r+0x750>
 8008712:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008714:	9a08      	ldr	r2, [sp, #32]
 8008716:	4293      	cmp	r3, r2
 8008718:	d100      	bne.n	800871c <_dtoa_r+0x5b4>
 800871a:	e770      	b.n	80085fe <_dtoa_r+0x496>
 800871c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800871e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008720:	2200      	movs	r2, #0
 8008722:	4b38      	ldr	r3, [pc, #224]	; (8008804 <_dtoa_r+0x69c>)
 8008724:	f7f8 fe6e 	bl	8001404 <__aeabi_dmul>
 8008728:	4b36      	ldr	r3, [pc, #216]	; (8008804 <_dtoa_r+0x69c>)
 800872a:	9010      	str	r0, [sp, #64]	; 0x40
 800872c:	9111      	str	r1, [sp, #68]	; 0x44
 800872e:	2200      	movs	r2, #0
 8008730:	0020      	movs	r0, r4
 8008732:	0029      	movs	r1, r5
 8008734:	f7f8 fe66 	bl	8001404 <__aeabi_dmul>
 8008738:	9b08      	ldr	r3, [sp, #32]
 800873a:	0004      	movs	r4, r0
 800873c:	000d      	movs	r5, r1
 800873e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008740:	e7be      	b.n	80086c0 <_dtoa_r+0x558>
 8008742:	9808      	ldr	r0, [sp, #32]
 8008744:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008746:	f7f8 fe5d 	bl	8001404 <__aeabi_dmul>
 800874a:	9a06      	ldr	r2, [sp, #24]
 800874c:	9b06      	ldr	r3, [sp, #24]
 800874e:	4694      	mov	ip, r2
 8008750:	9308      	str	r3, [sp, #32]
 8008752:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008754:	9010      	str	r0, [sp, #64]	; 0x40
 8008756:	9111      	str	r1, [sp, #68]	; 0x44
 8008758:	4463      	add	r3, ip
 800875a:	9319      	str	r3, [sp, #100]	; 0x64
 800875c:	0029      	movs	r1, r5
 800875e:	0020      	movs	r0, r4
 8008760:	f7f9 fc6c 	bl	800203c <__aeabi_d2iz>
 8008764:	9017      	str	r0, [sp, #92]	; 0x5c
 8008766:	f7f9 fc9f 	bl	80020a8 <__aeabi_i2d>
 800876a:	0002      	movs	r2, r0
 800876c:	000b      	movs	r3, r1
 800876e:	0020      	movs	r0, r4
 8008770:	0029      	movs	r1, r5
 8008772:	f7f9 f8b3 	bl	80018dc <__aeabi_dsub>
 8008776:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008778:	9a08      	ldr	r2, [sp, #32]
 800877a:	3330      	adds	r3, #48	; 0x30
 800877c:	7013      	strb	r3, [r2, #0]
 800877e:	0013      	movs	r3, r2
 8008780:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008782:	3301      	adds	r3, #1
 8008784:	0004      	movs	r4, r0
 8008786:	000d      	movs	r5, r1
 8008788:	9308      	str	r3, [sp, #32]
 800878a:	4293      	cmp	r3, r2
 800878c:	d12c      	bne.n	80087e8 <_dtoa_r+0x680>
 800878e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008790:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008792:	9a06      	ldr	r2, [sp, #24]
 8008794:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008796:	4694      	mov	ip, r2
 8008798:	4463      	add	r3, ip
 800879a:	2200      	movs	r2, #0
 800879c:	9308      	str	r3, [sp, #32]
 800879e:	4b1e      	ldr	r3, [pc, #120]	; (8008818 <_dtoa_r+0x6b0>)
 80087a0:	f7f7 fef2 	bl	8000588 <__aeabi_dadd>
 80087a4:	0002      	movs	r2, r0
 80087a6:	000b      	movs	r3, r1
 80087a8:	0020      	movs	r0, r4
 80087aa:	0029      	movs	r1, r5
 80087ac:	f7f7 fe68 	bl	8000480 <__aeabi_dcmpgt>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d000      	beq.n	80087b6 <_dtoa_r+0x64e>
 80087b4:	e080      	b.n	80088b8 <_dtoa_r+0x750>
 80087b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087ba:	2000      	movs	r0, #0
 80087bc:	4916      	ldr	r1, [pc, #88]	; (8008818 <_dtoa_r+0x6b0>)
 80087be:	f7f9 f88d 	bl	80018dc <__aeabi_dsub>
 80087c2:	0002      	movs	r2, r0
 80087c4:	000b      	movs	r3, r1
 80087c6:	0020      	movs	r0, r4
 80087c8:	0029      	movs	r1, r5
 80087ca:	f7f7 fe45 	bl	8000458 <__aeabi_dcmplt>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d100      	bne.n	80087d4 <_dtoa_r+0x66c>
 80087d2:	e714      	b.n	80085fe <_dtoa_r+0x496>
 80087d4:	9b08      	ldr	r3, [sp, #32]
 80087d6:	001a      	movs	r2, r3
 80087d8:	3a01      	subs	r2, #1
 80087da:	9208      	str	r2, [sp, #32]
 80087dc:	7812      	ldrb	r2, [r2, #0]
 80087de:	2a30      	cmp	r2, #48	; 0x30
 80087e0:	d0f8      	beq.n	80087d4 <_dtoa_r+0x66c>
 80087e2:	9308      	str	r3, [sp, #32]
 80087e4:	9602      	str	r6, [sp, #8]
 80087e6:	e055      	b.n	8008894 <_dtoa_r+0x72c>
 80087e8:	2200      	movs	r2, #0
 80087ea:	4b06      	ldr	r3, [pc, #24]	; (8008804 <_dtoa_r+0x69c>)
 80087ec:	f7f8 fe0a 	bl	8001404 <__aeabi_dmul>
 80087f0:	0004      	movs	r4, r0
 80087f2:	000d      	movs	r5, r1
 80087f4:	e7b2      	b.n	800875c <_dtoa_r+0x5f4>
 80087f6:	46c0      	nop			; (mov r8, r8)
 80087f8:	0800b468 	.word	0x0800b468
 80087fc:	0800b440 	.word	0x0800b440
 8008800:	3ff00000 	.word	0x3ff00000
 8008804:	40240000 	.word	0x40240000
 8008808:	401c0000 	.word	0x401c0000
 800880c:	fcc00000 	.word	0xfcc00000
 8008810:	40140000 	.word	0x40140000
 8008814:	7cc00000 	.word	0x7cc00000
 8008818:	3fe00000 	.word	0x3fe00000
 800881c:	9b07      	ldr	r3, [sp, #28]
 800881e:	9e06      	ldr	r6, [sp, #24]
 8008820:	3b01      	subs	r3, #1
 8008822:	199b      	adds	r3, r3, r6
 8008824:	930c      	str	r3, [sp, #48]	; 0x30
 8008826:	9c08      	ldr	r4, [sp, #32]
 8008828:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800882a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800882c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800882e:	0020      	movs	r0, r4
 8008830:	0029      	movs	r1, r5
 8008832:	f7f8 f9e5 	bl	8000c00 <__aeabi_ddiv>
 8008836:	f7f9 fc01 	bl	800203c <__aeabi_d2iz>
 800883a:	9007      	str	r0, [sp, #28]
 800883c:	f7f9 fc34 	bl	80020a8 <__aeabi_i2d>
 8008840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008844:	f7f8 fdde 	bl	8001404 <__aeabi_dmul>
 8008848:	0002      	movs	r2, r0
 800884a:	000b      	movs	r3, r1
 800884c:	0020      	movs	r0, r4
 800884e:	0029      	movs	r1, r5
 8008850:	f7f9 f844 	bl	80018dc <__aeabi_dsub>
 8008854:	0033      	movs	r3, r6
 8008856:	9a07      	ldr	r2, [sp, #28]
 8008858:	3601      	adds	r6, #1
 800885a:	3230      	adds	r2, #48	; 0x30
 800885c:	701a      	strb	r2, [r3, #0]
 800885e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008860:	9608      	str	r6, [sp, #32]
 8008862:	429a      	cmp	r2, r3
 8008864:	d139      	bne.n	80088da <_dtoa_r+0x772>
 8008866:	0002      	movs	r2, r0
 8008868:	000b      	movs	r3, r1
 800886a:	f7f7 fe8d 	bl	8000588 <__aeabi_dadd>
 800886e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008872:	0004      	movs	r4, r0
 8008874:	000d      	movs	r5, r1
 8008876:	f7f7 fe03 	bl	8000480 <__aeabi_dcmpgt>
 800887a:	2800      	cmp	r0, #0
 800887c:	d11b      	bne.n	80088b6 <_dtoa_r+0x74e>
 800887e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008882:	0020      	movs	r0, r4
 8008884:	0029      	movs	r1, r5
 8008886:	f7f7 fde1 	bl	800044c <__aeabi_dcmpeq>
 800888a:	2800      	cmp	r0, #0
 800888c:	d002      	beq.n	8008894 <_dtoa_r+0x72c>
 800888e:	9b07      	ldr	r3, [sp, #28]
 8008890:	07db      	lsls	r3, r3, #31
 8008892:	d410      	bmi.n	80088b6 <_dtoa_r+0x74e>
 8008894:	0038      	movs	r0, r7
 8008896:	9905      	ldr	r1, [sp, #20]
 8008898:	f000 fe6c 	bl	8009574 <_Bfree>
 800889c:	2300      	movs	r3, #0
 800889e:	9a08      	ldr	r2, [sp, #32]
 80088a0:	9802      	ldr	r0, [sp, #8]
 80088a2:	7013      	strb	r3, [r2, #0]
 80088a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80088a6:	3001      	adds	r0, #1
 80088a8:	6018      	str	r0, [r3, #0]
 80088aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d100      	bne.n	80088b2 <_dtoa_r+0x74a>
 80088b0:	e4a6      	b.n	8008200 <_dtoa_r+0x98>
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	e4a4      	b.n	8008200 <_dtoa_r+0x98>
 80088b6:	9e02      	ldr	r6, [sp, #8]
 80088b8:	9b08      	ldr	r3, [sp, #32]
 80088ba:	9308      	str	r3, [sp, #32]
 80088bc:	3b01      	subs	r3, #1
 80088be:	781a      	ldrb	r2, [r3, #0]
 80088c0:	2a39      	cmp	r2, #57	; 0x39
 80088c2:	d106      	bne.n	80088d2 <_dtoa_r+0x76a>
 80088c4:	9a06      	ldr	r2, [sp, #24]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d1f7      	bne.n	80088ba <_dtoa_r+0x752>
 80088ca:	2230      	movs	r2, #48	; 0x30
 80088cc:	9906      	ldr	r1, [sp, #24]
 80088ce:	3601      	adds	r6, #1
 80088d0:	700a      	strb	r2, [r1, #0]
 80088d2:	781a      	ldrb	r2, [r3, #0]
 80088d4:	3201      	adds	r2, #1
 80088d6:	701a      	strb	r2, [r3, #0]
 80088d8:	e784      	b.n	80087e4 <_dtoa_r+0x67c>
 80088da:	2200      	movs	r2, #0
 80088dc:	4baa      	ldr	r3, [pc, #680]	; (8008b88 <_dtoa_r+0xa20>)
 80088de:	f7f8 fd91 	bl	8001404 <__aeabi_dmul>
 80088e2:	2200      	movs	r2, #0
 80088e4:	2300      	movs	r3, #0
 80088e6:	0004      	movs	r4, r0
 80088e8:	000d      	movs	r5, r1
 80088ea:	f7f7 fdaf 	bl	800044c <__aeabi_dcmpeq>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d09b      	beq.n	800882a <_dtoa_r+0x6c2>
 80088f2:	e7cf      	b.n	8008894 <_dtoa_r+0x72c>
 80088f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088f6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80088f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80088fa:	2d00      	cmp	r5, #0
 80088fc:	d012      	beq.n	8008924 <_dtoa_r+0x7bc>
 80088fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008900:	2a01      	cmp	r2, #1
 8008902:	dc66      	bgt.n	80089d2 <_dtoa_r+0x86a>
 8008904:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008906:	2a00      	cmp	r2, #0
 8008908:	d05d      	beq.n	80089c6 <_dtoa_r+0x85e>
 800890a:	4aa0      	ldr	r2, [pc, #640]	; (8008b8c <_dtoa_r+0xa24>)
 800890c:	189b      	adds	r3, r3, r2
 800890e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008910:	2101      	movs	r1, #1
 8008912:	18d2      	adds	r2, r2, r3
 8008914:	920a      	str	r2, [sp, #40]	; 0x28
 8008916:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008918:	0038      	movs	r0, r7
 800891a:	18d3      	adds	r3, r2, r3
 800891c:	930d      	str	r3, [sp, #52]	; 0x34
 800891e:	f000 ff25 	bl	800976c <__i2b>
 8008922:	0005      	movs	r5, r0
 8008924:	2c00      	cmp	r4, #0
 8008926:	dd0e      	ble.n	8008946 <_dtoa_r+0x7de>
 8008928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800892a:	2b00      	cmp	r3, #0
 800892c:	dd0b      	ble.n	8008946 <_dtoa_r+0x7de>
 800892e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008930:	0023      	movs	r3, r4
 8008932:	4294      	cmp	r4, r2
 8008934:	dd00      	ble.n	8008938 <_dtoa_r+0x7d0>
 8008936:	0013      	movs	r3, r2
 8008938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800893a:	1ae4      	subs	r4, r4, r3
 800893c:	1ad2      	subs	r2, r2, r3
 800893e:	920a      	str	r2, [sp, #40]	; 0x28
 8008940:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	930d      	str	r3, [sp, #52]	; 0x34
 8008946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008948:	2b00      	cmp	r3, #0
 800894a:	d01f      	beq.n	800898c <_dtoa_r+0x824>
 800894c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800894e:	2b00      	cmp	r3, #0
 8008950:	d054      	beq.n	80089fc <_dtoa_r+0x894>
 8008952:	2e00      	cmp	r6, #0
 8008954:	dd11      	ble.n	800897a <_dtoa_r+0x812>
 8008956:	0029      	movs	r1, r5
 8008958:	0032      	movs	r2, r6
 800895a:	0038      	movs	r0, r7
 800895c:	f000 ffcc 	bl	80098f8 <__pow5mult>
 8008960:	9a05      	ldr	r2, [sp, #20]
 8008962:	0001      	movs	r1, r0
 8008964:	0005      	movs	r5, r0
 8008966:	0038      	movs	r0, r7
 8008968:	f000 ff16 	bl	8009798 <__multiply>
 800896c:	9905      	ldr	r1, [sp, #20]
 800896e:	9014      	str	r0, [sp, #80]	; 0x50
 8008970:	0038      	movs	r0, r7
 8008972:	f000 fdff 	bl	8009574 <_Bfree>
 8008976:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008978:	9305      	str	r3, [sp, #20]
 800897a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800897c:	1b9a      	subs	r2, r3, r6
 800897e:	42b3      	cmp	r3, r6
 8008980:	d004      	beq.n	800898c <_dtoa_r+0x824>
 8008982:	0038      	movs	r0, r7
 8008984:	9905      	ldr	r1, [sp, #20]
 8008986:	f000 ffb7 	bl	80098f8 <__pow5mult>
 800898a:	9005      	str	r0, [sp, #20]
 800898c:	2101      	movs	r1, #1
 800898e:	0038      	movs	r0, r7
 8008990:	f000 feec 	bl	800976c <__i2b>
 8008994:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008996:	0006      	movs	r6, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	dd31      	ble.n	8008a00 <_dtoa_r+0x898>
 800899c:	001a      	movs	r2, r3
 800899e:	0001      	movs	r1, r0
 80089a0:	0038      	movs	r0, r7
 80089a2:	f000 ffa9 	bl	80098f8 <__pow5mult>
 80089a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089a8:	0006      	movs	r6, r0
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	dd2d      	ble.n	8008a0a <_dtoa_r+0x8a2>
 80089ae:	2300      	movs	r3, #0
 80089b0:	930e      	str	r3, [sp, #56]	; 0x38
 80089b2:	6933      	ldr	r3, [r6, #16]
 80089b4:	3303      	adds	r3, #3
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	18f3      	adds	r3, r6, r3
 80089ba:	6858      	ldr	r0, [r3, #4]
 80089bc:	f000 fe8e 	bl	80096dc <__hi0bits>
 80089c0:	2320      	movs	r3, #32
 80089c2:	1a18      	subs	r0, r3, r0
 80089c4:	e039      	b.n	8008a3a <_dtoa_r+0x8d2>
 80089c6:	2336      	movs	r3, #54	; 0x36
 80089c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80089ca:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80089cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80089ce:	1a9b      	subs	r3, r3, r2
 80089d0:	e79d      	b.n	800890e <_dtoa_r+0x7a6>
 80089d2:	9b07      	ldr	r3, [sp, #28]
 80089d4:	1e5e      	subs	r6, r3, #1
 80089d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089d8:	42b3      	cmp	r3, r6
 80089da:	db07      	blt.n	80089ec <_dtoa_r+0x884>
 80089dc:	1b9e      	subs	r6, r3, r6
 80089de:	9b07      	ldr	r3, [sp, #28]
 80089e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	da93      	bge.n	800890e <_dtoa_r+0x7a6>
 80089e6:	1ae4      	subs	r4, r4, r3
 80089e8:	2300      	movs	r3, #0
 80089ea:	e790      	b.n	800890e <_dtoa_r+0x7a6>
 80089ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80089f0:	1af3      	subs	r3, r6, r3
 80089f2:	18d3      	adds	r3, r2, r3
 80089f4:	960e      	str	r6, [sp, #56]	; 0x38
 80089f6:	9315      	str	r3, [sp, #84]	; 0x54
 80089f8:	2600      	movs	r6, #0
 80089fa:	e7f0      	b.n	80089de <_dtoa_r+0x876>
 80089fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089fe:	e7c0      	b.n	8008982 <_dtoa_r+0x81a>
 8008a00:	2300      	movs	r3, #0
 8008a02:	930e      	str	r3, [sp, #56]	; 0x38
 8008a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	dc13      	bgt.n	8008a32 <_dtoa_r+0x8ca>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	930e      	str	r3, [sp, #56]	; 0x38
 8008a0e:	9b08      	ldr	r3, [sp, #32]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10e      	bne.n	8008a32 <_dtoa_r+0x8ca>
 8008a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a16:	031b      	lsls	r3, r3, #12
 8008a18:	d10b      	bne.n	8008a32 <_dtoa_r+0x8ca>
 8008a1a:	4b5d      	ldr	r3, [pc, #372]	; (8008b90 <_dtoa_r+0xa28>)
 8008a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a1e:	4213      	tst	r3, r2
 8008a20:	d007      	beq.n	8008a32 <_dtoa_r+0x8ca>
 8008a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a24:	3301      	adds	r3, #1
 8008a26:	930a      	str	r3, [sp, #40]	; 0x28
 8008a28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	930d      	str	r3, [sp, #52]	; 0x34
 8008a2e:	2301      	movs	r3, #1
 8008a30:	930e      	str	r3, [sp, #56]	; 0x38
 8008a32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a34:	2001      	movs	r0, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1bb      	bne.n	80089b2 <_dtoa_r+0x84a>
 8008a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a3c:	221f      	movs	r2, #31
 8008a3e:	1818      	adds	r0, r3, r0
 8008a40:	0003      	movs	r3, r0
 8008a42:	4013      	ands	r3, r2
 8008a44:	4210      	tst	r0, r2
 8008a46:	d046      	beq.n	8008ad6 <_dtoa_r+0x96e>
 8008a48:	3201      	adds	r2, #1
 8008a4a:	1ad2      	subs	r2, r2, r3
 8008a4c:	2a04      	cmp	r2, #4
 8008a4e:	dd3f      	ble.n	8008ad0 <_dtoa_r+0x968>
 8008a50:	221c      	movs	r2, #28
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a56:	18e4      	adds	r4, r4, r3
 8008a58:	18d2      	adds	r2, r2, r3
 8008a5a:	920a      	str	r2, [sp, #40]	; 0x28
 8008a5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a5e:	18d3      	adds	r3, r2, r3
 8008a60:	930d      	str	r3, [sp, #52]	; 0x34
 8008a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dd05      	ble.n	8008a74 <_dtoa_r+0x90c>
 8008a68:	001a      	movs	r2, r3
 8008a6a:	0038      	movs	r0, r7
 8008a6c:	9905      	ldr	r1, [sp, #20]
 8008a6e:	f000 ff9f 	bl	80099b0 <__lshift>
 8008a72:	9005      	str	r0, [sp, #20]
 8008a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	dd05      	ble.n	8008a86 <_dtoa_r+0x91e>
 8008a7a:	0031      	movs	r1, r6
 8008a7c:	001a      	movs	r2, r3
 8008a7e:	0038      	movs	r0, r7
 8008a80:	f000 ff96 	bl	80099b0 <__lshift>
 8008a84:	0006      	movs	r6, r0
 8008a86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d026      	beq.n	8008ada <_dtoa_r+0x972>
 8008a8c:	0031      	movs	r1, r6
 8008a8e:	9805      	ldr	r0, [sp, #20]
 8008a90:	f000 fffc 	bl	8009a8c <__mcmp>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	da20      	bge.n	8008ada <_dtoa_r+0x972>
 8008a98:	9b02      	ldr	r3, [sp, #8]
 8008a9a:	220a      	movs	r2, #10
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	9302      	str	r3, [sp, #8]
 8008aa0:	0038      	movs	r0, r7
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	9905      	ldr	r1, [sp, #20]
 8008aa6:	f000 fd89 	bl	80095bc <__multadd>
 8008aaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008aac:	9005      	str	r0, [sp, #20]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d100      	bne.n	8008ab4 <_dtoa_r+0x94c>
 8008ab2:	e166      	b.n	8008d82 <_dtoa_r+0xc1a>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	0029      	movs	r1, r5
 8008ab8:	220a      	movs	r2, #10
 8008aba:	0038      	movs	r0, r7
 8008abc:	f000 fd7e 	bl	80095bc <__multadd>
 8008ac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ac2:	0005      	movs	r5, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	dc47      	bgt.n	8008b58 <_dtoa_r+0x9f0>
 8008ac8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	dc0d      	bgt.n	8008aea <_dtoa_r+0x982>
 8008ace:	e043      	b.n	8008b58 <_dtoa_r+0x9f0>
 8008ad0:	2a04      	cmp	r2, #4
 8008ad2:	d0c6      	beq.n	8008a62 <_dtoa_r+0x8fa>
 8008ad4:	0013      	movs	r3, r2
 8008ad6:	331c      	adds	r3, #28
 8008ad8:	e7bc      	b.n	8008a54 <_dtoa_r+0x8ec>
 8008ada:	9b07      	ldr	r3, [sp, #28]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	dc35      	bgt.n	8008b4c <_dtoa_r+0x9e4>
 8008ae0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	dd32      	ble.n	8008b4c <_dtoa_r+0x9e4>
 8008ae6:	9b07      	ldr	r3, [sp, #28]
 8008ae8:	930c      	str	r3, [sp, #48]	; 0x30
 8008aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10c      	bne.n	8008b0a <_dtoa_r+0x9a2>
 8008af0:	0031      	movs	r1, r6
 8008af2:	2205      	movs	r2, #5
 8008af4:	0038      	movs	r0, r7
 8008af6:	f000 fd61 	bl	80095bc <__multadd>
 8008afa:	0006      	movs	r6, r0
 8008afc:	0001      	movs	r1, r0
 8008afe:	9805      	ldr	r0, [sp, #20]
 8008b00:	f000 ffc4 	bl	8009a8c <__mcmp>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	dd00      	ble.n	8008b0a <_dtoa_r+0x9a2>
 8008b08:	e5a5      	b.n	8008656 <_dtoa_r+0x4ee>
 8008b0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b0c:	43db      	mvns	r3, r3
 8008b0e:	9302      	str	r3, [sp, #8]
 8008b10:	9b06      	ldr	r3, [sp, #24]
 8008b12:	9308      	str	r3, [sp, #32]
 8008b14:	2400      	movs	r4, #0
 8008b16:	0031      	movs	r1, r6
 8008b18:	0038      	movs	r0, r7
 8008b1a:	f000 fd2b 	bl	8009574 <_Bfree>
 8008b1e:	2d00      	cmp	r5, #0
 8008b20:	d100      	bne.n	8008b24 <_dtoa_r+0x9bc>
 8008b22:	e6b7      	b.n	8008894 <_dtoa_r+0x72c>
 8008b24:	2c00      	cmp	r4, #0
 8008b26:	d005      	beq.n	8008b34 <_dtoa_r+0x9cc>
 8008b28:	42ac      	cmp	r4, r5
 8008b2a:	d003      	beq.n	8008b34 <_dtoa_r+0x9cc>
 8008b2c:	0021      	movs	r1, r4
 8008b2e:	0038      	movs	r0, r7
 8008b30:	f000 fd20 	bl	8009574 <_Bfree>
 8008b34:	0029      	movs	r1, r5
 8008b36:	0038      	movs	r0, r7
 8008b38:	f000 fd1c 	bl	8009574 <_Bfree>
 8008b3c:	e6aa      	b.n	8008894 <_dtoa_r+0x72c>
 8008b3e:	2600      	movs	r6, #0
 8008b40:	0035      	movs	r5, r6
 8008b42:	e7e2      	b.n	8008b0a <_dtoa_r+0x9a2>
 8008b44:	9602      	str	r6, [sp, #8]
 8008b46:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008b48:	0035      	movs	r5, r6
 8008b4a:	e584      	b.n	8008656 <_dtoa_r+0x4ee>
 8008b4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d100      	bne.n	8008b54 <_dtoa_r+0x9ec>
 8008b52:	e0ce      	b.n	8008cf2 <_dtoa_r+0xb8a>
 8008b54:	9b07      	ldr	r3, [sp, #28]
 8008b56:	930c      	str	r3, [sp, #48]	; 0x30
 8008b58:	2c00      	cmp	r4, #0
 8008b5a:	dd05      	ble.n	8008b68 <_dtoa_r+0xa00>
 8008b5c:	0029      	movs	r1, r5
 8008b5e:	0022      	movs	r2, r4
 8008b60:	0038      	movs	r0, r7
 8008b62:	f000 ff25 	bl	80099b0 <__lshift>
 8008b66:	0005      	movs	r5, r0
 8008b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b6a:	0028      	movs	r0, r5
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d022      	beq.n	8008bb6 <_dtoa_r+0xa4e>
 8008b70:	0038      	movs	r0, r7
 8008b72:	6869      	ldr	r1, [r5, #4]
 8008b74:	f000 fcba 	bl	80094ec <_Balloc>
 8008b78:	1e04      	subs	r4, r0, #0
 8008b7a:	d10f      	bne.n	8008b9c <_dtoa_r+0xa34>
 8008b7c:	0002      	movs	r2, r0
 8008b7e:	4b05      	ldr	r3, [pc, #20]	; (8008b94 <_dtoa_r+0xa2c>)
 8008b80:	4905      	ldr	r1, [pc, #20]	; (8008b98 <_dtoa_r+0xa30>)
 8008b82:	f7ff fb06 	bl	8008192 <_dtoa_r+0x2a>
 8008b86:	46c0      	nop			; (mov r8, r8)
 8008b88:	40240000 	.word	0x40240000
 8008b8c:	00000433 	.word	0x00000433
 8008b90:	7ff00000 	.word	0x7ff00000
 8008b94:	0800b358 	.word	0x0800b358
 8008b98:	000002ea 	.word	0x000002ea
 8008b9c:	0029      	movs	r1, r5
 8008b9e:	692b      	ldr	r3, [r5, #16]
 8008ba0:	310c      	adds	r1, #12
 8008ba2:	1c9a      	adds	r2, r3, #2
 8008ba4:	0092      	lsls	r2, r2, #2
 8008ba6:	300c      	adds	r0, #12
 8008ba8:	f000 fc97 	bl	80094da <memcpy>
 8008bac:	2201      	movs	r2, #1
 8008bae:	0021      	movs	r1, r4
 8008bb0:	0038      	movs	r0, r7
 8008bb2:	f000 fefd 	bl	80099b0 <__lshift>
 8008bb6:	9b06      	ldr	r3, [sp, #24]
 8008bb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bba:	930a      	str	r3, [sp, #40]	; 0x28
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	189b      	adds	r3, r3, r2
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	002c      	movs	r4, r5
 8008bc4:	0005      	movs	r5, r0
 8008bc6:	9314      	str	r3, [sp, #80]	; 0x50
 8008bc8:	9b08      	ldr	r3, [sp, #32]
 8008bca:	4013      	ands	r3, r2
 8008bcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bce:	0031      	movs	r1, r6
 8008bd0:	9805      	ldr	r0, [sp, #20]
 8008bd2:	f7ff fa3d 	bl	8008050 <quorem>
 8008bd6:	0003      	movs	r3, r0
 8008bd8:	0021      	movs	r1, r4
 8008bda:	3330      	adds	r3, #48	; 0x30
 8008bdc:	900d      	str	r0, [sp, #52]	; 0x34
 8008bde:	9805      	ldr	r0, [sp, #20]
 8008be0:	9307      	str	r3, [sp, #28]
 8008be2:	f000 ff53 	bl	8009a8c <__mcmp>
 8008be6:	002a      	movs	r2, r5
 8008be8:	900e      	str	r0, [sp, #56]	; 0x38
 8008bea:	0031      	movs	r1, r6
 8008bec:	0038      	movs	r0, r7
 8008bee:	f000 ff69 	bl	8009ac4 <__mdiff>
 8008bf2:	68c3      	ldr	r3, [r0, #12]
 8008bf4:	9008      	str	r0, [sp, #32]
 8008bf6:	9310      	str	r3, [sp, #64]	; 0x40
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	930c      	str	r3, [sp, #48]	; 0x30
 8008bfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d104      	bne.n	8008c0c <_dtoa_r+0xaa4>
 8008c02:	0001      	movs	r1, r0
 8008c04:	9805      	ldr	r0, [sp, #20]
 8008c06:	f000 ff41 	bl	8009a8c <__mcmp>
 8008c0a:	900c      	str	r0, [sp, #48]	; 0x30
 8008c0c:	0038      	movs	r0, r7
 8008c0e:	9908      	ldr	r1, [sp, #32]
 8008c10:	f000 fcb0 	bl	8009574 <_Bfree>
 8008c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c18:	3301      	adds	r3, #1
 8008c1a:	9308      	str	r3, [sp, #32]
 8008c1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c22:	4313      	orrs	r3, r2
 8008c24:	d10c      	bne.n	8008c40 <_dtoa_r+0xad8>
 8008c26:	9b07      	ldr	r3, [sp, #28]
 8008c28:	2b39      	cmp	r3, #57	; 0x39
 8008c2a:	d026      	beq.n	8008c7a <_dtoa_r+0xb12>
 8008c2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dd02      	ble.n	8008c38 <_dtoa_r+0xad0>
 8008c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c34:	3331      	adds	r3, #49	; 0x31
 8008c36:	9307      	str	r3, [sp, #28]
 8008c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c3a:	9a07      	ldr	r2, [sp, #28]
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	e76a      	b.n	8008b16 <_dtoa_r+0x9ae>
 8008c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	db04      	blt.n	8008c50 <_dtoa_r+0xae8>
 8008c46:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	d11f      	bne.n	8008c90 <_dtoa_r+0xb28>
 8008c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	ddf0      	ble.n	8008c38 <_dtoa_r+0xad0>
 8008c56:	9905      	ldr	r1, [sp, #20]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	0038      	movs	r0, r7
 8008c5c:	f000 fea8 	bl	80099b0 <__lshift>
 8008c60:	0031      	movs	r1, r6
 8008c62:	9005      	str	r0, [sp, #20]
 8008c64:	f000 ff12 	bl	8009a8c <__mcmp>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	dc03      	bgt.n	8008c74 <_dtoa_r+0xb0c>
 8008c6c:	d1e4      	bne.n	8008c38 <_dtoa_r+0xad0>
 8008c6e:	9b07      	ldr	r3, [sp, #28]
 8008c70:	07db      	lsls	r3, r3, #31
 8008c72:	d5e1      	bpl.n	8008c38 <_dtoa_r+0xad0>
 8008c74:	9b07      	ldr	r3, [sp, #28]
 8008c76:	2b39      	cmp	r3, #57	; 0x39
 8008c78:	d1db      	bne.n	8008c32 <_dtoa_r+0xaca>
 8008c7a:	2339      	movs	r3, #57	; 0x39
 8008c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c7e:	7013      	strb	r3, [r2, #0]
 8008c80:	9b08      	ldr	r3, [sp, #32]
 8008c82:	9308      	str	r3, [sp, #32]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	781a      	ldrb	r2, [r3, #0]
 8008c88:	2a39      	cmp	r2, #57	; 0x39
 8008c8a:	d068      	beq.n	8008d5e <_dtoa_r+0xbf6>
 8008c8c:	3201      	adds	r2, #1
 8008c8e:	e7d5      	b.n	8008c3c <_dtoa_r+0xad4>
 8008c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	dd07      	ble.n	8008ca6 <_dtoa_r+0xb3e>
 8008c96:	9b07      	ldr	r3, [sp, #28]
 8008c98:	2b39      	cmp	r3, #57	; 0x39
 8008c9a:	d0ee      	beq.n	8008c7a <_dtoa_r+0xb12>
 8008c9c:	9b07      	ldr	r3, [sp, #28]
 8008c9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	7013      	strb	r3, [r2, #0]
 8008ca4:	e737      	b.n	8008b16 <_dtoa_r+0x9ae>
 8008ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca8:	9a07      	ldr	r2, [sp, #28]
 8008caa:	701a      	strb	r2, [r3, #0]
 8008cac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d03e      	beq.n	8008d32 <_dtoa_r+0xbca>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	220a      	movs	r2, #10
 8008cb8:	9905      	ldr	r1, [sp, #20]
 8008cba:	0038      	movs	r0, r7
 8008cbc:	f000 fc7e 	bl	80095bc <__multadd>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	9005      	str	r0, [sp, #20]
 8008cc4:	220a      	movs	r2, #10
 8008cc6:	0021      	movs	r1, r4
 8008cc8:	0038      	movs	r0, r7
 8008cca:	42ac      	cmp	r4, r5
 8008ccc:	d106      	bne.n	8008cdc <_dtoa_r+0xb74>
 8008cce:	f000 fc75 	bl	80095bc <__multadd>
 8008cd2:	0004      	movs	r4, r0
 8008cd4:	0005      	movs	r5, r0
 8008cd6:	9b08      	ldr	r3, [sp, #32]
 8008cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8008cda:	e778      	b.n	8008bce <_dtoa_r+0xa66>
 8008cdc:	f000 fc6e 	bl	80095bc <__multadd>
 8008ce0:	0029      	movs	r1, r5
 8008ce2:	0004      	movs	r4, r0
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	220a      	movs	r2, #10
 8008ce8:	0038      	movs	r0, r7
 8008cea:	f000 fc67 	bl	80095bc <__multadd>
 8008cee:	0005      	movs	r5, r0
 8008cf0:	e7f1      	b.n	8008cd6 <_dtoa_r+0xb6e>
 8008cf2:	9b07      	ldr	r3, [sp, #28]
 8008cf4:	930c      	str	r3, [sp, #48]	; 0x30
 8008cf6:	2400      	movs	r4, #0
 8008cf8:	0031      	movs	r1, r6
 8008cfa:	9805      	ldr	r0, [sp, #20]
 8008cfc:	f7ff f9a8 	bl	8008050 <quorem>
 8008d00:	9b06      	ldr	r3, [sp, #24]
 8008d02:	3030      	adds	r0, #48	; 0x30
 8008d04:	5518      	strb	r0, [r3, r4]
 8008d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d08:	3401      	adds	r4, #1
 8008d0a:	9007      	str	r0, [sp, #28]
 8008d0c:	42a3      	cmp	r3, r4
 8008d0e:	dd07      	ble.n	8008d20 <_dtoa_r+0xbb8>
 8008d10:	2300      	movs	r3, #0
 8008d12:	220a      	movs	r2, #10
 8008d14:	0038      	movs	r0, r7
 8008d16:	9905      	ldr	r1, [sp, #20]
 8008d18:	f000 fc50 	bl	80095bc <__multadd>
 8008d1c:	9005      	str	r0, [sp, #20]
 8008d1e:	e7eb      	b.n	8008cf8 <_dtoa_r+0xb90>
 8008d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d22:	2001      	movs	r0, #1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	dd00      	ble.n	8008d2a <_dtoa_r+0xbc2>
 8008d28:	0018      	movs	r0, r3
 8008d2a:	2400      	movs	r4, #0
 8008d2c:	9b06      	ldr	r3, [sp, #24]
 8008d2e:	181b      	adds	r3, r3, r0
 8008d30:	9308      	str	r3, [sp, #32]
 8008d32:	9905      	ldr	r1, [sp, #20]
 8008d34:	2201      	movs	r2, #1
 8008d36:	0038      	movs	r0, r7
 8008d38:	f000 fe3a 	bl	80099b0 <__lshift>
 8008d3c:	0031      	movs	r1, r6
 8008d3e:	9005      	str	r0, [sp, #20]
 8008d40:	f000 fea4 	bl	8009a8c <__mcmp>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	dc9b      	bgt.n	8008c80 <_dtoa_r+0xb18>
 8008d48:	d102      	bne.n	8008d50 <_dtoa_r+0xbe8>
 8008d4a:	9b07      	ldr	r3, [sp, #28]
 8008d4c:	07db      	lsls	r3, r3, #31
 8008d4e:	d497      	bmi.n	8008c80 <_dtoa_r+0xb18>
 8008d50:	9b08      	ldr	r3, [sp, #32]
 8008d52:	9308      	str	r3, [sp, #32]
 8008d54:	3b01      	subs	r3, #1
 8008d56:	781a      	ldrb	r2, [r3, #0]
 8008d58:	2a30      	cmp	r2, #48	; 0x30
 8008d5a:	d0fa      	beq.n	8008d52 <_dtoa_r+0xbea>
 8008d5c:	e6db      	b.n	8008b16 <_dtoa_r+0x9ae>
 8008d5e:	9a06      	ldr	r2, [sp, #24]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d18e      	bne.n	8008c82 <_dtoa_r+0xb1a>
 8008d64:	9b02      	ldr	r3, [sp, #8]
 8008d66:	3301      	adds	r3, #1
 8008d68:	9302      	str	r3, [sp, #8]
 8008d6a:	2331      	movs	r3, #49	; 0x31
 8008d6c:	e799      	b.n	8008ca2 <_dtoa_r+0xb3a>
 8008d6e:	4b09      	ldr	r3, [pc, #36]	; (8008d94 <_dtoa_r+0xc2c>)
 8008d70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008d72:	9306      	str	r3, [sp, #24]
 8008d74:	4b08      	ldr	r3, [pc, #32]	; (8008d98 <_dtoa_r+0xc30>)
 8008d76:	2a00      	cmp	r2, #0
 8008d78:	d001      	beq.n	8008d7e <_dtoa_r+0xc16>
 8008d7a:	f7ff fa3f 	bl	80081fc <_dtoa_r+0x94>
 8008d7e:	f7ff fa3f 	bl	8008200 <_dtoa_r+0x98>
 8008d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	dcb6      	bgt.n	8008cf6 <_dtoa_r+0xb8e>
 8008d88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	dd00      	ble.n	8008d90 <_dtoa_r+0xc28>
 8008d8e:	e6ac      	b.n	8008aea <_dtoa_r+0x982>
 8008d90:	e7b1      	b.n	8008cf6 <_dtoa_r+0xb8e>
 8008d92:	46c0      	nop			; (mov r8, r8)
 8008d94:	0800b2d9 	.word	0x0800b2d9
 8008d98:	0800b2e1 	.word	0x0800b2e1

08008d9c <rshift>:
 8008d9c:	0002      	movs	r2, r0
 8008d9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008da0:	6904      	ldr	r4, [r0, #16]
 8008da2:	3214      	adds	r2, #20
 8008da4:	0013      	movs	r3, r2
 8008da6:	b085      	sub	sp, #20
 8008da8:	114f      	asrs	r7, r1, #5
 8008daa:	42bc      	cmp	r4, r7
 8008dac:	dd31      	ble.n	8008e12 <rshift+0x76>
 8008dae:	00bb      	lsls	r3, r7, #2
 8008db0:	18d3      	adds	r3, r2, r3
 8008db2:	261f      	movs	r6, #31
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	000b      	movs	r3, r1
 8008db8:	00a5      	lsls	r5, r4, #2
 8008dba:	4033      	ands	r3, r6
 8008dbc:	1955      	adds	r5, r2, r5
 8008dbe:	9302      	str	r3, [sp, #8]
 8008dc0:	4231      	tst	r1, r6
 8008dc2:	d10c      	bne.n	8008dde <rshift+0x42>
 8008dc4:	0016      	movs	r6, r2
 8008dc6:	9901      	ldr	r1, [sp, #4]
 8008dc8:	428d      	cmp	r5, r1
 8008dca:	d838      	bhi.n	8008e3e <rshift+0xa2>
 8008dcc:	9901      	ldr	r1, [sp, #4]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	3903      	subs	r1, #3
 8008dd2:	428d      	cmp	r5, r1
 8008dd4:	d301      	bcc.n	8008dda <rshift+0x3e>
 8008dd6:	1be3      	subs	r3, r4, r7
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	18d3      	adds	r3, r2, r3
 8008ddc:	e019      	b.n	8008e12 <rshift+0x76>
 8008dde:	2120      	movs	r1, #32
 8008de0:	9b02      	ldr	r3, [sp, #8]
 8008de2:	9e01      	ldr	r6, [sp, #4]
 8008de4:	1acb      	subs	r3, r1, r3
 8008de6:	9303      	str	r3, [sp, #12]
 8008de8:	ce02      	ldmia	r6!, {r1}
 8008dea:	9b02      	ldr	r3, [sp, #8]
 8008dec:	4694      	mov	ip, r2
 8008dee:	40d9      	lsrs	r1, r3
 8008df0:	9100      	str	r1, [sp, #0]
 8008df2:	42b5      	cmp	r5, r6
 8008df4:	d816      	bhi.n	8008e24 <rshift+0x88>
 8008df6:	9e01      	ldr	r6, [sp, #4]
 8008df8:	2300      	movs	r3, #0
 8008dfa:	3601      	adds	r6, #1
 8008dfc:	42b5      	cmp	r5, r6
 8008dfe:	d302      	bcc.n	8008e06 <rshift+0x6a>
 8008e00:	1be3      	subs	r3, r4, r7
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	3b04      	subs	r3, #4
 8008e06:	9900      	ldr	r1, [sp, #0]
 8008e08:	18d3      	adds	r3, r2, r3
 8008e0a:	6019      	str	r1, [r3, #0]
 8008e0c:	2900      	cmp	r1, #0
 8008e0e:	d000      	beq.n	8008e12 <rshift+0x76>
 8008e10:	3304      	adds	r3, #4
 8008e12:	1a99      	subs	r1, r3, r2
 8008e14:	1089      	asrs	r1, r1, #2
 8008e16:	6101      	str	r1, [r0, #16]
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d101      	bne.n	8008e20 <rshift+0x84>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	6143      	str	r3, [r0, #20]
 8008e20:	b005      	add	sp, #20
 8008e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e24:	6833      	ldr	r3, [r6, #0]
 8008e26:	9903      	ldr	r1, [sp, #12]
 8008e28:	408b      	lsls	r3, r1
 8008e2a:	9900      	ldr	r1, [sp, #0]
 8008e2c:	4319      	orrs	r1, r3
 8008e2e:	4663      	mov	r3, ip
 8008e30:	c302      	stmia	r3!, {r1}
 8008e32:	469c      	mov	ip, r3
 8008e34:	ce02      	ldmia	r6!, {r1}
 8008e36:	9b02      	ldr	r3, [sp, #8]
 8008e38:	40d9      	lsrs	r1, r3
 8008e3a:	9100      	str	r1, [sp, #0]
 8008e3c:	e7d9      	b.n	8008df2 <rshift+0x56>
 8008e3e:	c908      	ldmia	r1!, {r3}
 8008e40:	c608      	stmia	r6!, {r3}
 8008e42:	e7c1      	b.n	8008dc8 <rshift+0x2c>

08008e44 <__hexdig_fun>:
 8008e44:	0002      	movs	r2, r0
 8008e46:	3a30      	subs	r2, #48	; 0x30
 8008e48:	0003      	movs	r3, r0
 8008e4a:	2a09      	cmp	r2, #9
 8008e4c:	d802      	bhi.n	8008e54 <__hexdig_fun+0x10>
 8008e4e:	3b20      	subs	r3, #32
 8008e50:	b2d8      	uxtb	r0, r3
 8008e52:	4770      	bx	lr
 8008e54:	0002      	movs	r2, r0
 8008e56:	3a61      	subs	r2, #97	; 0x61
 8008e58:	2a05      	cmp	r2, #5
 8008e5a:	d801      	bhi.n	8008e60 <__hexdig_fun+0x1c>
 8008e5c:	3b47      	subs	r3, #71	; 0x47
 8008e5e:	e7f7      	b.n	8008e50 <__hexdig_fun+0xc>
 8008e60:	001a      	movs	r2, r3
 8008e62:	3a41      	subs	r2, #65	; 0x41
 8008e64:	2000      	movs	r0, #0
 8008e66:	2a05      	cmp	r2, #5
 8008e68:	d8f3      	bhi.n	8008e52 <__hexdig_fun+0xe>
 8008e6a:	3b27      	subs	r3, #39	; 0x27
 8008e6c:	e7f0      	b.n	8008e50 <__hexdig_fun+0xc>
	...

08008e70 <__gethex>:
 8008e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e72:	b08d      	sub	sp, #52	; 0x34
 8008e74:	930a      	str	r3, [sp, #40]	; 0x28
 8008e76:	4bbf      	ldr	r3, [pc, #764]	; (8009174 <__gethex+0x304>)
 8008e78:	9005      	str	r0, [sp, #20]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	9109      	str	r1, [sp, #36]	; 0x24
 8008e7e:	0018      	movs	r0, r3
 8008e80:	9202      	str	r2, [sp, #8]
 8008e82:	9307      	str	r3, [sp, #28]
 8008e84:	f7f7 f940 	bl	8000108 <strlen>
 8008e88:	2202      	movs	r2, #2
 8008e8a:	9b07      	ldr	r3, [sp, #28]
 8008e8c:	4252      	negs	r2, r2
 8008e8e:	181b      	adds	r3, r3, r0
 8008e90:	3b01      	subs	r3, #1
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	9003      	str	r0, [sp, #12]
 8008e96:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e9a:	6819      	ldr	r1, [r3, #0]
 8008e9c:	1c8b      	adds	r3, r1, #2
 8008e9e:	1a52      	subs	r2, r2, r1
 8008ea0:	18d1      	adds	r1, r2, r3
 8008ea2:	9301      	str	r3, [sp, #4]
 8008ea4:	9108      	str	r1, [sp, #32]
 8008ea6:	9901      	ldr	r1, [sp, #4]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	7808      	ldrb	r0, [r1, #0]
 8008eac:	2830      	cmp	r0, #48	; 0x30
 8008eae:	d0f7      	beq.n	8008ea0 <__gethex+0x30>
 8008eb0:	f7ff ffc8 	bl	8008e44 <__hexdig_fun>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	001c      	movs	r4, r3
 8008eb8:	9304      	str	r3, [sp, #16]
 8008eba:	4298      	cmp	r0, r3
 8008ebc:	d11f      	bne.n	8008efe <__gethex+0x8e>
 8008ebe:	9a03      	ldr	r2, [sp, #12]
 8008ec0:	9907      	ldr	r1, [sp, #28]
 8008ec2:	9801      	ldr	r0, [sp, #4]
 8008ec4:	f001 fa64 	bl	800a390 <strncmp>
 8008ec8:	0007      	movs	r7, r0
 8008eca:	42a0      	cmp	r0, r4
 8008ecc:	d000      	beq.n	8008ed0 <__gethex+0x60>
 8008ece:	e06b      	b.n	8008fa8 <__gethex+0x138>
 8008ed0:	9b01      	ldr	r3, [sp, #4]
 8008ed2:	9a03      	ldr	r2, [sp, #12]
 8008ed4:	5c98      	ldrb	r0, [r3, r2]
 8008ed6:	189d      	adds	r5, r3, r2
 8008ed8:	f7ff ffb4 	bl	8008e44 <__hexdig_fun>
 8008edc:	2301      	movs	r3, #1
 8008ede:	9304      	str	r3, [sp, #16]
 8008ee0:	42a0      	cmp	r0, r4
 8008ee2:	d030      	beq.n	8008f46 <__gethex+0xd6>
 8008ee4:	9501      	str	r5, [sp, #4]
 8008ee6:	9b01      	ldr	r3, [sp, #4]
 8008ee8:	7818      	ldrb	r0, [r3, #0]
 8008eea:	2830      	cmp	r0, #48	; 0x30
 8008eec:	d009      	beq.n	8008f02 <__gethex+0x92>
 8008eee:	f7ff ffa9 	bl	8008e44 <__hexdig_fun>
 8008ef2:	4242      	negs	r2, r0
 8008ef4:	4142      	adcs	r2, r0
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	002c      	movs	r4, r5
 8008efa:	9204      	str	r2, [sp, #16]
 8008efc:	9308      	str	r3, [sp, #32]
 8008efe:	9d01      	ldr	r5, [sp, #4]
 8008f00:	e004      	b.n	8008f0c <__gethex+0x9c>
 8008f02:	9b01      	ldr	r3, [sp, #4]
 8008f04:	3301      	adds	r3, #1
 8008f06:	9301      	str	r3, [sp, #4]
 8008f08:	e7ed      	b.n	8008ee6 <__gethex+0x76>
 8008f0a:	3501      	adds	r5, #1
 8008f0c:	7828      	ldrb	r0, [r5, #0]
 8008f0e:	f7ff ff99 	bl	8008e44 <__hexdig_fun>
 8008f12:	1e07      	subs	r7, r0, #0
 8008f14:	d1f9      	bne.n	8008f0a <__gethex+0x9a>
 8008f16:	0028      	movs	r0, r5
 8008f18:	9a03      	ldr	r2, [sp, #12]
 8008f1a:	9907      	ldr	r1, [sp, #28]
 8008f1c:	f001 fa38 	bl	800a390 <strncmp>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d10e      	bne.n	8008f42 <__gethex+0xd2>
 8008f24:	2c00      	cmp	r4, #0
 8008f26:	d107      	bne.n	8008f38 <__gethex+0xc8>
 8008f28:	9b03      	ldr	r3, [sp, #12]
 8008f2a:	18ed      	adds	r5, r5, r3
 8008f2c:	002c      	movs	r4, r5
 8008f2e:	7828      	ldrb	r0, [r5, #0]
 8008f30:	f7ff ff88 	bl	8008e44 <__hexdig_fun>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d102      	bne.n	8008f3e <__gethex+0xce>
 8008f38:	1b64      	subs	r4, r4, r5
 8008f3a:	00a7      	lsls	r7, r4, #2
 8008f3c:	e003      	b.n	8008f46 <__gethex+0xd6>
 8008f3e:	3501      	adds	r5, #1
 8008f40:	e7f5      	b.n	8008f2e <__gethex+0xbe>
 8008f42:	2c00      	cmp	r4, #0
 8008f44:	d1f8      	bne.n	8008f38 <__gethex+0xc8>
 8008f46:	2220      	movs	r2, #32
 8008f48:	782b      	ldrb	r3, [r5, #0]
 8008f4a:	002e      	movs	r6, r5
 8008f4c:	4393      	bics	r3, r2
 8008f4e:	2b50      	cmp	r3, #80	; 0x50
 8008f50:	d11d      	bne.n	8008f8e <__gethex+0x11e>
 8008f52:	786b      	ldrb	r3, [r5, #1]
 8008f54:	2b2b      	cmp	r3, #43	; 0x2b
 8008f56:	d02c      	beq.n	8008fb2 <__gethex+0x142>
 8008f58:	2b2d      	cmp	r3, #45	; 0x2d
 8008f5a:	d02e      	beq.n	8008fba <__gethex+0x14a>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	1c6e      	adds	r6, r5, #1
 8008f60:	9306      	str	r3, [sp, #24]
 8008f62:	7830      	ldrb	r0, [r6, #0]
 8008f64:	f7ff ff6e 	bl	8008e44 <__hexdig_fun>
 8008f68:	1e43      	subs	r3, r0, #1
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b18      	cmp	r3, #24
 8008f6e:	d82b      	bhi.n	8008fc8 <__gethex+0x158>
 8008f70:	3810      	subs	r0, #16
 8008f72:	0004      	movs	r4, r0
 8008f74:	7870      	ldrb	r0, [r6, #1]
 8008f76:	f7ff ff65 	bl	8008e44 <__hexdig_fun>
 8008f7a:	1e43      	subs	r3, r0, #1
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	3601      	adds	r6, #1
 8008f80:	2b18      	cmp	r3, #24
 8008f82:	d91c      	bls.n	8008fbe <__gethex+0x14e>
 8008f84:	9b06      	ldr	r3, [sp, #24]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d000      	beq.n	8008f8c <__gethex+0x11c>
 8008f8a:	4264      	negs	r4, r4
 8008f8c:	193f      	adds	r7, r7, r4
 8008f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f90:	601e      	str	r6, [r3, #0]
 8008f92:	9b04      	ldr	r3, [sp, #16]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d019      	beq.n	8008fcc <__gethex+0x15c>
 8008f98:	2600      	movs	r6, #0
 8008f9a:	9b08      	ldr	r3, [sp, #32]
 8008f9c:	42b3      	cmp	r3, r6
 8008f9e:	d100      	bne.n	8008fa2 <__gethex+0x132>
 8008fa0:	3606      	adds	r6, #6
 8008fa2:	0030      	movs	r0, r6
 8008fa4:	b00d      	add	sp, #52	; 0x34
 8008fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fa8:	2301      	movs	r3, #1
 8008faa:	2700      	movs	r7, #0
 8008fac:	9d01      	ldr	r5, [sp, #4]
 8008fae:	9304      	str	r3, [sp, #16]
 8008fb0:	e7c9      	b.n	8008f46 <__gethex+0xd6>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	9306      	str	r3, [sp, #24]
 8008fb6:	1cae      	adds	r6, r5, #2
 8008fb8:	e7d3      	b.n	8008f62 <__gethex+0xf2>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e7fa      	b.n	8008fb4 <__gethex+0x144>
 8008fbe:	230a      	movs	r3, #10
 8008fc0:	435c      	muls	r4, r3
 8008fc2:	1824      	adds	r4, r4, r0
 8008fc4:	3c10      	subs	r4, #16
 8008fc6:	e7d5      	b.n	8008f74 <__gethex+0x104>
 8008fc8:	002e      	movs	r6, r5
 8008fca:	e7e0      	b.n	8008f8e <__gethex+0x11e>
 8008fcc:	9b01      	ldr	r3, [sp, #4]
 8008fce:	9904      	ldr	r1, [sp, #16]
 8008fd0:	1aeb      	subs	r3, r5, r3
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	2b07      	cmp	r3, #7
 8008fd6:	dc0a      	bgt.n	8008fee <__gethex+0x17e>
 8008fd8:	9805      	ldr	r0, [sp, #20]
 8008fda:	f000 fa87 	bl	80094ec <_Balloc>
 8008fde:	1e04      	subs	r4, r0, #0
 8008fe0:	d108      	bne.n	8008ff4 <__gethex+0x184>
 8008fe2:	0002      	movs	r2, r0
 8008fe4:	21de      	movs	r1, #222	; 0xde
 8008fe6:	4b64      	ldr	r3, [pc, #400]	; (8009178 <__gethex+0x308>)
 8008fe8:	4864      	ldr	r0, [pc, #400]	; (800917c <__gethex+0x30c>)
 8008fea:	f001 f9f1 	bl	800a3d0 <__assert_func>
 8008fee:	3101      	adds	r1, #1
 8008ff0:	105b      	asrs	r3, r3, #1
 8008ff2:	e7ef      	b.n	8008fd4 <__gethex+0x164>
 8008ff4:	0003      	movs	r3, r0
 8008ff6:	3314      	adds	r3, #20
 8008ff8:	9304      	str	r3, [sp, #16]
 8008ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	001e      	movs	r6, r3
 8009000:	9306      	str	r3, [sp, #24]
 8009002:	9b01      	ldr	r3, [sp, #4]
 8009004:	42ab      	cmp	r3, r5
 8009006:	d340      	bcc.n	800908a <__gethex+0x21a>
 8009008:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800900a:	9b04      	ldr	r3, [sp, #16]
 800900c:	c540      	stmia	r5!, {r6}
 800900e:	1aed      	subs	r5, r5, r3
 8009010:	10ad      	asrs	r5, r5, #2
 8009012:	0030      	movs	r0, r6
 8009014:	6125      	str	r5, [r4, #16]
 8009016:	f000 fb61 	bl	80096dc <__hi0bits>
 800901a:	9b02      	ldr	r3, [sp, #8]
 800901c:	016d      	lsls	r5, r5, #5
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	1a2e      	subs	r6, r5, r0
 8009022:	9301      	str	r3, [sp, #4]
 8009024:	429e      	cmp	r6, r3
 8009026:	dd5a      	ble.n	80090de <__gethex+0x26e>
 8009028:	1af6      	subs	r6, r6, r3
 800902a:	0031      	movs	r1, r6
 800902c:	0020      	movs	r0, r4
 800902e:	f000 ff03 	bl	8009e38 <__any_on>
 8009032:	1e05      	subs	r5, r0, #0
 8009034:	d016      	beq.n	8009064 <__gethex+0x1f4>
 8009036:	2501      	movs	r5, #1
 8009038:	211f      	movs	r1, #31
 800903a:	0028      	movs	r0, r5
 800903c:	1e73      	subs	r3, r6, #1
 800903e:	4019      	ands	r1, r3
 8009040:	4088      	lsls	r0, r1
 8009042:	0001      	movs	r1, r0
 8009044:	115a      	asrs	r2, r3, #5
 8009046:	9804      	ldr	r0, [sp, #16]
 8009048:	0092      	lsls	r2, r2, #2
 800904a:	5812      	ldr	r2, [r2, r0]
 800904c:	420a      	tst	r2, r1
 800904e:	d009      	beq.n	8009064 <__gethex+0x1f4>
 8009050:	42ab      	cmp	r3, r5
 8009052:	dd06      	ble.n	8009062 <__gethex+0x1f2>
 8009054:	0020      	movs	r0, r4
 8009056:	1eb1      	subs	r1, r6, #2
 8009058:	f000 feee 	bl	8009e38 <__any_on>
 800905c:	3502      	adds	r5, #2
 800905e:	2800      	cmp	r0, #0
 8009060:	d100      	bne.n	8009064 <__gethex+0x1f4>
 8009062:	2502      	movs	r5, #2
 8009064:	0031      	movs	r1, r6
 8009066:	0020      	movs	r0, r4
 8009068:	f7ff fe98 	bl	8008d9c <rshift>
 800906c:	19bf      	adds	r7, r7, r6
 800906e:	9b02      	ldr	r3, [sp, #8]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	9303      	str	r3, [sp, #12]
 8009074:	42bb      	cmp	r3, r7
 8009076:	da42      	bge.n	80090fe <__gethex+0x28e>
 8009078:	0021      	movs	r1, r4
 800907a:	9805      	ldr	r0, [sp, #20]
 800907c:	f000 fa7a 	bl	8009574 <_Bfree>
 8009080:	2300      	movs	r3, #0
 8009082:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009084:	26a3      	movs	r6, #163	; 0xa3
 8009086:	6013      	str	r3, [r2, #0]
 8009088:	e78b      	b.n	8008fa2 <__gethex+0x132>
 800908a:	1e6b      	subs	r3, r5, #1
 800908c:	9308      	str	r3, [sp, #32]
 800908e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	4293      	cmp	r3, r2
 8009094:	d014      	beq.n	80090c0 <__gethex+0x250>
 8009096:	9b06      	ldr	r3, [sp, #24]
 8009098:	2b20      	cmp	r3, #32
 800909a:	d104      	bne.n	80090a6 <__gethex+0x236>
 800909c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800909e:	c340      	stmia	r3!, {r6}
 80090a0:	2600      	movs	r6, #0
 80090a2:	9309      	str	r3, [sp, #36]	; 0x24
 80090a4:	9606      	str	r6, [sp, #24]
 80090a6:	9b08      	ldr	r3, [sp, #32]
 80090a8:	7818      	ldrb	r0, [r3, #0]
 80090aa:	f7ff fecb 	bl	8008e44 <__hexdig_fun>
 80090ae:	230f      	movs	r3, #15
 80090b0:	4018      	ands	r0, r3
 80090b2:	9b06      	ldr	r3, [sp, #24]
 80090b4:	9d08      	ldr	r5, [sp, #32]
 80090b6:	4098      	lsls	r0, r3
 80090b8:	3304      	adds	r3, #4
 80090ba:	4306      	orrs	r6, r0
 80090bc:	9306      	str	r3, [sp, #24]
 80090be:	e7a0      	b.n	8009002 <__gethex+0x192>
 80090c0:	2301      	movs	r3, #1
 80090c2:	9a03      	ldr	r2, [sp, #12]
 80090c4:	1a9d      	subs	r5, r3, r2
 80090c6:	9b08      	ldr	r3, [sp, #32]
 80090c8:	195d      	adds	r5, r3, r5
 80090ca:	9b01      	ldr	r3, [sp, #4]
 80090cc:	429d      	cmp	r5, r3
 80090ce:	d3e2      	bcc.n	8009096 <__gethex+0x226>
 80090d0:	0028      	movs	r0, r5
 80090d2:	9907      	ldr	r1, [sp, #28]
 80090d4:	f001 f95c 	bl	800a390 <strncmp>
 80090d8:	2800      	cmp	r0, #0
 80090da:	d1dc      	bne.n	8009096 <__gethex+0x226>
 80090dc:	e791      	b.n	8009002 <__gethex+0x192>
 80090de:	9b01      	ldr	r3, [sp, #4]
 80090e0:	2500      	movs	r5, #0
 80090e2:	429e      	cmp	r6, r3
 80090e4:	dac3      	bge.n	800906e <__gethex+0x1fe>
 80090e6:	1b9e      	subs	r6, r3, r6
 80090e8:	0021      	movs	r1, r4
 80090ea:	0032      	movs	r2, r6
 80090ec:	9805      	ldr	r0, [sp, #20]
 80090ee:	f000 fc5f 	bl	80099b0 <__lshift>
 80090f2:	0003      	movs	r3, r0
 80090f4:	3314      	adds	r3, #20
 80090f6:	0004      	movs	r4, r0
 80090f8:	1bbf      	subs	r7, r7, r6
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	e7b7      	b.n	800906e <__gethex+0x1fe>
 80090fe:	9b02      	ldr	r3, [sp, #8]
 8009100:	685e      	ldr	r6, [r3, #4]
 8009102:	42be      	cmp	r6, r7
 8009104:	dd71      	ble.n	80091ea <__gethex+0x37a>
 8009106:	9b01      	ldr	r3, [sp, #4]
 8009108:	1bf6      	subs	r6, r6, r7
 800910a:	42b3      	cmp	r3, r6
 800910c:	dc38      	bgt.n	8009180 <__gethex+0x310>
 800910e:	9b02      	ldr	r3, [sp, #8]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	2b02      	cmp	r3, #2
 8009114:	d026      	beq.n	8009164 <__gethex+0x2f4>
 8009116:	2b03      	cmp	r3, #3
 8009118:	d028      	beq.n	800916c <__gethex+0x2fc>
 800911a:	2b01      	cmp	r3, #1
 800911c:	d119      	bne.n	8009152 <__gethex+0x2e2>
 800911e:	9b01      	ldr	r3, [sp, #4]
 8009120:	42b3      	cmp	r3, r6
 8009122:	d116      	bne.n	8009152 <__gethex+0x2e2>
 8009124:	2b01      	cmp	r3, #1
 8009126:	d10d      	bne.n	8009144 <__gethex+0x2d4>
 8009128:	9b02      	ldr	r3, [sp, #8]
 800912a:	2662      	movs	r6, #98	; 0x62
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	9301      	str	r3, [sp, #4]
 8009130:	9a01      	ldr	r2, [sp, #4]
 8009132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	2301      	movs	r3, #1
 8009138:	9a04      	ldr	r2, [sp, #16]
 800913a:	6123      	str	r3, [r4, #16]
 800913c:	6013      	str	r3, [r2, #0]
 800913e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009140:	601c      	str	r4, [r3, #0]
 8009142:	e72e      	b.n	8008fa2 <__gethex+0x132>
 8009144:	9901      	ldr	r1, [sp, #4]
 8009146:	0020      	movs	r0, r4
 8009148:	3901      	subs	r1, #1
 800914a:	f000 fe75 	bl	8009e38 <__any_on>
 800914e:	2800      	cmp	r0, #0
 8009150:	d1ea      	bne.n	8009128 <__gethex+0x2b8>
 8009152:	0021      	movs	r1, r4
 8009154:	9805      	ldr	r0, [sp, #20]
 8009156:	f000 fa0d 	bl	8009574 <_Bfree>
 800915a:	2300      	movs	r3, #0
 800915c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800915e:	2650      	movs	r6, #80	; 0x50
 8009160:	6013      	str	r3, [r2, #0]
 8009162:	e71e      	b.n	8008fa2 <__gethex+0x132>
 8009164:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1f3      	bne.n	8009152 <__gethex+0x2e2>
 800916a:	e7dd      	b.n	8009128 <__gethex+0x2b8>
 800916c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1da      	bne.n	8009128 <__gethex+0x2b8>
 8009172:	e7ee      	b.n	8009152 <__gethex+0x2e2>
 8009174:	0800b3d0 	.word	0x0800b3d0
 8009178:	0800b358 	.word	0x0800b358
 800917c:	0800b369 	.word	0x0800b369
 8009180:	1e77      	subs	r7, r6, #1
 8009182:	2d00      	cmp	r5, #0
 8009184:	d12f      	bne.n	80091e6 <__gethex+0x376>
 8009186:	2f00      	cmp	r7, #0
 8009188:	d004      	beq.n	8009194 <__gethex+0x324>
 800918a:	0039      	movs	r1, r7
 800918c:	0020      	movs	r0, r4
 800918e:	f000 fe53 	bl	8009e38 <__any_on>
 8009192:	0005      	movs	r5, r0
 8009194:	231f      	movs	r3, #31
 8009196:	117a      	asrs	r2, r7, #5
 8009198:	401f      	ands	r7, r3
 800919a:	3b1e      	subs	r3, #30
 800919c:	40bb      	lsls	r3, r7
 800919e:	9904      	ldr	r1, [sp, #16]
 80091a0:	0092      	lsls	r2, r2, #2
 80091a2:	5852      	ldr	r2, [r2, r1]
 80091a4:	421a      	tst	r2, r3
 80091a6:	d001      	beq.n	80091ac <__gethex+0x33c>
 80091a8:	2302      	movs	r3, #2
 80091aa:	431d      	orrs	r5, r3
 80091ac:	9b01      	ldr	r3, [sp, #4]
 80091ae:	0031      	movs	r1, r6
 80091b0:	1b9b      	subs	r3, r3, r6
 80091b2:	2602      	movs	r6, #2
 80091b4:	0020      	movs	r0, r4
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	f7ff fdf0 	bl	8008d9c <rshift>
 80091bc:	9b02      	ldr	r3, [sp, #8]
 80091be:	685f      	ldr	r7, [r3, #4]
 80091c0:	2d00      	cmp	r5, #0
 80091c2:	d041      	beq.n	8009248 <__gethex+0x3d8>
 80091c4:	9b02      	ldr	r3, [sp, #8]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d010      	beq.n	80091ee <__gethex+0x37e>
 80091cc:	2b03      	cmp	r3, #3
 80091ce:	d012      	beq.n	80091f6 <__gethex+0x386>
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d106      	bne.n	80091e2 <__gethex+0x372>
 80091d4:	07aa      	lsls	r2, r5, #30
 80091d6:	d504      	bpl.n	80091e2 <__gethex+0x372>
 80091d8:	9a04      	ldr	r2, [sp, #16]
 80091da:	6810      	ldr	r0, [r2, #0]
 80091dc:	4305      	orrs	r5, r0
 80091de:	421d      	tst	r5, r3
 80091e0:	d10c      	bne.n	80091fc <__gethex+0x38c>
 80091e2:	2310      	movs	r3, #16
 80091e4:	e02f      	b.n	8009246 <__gethex+0x3d6>
 80091e6:	2501      	movs	r5, #1
 80091e8:	e7d4      	b.n	8009194 <__gethex+0x324>
 80091ea:	2601      	movs	r6, #1
 80091ec:	e7e8      	b.n	80091c0 <__gethex+0x350>
 80091ee:	2301      	movs	r3, #1
 80091f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80091f2:	1a9b      	subs	r3, r3, r2
 80091f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80091f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0f2      	beq.n	80091e2 <__gethex+0x372>
 80091fc:	6923      	ldr	r3, [r4, #16]
 80091fe:	2000      	movs	r0, #0
 8009200:	9303      	str	r3, [sp, #12]
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	9304      	str	r3, [sp, #16]
 8009206:	0023      	movs	r3, r4
 8009208:	9a04      	ldr	r2, [sp, #16]
 800920a:	3314      	adds	r3, #20
 800920c:	1899      	adds	r1, r3, r2
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	1c55      	adds	r5, r2, #1
 8009212:	d01e      	beq.n	8009252 <__gethex+0x3e2>
 8009214:	3201      	adds	r2, #1
 8009216:	601a      	str	r2, [r3, #0]
 8009218:	0023      	movs	r3, r4
 800921a:	3314      	adds	r3, #20
 800921c:	2e02      	cmp	r6, #2
 800921e:	d140      	bne.n	80092a2 <__gethex+0x432>
 8009220:	9a02      	ldr	r2, [sp, #8]
 8009222:	9901      	ldr	r1, [sp, #4]
 8009224:	6812      	ldr	r2, [r2, #0]
 8009226:	3a01      	subs	r2, #1
 8009228:	428a      	cmp	r2, r1
 800922a:	d10b      	bne.n	8009244 <__gethex+0x3d4>
 800922c:	114a      	asrs	r2, r1, #5
 800922e:	211f      	movs	r1, #31
 8009230:	9801      	ldr	r0, [sp, #4]
 8009232:	0092      	lsls	r2, r2, #2
 8009234:	4001      	ands	r1, r0
 8009236:	2001      	movs	r0, #1
 8009238:	0005      	movs	r5, r0
 800923a:	408d      	lsls	r5, r1
 800923c:	58d3      	ldr	r3, [r2, r3]
 800923e:	422b      	tst	r3, r5
 8009240:	d000      	beq.n	8009244 <__gethex+0x3d4>
 8009242:	2601      	movs	r6, #1
 8009244:	2320      	movs	r3, #32
 8009246:	431e      	orrs	r6, r3
 8009248:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800924a:	601c      	str	r4, [r3, #0]
 800924c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800924e:	601f      	str	r7, [r3, #0]
 8009250:	e6a7      	b.n	8008fa2 <__gethex+0x132>
 8009252:	c301      	stmia	r3!, {r0}
 8009254:	4299      	cmp	r1, r3
 8009256:	d8da      	bhi.n	800920e <__gethex+0x39e>
 8009258:	9b03      	ldr	r3, [sp, #12]
 800925a:	68a2      	ldr	r2, [r4, #8]
 800925c:	4293      	cmp	r3, r2
 800925e:	db17      	blt.n	8009290 <__gethex+0x420>
 8009260:	6863      	ldr	r3, [r4, #4]
 8009262:	9805      	ldr	r0, [sp, #20]
 8009264:	1c59      	adds	r1, r3, #1
 8009266:	f000 f941 	bl	80094ec <_Balloc>
 800926a:	1e05      	subs	r5, r0, #0
 800926c:	d103      	bne.n	8009276 <__gethex+0x406>
 800926e:	0002      	movs	r2, r0
 8009270:	2184      	movs	r1, #132	; 0x84
 8009272:	4b1c      	ldr	r3, [pc, #112]	; (80092e4 <__gethex+0x474>)
 8009274:	e6b8      	b.n	8008fe8 <__gethex+0x178>
 8009276:	0021      	movs	r1, r4
 8009278:	6923      	ldr	r3, [r4, #16]
 800927a:	310c      	adds	r1, #12
 800927c:	1c9a      	adds	r2, r3, #2
 800927e:	0092      	lsls	r2, r2, #2
 8009280:	300c      	adds	r0, #12
 8009282:	f000 f92a 	bl	80094da <memcpy>
 8009286:	0021      	movs	r1, r4
 8009288:	9805      	ldr	r0, [sp, #20]
 800928a:	f000 f973 	bl	8009574 <_Bfree>
 800928e:	002c      	movs	r4, r5
 8009290:	6923      	ldr	r3, [r4, #16]
 8009292:	1c5a      	adds	r2, r3, #1
 8009294:	6122      	str	r2, [r4, #16]
 8009296:	2201      	movs	r2, #1
 8009298:	3304      	adds	r3, #4
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	18e3      	adds	r3, r4, r3
 800929e:	605a      	str	r2, [r3, #4]
 80092a0:	e7ba      	b.n	8009218 <__gethex+0x3a8>
 80092a2:	6922      	ldr	r2, [r4, #16]
 80092a4:	9903      	ldr	r1, [sp, #12]
 80092a6:	428a      	cmp	r2, r1
 80092a8:	dd09      	ble.n	80092be <__gethex+0x44e>
 80092aa:	2101      	movs	r1, #1
 80092ac:	0020      	movs	r0, r4
 80092ae:	f7ff fd75 	bl	8008d9c <rshift>
 80092b2:	9b02      	ldr	r3, [sp, #8]
 80092b4:	3701      	adds	r7, #1
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	42bb      	cmp	r3, r7
 80092ba:	dac2      	bge.n	8009242 <__gethex+0x3d2>
 80092bc:	e6dc      	b.n	8009078 <__gethex+0x208>
 80092be:	221f      	movs	r2, #31
 80092c0:	9d01      	ldr	r5, [sp, #4]
 80092c2:	9901      	ldr	r1, [sp, #4]
 80092c4:	2601      	movs	r6, #1
 80092c6:	4015      	ands	r5, r2
 80092c8:	4211      	tst	r1, r2
 80092ca:	d0bb      	beq.n	8009244 <__gethex+0x3d4>
 80092cc:	9a04      	ldr	r2, [sp, #16]
 80092ce:	189b      	adds	r3, r3, r2
 80092d0:	3b04      	subs	r3, #4
 80092d2:	6818      	ldr	r0, [r3, #0]
 80092d4:	f000 fa02 	bl	80096dc <__hi0bits>
 80092d8:	2320      	movs	r3, #32
 80092da:	1b5d      	subs	r5, r3, r5
 80092dc:	42a8      	cmp	r0, r5
 80092de:	dbe4      	blt.n	80092aa <__gethex+0x43a>
 80092e0:	e7b0      	b.n	8009244 <__gethex+0x3d4>
 80092e2:	46c0      	nop			; (mov r8, r8)
 80092e4:	0800b358 	.word	0x0800b358

080092e8 <L_shift>:
 80092e8:	2308      	movs	r3, #8
 80092ea:	b570      	push	{r4, r5, r6, lr}
 80092ec:	2520      	movs	r5, #32
 80092ee:	1a9a      	subs	r2, r3, r2
 80092f0:	0092      	lsls	r2, r2, #2
 80092f2:	1aad      	subs	r5, r5, r2
 80092f4:	6843      	ldr	r3, [r0, #4]
 80092f6:	6806      	ldr	r6, [r0, #0]
 80092f8:	001c      	movs	r4, r3
 80092fa:	40ac      	lsls	r4, r5
 80092fc:	40d3      	lsrs	r3, r2
 80092fe:	4334      	orrs	r4, r6
 8009300:	6004      	str	r4, [r0, #0]
 8009302:	6043      	str	r3, [r0, #4]
 8009304:	3004      	adds	r0, #4
 8009306:	4288      	cmp	r0, r1
 8009308:	d3f4      	bcc.n	80092f4 <L_shift+0xc>
 800930a:	bd70      	pop	{r4, r5, r6, pc}

0800930c <__match>:
 800930c:	b530      	push	{r4, r5, lr}
 800930e:	6803      	ldr	r3, [r0, #0]
 8009310:	780c      	ldrb	r4, [r1, #0]
 8009312:	3301      	adds	r3, #1
 8009314:	2c00      	cmp	r4, #0
 8009316:	d102      	bne.n	800931e <__match+0x12>
 8009318:	6003      	str	r3, [r0, #0]
 800931a:	2001      	movs	r0, #1
 800931c:	bd30      	pop	{r4, r5, pc}
 800931e:	781a      	ldrb	r2, [r3, #0]
 8009320:	0015      	movs	r5, r2
 8009322:	3d41      	subs	r5, #65	; 0x41
 8009324:	2d19      	cmp	r5, #25
 8009326:	d800      	bhi.n	800932a <__match+0x1e>
 8009328:	3220      	adds	r2, #32
 800932a:	3101      	adds	r1, #1
 800932c:	42a2      	cmp	r2, r4
 800932e:	d0ef      	beq.n	8009310 <__match+0x4>
 8009330:	2000      	movs	r0, #0
 8009332:	e7f3      	b.n	800931c <__match+0x10>

08009334 <__hexnan>:
 8009334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009336:	680b      	ldr	r3, [r1, #0]
 8009338:	b08b      	sub	sp, #44	; 0x2c
 800933a:	9201      	str	r2, [sp, #4]
 800933c:	9901      	ldr	r1, [sp, #4]
 800933e:	115a      	asrs	r2, r3, #5
 8009340:	0092      	lsls	r2, r2, #2
 8009342:	188a      	adds	r2, r1, r2
 8009344:	9202      	str	r2, [sp, #8]
 8009346:	0019      	movs	r1, r3
 8009348:	221f      	movs	r2, #31
 800934a:	4011      	ands	r1, r2
 800934c:	9008      	str	r0, [sp, #32]
 800934e:	9106      	str	r1, [sp, #24]
 8009350:	4213      	tst	r3, r2
 8009352:	d002      	beq.n	800935a <__hexnan+0x26>
 8009354:	9b02      	ldr	r3, [sp, #8]
 8009356:	3304      	adds	r3, #4
 8009358:	9302      	str	r3, [sp, #8]
 800935a:	9b02      	ldr	r3, [sp, #8]
 800935c:	2500      	movs	r5, #0
 800935e:	1f1e      	subs	r6, r3, #4
 8009360:	0037      	movs	r7, r6
 8009362:	0034      	movs	r4, r6
 8009364:	9b08      	ldr	r3, [sp, #32]
 8009366:	6035      	str	r5, [r6, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	9507      	str	r5, [sp, #28]
 800936c:	9305      	str	r3, [sp, #20]
 800936e:	9503      	str	r5, [sp, #12]
 8009370:	9b05      	ldr	r3, [sp, #20]
 8009372:	3301      	adds	r3, #1
 8009374:	9309      	str	r3, [sp, #36]	; 0x24
 8009376:	9b05      	ldr	r3, [sp, #20]
 8009378:	785b      	ldrb	r3, [r3, #1]
 800937a:	9304      	str	r3, [sp, #16]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d028      	beq.n	80093d2 <__hexnan+0x9e>
 8009380:	9804      	ldr	r0, [sp, #16]
 8009382:	f7ff fd5f 	bl	8008e44 <__hexdig_fun>
 8009386:	2800      	cmp	r0, #0
 8009388:	d154      	bne.n	8009434 <__hexnan+0x100>
 800938a:	9b04      	ldr	r3, [sp, #16]
 800938c:	2b20      	cmp	r3, #32
 800938e:	d819      	bhi.n	80093c4 <__hexnan+0x90>
 8009390:	9b03      	ldr	r3, [sp, #12]
 8009392:	9a07      	ldr	r2, [sp, #28]
 8009394:	4293      	cmp	r3, r2
 8009396:	dd12      	ble.n	80093be <__hexnan+0x8a>
 8009398:	42bc      	cmp	r4, r7
 800939a:	d206      	bcs.n	80093aa <__hexnan+0x76>
 800939c:	2d07      	cmp	r5, #7
 800939e:	dc04      	bgt.n	80093aa <__hexnan+0x76>
 80093a0:	002a      	movs	r2, r5
 80093a2:	0039      	movs	r1, r7
 80093a4:	0020      	movs	r0, r4
 80093a6:	f7ff ff9f 	bl	80092e8 <L_shift>
 80093aa:	9b01      	ldr	r3, [sp, #4]
 80093ac:	2508      	movs	r5, #8
 80093ae:	429c      	cmp	r4, r3
 80093b0:	d905      	bls.n	80093be <__hexnan+0x8a>
 80093b2:	1f27      	subs	r7, r4, #4
 80093b4:	2500      	movs	r5, #0
 80093b6:	003c      	movs	r4, r7
 80093b8:	9b03      	ldr	r3, [sp, #12]
 80093ba:	603d      	str	r5, [r7, #0]
 80093bc:	9307      	str	r3, [sp, #28]
 80093be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c0:	9305      	str	r3, [sp, #20]
 80093c2:	e7d5      	b.n	8009370 <__hexnan+0x3c>
 80093c4:	9b04      	ldr	r3, [sp, #16]
 80093c6:	2b29      	cmp	r3, #41	; 0x29
 80093c8:	d159      	bne.n	800947e <__hexnan+0x14a>
 80093ca:	9b05      	ldr	r3, [sp, #20]
 80093cc:	9a08      	ldr	r2, [sp, #32]
 80093ce:	3302      	adds	r3, #2
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	9b03      	ldr	r3, [sp, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d052      	beq.n	800947e <__hexnan+0x14a>
 80093d8:	42bc      	cmp	r4, r7
 80093da:	d206      	bcs.n	80093ea <__hexnan+0xb6>
 80093dc:	2d07      	cmp	r5, #7
 80093de:	dc04      	bgt.n	80093ea <__hexnan+0xb6>
 80093e0:	002a      	movs	r2, r5
 80093e2:	0039      	movs	r1, r7
 80093e4:	0020      	movs	r0, r4
 80093e6:	f7ff ff7f 	bl	80092e8 <L_shift>
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	429c      	cmp	r4, r3
 80093ee:	d935      	bls.n	800945c <__hexnan+0x128>
 80093f0:	001a      	movs	r2, r3
 80093f2:	0023      	movs	r3, r4
 80093f4:	cb02      	ldmia	r3!, {r1}
 80093f6:	c202      	stmia	r2!, {r1}
 80093f8:	429e      	cmp	r6, r3
 80093fa:	d2fb      	bcs.n	80093f4 <__hexnan+0xc0>
 80093fc:	9b02      	ldr	r3, [sp, #8]
 80093fe:	1c61      	adds	r1, r4, #1
 8009400:	1eda      	subs	r2, r3, #3
 8009402:	2304      	movs	r3, #4
 8009404:	4291      	cmp	r1, r2
 8009406:	d805      	bhi.n	8009414 <__hexnan+0xe0>
 8009408:	9b02      	ldr	r3, [sp, #8]
 800940a:	3b04      	subs	r3, #4
 800940c:	1b1b      	subs	r3, r3, r4
 800940e:	089b      	lsrs	r3, r3, #2
 8009410:	3301      	adds	r3, #1
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	9a01      	ldr	r2, [sp, #4]
 8009416:	18d3      	adds	r3, r2, r3
 8009418:	2200      	movs	r2, #0
 800941a:	c304      	stmia	r3!, {r2}
 800941c:	429e      	cmp	r6, r3
 800941e:	d2fc      	bcs.n	800941a <__hexnan+0xe6>
 8009420:	6833      	ldr	r3, [r6, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d104      	bne.n	8009430 <__hexnan+0xfc>
 8009426:	9b01      	ldr	r3, [sp, #4]
 8009428:	429e      	cmp	r6, r3
 800942a:	d126      	bne.n	800947a <__hexnan+0x146>
 800942c:	2301      	movs	r3, #1
 800942e:	6033      	str	r3, [r6, #0]
 8009430:	2005      	movs	r0, #5
 8009432:	e025      	b.n	8009480 <__hexnan+0x14c>
 8009434:	9b03      	ldr	r3, [sp, #12]
 8009436:	3501      	adds	r5, #1
 8009438:	3301      	adds	r3, #1
 800943a:	9303      	str	r3, [sp, #12]
 800943c:	2d08      	cmp	r5, #8
 800943e:	dd06      	ble.n	800944e <__hexnan+0x11a>
 8009440:	9b01      	ldr	r3, [sp, #4]
 8009442:	429c      	cmp	r4, r3
 8009444:	d9bb      	bls.n	80093be <__hexnan+0x8a>
 8009446:	2300      	movs	r3, #0
 8009448:	2501      	movs	r5, #1
 800944a:	3c04      	subs	r4, #4
 800944c:	6023      	str	r3, [r4, #0]
 800944e:	220f      	movs	r2, #15
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	4010      	ands	r0, r2
 8009454:	011b      	lsls	r3, r3, #4
 8009456:	4318      	orrs	r0, r3
 8009458:	6020      	str	r0, [r4, #0]
 800945a:	e7b0      	b.n	80093be <__hexnan+0x8a>
 800945c:	9b06      	ldr	r3, [sp, #24]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d0de      	beq.n	8009420 <__hexnan+0xec>
 8009462:	2120      	movs	r1, #32
 8009464:	9a06      	ldr	r2, [sp, #24]
 8009466:	9b02      	ldr	r3, [sp, #8]
 8009468:	1a89      	subs	r1, r1, r2
 800946a:	2201      	movs	r2, #1
 800946c:	4252      	negs	r2, r2
 800946e:	40ca      	lsrs	r2, r1
 8009470:	3b04      	subs	r3, #4
 8009472:	6819      	ldr	r1, [r3, #0]
 8009474:	400a      	ands	r2, r1
 8009476:	601a      	str	r2, [r3, #0]
 8009478:	e7d2      	b.n	8009420 <__hexnan+0xec>
 800947a:	3e04      	subs	r6, #4
 800947c:	e7d0      	b.n	8009420 <__hexnan+0xec>
 800947e:	2004      	movs	r0, #4
 8009480:	b00b      	add	sp, #44	; 0x2c
 8009482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009484 <_localeconv_r>:
 8009484:	4800      	ldr	r0, [pc, #0]	; (8009488 <_localeconv_r+0x4>)
 8009486:	4770      	bx	lr
 8009488:	20000164 	.word	0x20000164

0800948c <malloc>:
 800948c:	b510      	push	{r4, lr}
 800948e:	4b03      	ldr	r3, [pc, #12]	; (800949c <malloc+0x10>)
 8009490:	0001      	movs	r1, r0
 8009492:	6818      	ldr	r0, [r3, #0]
 8009494:	f000 fd8c 	bl	8009fb0 <_malloc_r>
 8009498:	bd10      	pop	{r4, pc}
 800949a:	46c0      	nop			; (mov r8, r8)
 800949c:	2000000c 	.word	0x2000000c

080094a0 <__ascii_mbtowc>:
 80094a0:	b082      	sub	sp, #8
 80094a2:	2900      	cmp	r1, #0
 80094a4:	d100      	bne.n	80094a8 <__ascii_mbtowc+0x8>
 80094a6:	a901      	add	r1, sp, #4
 80094a8:	1e10      	subs	r0, r2, #0
 80094aa:	d006      	beq.n	80094ba <__ascii_mbtowc+0x1a>
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d006      	beq.n	80094be <__ascii_mbtowc+0x1e>
 80094b0:	7813      	ldrb	r3, [r2, #0]
 80094b2:	600b      	str	r3, [r1, #0]
 80094b4:	7810      	ldrb	r0, [r2, #0]
 80094b6:	1e43      	subs	r3, r0, #1
 80094b8:	4198      	sbcs	r0, r3
 80094ba:	b002      	add	sp, #8
 80094bc:	4770      	bx	lr
 80094be:	2002      	movs	r0, #2
 80094c0:	4240      	negs	r0, r0
 80094c2:	e7fa      	b.n	80094ba <__ascii_mbtowc+0x1a>

080094c4 <memchr>:
 80094c4:	b2c9      	uxtb	r1, r1
 80094c6:	1882      	adds	r2, r0, r2
 80094c8:	4290      	cmp	r0, r2
 80094ca:	d101      	bne.n	80094d0 <memchr+0xc>
 80094cc:	2000      	movs	r0, #0
 80094ce:	4770      	bx	lr
 80094d0:	7803      	ldrb	r3, [r0, #0]
 80094d2:	428b      	cmp	r3, r1
 80094d4:	d0fb      	beq.n	80094ce <memchr+0xa>
 80094d6:	3001      	adds	r0, #1
 80094d8:	e7f6      	b.n	80094c8 <memchr+0x4>

080094da <memcpy>:
 80094da:	2300      	movs	r3, #0
 80094dc:	b510      	push	{r4, lr}
 80094de:	429a      	cmp	r2, r3
 80094e0:	d100      	bne.n	80094e4 <memcpy+0xa>
 80094e2:	bd10      	pop	{r4, pc}
 80094e4:	5ccc      	ldrb	r4, [r1, r3]
 80094e6:	54c4      	strb	r4, [r0, r3]
 80094e8:	3301      	adds	r3, #1
 80094ea:	e7f8      	b.n	80094de <memcpy+0x4>

080094ec <_Balloc>:
 80094ec:	b570      	push	{r4, r5, r6, lr}
 80094ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80094f0:	0006      	movs	r6, r0
 80094f2:	000c      	movs	r4, r1
 80094f4:	2d00      	cmp	r5, #0
 80094f6:	d10e      	bne.n	8009516 <_Balloc+0x2a>
 80094f8:	2010      	movs	r0, #16
 80094fa:	f7ff ffc7 	bl	800948c <malloc>
 80094fe:	1e02      	subs	r2, r0, #0
 8009500:	6270      	str	r0, [r6, #36]	; 0x24
 8009502:	d104      	bne.n	800950e <_Balloc+0x22>
 8009504:	2166      	movs	r1, #102	; 0x66
 8009506:	4b19      	ldr	r3, [pc, #100]	; (800956c <_Balloc+0x80>)
 8009508:	4819      	ldr	r0, [pc, #100]	; (8009570 <_Balloc+0x84>)
 800950a:	f000 ff61 	bl	800a3d0 <__assert_func>
 800950e:	6045      	str	r5, [r0, #4]
 8009510:	6085      	str	r5, [r0, #8]
 8009512:	6005      	str	r5, [r0, #0]
 8009514:	60c5      	str	r5, [r0, #12]
 8009516:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009518:	68eb      	ldr	r3, [r5, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d013      	beq.n	8009546 <_Balloc+0x5a>
 800951e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009520:	00a2      	lsls	r2, r4, #2
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	189b      	adds	r3, r3, r2
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	2800      	cmp	r0, #0
 800952a:	d118      	bne.n	800955e <_Balloc+0x72>
 800952c:	2101      	movs	r1, #1
 800952e:	000d      	movs	r5, r1
 8009530:	40a5      	lsls	r5, r4
 8009532:	1d6a      	adds	r2, r5, #5
 8009534:	0030      	movs	r0, r6
 8009536:	0092      	lsls	r2, r2, #2
 8009538:	f000 fca1 	bl	8009e7e <_calloc_r>
 800953c:	2800      	cmp	r0, #0
 800953e:	d00c      	beq.n	800955a <_Balloc+0x6e>
 8009540:	6044      	str	r4, [r0, #4]
 8009542:	6085      	str	r5, [r0, #8]
 8009544:	e00d      	b.n	8009562 <_Balloc+0x76>
 8009546:	2221      	movs	r2, #33	; 0x21
 8009548:	2104      	movs	r1, #4
 800954a:	0030      	movs	r0, r6
 800954c:	f000 fc97 	bl	8009e7e <_calloc_r>
 8009550:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009552:	60e8      	str	r0, [r5, #12]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1e1      	bne.n	800951e <_Balloc+0x32>
 800955a:	2000      	movs	r0, #0
 800955c:	bd70      	pop	{r4, r5, r6, pc}
 800955e:	6802      	ldr	r2, [r0, #0]
 8009560:	601a      	str	r2, [r3, #0]
 8009562:	2300      	movs	r3, #0
 8009564:	6103      	str	r3, [r0, #16]
 8009566:	60c3      	str	r3, [r0, #12]
 8009568:	e7f8      	b.n	800955c <_Balloc+0x70>
 800956a:	46c0      	nop			; (mov r8, r8)
 800956c:	0800b2e6 	.word	0x0800b2e6
 8009570:	0800b3e4 	.word	0x0800b3e4

08009574 <_Bfree>:
 8009574:	b570      	push	{r4, r5, r6, lr}
 8009576:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009578:	0005      	movs	r5, r0
 800957a:	000c      	movs	r4, r1
 800957c:	2e00      	cmp	r6, #0
 800957e:	d10e      	bne.n	800959e <_Bfree+0x2a>
 8009580:	2010      	movs	r0, #16
 8009582:	f7ff ff83 	bl	800948c <malloc>
 8009586:	1e02      	subs	r2, r0, #0
 8009588:	6268      	str	r0, [r5, #36]	; 0x24
 800958a:	d104      	bne.n	8009596 <_Bfree+0x22>
 800958c:	218a      	movs	r1, #138	; 0x8a
 800958e:	4b09      	ldr	r3, [pc, #36]	; (80095b4 <_Bfree+0x40>)
 8009590:	4809      	ldr	r0, [pc, #36]	; (80095b8 <_Bfree+0x44>)
 8009592:	f000 ff1d 	bl	800a3d0 <__assert_func>
 8009596:	6046      	str	r6, [r0, #4]
 8009598:	6086      	str	r6, [r0, #8]
 800959a:	6006      	str	r6, [r0, #0]
 800959c:	60c6      	str	r6, [r0, #12]
 800959e:	2c00      	cmp	r4, #0
 80095a0:	d007      	beq.n	80095b2 <_Bfree+0x3e>
 80095a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80095a4:	6862      	ldr	r2, [r4, #4]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	0092      	lsls	r2, r2, #2
 80095aa:	189b      	adds	r3, r3, r2
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	6022      	str	r2, [r4, #0]
 80095b0:	601c      	str	r4, [r3, #0]
 80095b2:	bd70      	pop	{r4, r5, r6, pc}
 80095b4:	0800b2e6 	.word	0x0800b2e6
 80095b8:	0800b3e4 	.word	0x0800b3e4

080095bc <__multadd>:
 80095bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095be:	000e      	movs	r6, r1
 80095c0:	9001      	str	r0, [sp, #4]
 80095c2:	000c      	movs	r4, r1
 80095c4:	001d      	movs	r5, r3
 80095c6:	2000      	movs	r0, #0
 80095c8:	690f      	ldr	r7, [r1, #16]
 80095ca:	3614      	adds	r6, #20
 80095cc:	6833      	ldr	r3, [r6, #0]
 80095ce:	3001      	adds	r0, #1
 80095d0:	b299      	uxth	r1, r3
 80095d2:	4351      	muls	r1, r2
 80095d4:	0c1b      	lsrs	r3, r3, #16
 80095d6:	4353      	muls	r3, r2
 80095d8:	1949      	adds	r1, r1, r5
 80095da:	0c0d      	lsrs	r5, r1, #16
 80095dc:	195b      	adds	r3, r3, r5
 80095de:	0c1d      	lsrs	r5, r3, #16
 80095e0:	b289      	uxth	r1, r1
 80095e2:	041b      	lsls	r3, r3, #16
 80095e4:	185b      	adds	r3, r3, r1
 80095e6:	c608      	stmia	r6!, {r3}
 80095e8:	4287      	cmp	r7, r0
 80095ea:	dcef      	bgt.n	80095cc <__multadd+0x10>
 80095ec:	2d00      	cmp	r5, #0
 80095ee:	d022      	beq.n	8009636 <__multadd+0x7a>
 80095f0:	68a3      	ldr	r3, [r4, #8]
 80095f2:	42bb      	cmp	r3, r7
 80095f4:	dc19      	bgt.n	800962a <__multadd+0x6e>
 80095f6:	6863      	ldr	r3, [r4, #4]
 80095f8:	9801      	ldr	r0, [sp, #4]
 80095fa:	1c59      	adds	r1, r3, #1
 80095fc:	f7ff ff76 	bl	80094ec <_Balloc>
 8009600:	1e06      	subs	r6, r0, #0
 8009602:	d105      	bne.n	8009610 <__multadd+0x54>
 8009604:	0002      	movs	r2, r0
 8009606:	21b5      	movs	r1, #181	; 0xb5
 8009608:	4b0c      	ldr	r3, [pc, #48]	; (800963c <__multadd+0x80>)
 800960a:	480d      	ldr	r0, [pc, #52]	; (8009640 <__multadd+0x84>)
 800960c:	f000 fee0 	bl	800a3d0 <__assert_func>
 8009610:	0021      	movs	r1, r4
 8009612:	6923      	ldr	r3, [r4, #16]
 8009614:	310c      	adds	r1, #12
 8009616:	1c9a      	adds	r2, r3, #2
 8009618:	0092      	lsls	r2, r2, #2
 800961a:	300c      	adds	r0, #12
 800961c:	f7ff ff5d 	bl	80094da <memcpy>
 8009620:	0021      	movs	r1, r4
 8009622:	9801      	ldr	r0, [sp, #4]
 8009624:	f7ff ffa6 	bl	8009574 <_Bfree>
 8009628:	0034      	movs	r4, r6
 800962a:	1d3b      	adds	r3, r7, #4
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	18e3      	adds	r3, r4, r3
 8009630:	605d      	str	r5, [r3, #4]
 8009632:	1c7b      	adds	r3, r7, #1
 8009634:	6123      	str	r3, [r4, #16]
 8009636:	0020      	movs	r0, r4
 8009638:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800963a:	46c0      	nop			; (mov r8, r8)
 800963c:	0800b358 	.word	0x0800b358
 8009640:	0800b3e4 	.word	0x0800b3e4

08009644 <__s2b>:
 8009644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009646:	0006      	movs	r6, r0
 8009648:	0018      	movs	r0, r3
 800964a:	000c      	movs	r4, r1
 800964c:	3008      	adds	r0, #8
 800964e:	2109      	movs	r1, #9
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	0015      	movs	r5, r2
 8009654:	f7f6 fdfe 	bl	8000254 <__divsi3>
 8009658:	2301      	movs	r3, #1
 800965a:	2100      	movs	r1, #0
 800965c:	4283      	cmp	r3, r0
 800965e:	db0a      	blt.n	8009676 <__s2b+0x32>
 8009660:	0030      	movs	r0, r6
 8009662:	f7ff ff43 	bl	80094ec <_Balloc>
 8009666:	1e01      	subs	r1, r0, #0
 8009668:	d108      	bne.n	800967c <__s2b+0x38>
 800966a:	0002      	movs	r2, r0
 800966c:	4b19      	ldr	r3, [pc, #100]	; (80096d4 <__s2b+0x90>)
 800966e:	481a      	ldr	r0, [pc, #104]	; (80096d8 <__s2b+0x94>)
 8009670:	31ce      	adds	r1, #206	; 0xce
 8009672:	f000 fead 	bl	800a3d0 <__assert_func>
 8009676:	005b      	lsls	r3, r3, #1
 8009678:	3101      	adds	r1, #1
 800967a:	e7ef      	b.n	800965c <__s2b+0x18>
 800967c:	9b08      	ldr	r3, [sp, #32]
 800967e:	6143      	str	r3, [r0, #20]
 8009680:	2301      	movs	r3, #1
 8009682:	6103      	str	r3, [r0, #16]
 8009684:	2d09      	cmp	r5, #9
 8009686:	dd18      	ble.n	80096ba <__s2b+0x76>
 8009688:	0023      	movs	r3, r4
 800968a:	3309      	adds	r3, #9
 800968c:	001f      	movs	r7, r3
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	1964      	adds	r4, r4, r5
 8009692:	783b      	ldrb	r3, [r7, #0]
 8009694:	220a      	movs	r2, #10
 8009696:	0030      	movs	r0, r6
 8009698:	3b30      	subs	r3, #48	; 0x30
 800969a:	f7ff ff8f 	bl	80095bc <__multadd>
 800969e:	3701      	adds	r7, #1
 80096a0:	0001      	movs	r1, r0
 80096a2:	42a7      	cmp	r7, r4
 80096a4:	d1f5      	bne.n	8009692 <__s2b+0x4e>
 80096a6:	002c      	movs	r4, r5
 80096a8:	9b00      	ldr	r3, [sp, #0]
 80096aa:	3c08      	subs	r4, #8
 80096ac:	191c      	adds	r4, r3, r4
 80096ae:	002f      	movs	r7, r5
 80096b0:	9b01      	ldr	r3, [sp, #4]
 80096b2:	429f      	cmp	r7, r3
 80096b4:	db04      	blt.n	80096c0 <__s2b+0x7c>
 80096b6:	0008      	movs	r0, r1
 80096b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80096ba:	2509      	movs	r5, #9
 80096bc:	340a      	adds	r4, #10
 80096be:	e7f6      	b.n	80096ae <__s2b+0x6a>
 80096c0:	1b63      	subs	r3, r4, r5
 80096c2:	5ddb      	ldrb	r3, [r3, r7]
 80096c4:	220a      	movs	r2, #10
 80096c6:	0030      	movs	r0, r6
 80096c8:	3b30      	subs	r3, #48	; 0x30
 80096ca:	f7ff ff77 	bl	80095bc <__multadd>
 80096ce:	3701      	adds	r7, #1
 80096d0:	0001      	movs	r1, r0
 80096d2:	e7ed      	b.n	80096b0 <__s2b+0x6c>
 80096d4:	0800b358 	.word	0x0800b358
 80096d8:	0800b3e4 	.word	0x0800b3e4

080096dc <__hi0bits>:
 80096dc:	0003      	movs	r3, r0
 80096de:	0c02      	lsrs	r2, r0, #16
 80096e0:	2000      	movs	r0, #0
 80096e2:	4282      	cmp	r2, r0
 80096e4:	d101      	bne.n	80096ea <__hi0bits+0xe>
 80096e6:	041b      	lsls	r3, r3, #16
 80096e8:	3010      	adds	r0, #16
 80096ea:	0e1a      	lsrs	r2, r3, #24
 80096ec:	d101      	bne.n	80096f2 <__hi0bits+0x16>
 80096ee:	3008      	adds	r0, #8
 80096f0:	021b      	lsls	r3, r3, #8
 80096f2:	0f1a      	lsrs	r2, r3, #28
 80096f4:	d101      	bne.n	80096fa <__hi0bits+0x1e>
 80096f6:	3004      	adds	r0, #4
 80096f8:	011b      	lsls	r3, r3, #4
 80096fa:	0f9a      	lsrs	r2, r3, #30
 80096fc:	d101      	bne.n	8009702 <__hi0bits+0x26>
 80096fe:	3002      	adds	r0, #2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	2b00      	cmp	r3, #0
 8009704:	db03      	blt.n	800970e <__hi0bits+0x32>
 8009706:	3001      	adds	r0, #1
 8009708:	005b      	lsls	r3, r3, #1
 800970a:	d400      	bmi.n	800970e <__hi0bits+0x32>
 800970c:	2020      	movs	r0, #32
 800970e:	4770      	bx	lr

08009710 <__lo0bits>:
 8009710:	6803      	ldr	r3, [r0, #0]
 8009712:	0002      	movs	r2, r0
 8009714:	2107      	movs	r1, #7
 8009716:	0018      	movs	r0, r3
 8009718:	4008      	ands	r0, r1
 800971a:	420b      	tst	r3, r1
 800971c:	d00d      	beq.n	800973a <__lo0bits+0x2a>
 800971e:	3906      	subs	r1, #6
 8009720:	2000      	movs	r0, #0
 8009722:	420b      	tst	r3, r1
 8009724:	d105      	bne.n	8009732 <__lo0bits+0x22>
 8009726:	3002      	adds	r0, #2
 8009728:	4203      	tst	r3, r0
 800972a:	d003      	beq.n	8009734 <__lo0bits+0x24>
 800972c:	40cb      	lsrs	r3, r1
 800972e:	0008      	movs	r0, r1
 8009730:	6013      	str	r3, [r2, #0]
 8009732:	4770      	bx	lr
 8009734:	089b      	lsrs	r3, r3, #2
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	e7fb      	b.n	8009732 <__lo0bits+0x22>
 800973a:	b299      	uxth	r1, r3
 800973c:	2900      	cmp	r1, #0
 800973e:	d101      	bne.n	8009744 <__lo0bits+0x34>
 8009740:	2010      	movs	r0, #16
 8009742:	0c1b      	lsrs	r3, r3, #16
 8009744:	b2d9      	uxtb	r1, r3
 8009746:	2900      	cmp	r1, #0
 8009748:	d101      	bne.n	800974e <__lo0bits+0x3e>
 800974a:	3008      	adds	r0, #8
 800974c:	0a1b      	lsrs	r3, r3, #8
 800974e:	0719      	lsls	r1, r3, #28
 8009750:	d101      	bne.n	8009756 <__lo0bits+0x46>
 8009752:	3004      	adds	r0, #4
 8009754:	091b      	lsrs	r3, r3, #4
 8009756:	0799      	lsls	r1, r3, #30
 8009758:	d101      	bne.n	800975e <__lo0bits+0x4e>
 800975a:	3002      	adds	r0, #2
 800975c:	089b      	lsrs	r3, r3, #2
 800975e:	07d9      	lsls	r1, r3, #31
 8009760:	d4e9      	bmi.n	8009736 <__lo0bits+0x26>
 8009762:	3001      	adds	r0, #1
 8009764:	085b      	lsrs	r3, r3, #1
 8009766:	d1e6      	bne.n	8009736 <__lo0bits+0x26>
 8009768:	2020      	movs	r0, #32
 800976a:	e7e2      	b.n	8009732 <__lo0bits+0x22>

0800976c <__i2b>:
 800976c:	b510      	push	{r4, lr}
 800976e:	000c      	movs	r4, r1
 8009770:	2101      	movs	r1, #1
 8009772:	f7ff febb 	bl	80094ec <_Balloc>
 8009776:	2800      	cmp	r0, #0
 8009778:	d106      	bne.n	8009788 <__i2b+0x1c>
 800977a:	21a0      	movs	r1, #160	; 0xa0
 800977c:	0002      	movs	r2, r0
 800977e:	4b04      	ldr	r3, [pc, #16]	; (8009790 <__i2b+0x24>)
 8009780:	4804      	ldr	r0, [pc, #16]	; (8009794 <__i2b+0x28>)
 8009782:	0049      	lsls	r1, r1, #1
 8009784:	f000 fe24 	bl	800a3d0 <__assert_func>
 8009788:	2301      	movs	r3, #1
 800978a:	6144      	str	r4, [r0, #20]
 800978c:	6103      	str	r3, [r0, #16]
 800978e:	bd10      	pop	{r4, pc}
 8009790:	0800b358 	.word	0x0800b358
 8009794:	0800b3e4 	.word	0x0800b3e4

08009798 <__multiply>:
 8009798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800979a:	690b      	ldr	r3, [r1, #16]
 800979c:	0014      	movs	r4, r2
 800979e:	6912      	ldr	r2, [r2, #16]
 80097a0:	000d      	movs	r5, r1
 80097a2:	b089      	sub	sp, #36	; 0x24
 80097a4:	4293      	cmp	r3, r2
 80097a6:	da01      	bge.n	80097ac <__multiply+0x14>
 80097a8:	0025      	movs	r5, r4
 80097aa:	000c      	movs	r4, r1
 80097ac:	692f      	ldr	r7, [r5, #16]
 80097ae:	6926      	ldr	r6, [r4, #16]
 80097b0:	6869      	ldr	r1, [r5, #4]
 80097b2:	19bb      	adds	r3, r7, r6
 80097b4:	9302      	str	r3, [sp, #8]
 80097b6:	68ab      	ldr	r3, [r5, #8]
 80097b8:	19ba      	adds	r2, r7, r6
 80097ba:	4293      	cmp	r3, r2
 80097bc:	da00      	bge.n	80097c0 <__multiply+0x28>
 80097be:	3101      	adds	r1, #1
 80097c0:	f7ff fe94 	bl	80094ec <_Balloc>
 80097c4:	9001      	str	r0, [sp, #4]
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d106      	bne.n	80097d8 <__multiply+0x40>
 80097ca:	215e      	movs	r1, #94	; 0x5e
 80097cc:	0002      	movs	r2, r0
 80097ce:	4b48      	ldr	r3, [pc, #288]	; (80098f0 <__multiply+0x158>)
 80097d0:	4848      	ldr	r0, [pc, #288]	; (80098f4 <__multiply+0x15c>)
 80097d2:	31ff      	adds	r1, #255	; 0xff
 80097d4:	f000 fdfc 	bl	800a3d0 <__assert_func>
 80097d8:	9b01      	ldr	r3, [sp, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	3314      	adds	r3, #20
 80097de:	469c      	mov	ip, r3
 80097e0:	19bb      	adds	r3, r7, r6
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4463      	add	r3, ip
 80097e6:	9303      	str	r3, [sp, #12]
 80097e8:	4663      	mov	r3, ip
 80097ea:	9903      	ldr	r1, [sp, #12]
 80097ec:	428b      	cmp	r3, r1
 80097ee:	d32c      	bcc.n	800984a <__multiply+0xb2>
 80097f0:	002b      	movs	r3, r5
 80097f2:	0022      	movs	r2, r4
 80097f4:	3314      	adds	r3, #20
 80097f6:	00bf      	lsls	r7, r7, #2
 80097f8:	3214      	adds	r2, #20
 80097fa:	9306      	str	r3, [sp, #24]
 80097fc:	00b6      	lsls	r6, r6, #2
 80097fe:	19db      	adds	r3, r3, r7
 8009800:	9304      	str	r3, [sp, #16]
 8009802:	1993      	adds	r3, r2, r6
 8009804:	9307      	str	r3, [sp, #28]
 8009806:	2304      	movs	r3, #4
 8009808:	9305      	str	r3, [sp, #20]
 800980a:	002b      	movs	r3, r5
 800980c:	9904      	ldr	r1, [sp, #16]
 800980e:	3315      	adds	r3, #21
 8009810:	9200      	str	r2, [sp, #0]
 8009812:	4299      	cmp	r1, r3
 8009814:	d305      	bcc.n	8009822 <__multiply+0x8a>
 8009816:	1b4b      	subs	r3, r1, r5
 8009818:	3b15      	subs	r3, #21
 800981a:	089b      	lsrs	r3, r3, #2
 800981c:	3301      	adds	r3, #1
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	9305      	str	r3, [sp, #20]
 8009822:	9b07      	ldr	r3, [sp, #28]
 8009824:	9a00      	ldr	r2, [sp, #0]
 8009826:	429a      	cmp	r2, r3
 8009828:	d311      	bcc.n	800984e <__multiply+0xb6>
 800982a:	9b02      	ldr	r3, [sp, #8]
 800982c:	2b00      	cmp	r3, #0
 800982e:	dd06      	ble.n	800983e <__multiply+0xa6>
 8009830:	9b03      	ldr	r3, [sp, #12]
 8009832:	3b04      	subs	r3, #4
 8009834:	9303      	str	r3, [sp, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d053      	beq.n	80098e6 <__multiply+0x14e>
 800983e:	9b01      	ldr	r3, [sp, #4]
 8009840:	9a02      	ldr	r2, [sp, #8]
 8009842:	0018      	movs	r0, r3
 8009844:	611a      	str	r2, [r3, #16]
 8009846:	b009      	add	sp, #36	; 0x24
 8009848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800984a:	c304      	stmia	r3!, {r2}
 800984c:	e7cd      	b.n	80097ea <__multiply+0x52>
 800984e:	9b00      	ldr	r3, [sp, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	b298      	uxth	r0, r3
 8009854:	2800      	cmp	r0, #0
 8009856:	d01b      	beq.n	8009890 <__multiply+0xf8>
 8009858:	4667      	mov	r7, ip
 800985a:	2400      	movs	r4, #0
 800985c:	9e06      	ldr	r6, [sp, #24]
 800985e:	ce02      	ldmia	r6!, {r1}
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	b28b      	uxth	r3, r1
 8009864:	4343      	muls	r3, r0
 8009866:	b292      	uxth	r2, r2
 8009868:	189b      	adds	r3, r3, r2
 800986a:	191b      	adds	r3, r3, r4
 800986c:	0c0c      	lsrs	r4, r1, #16
 800986e:	4344      	muls	r4, r0
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	0c11      	lsrs	r1, r2, #16
 8009874:	1861      	adds	r1, r4, r1
 8009876:	0c1c      	lsrs	r4, r3, #16
 8009878:	1909      	adds	r1, r1, r4
 800987a:	0c0c      	lsrs	r4, r1, #16
 800987c:	b29b      	uxth	r3, r3
 800987e:	0409      	lsls	r1, r1, #16
 8009880:	430b      	orrs	r3, r1
 8009882:	c708      	stmia	r7!, {r3}
 8009884:	9b04      	ldr	r3, [sp, #16]
 8009886:	42b3      	cmp	r3, r6
 8009888:	d8e9      	bhi.n	800985e <__multiply+0xc6>
 800988a:	4663      	mov	r3, ip
 800988c:	9a05      	ldr	r2, [sp, #20]
 800988e:	509c      	str	r4, [r3, r2]
 8009890:	9b00      	ldr	r3, [sp, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	0c1e      	lsrs	r6, r3, #16
 8009896:	d020      	beq.n	80098da <__multiply+0x142>
 8009898:	4663      	mov	r3, ip
 800989a:	002c      	movs	r4, r5
 800989c:	4660      	mov	r0, ip
 800989e:	2700      	movs	r7, #0
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3414      	adds	r4, #20
 80098a4:	6822      	ldr	r2, [r4, #0]
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	b291      	uxth	r1, r2
 80098aa:	4371      	muls	r1, r6
 80098ac:	6802      	ldr	r2, [r0, #0]
 80098ae:	0c12      	lsrs	r2, r2, #16
 80098b0:	1889      	adds	r1, r1, r2
 80098b2:	19cf      	adds	r7, r1, r7
 80098b4:	0439      	lsls	r1, r7, #16
 80098b6:	430b      	orrs	r3, r1
 80098b8:	6003      	str	r3, [r0, #0]
 80098ba:	cc02      	ldmia	r4!, {r1}
 80098bc:	6843      	ldr	r3, [r0, #4]
 80098be:	0c09      	lsrs	r1, r1, #16
 80098c0:	4371      	muls	r1, r6
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	0c3f      	lsrs	r7, r7, #16
 80098c6:	18cb      	adds	r3, r1, r3
 80098c8:	9a04      	ldr	r2, [sp, #16]
 80098ca:	19db      	adds	r3, r3, r7
 80098cc:	0c1f      	lsrs	r7, r3, #16
 80098ce:	3004      	adds	r0, #4
 80098d0:	42a2      	cmp	r2, r4
 80098d2:	d8e7      	bhi.n	80098a4 <__multiply+0x10c>
 80098d4:	4662      	mov	r2, ip
 80098d6:	9905      	ldr	r1, [sp, #20]
 80098d8:	5053      	str	r3, [r2, r1]
 80098da:	9b00      	ldr	r3, [sp, #0]
 80098dc:	3304      	adds	r3, #4
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	2304      	movs	r3, #4
 80098e2:	449c      	add	ip, r3
 80098e4:	e79d      	b.n	8009822 <__multiply+0x8a>
 80098e6:	9b02      	ldr	r3, [sp, #8]
 80098e8:	3b01      	subs	r3, #1
 80098ea:	9302      	str	r3, [sp, #8]
 80098ec:	e79d      	b.n	800982a <__multiply+0x92>
 80098ee:	46c0      	nop			; (mov r8, r8)
 80098f0:	0800b358 	.word	0x0800b358
 80098f4:	0800b3e4 	.word	0x0800b3e4

080098f8 <__pow5mult>:
 80098f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098fa:	2303      	movs	r3, #3
 80098fc:	0015      	movs	r5, r2
 80098fe:	0007      	movs	r7, r0
 8009900:	000e      	movs	r6, r1
 8009902:	401a      	ands	r2, r3
 8009904:	421d      	tst	r5, r3
 8009906:	d008      	beq.n	800991a <__pow5mult+0x22>
 8009908:	4925      	ldr	r1, [pc, #148]	; (80099a0 <__pow5mult+0xa8>)
 800990a:	3a01      	subs	r2, #1
 800990c:	0092      	lsls	r2, r2, #2
 800990e:	5852      	ldr	r2, [r2, r1]
 8009910:	2300      	movs	r3, #0
 8009912:	0031      	movs	r1, r6
 8009914:	f7ff fe52 	bl	80095bc <__multadd>
 8009918:	0006      	movs	r6, r0
 800991a:	10ad      	asrs	r5, r5, #2
 800991c:	d03d      	beq.n	800999a <__pow5mult+0xa2>
 800991e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009920:	2c00      	cmp	r4, #0
 8009922:	d10f      	bne.n	8009944 <__pow5mult+0x4c>
 8009924:	2010      	movs	r0, #16
 8009926:	f7ff fdb1 	bl	800948c <malloc>
 800992a:	1e02      	subs	r2, r0, #0
 800992c:	6278      	str	r0, [r7, #36]	; 0x24
 800992e:	d105      	bne.n	800993c <__pow5mult+0x44>
 8009930:	21d7      	movs	r1, #215	; 0xd7
 8009932:	4b1c      	ldr	r3, [pc, #112]	; (80099a4 <__pow5mult+0xac>)
 8009934:	481c      	ldr	r0, [pc, #112]	; (80099a8 <__pow5mult+0xb0>)
 8009936:	0049      	lsls	r1, r1, #1
 8009938:	f000 fd4a 	bl	800a3d0 <__assert_func>
 800993c:	6044      	str	r4, [r0, #4]
 800993e:	6084      	str	r4, [r0, #8]
 8009940:	6004      	str	r4, [r0, #0]
 8009942:	60c4      	str	r4, [r0, #12]
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	689c      	ldr	r4, [r3, #8]
 8009948:	9301      	str	r3, [sp, #4]
 800994a:	2c00      	cmp	r4, #0
 800994c:	d108      	bne.n	8009960 <__pow5mult+0x68>
 800994e:	0038      	movs	r0, r7
 8009950:	4916      	ldr	r1, [pc, #88]	; (80099ac <__pow5mult+0xb4>)
 8009952:	f7ff ff0b 	bl	800976c <__i2b>
 8009956:	9b01      	ldr	r3, [sp, #4]
 8009958:	0004      	movs	r4, r0
 800995a:	6098      	str	r0, [r3, #8]
 800995c:	2300      	movs	r3, #0
 800995e:	6003      	str	r3, [r0, #0]
 8009960:	2301      	movs	r3, #1
 8009962:	421d      	tst	r5, r3
 8009964:	d00a      	beq.n	800997c <__pow5mult+0x84>
 8009966:	0031      	movs	r1, r6
 8009968:	0022      	movs	r2, r4
 800996a:	0038      	movs	r0, r7
 800996c:	f7ff ff14 	bl	8009798 <__multiply>
 8009970:	0031      	movs	r1, r6
 8009972:	9001      	str	r0, [sp, #4]
 8009974:	0038      	movs	r0, r7
 8009976:	f7ff fdfd 	bl	8009574 <_Bfree>
 800997a:	9e01      	ldr	r6, [sp, #4]
 800997c:	106d      	asrs	r5, r5, #1
 800997e:	d00c      	beq.n	800999a <__pow5mult+0xa2>
 8009980:	6820      	ldr	r0, [r4, #0]
 8009982:	2800      	cmp	r0, #0
 8009984:	d107      	bne.n	8009996 <__pow5mult+0x9e>
 8009986:	0022      	movs	r2, r4
 8009988:	0021      	movs	r1, r4
 800998a:	0038      	movs	r0, r7
 800998c:	f7ff ff04 	bl	8009798 <__multiply>
 8009990:	2300      	movs	r3, #0
 8009992:	6020      	str	r0, [r4, #0]
 8009994:	6003      	str	r3, [r0, #0]
 8009996:	0004      	movs	r4, r0
 8009998:	e7e2      	b.n	8009960 <__pow5mult+0x68>
 800999a:	0030      	movs	r0, r6
 800999c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800999e:	46c0      	nop			; (mov r8, r8)
 80099a0:	0800b530 	.word	0x0800b530
 80099a4:	0800b2e6 	.word	0x0800b2e6
 80099a8:	0800b3e4 	.word	0x0800b3e4
 80099ac:	00000271 	.word	0x00000271

080099b0 <__lshift>:
 80099b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099b2:	000c      	movs	r4, r1
 80099b4:	0017      	movs	r7, r2
 80099b6:	6923      	ldr	r3, [r4, #16]
 80099b8:	1155      	asrs	r5, r2, #5
 80099ba:	b087      	sub	sp, #28
 80099bc:	18eb      	adds	r3, r5, r3
 80099be:	9302      	str	r3, [sp, #8]
 80099c0:	3301      	adds	r3, #1
 80099c2:	9301      	str	r3, [sp, #4]
 80099c4:	6849      	ldr	r1, [r1, #4]
 80099c6:	68a3      	ldr	r3, [r4, #8]
 80099c8:	9004      	str	r0, [sp, #16]
 80099ca:	9a01      	ldr	r2, [sp, #4]
 80099cc:	4293      	cmp	r3, r2
 80099ce:	db10      	blt.n	80099f2 <__lshift+0x42>
 80099d0:	9804      	ldr	r0, [sp, #16]
 80099d2:	f7ff fd8b 	bl	80094ec <_Balloc>
 80099d6:	2300      	movs	r3, #0
 80099d8:	0002      	movs	r2, r0
 80099da:	0006      	movs	r6, r0
 80099dc:	0019      	movs	r1, r3
 80099de:	3214      	adds	r2, #20
 80099e0:	4298      	cmp	r0, r3
 80099e2:	d10c      	bne.n	80099fe <__lshift+0x4e>
 80099e4:	21da      	movs	r1, #218	; 0xda
 80099e6:	0002      	movs	r2, r0
 80099e8:	4b26      	ldr	r3, [pc, #152]	; (8009a84 <__lshift+0xd4>)
 80099ea:	4827      	ldr	r0, [pc, #156]	; (8009a88 <__lshift+0xd8>)
 80099ec:	31ff      	adds	r1, #255	; 0xff
 80099ee:	f000 fcef 	bl	800a3d0 <__assert_func>
 80099f2:	3101      	adds	r1, #1
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	e7e8      	b.n	80099ca <__lshift+0x1a>
 80099f8:	0098      	lsls	r0, r3, #2
 80099fa:	5011      	str	r1, [r2, r0]
 80099fc:	3301      	adds	r3, #1
 80099fe:	42ab      	cmp	r3, r5
 8009a00:	dbfa      	blt.n	80099f8 <__lshift+0x48>
 8009a02:	43eb      	mvns	r3, r5
 8009a04:	17db      	asrs	r3, r3, #31
 8009a06:	401d      	ands	r5, r3
 8009a08:	211f      	movs	r1, #31
 8009a0a:	0023      	movs	r3, r4
 8009a0c:	0038      	movs	r0, r7
 8009a0e:	00ad      	lsls	r5, r5, #2
 8009a10:	1955      	adds	r5, r2, r5
 8009a12:	6922      	ldr	r2, [r4, #16]
 8009a14:	3314      	adds	r3, #20
 8009a16:	0092      	lsls	r2, r2, #2
 8009a18:	4008      	ands	r0, r1
 8009a1a:	4684      	mov	ip, r0
 8009a1c:	189a      	adds	r2, r3, r2
 8009a1e:	420f      	tst	r7, r1
 8009a20:	d02a      	beq.n	8009a78 <__lshift+0xc8>
 8009a22:	3101      	adds	r1, #1
 8009a24:	1a09      	subs	r1, r1, r0
 8009a26:	9105      	str	r1, [sp, #20]
 8009a28:	2100      	movs	r1, #0
 8009a2a:	9503      	str	r5, [sp, #12]
 8009a2c:	4667      	mov	r7, ip
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	40b8      	lsls	r0, r7
 8009a32:	4301      	orrs	r1, r0
 8009a34:	9803      	ldr	r0, [sp, #12]
 8009a36:	c002      	stmia	r0!, {r1}
 8009a38:	cb02      	ldmia	r3!, {r1}
 8009a3a:	9003      	str	r0, [sp, #12]
 8009a3c:	9805      	ldr	r0, [sp, #20]
 8009a3e:	40c1      	lsrs	r1, r0
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d8f3      	bhi.n	8009a2c <__lshift+0x7c>
 8009a44:	0020      	movs	r0, r4
 8009a46:	3015      	adds	r0, #21
 8009a48:	2304      	movs	r3, #4
 8009a4a:	4282      	cmp	r2, r0
 8009a4c:	d304      	bcc.n	8009a58 <__lshift+0xa8>
 8009a4e:	1b13      	subs	r3, r2, r4
 8009a50:	3b15      	subs	r3, #21
 8009a52:	089b      	lsrs	r3, r3, #2
 8009a54:	3301      	adds	r3, #1
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	50e9      	str	r1, [r5, r3]
 8009a5a:	2900      	cmp	r1, #0
 8009a5c:	d002      	beq.n	8009a64 <__lshift+0xb4>
 8009a5e:	9b02      	ldr	r3, [sp, #8]
 8009a60:	3302      	adds	r3, #2
 8009a62:	9301      	str	r3, [sp, #4]
 8009a64:	9b01      	ldr	r3, [sp, #4]
 8009a66:	9804      	ldr	r0, [sp, #16]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	0021      	movs	r1, r4
 8009a6c:	6133      	str	r3, [r6, #16]
 8009a6e:	f7ff fd81 	bl	8009574 <_Bfree>
 8009a72:	0030      	movs	r0, r6
 8009a74:	b007      	add	sp, #28
 8009a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a78:	cb02      	ldmia	r3!, {r1}
 8009a7a:	c502      	stmia	r5!, {r1}
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d8fb      	bhi.n	8009a78 <__lshift+0xc8>
 8009a80:	e7f0      	b.n	8009a64 <__lshift+0xb4>
 8009a82:	46c0      	nop			; (mov r8, r8)
 8009a84:	0800b358 	.word	0x0800b358
 8009a88:	0800b3e4 	.word	0x0800b3e4

08009a8c <__mcmp>:
 8009a8c:	6902      	ldr	r2, [r0, #16]
 8009a8e:	690b      	ldr	r3, [r1, #16]
 8009a90:	b530      	push	{r4, r5, lr}
 8009a92:	0004      	movs	r4, r0
 8009a94:	1ad0      	subs	r0, r2, r3
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d10d      	bne.n	8009ab6 <__mcmp+0x2a>
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	3414      	adds	r4, #20
 8009a9e:	3114      	adds	r1, #20
 8009aa0:	18e2      	adds	r2, r4, r3
 8009aa2:	18c9      	adds	r1, r1, r3
 8009aa4:	3a04      	subs	r2, #4
 8009aa6:	3904      	subs	r1, #4
 8009aa8:	6815      	ldr	r5, [r2, #0]
 8009aaa:	680b      	ldr	r3, [r1, #0]
 8009aac:	429d      	cmp	r5, r3
 8009aae:	d003      	beq.n	8009ab8 <__mcmp+0x2c>
 8009ab0:	2001      	movs	r0, #1
 8009ab2:	429d      	cmp	r5, r3
 8009ab4:	d303      	bcc.n	8009abe <__mcmp+0x32>
 8009ab6:	bd30      	pop	{r4, r5, pc}
 8009ab8:	4294      	cmp	r4, r2
 8009aba:	d3f3      	bcc.n	8009aa4 <__mcmp+0x18>
 8009abc:	e7fb      	b.n	8009ab6 <__mcmp+0x2a>
 8009abe:	4240      	negs	r0, r0
 8009ac0:	e7f9      	b.n	8009ab6 <__mcmp+0x2a>
	...

08009ac4 <__mdiff>:
 8009ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ac6:	000e      	movs	r6, r1
 8009ac8:	0007      	movs	r7, r0
 8009aca:	0011      	movs	r1, r2
 8009acc:	0030      	movs	r0, r6
 8009ace:	b087      	sub	sp, #28
 8009ad0:	0014      	movs	r4, r2
 8009ad2:	f7ff ffdb 	bl	8009a8c <__mcmp>
 8009ad6:	1e05      	subs	r5, r0, #0
 8009ad8:	d110      	bne.n	8009afc <__mdiff+0x38>
 8009ada:	0001      	movs	r1, r0
 8009adc:	0038      	movs	r0, r7
 8009ade:	f7ff fd05 	bl	80094ec <_Balloc>
 8009ae2:	1e02      	subs	r2, r0, #0
 8009ae4:	d104      	bne.n	8009af0 <__mdiff+0x2c>
 8009ae6:	4b40      	ldr	r3, [pc, #256]	; (8009be8 <__mdiff+0x124>)
 8009ae8:	4940      	ldr	r1, [pc, #256]	; (8009bec <__mdiff+0x128>)
 8009aea:	4841      	ldr	r0, [pc, #260]	; (8009bf0 <__mdiff+0x12c>)
 8009aec:	f000 fc70 	bl	800a3d0 <__assert_func>
 8009af0:	2301      	movs	r3, #1
 8009af2:	6145      	str	r5, [r0, #20]
 8009af4:	6103      	str	r3, [r0, #16]
 8009af6:	0010      	movs	r0, r2
 8009af8:	b007      	add	sp, #28
 8009afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009afc:	2301      	movs	r3, #1
 8009afe:	9301      	str	r3, [sp, #4]
 8009b00:	2800      	cmp	r0, #0
 8009b02:	db04      	blt.n	8009b0e <__mdiff+0x4a>
 8009b04:	0023      	movs	r3, r4
 8009b06:	0034      	movs	r4, r6
 8009b08:	001e      	movs	r6, r3
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	9301      	str	r3, [sp, #4]
 8009b0e:	0038      	movs	r0, r7
 8009b10:	6861      	ldr	r1, [r4, #4]
 8009b12:	f7ff fceb 	bl	80094ec <_Balloc>
 8009b16:	1e02      	subs	r2, r0, #0
 8009b18:	d103      	bne.n	8009b22 <__mdiff+0x5e>
 8009b1a:	2190      	movs	r1, #144	; 0x90
 8009b1c:	4b32      	ldr	r3, [pc, #200]	; (8009be8 <__mdiff+0x124>)
 8009b1e:	0089      	lsls	r1, r1, #2
 8009b20:	e7e3      	b.n	8009aea <__mdiff+0x26>
 8009b22:	9b01      	ldr	r3, [sp, #4]
 8009b24:	2700      	movs	r7, #0
 8009b26:	60c3      	str	r3, [r0, #12]
 8009b28:	6920      	ldr	r0, [r4, #16]
 8009b2a:	3414      	adds	r4, #20
 8009b2c:	9401      	str	r4, [sp, #4]
 8009b2e:	9b01      	ldr	r3, [sp, #4]
 8009b30:	0084      	lsls	r4, r0, #2
 8009b32:	191b      	adds	r3, r3, r4
 8009b34:	0034      	movs	r4, r6
 8009b36:	9302      	str	r3, [sp, #8]
 8009b38:	6933      	ldr	r3, [r6, #16]
 8009b3a:	3414      	adds	r4, #20
 8009b3c:	0099      	lsls	r1, r3, #2
 8009b3e:	1863      	adds	r3, r4, r1
 8009b40:	9303      	str	r3, [sp, #12]
 8009b42:	0013      	movs	r3, r2
 8009b44:	3314      	adds	r3, #20
 8009b46:	469c      	mov	ip, r3
 8009b48:	9305      	str	r3, [sp, #20]
 8009b4a:	9b01      	ldr	r3, [sp, #4]
 8009b4c:	9304      	str	r3, [sp, #16]
 8009b4e:	9b04      	ldr	r3, [sp, #16]
 8009b50:	cc02      	ldmia	r4!, {r1}
 8009b52:	cb20      	ldmia	r3!, {r5}
 8009b54:	9304      	str	r3, [sp, #16]
 8009b56:	b2ab      	uxth	r3, r5
 8009b58:	19df      	adds	r7, r3, r7
 8009b5a:	b28b      	uxth	r3, r1
 8009b5c:	1afb      	subs	r3, r7, r3
 8009b5e:	0c09      	lsrs	r1, r1, #16
 8009b60:	0c2d      	lsrs	r5, r5, #16
 8009b62:	1a6d      	subs	r5, r5, r1
 8009b64:	1419      	asrs	r1, r3, #16
 8009b66:	186d      	adds	r5, r5, r1
 8009b68:	4661      	mov	r1, ip
 8009b6a:	142f      	asrs	r7, r5, #16
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	042d      	lsls	r5, r5, #16
 8009b70:	432b      	orrs	r3, r5
 8009b72:	c108      	stmia	r1!, {r3}
 8009b74:	9b03      	ldr	r3, [sp, #12]
 8009b76:	468c      	mov	ip, r1
 8009b78:	42a3      	cmp	r3, r4
 8009b7a:	d8e8      	bhi.n	8009b4e <__mdiff+0x8a>
 8009b7c:	0031      	movs	r1, r6
 8009b7e:	9c03      	ldr	r4, [sp, #12]
 8009b80:	3115      	adds	r1, #21
 8009b82:	2304      	movs	r3, #4
 8009b84:	428c      	cmp	r4, r1
 8009b86:	d304      	bcc.n	8009b92 <__mdiff+0xce>
 8009b88:	1ba3      	subs	r3, r4, r6
 8009b8a:	3b15      	subs	r3, #21
 8009b8c:	089b      	lsrs	r3, r3, #2
 8009b8e:	3301      	adds	r3, #1
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	9901      	ldr	r1, [sp, #4]
 8009b94:	18cc      	adds	r4, r1, r3
 8009b96:	9905      	ldr	r1, [sp, #20]
 8009b98:	0026      	movs	r6, r4
 8009b9a:	18cb      	adds	r3, r1, r3
 8009b9c:	469c      	mov	ip, r3
 8009b9e:	9902      	ldr	r1, [sp, #8]
 8009ba0:	428e      	cmp	r6, r1
 8009ba2:	d310      	bcc.n	8009bc6 <__mdiff+0x102>
 8009ba4:	9e02      	ldr	r6, [sp, #8]
 8009ba6:	1ee1      	subs	r1, r4, #3
 8009ba8:	2500      	movs	r5, #0
 8009baa:	428e      	cmp	r6, r1
 8009bac:	d304      	bcc.n	8009bb8 <__mdiff+0xf4>
 8009bae:	0031      	movs	r1, r6
 8009bb0:	3103      	adds	r1, #3
 8009bb2:	1b0c      	subs	r4, r1, r4
 8009bb4:	08a4      	lsrs	r4, r4, #2
 8009bb6:	00a5      	lsls	r5, r4, #2
 8009bb8:	195b      	adds	r3, r3, r5
 8009bba:	3b04      	subs	r3, #4
 8009bbc:	6819      	ldr	r1, [r3, #0]
 8009bbe:	2900      	cmp	r1, #0
 8009bc0:	d00f      	beq.n	8009be2 <__mdiff+0x11e>
 8009bc2:	6110      	str	r0, [r2, #16]
 8009bc4:	e797      	b.n	8009af6 <__mdiff+0x32>
 8009bc6:	ce02      	ldmia	r6!, {r1}
 8009bc8:	b28d      	uxth	r5, r1
 8009bca:	19ed      	adds	r5, r5, r7
 8009bcc:	0c0f      	lsrs	r7, r1, #16
 8009bce:	1429      	asrs	r1, r5, #16
 8009bd0:	1879      	adds	r1, r7, r1
 8009bd2:	140f      	asrs	r7, r1, #16
 8009bd4:	b2ad      	uxth	r5, r5
 8009bd6:	0409      	lsls	r1, r1, #16
 8009bd8:	430d      	orrs	r5, r1
 8009bda:	4661      	mov	r1, ip
 8009bdc:	c120      	stmia	r1!, {r5}
 8009bde:	468c      	mov	ip, r1
 8009be0:	e7dd      	b.n	8009b9e <__mdiff+0xda>
 8009be2:	3801      	subs	r0, #1
 8009be4:	e7e9      	b.n	8009bba <__mdiff+0xf6>
 8009be6:	46c0      	nop			; (mov r8, r8)
 8009be8:	0800b358 	.word	0x0800b358
 8009bec:	00000232 	.word	0x00000232
 8009bf0:	0800b3e4 	.word	0x0800b3e4

08009bf4 <__ulp>:
 8009bf4:	4b0f      	ldr	r3, [pc, #60]	; (8009c34 <__ulp+0x40>)
 8009bf6:	4019      	ands	r1, r3
 8009bf8:	4b0f      	ldr	r3, [pc, #60]	; (8009c38 <__ulp+0x44>)
 8009bfa:	18c9      	adds	r1, r1, r3
 8009bfc:	2900      	cmp	r1, #0
 8009bfe:	dd04      	ble.n	8009c0a <__ulp+0x16>
 8009c00:	2200      	movs	r2, #0
 8009c02:	000b      	movs	r3, r1
 8009c04:	0010      	movs	r0, r2
 8009c06:	0019      	movs	r1, r3
 8009c08:	4770      	bx	lr
 8009c0a:	4249      	negs	r1, r1
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	2300      	movs	r3, #0
 8009c10:	1509      	asrs	r1, r1, #20
 8009c12:	2913      	cmp	r1, #19
 8009c14:	dc04      	bgt.n	8009c20 <__ulp+0x2c>
 8009c16:	2080      	movs	r0, #128	; 0x80
 8009c18:	0300      	lsls	r0, r0, #12
 8009c1a:	4108      	asrs	r0, r1
 8009c1c:	0003      	movs	r3, r0
 8009c1e:	e7f1      	b.n	8009c04 <__ulp+0x10>
 8009c20:	3914      	subs	r1, #20
 8009c22:	2001      	movs	r0, #1
 8009c24:	291e      	cmp	r1, #30
 8009c26:	dc02      	bgt.n	8009c2e <__ulp+0x3a>
 8009c28:	2080      	movs	r0, #128	; 0x80
 8009c2a:	0600      	lsls	r0, r0, #24
 8009c2c:	40c8      	lsrs	r0, r1
 8009c2e:	0002      	movs	r2, r0
 8009c30:	e7e8      	b.n	8009c04 <__ulp+0x10>
 8009c32:	46c0      	nop			; (mov r8, r8)
 8009c34:	7ff00000 	.word	0x7ff00000
 8009c38:	fcc00000 	.word	0xfcc00000

08009c3c <__b2d>:
 8009c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c3e:	0006      	movs	r6, r0
 8009c40:	6903      	ldr	r3, [r0, #16]
 8009c42:	3614      	adds	r6, #20
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	18f3      	adds	r3, r6, r3
 8009c48:	1f1d      	subs	r5, r3, #4
 8009c4a:	682c      	ldr	r4, [r5, #0]
 8009c4c:	000f      	movs	r7, r1
 8009c4e:	0020      	movs	r0, r4
 8009c50:	9301      	str	r3, [sp, #4]
 8009c52:	f7ff fd43 	bl	80096dc <__hi0bits>
 8009c56:	2320      	movs	r3, #32
 8009c58:	1a1b      	subs	r3, r3, r0
 8009c5a:	491f      	ldr	r1, [pc, #124]	; (8009cd8 <__b2d+0x9c>)
 8009c5c:	603b      	str	r3, [r7, #0]
 8009c5e:	280a      	cmp	r0, #10
 8009c60:	dc16      	bgt.n	8009c90 <__b2d+0x54>
 8009c62:	230b      	movs	r3, #11
 8009c64:	0027      	movs	r7, r4
 8009c66:	1a1b      	subs	r3, r3, r0
 8009c68:	40df      	lsrs	r7, r3
 8009c6a:	4339      	orrs	r1, r7
 8009c6c:	469c      	mov	ip, r3
 8009c6e:	000b      	movs	r3, r1
 8009c70:	2100      	movs	r1, #0
 8009c72:	42ae      	cmp	r6, r5
 8009c74:	d202      	bcs.n	8009c7c <__b2d+0x40>
 8009c76:	9901      	ldr	r1, [sp, #4]
 8009c78:	3908      	subs	r1, #8
 8009c7a:	6809      	ldr	r1, [r1, #0]
 8009c7c:	3015      	adds	r0, #21
 8009c7e:	4084      	lsls	r4, r0
 8009c80:	4660      	mov	r0, ip
 8009c82:	40c1      	lsrs	r1, r0
 8009c84:	430c      	orrs	r4, r1
 8009c86:	0022      	movs	r2, r4
 8009c88:	0010      	movs	r0, r2
 8009c8a:	0019      	movs	r1, r3
 8009c8c:	b003      	add	sp, #12
 8009c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c90:	2700      	movs	r7, #0
 8009c92:	42ae      	cmp	r6, r5
 8009c94:	d202      	bcs.n	8009c9c <__b2d+0x60>
 8009c96:	9d01      	ldr	r5, [sp, #4]
 8009c98:	3d08      	subs	r5, #8
 8009c9a:	682f      	ldr	r7, [r5, #0]
 8009c9c:	230b      	movs	r3, #11
 8009c9e:	425b      	negs	r3, r3
 8009ca0:	469c      	mov	ip, r3
 8009ca2:	4484      	add	ip, r0
 8009ca4:	280b      	cmp	r0, #11
 8009ca6:	d013      	beq.n	8009cd0 <__b2d+0x94>
 8009ca8:	4663      	mov	r3, ip
 8009caa:	2020      	movs	r0, #32
 8009cac:	409c      	lsls	r4, r3
 8009cae:	1ac0      	subs	r0, r0, r3
 8009cb0:	003b      	movs	r3, r7
 8009cb2:	40c3      	lsrs	r3, r0
 8009cb4:	431c      	orrs	r4, r3
 8009cb6:	4321      	orrs	r1, r4
 8009cb8:	000b      	movs	r3, r1
 8009cba:	2100      	movs	r1, #0
 8009cbc:	42b5      	cmp	r5, r6
 8009cbe:	d901      	bls.n	8009cc4 <__b2d+0x88>
 8009cc0:	3d04      	subs	r5, #4
 8009cc2:	6829      	ldr	r1, [r5, #0]
 8009cc4:	4664      	mov	r4, ip
 8009cc6:	40c1      	lsrs	r1, r0
 8009cc8:	40a7      	lsls	r7, r4
 8009cca:	430f      	orrs	r7, r1
 8009ccc:	003a      	movs	r2, r7
 8009cce:	e7db      	b.n	8009c88 <__b2d+0x4c>
 8009cd0:	4321      	orrs	r1, r4
 8009cd2:	000b      	movs	r3, r1
 8009cd4:	e7fa      	b.n	8009ccc <__b2d+0x90>
 8009cd6:	46c0      	nop			; (mov r8, r8)
 8009cd8:	3ff00000 	.word	0x3ff00000

08009cdc <__d2b>:
 8009cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cde:	2101      	movs	r1, #1
 8009ce0:	0014      	movs	r4, r2
 8009ce2:	001e      	movs	r6, r3
 8009ce4:	9f08      	ldr	r7, [sp, #32]
 8009ce6:	f7ff fc01 	bl	80094ec <_Balloc>
 8009cea:	1e05      	subs	r5, r0, #0
 8009cec:	d105      	bne.n	8009cfa <__d2b+0x1e>
 8009cee:	0002      	movs	r2, r0
 8009cf0:	4b26      	ldr	r3, [pc, #152]	; (8009d8c <__d2b+0xb0>)
 8009cf2:	4927      	ldr	r1, [pc, #156]	; (8009d90 <__d2b+0xb4>)
 8009cf4:	4827      	ldr	r0, [pc, #156]	; (8009d94 <__d2b+0xb8>)
 8009cf6:	f000 fb6b 	bl	800a3d0 <__assert_func>
 8009cfa:	0333      	lsls	r3, r6, #12
 8009cfc:	0076      	lsls	r6, r6, #1
 8009cfe:	0b1b      	lsrs	r3, r3, #12
 8009d00:	0d76      	lsrs	r6, r6, #21
 8009d02:	d124      	bne.n	8009d4e <__d2b+0x72>
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	2c00      	cmp	r4, #0
 8009d08:	d027      	beq.n	8009d5a <__d2b+0x7e>
 8009d0a:	4668      	mov	r0, sp
 8009d0c:	9400      	str	r4, [sp, #0]
 8009d0e:	f7ff fcff 	bl	8009710 <__lo0bits>
 8009d12:	9c00      	ldr	r4, [sp, #0]
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d01e      	beq.n	8009d56 <__d2b+0x7a>
 8009d18:	9b01      	ldr	r3, [sp, #4]
 8009d1a:	2120      	movs	r1, #32
 8009d1c:	001a      	movs	r2, r3
 8009d1e:	1a09      	subs	r1, r1, r0
 8009d20:	408a      	lsls	r2, r1
 8009d22:	40c3      	lsrs	r3, r0
 8009d24:	4322      	orrs	r2, r4
 8009d26:	616a      	str	r2, [r5, #20]
 8009d28:	9301      	str	r3, [sp, #4]
 8009d2a:	9c01      	ldr	r4, [sp, #4]
 8009d2c:	61ac      	str	r4, [r5, #24]
 8009d2e:	1e63      	subs	r3, r4, #1
 8009d30:	419c      	sbcs	r4, r3
 8009d32:	3401      	adds	r4, #1
 8009d34:	612c      	str	r4, [r5, #16]
 8009d36:	2e00      	cmp	r6, #0
 8009d38:	d018      	beq.n	8009d6c <__d2b+0x90>
 8009d3a:	4b17      	ldr	r3, [pc, #92]	; (8009d98 <__d2b+0xbc>)
 8009d3c:	18f6      	adds	r6, r6, r3
 8009d3e:	2335      	movs	r3, #53	; 0x35
 8009d40:	1836      	adds	r6, r6, r0
 8009d42:	1a18      	subs	r0, r3, r0
 8009d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d46:	603e      	str	r6, [r7, #0]
 8009d48:	6018      	str	r0, [r3, #0]
 8009d4a:	0028      	movs	r0, r5
 8009d4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d4e:	2280      	movs	r2, #128	; 0x80
 8009d50:	0352      	lsls	r2, r2, #13
 8009d52:	4313      	orrs	r3, r2
 8009d54:	e7d6      	b.n	8009d04 <__d2b+0x28>
 8009d56:	616c      	str	r4, [r5, #20]
 8009d58:	e7e7      	b.n	8009d2a <__d2b+0x4e>
 8009d5a:	a801      	add	r0, sp, #4
 8009d5c:	f7ff fcd8 	bl	8009710 <__lo0bits>
 8009d60:	2401      	movs	r4, #1
 8009d62:	9b01      	ldr	r3, [sp, #4]
 8009d64:	612c      	str	r4, [r5, #16]
 8009d66:	616b      	str	r3, [r5, #20]
 8009d68:	3020      	adds	r0, #32
 8009d6a:	e7e4      	b.n	8009d36 <__d2b+0x5a>
 8009d6c:	4b0b      	ldr	r3, [pc, #44]	; (8009d9c <__d2b+0xc0>)
 8009d6e:	18c0      	adds	r0, r0, r3
 8009d70:	4b0b      	ldr	r3, [pc, #44]	; (8009da0 <__d2b+0xc4>)
 8009d72:	6038      	str	r0, [r7, #0]
 8009d74:	18e3      	adds	r3, r4, r3
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	18eb      	adds	r3, r5, r3
 8009d7a:	6958      	ldr	r0, [r3, #20]
 8009d7c:	f7ff fcae 	bl	80096dc <__hi0bits>
 8009d80:	0164      	lsls	r4, r4, #5
 8009d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d84:	1a24      	subs	r4, r4, r0
 8009d86:	601c      	str	r4, [r3, #0]
 8009d88:	e7df      	b.n	8009d4a <__d2b+0x6e>
 8009d8a:	46c0      	nop			; (mov r8, r8)
 8009d8c:	0800b358 	.word	0x0800b358
 8009d90:	0000030a 	.word	0x0000030a
 8009d94:	0800b3e4 	.word	0x0800b3e4
 8009d98:	fffffbcd 	.word	0xfffffbcd
 8009d9c:	fffffbce 	.word	0xfffffbce
 8009da0:	3fffffff 	.word	0x3fffffff

08009da4 <__ratio>:
 8009da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009da6:	b087      	sub	sp, #28
 8009da8:	000f      	movs	r7, r1
 8009daa:	a904      	add	r1, sp, #16
 8009dac:	0006      	movs	r6, r0
 8009dae:	f7ff ff45 	bl	8009c3c <__b2d>
 8009db2:	9000      	str	r0, [sp, #0]
 8009db4:	9101      	str	r1, [sp, #4]
 8009db6:	9c00      	ldr	r4, [sp, #0]
 8009db8:	9d01      	ldr	r5, [sp, #4]
 8009dba:	0038      	movs	r0, r7
 8009dbc:	a905      	add	r1, sp, #20
 8009dbe:	f7ff ff3d 	bl	8009c3c <__b2d>
 8009dc2:	9002      	str	r0, [sp, #8]
 8009dc4:	9103      	str	r1, [sp, #12]
 8009dc6:	9a02      	ldr	r2, [sp, #8]
 8009dc8:	9b03      	ldr	r3, [sp, #12]
 8009dca:	6931      	ldr	r1, [r6, #16]
 8009dcc:	6938      	ldr	r0, [r7, #16]
 8009dce:	9e05      	ldr	r6, [sp, #20]
 8009dd0:	1a08      	subs	r0, r1, r0
 8009dd2:	9904      	ldr	r1, [sp, #16]
 8009dd4:	0140      	lsls	r0, r0, #5
 8009dd6:	1b89      	subs	r1, r1, r6
 8009dd8:	1841      	adds	r1, r0, r1
 8009dda:	0508      	lsls	r0, r1, #20
 8009ddc:	2900      	cmp	r1, #0
 8009dde:	dd07      	ble.n	8009df0 <__ratio+0x4c>
 8009de0:	9901      	ldr	r1, [sp, #4]
 8009de2:	1845      	adds	r5, r0, r1
 8009de4:	0020      	movs	r0, r4
 8009de6:	0029      	movs	r1, r5
 8009de8:	f7f6 ff0a 	bl	8000c00 <__aeabi_ddiv>
 8009dec:	b007      	add	sp, #28
 8009dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009df0:	9903      	ldr	r1, [sp, #12]
 8009df2:	1a0b      	subs	r3, r1, r0
 8009df4:	e7f6      	b.n	8009de4 <__ratio+0x40>

08009df6 <__copybits>:
 8009df6:	b570      	push	{r4, r5, r6, lr}
 8009df8:	0014      	movs	r4, r2
 8009dfa:	0005      	movs	r5, r0
 8009dfc:	3901      	subs	r1, #1
 8009dfe:	6913      	ldr	r3, [r2, #16]
 8009e00:	1149      	asrs	r1, r1, #5
 8009e02:	3101      	adds	r1, #1
 8009e04:	0089      	lsls	r1, r1, #2
 8009e06:	3414      	adds	r4, #20
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	1841      	adds	r1, r0, r1
 8009e0c:	18e3      	adds	r3, r4, r3
 8009e0e:	42a3      	cmp	r3, r4
 8009e10:	d80d      	bhi.n	8009e2e <__copybits+0x38>
 8009e12:	0014      	movs	r4, r2
 8009e14:	3411      	adds	r4, #17
 8009e16:	2500      	movs	r5, #0
 8009e18:	429c      	cmp	r4, r3
 8009e1a:	d803      	bhi.n	8009e24 <__copybits+0x2e>
 8009e1c:	1a9b      	subs	r3, r3, r2
 8009e1e:	3b11      	subs	r3, #17
 8009e20:	089b      	lsrs	r3, r3, #2
 8009e22:	009d      	lsls	r5, r3, #2
 8009e24:	2300      	movs	r3, #0
 8009e26:	1940      	adds	r0, r0, r5
 8009e28:	4281      	cmp	r1, r0
 8009e2a:	d803      	bhi.n	8009e34 <__copybits+0x3e>
 8009e2c:	bd70      	pop	{r4, r5, r6, pc}
 8009e2e:	cc40      	ldmia	r4!, {r6}
 8009e30:	c540      	stmia	r5!, {r6}
 8009e32:	e7ec      	b.n	8009e0e <__copybits+0x18>
 8009e34:	c008      	stmia	r0!, {r3}
 8009e36:	e7f7      	b.n	8009e28 <__copybits+0x32>

08009e38 <__any_on>:
 8009e38:	0002      	movs	r2, r0
 8009e3a:	6900      	ldr	r0, [r0, #16]
 8009e3c:	b510      	push	{r4, lr}
 8009e3e:	3214      	adds	r2, #20
 8009e40:	114b      	asrs	r3, r1, #5
 8009e42:	4298      	cmp	r0, r3
 8009e44:	db13      	blt.n	8009e6e <__any_on+0x36>
 8009e46:	dd0c      	ble.n	8009e62 <__any_on+0x2a>
 8009e48:	241f      	movs	r4, #31
 8009e4a:	0008      	movs	r0, r1
 8009e4c:	4020      	ands	r0, r4
 8009e4e:	4221      	tst	r1, r4
 8009e50:	d007      	beq.n	8009e62 <__any_on+0x2a>
 8009e52:	0099      	lsls	r1, r3, #2
 8009e54:	588c      	ldr	r4, [r1, r2]
 8009e56:	0021      	movs	r1, r4
 8009e58:	40c1      	lsrs	r1, r0
 8009e5a:	4081      	lsls	r1, r0
 8009e5c:	2001      	movs	r0, #1
 8009e5e:	428c      	cmp	r4, r1
 8009e60:	d104      	bne.n	8009e6c <__any_on+0x34>
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	18d3      	adds	r3, r2, r3
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d803      	bhi.n	8009e72 <__any_on+0x3a>
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	bd10      	pop	{r4, pc}
 8009e6e:	0003      	movs	r3, r0
 8009e70:	e7f7      	b.n	8009e62 <__any_on+0x2a>
 8009e72:	3b04      	subs	r3, #4
 8009e74:	6819      	ldr	r1, [r3, #0]
 8009e76:	2900      	cmp	r1, #0
 8009e78:	d0f5      	beq.n	8009e66 <__any_on+0x2e>
 8009e7a:	2001      	movs	r0, #1
 8009e7c:	e7f6      	b.n	8009e6c <__any_on+0x34>

08009e7e <_calloc_r>:
 8009e7e:	b570      	push	{r4, r5, r6, lr}
 8009e80:	0c13      	lsrs	r3, r2, #16
 8009e82:	0c0d      	lsrs	r5, r1, #16
 8009e84:	d11e      	bne.n	8009ec4 <_calloc_r+0x46>
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10c      	bne.n	8009ea4 <_calloc_r+0x26>
 8009e8a:	b289      	uxth	r1, r1
 8009e8c:	b294      	uxth	r4, r2
 8009e8e:	434c      	muls	r4, r1
 8009e90:	0021      	movs	r1, r4
 8009e92:	f000 f88d 	bl	8009fb0 <_malloc_r>
 8009e96:	1e05      	subs	r5, r0, #0
 8009e98:	d01b      	beq.n	8009ed2 <_calloc_r+0x54>
 8009e9a:	0022      	movs	r2, r4
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	f7fc fb6f 	bl	8006580 <memset>
 8009ea2:	e016      	b.n	8009ed2 <_calloc_r+0x54>
 8009ea4:	1c1d      	adds	r5, r3, #0
 8009ea6:	1c0b      	adds	r3, r1, #0
 8009ea8:	b292      	uxth	r2, r2
 8009eaa:	b289      	uxth	r1, r1
 8009eac:	b29c      	uxth	r4, r3
 8009eae:	4351      	muls	r1, r2
 8009eb0:	b2ab      	uxth	r3, r5
 8009eb2:	4363      	muls	r3, r4
 8009eb4:	0c0c      	lsrs	r4, r1, #16
 8009eb6:	191c      	adds	r4, r3, r4
 8009eb8:	0c22      	lsrs	r2, r4, #16
 8009eba:	d107      	bne.n	8009ecc <_calloc_r+0x4e>
 8009ebc:	0424      	lsls	r4, r4, #16
 8009ebe:	b289      	uxth	r1, r1
 8009ec0:	430c      	orrs	r4, r1
 8009ec2:	e7e5      	b.n	8009e90 <_calloc_r+0x12>
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <_calloc_r+0x4e>
 8009ec8:	1c13      	adds	r3, r2, #0
 8009eca:	e7ed      	b.n	8009ea8 <_calloc_r+0x2a>
 8009ecc:	230c      	movs	r3, #12
 8009ece:	2500      	movs	r5, #0
 8009ed0:	6003      	str	r3, [r0, #0]
 8009ed2:	0028      	movs	r0, r5
 8009ed4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ed8 <_free_r>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	0005      	movs	r5, r0
 8009edc:	2900      	cmp	r1, #0
 8009ede:	d010      	beq.n	8009f02 <_free_r+0x2a>
 8009ee0:	1f0c      	subs	r4, r1, #4
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	da00      	bge.n	8009eea <_free_r+0x12>
 8009ee8:	18e4      	adds	r4, r4, r3
 8009eea:	0028      	movs	r0, r5
 8009eec:	f000 fab2 	bl	800a454 <__malloc_lock>
 8009ef0:	4a1d      	ldr	r2, [pc, #116]	; (8009f68 <_free_r+0x90>)
 8009ef2:	6813      	ldr	r3, [r2, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d105      	bne.n	8009f04 <_free_r+0x2c>
 8009ef8:	6063      	str	r3, [r4, #4]
 8009efa:	6014      	str	r4, [r2, #0]
 8009efc:	0028      	movs	r0, r5
 8009efe:	f000 fab1 	bl	800a464 <__malloc_unlock>
 8009f02:	bd70      	pop	{r4, r5, r6, pc}
 8009f04:	42a3      	cmp	r3, r4
 8009f06:	d908      	bls.n	8009f1a <_free_r+0x42>
 8009f08:	6821      	ldr	r1, [r4, #0]
 8009f0a:	1860      	adds	r0, r4, r1
 8009f0c:	4283      	cmp	r3, r0
 8009f0e:	d1f3      	bne.n	8009ef8 <_free_r+0x20>
 8009f10:	6818      	ldr	r0, [r3, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	1841      	adds	r1, r0, r1
 8009f16:	6021      	str	r1, [r4, #0]
 8009f18:	e7ee      	b.n	8009ef8 <_free_r+0x20>
 8009f1a:	001a      	movs	r2, r3
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <_free_r+0x4e>
 8009f22:	42a3      	cmp	r3, r4
 8009f24:	d9f9      	bls.n	8009f1a <_free_r+0x42>
 8009f26:	6811      	ldr	r1, [r2, #0]
 8009f28:	1850      	adds	r0, r2, r1
 8009f2a:	42a0      	cmp	r0, r4
 8009f2c:	d10b      	bne.n	8009f46 <_free_r+0x6e>
 8009f2e:	6820      	ldr	r0, [r4, #0]
 8009f30:	1809      	adds	r1, r1, r0
 8009f32:	1850      	adds	r0, r2, r1
 8009f34:	6011      	str	r1, [r2, #0]
 8009f36:	4283      	cmp	r3, r0
 8009f38:	d1e0      	bne.n	8009efc <_free_r+0x24>
 8009f3a:	6818      	ldr	r0, [r3, #0]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	1841      	adds	r1, r0, r1
 8009f40:	6011      	str	r1, [r2, #0]
 8009f42:	6053      	str	r3, [r2, #4]
 8009f44:	e7da      	b.n	8009efc <_free_r+0x24>
 8009f46:	42a0      	cmp	r0, r4
 8009f48:	d902      	bls.n	8009f50 <_free_r+0x78>
 8009f4a:	230c      	movs	r3, #12
 8009f4c:	602b      	str	r3, [r5, #0]
 8009f4e:	e7d5      	b.n	8009efc <_free_r+0x24>
 8009f50:	6821      	ldr	r1, [r4, #0]
 8009f52:	1860      	adds	r0, r4, r1
 8009f54:	4283      	cmp	r3, r0
 8009f56:	d103      	bne.n	8009f60 <_free_r+0x88>
 8009f58:	6818      	ldr	r0, [r3, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	1841      	adds	r1, r0, r1
 8009f5e:	6021      	str	r1, [r4, #0]
 8009f60:	6063      	str	r3, [r4, #4]
 8009f62:	6054      	str	r4, [r2, #4]
 8009f64:	e7ca      	b.n	8009efc <_free_r+0x24>
 8009f66:	46c0      	nop			; (mov r8, r8)
 8009f68:	200003b0 	.word	0x200003b0

08009f6c <sbrk_aligned>:
 8009f6c:	b570      	push	{r4, r5, r6, lr}
 8009f6e:	4e0f      	ldr	r6, [pc, #60]	; (8009fac <sbrk_aligned+0x40>)
 8009f70:	000d      	movs	r5, r1
 8009f72:	6831      	ldr	r1, [r6, #0]
 8009f74:	0004      	movs	r4, r0
 8009f76:	2900      	cmp	r1, #0
 8009f78:	d102      	bne.n	8009f80 <sbrk_aligned+0x14>
 8009f7a:	f000 f9f7 	bl	800a36c <_sbrk_r>
 8009f7e:	6030      	str	r0, [r6, #0]
 8009f80:	0029      	movs	r1, r5
 8009f82:	0020      	movs	r0, r4
 8009f84:	f000 f9f2 	bl	800a36c <_sbrk_r>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d00a      	beq.n	8009fa2 <sbrk_aligned+0x36>
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	1cc5      	adds	r5, r0, #3
 8009f90:	439d      	bics	r5, r3
 8009f92:	42a8      	cmp	r0, r5
 8009f94:	d007      	beq.n	8009fa6 <sbrk_aligned+0x3a>
 8009f96:	1a29      	subs	r1, r5, r0
 8009f98:	0020      	movs	r0, r4
 8009f9a:	f000 f9e7 	bl	800a36c <_sbrk_r>
 8009f9e:	1c43      	adds	r3, r0, #1
 8009fa0:	d101      	bne.n	8009fa6 <sbrk_aligned+0x3a>
 8009fa2:	2501      	movs	r5, #1
 8009fa4:	426d      	negs	r5, r5
 8009fa6:	0028      	movs	r0, r5
 8009fa8:	bd70      	pop	{r4, r5, r6, pc}
 8009faa:	46c0      	nop			; (mov r8, r8)
 8009fac:	200003b4 	.word	0x200003b4

08009fb0 <_malloc_r>:
 8009fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fb2:	2203      	movs	r2, #3
 8009fb4:	1ccb      	adds	r3, r1, #3
 8009fb6:	4393      	bics	r3, r2
 8009fb8:	3308      	adds	r3, #8
 8009fba:	0006      	movs	r6, r0
 8009fbc:	001f      	movs	r7, r3
 8009fbe:	2b0c      	cmp	r3, #12
 8009fc0:	d232      	bcs.n	800a028 <_malloc_r+0x78>
 8009fc2:	270c      	movs	r7, #12
 8009fc4:	42b9      	cmp	r1, r7
 8009fc6:	d831      	bhi.n	800a02c <_malloc_r+0x7c>
 8009fc8:	0030      	movs	r0, r6
 8009fca:	f000 fa43 	bl	800a454 <__malloc_lock>
 8009fce:	4d32      	ldr	r5, [pc, #200]	; (800a098 <_malloc_r+0xe8>)
 8009fd0:	682b      	ldr	r3, [r5, #0]
 8009fd2:	001c      	movs	r4, r3
 8009fd4:	2c00      	cmp	r4, #0
 8009fd6:	d12e      	bne.n	800a036 <_malloc_r+0x86>
 8009fd8:	0039      	movs	r1, r7
 8009fda:	0030      	movs	r0, r6
 8009fdc:	f7ff ffc6 	bl	8009f6c <sbrk_aligned>
 8009fe0:	0004      	movs	r4, r0
 8009fe2:	1c43      	adds	r3, r0, #1
 8009fe4:	d11e      	bne.n	800a024 <_malloc_r+0x74>
 8009fe6:	682c      	ldr	r4, [r5, #0]
 8009fe8:	0025      	movs	r5, r4
 8009fea:	2d00      	cmp	r5, #0
 8009fec:	d14a      	bne.n	800a084 <_malloc_r+0xd4>
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	0029      	movs	r1, r5
 8009ff2:	18e3      	adds	r3, r4, r3
 8009ff4:	0030      	movs	r0, r6
 8009ff6:	9301      	str	r3, [sp, #4]
 8009ff8:	f000 f9b8 	bl	800a36c <_sbrk_r>
 8009ffc:	9b01      	ldr	r3, [sp, #4]
 8009ffe:	4283      	cmp	r3, r0
 800a000:	d143      	bne.n	800a08a <_malloc_r+0xda>
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	3703      	adds	r7, #3
 800a006:	1aff      	subs	r7, r7, r3
 800a008:	2303      	movs	r3, #3
 800a00a:	439f      	bics	r7, r3
 800a00c:	3708      	adds	r7, #8
 800a00e:	2f0c      	cmp	r7, #12
 800a010:	d200      	bcs.n	800a014 <_malloc_r+0x64>
 800a012:	270c      	movs	r7, #12
 800a014:	0039      	movs	r1, r7
 800a016:	0030      	movs	r0, r6
 800a018:	f7ff ffa8 	bl	8009f6c <sbrk_aligned>
 800a01c:	1c43      	adds	r3, r0, #1
 800a01e:	d034      	beq.n	800a08a <_malloc_r+0xda>
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	19df      	adds	r7, r3, r7
 800a024:	6027      	str	r7, [r4, #0]
 800a026:	e013      	b.n	800a050 <_malloc_r+0xa0>
 800a028:	2b00      	cmp	r3, #0
 800a02a:	dacb      	bge.n	8009fc4 <_malloc_r+0x14>
 800a02c:	230c      	movs	r3, #12
 800a02e:	2500      	movs	r5, #0
 800a030:	6033      	str	r3, [r6, #0]
 800a032:	0028      	movs	r0, r5
 800a034:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a036:	6822      	ldr	r2, [r4, #0]
 800a038:	1bd1      	subs	r1, r2, r7
 800a03a:	d420      	bmi.n	800a07e <_malloc_r+0xce>
 800a03c:	290b      	cmp	r1, #11
 800a03e:	d917      	bls.n	800a070 <_malloc_r+0xc0>
 800a040:	19e2      	adds	r2, r4, r7
 800a042:	6027      	str	r7, [r4, #0]
 800a044:	42a3      	cmp	r3, r4
 800a046:	d111      	bne.n	800a06c <_malloc_r+0xbc>
 800a048:	602a      	str	r2, [r5, #0]
 800a04a:	6863      	ldr	r3, [r4, #4]
 800a04c:	6011      	str	r1, [r2, #0]
 800a04e:	6053      	str	r3, [r2, #4]
 800a050:	0030      	movs	r0, r6
 800a052:	0025      	movs	r5, r4
 800a054:	f000 fa06 	bl	800a464 <__malloc_unlock>
 800a058:	2207      	movs	r2, #7
 800a05a:	350b      	adds	r5, #11
 800a05c:	1d23      	adds	r3, r4, #4
 800a05e:	4395      	bics	r5, r2
 800a060:	1aea      	subs	r2, r5, r3
 800a062:	429d      	cmp	r5, r3
 800a064:	d0e5      	beq.n	800a032 <_malloc_r+0x82>
 800a066:	1b5b      	subs	r3, r3, r5
 800a068:	50a3      	str	r3, [r4, r2]
 800a06a:	e7e2      	b.n	800a032 <_malloc_r+0x82>
 800a06c:	605a      	str	r2, [r3, #4]
 800a06e:	e7ec      	b.n	800a04a <_malloc_r+0x9a>
 800a070:	6862      	ldr	r2, [r4, #4]
 800a072:	42a3      	cmp	r3, r4
 800a074:	d101      	bne.n	800a07a <_malloc_r+0xca>
 800a076:	602a      	str	r2, [r5, #0]
 800a078:	e7ea      	b.n	800a050 <_malloc_r+0xa0>
 800a07a:	605a      	str	r2, [r3, #4]
 800a07c:	e7e8      	b.n	800a050 <_malloc_r+0xa0>
 800a07e:	0023      	movs	r3, r4
 800a080:	6864      	ldr	r4, [r4, #4]
 800a082:	e7a7      	b.n	8009fd4 <_malloc_r+0x24>
 800a084:	002c      	movs	r4, r5
 800a086:	686d      	ldr	r5, [r5, #4]
 800a088:	e7af      	b.n	8009fea <_malloc_r+0x3a>
 800a08a:	230c      	movs	r3, #12
 800a08c:	0030      	movs	r0, r6
 800a08e:	6033      	str	r3, [r6, #0]
 800a090:	f000 f9e8 	bl	800a464 <__malloc_unlock>
 800a094:	e7cd      	b.n	800a032 <_malloc_r+0x82>
 800a096:	46c0      	nop			; (mov r8, r8)
 800a098:	200003b0 	.word	0x200003b0

0800a09c <__ssputs_r>:
 800a09c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a09e:	688e      	ldr	r6, [r1, #8]
 800a0a0:	b085      	sub	sp, #20
 800a0a2:	0007      	movs	r7, r0
 800a0a4:	000c      	movs	r4, r1
 800a0a6:	9203      	str	r2, [sp, #12]
 800a0a8:	9301      	str	r3, [sp, #4]
 800a0aa:	429e      	cmp	r6, r3
 800a0ac:	d83c      	bhi.n	800a128 <__ssputs_r+0x8c>
 800a0ae:	2390      	movs	r3, #144	; 0x90
 800a0b0:	898a      	ldrh	r2, [r1, #12]
 800a0b2:	00db      	lsls	r3, r3, #3
 800a0b4:	421a      	tst	r2, r3
 800a0b6:	d034      	beq.n	800a122 <__ssputs_r+0x86>
 800a0b8:	6909      	ldr	r1, [r1, #16]
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	6960      	ldr	r0, [r4, #20]
 800a0be:	1a5b      	subs	r3, r3, r1
 800a0c0:	9302      	str	r3, [sp, #8]
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	4343      	muls	r3, r0
 800a0c6:	0fdd      	lsrs	r5, r3, #31
 800a0c8:	18ed      	adds	r5, r5, r3
 800a0ca:	9b01      	ldr	r3, [sp, #4]
 800a0cc:	9802      	ldr	r0, [sp, #8]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	181b      	adds	r3, r3, r0
 800a0d2:	106d      	asrs	r5, r5, #1
 800a0d4:	42ab      	cmp	r3, r5
 800a0d6:	d900      	bls.n	800a0da <__ssputs_r+0x3e>
 800a0d8:	001d      	movs	r5, r3
 800a0da:	0553      	lsls	r3, r2, #21
 800a0dc:	d532      	bpl.n	800a144 <__ssputs_r+0xa8>
 800a0de:	0029      	movs	r1, r5
 800a0e0:	0038      	movs	r0, r7
 800a0e2:	f7ff ff65 	bl	8009fb0 <_malloc_r>
 800a0e6:	1e06      	subs	r6, r0, #0
 800a0e8:	d109      	bne.n	800a0fe <__ssputs_r+0x62>
 800a0ea:	230c      	movs	r3, #12
 800a0ec:	603b      	str	r3, [r7, #0]
 800a0ee:	2340      	movs	r3, #64	; 0x40
 800a0f0:	2001      	movs	r0, #1
 800a0f2:	89a2      	ldrh	r2, [r4, #12]
 800a0f4:	4240      	negs	r0, r0
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	81a3      	strh	r3, [r4, #12]
 800a0fa:	b005      	add	sp, #20
 800a0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0fe:	9a02      	ldr	r2, [sp, #8]
 800a100:	6921      	ldr	r1, [r4, #16]
 800a102:	f7ff f9ea 	bl	80094da <memcpy>
 800a106:	89a3      	ldrh	r3, [r4, #12]
 800a108:	4a14      	ldr	r2, [pc, #80]	; (800a15c <__ssputs_r+0xc0>)
 800a10a:	401a      	ands	r2, r3
 800a10c:	2380      	movs	r3, #128	; 0x80
 800a10e:	4313      	orrs	r3, r2
 800a110:	81a3      	strh	r3, [r4, #12]
 800a112:	9b02      	ldr	r3, [sp, #8]
 800a114:	6126      	str	r6, [r4, #16]
 800a116:	18f6      	adds	r6, r6, r3
 800a118:	6026      	str	r6, [r4, #0]
 800a11a:	6165      	str	r5, [r4, #20]
 800a11c:	9e01      	ldr	r6, [sp, #4]
 800a11e:	1aed      	subs	r5, r5, r3
 800a120:	60a5      	str	r5, [r4, #8]
 800a122:	9b01      	ldr	r3, [sp, #4]
 800a124:	429e      	cmp	r6, r3
 800a126:	d900      	bls.n	800a12a <__ssputs_r+0x8e>
 800a128:	9e01      	ldr	r6, [sp, #4]
 800a12a:	0032      	movs	r2, r6
 800a12c:	9903      	ldr	r1, [sp, #12]
 800a12e:	6820      	ldr	r0, [r4, #0]
 800a130:	f000 f97c 	bl	800a42c <memmove>
 800a134:	68a3      	ldr	r3, [r4, #8]
 800a136:	2000      	movs	r0, #0
 800a138:	1b9b      	subs	r3, r3, r6
 800a13a:	60a3      	str	r3, [r4, #8]
 800a13c:	6823      	ldr	r3, [r4, #0]
 800a13e:	199e      	adds	r6, r3, r6
 800a140:	6026      	str	r6, [r4, #0]
 800a142:	e7da      	b.n	800a0fa <__ssputs_r+0x5e>
 800a144:	002a      	movs	r2, r5
 800a146:	0038      	movs	r0, r7
 800a148:	f000 f994 	bl	800a474 <_realloc_r>
 800a14c:	1e06      	subs	r6, r0, #0
 800a14e:	d1e0      	bne.n	800a112 <__ssputs_r+0x76>
 800a150:	0038      	movs	r0, r7
 800a152:	6921      	ldr	r1, [r4, #16]
 800a154:	f7ff fec0 	bl	8009ed8 <_free_r>
 800a158:	e7c7      	b.n	800a0ea <__ssputs_r+0x4e>
 800a15a:	46c0      	nop			; (mov r8, r8)
 800a15c:	fffffb7f 	.word	0xfffffb7f

0800a160 <_svfiprintf_r>:
 800a160:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a162:	b0a1      	sub	sp, #132	; 0x84
 800a164:	9003      	str	r0, [sp, #12]
 800a166:	001d      	movs	r5, r3
 800a168:	898b      	ldrh	r3, [r1, #12]
 800a16a:	000f      	movs	r7, r1
 800a16c:	0016      	movs	r6, r2
 800a16e:	061b      	lsls	r3, r3, #24
 800a170:	d511      	bpl.n	800a196 <_svfiprintf_r+0x36>
 800a172:	690b      	ldr	r3, [r1, #16]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10e      	bne.n	800a196 <_svfiprintf_r+0x36>
 800a178:	2140      	movs	r1, #64	; 0x40
 800a17a:	f7ff ff19 	bl	8009fb0 <_malloc_r>
 800a17e:	6038      	str	r0, [r7, #0]
 800a180:	6138      	str	r0, [r7, #16]
 800a182:	2800      	cmp	r0, #0
 800a184:	d105      	bne.n	800a192 <_svfiprintf_r+0x32>
 800a186:	230c      	movs	r3, #12
 800a188:	9a03      	ldr	r2, [sp, #12]
 800a18a:	3801      	subs	r0, #1
 800a18c:	6013      	str	r3, [r2, #0]
 800a18e:	b021      	add	sp, #132	; 0x84
 800a190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a192:	2340      	movs	r3, #64	; 0x40
 800a194:	617b      	str	r3, [r7, #20]
 800a196:	2300      	movs	r3, #0
 800a198:	ac08      	add	r4, sp, #32
 800a19a:	6163      	str	r3, [r4, #20]
 800a19c:	3320      	adds	r3, #32
 800a19e:	7663      	strb	r3, [r4, #25]
 800a1a0:	3310      	adds	r3, #16
 800a1a2:	76a3      	strb	r3, [r4, #26]
 800a1a4:	9507      	str	r5, [sp, #28]
 800a1a6:	0035      	movs	r5, r6
 800a1a8:	782b      	ldrb	r3, [r5, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <_svfiprintf_r+0x52>
 800a1ae:	2b25      	cmp	r3, #37	; 0x25
 800a1b0:	d147      	bne.n	800a242 <_svfiprintf_r+0xe2>
 800a1b2:	1bab      	subs	r3, r5, r6
 800a1b4:	9305      	str	r3, [sp, #20]
 800a1b6:	42b5      	cmp	r5, r6
 800a1b8:	d00c      	beq.n	800a1d4 <_svfiprintf_r+0x74>
 800a1ba:	0032      	movs	r2, r6
 800a1bc:	0039      	movs	r1, r7
 800a1be:	9803      	ldr	r0, [sp, #12]
 800a1c0:	f7ff ff6c 	bl	800a09c <__ssputs_r>
 800a1c4:	1c43      	adds	r3, r0, #1
 800a1c6:	d100      	bne.n	800a1ca <_svfiprintf_r+0x6a>
 800a1c8:	e0ae      	b.n	800a328 <_svfiprintf_r+0x1c8>
 800a1ca:	6962      	ldr	r2, [r4, #20]
 800a1cc:	9b05      	ldr	r3, [sp, #20]
 800a1ce:	4694      	mov	ip, r2
 800a1d0:	4463      	add	r3, ip
 800a1d2:	6163      	str	r3, [r4, #20]
 800a1d4:	782b      	ldrb	r3, [r5, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d100      	bne.n	800a1dc <_svfiprintf_r+0x7c>
 800a1da:	e0a5      	b.n	800a328 <_svfiprintf_r+0x1c8>
 800a1dc:	2201      	movs	r2, #1
 800a1de:	2300      	movs	r3, #0
 800a1e0:	4252      	negs	r2, r2
 800a1e2:	6062      	str	r2, [r4, #4]
 800a1e4:	a904      	add	r1, sp, #16
 800a1e6:	3254      	adds	r2, #84	; 0x54
 800a1e8:	1852      	adds	r2, r2, r1
 800a1ea:	1c6e      	adds	r6, r5, #1
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	60e3      	str	r3, [r4, #12]
 800a1f0:	60a3      	str	r3, [r4, #8]
 800a1f2:	7013      	strb	r3, [r2, #0]
 800a1f4:	65a3      	str	r3, [r4, #88]	; 0x58
 800a1f6:	2205      	movs	r2, #5
 800a1f8:	7831      	ldrb	r1, [r6, #0]
 800a1fa:	4854      	ldr	r0, [pc, #336]	; (800a34c <_svfiprintf_r+0x1ec>)
 800a1fc:	f7ff f962 	bl	80094c4 <memchr>
 800a200:	1c75      	adds	r5, r6, #1
 800a202:	2800      	cmp	r0, #0
 800a204:	d11f      	bne.n	800a246 <_svfiprintf_r+0xe6>
 800a206:	6822      	ldr	r2, [r4, #0]
 800a208:	06d3      	lsls	r3, r2, #27
 800a20a:	d504      	bpl.n	800a216 <_svfiprintf_r+0xb6>
 800a20c:	2353      	movs	r3, #83	; 0x53
 800a20e:	a904      	add	r1, sp, #16
 800a210:	185b      	adds	r3, r3, r1
 800a212:	2120      	movs	r1, #32
 800a214:	7019      	strb	r1, [r3, #0]
 800a216:	0713      	lsls	r3, r2, #28
 800a218:	d504      	bpl.n	800a224 <_svfiprintf_r+0xc4>
 800a21a:	2353      	movs	r3, #83	; 0x53
 800a21c:	a904      	add	r1, sp, #16
 800a21e:	185b      	adds	r3, r3, r1
 800a220:	212b      	movs	r1, #43	; 0x2b
 800a222:	7019      	strb	r1, [r3, #0]
 800a224:	7833      	ldrb	r3, [r6, #0]
 800a226:	2b2a      	cmp	r3, #42	; 0x2a
 800a228:	d016      	beq.n	800a258 <_svfiprintf_r+0xf8>
 800a22a:	0035      	movs	r5, r6
 800a22c:	2100      	movs	r1, #0
 800a22e:	200a      	movs	r0, #10
 800a230:	68e3      	ldr	r3, [r4, #12]
 800a232:	782a      	ldrb	r2, [r5, #0]
 800a234:	1c6e      	adds	r6, r5, #1
 800a236:	3a30      	subs	r2, #48	; 0x30
 800a238:	2a09      	cmp	r2, #9
 800a23a:	d94e      	bls.n	800a2da <_svfiprintf_r+0x17a>
 800a23c:	2900      	cmp	r1, #0
 800a23e:	d111      	bne.n	800a264 <_svfiprintf_r+0x104>
 800a240:	e017      	b.n	800a272 <_svfiprintf_r+0x112>
 800a242:	3501      	adds	r5, #1
 800a244:	e7b0      	b.n	800a1a8 <_svfiprintf_r+0x48>
 800a246:	4b41      	ldr	r3, [pc, #260]	; (800a34c <_svfiprintf_r+0x1ec>)
 800a248:	6822      	ldr	r2, [r4, #0]
 800a24a:	1ac0      	subs	r0, r0, r3
 800a24c:	2301      	movs	r3, #1
 800a24e:	4083      	lsls	r3, r0
 800a250:	4313      	orrs	r3, r2
 800a252:	002e      	movs	r6, r5
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	e7ce      	b.n	800a1f6 <_svfiprintf_r+0x96>
 800a258:	9b07      	ldr	r3, [sp, #28]
 800a25a:	1d19      	adds	r1, r3, #4
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	9107      	str	r1, [sp, #28]
 800a260:	2b00      	cmp	r3, #0
 800a262:	db01      	blt.n	800a268 <_svfiprintf_r+0x108>
 800a264:	930b      	str	r3, [sp, #44]	; 0x2c
 800a266:	e004      	b.n	800a272 <_svfiprintf_r+0x112>
 800a268:	425b      	negs	r3, r3
 800a26a:	60e3      	str	r3, [r4, #12]
 800a26c:	2302      	movs	r3, #2
 800a26e:	4313      	orrs	r3, r2
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	782b      	ldrb	r3, [r5, #0]
 800a274:	2b2e      	cmp	r3, #46	; 0x2e
 800a276:	d10a      	bne.n	800a28e <_svfiprintf_r+0x12e>
 800a278:	786b      	ldrb	r3, [r5, #1]
 800a27a:	2b2a      	cmp	r3, #42	; 0x2a
 800a27c:	d135      	bne.n	800a2ea <_svfiprintf_r+0x18a>
 800a27e:	9b07      	ldr	r3, [sp, #28]
 800a280:	3502      	adds	r5, #2
 800a282:	1d1a      	adds	r2, r3, #4
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	9207      	str	r2, [sp, #28]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	db2b      	blt.n	800a2e4 <_svfiprintf_r+0x184>
 800a28c:	9309      	str	r3, [sp, #36]	; 0x24
 800a28e:	4e30      	ldr	r6, [pc, #192]	; (800a350 <_svfiprintf_r+0x1f0>)
 800a290:	2203      	movs	r2, #3
 800a292:	0030      	movs	r0, r6
 800a294:	7829      	ldrb	r1, [r5, #0]
 800a296:	f7ff f915 	bl	80094c4 <memchr>
 800a29a:	2800      	cmp	r0, #0
 800a29c:	d006      	beq.n	800a2ac <_svfiprintf_r+0x14c>
 800a29e:	2340      	movs	r3, #64	; 0x40
 800a2a0:	1b80      	subs	r0, r0, r6
 800a2a2:	4083      	lsls	r3, r0
 800a2a4:	6822      	ldr	r2, [r4, #0]
 800a2a6:	3501      	adds	r5, #1
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	6023      	str	r3, [r4, #0]
 800a2ac:	7829      	ldrb	r1, [r5, #0]
 800a2ae:	2206      	movs	r2, #6
 800a2b0:	4828      	ldr	r0, [pc, #160]	; (800a354 <_svfiprintf_r+0x1f4>)
 800a2b2:	1c6e      	adds	r6, r5, #1
 800a2b4:	7621      	strb	r1, [r4, #24]
 800a2b6:	f7ff f905 	bl	80094c4 <memchr>
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	d03c      	beq.n	800a338 <_svfiprintf_r+0x1d8>
 800a2be:	4b26      	ldr	r3, [pc, #152]	; (800a358 <_svfiprintf_r+0x1f8>)
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d125      	bne.n	800a310 <_svfiprintf_r+0x1b0>
 800a2c4:	2207      	movs	r2, #7
 800a2c6:	9b07      	ldr	r3, [sp, #28]
 800a2c8:	3307      	adds	r3, #7
 800a2ca:	4393      	bics	r3, r2
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	9307      	str	r3, [sp, #28]
 800a2d0:	6963      	ldr	r3, [r4, #20]
 800a2d2:	9a04      	ldr	r2, [sp, #16]
 800a2d4:	189b      	adds	r3, r3, r2
 800a2d6:	6163      	str	r3, [r4, #20]
 800a2d8:	e765      	b.n	800a1a6 <_svfiprintf_r+0x46>
 800a2da:	4343      	muls	r3, r0
 800a2dc:	0035      	movs	r5, r6
 800a2de:	2101      	movs	r1, #1
 800a2e0:	189b      	adds	r3, r3, r2
 800a2e2:	e7a6      	b.n	800a232 <_svfiprintf_r+0xd2>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	425b      	negs	r3, r3
 800a2e8:	e7d0      	b.n	800a28c <_svfiprintf_r+0x12c>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	200a      	movs	r0, #10
 800a2ee:	001a      	movs	r2, r3
 800a2f0:	3501      	adds	r5, #1
 800a2f2:	6063      	str	r3, [r4, #4]
 800a2f4:	7829      	ldrb	r1, [r5, #0]
 800a2f6:	1c6e      	adds	r6, r5, #1
 800a2f8:	3930      	subs	r1, #48	; 0x30
 800a2fa:	2909      	cmp	r1, #9
 800a2fc:	d903      	bls.n	800a306 <_svfiprintf_r+0x1a6>
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d0c5      	beq.n	800a28e <_svfiprintf_r+0x12e>
 800a302:	9209      	str	r2, [sp, #36]	; 0x24
 800a304:	e7c3      	b.n	800a28e <_svfiprintf_r+0x12e>
 800a306:	4342      	muls	r2, r0
 800a308:	0035      	movs	r5, r6
 800a30a:	2301      	movs	r3, #1
 800a30c:	1852      	adds	r2, r2, r1
 800a30e:	e7f1      	b.n	800a2f4 <_svfiprintf_r+0x194>
 800a310:	ab07      	add	r3, sp, #28
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	003a      	movs	r2, r7
 800a316:	0021      	movs	r1, r4
 800a318:	4b10      	ldr	r3, [pc, #64]	; (800a35c <_svfiprintf_r+0x1fc>)
 800a31a:	9803      	ldr	r0, [sp, #12]
 800a31c:	f7fc f9e2 	bl	80066e4 <_printf_float>
 800a320:	9004      	str	r0, [sp, #16]
 800a322:	9b04      	ldr	r3, [sp, #16]
 800a324:	3301      	adds	r3, #1
 800a326:	d1d3      	bne.n	800a2d0 <_svfiprintf_r+0x170>
 800a328:	89bb      	ldrh	r3, [r7, #12]
 800a32a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a32c:	065b      	lsls	r3, r3, #25
 800a32e:	d400      	bmi.n	800a332 <_svfiprintf_r+0x1d2>
 800a330:	e72d      	b.n	800a18e <_svfiprintf_r+0x2e>
 800a332:	2001      	movs	r0, #1
 800a334:	4240      	negs	r0, r0
 800a336:	e72a      	b.n	800a18e <_svfiprintf_r+0x2e>
 800a338:	ab07      	add	r3, sp, #28
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	003a      	movs	r2, r7
 800a33e:	0021      	movs	r1, r4
 800a340:	4b06      	ldr	r3, [pc, #24]	; (800a35c <_svfiprintf_r+0x1fc>)
 800a342:	9803      	ldr	r0, [sp, #12]
 800a344:	f7fc fc80 	bl	8006c48 <_printf_i>
 800a348:	e7ea      	b.n	800a320 <_svfiprintf_r+0x1c0>
 800a34a:	46c0      	nop			; (mov r8, r8)
 800a34c:	0800b53c 	.word	0x0800b53c
 800a350:	0800b542 	.word	0x0800b542
 800a354:	0800b546 	.word	0x0800b546
 800a358:	080066e5 	.word	0x080066e5
 800a35c:	0800a09d 	.word	0x0800a09d

0800a360 <nan>:
 800a360:	2000      	movs	r0, #0
 800a362:	4901      	ldr	r1, [pc, #4]	; (800a368 <nan+0x8>)
 800a364:	4770      	bx	lr
 800a366:	46c0      	nop			; (mov r8, r8)
 800a368:	7ff80000 	.word	0x7ff80000

0800a36c <_sbrk_r>:
 800a36c:	2300      	movs	r3, #0
 800a36e:	b570      	push	{r4, r5, r6, lr}
 800a370:	4d06      	ldr	r5, [pc, #24]	; (800a38c <_sbrk_r+0x20>)
 800a372:	0004      	movs	r4, r0
 800a374:	0008      	movs	r0, r1
 800a376:	602b      	str	r3, [r5, #0]
 800a378:	f7f9 f818 	bl	80033ac <_sbrk>
 800a37c:	1c43      	adds	r3, r0, #1
 800a37e:	d103      	bne.n	800a388 <_sbrk_r+0x1c>
 800a380:	682b      	ldr	r3, [r5, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d000      	beq.n	800a388 <_sbrk_r+0x1c>
 800a386:	6023      	str	r3, [r4, #0]
 800a388:	bd70      	pop	{r4, r5, r6, pc}
 800a38a:	46c0      	nop			; (mov r8, r8)
 800a38c:	200003b8 	.word	0x200003b8

0800a390 <strncmp>:
 800a390:	b530      	push	{r4, r5, lr}
 800a392:	0005      	movs	r5, r0
 800a394:	1e10      	subs	r0, r2, #0
 800a396:	d008      	beq.n	800a3aa <strncmp+0x1a>
 800a398:	2400      	movs	r4, #0
 800a39a:	3a01      	subs	r2, #1
 800a39c:	5d2b      	ldrb	r3, [r5, r4]
 800a39e:	5d08      	ldrb	r0, [r1, r4]
 800a3a0:	4283      	cmp	r3, r0
 800a3a2:	d101      	bne.n	800a3a8 <strncmp+0x18>
 800a3a4:	4294      	cmp	r4, r2
 800a3a6:	d101      	bne.n	800a3ac <strncmp+0x1c>
 800a3a8:	1a18      	subs	r0, r3, r0
 800a3aa:	bd30      	pop	{r4, r5, pc}
 800a3ac:	3401      	adds	r4, #1
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d1f4      	bne.n	800a39c <strncmp+0xc>
 800a3b2:	e7f9      	b.n	800a3a8 <strncmp+0x18>

0800a3b4 <__ascii_wctomb>:
 800a3b4:	0003      	movs	r3, r0
 800a3b6:	1e08      	subs	r0, r1, #0
 800a3b8:	d005      	beq.n	800a3c6 <__ascii_wctomb+0x12>
 800a3ba:	2aff      	cmp	r2, #255	; 0xff
 800a3bc:	d904      	bls.n	800a3c8 <__ascii_wctomb+0x14>
 800a3be:	228a      	movs	r2, #138	; 0x8a
 800a3c0:	2001      	movs	r0, #1
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	4240      	negs	r0, r0
 800a3c6:	4770      	bx	lr
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	700a      	strb	r2, [r1, #0]
 800a3cc:	e7fb      	b.n	800a3c6 <__ascii_wctomb+0x12>
	...

0800a3d0 <__assert_func>:
 800a3d0:	b530      	push	{r4, r5, lr}
 800a3d2:	0014      	movs	r4, r2
 800a3d4:	001a      	movs	r2, r3
 800a3d6:	4b09      	ldr	r3, [pc, #36]	; (800a3fc <__assert_func+0x2c>)
 800a3d8:	0005      	movs	r5, r0
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	b085      	sub	sp, #20
 800a3de:	68d8      	ldr	r0, [r3, #12]
 800a3e0:	4b07      	ldr	r3, [pc, #28]	; (800a400 <__assert_func+0x30>)
 800a3e2:	2c00      	cmp	r4, #0
 800a3e4:	d101      	bne.n	800a3ea <__assert_func+0x1a>
 800a3e6:	4b07      	ldr	r3, [pc, #28]	; (800a404 <__assert_func+0x34>)
 800a3e8:	001c      	movs	r4, r3
 800a3ea:	9301      	str	r3, [sp, #4]
 800a3ec:	9100      	str	r1, [sp, #0]
 800a3ee:	002b      	movs	r3, r5
 800a3f0:	4905      	ldr	r1, [pc, #20]	; (800a408 <__assert_func+0x38>)
 800a3f2:	9402      	str	r4, [sp, #8]
 800a3f4:	f000 f80a 	bl	800a40c <fiprintf>
 800a3f8:	f000 fa9a 	bl	800a930 <abort>
 800a3fc:	2000000c 	.word	0x2000000c
 800a400:	0800b54d 	.word	0x0800b54d
 800a404:	0800b588 	.word	0x0800b588
 800a408:	0800b55a 	.word	0x0800b55a

0800a40c <fiprintf>:
 800a40c:	b40e      	push	{r1, r2, r3}
 800a40e:	b503      	push	{r0, r1, lr}
 800a410:	0001      	movs	r1, r0
 800a412:	ab03      	add	r3, sp, #12
 800a414:	4804      	ldr	r0, [pc, #16]	; (800a428 <fiprintf+0x1c>)
 800a416:	cb04      	ldmia	r3!, {r2}
 800a418:	6800      	ldr	r0, [r0, #0]
 800a41a:	9301      	str	r3, [sp, #4]
 800a41c:	f000 f880 	bl	800a520 <_vfiprintf_r>
 800a420:	b002      	add	sp, #8
 800a422:	bc08      	pop	{r3}
 800a424:	b003      	add	sp, #12
 800a426:	4718      	bx	r3
 800a428:	2000000c 	.word	0x2000000c

0800a42c <memmove>:
 800a42c:	b510      	push	{r4, lr}
 800a42e:	4288      	cmp	r0, r1
 800a430:	d902      	bls.n	800a438 <memmove+0xc>
 800a432:	188b      	adds	r3, r1, r2
 800a434:	4298      	cmp	r0, r3
 800a436:	d303      	bcc.n	800a440 <memmove+0x14>
 800a438:	2300      	movs	r3, #0
 800a43a:	e007      	b.n	800a44c <memmove+0x20>
 800a43c:	5c8b      	ldrb	r3, [r1, r2]
 800a43e:	5483      	strb	r3, [r0, r2]
 800a440:	3a01      	subs	r2, #1
 800a442:	d2fb      	bcs.n	800a43c <memmove+0x10>
 800a444:	bd10      	pop	{r4, pc}
 800a446:	5ccc      	ldrb	r4, [r1, r3]
 800a448:	54c4      	strb	r4, [r0, r3]
 800a44a:	3301      	adds	r3, #1
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d1fa      	bne.n	800a446 <memmove+0x1a>
 800a450:	e7f8      	b.n	800a444 <memmove+0x18>
	...

0800a454 <__malloc_lock>:
 800a454:	b510      	push	{r4, lr}
 800a456:	4802      	ldr	r0, [pc, #8]	; (800a460 <__malloc_lock+0xc>)
 800a458:	f000 fc41 	bl	800acde <__retarget_lock_acquire_recursive>
 800a45c:	bd10      	pop	{r4, pc}
 800a45e:	46c0      	nop			; (mov r8, r8)
 800a460:	200003bc 	.word	0x200003bc

0800a464 <__malloc_unlock>:
 800a464:	b510      	push	{r4, lr}
 800a466:	4802      	ldr	r0, [pc, #8]	; (800a470 <__malloc_unlock+0xc>)
 800a468:	f000 fc3a 	bl	800ace0 <__retarget_lock_release_recursive>
 800a46c:	bd10      	pop	{r4, pc}
 800a46e:	46c0      	nop			; (mov r8, r8)
 800a470:	200003bc 	.word	0x200003bc

0800a474 <_realloc_r>:
 800a474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a476:	0007      	movs	r7, r0
 800a478:	000e      	movs	r6, r1
 800a47a:	0014      	movs	r4, r2
 800a47c:	2900      	cmp	r1, #0
 800a47e:	d105      	bne.n	800a48c <_realloc_r+0x18>
 800a480:	0011      	movs	r1, r2
 800a482:	f7ff fd95 	bl	8009fb0 <_malloc_r>
 800a486:	0005      	movs	r5, r0
 800a488:	0028      	movs	r0, r5
 800a48a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a48c:	2a00      	cmp	r2, #0
 800a48e:	d103      	bne.n	800a498 <_realloc_r+0x24>
 800a490:	f7ff fd22 	bl	8009ed8 <_free_r>
 800a494:	0025      	movs	r5, r4
 800a496:	e7f7      	b.n	800a488 <_realloc_r+0x14>
 800a498:	f000 fc90 	bl	800adbc <_malloc_usable_size_r>
 800a49c:	9001      	str	r0, [sp, #4]
 800a49e:	4284      	cmp	r4, r0
 800a4a0:	d803      	bhi.n	800a4aa <_realloc_r+0x36>
 800a4a2:	0035      	movs	r5, r6
 800a4a4:	0843      	lsrs	r3, r0, #1
 800a4a6:	42a3      	cmp	r3, r4
 800a4a8:	d3ee      	bcc.n	800a488 <_realloc_r+0x14>
 800a4aa:	0021      	movs	r1, r4
 800a4ac:	0038      	movs	r0, r7
 800a4ae:	f7ff fd7f 	bl	8009fb0 <_malloc_r>
 800a4b2:	1e05      	subs	r5, r0, #0
 800a4b4:	d0e8      	beq.n	800a488 <_realloc_r+0x14>
 800a4b6:	9b01      	ldr	r3, [sp, #4]
 800a4b8:	0022      	movs	r2, r4
 800a4ba:	429c      	cmp	r4, r3
 800a4bc:	d900      	bls.n	800a4c0 <_realloc_r+0x4c>
 800a4be:	001a      	movs	r2, r3
 800a4c0:	0031      	movs	r1, r6
 800a4c2:	0028      	movs	r0, r5
 800a4c4:	f7ff f809 	bl	80094da <memcpy>
 800a4c8:	0031      	movs	r1, r6
 800a4ca:	0038      	movs	r0, r7
 800a4cc:	f7ff fd04 	bl	8009ed8 <_free_r>
 800a4d0:	e7da      	b.n	800a488 <_realloc_r+0x14>

0800a4d2 <__sfputc_r>:
 800a4d2:	6893      	ldr	r3, [r2, #8]
 800a4d4:	b510      	push	{r4, lr}
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	6093      	str	r3, [r2, #8]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	da04      	bge.n	800a4e8 <__sfputc_r+0x16>
 800a4de:	6994      	ldr	r4, [r2, #24]
 800a4e0:	42a3      	cmp	r3, r4
 800a4e2:	db07      	blt.n	800a4f4 <__sfputc_r+0x22>
 800a4e4:	290a      	cmp	r1, #10
 800a4e6:	d005      	beq.n	800a4f4 <__sfputc_r+0x22>
 800a4e8:	6813      	ldr	r3, [r2, #0]
 800a4ea:	1c58      	adds	r0, r3, #1
 800a4ec:	6010      	str	r0, [r2, #0]
 800a4ee:	7019      	strb	r1, [r3, #0]
 800a4f0:	0008      	movs	r0, r1
 800a4f2:	bd10      	pop	{r4, pc}
 800a4f4:	f000 f94e 	bl	800a794 <__swbuf_r>
 800a4f8:	0001      	movs	r1, r0
 800a4fa:	e7f9      	b.n	800a4f0 <__sfputc_r+0x1e>

0800a4fc <__sfputs_r>:
 800a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fe:	0006      	movs	r6, r0
 800a500:	000f      	movs	r7, r1
 800a502:	0014      	movs	r4, r2
 800a504:	18d5      	adds	r5, r2, r3
 800a506:	42ac      	cmp	r4, r5
 800a508:	d101      	bne.n	800a50e <__sfputs_r+0x12>
 800a50a:	2000      	movs	r0, #0
 800a50c:	e007      	b.n	800a51e <__sfputs_r+0x22>
 800a50e:	7821      	ldrb	r1, [r4, #0]
 800a510:	003a      	movs	r2, r7
 800a512:	0030      	movs	r0, r6
 800a514:	f7ff ffdd 	bl	800a4d2 <__sfputc_r>
 800a518:	3401      	adds	r4, #1
 800a51a:	1c43      	adds	r3, r0, #1
 800a51c:	d1f3      	bne.n	800a506 <__sfputs_r+0xa>
 800a51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a520 <_vfiprintf_r>:
 800a520:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a522:	b0a1      	sub	sp, #132	; 0x84
 800a524:	0006      	movs	r6, r0
 800a526:	000c      	movs	r4, r1
 800a528:	001f      	movs	r7, r3
 800a52a:	9203      	str	r2, [sp, #12]
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d004      	beq.n	800a53a <_vfiprintf_r+0x1a>
 800a530:	6983      	ldr	r3, [r0, #24]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <_vfiprintf_r+0x1a>
 800a536:	f000 fb31 	bl	800ab9c <__sinit>
 800a53a:	4b8e      	ldr	r3, [pc, #568]	; (800a774 <_vfiprintf_r+0x254>)
 800a53c:	429c      	cmp	r4, r3
 800a53e:	d11c      	bne.n	800a57a <_vfiprintf_r+0x5a>
 800a540:	6874      	ldr	r4, [r6, #4]
 800a542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a544:	07db      	lsls	r3, r3, #31
 800a546:	d405      	bmi.n	800a554 <_vfiprintf_r+0x34>
 800a548:	89a3      	ldrh	r3, [r4, #12]
 800a54a:	059b      	lsls	r3, r3, #22
 800a54c:	d402      	bmi.n	800a554 <_vfiprintf_r+0x34>
 800a54e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a550:	f000 fbc5 	bl	800acde <__retarget_lock_acquire_recursive>
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	071b      	lsls	r3, r3, #28
 800a558:	d502      	bpl.n	800a560 <_vfiprintf_r+0x40>
 800a55a:	6923      	ldr	r3, [r4, #16]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d11d      	bne.n	800a59c <_vfiprintf_r+0x7c>
 800a560:	0021      	movs	r1, r4
 800a562:	0030      	movs	r0, r6
 800a564:	f000 f96c 	bl	800a840 <__swsetup_r>
 800a568:	2800      	cmp	r0, #0
 800a56a:	d017      	beq.n	800a59c <_vfiprintf_r+0x7c>
 800a56c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a56e:	07db      	lsls	r3, r3, #31
 800a570:	d50d      	bpl.n	800a58e <_vfiprintf_r+0x6e>
 800a572:	2001      	movs	r0, #1
 800a574:	4240      	negs	r0, r0
 800a576:	b021      	add	sp, #132	; 0x84
 800a578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a57a:	4b7f      	ldr	r3, [pc, #508]	; (800a778 <_vfiprintf_r+0x258>)
 800a57c:	429c      	cmp	r4, r3
 800a57e:	d101      	bne.n	800a584 <_vfiprintf_r+0x64>
 800a580:	68b4      	ldr	r4, [r6, #8]
 800a582:	e7de      	b.n	800a542 <_vfiprintf_r+0x22>
 800a584:	4b7d      	ldr	r3, [pc, #500]	; (800a77c <_vfiprintf_r+0x25c>)
 800a586:	429c      	cmp	r4, r3
 800a588:	d1db      	bne.n	800a542 <_vfiprintf_r+0x22>
 800a58a:	68f4      	ldr	r4, [r6, #12]
 800a58c:	e7d9      	b.n	800a542 <_vfiprintf_r+0x22>
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	059b      	lsls	r3, r3, #22
 800a592:	d4ee      	bmi.n	800a572 <_vfiprintf_r+0x52>
 800a594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a596:	f000 fba3 	bl	800ace0 <__retarget_lock_release_recursive>
 800a59a:	e7ea      	b.n	800a572 <_vfiprintf_r+0x52>
 800a59c:	2300      	movs	r3, #0
 800a59e:	ad08      	add	r5, sp, #32
 800a5a0:	616b      	str	r3, [r5, #20]
 800a5a2:	3320      	adds	r3, #32
 800a5a4:	766b      	strb	r3, [r5, #25]
 800a5a6:	3310      	adds	r3, #16
 800a5a8:	76ab      	strb	r3, [r5, #26]
 800a5aa:	9707      	str	r7, [sp, #28]
 800a5ac:	9f03      	ldr	r7, [sp, #12]
 800a5ae:	783b      	ldrb	r3, [r7, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d001      	beq.n	800a5b8 <_vfiprintf_r+0x98>
 800a5b4:	2b25      	cmp	r3, #37	; 0x25
 800a5b6:	d14e      	bne.n	800a656 <_vfiprintf_r+0x136>
 800a5b8:	9b03      	ldr	r3, [sp, #12]
 800a5ba:	1afb      	subs	r3, r7, r3
 800a5bc:	9305      	str	r3, [sp, #20]
 800a5be:	9b03      	ldr	r3, [sp, #12]
 800a5c0:	429f      	cmp	r7, r3
 800a5c2:	d00d      	beq.n	800a5e0 <_vfiprintf_r+0xc0>
 800a5c4:	9b05      	ldr	r3, [sp, #20]
 800a5c6:	0021      	movs	r1, r4
 800a5c8:	0030      	movs	r0, r6
 800a5ca:	9a03      	ldr	r2, [sp, #12]
 800a5cc:	f7ff ff96 	bl	800a4fc <__sfputs_r>
 800a5d0:	1c43      	adds	r3, r0, #1
 800a5d2:	d100      	bne.n	800a5d6 <_vfiprintf_r+0xb6>
 800a5d4:	e0b5      	b.n	800a742 <_vfiprintf_r+0x222>
 800a5d6:	696a      	ldr	r2, [r5, #20]
 800a5d8:	9b05      	ldr	r3, [sp, #20]
 800a5da:	4694      	mov	ip, r2
 800a5dc:	4463      	add	r3, ip
 800a5de:	616b      	str	r3, [r5, #20]
 800a5e0:	783b      	ldrb	r3, [r7, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d100      	bne.n	800a5e8 <_vfiprintf_r+0xc8>
 800a5e6:	e0ac      	b.n	800a742 <_vfiprintf_r+0x222>
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	1c7b      	adds	r3, r7, #1
 800a5ec:	9303      	str	r3, [sp, #12]
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	4252      	negs	r2, r2
 800a5f2:	606a      	str	r2, [r5, #4]
 800a5f4:	a904      	add	r1, sp, #16
 800a5f6:	3254      	adds	r2, #84	; 0x54
 800a5f8:	1852      	adds	r2, r2, r1
 800a5fa:	602b      	str	r3, [r5, #0]
 800a5fc:	60eb      	str	r3, [r5, #12]
 800a5fe:	60ab      	str	r3, [r5, #8]
 800a600:	7013      	strb	r3, [r2, #0]
 800a602:	65ab      	str	r3, [r5, #88]	; 0x58
 800a604:	9b03      	ldr	r3, [sp, #12]
 800a606:	2205      	movs	r2, #5
 800a608:	7819      	ldrb	r1, [r3, #0]
 800a60a:	485d      	ldr	r0, [pc, #372]	; (800a780 <_vfiprintf_r+0x260>)
 800a60c:	f7fe ff5a 	bl	80094c4 <memchr>
 800a610:	9b03      	ldr	r3, [sp, #12]
 800a612:	1c5f      	adds	r7, r3, #1
 800a614:	2800      	cmp	r0, #0
 800a616:	d120      	bne.n	800a65a <_vfiprintf_r+0x13a>
 800a618:	682a      	ldr	r2, [r5, #0]
 800a61a:	06d3      	lsls	r3, r2, #27
 800a61c:	d504      	bpl.n	800a628 <_vfiprintf_r+0x108>
 800a61e:	2353      	movs	r3, #83	; 0x53
 800a620:	a904      	add	r1, sp, #16
 800a622:	185b      	adds	r3, r3, r1
 800a624:	2120      	movs	r1, #32
 800a626:	7019      	strb	r1, [r3, #0]
 800a628:	0713      	lsls	r3, r2, #28
 800a62a:	d504      	bpl.n	800a636 <_vfiprintf_r+0x116>
 800a62c:	2353      	movs	r3, #83	; 0x53
 800a62e:	a904      	add	r1, sp, #16
 800a630:	185b      	adds	r3, r3, r1
 800a632:	212b      	movs	r1, #43	; 0x2b
 800a634:	7019      	strb	r1, [r3, #0]
 800a636:	9b03      	ldr	r3, [sp, #12]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b2a      	cmp	r3, #42	; 0x2a
 800a63c:	d016      	beq.n	800a66c <_vfiprintf_r+0x14c>
 800a63e:	2100      	movs	r1, #0
 800a640:	68eb      	ldr	r3, [r5, #12]
 800a642:	9f03      	ldr	r7, [sp, #12]
 800a644:	783a      	ldrb	r2, [r7, #0]
 800a646:	1c78      	adds	r0, r7, #1
 800a648:	3a30      	subs	r2, #48	; 0x30
 800a64a:	4684      	mov	ip, r0
 800a64c:	2a09      	cmp	r2, #9
 800a64e:	d94f      	bls.n	800a6f0 <_vfiprintf_r+0x1d0>
 800a650:	2900      	cmp	r1, #0
 800a652:	d111      	bne.n	800a678 <_vfiprintf_r+0x158>
 800a654:	e017      	b.n	800a686 <_vfiprintf_r+0x166>
 800a656:	3701      	adds	r7, #1
 800a658:	e7a9      	b.n	800a5ae <_vfiprintf_r+0x8e>
 800a65a:	4b49      	ldr	r3, [pc, #292]	; (800a780 <_vfiprintf_r+0x260>)
 800a65c:	682a      	ldr	r2, [r5, #0]
 800a65e:	1ac0      	subs	r0, r0, r3
 800a660:	2301      	movs	r3, #1
 800a662:	4083      	lsls	r3, r0
 800a664:	4313      	orrs	r3, r2
 800a666:	602b      	str	r3, [r5, #0]
 800a668:	9703      	str	r7, [sp, #12]
 800a66a:	e7cb      	b.n	800a604 <_vfiprintf_r+0xe4>
 800a66c:	9b07      	ldr	r3, [sp, #28]
 800a66e:	1d19      	adds	r1, r3, #4
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	9107      	str	r1, [sp, #28]
 800a674:	2b00      	cmp	r3, #0
 800a676:	db01      	blt.n	800a67c <_vfiprintf_r+0x15c>
 800a678:	930b      	str	r3, [sp, #44]	; 0x2c
 800a67a:	e004      	b.n	800a686 <_vfiprintf_r+0x166>
 800a67c:	425b      	negs	r3, r3
 800a67e:	60eb      	str	r3, [r5, #12]
 800a680:	2302      	movs	r3, #2
 800a682:	4313      	orrs	r3, r2
 800a684:	602b      	str	r3, [r5, #0]
 800a686:	783b      	ldrb	r3, [r7, #0]
 800a688:	2b2e      	cmp	r3, #46	; 0x2e
 800a68a:	d10a      	bne.n	800a6a2 <_vfiprintf_r+0x182>
 800a68c:	787b      	ldrb	r3, [r7, #1]
 800a68e:	2b2a      	cmp	r3, #42	; 0x2a
 800a690:	d137      	bne.n	800a702 <_vfiprintf_r+0x1e2>
 800a692:	9b07      	ldr	r3, [sp, #28]
 800a694:	3702      	adds	r7, #2
 800a696:	1d1a      	adds	r2, r3, #4
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	9207      	str	r2, [sp, #28]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	db2d      	blt.n	800a6fc <_vfiprintf_r+0x1dc>
 800a6a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a6a2:	2203      	movs	r2, #3
 800a6a4:	7839      	ldrb	r1, [r7, #0]
 800a6a6:	4837      	ldr	r0, [pc, #220]	; (800a784 <_vfiprintf_r+0x264>)
 800a6a8:	f7fe ff0c 	bl	80094c4 <memchr>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d007      	beq.n	800a6c0 <_vfiprintf_r+0x1a0>
 800a6b0:	4b34      	ldr	r3, [pc, #208]	; (800a784 <_vfiprintf_r+0x264>)
 800a6b2:	682a      	ldr	r2, [r5, #0]
 800a6b4:	1ac0      	subs	r0, r0, r3
 800a6b6:	2340      	movs	r3, #64	; 0x40
 800a6b8:	4083      	lsls	r3, r0
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	3701      	adds	r7, #1
 800a6be:	602b      	str	r3, [r5, #0]
 800a6c0:	7839      	ldrb	r1, [r7, #0]
 800a6c2:	1c7b      	adds	r3, r7, #1
 800a6c4:	2206      	movs	r2, #6
 800a6c6:	4830      	ldr	r0, [pc, #192]	; (800a788 <_vfiprintf_r+0x268>)
 800a6c8:	9303      	str	r3, [sp, #12]
 800a6ca:	7629      	strb	r1, [r5, #24]
 800a6cc:	f7fe fefa 	bl	80094c4 <memchr>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	d045      	beq.n	800a760 <_vfiprintf_r+0x240>
 800a6d4:	4b2d      	ldr	r3, [pc, #180]	; (800a78c <_vfiprintf_r+0x26c>)
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d127      	bne.n	800a72a <_vfiprintf_r+0x20a>
 800a6da:	2207      	movs	r2, #7
 800a6dc:	9b07      	ldr	r3, [sp, #28]
 800a6de:	3307      	adds	r3, #7
 800a6e0:	4393      	bics	r3, r2
 800a6e2:	3308      	adds	r3, #8
 800a6e4:	9307      	str	r3, [sp, #28]
 800a6e6:	696b      	ldr	r3, [r5, #20]
 800a6e8:	9a04      	ldr	r2, [sp, #16]
 800a6ea:	189b      	adds	r3, r3, r2
 800a6ec:	616b      	str	r3, [r5, #20]
 800a6ee:	e75d      	b.n	800a5ac <_vfiprintf_r+0x8c>
 800a6f0:	210a      	movs	r1, #10
 800a6f2:	434b      	muls	r3, r1
 800a6f4:	4667      	mov	r7, ip
 800a6f6:	189b      	adds	r3, r3, r2
 800a6f8:	3909      	subs	r1, #9
 800a6fa:	e7a3      	b.n	800a644 <_vfiprintf_r+0x124>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	425b      	negs	r3, r3
 800a700:	e7ce      	b.n	800a6a0 <_vfiprintf_r+0x180>
 800a702:	2300      	movs	r3, #0
 800a704:	001a      	movs	r2, r3
 800a706:	3701      	adds	r7, #1
 800a708:	606b      	str	r3, [r5, #4]
 800a70a:	7839      	ldrb	r1, [r7, #0]
 800a70c:	1c78      	adds	r0, r7, #1
 800a70e:	3930      	subs	r1, #48	; 0x30
 800a710:	4684      	mov	ip, r0
 800a712:	2909      	cmp	r1, #9
 800a714:	d903      	bls.n	800a71e <_vfiprintf_r+0x1fe>
 800a716:	2b00      	cmp	r3, #0
 800a718:	d0c3      	beq.n	800a6a2 <_vfiprintf_r+0x182>
 800a71a:	9209      	str	r2, [sp, #36]	; 0x24
 800a71c:	e7c1      	b.n	800a6a2 <_vfiprintf_r+0x182>
 800a71e:	230a      	movs	r3, #10
 800a720:	435a      	muls	r2, r3
 800a722:	4667      	mov	r7, ip
 800a724:	1852      	adds	r2, r2, r1
 800a726:	3b09      	subs	r3, #9
 800a728:	e7ef      	b.n	800a70a <_vfiprintf_r+0x1ea>
 800a72a:	ab07      	add	r3, sp, #28
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	0022      	movs	r2, r4
 800a730:	0029      	movs	r1, r5
 800a732:	0030      	movs	r0, r6
 800a734:	4b16      	ldr	r3, [pc, #88]	; (800a790 <_vfiprintf_r+0x270>)
 800a736:	f7fb ffd5 	bl	80066e4 <_printf_float>
 800a73a:	9004      	str	r0, [sp, #16]
 800a73c:	9b04      	ldr	r3, [sp, #16]
 800a73e:	3301      	adds	r3, #1
 800a740:	d1d1      	bne.n	800a6e6 <_vfiprintf_r+0x1c6>
 800a742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a744:	07db      	lsls	r3, r3, #31
 800a746:	d405      	bmi.n	800a754 <_vfiprintf_r+0x234>
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	059b      	lsls	r3, r3, #22
 800a74c:	d402      	bmi.n	800a754 <_vfiprintf_r+0x234>
 800a74e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a750:	f000 fac6 	bl	800ace0 <__retarget_lock_release_recursive>
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	065b      	lsls	r3, r3, #25
 800a758:	d500      	bpl.n	800a75c <_vfiprintf_r+0x23c>
 800a75a:	e70a      	b.n	800a572 <_vfiprintf_r+0x52>
 800a75c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a75e:	e70a      	b.n	800a576 <_vfiprintf_r+0x56>
 800a760:	ab07      	add	r3, sp, #28
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	0022      	movs	r2, r4
 800a766:	0029      	movs	r1, r5
 800a768:	0030      	movs	r0, r6
 800a76a:	4b09      	ldr	r3, [pc, #36]	; (800a790 <_vfiprintf_r+0x270>)
 800a76c:	f7fc fa6c 	bl	8006c48 <_printf_i>
 800a770:	e7e3      	b.n	800a73a <_vfiprintf_r+0x21a>
 800a772:	46c0      	nop			; (mov r8, r8)
 800a774:	0800b5ac 	.word	0x0800b5ac
 800a778:	0800b5cc 	.word	0x0800b5cc
 800a77c:	0800b58c 	.word	0x0800b58c
 800a780:	0800b53c 	.word	0x0800b53c
 800a784:	0800b542 	.word	0x0800b542
 800a788:	0800b546 	.word	0x0800b546
 800a78c:	080066e5 	.word	0x080066e5
 800a790:	0800a4fd 	.word	0x0800a4fd

0800a794 <__swbuf_r>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	0005      	movs	r5, r0
 800a798:	000e      	movs	r6, r1
 800a79a:	0014      	movs	r4, r2
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d004      	beq.n	800a7aa <__swbuf_r+0x16>
 800a7a0:	6983      	ldr	r3, [r0, #24]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d101      	bne.n	800a7aa <__swbuf_r+0x16>
 800a7a6:	f000 f9f9 	bl	800ab9c <__sinit>
 800a7aa:	4b22      	ldr	r3, [pc, #136]	; (800a834 <__swbuf_r+0xa0>)
 800a7ac:	429c      	cmp	r4, r3
 800a7ae:	d12e      	bne.n	800a80e <__swbuf_r+0x7a>
 800a7b0:	686c      	ldr	r4, [r5, #4]
 800a7b2:	69a3      	ldr	r3, [r4, #24]
 800a7b4:	60a3      	str	r3, [r4, #8]
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	071b      	lsls	r3, r3, #28
 800a7ba:	d532      	bpl.n	800a822 <__swbuf_r+0x8e>
 800a7bc:	6923      	ldr	r3, [r4, #16]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d02f      	beq.n	800a822 <__swbuf_r+0x8e>
 800a7c2:	6823      	ldr	r3, [r4, #0]
 800a7c4:	6922      	ldr	r2, [r4, #16]
 800a7c6:	b2f7      	uxtb	r7, r6
 800a7c8:	1a98      	subs	r0, r3, r2
 800a7ca:	6963      	ldr	r3, [r4, #20]
 800a7cc:	b2f6      	uxtb	r6, r6
 800a7ce:	4283      	cmp	r3, r0
 800a7d0:	dc05      	bgt.n	800a7de <__swbuf_r+0x4a>
 800a7d2:	0021      	movs	r1, r4
 800a7d4:	0028      	movs	r0, r5
 800a7d6:	f000 f93f 	bl	800aa58 <_fflush_r>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d127      	bne.n	800a82e <__swbuf_r+0x9a>
 800a7de:	68a3      	ldr	r3, [r4, #8]
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	60a3      	str	r3, [r4, #8]
 800a7e6:	6823      	ldr	r3, [r4, #0]
 800a7e8:	1c5a      	adds	r2, r3, #1
 800a7ea:	6022      	str	r2, [r4, #0]
 800a7ec:	701f      	strb	r7, [r3, #0]
 800a7ee:	6963      	ldr	r3, [r4, #20]
 800a7f0:	4283      	cmp	r3, r0
 800a7f2:	d004      	beq.n	800a7fe <__swbuf_r+0x6a>
 800a7f4:	89a3      	ldrh	r3, [r4, #12]
 800a7f6:	07db      	lsls	r3, r3, #31
 800a7f8:	d507      	bpl.n	800a80a <__swbuf_r+0x76>
 800a7fa:	2e0a      	cmp	r6, #10
 800a7fc:	d105      	bne.n	800a80a <__swbuf_r+0x76>
 800a7fe:	0021      	movs	r1, r4
 800a800:	0028      	movs	r0, r5
 800a802:	f000 f929 	bl	800aa58 <_fflush_r>
 800a806:	2800      	cmp	r0, #0
 800a808:	d111      	bne.n	800a82e <__swbuf_r+0x9a>
 800a80a:	0030      	movs	r0, r6
 800a80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a80e:	4b0a      	ldr	r3, [pc, #40]	; (800a838 <__swbuf_r+0xa4>)
 800a810:	429c      	cmp	r4, r3
 800a812:	d101      	bne.n	800a818 <__swbuf_r+0x84>
 800a814:	68ac      	ldr	r4, [r5, #8]
 800a816:	e7cc      	b.n	800a7b2 <__swbuf_r+0x1e>
 800a818:	4b08      	ldr	r3, [pc, #32]	; (800a83c <__swbuf_r+0xa8>)
 800a81a:	429c      	cmp	r4, r3
 800a81c:	d1c9      	bne.n	800a7b2 <__swbuf_r+0x1e>
 800a81e:	68ec      	ldr	r4, [r5, #12]
 800a820:	e7c7      	b.n	800a7b2 <__swbuf_r+0x1e>
 800a822:	0021      	movs	r1, r4
 800a824:	0028      	movs	r0, r5
 800a826:	f000 f80b 	bl	800a840 <__swsetup_r>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d0c9      	beq.n	800a7c2 <__swbuf_r+0x2e>
 800a82e:	2601      	movs	r6, #1
 800a830:	4276      	negs	r6, r6
 800a832:	e7ea      	b.n	800a80a <__swbuf_r+0x76>
 800a834:	0800b5ac 	.word	0x0800b5ac
 800a838:	0800b5cc 	.word	0x0800b5cc
 800a83c:	0800b58c 	.word	0x0800b58c

0800a840 <__swsetup_r>:
 800a840:	4b37      	ldr	r3, [pc, #220]	; (800a920 <__swsetup_r+0xe0>)
 800a842:	b570      	push	{r4, r5, r6, lr}
 800a844:	681d      	ldr	r5, [r3, #0]
 800a846:	0006      	movs	r6, r0
 800a848:	000c      	movs	r4, r1
 800a84a:	2d00      	cmp	r5, #0
 800a84c:	d005      	beq.n	800a85a <__swsetup_r+0x1a>
 800a84e:	69ab      	ldr	r3, [r5, #24]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d102      	bne.n	800a85a <__swsetup_r+0x1a>
 800a854:	0028      	movs	r0, r5
 800a856:	f000 f9a1 	bl	800ab9c <__sinit>
 800a85a:	4b32      	ldr	r3, [pc, #200]	; (800a924 <__swsetup_r+0xe4>)
 800a85c:	429c      	cmp	r4, r3
 800a85e:	d10f      	bne.n	800a880 <__swsetup_r+0x40>
 800a860:	686c      	ldr	r4, [r5, #4]
 800a862:	230c      	movs	r3, #12
 800a864:	5ee2      	ldrsh	r2, [r4, r3]
 800a866:	b293      	uxth	r3, r2
 800a868:	0711      	lsls	r1, r2, #28
 800a86a:	d42d      	bmi.n	800a8c8 <__swsetup_r+0x88>
 800a86c:	06d9      	lsls	r1, r3, #27
 800a86e:	d411      	bmi.n	800a894 <__swsetup_r+0x54>
 800a870:	2309      	movs	r3, #9
 800a872:	2001      	movs	r0, #1
 800a874:	6033      	str	r3, [r6, #0]
 800a876:	3337      	adds	r3, #55	; 0x37
 800a878:	4313      	orrs	r3, r2
 800a87a:	81a3      	strh	r3, [r4, #12]
 800a87c:	4240      	negs	r0, r0
 800a87e:	bd70      	pop	{r4, r5, r6, pc}
 800a880:	4b29      	ldr	r3, [pc, #164]	; (800a928 <__swsetup_r+0xe8>)
 800a882:	429c      	cmp	r4, r3
 800a884:	d101      	bne.n	800a88a <__swsetup_r+0x4a>
 800a886:	68ac      	ldr	r4, [r5, #8]
 800a888:	e7eb      	b.n	800a862 <__swsetup_r+0x22>
 800a88a:	4b28      	ldr	r3, [pc, #160]	; (800a92c <__swsetup_r+0xec>)
 800a88c:	429c      	cmp	r4, r3
 800a88e:	d1e8      	bne.n	800a862 <__swsetup_r+0x22>
 800a890:	68ec      	ldr	r4, [r5, #12]
 800a892:	e7e6      	b.n	800a862 <__swsetup_r+0x22>
 800a894:	075b      	lsls	r3, r3, #29
 800a896:	d513      	bpl.n	800a8c0 <__swsetup_r+0x80>
 800a898:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a89a:	2900      	cmp	r1, #0
 800a89c:	d008      	beq.n	800a8b0 <__swsetup_r+0x70>
 800a89e:	0023      	movs	r3, r4
 800a8a0:	3344      	adds	r3, #68	; 0x44
 800a8a2:	4299      	cmp	r1, r3
 800a8a4:	d002      	beq.n	800a8ac <__swsetup_r+0x6c>
 800a8a6:	0030      	movs	r0, r6
 800a8a8:	f7ff fb16 	bl	8009ed8 <_free_r>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	6363      	str	r3, [r4, #52]	; 0x34
 800a8b0:	2224      	movs	r2, #36	; 0x24
 800a8b2:	89a3      	ldrh	r3, [r4, #12]
 800a8b4:	4393      	bics	r3, r2
 800a8b6:	81a3      	strh	r3, [r4, #12]
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	6063      	str	r3, [r4, #4]
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	6023      	str	r3, [r4, #0]
 800a8c0:	2308      	movs	r3, #8
 800a8c2:	89a2      	ldrh	r2, [r4, #12]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	81a3      	strh	r3, [r4, #12]
 800a8c8:	6923      	ldr	r3, [r4, #16]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d10b      	bne.n	800a8e6 <__swsetup_r+0xa6>
 800a8ce:	21a0      	movs	r1, #160	; 0xa0
 800a8d0:	2280      	movs	r2, #128	; 0x80
 800a8d2:	89a3      	ldrh	r3, [r4, #12]
 800a8d4:	0089      	lsls	r1, r1, #2
 800a8d6:	0092      	lsls	r2, r2, #2
 800a8d8:	400b      	ands	r3, r1
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d003      	beq.n	800a8e6 <__swsetup_r+0xa6>
 800a8de:	0021      	movs	r1, r4
 800a8e0:	0030      	movs	r0, r6
 800a8e2:	f000 fa27 	bl	800ad34 <__smakebuf_r>
 800a8e6:	220c      	movs	r2, #12
 800a8e8:	5ea3      	ldrsh	r3, [r4, r2]
 800a8ea:	2001      	movs	r0, #1
 800a8ec:	001a      	movs	r2, r3
 800a8ee:	b299      	uxth	r1, r3
 800a8f0:	4002      	ands	r2, r0
 800a8f2:	4203      	tst	r3, r0
 800a8f4:	d00f      	beq.n	800a916 <__swsetup_r+0xd6>
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	60a2      	str	r2, [r4, #8]
 800a8fa:	6962      	ldr	r2, [r4, #20]
 800a8fc:	4252      	negs	r2, r2
 800a8fe:	61a2      	str	r2, [r4, #24]
 800a900:	2000      	movs	r0, #0
 800a902:	6922      	ldr	r2, [r4, #16]
 800a904:	4282      	cmp	r2, r0
 800a906:	d1ba      	bne.n	800a87e <__swsetup_r+0x3e>
 800a908:	060a      	lsls	r2, r1, #24
 800a90a:	d5b8      	bpl.n	800a87e <__swsetup_r+0x3e>
 800a90c:	2240      	movs	r2, #64	; 0x40
 800a90e:	4313      	orrs	r3, r2
 800a910:	81a3      	strh	r3, [r4, #12]
 800a912:	3801      	subs	r0, #1
 800a914:	e7b3      	b.n	800a87e <__swsetup_r+0x3e>
 800a916:	0788      	lsls	r0, r1, #30
 800a918:	d400      	bmi.n	800a91c <__swsetup_r+0xdc>
 800a91a:	6962      	ldr	r2, [r4, #20]
 800a91c:	60a2      	str	r2, [r4, #8]
 800a91e:	e7ef      	b.n	800a900 <__swsetup_r+0xc0>
 800a920:	2000000c 	.word	0x2000000c
 800a924:	0800b5ac 	.word	0x0800b5ac
 800a928:	0800b5cc 	.word	0x0800b5cc
 800a92c:	0800b58c 	.word	0x0800b58c

0800a930 <abort>:
 800a930:	2006      	movs	r0, #6
 800a932:	b510      	push	{r4, lr}
 800a934:	f000 fa74 	bl	800ae20 <raise>
 800a938:	2001      	movs	r0, #1
 800a93a:	f7f8 fcc5 	bl	80032c8 <_exit>
	...

0800a940 <__sflush_r>:
 800a940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a942:	898b      	ldrh	r3, [r1, #12]
 800a944:	0005      	movs	r5, r0
 800a946:	000c      	movs	r4, r1
 800a948:	071a      	lsls	r2, r3, #28
 800a94a:	d45f      	bmi.n	800aa0c <__sflush_r+0xcc>
 800a94c:	684a      	ldr	r2, [r1, #4]
 800a94e:	2a00      	cmp	r2, #0
 800a950:	dc04      	bgt.n	800a95c <__sflush_r+0x1c>
 800a952:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a954:	2a00      	cmp	r2, #0
 800a956:	dc01      	bgt.n	800a95c <__sflush_r+0x1c>
 800a958:	2000      	movs	r0, #0
 800a95a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a95c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a95e:	2f00      	cmp	r7, #0
 800a960:	d0fa      	beq.n	800a958 <__sflush_r+0x18>
 800a962:	2200      	movs	r2, #0
 800a964:	2180      	movs	r1, #128	; 0x80
 800a966:	682e      	ldr	r6, [r5, #0]
 800a968:	602a      	str	r2, [r5, #0]
 800a96a:	001a      	movs	r2, r3
 800a96c:	0149      	lsls	r1, r1, #5
 800a96e:	400a      	ands	r2, r1
 800a970:	420b      	tst	r3, r1
 800a972:	d034      	beq.n	800a9de <__sflush_r+0x9e>
 800a974:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a976:	89a3      	ldrh	r3, [r4, #12]
 800a978:	075b      	lsls	r3, r3, #29
 800a97a:	d506      	bpl.n	800a98a <__sflush_r+0x4a>
 800a97c:	6863      	ldr	r3, [r4, #4]
 800a97e:	1ac0      	subs	r0, r0, r3
 800a980:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a982:	2b00      	cmp	r3, #0
 800a984:	d001      	beq.n	800a98a <__sflush_r+0x4a>
 800a986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a988:	1ac0      	subs	r0, r0, r3
 800a98a:	0002      	movs	r2, r0
 800a98c:	6a21      	ldr	r1, [r4, #32]
 800a98e:	2300      	movs	r3, #0
 800a990:	0028      	movs	r0, r5
 800a992:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a994:	47b8      	blx	r7
 800a996:	89a1      	ldrh	r1, [r4, #12]
 800a998:	1c43      	adds	r3, r0, #1
 800a99a:	d106      	bne.n	800a9aa <__sflush_r+0x6a>
 800a99c:	682b      	ldr	r3, [r5, #0]
 800a99e:	2b1d      	cmp	r3, #29
 800a9a0:	d831      	bhi.n	800aa06 <__sflush_r+0xc6>
 800a9a2:	4a2c      	ldr	r2, [pc, #176]	; (800aa54 <__sflush_r+0x114>)
 800a9a4:	40da      	lsrs	r2, r3
 800a9a6:	07d3      	lsls	r3, r2, #31
 800a9a8:	d52d      	bpl.n	800aa06 <__sflush_r+0xc6>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	6063      	str	r3, [r4, #4]
 800a9ae:	6923      	ldr	r3, [r4, #16]
 800a9b0:	6023      	str	r3, [r4, #0]
 800a9b2:	04cb      	lsls	r3, r1, #19
 800a9b4:	d505      	bpl.n	800a9c2 <__sflush_r+0x82>
 800a9b6:	1c43      	adds	r3, r0, #1
 800a9b8:	d102      	bne.n	800a9c0 <__sflush_r+0x80>
 800a9ba:	682b      	ldr	r3, [r5, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d100      	bne.n	800a9c2 <__sflush_r+0x82>
 800a9c0:	6560      	str	r0, [r4, #84]	; 0x54
 800a9c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9c4:	602e      	str	r6, [r5, #0]
 800a9c6:	2900      	cmp	r1, #0
 800a9c8:	d0c6      	beq.n	800a958 <__sflush_r+0x18>
 800a9ca:	0023      	movs	r3, r4
 800a9cc:	3344      	adds	r3, #68	; 0x44
 800a9ce:	4299      	cmp	r1, r3
 800a9d0:	d002      	beq.n	800a9d8 <__sflush_r+0x98>
 800a9d2:	0028      	movs	r0, r5
 800a9d4:	f7ff fa80 	bl	8009ed8 <_free_r>
 800a9d8:	2000      	movs	r0, #0
 800a9da:	6360      	str	r0, [r4, #52]	; 0x34
 800a9dc:	e7bd      	b.n	800a95a <__sflush_r+0x1a>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	0028      	movs	r0, r5
 800a9e2:	6a21      	ldr	r1, [r4, #32]
 800a9e4:	47b8      	blx	r7
 800a9e6:	1c43      	adds	r3, r0, #1
 800a9e8:	d1c5      	bne.n	800a976 <__sflush_r+0x36>
 800a9ea:	682b      	ldr	r3, [r5, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d0c2      	beq.n	800a976 <__sflush_r+0x36>
 800a9f0:	2b1d      	cmp	r3, #29
 800a9f2:	d001      	beq.n	800a9f8 <__sflush_r+0xb8>
 800a9f4:	2b16      	cmp	r3, #22
 800a9f6:	d101      	bne.n	800a9fc <__sflush_r+0xbc>
 800a9f8:	602e      	str	r6, [r5, #0]
 800a9fa:	e7ad      	b.n	800a958 <__sflush_r+0x18>
 800a9fc:	2340      	movs	r3, #64	; 0x40
 800a9fe:	89a2      	ldrh	r2, [r4, #12]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	81a3      	strh	r3, [r4, #12]
 800aa04:	e7a9      	b.n	800a95a <__sflush_r+0x1a>
 800aa06:	2340      	movs	r3, #64	; 0x40
 800aa08:	430b      	orrs	r3, r1
 800aa0a:	e7fa      	b.n	800aa02 <__sflush_r+0xc2>
 800aa0c:	690f      	ldr	r7, [r1, #16]
 800aa0e:	2f00      	cmp	r7, #0
 800aa10:	d0a2      	beq.n	800a958 <__sflush_r+0x18>
 800aa12:	680a      	ldr	r2, [r1, #0]
 800aa14:	600f      	str	r7, [r1, #0]
 800aa16:	1bd2      	subs	r2, r2, r7
 800aa18:	9201      	str	r2, [sp, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	079b      	lsls	r3, r3, #30
 800aa1e:	d100      	bne.n	800aa22 <__sflush_r+0xe2>
 800aa20:	694a      	ldr	r2, [r1, #20]
 800aa22:	60a2      	str	r2, [r4, #8]
 800aa24:	9b01      	ldr	r3, [sp, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	dc00      	bgt.n	800aa2c <__sflush_r+0xec>
 800aa2a:	e795      	b.n	800a958 <__sflush_r+0x18>
 800aa2c:	003a      	movs	r2, r7
 800aa2e:	0028      	movs	r0, r5
 800aa30:	9b01      	ldr	r3, [sp, #4]
 800aa32:	6a21      	ldr	r1, [r4, #32]
 800aa34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa36:	47b0      	blx	r6
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	dc06      	bgt.n	800aa4a <__sflush_r+0x10a>
 800aa3c:	2340      	movs	r3, #64	; 0x40
 800aa3e:	2001      	movs	r0, #1
 800aa40:	89a2      	ldrh	r2, [r4, #12]
 800aa42:	4240      	negs	r0, r0
 800aa44:	4313      	orrs	r3, r2
 800aa46:	81a3      	strh	r3, [r4, #12]
 800aa48:	e787      	b.n	800a95a <__sflush_r+0x1a>
 800aa4a:	9b01      	ldr	r3, [sp, #4]
 800aa4c:	183f      	adds	r7, r7, r0
 800aa4e:	1a1b      	subs	r3, r3, r0
 800aa50:	9301      	str	r3, [sp, #4]
 800aa52:	e7e7      	b.n	800aa24 <__sflush_r+0xe4>
 800aa54:	20400001 	.word	0x20400001

0800aa58 <_fflush_r>:
 800aa58:	690b      	ldr	r3, [r1, #16]
 800aa5a:	b570      	push	{r4, r5, r6, lr}
 800aa5c:	0005      	movs	r5, r0
 800aa5e:	000c      	movs	r4, r1
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d102      	bne.n	800aa6a <_fflush_r+0x12>
 800aa64:	2500      	movs	r5, #0
 800aa66:	0028      	movs	r0, r5
 800aa68:	bd70      	pop	{r4, r5, r6, pc}
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d004      	beq.n	800aa78 <_fflush_r+0x20>
 800aa6e:	6983      	ldr	r3, [r0, #24]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <_fflush_r+0x20>
 800aa74:	f000 f892 	bl	800ab9c <__sinit>
 800aa78:	4b14      	ldr	r3, [pc, #80]	; (800aacc <_fflush_r+0x74>)
 800aa7a:	429c      	cmp	r4, r3
 800aa7c:	d11b      	bne.n	800aab6 <_fflush_r+0x5e>
 800aa7e:	686c      	ldr	r4, [r5, #4]
 800aa80:	220c      	movs	r2, #12
 800aa82:	5ea3      	ldrsh	r3, [r4, r2]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d0ed      	beq.n	800aa64 <_fflush_r+0xc>
 800aa88:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa8a:	07d2      	lsls	r2, r2, #31
 800aa8c:	d404      	bmi.n	800aa98 <_fflush_r+0x40>
 800aa8e:	059b      	lsls	r3, r3, #22
 800aa90:	d402      	bmi.n	800aa98 <_fflush_r+0x40>
 800aa92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa94:	f000 f923 	bl	800acde <__retarget_lock_acquire_recursive>
 800aa98:	0028      	movs	r0, r5
 800aa9a:	0021      	movs	r1, r4
 800aa9c:	f7ff ff50 	bl	800a940 <__sflush_r>
 800aaa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aaa2:	0005      	movs	r5, r0
 800aaa4:	07db      	lsls	r3, r3, #31
 800aaa6:	d4de      	bmi.n	800aa66 <_fflush_r+0xe>
 800aaa8:	89a3      	ldrh	r3, [r4, #12]
 800aaaa:	059b      	lsls	r3, r3, #22
 800aaac:	d4db      	bmi.n	800aa66 <_fflush_r+0xe>
 800aaae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aab0:	f000 f916 	bl	800ace0 <__retarget_lock_release_recursive>
 800aab4:	e7d7      	b.n	800aa66 <_fflush_r+0xe>
 800aab6:	4b06      	ldr	r3, [pc, #24]	; (800aad0 <_fflush_r+0x78>)
 800aab8:	429c      	cmp	r4, r3
 800aaba:	d101      	bne.n	800aac0 <_fflush_r+0x68>
 800aabc:	68ac      	ldr	r4, [r5, #8]
 800aabe:	e7df      	b.n	800aa80 <_fflush_r+0x28>
 800aac0:	4b04      	ldr	r3, [pc, #16]	; (800aad4 <_fflush_r+0x7c>)
 800aac2:	429c      	cmp	r4, r3
 800aac4:	d1dc      	bne.n	800aa80 <_fflush_r+0x28>
 800aac6:	68ec      	ldr	r4, [r5, #12]
 800aac8:	e7da      	b.n	800aa80 <_fflush_r+0x28>
 800aaca:	46c0      	nop			; (mov r8, r8)
 800aacc:	0800b5ac 	.word	0x0800b5ac
 800aad0:	0800b5cc 	.word	0x0800b5cc
 800aad4:	0800b58c 	.word	0x0800b58c

0800aad8 <std>:
 800aad8:	2300      	movs	r3, #0
 800aada:	b510      	push	{r4, lr}
 800aadc:	0004      	movs	r4, r0
 800aade:	6003      	str	r3, [r0, #0]
 800aae0:	6043      	str	r3, [r0, #4]
 800aae2:	6083      	str	r3, [r0, #8]
 800aae4:	8181      	strh	r1, [r0, #12]
 800aae6:	6643      	str	r3, [r0, #100]	; 0x64
 800aae8:	0019      	movs	r1, r3
 800aaea:	81c2      	strh	r2, [r0, #14]
 800aaec:	6103      	str	r3, [r0, #16]
 800aaee:	6143      	str	r3, [r0, #20]
 800aaf0:	6183      	str	r3, [r0, #24]
 800aaf2:	2208      	movs	r2, #8
 800aaf4:	305c      	adds	r0, #92	; 0x5c
 800aaf6:	f7fb fd43 	bl	8006580 <memset>
 800aafa:	4b05      	ldr	r3, [pc, #20]	; (800ab10 <std+0x38>)
 800aafc:	6224      	str	r4, [r4, #32]
 800aafe:	6263      	str	r3, [r4, #36]	; 0x24
 800ab00:	4b04      	ldr	r3, [pc, #16]	; (800ab14 <std+0x3c>)
 800ab02:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab04:	4b04      	ldr	r3, [pc, #16]	; (800ab18 <std+0x40>)
 800ab06:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab08:	4b04      	ldr	r3, [pc, #16]	; (800ab1c <std+0x44>)
 800ab0a:	6323      	str	r3, [r4, #48]	; 0x30
 800ab0c:	bd10      	pop	{r4, pc}
 800ab0e:	46c0      	nop			; (mov r8, r8)
 800ab10:	0800ae61 	.word	0x0800ae61
 800ab14:	0800ae89 	.word	0x0800ae89
 800ab18:	0800aec1 	.word	0x0800aec1
 800ab1c:	0800aeed 	.word	0x0800aeed

0800ab20 <_cleanup_r>:
 800ab20:	b510      	push	{r4, lr}
 800ab22:	4902      	ldr	r1, [pc, #8]	; (800ab2c <_cleanup_r+0xc>)
 800ab24:	f000 f8ba 	bl	800ac9c <_fwalk_reent>
 800ab28:	bd10      	pop	{r4, pc}
 800ab2a:	46c0      	nop			; (mov r8, r8)
 800ab2c:	0800aa59 	.word	0x0800aa59

0800ab30 <__sfmoreglue>:
 800ab30:	b570      	push	{r4, r5, r6, lr}
 800ab32:	2568      	movs	r5, #104	; 0x68
 800ab34:	1e4a      	subs	r2, r1, #1
 800ab36:	4355      	muls	r5, r2
 800ab38:	000e      	movs	r6, r1
 800ab3a:	0029      	movs	r1, r5
 800ab3c:	3174      	adds	r1, #116	; 0x74
 800ab3e:	f7ff fa37 	bl	8009fb0 <_malloc_r>
 800ab42:	1e04      	subs	r4, r0, #0
 800ab44:	d008      	beq.n	800ab58 <__sfmoreglue+0x28>
 800ab46:	2100      	movs	r1, #0
 800ab48:	002a      	movs	r2, r5
 800ab4a:	6001      	str	r1, [r0, #0]
 800ab4c:	6046      	str	r6, [r0, #4]
 800ab4e:	300c      	adds	r0, #12
 800ab50:	60a0      	str	r0, [r4, #8]
 800ab52:	3268      	adds	r2, #104	; 0x68
 800ab54:	f7fb fd14 	bl	8006580 <memset>
 800ab58:	0020      	movs	r0, r4
 800ab5a:	bd70      	pop	{r4, r5, r6, pc}

0800ab5c <__sfp_lock_acquire>:
 800ab5c:	b510      	push	{r4, lr}
 800ab5e:	4802      	ldr	r0, [pc, #8]	; (800ab68 <__sfp_lock_acquire+0xc>)
 800ab60:	f000 f8bd 	bl	800acde <__retarget_lock_acquire_recursive>
 800ab64:	bd10      	pop	{r4, pc}
 800ab66:	46c0      	nop			; (mov r8, r8)
 800ab68:	200003bd 	.word	0x200003bd

0800ab6c <__sfp_lock_release>:
 800ab6c:	b510      	push	{r4, lr}
 800ab6e:	4802      	ldr	r0, [pc, #8]	; (800ab78 <__sfp_lock_release+0xc>)
 800ab70:	f000 f8b6 	bl	800ace0 <__retarget_lock_release_recursive>
 800ab74:	bd10      	pop	{r4, pc}
 800ab76:	46c0      	nop			; (mov r8, r8)
 800ab78:	200003bd 	.word	0x200003bd

0800ab7c <__sinit_lock_acquire>:
 800ab7c:	b510      	push	{r4, lr}
 800ab7e:	4802      	ldr	r0, [pc, #8]	; (800ab88 <__sinit_lock_acquire+0xc>)
 800ab80:	f000 f8ad 	bl	800acde <__retarget_lock_acquire_recursive>
 800ab84:	bd10      	pop	{r4, pc}
 800ab86:	46c0      	nop			; (mov r8, r8)
 800ab88:	200003be 	.word	0x200003be

0800ab8c <__sinit_lock_release>:
 800ab8c:	b510      	push	{r4, lr}
 800ab8e:	4802      	ldr	r0, [pc, #8]	; (800ab98 <__sinit_lock_release+0xc>)
 800ab90:	f000 f8a6 	bl	800ace0 <__retarget_lock_release_recursive>
 800ab94:	bd10      	pop	{r4, pc}
 800ab96:	46c0      	nop			; (mov r8, r8)
 800ab98:	200003be 	.word	0x200003be

0800ab9c <__sinit>:
 800ab9c:	b513      	push	{r0, r1, r4, lr}
 800ab9e:	0004      	movs	r4, r0
 800aba0:	f7ff ffec 	bl	800ab7c <__sinit_lock_acquire>
 800aba4:	69a3      	ldr	r3, [r4, #24]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d002      	beq.n	800abb0 <__sinit+0x14>
 800abaa:	f7ff ffef 	bl	800ab8c <__sinit_lock_release>
 800abae:	bd13      	pop	{r0, r1, r4, pc}
 800abb0:	64a3      	str	r3, [r4, #72]	; 0x48
 800abb2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800abb4:	6523      	str	r3, [r4, #80]	; 0x50
 800abb6:	4b13      	ldr	r3, [pc, #76]	; (800ac04 <__sinit+0x68>)
 800abb8:	4a13      	ldr	r2, [pc, #76]	; (800ac08 <__sinit+0x6c>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	62a2      	str	r2, [r4, #40]	; 0x28
 800abbe:	9301      	str	r3, [sp, #4]
 800abc0:	42a3      	cmp	r3, r4
 800abc2:	d101      	bne.n	800abc8 <__sinit+0x2c>
 800abc4:	2301      	movs	r3, #1
 800abc6:	61a3      	str	r3, [r4, #24]
 800abc8:	0020      	movs	r0, r4
 800abca:	f000 f81f 	bl	800ac0c <__sfp>
 800abce:	6060      	str	r0, [r4, #4]
 800abd0:	0020      	movs	r0, r4
 800abd2:	f000 f81b 	bl	800ac0c <__sfp>
 800abd6:	60a0      	str	r0, [r4, #8]
 800abd8:	0020      	movs	r0, r4
 800abda:	f000 f817 	bl	800ac0c <__sfp>
 800abde:	2200      	movs	r2, #0
 800abe0:	2104      	movs	r1, #4
 800abe2:	60e0      	str	r0, [r4, #12]
 800abe4:	6860      	ldr	r0, [r4, #4]
 800abe6:	f7ff ff77 	bl	800aad8 <std>
 800abea:	2201      	movs	r2, #1
 800abec:	2109      	movs	r1, #9
 800abee:	68a0      	ldr	r0, [r4, #8]
 800abf0:	f7ff ff72 	bl	800aad8 <std>
 800abf4:	2202      	movs	r2, #2
 800abf6:	2112      	movs	r1, #18
 800abf8:	68e0      	ldr	r0, [r4, #12]
 800abfa:	f7ff ff6d 	bl	800aad8 <std>
 800abfe:	2301      	movs	r3, #1
 800ac00:	61a3      	str	r3, [r4, #24]
 800ac02:	e7d2      	b.n	800abaa <__sinit+0xe>
 800ac04:	0800b144 	.word	0x0800b144
 800ac08:	0800ab21 	.word	0x0800ab21

0800ac0c <__sfp>:
 800ac0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0e:	0007      	movs	r7, r0
 800ac10:	f7ff ffa4 	bl	800ab5c <__sfp_lock_acquire>
 800ac14:	4b1f      	ldr	r3, [pc, #124]	; (800ac94 <__sfp+0x88>)
 800ac16:	681e      	ldr	r6, [r3, #0]
 800ac18:	69b3      	ldr	r3, [r6, #24]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d102      	bne.n	800ac24 <__sfp+0x18>
 800ac1e:	0030      	movs	r0, r6
 800ac20:	f7ff ffbc 	bl	800ab9c <__sinit>
 800ac24:	3648      	adds	r6, #72	; 0x48
 800ac26:	68b4      	ldr	r4, [r6, #8]
 800ac28:	6873      	ldr	r3, [r6, #4]
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	d504      	bpl.n	800ac38 <__sfp+0x2c>
 800ac2e:	6833      	ldr	r3, [r6, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d022      	beq.n	800ac7a <__sfp+0x6e>
 800ac34:	6836      	ldr	r6, [r6, #0]
 800ac36:	e7f6      	b.n	800ac26 <__sfp+0x1a>
 800ac38:	220c      	movs	r2, #12
 800ac3a:	5ea5      	ldrsh	r5, [r4, r2]
 800ac3c:	2d00      	cmp	r5, #0
 800ac3e:	d11a      	bne.n	800ac76 <__sfp+0x6a>
 800ac40:	0020      	movs	r0, r4
 800ac42:	4b15      	ldr	r3, [pc, #84]	; (800ac98 <__sfp+0x8c>)
 800ac44:	3058      	adds	r0, #88	; 0x58
 800ac46:	60e3      	str	r3, [r4, #12]
 800ac48:	6665      	str	r5, [r4, #100]	; 0x64
 800ac4a:	f000 f847 	bl	800acdc <__retarget_lock_init_recursive>
 800ac4e:	f7ff ff8d 	bl	800ab6c <__sfp_lock_release>
 800ac52:	0020      	movs	r0, r4
 800ac54:	2208      	movs	r2, #8
 800ac56:	0029      	movs	r1, r5
 800ac58:	6025      	str	r5, [r4, #0]
 800ac5a:	60a5      	str	r5, [r4, #8]
 800ac5c:	6065      	str	r5, [r4, #4]
 800ac5e:	6125      	str	r5, [r4, #16]
 800ac60:	6165      	str	r5, [r4, #20]
 800ac62:	61a5      	str	r5, [r4, #24]
 800ac64:	305c      	adds	r0, #92	; 0x5c
 800ac66:	f7fb fc8b 	bl	8006580 <memset>
 800ac6a:	6365      	str	r5, [r4, #52]	; 0x34
 800ac6c:	63a5      	str	r5, [r4, #56]	; 0x38
 800ac6e:	64a5      	str	r5, [r4, #72]	; 0x48
 800ac70:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ac72:	0020      	movs	r0, r4
 800ac74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac76:	3468      	adds	r4, #104	; 0x68
 800ac78:	e7d7      	b.n	800ac2a <__sfp+0x1e>
 800ac7a:	2104      	movs	r1, #4
 800ac7c:	0038      	movs	r0, r7
 800ac7e:	f7ff ff57 	bl	800ab30 <__sfmoreglue>
 800ac82:	1e04      	subs	r4, r0, #0
 800ac84:	6030      	str	r0, [r6, #0]
 800ac86:	d1d5      	bne.n	800ac34 <__sfp+0x28>
 800ac88:	f7ff ff70 	bl	800ab6c <__sfp_lock_release>
 800ac8c:	230c      	movs	r3, #12
 800ac8e:	603b      	str	r3, [r7, #0]
 800ac90:	e7ef      	b.n	800ac72 <__sfp+0x66>
 800ac92:	46c0      	nop			; (mov r8, r8)
 800ac94:	0800b144 	.word	0x0800b144
 800ac98:	ffff0001 	.word	0xffff0001

0800ac9c <_fwalk_reent>:
 800ac9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac9e:	0004      	movs	r4, r0
 800aca0:	0006      	movs	r6, r0
 800aca2:	2700      	movs	r7, #0
 800aca4:	9101      	str	r1, [sp, #4]
 800aca6:	3448      	adds	r4, #72	; 0x48
 800aca8:	6863      	ldr	r3, [r4, #4]
 800acaa:	68a5      	ldr	r5, [r4, #8]
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	9b00      	ldr	r3, [sp, #0]
 800acb0:	3b01      	subs	r3, #1
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	d504      	bpl.n	800acc0 <_fwalk_reent+0x24>
 800acb6:	6824      	ldr	r4, [r4, #0]
 800acb8:	2c00      	cmp	r4, #0
 800acba:	d1f5      	bne.n	800aca8 <_fwalk_reent+0xc>
 800acbc:	0038      	movs	r0, r7
 800acbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800acc0:	89ab      	ldrh	r3, [r5, #12]
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d908      	bls.n	800acd8 <_fwalk_reent+0x3c>
 800acc6:	220e      	movs	r2, #14
 800acc8:	5eab      	ldrsh	r3, [r5, r2]
 800acca:	3301      	adds	r3, #1
 800accc:	d004      	beq.n	800acd8 <_fwalk_reent+0x3c>
 800acce:	0029      	movs	r1, r5
 800acd0:	0030      	movs	r0, r6
 800acd2:	9b01      	ldr	r3, [sp, #4]
 800acd4:	4798      	blx	r3
 800acd6:	4307      	orrs	r7, r0
 800acd8:	3568      	adds	r5, #104	; 0x68
 800acda:	e7e8      	b.n	800acae <_fwalk_reent+0x12>

0800acdc <__retarget_lock_init_recursive>:
 800acdc:	4770      	bx	lr

0800acde <__retarget_lock_acquire_recursive>:
 800acde:	4770      	bx	lr

0800ace0 <__retarget_lock_release_recursive>:
 800ace0:	4770      	bx	lr
	...

0800ace4 <__swhatbuf_r>:
 800ace4:	b570      	push	{r4, r5, r6, lr}
 800ace6:	000e      	movs	r6, r1
 800ace8:	001d      	movs	r5, r3
 800acea:	230e      	movs	r3, #14
 800acec:	5ec9      	ldrsh	r1, [r1, r3]
 800acee:	0014      	movs	r4, r2
 800acf0:	b096      	sub	sp, #88	; 0x58
 800acf2:	2900      	cmp	r1, #0
 800acf4:	da08      	bge.n	800ad08 <__swhatbuf_r+0x24>
 800acf6:	220c      	movs	r2, #12
 800acf8:	5eb3      	ldrsh	r3, [r6, r2]
 800acfa:	2200      	movs	r2, #0
 800acfc:	602a      	str	r2, [r5, #0]
 800acfe:	061b      	lsls	r3, r3, #24
 800ad00:	d411      	bmi.n	800ad26 <__swhatbuf_r+0x42>
 800ad02:	2380      	movs	r3, #128	; 0x80
 800ad04:	00db      	lsls	r3, r3, #3
 800ad06:	e00f      	b.n	800ad28 <__swhatbuf_r+0x44>
 800ad08:	466a      	mov	r2, sp
 800ad0a:	f000 f91b 	bl	800af44 <_fstat_r>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	dbf1      	blt.n	800acf6 <__swhatbuf_r+0x12>
 800ad12:	23f0      	movs	r3, #240	; 0xf0
 800ad14:	9901      	ldr	r1, [sp, #4]
 800ad16:	021b      	lsls	r3, r3, #8
 800ad18:	4019      	ands	r1, r3
 800ad1a:	4b05      	ldr	r3, [pc, #20]	; (800ad30 <__swhatbuf_r+0x4c>)
 800ad1c:	18c9      	adds	r1, r1, r3
 800ad1e:	424b      	negs	r3, r1
 800ad20:	4159      	adcs	r1, r3
 800ad22:	6029      	str	r1, [r5, #0]
 800ad24:	e7ed      	b.n	800ad02 <__swhatbuf_r+0x1e>
 800ad26:	2340      	movs	r3, #64	; 0x40
 800ad28:	2000      	movs	r0, #0
 800ad2a:	6023      	str	r3, [r4, #0]
 800ad2c:	b016      	add	sp, #88	; 0x58
 800ad2e:	bd70      	pop	{r4, r5, r6, pc}
 800ad30:	ffffe000 	.word	0xffffe000

0800ad34 <__smakebuf_r>:
 800ad34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad36:	2602      	movs	r6, #2
 800ad38:	898b      	ldrh	r3, [r1, #12]
 800ad3a:	0005      	movs	r5, r0
 800ad3c:	000c      	movs	r4, r1
 800ad3e:	4233      	tst	r3, r6
 800ad40:	d006      	beq.n	800ad50 <__smakebuf_r+0x1c>
 800ad42:	0023      	movs	r3, r4
 800ad44:	3347      	adds	r3, #71	; 0x47
 800ad46:	6023      	str	r3, [r4, #0]
 800ad48:	6123      	str	r3, [r4, #16]
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	6163      	str	r3, [r4, #20]
 800ad4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ad50:	466a      	mov	r2, sp
 800ad52:	ab01      	add	r3, sp, #4
 800ad54:	f7ff ffc6 	bl	800ace4 <__swhatbuf_r>
 800ad58:	9900      	ldr	r1, [sp, #0]
 800ad5a:	0007      	movs	r7, r0
 800ad5c:	0028      	movs	r0, r5
 800ad5e:	f7ff f927 	bl	8009fb0 <_malloc_r>
 800ad62:	2800      	cmp	r0, #0
 800ad64:	d108      	bne.n	800ad78 <__smakebuf_r+0x44>
 800ad66:	220c      	movs	r2, #12
 800ad68:	5ea3      	ldrsh	r3, [r4, r2]
 800ad6a:	059a      	lsls	r2, r3, #22
 800ad6c:	d4ef      	bmi.n	800ad4e <__smakebuf_r+0x1a>
 800ad6e:	2203      	movs	r2, #3
 800ad70:	4393      	bics	r3, r2
 800ad72:	431e      	orrs	r6, r3
 800ad74:	81a6      	strh	r6, [r4, #12]
 800ad76:	e7e4      	b.n	800ad42 <__smakebuf_r+0xe>
 800ad78:	4b0f      	ldr	r3, [pc, #60]	; (800adb8 <__smakebuf_r+0x84>)
 800ad7a:	62ab      	str	r3, [r5, #40]	; 0x28
 800ad7c:	2380      	movs	r3, #128	; 0x80
 800ad7e:	89a2      	ldrh	r2, [r4, #12]
 800ad80:	6020      	str	r0, [r4, #0]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	81a3      	strh	r3, [r4, #12]
 800ad86:	9b00      	ldr	r3, [sp, #0]
 800ad88:	6120      	str	r0, [r4, #16]
 800ad8a:	6163      	str	r3, [r4, #20]
 800ad8c:	9b01      	ldr	r3, [sp, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00d      	beq.n	800adae <__smakebuf_r+0x7a>
 800ad92:	0028      	movs	r0, r5
 800ad94:	230e      	movs	r3, #14
 800ad96:	5ee1      	ldrsh	r1, [r4, r3]
 800ad98:	f000 f8e6 	bl	800af68 <_isatty_r>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	d006      	beq.n	800adae <__smakebuf_r+0x7a>
 800ada0:	2203      	movs	r2, #3
 800ada2:	89a3      	ldrh	r3, [r4, #12]
 800ada4:	4393      	bics	r3, r2
 800ada6:	001a      	movs	r2, r3
 800ada8:	2301      	movs	r3, #1
 800adaa:	4313      	orrs	r3, r2
 800adac:	81a3      	strh	r3, [r4, #12]
 800adae:	89a0      	ldrh	r0, [r4, #12]
 800adb0:	4307      	orrs	r7, r0
 800adb2:	81a7      	strh	r7, [r4, #12]
 800adb4:	e7cb      	b.n	800ad4e <__smakebuf_r+0x1a>
 800adb6:	46c0      	nop			; (mov r8, r8)
 800adb8:	0800ab21 	.word	0x0800ab21

0800adbc <_malloc_usable_size_r>:
 800adbc:	1f0b      	subs	r3, r1, #4
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	1f18      	subs	r0, r3, #4
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	da01      	bge.n	800adca <_malloc_usable_size_r+0xe>
 800adc6:	580b      	ldr	r3, [r1, r0]
 800adc8:	18c0      	adds	r0, r0, r3
 800adca:	4770      	bx	lr

0800adcc <_raise_r>:
 800adcc:	b570      	push	{r4, r5, r6, lr}
 800adce:	0004      	movs	r4, r0
 800add0:	000d      	movs	r5, r1
 800add2:	291f      	cmp	r1, #31
 800add4:	d904      	bls.n	800ade0 <_raise_r+0x14>
 800add6:	2316      	movs	r3, #22
 800add8:	6003      	str	r3, [r0, #0]
 800adda:	2001      	movs	r0, #1
 800addc:	4240      	negs	r0, r0
 800adde:	bd70      	pop	{r4, r5, r6, pc}
 800ade0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d004      	beq.n	800adf0 <_raise_r+0x24>
 800ade6:	008a      	lsls	r2, r1, #2
 800ade8:	189b      	adds	r3, r3, r2
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	2a00      	cmp	r2, #0
 800adee:	d108      	bne.n	800ae02 <_raise_r+0x36>
 800adf0:	0020      	movs	r0, r4
 800adf2:	f000 f831 	bl	800ae58 <_getpid_r>
 800adf6:	002a      	movs	r2, r5
 800adf8:	0001      	movs	r1, r0
 800adfa:	0020      	movs	r0, r4
 800adfc:	f000 f81a 	bl	800ae34 <_kill_r>
 800ae00:	e7ed      	b.n	800adde <_raise_r+0x12>
 800ae02:	2000      	movs	r0, #0
 800ae04:	2a01      	cmp	r2, #1
 800ae06:	d0ea      	beq.n	800adde <_raise_r+0x12>
 800ae08:	1c51      	adds	r1, r2, #1
 800ae0a:	d103      	bne.n	800ae14 <_raise_r+0x48>
 800ae0c:	2316      	movs	r3, #22
 800ae0e:	3001      	adds	r0, #1
 800ae10:	6023      	str	r3, [r4, #0]
 800ae12:	e7e4      	b.n	800adde <_raise_r+0x12>
 800ae14:	2400      	movs	r4, #0
 800ae16:	0028      	movs	r0, r5
 800ae18:	601c      	str	r4, [r3, #0]
 800ae1a:	4790      	blx	r2
 800ae1c:	0020      	movs	r0, r4
 800ae1e:	e7de      	b.n	800adde <_raise_r+0x12>

0800ae20 <raise>:
 800ae20:	b510      	push	{r4, lr}
 800ae22:	4b03      	ldr	r3, [pc, #12]	; (800ae30 <raise+0x10>)
 800ae24:	0001      	movs	r1, r0
 800ae26:	6818      	ldr	r0, [r3, #0]
 800ae28:	f7ff ffd0 	bl	800adcc <_raise_r>
 800ae2c:	bd10      	pop	{r4, pc}
 800ae2e:	46c0      	nop			; (mov r8, r8)
 800ae30:	2000000c 	.word	0x2000000c

0800ae34 <_kill_r>:
 800ae34:	2300      	movs	r3, #0
 800ae36:	b570      	push	{r4, r5, r6, lr}
 800ae38:	4d06      	ldr	r5, [pc, #24]	; (800ae54 <_kill_r+0x20>)
 800ae3a:	0004      	movs	r4, r0
 800ae3c:	0008      	movs	r0, r1
 800ae3e:	0011      	movs	r1, r2
 800ae40:	602b      	str	r3, [r5, #0]
 800ae42:	f7f8 fa31 	bl	80032a8 <_kill>
 800ae46:	1c43      	adds	r3, r0, #1
 800ae48:	d103      	bne.n	800ae52 <_kill_r+0x1e>
 800ae4a:	682b      	ldr	r3, [r5, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d000      	beq.n	800ae52 <_kill_r+0x1e>
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	bd70      	pop	{r4, r5, r6, pc}
 800ae54:	200003b8 	.word	0x200003b8

0800ae58 <_getpid_r>:
 800ae58:	b510      	push	{r4, lr}
 800ae5a:	f7f8 fa1f 	bl	800329c <_getpid>
 800ae5e:	bd10      	pop	{r4, pc}

0800ae60 <__sread>:
 800ae60:	b570      	push	{r4, r5, r6, lr}
 800ae62:	000c      	movs	r4, r1
 800ae64:	250e      	movs	r5, #14
 800ae66:	5f49      	ldrsh	r1, [r1, r5]
 800ae68:	f000 f8a4 	bl	800afb4 <_read_r>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	db03      	blt.n	800ae78 <__sread+0x18>
 800ae70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ae72:	181b      	adds	r3, r3, r0
 800ae74:	6563      	str	r3, [r4, #84]	; 0x54
 800ae76:	bd70      	pop	{r4, r5, r6, pc}
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	4a02      	ldr	r2, [pc, #8]	; (800ae84 <__sread+0x24>)
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	81a3      	strh	r3, [r4, #12]
 800ae80:	e7f9      	b.n	800ae76 <__sread+0x16>
 800ae82:	46c0      	nop			; (mov r8, r8)
 800ae84:	ffffefff 	.word	0xffffefff

0800ae88 <__swrite>:
 800ae88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8a:	001f      	movs	r7, r3
 800ae8c:	898b      	ldrh	r3, [r1, #12]
 800ae8e:	0005      	movs	r5, r0
 800ae90:	000c      	movs	r4, r1
 800ae92:	0016      	movs	r6, r2
 800ae94:	05db      	lsls	r3, r3, #23
 800ae96:	d505      	bpl.n	800aea4 <__swrite+0x1c>
 800ae98:	230e      	movs	r3, #14
 800ae9a:	5ec9      	ldrsh	r1, [r1, r3]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	2302      	movs	r3, #2
 800aea0:	f000 f874 	bl	800af8c <_lseek_r>
 800aea4:	89a3      	ldrh	r3, [r4, #12]
 800aea6:	4a05      	ldr	r2, [pc, #20]	; (800aebc <__swrite+0x34>)
 800aea8:	0028      	movs	r0, r5
 800aeaa:	4013      	ands	r3, r2
 800aeac:	81a3      	strh	r3, [r4, #12]
 800aeae:	0032      	movs	r2, r6
 800aeb0:	230e      	movs	r3, #14
 800aeb2:	5ee1      	ldrsh	r1, [r4, r3]
 800aeb4:	003b      	movs	r3, r7
 800aeb6:	f000 f81f 	bl	800aef8 <_write_r>
 800aeba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aebc:	ffffefff 	.word	0xffffefff

0800aec0 <__sseek>:
 800aec0:	b570      	push	{r4, r5, r6, lr}
 800aec2:	000c      	movs	r4, r1
 800aec4:	250e      	movs	r5, #14
 800aec6:	5f49      	ldrsh	r1, [r1, r5]
 800aec8:	f000 f860 	bl	800af8c <_lseek_r>
 800aecc:	89a3      	ldrh	r3, [r4, #12]
 800aece:	1c42      	adds	r2, r0, #1
 800aed0:	d103      	bne.n	800aeda <__sseek+0x1a>
 800aed2:	4a05      	ldr	r2, [pc, #20]	; (800aee8 <__sseek+0x28>)
 800aed4:	4013      	ands	r3, r2
 800aed6:	81a3      	strh	r3, [r4, #12]
 800aed8:	bd70      	pop	{r4, r5, r6, pc}
 800aeda:	2280      	movs	r2, #128	; 0x80
 800aedc:	0152      	lsls	r2, r2, #5
 800aede:	4313      	orrs	r3, r2
 800aee0:	81a3      	strh	r3, [r4, #12]
 800aee2:	6560      	str	r0, [r4, #84]	; 0x54
 800aee4:	e7f8      	b.n	800aed8 <__sseek+0x18>
 800aee6:	46c0      	nop			; (mov r8, r8)
 800aee8:	ffffefff 	.word	0xffffefff

0800aeec <__sclose>:
 800aeec:	b510      	push	{r4, lr}
 800aeee:	230e      	movs	r3, #14
 800aef0:	5ec9      	ldrsh	r1, [r1, r3]
 800aef2:	f000 f815 	bl	800af20 <_close_r>
 800aef6:	bd10      	pop	{r4, pc}

0800aef8 <_write_r>:
 800aef8:	b570      	push	{r4, r5, r6, lr}
 800aefa:	0004      	movs	r4, r0
 800aefc:	0008      	movs	r0, r1
 800aefe:	0011      	movs	r1, r2
 800af00:	001a      	movs	r2, r3
 800af02:	2300      	movs	r3, #0
 800af04:	4d05      	ldr	r5, [pc, #20]	; (800af1c <_write_r+0x24>)
 800af06:	602b      	str	r3, [r5, #0]
 800af08:	f7f8 fa07 	bl	800331a <_write>
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	d103      	bne.n	800af18 <_write_r+0x20>
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d000      	beq.n	800af18 <_write_r+0x20>
 800af16:	6023      	str	r3, [r4, #0]
 800af18:	bd70      	pop	{r4, r5, r6, pc}
 800af1a:	46c0      	nop			; (mov r8, r8)
 800af1c:	200003b8 	.word	0x200003b8

0800af20 <_close_r>:
 800af20:	2300      	movs	r3, #0
 800af22:	b570      	push	{r4, r5, r6, lr}
 800af24:	4d06      	ldr	r5, [pc, #24]	; (800af40 <_close_r+0x20>)
 800af26:	0004      	movs	r4, r0
 800af28:	0008      	movs	r0, r1
 800af2a:	602b      	str	r3, [r5, #0]
 800af2c:	f7f8 fa11 	bl	8003352 <_close>
 800af30:	1c43      	adds	r3, r0, #1
 800af32:	d103      	bne.n	800af3c <_close_r+0x1c>
 800af34:	682b      	ldr	r3, [r5, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d000      	beq.n	800af3c <_close_r+0x1c>
 800af3a:	6023      	str	r3, [r4, #0]
 800af3c:	bd70      	pop	{r4, r5, r6, pc}
 800af3e:	46c0      	nop			; (mov r8, r8)
 800af40:	200003b8 	.word	0x200003b8

0800af44 <_fstat_r>:
 800af44:	2300      	movs	r3, #0
 800af46:	b570      	push	{r4, r5, r6, lr}
 800af48:	4d06      	ldr	r5, [pc, #24]	; (800af64 <_fstat_r+0x20>)
 800af4a:	0004      	movs	r4, r0
 800af4c:	0008      	movs	r0, r1
 800af4e:	0011      	movs	r1, r2
 800af50:	602b      	str	r3, [r5, #0]
 800af52:	f7f8 fa08 	bl	8003366 <_fstat>
 800af56:	1c43      	adds	r3, r0, #1
 800af58:	d103      	bne.n	800af62 <_fstat_r+0x1e>
 800af5a:	682b      	ldr	r3, [r5, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d000      	beq.n	800af62 <_fstat_r+0x1e>
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	bd70      	pop	{r4, r5, r6, pc}
 800af64:	200003b8 	.word	0x200003b8

0800af68 <_isatty_r>:
 800af68:	2300      	movs	r3, #0
 800af6a:	b570      	push	{r4, r5, r6, lr}
 800af6c:	4d06      	ldr	r5, [pc, #24]	; (800af88 <_isatty_r+0x20>)
 800af6e:	0004      	movs	r4, r0
 800af70:	0008      	movs	r0, r1
 800af72:	602b      	str	r3, [r5, #0]
 800af74:	f7f8 fa05 	bl	8003382 <_isatty>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d103      	bne.n	800af84 <_isatty_r+0x1c>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d000      	beq.n	800af84 <_isatty_r+0x1c>
 800af82:	6023      	str	r3, [r4, #0]
 800af84:	bd70      	pop	{r4, r5, r6, pc}
 800af86:	46c0      	nop			; (mov r8, r8)
 800af88:	200003b8 	.word	0x200003b8

0800af8c <_lseek_r>:
 800af8c:	b570      	push	{r4, r5, r6, lr}
 800af8e:	0004      	movs	r4, r0
 800af90:	0008      	movs	r0, r1
 800af92:	0011      	movs	r1, r2
 800af94:	001a      	movs	r2, r3
 800af96:	2300      	movs	r3, #0
 800af98:	4d05      	ldr	r5, [pc, #20]	; (800afb0 <_lseek_r+0x24>)
 800af9a:	602b      	str	r3, [r5, #0]
 800af9c:	f7f8 f9fa 	bl	8003394 <_lseek>
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	d103      	bne.n	800afac <_lseek_r+0x20>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d000      	beq.n	800afac <_lseek_r+0x20>
 800afaa:	6023      	str	r3, [r4, #0]
 800afac:	bd70      	pop	{r4, r5, r6, pc}
 800afae:	46c0      	nop			; (mov r8, r8)
 800afb0:	200003b8 	.word	0x200003b8

0800afb4 <_read_r>:
 800afb4:	b570      	push	{r4, r5, r6, lr}
 800afb6:	0004      	movs	r4, r0
 800afb8:	0008      	movs	r0, r1
 800afba:	0011      	movs	r1, r2
 800afbc:	001a      	movs	r2, r3
 800afbe:	2300      	movs	r3, #0
 800afc0:	4d05      	ldr	r5, [pc, #20]	; (800afd8 <_read_r+0x24>)
 800afc2:	602b      	str	r3, [r5, #0]
 800afc4:	f7f8 f98c 	bl	80032e0 <_read>
 800afc8:	1c43      	adds	r3, r0, #1
 800afca:	d103      	bne.n	800afd4 <_read_r+0x20>
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d000      	beq.n	800afd4 <_read_r+0x20>
 800afd2:	6023      	str	r3, [r4, #0]
 800afd4:	bd70      	pop	{r4, r5, r6, pc}
 800afd6:	46c0      	nop			; (mov r8, r8)
 800afd8:	200003b8 	.word	0x200003b8

0800afdc <_init>:
 800afdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afde:	46c0      	nop			; (mov r8, r8)
 800afe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afe2:	bc08      	pop	{r3}
 800afe4:	469e      	mov	lr, r3
 800afe6:	4770      	bx	lr

0800afe8 <_fini>:
 800afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afea:	46c0      	nop			; (mov r8, r8)
 800afec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afee:	bc08      	pop	{r3}
 800aff0:	469e      	mov	lr, r3
 800aff2:	4770      	bx	lr
