
Quick-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc5c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  0800cd20  0800cd20  0001cd20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4bc  0800d4bc  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800d4bc  0800d4bc  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d4bc  0800d4bc  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4bc  0800d4bc  0001d4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4c0  0800d4c0  0001d4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800d4c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000204  0800d6c8  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  0800d6c8  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3da  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220a  00000000  00000000  0002e606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00030810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  000313a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013280  00000000  00000000  00031e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fdf8  00000000  00000000  000450d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e2a2  00000000  00000000  00054ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c3172  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f3c  00000000  00000000  000c31c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000204 	.word	0x20000204
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800cd04 	.word	0x0800cd04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000208 	.word	0x20000208
 8000104:	0800cd04 	.word	0x0800cd04

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fb73 	bl	8001b28 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fac3 	bl	80019d8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb65 	bl	8001b28 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb5b 	bl	8001b28 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 faeb 	bl	8001a5c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fae1 	bl	8001a5c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 f927 	bl	8000704 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 f8b3 	bl	800062c <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f919 	bl	8000704 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f90f 	bl	8000704 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f8bf 	bl	8000678 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f8b5 	bl	8000678 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_f2uiz>:
 800051c:	219e      	movs	r1, #158	; 0x9e
 800051e:	b510      	push	{r4, lr}
 8000520:	05c9      	lsls	r1, r1, #23
 8000522:	1c04      	adds	r4, r0, #0
 8000524:	f7ff fff0 	bl	8000508 <__aeabi_fcmpge>
 8000528:	2800      	cmp	r0, #0
 800052a:	d103      	bne.n	8000534 <__aeabi_f2uiz+0x18>
 800052c:	1c20      	adds	r0, r4, #0
 800052e:	f000 fc01 	bl	8000d34 <__aeabi_f2iz>
 8000532:	bd10      	pop	{r4, pc}
 8000534:	219e      	movs	r1, #158	; 0x9e
 8000536:	1c20      	adds	r0, r4, #0
 8000538:	05c9      	lsls	r1, r1, #23
 800053a:	f000 fa4d 	bl	80009d8 <__aeabi_fsub>
 800053e:	f000 fbf9 	bl	8000d34 <__aeabi_f2iz>
 8000542:	2380      	movs	r3, #128	; 0x80
 8000544:	061b      	lsls	r3, r3, #24
 8000546:	469c      	mov	ip, r3
 8000548:	4460      	add	r0, ip
 800054a:	e7f2      	b.n	8000532 <__aeabi_f2uiz+0x16>

0800054c <__aeabi_d2uiz>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	2200      	movs	r2, #0
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <__aeabi_d2uiz+0x38>)
 8000552:	0004      	movs	r4, r0
 8000554:	000d      	movs	r5, r1
 8000556:	f7ff ff9d 	bl	8000494 <__aeabi_dcmpge>
 800055a:	2800      	cmp	r0, #0
 800055c:	d104      	bne.n	8000568 <__aeabi_d2uiz+0x1c>
 800055e:	0020      	movs	r0, r4
 8000560:	0029      	movs	r1, r5
 8000562:	f002 f961 	bl	8002828 <__aeabi_d2iz>
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_d2uiz+0x38>)
 800056a:	2200      	movs	r2, #0
 800056c:	0020      	movs	r0, r4
 800056e:	0029      	movs	r1, r5
 8000570:	f001 fdaa 	bl	80020c8 <__aeabi_dsub>
 8000574:	f002 f958 	bl	8002828 <__aeabi_d2iz>
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	061b      	lsls	r3, r3, #24
 800057c:	469c      	mov	ip, r3
 800057e:	4460      	add	r0, ip
 8000580:	e7f1      	b.n	8000566 <__aeabi_d2uiz+0x1a>
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41e00000 	.word	0x41e00000

08000588 <__aeabi_d2lz>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	0005      	movs	r5, r0
 800058c:	000c      	movs	r4, r1
 800058e:	2200      	movs	r2, #0
 8000590:	2300      	movs	r3, #0
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f7ff ff5f 	bl	8000458 <__aeabi_dcmplt>
 800059a:	2800      	cmp	r0, #0
 800059c:	d108      	bne.n	80005b0 <__aeabi_d2lz+0x28>
 800059e:	0028      	movs	r0, r5
 80005a0:	0021      	movs	r1, r4
 80005a2:	f000 f80f 	bl	80005c4 <__aeabi_d2ulz>
 80005a6:	0002      	movs	r2, r0
 80005a8:	000b      	movs	r3, r1
 80005aa:	0010      	movs	r0, r2
 80005ac:	0019      	movs	r1, r3
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	061b      	lsls	r3, r3, #24
 80005b4:	18e1      	adds	r1, r4, r3
 80005b6:	0028      	movs	r0, r5
 80005b8:	f000 f804 	bl	80005c4 <__aeabi_d2ulz>
 80005bc:	2300      	movs	r3, #0
 80005be:	4242      	negs	r2, r0
 80005c0:	418b      	sbcs	r3, r1
 80005c2:	e7f2      	b.n	80005aa <__aeabi_d2lz+0x22>

080005c4 <__aeabi_d2ulz>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	2200      	movs	r2, #0
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <__aeabi_d2ulz+0x34>)
 80005ca:	000d      	movs	r5, r1
 80005cc:	0004      	movs	r4, r0
 80005ce:	f001 fb0f 	bl	8001bf0 <__aeabi_dmul>
 80005d2:	f7ff ffbb 	bl	800054c <__aeabi_d2uiz>
 80005d6:	0006      	movs	r6, r0
 80005d8:	f002 f98c 	bl	80028f4 <__aeabi_ui2d>
 80005dc:	2200      	movs	r2, #0
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <__aeabi_d2ulz+0x38>)
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dmul>
 80005e4:	0002      	movs	r2, r0
 80005e6:	000b      	movs	r3, r1
 80005e8:	0020      	movs	r0, r4
 80005ea:	0029      	movs	r1, r5
 80005ec:	f001 fd6c 	bl	80020c8 <__aeabi_dsub>
 80005f0:	f7ff ffac 	bl	800054c <__aeabi_d2uiz>
 80005f4:	0031      	movs	r1, r6
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	3df00000 	.word	0x3df00000
 80005fc:	41f00000 	.word	0x41f00000

08000600 <__aeabi_l2d>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	0006      	movs	r6, r0
 8000604:	0008      	movs	r0, r1
 8000606:	f002 f945 	bl	8002894 <__aeabi_i2d>
 800060a:	2200      	movs	r2, #0
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_l2d+0x28>)
 800060e:	f001 faef 	bl	8001bf0 <__aeabi_dmul>
 8000612:	000d      	movs	r5, r1
 8000614:	0004      	movs	r4, r0
 8000616:	0030      	movs	r0, r6
 8000618:	f002 f96c 	bl	80028f4 <__aeabi_ui2d>
 800061c:	002b      	movs	r3, r5
 800061e:	0022      	movs	r2, r4
 8000620:	f000 fba8 	bl	8000d74 <__aeabi_dadd>
 8000624:	bd70      	pop	{r4, r5, r6, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41f00000 	.word	0x41f00000

0800062c <__eqsf2>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	0042      	lsls	r2, r0, #1
 8000630:	0245      	lsls	r5, r0, #9
 8000632:	024e      	lsls	r6, r1, #9
 8000634:	004c      	lsls	r4, r1, #1
 8000636:	0fc3      	lsrs	r3, r0, #31
 8000638:	0a6d      	lsrs	r5, r5, #9
 800063a:	2001      	movs	r0, #1
 800063c:	0e12      	lsrs	r2, r2, #24
 800063e:	0a76      	lsrs	r6, r6, #9
 8000640:	0e24      	lsrs	r4, r4, #24
 8000642:	0fc9      	lsrs	r1, r1, #31
 8000644:	2aff      	cmp	r2, #255	; 0xff
 8000646:	d006      	beq.n	8000656 <__eqsf2+0x2a>
 8000648:	2cff      	cmp	r4, #255	; 0xff
 800064a:	d003      	beq.n	8000654 <__eqsf2+0x28>
 800064c:	42a2      	cmp	r2, r4
 800064e:	d101      	bne.n	8000654 <__eqsf2+0x28>
 8000650:	42b5      	cmp	r5, r6
 8000652:	d006      	beq.n	8000662 <__eqsf2+0x36>
 8000654:	bd70      	pop	{r4, r5, r6, pc}
 8000656:	2d00      	cmp	r5, #0
 8000658:	d1fc      	bne.n	8000654 <__eqsf2+0x28>
 800065a:	2cff      	cmp	r4, #255	; 0xff
 800065c:	d1fa      	bne.n	8000654 <__eqsf2+0x28>
 800065e:	2e00      	cmp	r6, #0
 8000660:	d1f8      	bne.n	8000654 <__eqsf2+0x28>
 8000662:	428b      	cmp	r3, r1
 8000664:	d006      	beq.n	8000674 <__eqsf2+0x48>
 8000666:	2001      	movs	r0, #1
 8000668:	2a00      	cmp	r2, #0
 800066a:	d1f3      	bne.n	8000654 <__eqsf2+0x28>
 800066c:	0028      	movs	r0, r5
 800066e:	1e43      	subs	r3, r0, #1
 8000670:	4198      	sbcs	r0, r3
 8000672:	e7ef      	b.n	8000654 <__eqsf2+0x28>
 8000674:	2000      	movs	r0, #0
 8000676:	e7ed      	b.n	8000654 <__eqsf2+0x28>

08000678 <__gesf2>:
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	0042      	lsls	r2, r0, #1
 800067c:	0245      	lsls	r5, r0, #9
 800067e:	024e      	lsls	r6, r1, #9
 8000680:	004c      	lsls	r4, r1, #1
 8000682:	0fc3      	lsrs	r3, r0, #31
 8000684:	0a6d      	lsrs	r5, r5, #9
 8000686:	0e12      	lsrs	r2, r2, #24
 8000688:	0a76      	lsrs	r6, r6, #9
 800068a:	0e24      	lsrs	r4, r4, #24
 800068c:	0fc8      	lsrs	r0, r1, #31
 800068e:	2aff      	cmp	r2, #255	; 0xff
 8000690:	d01b      	beq.n	80006ca <__gesf2+0x52>
 8000692:	2cff      	cmp	r4, #255	; 0xff
 8000694:	d00e      	beq.n	80006b4 <__gesf2+0x3c>
 8000696:	2a00      	cmp	r2, #0
 8000698:	d11b      	bne.n	80006d2 <__gesf2+0x5a>
 800069a:	2c00      	cmp	r4, #0
 800069c:	d101      	bne.n	80006a2 <__gesf2+0x2a>
 800069e:	2e00      	cmp	r6, #0
 80006a0:	d01c      	beq.n	80006dc <__gesf2+0x64>
 80006a2:	2d00      	cmp	r5, #0
 80006a4:	d00c      	beq.n	80006c0 <__gesf2+0x48>
 80006a6:	4283      	cmp	r3, r0
 80006a8:	d01c      	beq.n	80006e4 <__gesf2+0x6c>
 80006aa:	2102      	movs	r1, #2
 80006ac:	1e58      	subs	r0, r3, #1
 80006ae:	4008      	ands	r0, r1
 80006b0:	3801      	subs	r0, #1
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	2e00      	cmp	r6, #0
 80006b6:	d122      	bne.n	80006fe <__gesf2+0x86>
 80006b8:	2a00      	cmp	r2, #0
 80006ba:	d1f4      	bne.n	80006a6 <__gesf2+0x2e>
 80006bc:	2d00      	cmp	r5, #0
 80006be:	d1f2      	bne.n	80006a6 <__gesf2+0x2e>
 80006c0:	2800      	cmp	r0, #0
 80006c2:	d1f6      	bne.n	80006b2 <__gesf2+0x3a>
 80006c4:	2001      	movs	r0, #1
 80006c6:	4240      	negs	r0, r0
 80006c8:	e7f3      	b.n	80006b2 <__gesf2+0x3a>
 80006ca:	2d00      	cmp	r5, #0
 80006cc:	d117      	bne.n	80006fe <__gesf2+0x86>
 80006ce:	2cff      	cmp	r4, #255	; 0xff
 80006d0:	d0f0      	beq.n	80006b4 <__gesf2+0x3c>
 80006d2:	2c00      	cmp	r4, #0
 80006d4:	d1e7      	bne.n	80006a6 <__gesf2+0x2e>
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d1e5      	bne.n	80006a6 <__gesf2+0x2e>
 80006da:	e7e6      	b.n	80006aa <__gesf2+0x32>
 80006dc:	2000      	movs	r0, #0
 80006de:	2d00      	cmp	r5, #0
 80006e0:	d0e7      	beq.n	80006b2 <__gesf2+0x3a>
 80006e2:	e7e2      	b.n	80006aa <__gesf2+0x32>
 80006e4:	42a2      	cmp	r2, r4
 80006e6:	dc05      	bgt.n	80006f4 <__gesf2+0x7c>
 80006e8:	dbea      	blt.n	80006c0 <__gesf2+0x48>
 80006ea:	42b5      	cmp	r5, r6
 80006ec:	d802      	bhi.n	80006f4 <__gesf2+0x7c>
 80006ee:	d3e7      	bcc.n	80006c0 <__gesf2+0x48>
 80006f0:	2000      	movs	r0, #0
 80006f2:	e7de      	b.n	80006b2 <__gesf2+0x3a>
 80006f4:	4243      	negs	r3, r0
 80006f6:	4158      	adcs	r0, r3
 80006f8:	0040      	lsls	r0, r0, #1
 80006fa:	3801      	subs	r0, #1
 80006fc:	e7d9      	b.n	80006b2 <__gesf2+0x3a>
 80006fe:	2002      	movs	r0, #2
 8000700:	4240      	negs	r0, r0
 8000702:	e7d6      	b.n	80006b2 <__gesf2+0x3a>

08000704 <__lesf2>:
 8000704:	b570      	push	{r4, r5, r6, lr}
 8000706:	0042      	lsls	r2, r0, #1
 8000708:	0245      	lsls	r5, r0, #9
 800070a:	024e      	lsls	r6, r1, #9
 800070c:	004c      	lsls	r4, r1, #1
 800070e:	0fc3      	lsrs	r3, r0, #31
 8000710:	0a6d      	lsrs	r5, r5, #9
 8000712:	0e12      	lsrs	r2, r2, #24
 8000714:	0a76      	lsrs	r6, r6, #9
 8000716:	0e24      	lsrs	r4, r4, #24
 8000718:	0fc8      	lsrs	r0, r1, #31
 800071a:	2aff      	cmp	r2, #255	; 0xff
 800071c:	d00b      	beq.n	8000736 <__lesf2+0x32>
 800071e:	2cff      	cmp	r4, #255	; 0xff
 8000720:	d00d      	beq.n	800073e <__lesf2+0x3a>
 8000722:	2a00      	cmp	r2, #0
 8000724:	d11f      	bne.n	8000766 <__lesf2+0x62>
 8000726:	2c00      	cmp	r4, #0
 8000728:	d116      	bne.n	8000758 <__lesf2+0x54>
 800072a:	2e00      	cmp	r6, #0
 800072c:	d114      	bne.n	8000758 <__lesf2+0x54>
 800072e:	2000      	movs	r0, #0
 8000730:	2d00      	cmp	r5, #0
 8000732:	d010      	beq.n	8000756 <__lesf2+0x52>
 8000734:	e009      	b.n	800074a <__lesf2+0x46>
 8000736:	2d00      	cmp	r5, #0
 8000738:	d10c      	bne.n	8000754 <__lesf2+0x50>
 800073a:	2cff      	cmp	r4, #255	; 0xff
 800073c:	d113      	bne.n	8000766 <__lesf2+0x62>
 800073e:	2e00      	cmp	r6, #0
 8000740:	d108      	bne.n	8000754 <__lesf2+0x50>
 8000742:	2a00      	cmp	r2, #0
 8000744:	d008      	beq.n	8000758 <__lesf2+0x54>
 8000746:	4283      	cmp	r3, r0
 8000748:	d012      	beq.n	8000770 <__lesf2+0x6c>
 800074a:	2102      	movs	r1, #2
 800074c:	1e58      	subs	r0, r3, #1
 800074e:	4008      	ands	r0, r1
 8000750:	3801      	subs	r0, #1
 8000752:	e000      	b.n	8000756 <__lesf2+0x52>
 8000754:	2002      	movs	r0, #2
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	2d00      	cmp	r5, #0
 800075a:	d1f4      	bne.n	8000746 <__lesf2+0x42>
 800075c:	2800      	cmp	r0, #0
 800075e:	d1fa      	bne.n	8000756 <__lesf2+0x52>
 8000760:	2001      	movs	r0, #1
 8000762:	4240      	negs	r0, r0
 8000764:	e7f7      	b.n	8000756 <__lesf2+0x52>
 8000766:	2c00      	cmp	r4, #0
 8000768:	d1ed      	bne.n	8000746 <__lesf2+0x42>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d1eb      	bne.n	8000746 <__lesf2+0x42>
 800076e:	e7ec      	b.n	800074a <__lesf2+0x46>
 8000770:	42a2      	cmp	r2, r4
 8000772:	dc05      	bgt.n	8000780 <__lesf2+0x7c>
 8000774:	dbf2      	blt.n	800075c <__lesf2+0x58>
 8000776:	42b5      	cmp	r5, r6
 8000778:	d802      	bhi.n	8000780 <__lesf2+0x7c>
 800077a:	d3ef      	bcc.n	800075c <__lesf2+0x58>
 800077c:	2000      	movs	r0, #0
 800077e:	e7ea      	b.n	8000756 <__lesf2+0x52>
 8000780:	4243      	negs	r3, r0
 8000782:	4158      	adcs	r0, r3
 8000784:	0040      	lsls	r0, r0, #1
 8000786:	3801      	subs	r0, #1
 8000788:	e7e5      	b.n	8000756 <__lesf2+0x52>
 800078a:	46c0      	nop			; (mov r8, r8)

0800078c <__aeabi_fmul>:
 800078c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078e:	464f      	mov	r7, r9
 8000790:	4646      	mov	r6, r8
 8000792:	46d6      	mov	lr, sl
 8000794:	0244      	lsls	r4, r0, #9
 8000796:	0045      	lsls	r5, r0, #1
 8000798:	b5c0      	push	{r6, r7, lr}
 800079a:	0a64      	lsrs	r4, r4, #9
 800079c:	1c0f      	adds	r7, r1, #0
 800079e:	0e2d      	lsrs	r5, r5, #24
 80007a0:	0fc6      	lsrs	r6, r0, #31
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fmul+0x1c>
 80007a6:	e08d      	b.n	80008c4 <__aeabi_fmul+0x138>
 80007a8:	2dff      	cmp	r5, #255	; 0xff
 80007aa:	d100      	bne.n	80007ae <__aeabi_fmul+0x22>
 80007ac:	e092      	b.n	80008d4 <__aeabi_fmul+0x148>
 80007ae:	2300      	movs	r3, #0
 80007b0:	2080      	movs	r0, #128	; 0x80
 80007b2:	4699      	mov	r9, r3
 80007b4:	469a      	mov	sl, r3
 80007b6:	00e4      	lsls	r4, r4, #3
 80007b8:	04c0      	lsls	r0, r0, #19
 80007ba:	4304      	orrs	r4, r0
 80007bc:	3d7f      	subs	r5, #127	; 0x7f
 80007be:	0278      	lsls	r0, r7, #9
 80007c0:	0a43      	lsrs	r3, r0, #9
 80007c2:	4698      	mov	r8, r3
 80007c4:	007b      	lsls	r3, r7, #1
 80007c6:	0e1b      	lsrs	r3, r3, #24
 80007c8:	0fff      	lsrs	r7, r7, #31
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fmul+0x44>
 80007ce:	e070      	b.n	80008b2 <__aeabi_fmul+0x126>
 80007d0:	2bff      	cmp	r3, #255	; 0xff
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fmul+0x4a>
 80007d4:	e086      	b.n	80008e4 <__aeabi_fmul+0x158>
 80007d6:	4642      	mov	r2, r8
 80007d8:	00d0      	lsls	r0, r2, #3
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	3b7f      	subs	r3, #127	; 0x7f
 80007de:	18ed      	adds	r5, r5, r3
 80007e0:	2300      	movs	r3, #0
 80007e2:	04d2      	lsls	r2, r2, #19
 80007e4:	4302      	orrs	r2, r0
 80007e6:	4690      	mov	r8, r2
 80007e8:	469c      	mov	ip, r3
 80007ea:	0031      	movs	r1, r6
 80007ec:	464b      	mov	r3, r9
 80007ee:	4079      	eors	r1, r7
 80007f0:	1c68      	adds	r0, r5, #1
 80007f2:	2b0f      	cmp	r3, #15
 80007f4:	d81c      	bhi.n	8000830 <__aeabi_fmul+0xa4>
 80007f6:	4a76      	ldr	r2, [pc, #472]	; (80009d0 <__aeabi_fmul+0x244>)
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	58d3      	ldr	r3, [r2, r3]
 80007fc:	469f      	mov	pc, r3
 80007fe:	0039      	movs	r1, r7
 8000800:	4644      	mov	r4, r8
 8000802:	46e2      	mov	sl, ip
 8000804:	4653      	mov	r3, sl
 8000806:	2b02      	cmp	r3, #2
 8000808:	d00f      	beq.n	800082a <__aeabi_fmul+0x9e>
 800080a:	2b03      	cmp	r3, #3
 800080c:	d100      	bne.n	8000810 <__aeabi_fmul+0x84>
 800080e:	e0d7      	b.n	80009c0 <__aeabi_fmul+0x234>
 8000810:	2b01      	cmp	r3, #1
 8000812:	d137      	bne.n	8000884 <__aeabi_fmul+0xf8>
 8000814:	2000      	movs	r0, #0
 8000816:	2400      	movs	r4, #0
 8000818:	05c0      	lsls	r0, r0, #23
 800081a:	4320      	orrs	r0, r4
 800081c:	07c9      	lsls	r1, r1, #31
 800081e:	4308      	orrs	r0, r1
 8000820:	bce0      	pop	{r5, r6, r7}
 8000822:	46ba      	mov	sl, r7
 8000824:	46b1      	mov	r9, r6
 8000826:	46a8      	mov	r8, r5
 8000828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082a:	20ff      	movs	r0, #255	; 0xff
 800082c:	2400      	movs	r4, #0
 800082e:	e7f3      	b.n	8000818 <__aeabi_fmul+0x8c>
 8000830:	0c26      	lsrs	r6, r4, #16
 8000832:	0424      	lsls	r4, r4, #16
 8000834:	0c22      	lsrs	r2, r4, #16
 8000836:	4644      	mov	r4, r8
 8000838:	0424      	lsls	r4, r4, #16
 800083a:	0c24      	lsrs	r4, r4, #16
 800083c:	4643      	mov	r3, r8
 800083e:	0027      	movs	r7, r4
 8000840:	0c1b      	lsrs	r3, r3, #16
 8000842:	4357      	muls	r7, r2
 8000844:	4374      	muls	r4, r6
 8000846:	435a      	muls	r2, r3
 8000848:	435e      	muls	r6, r3
 800084a:	1912      	adds	r2, r2, r4
 800084c:	0c3b      	lsrs	r3, r7, #16
 800084e:	189b      	adds	r3, r3, r2
 8000850:	429c      	cmp	r4, r3
 8000852:	d903      	bls.n	800085c <__aeabi_fmul+0xd0>
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	0252      	lsls	r2, r2, #9
 8000858:	4694      	mov	ip, r2
 800085a:	4466      	add	r6, ip
 800085c:	043f      	lsls	r7, r7, #16
 800085e:	041a      	lsls	r2, r3, #16
 8000860:	0c3f      	lsrs	r7, r7, #16
 8000862:	19d2      	adds	r2, r2, r7
 8000864:	0194      	lsls	r4, r2, #6
 8000866:	1e67      	subs	r7, r4, #1
 8000868:	41bc      	sbcs	r4, r7
 800086a:	0c1b      	lsrs	r3, r3, #16
 800086c:	0e92      	lsrs	r2, r2, #26
 800086e:	199b      	adds	r3, r3, r6
 8000870:	4314      	orrs	r4, r2
 8000872:	019b      	lsls	r3, r3, #6
 8000874:	431c      	orrs	r4, r3
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	d400      	bmi.n	800087c <__aeabi_fmul+0xf0>
 800087a:	e09b      	b.n	80009b4 <__aeabi_fmul+0x228>
 800087c:	2301      	movs	r3, #1
 800087e:	0862      	lsrs	r2, r4, #1
 8000880:	401c      	ands	r4, r3
 8000882:	4314      	orrs	r4, r2
 8000884:	0002      	movs	r2, r0
 8000886:	327f      	adds	r2, #127	; 0x7f
 8000888:	2a00      	cmp	r2, #0
 800088a:	dd64      	ble.n	8000956 <__aeabi_fmul+0x1ca>
 800088c:	0763      	lsls	r3, r4, #29
 800088e:	d004      	beq.n	800089a <__aeabi_fmul+0x10e>
 8000890:	230f      	movs	r3, #15
 8000892:	4023      	ands	r3, r4
 8000894:	2b04      	cmp	r3, #4
 8000896:	d000      	beq.n	800089a <__aeabi_fmul+0x10e>
 8000898:	3404      	adds	r4, #4
 800089a:	0123      	lsls	r3, r4, #4
 800089c:	d503      	bpl.n	80008a6 <__aeabi_fmul+0x11a>
 800089e:	0002      	movs	r2, r0
 80008a0:	4b4c      	ldr	r3, [pc, #304]	; (80009d4 <__aeabi_fmul+0x248>)
 80008a2:	3280      	adds	r2, #128	; 0x80
 80008a4:	401c      	ands	r4, r3
 80008a6:	2afe      	cmp	r2, #254	; 0xfe
 80008a8:	dcbf      	bgt.n	800082a <__aeabi_fmul+0x9e>
 80008aa:	01a4      	lsls	r4, r4, #6
 80008ac:	0a64      	lsrs	r4, r4, #9
 80008ae:	b2d0      	uxtb	r0, r2
 80008b0:	e7b2      	b.n	8000818 <__aeabi_fmul+0x8c>
 80008b2:	4643      	mov	r3, r8
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d13d      	bne.n	8000934 <__aeabi_fmul+0x1a8>
 80008b8:	464a      	mov	r2, r9
 80008ba:	3301      	adds	r3, #1
 80008bc:	431a      	orrs	r2, r3
 80008be:	4691      	mov	r9, r2
 80008c0:	469c      	mov	ip, r3
 80008c2:	e792      	b.n	80007ea <__aeabi_fmul+0x5e>
 80008c4:	2c00      	cmp	r4, #0
 80008c6:	d129      	bne.n	800091c <__aeabi_fmul+0x190>
 80008c8:	2304      	movs	r3, #4
 80008ca:	4699      	mov	r9, r3
 80008cc:	3b03      	subs	r3, #3
 80008ce:	2500      	movs	r5, #0
 80008d0:	469a      	mov	sl, r3
 80008d2:	e774      	b.n	80007be <__aeabi_fmul+0x32>
 80008d4:	2c00      	cmp	r4, #0
 80008d6:	d11b      	bne.n	8000910 <__aeabi_fmul+0x184>
 80008d8:	2308      	movs	r3, #8
 80008da:	4699      	mov	r9, r3
 80008dc:	3b06      	subs	r3, #6
 80008de:	25ff      	movs	r5, #255	; 0xff
 80008e0:	469a      	mov	sl, r3
 80008e2:	e76c      	b.n	80007be <__aeabi_fmul+0x32>
 80008e4:	4643      	mov	r3, r8
 80008e6:	35ff      	adds	r5, #255	; 0xff
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10b      	bne.n	8000904 <__aeabi_fmul+0x178>
 80008ec:	2302      	movs	r3, #2
 80008ee:	464a      	mov	r2, r9
 80008f0:	431a      	orrs	r2, r3
 80008f2:	4691      	mov	r9, r2
 80008f4:	469c      	mov	ip, r3
 80008f6:	e778      	b.n	80007ea <__aeabi_fmul+0x5e>
 80008f8:	4653      	mov	r3, sl
 80008fa:	0031      	movs	r1, r6
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d000      	beq.n	8000902 <__aeabi_fmul+0x176>
 8000900:	e783      	b.n	800080a <__aeabi_fmul+0x7e>
 8000902:	e792      	b.n	800082a <__aeabi_fmul+0x9e>
 8000904:	2303      	movs	r3, #3
 8000906:	464a      	mov	r2, r9
 8000908:	431a      	orrs	r2, r3
 800090a:	4691      	mov	r9, r2
 800090c:	469c      	mov	ip, r3
 800090e:	e76c      	b.n	80007ea <__aeabi_fmul+0x5e>
 8000910:	230c      	movs	r3, #12
 8000912:	4699      	mov	r9, r3
 8000914:	3b09      	subs	r3, #9
 8000916:	25ff      	movs	r5, #255	; 0xff
 8000918:	469a      	mov	sl, r3
 800091a:	e750      	b.n	80007be <__aeabi_fmul+0x32>
 800091c:	0020      	movs	r0, r4
 800091e:	f002 f8df 	bl	8002ae0 <__clzsi2>
 8000922:	2576      	movs	r5, #118	; 0x76
 8000924:	1f43      	subs	r3, r0, #5
 8000926:	409c      	lsls	r4, r3
 8000928:	2300      	movs	r3, #0
 800092a:	426d      	negs	r5, r5
 800092c:	4699      	mov	r9, r3
 800092e:	469a      	mov	sl, r3
 8000930:	1a2d      	subs	r5, r5, r0
 8000932:	e744      	b.n	80007be <__aeabi_fmul+0x32>
 8000934:	4640      	mov	r0, r8
 8000936:	f002 f8d3 	bl	8002ae0 <__clzsi2>
 800093a:	4642      	mov	r2, r8
 800093c:	1f43      	subs	r3, r0, #5
 800093e:	409a      	lsls	r2, r3
 8000940:	2300      	movs	r3, #0
 8000942:	1a2d      	subs	r5, r5, r0
 8000944:	4690      	mov	r8, r2
 8000946:	469c      	mov	ip, r3
 8000948:	3d76      	subs	r5, #118	; 0x76
 800094a:	e74e      	b.n	80007ea <__aeabi_fmul+0x5e>
 800094c:	2480      	movs	r4, #128	; 0x80
 800094e:	2100      	movs	r1, #0
 8000950:	20ff      	movs	r0, #255	; 0xff
 8000952:	03e4      	lsls	r4, r4, #15
 8000954:	e760      	b.n	8000818 <__aeabi_fmul+0x8c>
 8000956:	2301      	movs	r3, #1
 8000958:	1a9b      	subs	r3, r3, r2
 800095a:	2b1b      	cmp	r3, #27
 800095c:	dd00      	ble.n	8000960 <__aeabi_fmul+0x1d4>
 800095e:	e759      	b.n	8000814 <__aeabi_fmul+0x88>
 8000960:	0022      	movs	r2, r4
 8000962:	309e      	adds	r0, #158	; 0x9e
 8000964:	40da      	lsrs	r2, r3
 8000966:	4084      	lsls	r4, r0
 8000968:	0013      	movs	r3, r2
 800096a:	1e62      	subs	r2, r4, #1
 800096c:	4194      	sbcs	r4, r2
 800096e:	431c      	orrs	r4, r3
 8000970:	0763      	lsls	r3, r4, #29
 8000972:	d004      	beq.n	800097e <__aeabi_fmul+0x1f2>
 8000974:	230f      	movs	r3, #15
 8000976:	4023      	ands	r3, r4
 8000978:	2b04      	cmp	r3, #4
 800097a:	d000      	beq.n	800097e <__aeabi_fmul+0x1f2>
 800097c:	3404      	adds	r4, #4
 800097e:	0163      	lsls	r3, r4, #5
 8000980:	d51a      	bpl.n	80009b8 <__aeabi_fmul+0x22c>
 8000982:	2001      	movs	r0, #1
 8000984:	2400      	movs	r4, #0
 8000986:	e747      	b.n	8000818 <__aeabi_fmul+0x8c>
 8000988:	2080      	movs	r0, #128	; 0x80
 800098a:	03c0      	lsls	r0, r0, #15
 800098c:	4204      	tst	r4, r0
 800098e:	d009      	beq.n	80009a4 <__aeabi_fmul+0x218>
 8000990:	4643      	mov	r3, r8
 8000992:	4203      	tst	r3, r0
 8000994:	d106      	bne.n	80009a4 <__aeabi_fmul+0x218>
 8000996:	4644      	mov	r4, r8
 8000998:	4304      	orrs	r4, r0
 800099a:	0264      	lsls	r4, r4, #9
 800099c:	0039      	movs	r1, r7
 800099e:	20ff      	movs	r0, #255	; 0xff
 80009a0:	0a64      	lsrs	r4, r4, #9
 80009a2:	e739      	b.n	8000818 <__aeabi_fmul+0x8c>
 80009a4:	2080      	movs	r0, #128	; 0x80
 80009a6:	03c0      	lsls	r0, r0, #15
 80009a8:	4304      	orrs	r4, r0
 80009aa:	0264      	lsls	r4, r4, #9
 80009ac:	0031      	movs	r1, r6
 80009ae:	20ff      	movs	r0, #255	; 0xff
 80009b0:	0a64      	lsrs	r4, r4, #9
 80009b2:	e731      	b.n	8000818 <__aeabi_fmul+0x8c>
 80009b4:	0028      	movs	r0, r5
 80009b6:	e765      	b.n	8000884 <__aeabi_fmul+0xf8>
 80009b8:	01a4      	lsls	r4, r4, #6
 80009ba:	2000      	movs	r0, #0
 80009bc:	0a64      	lsrs	r4, r4, #9
 80009be:	e72b      	b.n	8000818 <__aeabi_fmul+0x8c>
 80009c0:	2080      	movs	r0, #128	; 0x80
 80009c2:	03c0      	lsls	r0, r0, #15
 80009c4:	4304      	orrs	r4, r0
 80009c6:	0264      	lsls	r4, r4, #9
 80009c8:	20ff      	movs	r0, #255	; 0xff
 80009ca:	0a64      	lsrs	r4, r4, #9
 80009cc:	e724      	b.n	8000818 <__aeabi_fmul+0x8c>
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	0800cee0 	.word	0x0800cee0
 80009d4:	f7ffffff 	.word	0xf7ffffff

080009d8 <__aeabi_fsub>:
 80009d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009da:	46ce      	mov	lr, r9
 80009dc:	4647      	mov	r7, r8
 80009de:	0243      	lsls	r3, r0, #9
 80009e0:	0a5b      	lsrs	r3, r3, #9
 80009e2:	024e      	lsls	r6, r1, #9
 80009e4:	00da      	lsls	r2, r3, #3
 80009e6:	4694      	mov	ip, r2
 80009e8:	0a72      	lsrs	r2, r6, #9
 80009ea:	4691      	mov	r9, r2
 80009ec:	0045      	lsls	r5, r0, #1
 80009ee:	004a      	lsls	r2, r1, #1
 80009f0:	b580      	push	{r7, lr}
 80009f2:	0e2d      	lsrs	r5, r5, #24
 80009f4:	001f      	movs	r7, r3
 80009f6:	0fc4      	lsrs	r4, r0, #31
 80009f8:	0e12      	lsrs	r2, r2, #24
 80009fa:	0fc9      	lsrs	r1, r1, #31
 80009fc:	09b6      	lsrs	r6, r6, #6
 80009fe:	2aff      	cmp	r2, #255	; 0xff
 8000a00:	d05b      	beq.n	8000aba <__aeabi_fsub+0xe2>
 8000a02:	2001      	movs	r0, #1
 8000a04:	4041      	eors	r1, r0
 8000a06:	428c      	cmp	r4, r1
 8000a08:	d039      	beq.n	8000a7e <__aeabi_fsub+0xa6>
 8000a0a:	1aa8      	subs	r0, r5, r2
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	dd5a      	ble.n	8000ac6 <__aeabi_fsub+0xee>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d06a      	beq.n	8000aea <__aeabi_fsub+0x112>
 8000a14:	2dff      	cmp	r5, #255	; 0xff
 8000a16:	d100      	bne.n	8000a1a <__aeabi_fsub+0x42>
 8000a18:	e0d9      	b.n	8000bce <__aeabi_fsub+0x1f6>
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	04d2      	lsls	r2, r2, #19
 8000a1e:	4316      	orrs	r6, r2
 8000a20:	281b      	cmp	r0, #27
 8000a22:	dc00      	bgt.n	8000a26 <__aeabi_fsub+0x4e>
 8000a24:	e0e9      	b.n	8000bfa <__aeabi_fsub+0x222>
 8000a26:	2001      	movs	r0, #1
 8000a28:	4663      	mov	r3, ip
 8000a2a:	1a18      	subs	r0, r3, r0
 8000a2c:	0143      	lsls	r3, r0, #5
 8000a2e:	d400      	bmi.n	8000a32 <__aeabi_fsub+0x5a>
 8000a30:	e0b4      	b.n	8000b9c <__aeabi_fsub+0x1c4>
 8000a32:	0180      	lsls	r0, r0, #6
 8000a34:	0987      	lsrs	r7, r0, #6
 8000a36:	0038      	movs	r0, r7
 8000a38:	f002 f852 	bl	8002ae0 <__clzsi2>
 8000a3c:	3805      	subs	r0, #5
 8000a3e:	4087      	lsls	r7, r0
 8000a40:	4285      	cmp	r5, r0
 8000a42:	dc00      	bgt.n	8000a46 <__aeabi_fsub+0x6e>
 8000a44:	e0cc      	b.n	8000be0 <__aeabi_fsub+0x208>
 8000a46:	1a2d      	subs	r5, r5, r0
 8000a48:	48b5      	ldr	r0, [pc, #724]	; (8000d20 <__aeabi_fsub+0x348>)
 8000a4a:	4038      	ands	r0, r7
 8000a4c:	0743      	lsls	r3, r0, #29
 8000a4e:	d004      	beq.n	8000a5a <__aeabi_fsub+0x82>
 8000a50:	230f      	movs	r3, #15
 8000a52:	4003      	ands	r3, r0
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d000      	beq.n	8000a5a <__aeabi_fsub+0x82>
 8000a58:	3004      	adds	r0, #4
 8000a5a:	0143      	lsls	r3, r0, #5
 8000a5c:	d400      	bmi.n	8000a60 <__aeabi_fsub+0x88>
 8000a5e:	e0a0      	b.n	8000ba2 <__aeabi_fsub+0x1ca>
 8000a60:	1c6a      	adds	r2, r5, #1
 8000a62:	2dfe      	cmp	r5, #254	; 0xfe
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fsub+0x90>
 8000a66:	e08d      	b.n	8000b84 <__aeabi_fsub+0x1ac>
 8000a68:	0180      	lsls	r0, r0, #6
 8000a6a:	0a47      	lsrs	r7, r0, #9
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	05d0      	lsls	r0, r2, #23
 8000a70:	4338      	orrs	r0, r7
 8000a72:	07e4      	lsls	r4, r4, #31
 8000a74:	4320      	orrs	r0, r4
 8000a76:	bcc0      	pop	{r6, r7}
 8000a78:	46b9      	mov	r9, r7
 8000a7a:	46b0      	mov	r8, r6
 8000a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a7e:	1aa8      	subs	r0, r5, r2
 8000a80:	4680      	mov	r8, r0
 8000a82:	2800      	cmp	r0, #0
 8000a84:	dd45      	ble.n	8000b12 <__aeabi_fsub+0x13a>
 8000a86:	2a00      	cmp	r2, #0
 8000a88:	d070      	beq.n	8000b6c <__aeabi_fsub+0x194>
 8000a8a:	2dff      	cmp	r5, #255	; 0xff
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fsub+0xb8>
 8000a8e:	e09e      	b.n	8000bce <__aeabi_fsub+0x1f6>
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	04db      	lsls	r3, r3, #19
 8000a94:	431e      	orrs	r6, r3
 8000a96:	4643      	mov	r3, r8
 8000a98:	2b1b      	cmp	r3, #27
 8000a9a:	dc00      	bgt.n	8000a9e <__aeabi_fsub+0xc6>
 8000a9c:	e0d2      	b.n	8000c44 <__aeabi_fsub+0x26c>
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	4460      	add	r0, ip
 8000aa2:	0143      	lsls	r3, r0, #5
 8000aa4:	d57a      	bpl.n	8000b9c <__aeabi_fsub+0x1c4>
 8000aa6:	3501      	adds	r5, #1
 8000aa8:	2dff      	cmp	r5, #255	; 0xff
 8000aaa:	d06b      	beq.n	8000b84 <__aeabi_fsub+0x1ac>
 8000aac:	2301      	movs	r3, #1
 8000aae:	4a9d      	ldr	r2, [pc, #628]	; (8000d24 <__aeabi_fsub+0x34c>)
 8000ab0:	4003      	ands	r3, r0
 8000ab2:	0840      	lsrs	r0, r0, #1
 8000ab4:	4010      	ands	r0, r2
 8000ab6:	4318      	orrs	r0, r3
 8000ab8:	e7c8      	b.n	8000a4c <__aeabi_fsub+0x74>
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	d020      	beq.n	8000b00 <__aeabi_fsub+0x128>
 8000abe:	428c      	cmp	r4, r1
 8000ac0:	d023      	beq.n	8000b0a <__aeabi_fsub+0x132>
 8000ac2:	0028      	movs	r0, r5
 8000ac4:	38ff      	subs	r0, #255	; 0xff
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	d039      	beq.n	8000b3e <__aeabi_fsub+0x166>
 8000aca:	1b57      	subs	r7, r2, r5
 8000acc:	2d00      	cmp	r5, #0
 8000ace:	d000      	beq.n	8000ad2 <__aeabi_fsub+0xfa>
 8000ad0:	e09d      	b.n	8000c0e <__aeabi_fsub+0x236>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d100      	bne.n	8000ada <__aeabi_fsub+0x102>
 8000ad8:	e0db      	b.n	8000c92 <__aeabi_fsub+0x2ba>
 8000ada:	1e7b      	subs	r3, r7, #1
 8000adc:	2f01      	cmp	r7, #1
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fsub+0x10a>
 8000ae0:	e10d      	b.n	8000cfe <__aeabi_fsub+0x326>
 8000ae2:	2fff      	cmp	r7, #255	; 0xff
 8000ae4:	d071      	beq.n	8000bca <__aeabi_fsub+0x1f2>
 8000ae6:	001f      	movs	r7, r3
 8000ae8:	e098      	b.n	8000c1c <__aeabi_fsub+0x244>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d100      	bne.n	8000af0 <__aeabi_fsub+0x118>
 8000aee:	e0a7      	b.n	8000c40 <__aeabi_fsub+0x268>
 8000af0:	1e42      	subs	r2, r0, #1
 8000af2:	2801      	cmp	r0, #1
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fsub+0x120>
 8000af6:	e0e6      	b.n	8000cc6 <__aeabi_fsub+0x2ee>
 8000af8:	28ff      	cmp	r0, #255	; 0xff
 8000afa:	d068      	beq.n	8000bce <__aeabi_fsub+0x1f6>
 8000afc:	0010      	movs	r0, r2
 8000afe:	e78f      	b.n	8000a20 <__aeabi_fsub+0x48>
 8000b00:	2001      	movs	r0, #1
 8000b02:	4041      	eors	r1, r0
 8000b04:	42a1      	cmp	r1, r4
 8000b06:	d000      	beq.n	8000b0a <__aeabi_fsub+0x132>
 8000b08:	e77f      	b.n	8000a0a <__aeabi_fsub+0x32>
 8000b0a:	20ff      	movs	r0, #255	; 0xff
 8000b0c:	4240      	negs	r0, r0
 8000b0e:	4680      	mov	r8, r0
 8000b10:	44a8      	add	r8, r5
 8000b12:	4640      	mov	r0, r8
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d038      	beq.n	8000b8a <__aeabi_fsub+0x1b2>
 8000b18:	1b51      	subs	r1, r2, r5
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fsub+0x148>
 8000b1e:	e0ae      	b.n	8000c7e <__aeabi_fsub+0x2a6>
 8000b20:	2aff      	cmp	r2, #255	; 0xff
 8000b22:	d100      	bne.n	8000b26 <__aeabi_fsub+0x14e>
 8000b24:	e0df      	b.n	8000ce6 <__aeabi_fsub+0x30e>
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	4660      	mov	r0, ip
 8000b2a:	04db      	lsls	r3, r3, #19
 8000b2c:	4318      	orrs	r0, r3
 8000b2e:	4684      	mov	ip, r0
 8000b30:	291b      	cmp	r1, #27
 8000b32:	dc00      	bgt.n	8000b36 <__aeabi_fsub+0x15e>
 8000b34:	e0d9      	b.n	8000cea <__aeabi_fsub+0x312>
 8000b36:	2001      	movs	r0, #1
 8000b38:	0015      	movs	r5, r2
 8000b3a:	1980      	adds	r0, r0, r6
 8000b3c:	e7b1      	b.n	8000aa2 <__aeabi_fsub+0xca>
 8000b3e:	20fe      	movs	r0, #254	; 0xfe
 8000b40:	1c6a      	adds	r2, r5, #1
 8000b42:	4210      	tst	r0, r2
 8000b44:	d171      	bne.n	8000c2a <__aeabi_fsub+0x252>
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d000      	beq.n	8000b4c <__aeabi_fsub+0x174>
 8000b4a:	e0a6      	b.n	8000c9a <__aeabi_fsub+0x2c2>
 8000b4c:	4663      	mov	r3, ip
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d100      	bne.n	8000b54 <__aeabi_fsub+0x17c>
 8000b52:	e0d9      	b.n	8000d08 <__aeabi_fsub+0x330>
 8000b54:	2200      	movs	r2, #0
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fsub+0x184>
 8000b5a:	e788      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000b5c:	1b98      	subs	r0, r3, r6
 8000b5e:	0143      	lsls	r3, r0, #5
 8000b60:	d400      	bmi.n	8000b64 <__aeabi_fsub+0x18c>
 8000b62:	e0e1      	b.n	8000d28 <__aeabi_fsub+0x350>
 8000b64:	4663      	mov	r3, ip
 8000b66:	000c      	movs	r4, r1
 8000b68:	1af0      	subs	r0, r6, r3
 8000b6a:	e76f      	b.n	8000a4c <__aeabi_fsub+0x74>
 8000b6c:	2e00      	cmp	r6, #0
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_fsub+0x19a>
 8000b70:	e0b7      	b.n	8000ce2 <__aeabi_fsub+0x30a>
 8000b72:	0002      	movs	r2, r0
 8000b74:	3a01      	subs	r2, #1
 8000b76:	2801      	cmp	r0, #1
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fsub+0x1a4>
 8000b7a:	e09c      	b.n	8000cb6 <__aeabi_fsub+0x2de>
 8000b7c:	28ff      	cmp	r0, #255	; 0xff
 8000b7e:	d026      	beq.n	8000bce <__aeabi_fsub+0x1f6>
 8000b80:	4690      	mov	r8, r2
 8000b82:	e788      	b.n	8000a96 <__aeabi_fsub+0xbe>
 8000b84:	22ff      	movs	r2, #255	; 0xff
 8000b86:	2700      	movs	r7, #0
 8000b88:	e771      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000b8a:	20fe      	movs	r0, #254	; 0xfe
 8000b8c:	1c6a      	adds	r2, r5, #1
 8000b8e:	4210      	tst	r0, r2
 8000b90:	d064      	beq.n	8000c5c <__aeabi_fsub+0x284>
 8000b92:	2aff      	cmp	r2, #255	; 0xff
 8000b94:	d0f6      	beq.n	8000b84 <__aeabi_fsub+0x1ac>
 8000b96:	0015      	movs	r5, r2
 8000b98:	4466      	add	r6, ip
 8000b9a:	0870      	lsrs	r0, r6, #1
 8000b9c:	0743      	lsls	r3, r0, #29
 8000b9e:	d000      	beq.n	8000ba2 <__aeabi_fsub+0x1ca>
 8000ba0:	e756      	b.n	8000a50 <__aeabi_fsub+0x78>
 8000ba2:	08c3      	lsrs	r3, r0, #3
 8000ba4:	2dff      	cmp	r5, #255	; 0xff
 8000ba6:	d012      	beq.n	8000bce <__aeabi_fsub+0x1f6>
 8000ba8:	025b      	lsls	r3, r3, #9
 8000baa:	0a5f      	lsrs	r7, r3, #9
 8000bac:	b2ea      	uxtb	r2, r5
 8000bae:	e75e      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000bb0:	4662      	mov	r2, ip
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fsub+0x1e0>
 8000bb6:	e096      	b.n	8000ce6 <__aeabi_fsub+0x30e>
 8000bb8:	2e00      	cmp	r6, #0
 8000bba:	d008      	beq.n	8000bce <__aeabi_fsub+0x1f6>
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	03d2      	lsls	r2, r2, #15
 8000bc0:	4213      	tst	r3, r2
 8000bc2:	d004      	beq.n	8000bce <__aeabi_fsub+0x1f6>
 8000bc4:	4648      	mov	r0, r9
 8000bc6:	4210      	tst	r0, r2
 8000bc8:	d101      	bne.n	8000bce <__aeabi_fsub+0x1f6>
 8000bca:	000c      	movs	r4, r1
 8000bcc:	464b      	mov	r3, r9
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0d8      	beq.n	8000b84 <__aeabi_fsub+0x1ac>
 8000bd2:	2780      	movs	r7, #128	; 0x80
 8000bd4:	03ff      	lsls	r7, r7, #15
 8000bd6:	431f      	orrs	r7, r3
 8000bd8:	027f      	lsls	r7, r7, #9
 8000bda:	22ff      	movs	r2, #255	; 0xff
 8000bdc:	0a7f      	lsrs	r7, r7, #9
 8000bde:	e746      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000be0:	2320      	movs	r3, #32
 8000be2:	003a      	movs	r2, r7
 8000be4:	1b45      	subs	r5, r0, r5
 8000be6:	0038      	movs	r0, r7
 8000be8:	3501      	adds	r5, #1
 8000bea:	40ea      	lsrs	r2, r5
 8000bec:	1b5d      	subs	r5, r3, r5
 8000bee:	40a8      	lsls	r0, r5
 8000bf0:	1e43      	subs	r3, r0, #1
 8000bf2:	4198      	sbcs	r0, r3
 8000bf4:	2500      	movs	r5, #0
 8000bf6:	4310      	orrs	r0, r2
 8000bf8:	e728      	b.n	8000a4c <__aeabi_fsub+0x74>
 8000bfa:	2320      	movs	r3, #32
 8000bfc:	1a1b      	subs	r3, r3, r0
 8000bfe:	0032      	movs	r2, r6
 8000c00:	409e      	lsls	r6, r3
 8000c02:	40c2      	lsrs	r2, r0
 8000c04:	0030      	movs	r0, r6
 8000c06:	1e43      	subs	r3, r0, #1
 8000c08:	4198      	sbcs	r0, r3
 8000c0a:	4310      	orrs	r0, r2
 8000c0c:	e70c      	b.n	8000a28 <__aeabi_fsub+0x50>
 8000c0e:	2aff      	cmp	r2, #255	; 0xff
 8000c10:	d0db      	beq.n	8000bca <__aeabi_fsub+0x1f2>
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	4660      	mov	r0, ip
 8000c16:	04db      	lsls	r3, r3, #19
 8000c18:	4318      	orrs	r0, r3
 8000c1a:	4684      	mov	ip, r0
 8000c1c:	2f1b      	cmp	r7, #27
 8000c1e:	dd56      	ble.n	8000cce <__aeabi_fsub+0x2f6>
 8000c20:	2001      	movs	r0, #1
 8000c22:	000c      	movs	r4, r1
 8000c24:	0015      	movs	r5, r2
 8000c26:	1a30      	subs	r0, r6, r0
 8000c28:	e700      	b.n	8000a2c <__aeabi_fsub+0x54>
 8000c2a:	4663      	mov	r3, ip
 8000c2c:	1b9f      	subs	r7, r3, r6
 8000c2e:	017b      	lsls	r3, r7, #5
 8000c30:	d43d      	bmi.n	8000cae <__aeabi_fsub+0x2d6>
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d000      	beq.n	8000c38 <__aeabi_fsub+0x260>
 8000c36:	e6fe      	b.n	8000a36 <__aeabi_fsub+0x5e>
 8000c38:	2400      	movs	r4, #0
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	e716      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000c40:	0005      	movs	r5, r0
 8000c42:	e7af      	b.n	8000ba4 <__aeabi_fsub+0x1cc>
 8000c44:	0032      	movs	r2, r6
 8000c46:	4643      	mov	r3, r8
 8000c48:	4641      	mov	r1, r8
 8000c4a:	40da      	lsrs	r2, r3
 8000c4c:	2320      	movs	r3, #32
 8000c4e:	1a5b      	subs	r3, r3, r1
 8000c50:	409e      	lsls	r6, r3
 8000c52:	0030      	movs	r0, r6
 8000c54:	1e43      	subs	r3, r0, #1
 8000c56:	4198      	sbcs	r0, r3
 8000c58:	4310      	orrs	r0, r2
 8000c5a:	e721      	b.n	8000aa0 <__aeabi_fsub+0xc8>
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d1a7      	bne.n	8000bb0 <__aeabi_fsub+0x1d8>
 8000c60:	4663      	mov	r3, ip
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d059      	beq.n	8000d1a <__aeabi_fsub+0x342>
 8000c66:	2200      	movs	r2, #0
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_fsub+0x296>
 8000c6c:	e6ff      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000c6e:	0030      	movs	r0, r6
 8000c70:	4460      	add	r0, ip
 8000c72:	0143      	lsls	r3, r0, #5
 8000c74:	d592      	bpl.n	8000b9c <__aeabi_fsub+0x1c4>
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <__aeabi_fsub+0x348>)
 8000c78:	3501      	adds	r5, #1
 8000c7a:	4018      	ands	r0, r3
 8000c7c:	e78e      	b.n	8000b9c <__aeabi_fsub+0x1c4>
 8000c7e:	4663      	mov	r3, ip
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d047      	beq.n	8000d14 <__aeabi_fsub+0x33c>
 8000c84:	1e4b      	subs	r3, r1, #1
 8000c86:	2901      	cmp	r1, #1
 8000c88:	d015      	beq.n	8000cb6 <__aeabi_fsub+0x2de>
 8000c8a:	29ff      	cmp	r1, #255	; 0xff
 8000c8c:	d02b      	beq.n	8000ce6 <__aeabi_fsub+0x30e>
 8000c8e:	0019      	movs	r1, r3
 8000c90:	e74e      	b.n	8000b30 <__aeabi_fsub+0x158>
 8000c92:	000c      	movs	r4, r1
 8000c94:	464b      	mov	r3, r9
 8000c96:	003d      	movs	r5, r7
 8000c98:	e784      	b.n	8000ba4 <__aeabi_fsub+0x1cc>
 8000c9a:	4662      	mov	r2, ip
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	d18b      	bne.n	8000bb8 <__aeabi_fsub+0x1e0>
 8000ca0:	2e00      	cmp	r6, #0
 8000ca2:	d192      	bne.n	8000bca <__aeabi_fsub+0x1f2>
 8000ca4:	2780      	movs	r7, #128	; 0x80
 8000ca6:	2400      	movs	r4, #0
 8000ca8:	22ff      	movs	r2, #255	; 0xff
 8000caa:	03ff      	lsls	r7, r7, #15
 8000cac:	e6df      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000cae:	4663      	mov	r3, ip
 8000cb0:	000c      	movs	r4, r1
 8000cb2:	1af7      	subs	r7, r6, r3
 8000cb4:	e6bf      	b.n	8000a36 <__aeabi_fsub+0x5e>
 8000cb6:	0030      	movs	r0, r6
 8000cb8:	4460      	add	r0, ip
 8000cba:	2501      	movs	r5, #1
 8000cbc:	0143      	lsls	r3, r0, #5
 8000cbe:	d400      	bmi.n	8000cc2 <__aeabi_fsub+0x2ea>
 8000cc0:	e76c      	b.n	8000b9c <__aeabi_fsub+0x1c4>
 8000cc2:	2502      	movs	r5, #2
 8000cc4:	e6f2      	b.n	8000aac <__aeabi_fsub+0xd4>
 8000cc6:	4663      	mov	r3, ip
 8000cc8:	2501      	movs	r5, #1
 8000cca:	1b98      	subs	r0, r3, r6
 8000ccc:	e6ae      	b.n	8000a2c <__aeabi_fsub+0x54>
 8000cce:	2320      	movs	r3, #32
 8000cd0:	4664      	mov	r4, ip
 8000cd2:	4660      	mov	r0, ip
 8000cd4:	40fc      	lsrs	r4, r7
 8000cd6:	1bdf      	subs	r7, r3, r7
 8000cd8:	40b8      	lsls	r0, r7
 8000cda:	1e43      	subs	r3, r0, #1
 8000cdc:	4198      	sbcs	r0, r3
 8000cde:	4320      	orrs	r0, r4
 8000ce0:	e79f      	b.n	8000c22 <__aeabi_fsub+0x24a>
 8000ce2:	0005      	movs	r5, r0
 8000ce4:	e75e      	b.n	8000ba4 <__aeabi_fsub+0x1cc>
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	e771      	b.n	8000bce <__aeabi_fsub+0x1f6>
 8000cea:	2320      	movs	r3, #32
 8000cec:	4665      	mov	r5, ip
 8000cee:	4660      	mov	r0, ip
 8000cf0:	40cd      	lsrs	r5, r1
 8000cf2:	1a59      	subs	r1, r3, r1
 8000cf4:	4088      	lsls	r0, r1
 8000cf6:	1e43      	subs	r3, r0, #1
 8000cf8:	4198      	sbcs	r0, r3
 8000cfa:	4328      	orrs	r0, r5
 8000cfc:	e71c      	b.n	8000b38 <__aeabi_fsub+0x160>
 8000cfe:	4663      	mov	r3, ip
 8000d00:	000c      	movs	r4, r1
 8000d02:	2501      	movs	r5, #1
 8000d04:	1af0      	subs	r0, r6, r3
 8000d06:	e691      	b.n	8000a2c <__aeabi_fsub+0x54>
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d095      	beq.n	8000c38 <__aeabi_fsub+0x260>
 8000d0c:	000c      	movs	r4, r1
 8000d0e:	464f      	mov	r7, r9
 8000d10:	2200      	movs	r2, #0
 8000d12:	e6ac      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000d14:	464b      	mov	r3, r9
 8000d16:	000d      	movs	r5, r1
 8000d18:	e744      	b.n	8000ba4 <__aeabi_fsub+0x1cc>
 8000d1a:	464f      	mov	r7, r9
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	e6a6      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000d20:	fbffffff 	.word	0xfbffffff
 8000d24:	7dffffff 	.word	0x7dffffff
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	d000      	beq.n	8000d2e <__aeabi_fsub+0x356>
 8000d2c:	e736      	b.n	8000b9c <__aeabi_fsub+0x1c4>
 8000d2e:	2400      	movs	r4, #0
 8000d30:	2700      	movs	r7, #0
 8000d32:	e69c      	b.n	8000a6e <__aeabi_fsub+0x96>

08000d34 <__aeabi_f2iz>:
 8000d34:	0241      	lsls	r1, r0, #9
 8000d36:	0042      	lsls	r2, r0, #1
 8000d38:	0fc3      	lsrs	r3, r0, #31
 8000d3a:	0a49      	lsrs	r1, r1, #9
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	0e12      	lsrs	r2, r2, #24
 8000d40:	2a7e      	cmp	r2, #126	; 0x7e
 8000d42:	dd03      	ble.n	8000d4c <__aeabi_f2iz+0x18>
 8000d44:	2a9d      	cmp	r2, #157	; 0x9d
 8000d46:	dd02      	ble.n	8000d4e <__aeabi_f2iz+0x1a>
 8000d48:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <__aeabi_f2iz+0x3c>)
 8000d4a:	1898      	adds	r0, r3, r2
 8000d4c:	4770      	bx	lr
 8000d4e:	2080      	movs	r0, #128	; 0x80
 8000d50:	0400      	lsls	r0, r0, #16
 8000d52:	4301      	orrs	r1, r0
 8000d54:	2a95      	cmp	r2, #149	; 0x95
 8000d56:	dc07      	bgt.n	8000d68 <__aeabi_f2iz+0x34>
 8000d58:	2096      	movs	r0, #150	; 0x96
 8000d5a:	1a82      	subs	r2, r0, r2
 8000d5c:	40d1      	lsrs	r1, r2
 8000d5e:	4248      	negs	r0, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1f3      	bne.n	8000d4c <__aeabi_f2iz+0x18>
 8000d64:	0008      	movs	r0, r1
 8000d66:	e7f1      	b.n	8000d4c <__aeabi_f2iz+0x18>
 8000d68:	3a96      	subs	r2, #150	; 0x96
 8000d6a:	4091      	lsls	r1, r2
 8000d6c:	e7f7      	b.n	8000d5e <__aeabi_f2iz+0x2a>
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	7fffffff 	.word	0x7fffffff

08000d74 <__aeabi_dadd>:
 8000d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d76:	464f      	mov	r7, r9
 8000d78:	4646      	mov	r6, r8
 8000d7a:	46d6      	mov	lr, sl
 8000d7c:	000d      	movs	r5, r1
 8000d7e:	0004      	movs	r4, r0
 8000d80:	b5c0      	push	{r6, r7, lr}
 8000d82:	001f      	movs	r7, r3
 8000d84:	0011      	movs	r1, r2
 8000d86:	0328      	lsls	r0, r5, #12
 8000d88:	0f62      	lsrs	r2, r4, #29
 8000d8a:	0a40      	lsrs	r0, r0, #9
 8000d8c:	4310      	orrs	r0, r2
 8000d8e:	007a      	lsls	r2, r7, #1
 8000d90:	0d52      	lsrs	r2, r2, #21
 8000d92:	00e3      	lsls	r3, r4, #3
 8000d94:	033c      	lsls	r4, r7, #12
 8000d96:	4691      	mov	r9, r2
 8000d98:	0a64      	lsrs	r4, r4, #9
 8000d9a:	0ffa      	lsrs	r2, r7, #31
 8000d9c:	0f4f      	lsrs	r7, r1, #29
 8000d9e:	006e      	lsls	r6, r5, #1
 8000da0:	4327      	orrs	r7, r4
 8000da2:	4692      	mov	sl, r2
 8000da4:	46b8      	mov	r8, r7
 8000da6:	0d76      	lsrs	r6, r6, #21
 8000da8:	0fed      	lsrs	r5, r5, #31
 8000daa:	00c9      	lsls	r1, r1, #3
 8000dac:	4295      	cmp	r5, r2
 8000dae:	d100      	bne.n	8000db2 <__aeabi_dadd+0x3e>
 8000db0:	e099      	b.n	8000ee6 <__aeabi_dadd+0x172>
 8000db2:	464c      	mov	r4, r9
 8000db4:	1b34      	subs	r4, r6, r4
 8000db6:	46a4      	mov	ip, r4
 8000db8:	2c00      	cmp	r4, #0
 8000dba:	dc00      	bgt.n	8000dbe <__aeabi_dadd+0x4a>
 8000dbc:	e07c      	b.n	8000eb8 <__aeabi_dadd+0x144>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	2a00      	cmp	r2, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_dadd+0x52>
 8000dc4:	e0b8      	b.n	8000f38 <__aeabi_dadd+0x1c4>
 8000dc6:	4ac5      	ldr	r2, [pc, #788]	; (80010dc <__aeabi_dadd+0x368>)
 8000dc8:	4296      	cmp	r6, r2
 8000dca:	d100      	bne.n	8000dce <__aeabi_dadd+0x5a>
 8000dcc:	e11c      	b.n	8001008 <__aeabi_dadd+0x294>
 8000dce:	2280      	movs	r2, #128	; 0x80
 8000dd0:	003c      	movs	r4, r7
 8000dd2:	0412      	lsls	r2, r2, #16
 8000dd4:	4314      	orrs	r4, r2
 8000dd6:	46a0      	mov	r8, r4
 8000dd8:	4662      	mov	r2, ip
 8000dda:	2a38      	cmp	r2, #56	; 0x38
 8000ddc:	dd00      	ble.n	8000de0 <__aeabi_dadd+0x6c>
 8000dde:	e161      	b.n	80010a4 <__aeabi_dadd+0x330>
 8000de0:	2a1f      	cmp	r2, #31
 8000de2:	dd00      	ble.n	8000de6 <__aeabi_dadd+0x72>
 8000de4:	e1cc      	b.n	8001180 <__aeabi_dadd+0x40c>
 8000de6:	4664      	mov	r4, ip
 8000de8:	2220      	movs	r2, #32
 8000dea:	1b12      	subs	r2, r2, r4
 8000dec:	4644      	mov	r4, r8
 8000dee:	4094      	lsls	r4, r2
 8000df0:	000f      	movs	r7, r1
 8000df2:	46a1      	mov	r9, r4
 8000df4:	4664      	mov	r4, ip
 8000df6:	4091      	lsls	r1, r2
 8000df8:	40e7      	lsrs	r7, r4
 8000dfa:	464c      	mov	r4, r9
 8000dfc:	1e4a      	subs	r2, r1, #1
 8000dfe:	4191      	sbcs	r1, r2
 8000e00:	433c      	orrs	r4, r7
 8000e02:	4642      	mov	r2, r8
 8000e04:	4321      	orrs	r1, r4
 8000e06:	4664      	mov	r4, ip
 8000e08:	40e2      	lsrs	r2, r4
 8000e0a:	1a80      	subs	r0, r0, r2
 8000e0c:	1a5c      	subs	r4, r3, r1
 8000e0e:	42a3      	cmp	r3, r4
 8000e10:	419b      	sbcs	r3, r3
 8000e12:	425f      	negs	r7, r3
 8000e14:	1bc7      	subs	r7, r0, r7
 8000e16:	023b      	lsls	r3, r7, #8
 8000e18:	d400      	bmi.n	8000e1c <__aeabi_dadd+0xa8>
 8000e1a:	e0d0      	b.n	8000fbe <__aeabi_dadd+0x24a>
 8000e1c:	027f      	lsls	r7, r7, #9
 8000e1e:	0a7f      	lsrs	r7, r7, #9
 8000e20:	2f00      	cmp	r7, #0
 8000e22:	d100      	bne.n	8000e26 <__aeabi_dadd+0xb2>
 8000e24:	e0ff      	b.n	8001026 <__aeabi_dadd+0x2b2>
 8000e26:	0038      	movs	r0, r7
 8000e28:	f001 fe5a 	bl	8002ae0 <__clzsi2>
 8000e2c:	0001      	movs	r1, r0
 8000e2e:	3908      	subs	r1, #8
 8000e30:	2320      	movs	r3, #32
 8000e32:	0022      	movs	r2, r4
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	408f      	lsls	r7, r1
 8000e38:	40da      	lsrs	r2, r3
 8000e3a:	408c      	lsls	r4, r1
 8000e3c:	4317      	orrs	r7, r2
 8000e3e:	42b1      	cmp	r1, r6
 8000e40:	da00      	bge.n	8000e44 <__aeabi_dadd+0xd0>
 8000e42:	e0ff      	b.n	8001044 <__aeabi_dadd+0x2d0>
 8000e44:	1b89      	subs	r1, r1, r6
 8000e46:	1c4b      	adds	r3, r1, #1
 8000e48:	2b1f      	cmp	r3, #31
 8000e4a:	dd00      	ble.n	8000e4e <__aeabi_dadd+0xda>
 8000e4c:	e0a8      	b.n	8000fa0 <__aeabi_dadd+0x22c>
 8000e4e:	2220      	movs	r2, #32
 8000e50:	0039      	movs	r1, r7
 8000e52:	1ad2      	subs	r2, r2, r3
 8000e54:	0020      	movs	r0, r4
 8000e56:	4094      	lsls	r4, r2
 8000e58:	4091      	lsls	r1, r2
 8000e5a:	40d8      	lsrs	r0, r3
 8000e5c:	1e62      	subs	r2, r4, #1
 8000e5e:	4194      	sbcs	r4, r2
 8000e60:	40df      	lsrs	r7, r3
 8000e62:	2600      	movs	r6, #0
 8000e64:	4301      	orrs	r1, r0
 8000e66:	430c      	orrs	r4, r1
 8000e68:	0763      	lsls	r3, r4, #29
 8000e6a:	d009      	beq.n	8000e80 <__aeabi_dadd+0x10c>
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	4023      	ands	r3, r4
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d005      	beq.n	8000e80 <__aeabi_dadd+0x10c>
 8000e74:	1d23      	adds	r3, r4, #4
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	41a4      	sbcs	r4, r4
 8000e7a:	4264      	negs	r4, r4
 8000e7c:	193f      	adds	r7, r7, r4
 8000e7e:	001c      	movs	r4, r3
 8000e80:	023b      	lsls	r3, r7, #8
 8000e82:	d400      	bmi.n	8000e86 <__aeabi_dadd+0x112>
 8000e84:	e09e      	b.n	8000fc4 <__aeabi_dadd+0x250>
 8000e86:	4b95      	ldr	r3, [pc, #596]	; (80010dc <__aeabi_dadd+0x368>)
 8000e88:	3601      	adds	r6, #1
 8000e8a:	429e      	cmp	r6, r3
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_dadd+0x11c>
 8000e8e:	e0b7      	b.n	8001000 <__aeabi_dadd+0x28c>
 8000e90:	4a93      	ldr	r2, [pc, #588]	; (80010e0 <__aeabi_dadd+0x36c>)
 8000e92:	08e4      	lsrs	r4, r4, #3
 8000e94:	4017      	ands	r7, r2
 8000e96:	077b      	lsls	r3, r7, #29
 8000e98:	0571      	lsls	r1, r6, #21
 8000e9a:	027f      	lsls	r7, r7, #9
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	0b3f      	lsrs	r7, r7, #12
 8000ea0:	0d4a      	lsrs	r2, r1, #21
 8000ea2:	0512      	lsls	r2, r2, #20
 8000ea4:	433a      	orrs	r2, r7
 8000ea6:	07ed      	lsls	r5, r5, #31
 8000ea8:	432a      	orrs	r2, r5
 8000eaa:	0018      	movs	r0, r3
 8000eac:	0011      	movs	r1, r2
 8000eae:	bce0      	pop	{r5, r6, r7}
 8000eb0:	46ba      	mov	sl, r7
 8000eb2:	46b1      	mov	r9, r6
 8000eb4:	46a8      	mov	r8, r5
 8000eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb8:	2c00      	cmp	r4, #0
 8000eba:	d04b      	beq.n	8000f54 <__aeabi_dadd+0x1e0>
 8000ebc:	464c      	mov	r4, r9
 8000ebe:	1ba4      	subs	r4, r4, r6
 8000ec0:	46a4      	mov	ip, r4
 8000ec2:	2e00      	cmp	r6, #0
 8000ec4:	d000      	beq.n	8000ec8 <__aeabi_dadd+0x154>
 8000ec6:	e123      	b.n	8001110 <__aeabi_dadd+0x39c>
 8000ec8:	0004      	movs	r4, r0
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_dadd+0x15c>
 8000ece:	e1af      	b.n	8001230 <__aeabi_dadd+0x4bc>
 8000ed0:	4662      	mov	r2, ip
 8000ed2:	1e54      	subs	r4, r2, #1
 8000ed4:	2a01      	cmp	r2, #1
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dadd+0x166>
 8000ed8:	e215      	b.n	8001306 <__aeabi_dadd+0x592>
 8000eda:	4d80      	ldr	r5, [pc, #512]	; (80010dc <__aeabi_dadd+0x368>)
 8000edc:	45ac      	cmp	ip, r5
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dadd+0x16e>
 8000ee0:	e1c8      	b.n	8001274 <__aeabi_dadd+0x500>
 8000ee2:	46a4      	mov	ip, r4
 8000ee4:	e11b      	b.n	800111e <__aeabi_dadd+0x3aa>
 8000ee6:	464a      	mov	r2, r9
 8000ee8:	1ab2      	subs	r2, r6, r2
 8000eea:	4694      	mov	ip, r2
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	dc00      	bgt.n	8000ef2 <__aeabi_dadd+0x17e>
 8000ef0:	e0ac      	b.n	800104c <__aeabi_dadd+0x2d8>
 8000ef2:	464a      	mov	r2, r9
 8000ef4:	2a00      	cmp	r2, #0
 8000ef6:	d043      	beq.n	8000f80 <__aeabi_dadd+0x20c>
 8000ef8:	4a78      	ldr	r2, [pc, #480]	; (80010dc <__aeabi_dadd+0x368>)
 8000efa:	4296      	cmp	r6, r2
 8000efc:	d100      	bne.n	8000f00 <__aeabi_dadd+0x18c>
 8000efe:	e1af      	b.n	8001260 <__aeabi_dadd+0x4ec>
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	003c      	movs	r4, r7
 8000f04:	0412      	lsls	r2, r2, #16
 8000f06:	4314      	orrs	r4, r2
 8000f08:	46a0      	mov	r8, r4
 8000f0a:	4662      	mov	r2, ip
 8000f0c:	2a38      	cmp	r2, #56	; 0x38
 8000f0e:	dc67      	bgt.n	8000fe0 <__aeabi_dadd+0x26c>
 8000f10:	2a1f      	cmp	r2, #31
 8000f12:	dc00      	bgt.n	8000f16 <__aeabi_dadd+0x1a2>
 8000f14:	e15f      	b.n	80011d6 <__aeabi_dadd+0x462>
 8000f16:	4647      	mov	r7, r8
 8000f18:	3a20      	subs	r2, #32
 8000f1a:	40d7      	lsrs	r7, r2
 8000f1c:	4662      	mov	r2, ip
 8000f1e:	2a20      	cmp	r2, #32
 8000f20:	d005      	beq.n	8000f2e <__aeabi_dadd+0x1ba>
 8000f22:	4664      	mov	r4, ip
 8000f24:	2240      	movs	r2, #64	; 0x40
 8000f26:	1b12      	subs	r2, r2, r4
 8000f28:	4644      	mov	r4, r8
 8000f2a:	4094      	lsls	r4, r2
 8000f2c:	4321      	orrs	r1, r4
 8000f2e:	1e4a      	subs	r2, r1, #1
 8000f30:	4191      	sbcs	r1, r2
 8000f32:	000c      	movs	r4, r1
 8000f34:	433c      	orrs	r4, r7
 8000f36:	e057      	b.n	8000fe8 <__aeabi_dadd+0x274>
 8000f38:	003a      	movs	r2, r7
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_dadd+0x1cc>
 8000f3e:	e105      	b.n	800114c <__aeabi_dadd+0x3d8>
 8000f40:	0022      	movs	r2, r4
 8000f42:	3a01      	subs	r2, #1
 8000f44:	2c01      	cmp	r4, #1
 8000f46:	d100      	bne.n	8000f4a <__aeabi_dadd+0x1d6>
 8000f48:	e182      	b.n	8001250 <__aeabi_dadd+0x4dc>
 8000f4a:	4c64      	ldr	r4, [pc, #400]	; (80010dc <__aeabi_dadd+0x368>)
 8000f4c:	45a4      	cmp	ip, r4
 8000f4e:	d05b      	beq.n	8001008 <__aeabi_dadd+0x294>
 8000f50:	4694      	mov	ip, r2
 8000f52:	e741      	b.n	8000dd8 <__aeabi_dadd+0x64>
 8000f54:	4c63      	ldr	r4, [pc, #396]	; (80010e4 <__aeabi_dadd+0x370>)
 8000f56:	1c77      	adds	r7, r6, #1
 8000f58:	4227      	tst	r7, r4
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_dadd+0x1ea>
 8000f5c:	e0c4      	b.n	80010e8 <__aeabi_dadd+0x374>
 8000f5e:	0004      	movs	r4, r0
 8000f60:	431c      	orrs	r4, r3
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	d000      	beq.n	8000f68 <__aeabi_dadd+0x1f4>
 8000f66:	e169      	b.n	800123c <__aeabi_dadd+0x4c8>
 8000f68:	2c00      	cmp	r4, #0
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_dadd+0x1fa>
 8000f6c:	e1bf      	b.n	80012ee <__aeabi_dadd+0x57a>
 8000f6e:	4644      	mov	r4, r8
 8000f70:	430c      	orrs	r4, r1
 8000f72:	d000      	beq.n	8000f76 <__aeabi_dadd+0x202>
 8000f74:	e1d0      	b.n	8001318 <__aeabi_dadd+0x5a4>
 8000f76:	0742      	lsls	r2, r0, #29
 8000f78:	08db      	lsrs	r3, r3, #3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	08c0      	lsrs	r0, r0, #3
 8000f7e:	e029      	b.n	8000fd4 <__aeabi_dadd+0x260>
 8000f80:	003a      	movs	r2, r7
 8000f82:	430a      	orrs	r2, r1
 8000f84:	d100      	bne.n	8000f88 <__aeabi_dadd+0x214>
 8000f86:	e170      	b.n	800126a <__aeabi_dadd+0x4f6>
 8000f88:	4662      	mov	r2, ip
 8000f8a:	4664      	mov	r4, ip
 8000f8c:	3a01      	subs	r2, #1
 8000f8e:	2c01      	cmp	r4, #1
 8000f90:	d100      	bne.n	8000f94 <__aeabi_dadd+0x220>
 8000f92:	e0e0      	b.n	8001156 <__aeabi_dadd+0x3e2>
 8000f94:	4c51      	ldr	r4, [pc, #324]	; (80010dc <__aeabi_dadd+0x368>)
 8000f96:	45a4      	cmp	ip, r4
 8000f98:	d100      	bne.n	8000f9c <__aeabi_dadd+0x228>
 8000f9a:	e161      	b.n	8001260 <__aeabi_dadd+0x4ec>
 8000f9c:	4694      	mov	ip, r2
 8000f9e:	e7b4      	b.n	8000f0a <__aeabi_dadd+0x196>
 8000fa0:	003a      	movs	r2, r7
 8000fa2:	391f      	subs	r1, #31
 8000fa4:	40ca      	lsrs	r2, r1
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	2b20      	cmp	r3, #32
 8000faa:	d003      	beq.n	8000fb4 <__aeabi_dadd+0x240>
 8000fac:	2240      	movs	r2, #64	; 0x40
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	409f      	lsls	r7, r3
 8000fb2:	433c      	orrs	r4, r7
 8000fb4:	1e63      	subs	r3, r4, #1
 8000fb6:	419c      	sbcs	r4, r3
 8000fb8:	2700      	movs	r7, #0
 8000fba:	2600      	movs	r6, #0
 8000fbc:	430c      	orrs	r4, r1
 8000fbe:	0763      	lsls	r3, r4, #29
 8000fc0:	d000      	beq.n	8000fc4 <__aeabi_dadd+0x250>
 8000fc2:	e753      	b.n	8000e6c <__aeabi_dadd+0xf8>
 8000fc4:	46b4      	mov	ip, r6
 8000fc6:	08e4      	lsrs	r4, r4, #3
 8000fc8:	077b      	lsls	r3, r7, #29
 8000fca:	4323      	orrs	r3, r4
 8000fcc:	08f8      	lsrs	r0, r7, #3
 8000fce:	4a43      	ldr	r2, [pc, #268]	; (80010dc <__aeabi_dadd+0x368>)
 8000fd0:	4594      	cmp	ip, r2
 8000fd2:	d01d      	beq.n	8001010 <__aeabi_dadd+0x29c>
 8000fd4:	4662      	mov	r2, ip
 8000fd6:	0307      	lsls	r7, r0, #12
 8000fd8:	0552      	lsls	r2, r2, #21
 8000fda:	0b3f      	lsrs	r7, r7, #12
 8000fdc:	0d52      	lsrs	r2, r2, #21
 8000fde:	e760      	b.n	8000ea2 <__aeabi_dadd+0x12e>
 8000fe0:	4644      	mov	r4, r8
 8000fe2:	430c      	orrs	r4, r1
 8000fe4:	1e62      	subs	r2, r4, #1
 8000fe6:	4194      	sbcs	r4, r2
 8000fe8:	18e4      	adds	r4, r4, r3
 8000fea:	429c      	cmp	r4, r3
 8000fec:	419b      	sbcs	r3, r3
 8000fee:	425f      	negs	r7, r3
 8000ff0:	183f      	adds	r7, r7, r0
 8000ff2:	023b      	lsls	r3, r7, #8
 8000ff4:	d5e3      	bpl.n	8000fbe <__aeabi_dadd+0x24a>
 8000ff6:	4b39      	ldr	r3, [pc, #228]	; (80010dc <__aeabi_dadd+0x368>)
 8000ff8:	3601      	adds	r6, #1
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d000      	beq.n	8001000 <__aeabi_dadd+0x28c>
 8000ffe:	e0b5      	b.n	800116c <__aeabi_dadd+0x3f8>
 8001000:	0032      	movs	r2, r6
 8001002:	2700      	movs	r7, #0
 8001004:	2300      	movs	r3, #0
 8001006:	e74c      	b.n	8000ea2 <__aeabi_dadd+0x12e>
 8001008:	0742      	lsls	r2, r0, #29
 800100a:	08db      	lsrs	r3, r3, #3
 800100c:	4313      	orrs	r3, r2
 800100e:	08c0      	lsrs	r0, r0, #3
 8001010:	001a      	movs	r2, r3
 8001012:	4302      	orrs	r2, r0
 8001014:	d100      	bne.n	8001018 <__aeabi_dadd+0x2a4>
 8001016:	e1e1      	b.n	80013dc <__aeabi_dadd+0x668>
 8001018:	2780      	movs	r7, #128	; 0x80
 800101a:	033f      	lsls	r7, r7, #12
 800101c:	4307      	orrs	r7, r0
 800101e:	033f      	lsls	r7, r7, #12
 8001020:	4a2e      	ldr	r2, [pc, #184]	; (80010dc <__aeabi_dadd+0x368>)
 8001022:	0b3f      	lsrs	r7, r7, #12
 8001024:	e73d      	b.n	8000ea2 <__aeabi_dadd+0x12e>
 8001026:	0020      	movs	r0, r4
 8001028:	f001 fd5a 	bl	8002ae0 <__clzsi2>
 800102c:	0001      	movs	r1, r0
 800102e:	3118      	adds	r1, #24
 8001030:	291f      	cmp	r1, #31
 8001032:	dc00      	bgt.n	8001036 <__aeabi_dadd+0x2c2>
 8001034:	e6fc      	b.n	8000e30 <__aeabi_dadd+0xbc>
 8001036:	3808      	subs	r0, #8
 8001038:	4084      	lsls	r4, r0
 800103a:	0027      	movs	r7, r4
 800103c:	2400      	movs	r4, #0
 800103e:	42b1      	cmp	r1, r6
 8001040:	db00      	blt.n	8001044 <__aeabi_dadd+0x2d0>
 8001042:	e6ff      	b.n	8000e44 <__aeabi_dadd+0xd0>
 8001044:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <__aeabi_dadd+0x36c>)
 8001046:	1a76      	subs	r6, r6, r1
 8001048:	4017      	ands	r7, r2
 800104a:	e70d      	b.n	8000e68 <__aeabi_dadd+0xf4>
 800104c:	2a00      	cmp	r2, #0
 800104e:	d02f      	beq.n	80010b0 <__aeabi_dadd+0x33c>
 8001050:	464a      	mov	r2, r9
 8001052:	1b92      	subs	r2, r2, r6
 8001054:	4694      	mov	ip, r2
 8001056:	2e00      	cmp	r6, #0
 8001058:	d100      	bne.n	800105c <__aeabi_dadd+0x2e8>
 800105a:	e0ad      	b.n	80011b8 <__aeabi_dadd+0x444>
 800105c:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <__aeabi_dadd+0x368>)
 800105e:	4591      	cmp	r9, r2
 8001060:	d100      	bne.n	8001064 <__aeabi_dadd+0x2f0>
 8001062:	e10f      	b.n	8001284 <__aeabi_dadd+0x510>
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	0412      	lsls	r2, r2, #16
 8001068:	4310      	orrs	r0, r2
 800106a:	4662      	mov	r2, ip
 800106c:	2a38      	cmp	r2, #56	; 0x38
 800106e:	dd00      	ble.n	8001072 <__aeabi_dadd+0x2fe>
 8001070:	e10f      	b.n	8001292 <__aeabi_dadd+0x51e>
 8001072:	2a1f      	cmp	r2, #31
 8001074:	dd00      	ble.n	8001078 <__aeabi_dadd+0x304>
 8001076:	e180      	b.n	800137a <__aeabi_dadd+0x606>
 8001078:	4664      	mov	r4, ip
 800107a:	2220      	movs	r2, #32
 800107c:	001e      	movs	r6, r3
 800107e:	1b12      	subs	r2, r2, r4
 8001080:	4667      	mov	r7, ip
 8001082:	0004      	movs	r4, r0
 8001084:	4093      	lsls	r3, r2
 8001086:	4094      	lsls	r4, r2
 8001088:	40fe      	lsrs	r6, r7
 800108a:	1e5a      	subs	r2, r3, #1
 800108c:	4193      	sbcs	r3, r2
 800108e:	40f8      	lsrs	r0, r7
 8001090:	4334      	orrs	r4, r6
 8001092:	431c      	orrs	r4, r3
 8001094:	4480      	add	r8, r0
 8001096:	1864      	adds	r4, r4, r1
 8001098:	428c      	cmp	r4, r1
 800109a:	41bf      	sbcs	r7, r7
 800109c:	427f      	negs	r7, r7
 800109e:	464e      	mov	r6, r9
 80010a0:	4447      	add	r7, r8
 80010a2:	e7a6      	b.n	8000ff2 <__aeabi_dadd+0x27e>
 80010a4:	4642      	mov	r2, r8
 80010a6:	430a      	orrs	r2, r1
 80010a8:	0011      	movs	r1, r2
 80010aa:	1e4a      	subs	r2, r1, #1
 80010ac:	4191      	sbcs	r1, r2
 80010ae:	e6ad      	b.n	8000e0c <__aeabi_dadd+0x98>
 80010b0:	4c0c      	ldr	r4, [pc, #48]	; (80010e4 <__aeabi_dadd+0x370>)
 80010b2:	1c72      	adds	r2, r6, #1
 80010b4:	4222      	tst	r2, r4
 80010b6:	d000      	beq.n	80010ba <__aeabi_dadd+0x346>
 80010b8:	e0a1      	b.n	80011fe <__aeabi_dadd+0x48a>
 80010ba:	0002      	movs	r2, r0
 80010bc:	431a      	orrs	r2, r3
 80010be:	2e00      	cmp	r6, #0
 80010c0:	d000      	beq.n	80010c4 <__aeabi_dadd+0x350>
 80010c2:	e0fa      	b.n	80012ba <__aeabi_dadd+0x546>
 80010c4:	2a00      	cmp	r2, #0
 80010c6:	d100      	bne.n	80010ca <__aeabi_dadd+0x356>
 80010c8:	e145      	b.n	8001356 <__aeabi_dadd+0x5e2>
 80010ca:	003a      	movs	r2, r7
 80010cc:	430a      	orrs	r2, r1
 80010ce:	d000      	beq.n	80010d2 <__aeabi_dadd+0x35e>
 80010d0:	e146      	b.n	8001360 <__aeabi_dadd+0x5ec>
 80010d2:	0742      	lsls	r2, r0, #29
 80010d4:	08db      	lsrs	r3, r3, #3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	08c0      	lsrs	r0, r0, #3
 80010da:	e77b      	b.n	8000fd4 <__aeabi_dadd+0x260>
 80010dc:	000007ff 	.word	0x000007ff
 80010e0:	ff7fffff 	.word	0xff7fffff
 80010e4:	000007fe 	.word	0x000007fe
 80010e8:	4647      	mov	r7, r8
 80010ea:	1a5c      	subs	r4, r3, r1
 80010ec:	1bc2      	subs	r2, r0, r7
 80010ee:	42a3      	cmp	r3, r4
 80010f0:	41bf      	sbcs	r7, r7
 80010f2:	427f      	negs	r7, r7
 80010f4:	46b9      	mov	r9, r7
 80010f6:	0017      	movs	r7, r2
 80010f8:	464a      	mov	r2, r9
 80010fa:	1abf      	subs	r7, r7, r2
 80010fc:	023a      	lsls	r2, r7, #8
 80010fe:	d500      	bpl.n	8001102 <__aeabi_dadd+0x38e>
 8001100:	e08d      	b.n	800121e <__aeabi_dadd+0x4aa>
 8001102:	0023      	movs	r3, r4
 8001104:	433b      	orrs	r3, r7
 8001106:	d000      	beq.n	800110a <__aeabi_dadd+0x396>
 8001108:	e68a      	b.n	8000e20 <__aeabi_dadd+0xac>
 800110a:	2000      	movs	r0, #0
 800110c:	2500      	movs	r5, #0
 800110e:	e761      	b.n	8000fd4 <__aeabi_dadd+0x260>
 8001110:	4cb4      	ldr	r4, [pc, #720]	; (80013e4 <__aeabi_dadd+0x670>)
 8001112:	45a1      	cmp	r9, r4
 8001114:	d100      	bne.n	8001118 <__aeabi_dadd+0x3a4>
 8001116:	e0ad      	b.n	8001274 <__aeabi_dadd+0x500>
 8001118:	2480      	movs	r4, #128	; 0x80
 800111a:	0424      	lsls	r4, r4, #16
 800111c:	4320      	orrs	r0, r4
 800111e:	4664      	mov	r4, ip
 8001120:	2c38      	cmp	r4, #56	; 0x38
 8001122:	dc3d      	bgt.n	80011a0 <__aeabi_dadd+0x42c>
 8001124:	4662      	mov	r2, ip
 8001126:	2c1f      	cmp	r4, #31
 8001128:	dd00      	ble.n	800112c <__aeabi_dadd+0x3b8>
 800112a:	e0b7      	b.n	800129c <__aeabi_dadd+0x528>
 800112c:	2520      	movs	r5, #32
 800112e:	001e      	movs	r6, r3
 8001130:	1b2d      	subs	r5, r5, r4
 8001132:	0004      	movs	r4, r0
 8001134:	40ab      	lsls	r3, r5
 8001136:	40ac      	lsls	r4, r5
 8001138:	40d6      	lsrs	r6, r2
 800113a:	40d0      	lsrs	r0, r2
 800113c:	4642      	mov	r2, r8
 800113e:	1e5d      	subs	r5, r3, #1
 8001140:	41ab      	sbcs	r3, r5
 8001142:	4334      	orrs	r4, r6
 8001144:	1a12      	subs	r2, r2, r0
 8001146:	4690      	mov	r8, r2
 8001148:	4323      	orrs	r3, r4
 800114a:	e02c      	b.n	80011a6 <__aeabi_dadd+0x432>
 800114c:	0742      	lsls	r2, r0, #29
 800114e:	08db      	lsrs	r3, r3, #3
 8001150:	4313      	orrs	r3, r2
 8001152:	08c0      	lsrs	r0, r0, #3
 8001154:	e73b      	b.n	8000fce <__aeabi_dadd+0x25a>
 8001156:	185c      	adds	r4, r3, r1
 8001158:	429c      	cmp	r4, r3
 800115a:	419b      	sbcs	r3, r3
 800115c:	4440      	add	r0, r8
 800115e:	425b      	negs	r3, r3
 8001160:	18c7      	adds	r7, r0, r3
 8001162:	2601      	movs	r6, #1
 8001164:	023b      	lsls	r3, r7, #8
 8001166:	d400      	bmi.n	800116a <__aeabi_dadd+0x3f6>
 8001168:	e729      	b.n	8000fbe <__aeabi_dadd+0x24a>
 800116a:	2602      	movs	r6, #2
 800116c:	4a9e      	ldr	r2, [pc, #632]	; (80013e8 <__aeabi_dadd+0x674>)
 800116e:	0863      	lsrs	r3, r4, #1
 8001170:	4017      	ands	r7, r2
 8001172:	2201      	movs	r2, #1
 8001174:	4014      	ands	r4, r2
 8001176:	431c      	orrs	r4, r3
 8001178:	07fb      	lsls	r3, r7, #31
 800117a:	431c      	orrs	r4, r3
 800117c:	087f      	lsrs	r7, r7, #1
 800117e:	e673      	b.n	8000e68 <__aeabi_dadd+0xf4>
 8001180:	4644      	mov	r4, r8
 8001182:	3a20      	subs	r2, #32
 8001184:	40d4      	lsrs	r4, r2
 8001186:	4662      	mov	r2, ip
 8001188:	2a20      	cmp	r2, #32
 800118a:	d005      	beq.n	8001198 <__aeabi_dadd+0x424>
 800118c:	4667      	mov	r7, ip
 800118e:	2240      	movs	r2, #64	; 0x40
 8001190:	1bd2      	subs	r2, r2, r7
 8001192:	4647      	mov	r7, r8
 8001194:	4097      	lsls	r7, r2
 8001196:	4339      	orrs	r1, r7
 8001198:	1e4a      	subs	r2, r1, #1
 800119a:	4191      	sbcs	r1, r2
 800119c:	4321      	orrs	r1, r4
 800119e:	e635      	b.n	8000e0c <__aeabi_dadd+0x98>
 80011a0:	4303      	orrs	r3, r0
 80011a2:	1e58      	subs	r0, r3, #1
 80011a4:	4183      	sbcs	r3, r0
 80011a6:	1acc      	subs	r4, r1, r3
 80011a8:	42a1      	cmp	r1, r4
 80011aa:	41bf      	sbcs	r7, r7
 80011ac:	4643      	mov	r3, r8
 80011ae:	427f      	negs	r7, r7
 80011b0:	4655      	mov	r5, sl
 80011b2:	464e      	mov	r6, r9
 80011b4:	1bdf      	subs	r7, r3, r7
 80011b6:	e62e      	b.n	8000e16 <__aeabi_dadd+0xa2>
 80011b8:	0002      	movs	r2, r0
 80011ba:	431a      	orrs	r2, r3
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x44c>
 80011be:	e0bd      	b.n	800133c <__aeabi_dadd+0x5c8>
 80011c0:	4662      	mov	r2, ip
 80011c2:	4664      	mov	r4, ip
 80011c4:	3a01      	subs	r2, #1
 80011c6:	2c01      	cmp	r4, #1
 80011c8:	d100      	bne.n	80011cc <__aeabi_dadd+0x458>
 80011ca:	e0e5      	b.n	8001398 <__aeabi_dadd+0x624>
 80011cc:	4c85      	ldr	r4, [pc, #532]	; (80013e4 <__aeabi_dadd+0x670>)
 80011ce:	45a4      	cmp	ip, r4
 80011d0:	d058      	beq.n	8001284 <__aeabi_dadd+0x510>
 80011d2:	4694      	mov	ip, r2
 80011d4:	e749      	b.n	800106a <__aeabi_dadd+0x2f6>
 80011d6:	4664      	mov	r4, ip
 80011d8:	2220      	movs	r2, #32
 80011da:	1b12      	subs	r2, r2, r4
 80011dc:	4644      	mov	r4, r8
 80011de:	4094      	lsls	r4, r2
 80011e0:	000f      	movs	r7, r1
 80011e2:	46a1      	mov	r9, r4
 80011e4:	4664      	mov	r4, ip
 80011e6:	4091      	lsls	r1, r2
 80011e8:	40e7      	lsrs	r7, r4
 80011ea:	464c      	mov	r4, r9
 80011ec:	1e4a      	subs	r2, r1, #1
 80011ee:	4191      	sbcs	r1, r2
 80011f0:	433c      	orrs	r4, r7
 80011f2:	4642      	mov	r2, r8
 80011f4:	430c      	orrs	r4, r1
 80011f6:	4661      	mov	r1, ip
 80011f8:	40ca      	lsrs	r2, r1
 80011fa:	1880      	adds	r0, r0, r2
 80011fc:	e6f4      	b.n	8000fe8 <__aeabi_dadd+0x274>
 80011fe:	4c79      	ldr	r4, [pc, #484]	; (80013e4 <__aeabi_dadd+0x670>)
 8001200:	42a2      	cmp	r2, r4
 8001202:	d100      	bne.n	8001206 <__aeabi_dadd+0x492>
 8001204:	e6fd      	b.n	8001002 <__aeabi_dadd+0x28e>
 8001206:	1859      	adds	r1, r3, r1
 8001208:	4299      	cmp	r1, r3
 800120a:	419b      	sbcs	r3, r3
 800120c:	4440      	add	r0, r8
 800120e:	425f      	negs	r7, r3
 8001210:	19c7      	adds	r7, r0, r7
 8001212:	07fc      	lsls	r4, r7, #31
 8001214:	0849      	lsrs	r1, r1, #1
 8001216:	0016      	movs	r6, r2
 8001218:	430c      	orrs	r4, r1
 800121a:	087f      	lsrs	r7, r7, #1
 800121c:	e6cf      	b.n	8000fbe <__aeabi_dadd+0x24a>
 800121e:	1acc      	subs	r4, r1, r3
 8001220:	42a1      	cmp	r1, r4
 8001222:	41bf      	sbcs	r7, r7
 8001224:	4643      	mov	r3, r8
 8001226:	427f      	negs	r7, r7
 8001228:	1a18      	subs	r0, r3, r0
 800122a:	4655      	mov	r5, sl
 800122c:	1bc7      	subs	r7, r0, r7
 800122e:	e5f7      	b.n	8000e20 <__aeabi_dadd+0xac>
 8001230:	08c9      	lsrs	r1, r1, #3
 8001232:	077b      	lsls	r3, r7, #29
 8001234:	4655      	mov	r5, sl
 8001236:	430b      	orrs	r3, r1
 8001238:	08f8      	lsrs	r0, r7, #3
 800123a:	e6c8      	b.n	8000fce <__aeabi_dadd+0x25a>
 800123c:	2c00      	cmp	r4, #0
 800123e:	d000      	beq.n	8001242 <__aeabi_dadd+0x4ce>
 8001240:	e081      	b.n	8001346 <__aeabi_dadd+0x5d2>
 8001242:	4643      	mov	r3, r8
 8001244:	430b      	orrs	r3, r1
 8001246:	d115      	bne.n	8001274 <__aeabi_dadd+0x500>
 8001248:	2080      	movs	r0, #128	; 0x80
 800124a:	2500      	movs	r5, #0
 800124c:	0300      	lsls	r0, r0, #12
 800124e:	e6e3      	b.n	8001018 <__aeabi_dadd+0x2a4>
 8001250:	1a5c      	subs	r4, r3, r1
 8001252:	42a3      	cmp	r3, r4
 8001254:	419b      	sbcs	r3, r3
 8001256:	1bc7      	subs	r7, r0, r7
 8001258:	425b      	negs	r3, r3
 800125a:	2601      	movs	r6, #1
 800125c:	1aff      	subs	r7, r7, r3
 800125e:	e5da      	b.n	8000e16 <__aeabi_dadd+0xa2>
 8001260:	0742      	lsls	r2, r0, #29
 8001262:	08db      	lsrs	r3, r3, #3
 8001264:	4313      	orrs	r3, r2
 8001266:	08c0      	lsrs	r0, r0, #3
 8001268:	e6d2      	b.n	8001010 <__aeabi_dadd+0x29c>
 800126a:	0742      	lsls	r2, r0, #29
 800126c:	08db      	lsrs	r3, r3, #3
 800126e:	4313      	orrs	r3, r2
 8001270:	08c0      	lsrs	r0, r0, #3
 8001272:	e6ac      	b.n	8000fce <__aeabi_dadd+0x25a>
 8001274:	4643      	mov	r3, r8
 8001276:	4642      	mov	r2, r8
 8001278:	08c9      	lsrs	r1, r1, #3
 800127a:	075b      	lsls	r3, r3, #29
 800127c:	4655      	mov	r5, sl
 800127e:	430b      	orrs	r3, r1
 8001280:	08d0      	lsrs	r0, r2, #3
 8001282:	e6c5      	b.n	8001010 <__aeabi_dadd+0x29c>
 8001284:	4643      	mov	r3, r8
 8001286:	4642      	mov	r2, r8
 8001288:	075b      	lsls	r3, r3, #29
 800128a:	08c9      	lsrs	r1, r1, #3
 800128c:	430b      	orrs	r3, r1
 800128e:	08d0      	lsrs	r0, r2, #3
 8001290:	e6be      	b.n	8001010 <__aeabi_dadd+0x29c>
 8001292:	4303      	orrs	r3, r0
 8001294:	001c      	movs	r4, r3
 8001296:	1e63      	subs	r3, r4, #1
 8001298:	419c      	sbcs	r4, r3
 800129a:	e6fc      	b.n	8001096 <__aeabi_dadd+0x322>
 800129c:	0002      	movs	r2, r0
 800129e:	3c20      	subs	r4, #32
 80012a0:	40e2      	lsrs	r2, r4
 80012a2:	0014      	movs	r4, r2
 80012a4:	4662      	mov	r2, ip
 80012a6:	2a20      	cmp	r2, #32
 80012a8:	d003      	beq.n	80012b2 <__aeabi_dadd+0x53e>
 80012aa:	2540      	movs	r5, #64	; 0x40
 80012ac:	1aad      	subs	r5, r5, r2
 80012ae:	40a8      	lsls	r0, r5
 80012b0:	4303      	orrs	r3, r0
 80012b2:	1e58      	subs	r0, r3, #1
 80012b4:	4183      	sbcs	r3, r0
 80012b6:	4323      	orrs	r3, r4
 80012b8:	e775      	b.n	80011a6 <__aeabi_dadd+0x432>
 80012ba:	2a00      	cmp	r2, #0
 80012bc:	d0e2      	beq.n	8001284 <__aeabi_dadd+0x510>
 80012be:	003a      	movs	r2, r7
 80012c0:	430a      	orrs	r2, r1
 80012c2:	d0cd      	beq.n	8001260 <__aeabi_dadd+0x4ec>
 80012c4:	0742      	lsls	r2, r0, #29
 80012c6:	08db      	lsrs	r3, r3, #3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	08c0      	lsrs	r0, r0, #3
 80012ce:	0312      	lsls	r2, r2, #12
 80012d0:	4210      	tst	r0, r2
 80012d2:	d006      	beq.n	80012e2 <__aeabi_dadd+0x56e>
 80012d4:	08fc      	lsrs	r4, r7, #3
 80012d6:	4214      	tst	r4, r2
 80012d8:	d103      	bne.n	80012e2 <__aeabi_dadd+0x56e>
 80012da:	0020      	movs	r0, r4
 80012dc:	08cb      	lsrs	r3, r1, #3
 80012de:	077a      	lsls	r2, r7, #29
 80012e0:	4313      	orrs	r3, r2
 80012e2:	0f5a      	lsrs	r2, r3, #29
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	0752      	lsls	r2, r2, #29
 80012e8:	08db      	lsrs	r3, r3, #3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	e690      	b.n	8001010 <__aeabi_dadd+0x29c>
 80012ee:	4643      	mov	r3, r8
 80012f0:	430b      	orrs	r3, r1
 80012f2:	d100      	bne.n	80012f6 <__aeabi_dadd+0x582>
 80012f4:	e709      	b.n	800110a <__aeabi_dadd+0x396>
 80012f6:	4643      	mov	r3, r8
 80012f8:	4642      	mov	r2, r8
 80012fa:	08c9      	lsrs	r1, r1, #3
 80012fc:	075b      	lsls	r3, r3, #29
 80012fe:	4655      	mov	r5, sl
 8001300:	430b      	orrs	r3, r1
 8001302:	08d0      	lsrs	r0, r2, #3
 8001304:	e666      	b.n	8000fd4 <__aeabi_dadd+0x260>
 8001306:	1acc      	subs	r4, r1, r3
 8001308:	42a1      	cmp	r1, r4
 800130a:	4189      	sbcs	r1, r1
 800130c:	1a3f      	subs	r7, r7, r0
 800130e:	4249      	negs	r1, r1
 8001310:	4655      	mov	r5, sl
 8001312:	2601      	movs	r6, #1
 8001314:	1a7f      	subs	r7, r7, r1
 8001316:	e57e      	b.n	8000e16 <__aeabi_dadd+0xa2>
 8001318:	4642      	mov	r2, r8
 800131a:	1a5c      	subs	r4, r3, r1
 800131c:	1a87      	subs	r7, r0, r2
 800131e:	42a3      	cmp	r3, r4
 8001320:	4192      	sbcs	r2, r2
 8001322:	4252      	negs	r2, r2
 8001324:	1abf      	subs	r7, r7, r2
 8001326:	023a      	lsls	r2, r7, #8
 8001328:	d53d      	bpl.n	80013a6 <__aeabi_dadd+0x632>
 800132a:	1acc      	subs	r4, r1, r3
 800132c:	42a1      	cmp	r1, r4
 800132e:	4189      	sbcs	r1, r1
 8001330:	4643      	mov	r3, r8
 8001332:	4249      	negs	r1, r1
 8001334:	1a1f      	subs	r7, r3, r0
 8001336:	4655      	mov	r5, sl
 8001338:	1a7f      	subs	r7, r7, r1
 800133a:	e595      	b.n	8000e68 <__aeabi_dadd+0xf4>
 800133c:	077b      	lsls	r3, r7, #29
 800133e:	08c9      	lsrs	r1, r1, #3
 8001340:	430b      	orrs	r3, r1
 8001342:	08f8      	lsrs	r0, r7, #3
 8001344:	e643      	b.n	8000fce <__aeabi_dadd+0x25a>
 8001346:	4644      	mov	r4, r8
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	430c      	orrs	r4, r1
 800134c:	d130      	bne.n	80013b0 <__aeabi_dadd+0x63c>
 800134e:	0742      	lsls	r2, r0, #29
 8001350:	4313      	orrs	r3, r2
 8001352:	08c0      	lsrs	r0, r0, #3
 8001354:	e65c      	b.n	8001010 <__aeabi_dadd+0x29c>
 8001356:	077b      	lsls	r3, r7, #29
 8001358:	08c9      	lsrs	r1, r1, #3
 800135a:	430b      	orrs	r3, r1
 800135c:	08f8      	lsrs	r0, r7, #3
 800135e:	e639      	b.n	8000fd4 <__aeabi_dadd+0x260>
 8001360:	185c      	adds	r4, r3, r1
 8001362:	429c      	cmp	r4, r3
 8001364:	419b      	sbcs	r3, r3
 8001366:	4440      	add	r0, r8
 8001368:	425b      	negs	r3, r3
 800136a:	18c7      	adds	r7, r0, r3
 800136c:	023b      	lsls	r3, r7, #8
 800136e:	d400      	bmi.n	8001372 <__aeabi_dadd+0x5fe>
 8001370:	e625      	b.n	8000fbe <__aeabi_dadd+0x24a>
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <__aeabi_dadd+0x674>)
 8001374:	2601      	movs	r6, #1
 8001376:	401f      	ands	r7, r3
 8001378:	e621      	b.n	8000fbe <__aeabi_dadd+0x24a>
 800137a:	0004      	movs	r4, r0
 800137c:	3a20      	subs	r2, #32
 800137e:	40d4      	lsrs	r4, r2
 8001380:	4662      	mov	r2, ip
 8001382:	2a20      	cmp	r2, #32
 8001384:	d004      	beq.n	8001390 <__aeabi_dadd+0x61c>
 8001386:	2240      	movs	r2, #64	; 0x40
 8001388:	4666      	mov	r6, ip
 800138a:	1b92      	subs	r2, r2, r6
 800138c:	4090      	lsls	r0, r2
 800138e:	4303      	orrs	r3, r0
 8001390:	1e5a      	subs	r2, r3, #1
 8001392:	4193      	sbcs	r3, r2
 8001394:	431c      	orrs	r4, r3
 8001396:	e67e      	b.n	8001096 <__aeabi_dadd+0x322>
 8001398:	185c      	adds	r4, r3, r1
 800139a:	428c      	cmp	r4, r1
 800139c:	4189      	sbcs	r1, r1
 800139e:	4440      	add	r0, r8
 80013a0:	4249      	negs	r1, r1
 80013a2:	1847      	adds	r7, r0, r1
 80013a4:	e6dd      	b.n	8001162 <__aeabi_dadd+0x3ee>
 80013a6:	0023      	movs	r3, r4
 80013a8:	433b      	orrs	r3, r7
 80013aa:	d100      	bne.n	80013ae <__aeabi_dadd+0x63a>
 80013ac:	e6ad      	b.n	800110a <__aeabi_dadd+0x396>
 80013ae:	e606      	b.n	8000fbe <__aeabi_dadd+0x24a>
 80013b0:	0744      	lsls	r4, r0, #29
 80013b2:	4323      	orrs	r3, r4
 80013b4:	2480      	movs	r4, #128	; 0x80
 80013b6:	08c0      	lsrs	r0, r0, #3
 80013b8:	0324      	lsls	r4, r4, #12
 80013ba:	4220      	tst	r0, r4
 80013bc:	d008      	beq.n	80013d0 <__aeabi_dadd+0x65c>
 80013be:	4642      	mov	r2, r8
 80013c0:	08d6      	lsrs	r6, r2, #3
 80013c2:	4226      	tst	r6, r4
 80013c4:	d104      	bne.n	80013d0 <__aeabi_dadd+0x65c>
 80013c6:	4655      	mov	r5, sl
 80013c8:	0030      	movs	r0, r6
 80013ca:	08cb      	lsrs	r3, r1, #3
 80013cc:	0751      	lsls	r1, r2, #29
 80013ce:	430b      	orrs	r3, r1
 80013d0:	0f5a      	lsrs	r2, r3, #29
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	08db      	lsrs	r3, r3, #3
 80013d6:	0752      	lsls	r2, r2, #29
 80013d8:	4313      	orrs	r3, r2
 80013da:	e619      	b.n	8001010 <__aeabi_dadd+0x29c>
 80013dc:	2300      	movs	r3, #0
 80013de:	4a01      	ldr	r2, [pc, #4]	; (80013e4 <__aeabi_dadd+0x670>)
 80013e0:	001f      	movs	r7, r3
 80013e2:	e55e      	b.n	8000ea2 <__aeabi_dadd+0x12e>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff

080013ec <__aeabi_ddiv>:
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ee:	4657      	mov	r7, sl
 80013f0:	464e      	mov	r6, r9
 80013f2:	4645      	mov	r5, r8
 80013f4:	46de      	mov	lr, fp
 80013f6:	b5e0      	push	{r5, r6, r7, lr}
 80013f8:	4681      	mov	r9, r0
 80013fa:	0005      	movs	r5, r0
 80013fc:	030c      	lsls	r4, r1, #12
 80013fe:	0048      	lsls	r0, r1, #1
 8001400:	4692      	mov	sl, r2
 8001402:	001f      	movs	r7, r3
 8001404:	b085      	sub	sp, #20
 8001406:	0b24      	lsrs	r4, r4, #12
 8001408:	0d40      	lsrs	r0, r0, #21
 800140a:	0fce      	lsrs	r6, r1, #31
 800140c:	2800      	cmp	r0, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_ddiv+0x26>
 8001410:	e156      	b.n	80016c0 <__aeabi_ddiv+0x2d4>
 8001412:	4bd4      	ldr	r3, [pc, #848]	; (8001764 <__aeabi_ddiv+0x378>)
 8001414:	4298      	cmp	r0, r3
 8001416:	d100      	bne.n	800141a <__aeabi_ddiv+0x2e>
 8001418:	e172      	b.n	8001700 <__aeabi_ddiv+0x314>
 800141a:	0f6b      	lsrs	r3, r5, #29
 800141c:	00e4      	lsls	r4, r4, #3
 800141e:	431c      	orrs	r4, r3
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	041b      	lsls	r3, r3, #16
 8001424:	4323      	orrs	r3, r4
 8001426:	4698      	mov	r8, r3
 8001428:	4bcf      	ldr	r3, [pc, #828]	; (8001768 <__aeabi_ddiv+0x37c>)
 800142a:	00ed      	lsls	r5, r5, #3
 800142c:	469b      	mov	fp, r3
 800142e:	2300      	movs	r3, #0
 8001430:	4699      	mov	r9, r3
 8001432:	4483      	add	fp, r0
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	033c      	lsls	r4, r7, #12
 8001438:	007b      	lsls	r3, r7, #1
 800143a:	4650      	mov	r0, sl
 800143c:	0b24      	lsrs	r4, r4, #12
 800143e:	0d5b      	lsrs	r3, r3, #21
 8001440:	0fff      	lsrs	r7, r7, #31
 8001442:	2b00      	cmp	r3, #0
 8001444:	d100      	bne.n	8001448 <__aeabi_ddiv+0x5c>
 8001446:	e11f      	b.n	8001688 <__aeabi_ddiv+0x29c>
 8001448:	4ac6      	ldr	r2, [pc, #792]	; (8001764 <__aeabi_ddiv+0x378>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d100      	bne.n	8001450 <__aeabi_ddiv+0x64>
 800144e:	e162      	b.n	8001716 <__aeabi_ddiv+0x32a>
 8001450:	49c5      	ldr	r1, [pc, #788]	; (8001768 <__aeabi_ddiv+0x37c>)
 8001452:	0f42      	lsrs	r2, r0, #29
 8001454:	468c      	mov	ip, r1
 8001456:	00e4      	lsls	r4, r4, #3
 8001458:	4659      	mov	r1, fp
 800145a:	4314      	orrs	r4, r2
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	4463      	add	r3, ip
 8001460:	0412      	lsls	r2, r2, #16
 8001462:	1acb      	subs	r3, r1, r3
 8001464:	4314      	orrs	r4, r2
 8001466:	469b      	mov	fp, r3
 8001468:	00c2      	lsls	r2, r0, #3
 800146a:	2000      	movs	r0, #0
 800146c:	0033      	movs	r3, r6
 800146e:	407b      	eors	r3, r7
 8001470:	469a      	mov	sl, r3
 8001472:	464b      	mov	r3, r9
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d827      	bhi.n	80014c8 <__aeabi_ddiv+0xdc>
 8001478:	49bc      	ldr	r1, [pc, #752]	; (800176c <__aeabi_ddiv+0x380>)
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	58cb      	ldr	r3, [r1, r3]
 800147e:	469f      	mov	pc, r3
 8001480:	46b2      	mov	sl, r6
 8001482:	9b00      	ldr	r3, [sp, #0]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d016      	beq.n	80014b6 <__aeabi_ddiv+0xca>
 8001488:	2b03      	cmp	r3, #3
 800148a:	d100      	bne.n	800148e <__aeabi_ddiv+0xa2>
 800148c:	e28e      	b.n	80019ac <__aeabi_ddiv+0x5c0>
 800148e:	2b01      	cmp	r3, #1
 8001490:	d000      	beq.n	8001494 <__aeabi_ddiv+0xa8>
 8001492:	e0d9      	b.n	8001648 <__aeabi_ddiv+0x25c>
 8001494:	2300      	movs	r3, #0
 8001496:	2400      	movs	r4, #0
 8001498:	2500      	movs	r5, #0
 800149a:	4652      	mov	r2, sl
 800149c:	051b      	lsls	r3, r3, #20
 800149e:	4323      	orrs	r3, r4
 80014a0:	07d2      	lsls	r2, r2, #31
 80014a2:	4313      	orrs	r3, r2
 80014a4:	0028      	movs	r0, r5
 80014a6:	0019      	movs	r1, r3
 80014a8:	b005      	add	sp, #20
 80014aa:	bcf0      	pop	{r4, r5, r6, r7}
 80014ac:	46bb      	mov	fp, r7
 80014ae:	46b2      	mov	sl, r6
 80014b0:	46a9      	mov	r9, r5
 80014b2:	46a0      	mov	r8, r4
 80014b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b6:	2400      	movs	r4, #0
 80014b8:	2500      	movs	r5, #0
 80014ba:	4baa      	ldr	r3, [pc, #680]	; (8001764 <__aeabi_ddiv+0x378>)
 80014bc:	e7ed      	b.n	800149a <__aeabi_ddiv+0xae>
 80014be:	46ba      	mov	sl, r7
 80014c0:	46a0      	mov	r8, r4
 80014c2:	0015      	movs	r5, r2
 80014c4:	9000      	str	r0, [sp, #0]
 80014c6:	e7dc      	b.n	8001482 <__aeabi_ddiv+0x96>
 80014c8:	4544      	cmp	r4, r8
 80014ca:	d200      	bcs.n	80014ce <__aeabi_ddiv+0xe2>
 80014cc:	e1c7      	b.n	800185e <__aeabi_ddiv+0x472>
 80014ce:	d100      	bne.n	80014d2 <__aeabi_ddiv+0xe6>
 80014d0:	e1c2      	b.n	8001858 <__aeabi_ddiv+0x46c>
 80014d2:	2301      	movs	r3, #1
 80014d4:	425b      	negs	r3, r3
 80014d6:	469c      	mov	ip, r3
 80014d8:	002e      	movs	r6, r5
 80014da:	4640      	mov	r0, r8
 80014dc:	2500      	movs	r5, #0
 80014de:	44e3      	add	fp, ip
 80014e0:	0223      	lsls	r3, r4, #8
 80014e2:	0e14      	lsrs	r4, r2, #24
 80014e4:	431c      	orrs	r4, r3
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	4699      	mov	r9, r3
 80014ea:	0423      	lsls	r3, r4, #16
 80014ec:	0c1f      	lsrs	r7, r3, #16
 80014ee:	0212      	lsls	r2, r2, #8
 80014f0:	4649      	mov	r1, r9
 80014f2:	9200      	str	r2, [sp, #0]
 80014f4:	9701      	str	r7, [sp, #4]
 80014f6:	f7fe fea9 	bl	800024c <__aeabi_uidivmod>
 80014fa:	0002      	movs	r2, r0
 80014fc:	437a      	muls	r2, r7
 80014fe:	040b      	lsls	r3, r1, #16
 8001500:	0c31      	lsrs	r1, r6, #16
 8001502:	4680      	mov	r8, r0
 8001504:	4319      	orrs	r1, r3
 8001506:	428a      	cmp	r2, r1
 8001508:	d907      	bls.n	800151a <__aeabi_ddiv+0x12e>
 800150a:	2301      	movs	r3, #1
 800150c:	425b      	negs	r3, r3
 800150e:	469c      	mov	ip, r3
 8001510:	1909      	adds	r1, r1, r4
 8001512:	44e0      	add	r8, ip
 8001514:	428c      	cmp	r4, r1
 8001516:	d800      	bhi.n	800151a <__aeabi_ddiv+0x12e>
 8001518:	e207      	b.n	800192a <__aeabi_ddiv+0x53e>
 800151a:	1a88      	subs	r0, r1, r2
 800151c:	4649      	mov	r1, r9
 800151e:	f7fe fe95 	bl	800024c <__aeabi_uidivmod>
 8001522:	0409      	lsls	r1, r1, #16
 8001524:	468c      	mov	ip, r1
 8001526:	0431      	lsls	r1, r6, #16
 8001528:	4666      	mov	r6, ip
 800152a:	9a01      	ldr	r2, [sp, #4]
 800152c:	0c09      	lsrs	r1, r1, #16
 800152e:	4342      	muls	r2, r0
 8001530:	0003      	movs	r3, r0
 8001532:	4331      	orrs	r1, r6
 8001534:	428a      	cmp	r2, r1
 8001536:	d904      	bls.n	8001542 <__aeabi_ddiv+0x156>
 8001538:	1909      	adds	r1, r1, r4
 800153a:	3b01      	subs	r3, #1
 800153c:	428c      	cmp	r4, r1
 800153e:	d800      	bhi.n	8001542 <__aeabi_ddiv+0x156>
 8001540:	e1ed      	b.n	800191e <__aeabi_ddiv+0x532>
 8001542:	1a88      	subs	r0, r1, r2
 8001544:	4642      	mov	r2, r8
 8001546:	0412      	lsls	r2, r2, #16
 8001548:	431a      	orrs	r2, r3
 800154a:	4690      	mov	r8, r2
 800154c:	4641      	mov	r1, r8
 800154e:	9b00      	ldr	r3, [sp, #0]
 8001550:	040e      	lsls	r6, r1, #16
 8001552:	0c1b      	lsrs	r3, r3, #16
 8001554:	001f      	movs	r7, r3
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	9b00      	ldr	r3, [sp, #0]
 800155a:	0c36      	lsrs	r6, r6, #16
 800155c:	041b      	lsls	r3, r3, #16
 800155e:	0c19      	lsrs	r1, r3, #16
 8001560:	000b      	movs	r3, r1
 8001562:	4373      	muls	r3, r6
 8001564:	0c12      	lsrs	r2, r2, #16
 8001566:	437e      	muls	r6, r7
 8001568:	9103      	str	r1, [sp, #12]
 800156a:	4351      	muls	r1, r2
 800156c:	437a      	muls	r2, r7
 800156e:	0c1f      	lsrs	r7, r3, #16
 8001570:	46bc      	mov	ip, r7
 8001572:	1876      	adds	r6, r6, r1
 8001574:	4466      	add	r6, ip
 8001576:	42b1      	cmp	r1, r6
 8001578:	d903      	bls.n	8001582 <__aeabi_ddiv+0x196>
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	0249      	lsls	r1, r1, #9
 800157e:	468c      	mov	ip, r1
 8001580:	4462      	add	r2, ip
 8001582:	0c31      	lsrs	r1, r6, #16
 8001584:	188a      	adds	r2, r1, r2
 8001586:	0431      	lsls	r1, r6, #16
 8001588:	041e      	lsls	r6, r3, #16
 800158a:	0c36      	lsrs	r6, r6, #16
 800158c:	198e      	adds	r6, r1, r6
 800158e:	4290      	cmp	r0, r2
 8001590:	d302      	bcc.n	8001598 <__aeabi_ddiv+0x1ac>
 8001592:	d112      	bne.n	80015ba <__aeabi_ddiv+0x1ce>
 8001594:	42b5      	cmp	r5, r6
 8001596:	d210      	bcs.n	80015ba <__aeabi_ddiv+0x1ce>
 8001598:	4643      	mov	r3, r8
 800159a:	1e59      	subs	r1, r3, #1
 800159c:	9b00      	ldr	r3, [sp, #0]
 800159e:	469c      	mov	ip, r3
 80015a0:	4465      	add	r5, ip
 80015a2:	001f      	movs	r7, r3
 80015a4:	429d      	cmp	r5, r3
 80015a6:	419b      	sbcs	r3, r3
 80015a8:	425b      	negs	r3, r3
 80015aa:	191b      	adds	r3, r3, r4
 80015ac:	18c0      	adds	r0, r0, r3
 80015ae:	4284      	cmp	r4, r0
 80015b0:	d200      	bcs.n	80015b4 <__aeabi_ddiv+0x1c8>
 80015b2:	e1a0      	b.n	80018f6 <__aeabi_ddiv+0x50a>
 80015b4:	d100      	bne.n	80015b8 <__aeabi_ddiv+0x1cc>
 80015b6:	e19b      	b.n	80018f0 <__aeabi_ddiv+0x504>
 80015b8:	4688      	mov	r8, r1
 80015ba:	1bae      	subs	r6, r5, r6
 80015bc:	42b5      	cmp	r5, r6
 80015be:	41ad      	sbcs	r5, r5
 80015c0:	1a80      	subs	r0, r0, r2
 80015c2:	426d      	negs	r5, r5
 80015c4:	1b40      	subs	r0, r0, r5
 80015c6:	4284      	cmp	r4, r0
 80015c8:	d100      	bne.n	80015cc <__aeabi_ddiv+0x1e0>
 80015ca:	e1d5      	b.n	8001978 <__aeabi_ddiv+0x58c>
 80015cc:	4649      	mov	r1, r9
 80015ce:	f7fe fe3d 	bl	800024c <__aeabi_uidivmod>
 80015d2:	9a01      	ldr	r2, [sp, #4]
 80015d4:	040b      	lsls	r3, r1, #16
 80015d6:	4342      	muls	r2, r0
 80015d8:	0c31      	lsrs	r1, r6, #16
 80015da:	0005      	movs	r5, r0
 80015dc:	4319      	orrs	r1, r3
 80015de:	428a      	cmp	r2, r1
 80015e0:	d900      	bls.n	80015e4 <__aeabi_ddiv+0x1f8>
 80015e2:	e16c      	b.n	80018be <__aeabi_ddiv+0x4d2>
 80015e4:	1a88      	subs	r0, r1, r2
 80015e6:	4649      	mov	r1, r9
 80015e8:	f7fe fe30 	bl	800024c <__aeabi_uidivmod>
 80015ec:	9a01      	ldr	r2, [sp, #4]
 80015ee:	0436      	lsls	r6, r6, #16
 80015f0:	4342      	muls	r2, r0
 80015f2:	0409      	lsls	r1, r1, #16
 80015f4:	0c36      	lsrs	r6, r6, #16
 80015f6:	0003      	movs	r3, r0
 80015f8:	430e      	orrs	r6, r1
 80015fa:	42b2      	cmp	r2, r6
 80015fc:	d900      	bls.n	8001600 <__aeabi_ddiv+0x214>
 80015fe:	e153      	b.n	80018a8 <__aeabi_ddiv+0x4bc>
 8001600:	9803      	ldr	r0, [sp, #12]
 8001602:	1ab6      	subs	r6, r6, r2
 8001604:	0002      	movs	r2, r0
 8001606:	042d      	lsls	r5, r5, #16
 8001608:	431d      	orrs	r5, r3
 800160a:	9f02      	ldr	r7, [sp, #8]
 800160c:	042b      	lsls	r3, r5, #16
 800160e:	0c1b      	lsrs	r3, r3, #16
 8001610:	435a      	muls	r2, r3
 8001612:	437b      	muls	r3, r7
 8001614:	469c      	mov	ip, r3
 8001616:	0c29      	lsrs	r1, r5, #16
 8001618:	4348      	muls	r0, r1
 800161a:	0c13      	lsrs	r3, r2, #16
 800161c:	4484      	add	ip, r0
 800161e:	4463      	add	r3, ip
 8001620:	4379      	muls	r1, r7
 8001622:	4298      	cmp	r0, r3
 8001624:	d903      	bls.n	800162e <__aeabi_ddiv+0x242>
 8001626:	2080      	movs	r0, #128	; 0x80
 8001628:	0240      	lsls	r0, r0, #9
 800162a:	4684      	mov	ip, r0
 800162c:	4461      	add	r1, ip
 800162e:	0c18      	lsrs	r0, r3, #16
 8001630:	0412      	lsls	r2, r2, #16
 8001632:	041b      	lsls	r3, r3, #16
 8001634:	0c12      	lsrs	r2, r2, #16
 8001636:	1841      	adds	r1, r0, r1
 8001638:	189b      	adds	r3, r3, r2
 800163a:	428e      	cmp	r6, r1
 800163c:	d200      	bcs.n	8001640 <__aeabi_ddiv+0x254>
 800163e:	e0ff      	b.n	8001840 <__aeabi_ddiv+0x454>
 8001640:	d100      	bne.n	8001644 <__aeabi_ddiv+0x258>
 8001642:	e0fa      	b.n	800183a <__aeabi_ddiv+0x44e>
 8001644:	2301      	movs	r3, #1
 8001646:	431d      	orrs	r5, r3
 8001648:	4a49      	ldr	r2, [pc, #292]	; (8001770 <__aeabi_ddiv+0x384>)
 800164a:	445a      	add	r2, fp
 800164c:	2a00      	cmp	r2, #0
 800164e:	dc00      	bgt.n	8001652 <__aeabi_ddiv+0x266>
 8001650:	e0aa      	b.n	80017a8 <__aeabi_ddiv+0x3bc>
 8001652:	076b      	lsls	r3, r5, #29
 8001654:	d000      	beq.n	8001658 <__aeabi_ddiv+0x26c>
 8001656:	e13d      	b.n	80018d4 <__aeabi_ddiv+0x4e8>
 8001658:	08ed      	lsrs	r5, r5, #3
 800165a:	4643      	mov	r3, r8
 800165c:	01db      	lsls	r3, r3, #7
 800165e:	d506      	bpl.n	800166e <__aeabi_ddiv+0x282>
 8001660:	4642      	mov	r2, r8
 8001662:	4b44      	ldr	r3, [pc, #272]	; (8001774 <__aeabi_ddiv+0x388>)
 8001664:	401a      	ands	r2, r3
 8001666:	4690      	mov	r8, r2
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	00d2      	lsls	r2, r2, #3
 800166c:	445a      	add	r2, fp
 800166e:	4b42      	ldr	r3, [pc, #264]	; (8001778 <__aeabi_ddiv+0x38c>)
 8001670:	429a      	cmp	r2, r3
 8001672:	dd00      	ble.n	8001676 <__aeabi_ddiv+0x28a>
 8001674:	e71f      	b.n	80014b6 <__aeabi_ddiv+0xca>
 8001676:	4643      	mov	r3, r8
 8001678:	075b      	lsls	r3, r3, #29
 800167a:	431d      	orrs	r5, r3
 800167c:	4643      	mov	r3, r8
 800167e:	0552      	lsls	r2, r2, #21
 8001680:	025c      	lsls	r4, r3, #9
 8001682:	0b24      	lsrs	r4, r4, #12
 8001684:	0d53      	lsrs	r3, r2, #21
 8001686:	e708      	b.n	800149a <__aeabi_ddiv+0xae>
 8001688:	4652      	mov	r2, sl
 800168a:	4322      	orrs	r2, r4
 800168c:	d100      	bne.n	8001690 <__aeabi_ddiv+0x2a4>
 800168e:	e07b      	b.n	8001788 <__aeabi_ddiv+0x39c>
 8001690:	2c00      	cmp	r4, #0
 8001692:	d100      	bne.n	8001696 <__aeabi_ddiv+0x2aa>
 8001694:	e0fa      	b.n	800188c <__aeabi_ddiv+0x4a0>
 8001696:	0020      	movs	r0, r4
 8001698:	f001 fa22 	bl	8002ae0 <__clzsi2>
 800169c:	0002      	movs	r2, r0
 800169e:	3a0b      	subs	r2, #11
 80016a0:	231d      	movs	r3, #29
 80016a2:	0001      	movs	r1, r0
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	4652      	mov	r2, sl
 80016a8:	3908      	subs	r1, #8
 80016aa:	40da      	lsrs	r2, r3
 80016ac:	408c      	lsls	r4, r1
 80016ae:	4314      	orrs	r4, r2
 80016b0:	4652      	mov	r2, sl
 80016b2:	408a      	lsls	r2, r1
 80016b4:	4b31      	ldr	r3, [pc, #196]	; (800177c <__aeabi_ddiv+0x390>)
 80016b6:	4458      	add	r0, fp
 80016b8:	469b      	mov	fp, r3
 80016ba:	4483      	add	fp, r0
 80016bc:	2000      	movs	r0, #0
 80016be:	e6d5      	b.n	800146c <__aeabi_ddiv+0x80>
 80016c0:	464b      	mov	r3, r9
 80016c2:	4323      	orrs	r3, r4
 80016c4:	4698      	mov	r8, r3
 80016c6:	d044      	beq.n	8001752 <__aeabi_ddiv+0x366>
 80016c8:	2c00      	cmp	r4, #0
 80016ca:	d100      	bne.n	80016ce <__aeabi_ddiv+0x2e2>
 80016cc:	e0ce      	b.n	800186c <__aeabi_ddiv+0x480>
 80016ce:	0020      	movs	r0, r4
 80016d0:	f001 fa06 	bl	8002ae0 <__clzsi2>
 80016d4:	0001      	movs	r1, r0
 80016d6:	0002      	movs	r2, r0
 80016d8:	390b      	subs	r1, #11
 80016da:	231d      	movs	r3, #29
 80016dc:	1a5b      	subs	r3, r3, r1
 80016de:	4649      	mov	r1, r9
 80016e0:	0010      	movs	r0, r2
 80016e2:	40d9      	lsrs	r1, r3
 80016e4:	3808      	subs	r0, #8
 80016e6:	4084      	lsls	r4, r0
 80016e8:	000b      	movs	r3, r1
 80016ea:	464d      	mov	r5, r9
 80016ec:	4323      	orrs	r3, r4
 80016ee:	4698      	mov	r8, r3
 80016f0:	4085      	lsls	r5, r0
 80016f2:	4823      	ldr	r0, [pc, #140]	; (8001780 <__aeabi_ddiv+0x394>)
 80016f4:	1a83      	subs	r3, r0, r2
 80016f6:	469b      	mov	fp, r3
 80016f8:	2300      	movs	r3, #0
 80016fa:	4699      	mov	r9, r3
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	e69a      	b.n	8001436 <__aeabi_ddiv+0x4a>
 8001700:	464b      	mov	r3, r9
 8001702:	4323      	orrs	r3, r4
 8001704:	4698      	mov	r8, r3
 8001706:	d11d      	bne.n	8001744 <__aeabi_ddiv+0x358>
 8001708:	2308      	movs	r3, #8
 800170a:	4699      	mov	r9, r3
 800170c:	3b06      	subs	r3, #6
 800170e:	2500      	movs	r5, #0
 8001710:	4683      	mov	fp, r0
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	e68f      	b.n	8001436 <__aeabi_ddiv+0x4a>
 8001716:	4652      	mov	r2, sl
 8001718:	4322      	orrs	r2, r4
 800171a:	d109      	bne.n	8001730 <__aeabi_ddiv+0x344>
 800171c:	2302      	movs	r3, #2
 800171e:	4649      	mov	r1, r9
 8001720:	4319      	orrs	r1, r3
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <__aeabi_ddiv+0x398>)
 8001724:	4689      	mov	r9, r1
 8001726:	469c      	mov	ip, r3
 8001728:	2400      	movs	r4, #0
 800172a:	2002      	movs	r0, #2
 800172c:	44e3      	add	fp, ip
 800172e:	e69d      	b.n	800146c <__aeabi_ddiv+0x80>
 8001730:	2303      	movs	r3, #3
 8001732:	464a      	mov	r2, r9
 8001734:	431a      	orrs	r2, r3
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <__aeabi_ddiv+0x398>)
 8001738:	4691      	mov	r9, r2
 800173a:	469c      	mov	ip, r3
 800173c:	4652      	mov	r2, sl
 800173e:	2003      	movs	r0, #3
 8001740:	44e3      	add	fp, ip
 8001742:	e693      	b.n	800146c <__aeabi_ddiv+0x80>
 8001744:	230c      	movs	r3, #12
 8001746:	4699      	mov	r9, r3
 8001748:	3b09      	subs	r3, #9
 800174a:	46a0      	mov	r8, r4
 800174c:	4683      	mov	fp, r0
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	e671      	b.n	8001436 <__aeabi_ddiv+0x4a>
 8001752:	2304      	movs	r3, #4
 8001754:	4699      	mov	r9, r3
 8001756:	2300      	movs	r3, #0
 8001758:	469b      	mov	fp, r3
 800175a:	3301      	adds	r3, #1
 800175c:	2500      	movs	r5, #0
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	e669      	b.n	8001436 <__aeabi_ddiv+0x4a>
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	000007ff 	.word	0x000007ff
 8001768:	fffffc01 	.word	0xfffffc01
 800176c:	0800cf20 	.word	0x0800cf20
 8001770:	000003ff 	.word	0x000003ff
 8001774:	feffffff 	.word	0xfeffffff
 8001778:	000007fe 	.word	0x000007fe
 800177c:	000003f3 	.word	0x000003f3
 8001780:	fffffc0d 	.word	0xfffffc0d
 8001784:	fffff801 	.word	0xfffff801
 8001788:	4649      	mov	r1, r9
 800178a:	2301      	movs	r3, #1
 800178c:	4319      	orrs	r1, r3
 800178e:	4689      	mov	r9, r1
 8001790:	2400      	movs	r4, #0
 8001792:	2001      	movs	r0, #1
 8001794:	e66a      	b.n	800146c <__aeabi_ddiv+0x80>
 8001796:	2300      	movs	r3, #0
 8001798:	2480      	movs	r4, #128	; 0x80
 800179a:	469a      	mov	sl, r3
 800179c:	2500      	movs	r5, #0
 800179e:	4b8a      	ldr	r3, [pc, #552]	; (80019c8 <__aeabi_ddiv+0x5dc>)
 80017a0:	0324      	lsls	r4, r4, #12
 80017a2:	e67a      	b.n	800149a <__aeabi_ddiv+0xae>
 80017a4:	2501      	movs	r5, #1
 80017a6:	426d      	negs	r5, r5
 80017a8:	2301      	movs	r3, #1
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	2b38      	cmp	r3, #56	; 0x38
 80017ae:	dd00      	ble.n	80017b2 <__aeabi_ddiv+0x3c6>
 80017b0:	e670      	b.n	8001494 <__aeabi_ddiv+0xa8>
 80017b2:	2b1f      	cmp	r3, #31
 80017b4:	dc00      	bgt.n	80017b8 <__aeabi_ddiv+0x3cc>
 80017b6:	e0bf      	b.n	8001938 <__aeabi_ddiv+0x54c>
 80017b8:	211f      	movs	r1, #31
 80017ba:	4249      	negs	r1, r1
 80017bc:	1a8a      	subs	r2, r1, r2
 80017be:	4641      	mov	r1, r8
 80017c0:	40d1      	lsrs	r1, r2
 80017c2:	000a      	movs	r2, r1
 80017c4:	2b20      	cmp	r3, #32
 80017c6:	d004      	beq.n	80017d2 <__aeabi_ddiv+0x3e6>
 80017c8:	4641      	mov	r1, r8
 80017ca:	4b80      	ldr	r3, [pc, #512]	; (80019cc <__aeabi_ddiv+0x5e0>)
 80017cc:	445b      	add	r3, fp
 80017ce:	4099      	lsls	r1, r3
 80017d0:	430d      	orrs	r5, r1
 80017d2:	1e6b      	subs	r3, r5, #1
 80017d4:	419d      	sbcs	r5, r3
 80017d6:	2307      	movs	r3, #7
 80017d8:	432a      	orrs	r2, r5
 80017da:	001d      	movs	r5, r3
 80017dc:	2400      	movs	r4, #0
 80017de:	4015      	ands	r5, r2
 80017e0:	4213      	tst	r3, r2
 80017e2:	d100      	bne.n	80017e6 <__aeabi_ddiv+0x3fa>
 80017e4:	e0d4      	b.n	8001990 <__aeabi_ddiv+0x5a4>
 80017e6:	210f      	movs	r1, #15
 80017e8:	2300      	movs	r3, #0
 80017ea:	4011      	ands	r1, r2
 80017ec:	2904      	cmp	r1, #4
 80017ee:	d100      	bne.n	80017f2 <__aeabi_ddiv+0x406>
 80017f0:	e0cb      	b.n	800198a <__aeabi_ddiv+0x59e>
 80017f2:	1d11      	adds	r1, r2, #4
 80017f4:	4291      	cmp	r1, r2
 80017f6:	4192      	sbcs	r2, r2
 80017f8:	4252      	negs	r2, r2
 80017fa:	189b      	adds	r3, r3, r2
 80017fc:	000a      	movs	r2, r1
 80017fe:	0219      	lsls	r1, r3, #8
 8001800:	d400      	bmi.n	8001804 <__aeabi_ddiv+0x418>
 8001802:	e0c2      	b.n	800198a <__aeabi_ddiv+0x59e>
 8001804:	2301      	movs	r3, #1
 8001806:	2400      	movs	r4, #0
 8001808:	2500      	movs	r5, #0
 800180a:	e646      	b.n	800149a <__aeabi_ddiv+0xae>
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	4641      	mov	r1, r8
 8001810:	031b      	lsls	r3, r3, #12
 8001812:	4219      	tst	r1, r3
 8001814:	d008      	beq.n	8001828 <__aeabi_ddiv+0x43c>
 8001816:	421c      	tst	r4, r3
 8001818:	d106      	bne.n	8001828 <__aeabi_ddiv+0x43c>
 800181a:	431c      	orrs	r4, r3
 800181c:	0324      	lsls	r4, r4, #12
 800181e:	46ba      	mov	sl, r7
 8001820:	0015      	movs	r5, r2
 8001822:	4b69      	ldr	r3, [pc, #420]	; (80019c8 <__aeabi_ddiv+0x5dc>)
 8001824:	0b24      	lsrs	r4, r4, #12
 8001826:	e638      	b.n	800149a <__aeabi_ddiv+0xae>
 8001828:	2480      	movs	r4, #128	; 0x80
 800182a:	4643      	mov	r3, r8
 800182c:	0324      	lsls	r4, r4, #12
 800182e:	431c      	orrs	r4, r3
 8001830:	0324      	lsls	r4, r4, #12
 8001832:	46b2      	mov	sl, r6
 8001834:	4b64      	ldr	r3, [pc, #400]	; (80019c8 <__aeabi_ddiv+0x5dc>)
 8001836:	0b24      	lsrs	r4, r4, #12
 8001838:	e62f      	b.n	800149a <__aeabi_ddiv+0xae>
 800183a:	2b00      	cmp	r3, #0
 800183c:	d100      	bne.n	8001840 <__aeabi_ddiv+0x454>
 800183e:	e703      	b.n	8001648 <__aeabi_ddiv+0x25c>
 8001840:	19a6      	adds	r6, r4, r6
 8001842:	1e68      	subs	r0, r5, #1
 8001844:	42a6      	cmp	r6, r4
 8001846:	d200      	bcs.n	800184a <__aeabi_ddiv+0x45e>
 8001848:	e08d      	b.n	8001966 <__aeabi_ddiv+0x57a>
 800184a:	428e      	cmp	r6, r1
 800184c:	d200      	bcs.n	8001850 <__aeabi_ddiv+0x464>
 800184e:	e0a3      	b.n	8001998 <__aeabi_ddiv+0x5ac>
 8001850:	d100      	bne.n	8001854 <__aeabi_ddiv+0x468>
 8001852:	e0b3      	b.n	80019bc <__aeabi_ddiv+0x5d0>
 8001854:	0005      	movs	r5, r0
 8001856:	e6f5      	b.n	8001644 <__aeabi_ddiv+0x258>
 8001858:	42aa      	cmp	r2, r5
 800185a:	d900      	bls.n	800185e <__aeabi_ddiv+0x472>
 800185c:	e639      	b.n	80014d2 <__aeabi_ddiv+0xe6>
 800185e:	4643      	mov	r3, r8
 8001860:	07de      	lsls	r6, r3, #31
 8001862:	0858      	lsrs	r0, r3, #1
 8001864:	086b      	lsrs	r3, r5, #1
 8001866:	431e      	orrs	r6, r3
 8001868:	07ed      	lsls	r5, r5, #31
 800186a:	e639      	b.n	80014e0 <__aeabi_ddiv+0xf4>
 800186c:	4648      	mov	r0, r9
 800186e:	f001 f937 	bl	8002ae0 <__clzsi2>
 8001872:	0001      	movs	r1, r0
 8001874:	0002      	movs	r2, r0
 8001876:	3115      	adds	r1, #21
 8001878:	3220      	adds	r2, #32
 800187a:	291c      	cmp	r1, #28
 800187c:	dc00      	bgt.n	8001880 <__aeabi_ddiv+0x494>
 800187e:	e72c      	b.n	80016da <__aeabi_ddiv+0x2ee>
 8001880:	464b      	mov	r3, r9
 8001882:	3808      	subs	r0, #8
 8001884:	4083      	lsls	r3, r0
 8001886:	2500      	movs	r5, #0
 8001888:	4698      	mov	r8, r3
 800188a:	e732      	b.n	80016f2 <__aeabi_ddiv+0x306>
 800188c:	f001 f928 	bl	8002ae0 <__clzsi2>
 8001890:	0003      	movs	r3, r0
 8001892:	001a      	movs	r2, r3
 8001894:	3215      	adds	r2, #21
 8001896:	3020      	adds	r0, #32
 8001898:	2a1c      	cmp	r2, #28
 800189a:	dc00      	bgt.n	800189e <__aeabi_ddiv+0x4b2>
 800189c:	e700      	b.n	80016a0 <__aeabi_ddiv+0x2b4>
 800189e:	4654      	mov	r4, sl
 80018a0:	3b08      	subs	r3, #8
 80018a2:	2200      	movs	r2, #0
 80018a4:	409c      	lsls	r4, r3
 80018a6:	e705      	b.n	80016b4 <__aeabi_ddiv+0x2c8>
 80018a8:	1936      	adds	r6, r6, r4
 80018aa:	3b01      	subs	r3, #1
 80018ac:	42b4      	cmp	r4, r6
 80018ae:	d900      	bls.n	80018b2 <__aeabi_ddiv+0x4c6>
 80018b0:	e6a6      	b.n	8001600 <__aeabi_ddiv+0x214>
 80018b2:	42b2      	cmp	r2, r6
 80018b4:	d800      	bhi.n	80018b8 <__aeabi_ddiv+0x4cc>
 80018b6:	e6a3      	b.n	8001600 <__aeabi_ddiv+0x214>
 80018b8:	1e83      	subs	r3, r0, #2
 80018ba:	1936      	adds	r6, r6, r4
 80018bc:	e6a0      	b.n	8001600 <__aeabi_ddiv+0x214>
 80018be:	1909      	adds	r1, r1, r4
 80018c0:	3d01      	subs	r5, #1
 80018c2:	428c      	cmp	r4, r1
 80018c4:	d900      	bls.n	80018c8 <__aeabi_ddiv+0x4dc>
 80018c6:	e68d      	b.n	80015e4 <__aeabi_ddiv+0x1f8>
 80018c8:	428a      	cmp	r2, r1
 80018ca:	d800      	bhi.n	80018ce <__aeabi_ddiv+0x4e2>
 80018cc:	e68a      	b.n	80015e4 <__aeabi_ddiv+0x1f8>
 80018ce:	1e85      	subs	r5, r0, #2
 80018d0:	1909      	adds	r1, r1, r4
 80018d2:	e687      	b.n	80015e4 <__aeabi_ddiv+0x1f8>
 80018d4:	230f      	movs	r3, #15
 80018d6:	402b      	ands	r3, r5
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d100      	bne.n	80018de <__aeabi_ddiv+0x4f2>
 80018dc:	e6bc      	b.n	8001658 <__aeabi_ddiv+0x26c>
 80018de:	2305      	movs	r3, #5
 80018e0:	425b      	negs	r3, r3
 80018e2:	42ab      	cmp	r3, r5
 80018e4:	419b      	sbcs	r3, r3
 80018e6:	3504      	adds	r5, #4
 80018e8:	425b      	negs	r3, r3
 80018ea:	08ed      	lsrs	r5, r5, #3
 80018ec:	4498      	add	r8, r3
 80018ee:	e6b4      	b.n	800165a <__aeabi_ddiv+0x26e>
 80018f0:	42af      	cmp	r7, r5
 80018f2:	d900      	bls.n	80018f6 <__aeabi_ddiv+0x50a>
 80018f4:	e660      	b.n	80015b8 <__aeabi_ddiv+0x1cc>
 80018f6:	4282      	cmp	r2, r0
 80018f8:	d804      	bhi.n	8001904 <__aeabi_ddiv+0x518>
 80018fa:	d000      	beq.n	80018fe <__aeabi_ddiv+0x512>
 80018fc:	e65c      	b.n	80015b8 <__aeabi_ddiv+0x1cc>
 80018fe:	42ae      	cmp	r6, r5
 8001900:	d800      	bhi.n	8001904 <__aeabi_ddiv+0x518>
 8001902:	e659      	b.n	80015b8 <__aeabi_ddiv+0x1cc>
 8001904:	2302      	movs	r3, #2
 8001906:	425b      	negs	r3, r3
 8001908:	469c      	mov	ip, r3
 800190a:	9b00      	ldr	r3, [sp, #0]
 800190c:	44e0      	add	r8, ip
 800190e:	469c      	mov	ip, r3
 8001910:	4465      	add	r5, ip
 8001912:	429d      	cmp	r5, r3
 8001914:	419b      	sbcs	r3, r3
 8001916:	425b      	negs	r3, r3
 8001918:	191b      	adds	r3, r3, r4
 800191a:	18c0      	adds	r0, r0, r3
 800191c:	e64d      	b.n	80015ba <__aeabi_ddiv+0x1ce>
 800191e:	428a      	cmp	r2, r1
 8001920:	d800      	bhi.n	8001924 <__aeabi_ddiv+0x538>
 8001922:	e60e      	b.n	8001542 <__aeabi_ddiv+0x156>
 8001924:	1e83      	subs	r3, r0, #2
 8001926:	1909      	adds	r1, r1, r4
 8001928:	e60b      	b.n	8001542 <__aeabi_ddiv+0x156>
 800192a:	428a      	cmp	r2, r1
 800192c:	d800      	bhi.n	8001930 <__aeabi_ddiv+0x544>
 800192e:	e5f4      	b.n	800151a <__aeabi_ddiv+0x12e>
 8001930:	1e83      	subs	r3, r0, #2
 8001932:	4698      	mov	r8, r3
 8001934:	1909      	adds	r1, r1, r4
 8001936:	e5f0      	b.n	800151a <__aeabi_ddiv+0x12e>
 8001938:	4925      	ldr	r1, [pc, #148]	; (80019d0 <__aeabi_ddiv+0x5e4>)
 800193a:	0028      	movs	r0, r5
 800193c:	4459      	add	r1, fp
 800193e:	408d      	lsls	r5, r1
 8001940:	4642      	mov	r2, r8
 8001942:	408a      	lsls	r2, r1
 8001944:	1e69      	subs	r1, r5, #1
 8001946:	418d      	sbcs	r5, r1
 8001948:	4641      	mov	r1, r8
 800194a:	40d8      	lsrs	r0, r3
 800194c:	40d9      	lsrs	r1, r3
 800194e:	4302      	orrs	r2, r0
 8001950:	432a      	orrs	r2, r5
 8001952:	000b      	movs	r3, r1
 8001954:	0751      	lsls	r1, r2, #29
 8001956:	d100      	bne.n	800195a <__aeabi_ddiv+0x56e>
 8001958:	e751      	b.n	80017fe <__aeabi_ddiv+0x412>
 800195a:	210f      	movs	r1, #15
 800195c:	4011      	ands	r1, r2
 800195e:	2904      	cmp	r1, #4
 8001960:	d000      	beq.n	8001964 <__aeabi_ddiv+0x578>
 8001962:	e746      	b.n	80017f2 <__aeabi_ddiv+0x406>
 8001964:	e74b      	b.n	80017fe <__aeabi_ddiv+0x412>
 8001966:	0005      	movs	r5, r0
 8001968:	428e      	cmp	r6, r1
 800196a:	d000      	beq.n	800196e <__aeabi_ddiv+0x582>
 800196c:	e66a      	b.n	8001644 <__aeabi_ddiv+0x258>
 800196e:	9a00      	ldr	r2, [sp, #0]
 8001970:	4293      	cmp	r3, r2
 8001972:	d000      	beq.n	8001976 <__aeabi_ddiv+0x58a>
 8001974:	e666      	b.n	8001644 <__aeabi_ddiv+0x258>
 8001976:	e667      	b.n	8001648 <__aeabi_ddiv+0x25c>
 8001978:	4a16      	ldr	r2, [pc, #88]	; (80019d4 <__aeabi_ddiv+0x5e8>)
 800197a:	445a      	add	r2, fp
 800197c:	2a00      	cmp	r2, #0
 800197e:	dc00      	bgt.n	8001982 <__aeabi_ddiv+0x596>
 8001980:	e710      	b.n	80017a4 <__aeabi_ddiv+0x3b8>
 8001982:	2301      	movs	r3, #1
 8001984:	2500      	movs	r5, #0
 8001986:	4498      	add	r8, r3
 8001988:	e667      	b.n	800165a <__aeabi_ddiv+0x26e>
 800198a:	075d      	lsls	r5, r3, #29
 800198c:	025b      	lsls	r3, r3, #9
 800198e:	0b1c      	lsrs	r4, r3, #12
 8001990:	08d2      	lsrs	r2, r2, #3
 8001992:	2300      	movs	r3, #0
 8001994:	4315      	orrs	r5, r2
 8001996:	e580      	b.n	800149a <__aeabi_ddiv+0xae>
 8001998:	9800      	ldr	r0, [sp, #0]
 800199a:	3d02      	subs	r5, #2
 800199c:	0042      	lsls	r2, r0, #1
 800199e:	4282      	cmp	r2, r0
 80019a0:	41bf      	sbcs	r7, r7
 80019a2:	427f      	negs	r7, r7
 80019a4:	193c      	adds	r4, r7, r4
 80019a6:	1936      	adds	r6, r6, r4
 80019a8:	9200      	str	r2, [sp, #0]
 80019aa:	e7dd      	b.n	8001968 <__aeabi_ddiv+0x57c>
 80019ac:	2480      	movs	r4, #128	; 0x80
 80019ae:	4643      	mov	r3, r8
 80019b0:	0324      	lsls	r4, r4, #12
 80019b2:	431c      	orrs	r4, r3
 80019b4:	0324      	lsls	r4, r4, #12
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__aeabi_ddiv+0x5dc>)
 80019b8:	0b24      	lsrs	r4, r4, #12
 80019ba:	e56e      	b.n	800149a <__aeabi_ddiv+0xae>
 80019bc:	9a00      	ldr	r2, [sp, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d3ea      	bcc.n	8001998 <__aeabi_ddiv+0x5ac>
 80019c2:	0005      	movs	r5, r0
 80019c4:	e7d3      	b.n	800196e <__aeabi_ddiv+0x582>
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	000007ff 	.word	0x000007ff
 80019cc:	0000043e 	.word	0x0000043e
 80019d0:	0000041e 	.word	0x0000041e
 80019d4:	000003ff 	.word	0x000003ff

080019d8 <__eqdf2>:
 80019d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019da:	464e      	mov	r6, r9
 80019dc:	4645      	mov	r5, r8
 80019de:	46de      	mov	lr, fp
 80019e0:	4657      	mov	r7, sl
 80019e2:	4690      	mov	r8, r2
 80019e4:	b5e0      	push	{r5, r6, r7, lr}
 80019e6:	0017      	movs	r7, r2
 80019e8:	031a      	lsls	r2, r3, #12
 80019ea:	0b12      	lsrs	r2, r2, #12
 80019ec:	0005      	movs	r5, r0
 80019ee:	4684      	mov	ip, r0
 80019f0:	4819      	ldr	r0, [pc, #100]	; (8001a58 <__eqdf2+0x80>)
 80019f2:	030e      	lsls	r6, r1, #12
 80019f4:	004c      	lsls	r4, r1, #1
 80019f6:	4691      	mov	r9, r2
 80019f8:	005a      	lsls	r2, r3, #1
 80019fa:	0fdb      	lsrs	r3, r3, #31
 80019fc:	469b      	mov	fp, r3
 80019fe:	0b36      	lsrs	r6, r6, #12
 8001a00:	0d64      	lsrs	r4, r4, #21
 8001a02:	0fc9      	lsrs	r1, r1, #31
 8001a04:	0d52      	lsrs	r2, r2, #21
 8001a06:	4284      	cmp	r4, r0
 8001a08:	d019      	beq.n	8001a3e <__eqdf2+0x66>
 8001a0a:	4282      	cmp	r2, r0
 8001a0c:	d010      	beq.n	8001a30 <__eqdf2+0x58>
 8001a0e:	2001      	movs	r0, #1
 8001a10:	4294      	cmp	r4, r2
 8001a12:	d10e      	bne.n	8001a32 <__eqdf2+0x5a>
 8001a14:	454e      	cmp	r6, r9
 8001a16:	d10c      	bne.n	8001a32 <__eqdf2+0x5a>
 8001a18:	2001      	movs	r0, #1
 8001a1a:	45c4      	cmp	ip, r8
 8001a1c:	d109      	bne.n	8001a32 <__eqdf2+0x5a>
 8001a1e:	4559      	cmp	r1, fp
 8001a20:	d017      	beq.n	8001a52 <__eqdf2+0x7a>
 8001a22:	2c00      	cmp	r4, #0
 8001a24:	d105      	bne.n	8001a32 <__eqdf2+0x5a>
 8001a26:	0030      	movs	r0, r6
 8001a28:	4328      	orrs	r0, r5
 8001a2a:	1e43      	subs	r3, r0, #1
 8001a2c:	4198      	sbcs	r0, r3
 8001a2e:	e000      	b.n	8001a32 <__eqdf2+0x5a>
 8001a30:	2001      	movs	r0, #1
 8001a32:	bcf0      	pop	{r4, r5, r6, r7}
 8001a34:	46bb      	mov	fp, r7
 8001a36:	46b2      	mov	sl, r6
 8001a38:	46a9      	mov	r9, r5
 8001a3a:	46a0      	mov	r8, r4
 8001a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a3e:	0033      	movs	r3, r6
 8001a40:	2001      	movs	r0, #1
 8001a42:	432b      	orrs	r3, r5
 8001a44:	d1f5      	bne.n	8001a32 <__eqdf2+0x5a>
 8001a46:	42a2      	cmp	r2, r4
 8001a48:	d1f3      	bne.n	8001a32 <__eqdf2+0x5a>
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	433b      	orrs	r3, r7
 8001a4e:	d1f0      	bne.n	8001a32 <__eqdf2+0x5a>
 8001a50:	e7e2      	b.n	8001a18 <__eqdf2+0x40>
 8001a52:	2000      	movs	r0, #0
 8001a54:	e7ed      	b.n	8001a32 <__eqdf2+0x5a>
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	000007ff 	.word	0x000007ff

08001a5c <__gedf2>:
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	4647      	mov	r7, r8
 8001a60:	46ce      	mov	lr, r9
 8001a62:	0004      	movs	r4, r0
 8001a64:	0018      	movs	r0, r3
 8001a66:	0016      	movs	r6, r2
 8001a68:	031b      	lsls	r3, r3, #12
 8001a6a:	0b1b      	lsrs	r3, r3, #12
 8001a6c:	4d2d      	ldr	r5, [pc, #180]	; (8001b24 <__gedf2+0xc8>)
 8001a6e:	004a      	lsls	r2, r1, #1
 8001a70:	4699      	mov	r9, r3
 8001a72:	b580      	push	{r7, lr}
 8001a74:	0043      	lsls	r3, r0, #1
 8001a76:	030f      	lsls	r7, r1, #12
 8001a78:	46a4      	mov	ip, r4
 8001a7a:	46b0      	mov	r8, r6
 8001a7c:	0b3f      	lsrs	r7, r7, #12
 8001a7e:	0d52      	lsrs	r2, r2, #21
 8001a80:	0fc9      	lsrs	r1, r1, #31
 8001a82:	0d5b      	lsrs	r3, r3, #21
 8001a84:	0fc0      	lsrs	r0, r0, #31
 8001a86:	42aa      	cmp	r2, r5
 8001a88:	d021      	beq.n	8001ace <__gedf2+0x72>
 8001a8a:	42ab      	cmp	r3, r5
 8001a8c:	d013      	beq.n	8001ab6 <__gedf2+0x5a>
 8001a8e:	2a00      	cmp	r2, #0
 8001a90:	d122      	bne.n	8001ad8 <__gedf2+0x7c>
 8001a92:	433c      	orrs	r4, r7
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d102      	bne.n	8001a9e <__gedf2+0x42>
 8001a98:	464d      	mov	r5, r9
 8001a9a:	432e      	orrs	r6, r5
 8001a9c:	d022      	beq.n	8001ae4 <__gedf2+0x88>
 8001a9e:	2c00      	cmp	r4, #0
 8001aa0:	d010      	beq.n	8001ac4 <__gedf2+0x68>
 8001aa2:	4281      	cmp	r1, r0
 8001aa4:	d022      	beq.n	8001aec <__gedf2+0x90>
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	3901      	subs	r1, #1
 8001aaa:	4008      	ands	r0, r1
 8001aac:	3801      	subs	r0, #1
 8001aae:	bcc0      	pop	{r6, r7}
 8001ab0:	46b9      	mov	r9, r7
 8001ab2:	46b0      	mov	r8, r6
 8001ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab6:	464d      	mov	r5, r9
 8001ab8:	432e      	orrs	r6, r5
 8001aba:	d129      	bne.n	8001b10 <__gedf2+0xb4>
 8001abc:	2a00      	cmp	r2, #0
 8001abe:	d1f0      	bne.n	8001aa2 <__gedf2+0x46>
 8001ac0:	433c      	orrs	r4, r7
 8001ac2:	d1ee      	bne.n	8001aa2 <__gedf2+0x46>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d1f2      	bne.n	8001aae <__gedf2+0x52>
 8001ac8:	2001      	movs	r0, #1
 8001aca:	4240      	negs	r0, r0
 8001acc:	e7ef      	b.n	8001aae <__gedf2+0x52>
 8001ace:	003d      	movs	r5, r7
 8001ad0:	4325      	orrs	r5, r4
 8001ad2:	d11d      	bne.n	8001b10 <__gedf2+0xb4>
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d0ee      	beq.n	8001ab6 <__gedf2+0x5a>
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e2      	bne.n	8001aa2 <__gedf2+0x46>
 8001adc:	464c      	mov	r4, r9
 8001ade:	4326      	orrs	r6, r4
 8001ae0:	d1df      	bne.n	8001aa2 <__gedf2+0x46>
 8001ae2:	e7e0      	b.n	8001aa6 <__gedf2+0x4a>
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	2c00      	cmp	r4, #0
 8001ae8:	d0e1      	beq.n	8001aae <__gedf2+0x52>
 8001aea:	e7dc      	b.n	8001aa6 <__gedf2+0x4a>
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dc0a      	bgt.n	8001b06 <__gedf2+0xaa>
 8001af0:	dbe8      	blt.n	8001ac4 <__gedf2+0x68>
 8001af2:	454f      	cmp	r7, r9
 8001af4:	d8d7      	bhi.n	8001aa6 <__gedf2+0x4a>
 8001af6:	d00e      	beq.n	8001b16 <__gedf2+0xba>
 8001af8:	2000      	movs	r0, #0
 8001afa:	454f      	cmp	r7, r9
 8001afc:	d2d7      	bcs.n	8001aae <__gedf2+0x52>
 8001afe:	2900      	cmp	r1, #0
 8001b00:	d0e2      	beq.n	8001ac8 <__gedf2+0x6c>
 8001b02:	0008      	movs	r0, r1
 8001b04:	e7d3      	b.n	8001aae <__gedf2+0x52>
 8001b06:	4243      	negs	r3, r0
 8001b08:	4158      	adcs	r0, r3
 8001b0a:	0040      	lsls	r0, r0, #1
 8001b0c:	3801      	subs	r0, #1
 8001b0e:	e7ce      	b.n	8001aae <__gedf2+0x52>
 8001b10:	2002      	movs	r0, #2
 8001b12:	4240      	negs	r0, r0
 8001b14:	e7cb      	b.n	8001aae <__gedf2+0x52>
 8001b16:	45c4      	cmp	ip, r8
 8001b18:	d8c5      	bhi.n	8001aa6 <__gedf2+0x4a>
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	45c4      	cmp	ip, r8
 8001b1e:	d2c6      	bcs.n	8001aae <__gedf2+0x52>
 8001b20:	e7ed      	b.n	8001afe <__gedf2+0xa2>
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	000007ff 	.word	0x000007ff

08001b28 <__ledf2>:
 8001b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b2a:	4647      	mov	r7, r8
 8001b2c:	46ce      	mov	lr, r9
 8001b2e:	0004      	movs	r4, r0
 8001b30:	0018      	movs	r0, r3
 8001b32:	0016      	movs	r6, r2
 8001b34:	031b      	lsls	r3, r3, #12
 8001b36:	0b1b      	lsrs	r3, r3, #12
 8001b38:	4d2c      	ldr	r5, [pc, #176]	; (8001bec <__ledf2+0xc4>)
 8001b3a:	004a      	lsls	r2, r1, #1
 8001b3c:	4699      	mov	r9, r3
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	0043      	lsls	r3, r0, #1
 8001b42:	030f      	lsls	r7, r1, #12
 8001b44:	46a4      	mov	ip, r4
 8001b46:	46b0      	mov	r8, r6
 8001b48:	0b3f      	lsrs	r7, r7, #12
 8001b4a:	0d52      	lsrs	r2, r2, #21
 8001b4c:	0fc9      	lsrs	r1, r1, #31
 8001b4e:	0d5b      	lsrs	r3, r3, #21
 8001b50:	0fc0      	lsrs	r0, r0, #31
 8001b52:	42aa      	cmp	r2, r5
 8001b54:	d00d      	beq.n	8001b72 <__ledf2+0x4a>
 8001b56:	42ab      	cmp	r3, r5
 8001b58:	d010      	beq.n	8001b7c <__ledf2+0x54>
 8001b5a:	2a00      	cmp	r2, #0
 8001b5c:	d127      	bne.n	8001bae <__ledf2+0x86>
 8001b5e:	433c      	orrs	r4, r7
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d111      	bne.n	8001b88 <__ledf2+0x60>
 8001b64:	464d      	mov	r5, r9
 8001b66:	432e      	orrs	r6, r5
 8001b68:	d10e      	bne.n	8001b88 <__ledf2+0x60>
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	2c00      	cmp	r4, #0
 8001b6e:	d015      	beq.n	8001b9c <__ledf2+0x74>
 8001b70:	e00e      	b.n	8001b90 <__ledf2+0x68>
 8001b72:	003d      	movs	r5, r7
 8001b74:	4325      	orrs	r5, r4
 8001b76:	d110      	bne.n	8001b9a <__ledf2+0x72>
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d118      	bne.n	8001bae <__ledf2+0x86>
 8001b7c:	464d      	mov	r5, r9
 8001b7e:	432e      	orrs	r6, r5
 8001b80:	d10b      	bne.n	8001b9a <__ledf2+0x72>
 8001b82:	2a00      	cmp	r2, #0
 8001b84:	d102      	bne.n	8001b8c <__ledf2+0x64>
 8001b86:	433c      	orrs	r4, r7
 8001b88:	2c00      	cmp	r4, #0
 8001b8a:	d00b      	beq.n	8001ba4 <__ledf2+0x7c>
 8001b8c:	4281      	cmp	r1, r0
 8001b8e:	d014      	beq.n	8001bba <__ledf2+0x92>
 8001b90:	2002      	movs	r0, #2
 8001b92:	3901      	subs	r1, #1
 8001b94:	4008      	ands	r0, r1
 8001b96:	3801      	subs	r0, #1
 8001b98:	e000      	b.n	8001b9c <__ledf2+0x74>
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	bcc0      	pop	{r6, r7}
 8001b9e:	46b9      	mov	r9, r7
 8001ba0:	46b0      	mov	r8, r6
 8001ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	d1f9      	bne.n	8001b9c <__ledf2+0x74>
 8001ba8:	2001      	movs	r0, #1
 8001baa:	4240      	negs	r0, r0
 8001bac:	e7f6      	b.n	8001b9c <__ledf2+0x74>
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ec      	bne.n	8001b8c <__ledf2+0x64>
 8001bb2:	464c      	mov	r4, r9
 8001bb4:	4326      	orrs	r6, r4
 8001bb6:	d1e9      	bne.n	8001b8c <__ledf2+0x64>
 8001bb8:	e7ea      	b.n	8001b90 <__ledf2+0x68>
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	dd04      	ble.n	8001bc8 <__ledf2+0xa0>
 8001bbe:	4243      	negs	r3, r0
 8001bc0:	4158      	adcs	r0, r3
 8001bc2:	0040      	lsls	r0, r0, #1
 8001bc4:	3801      	subs	r0, #1
 8001bc6:	e7e9      	b.n	8001b9c <__ledf2+0x74>
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbeb      	blt.n	8001ba4 <__ledf2+0x7c>
 8001bcc:	454f      	cmp	r7, r9
 8001bce:	d8df      	bhi.n	8001b90 <__ledf2+0x68>
 8001bd0:	d006      	beq.n	8001be0 <__ledf2+0xb8>
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	454f      	cmp	r7, r9
 8001bd6:	d2e1      	bcs.n	8001b9c <__ledf2+0x74>
 8001bd8:	2900      	cmp	r1, #0
 8001bda:	d0e5      	beq.n	8001ba8 <__ledf2+0x80>
 8001bdc:	0008      	movs	r0, r1
 8001bde:	e7dd      	b.n	8001b9c <__ledf2+0x74>
 8001be0:	45c4      	cmp	ip, r8
 8001be2:	d8d5      	bhi.n	8001b90 <__ledf2+0x68>
 8001be4:	2000      	movs	r0, #0
 8001be6:	45c4      	cmp	ip, r8
 8001be8:	d2d8      	bcs.n	8001b9c <__ledf2+0x74>
 8001bea:	e7f5      	b.n	8001bd8 <__ledf2+0xb0>
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dmul>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	4698      	mov	r8, r3
 8001bfe:	030c      	lsls	r4, r1, #12
 8001c00:	004b      	lsls	r3, r1, #1
 8001c02:	0006      	movs	r6, r0
 8001c04:	4692      	mov	sl, r2
 8001c06:	b087      	sub	sp, #28
 8001c08:	0b24      	lsrs	r4, r4, #12
 8001c0a:	0d5b      	lsrs	r3, r3, #21
 8001c0c:	0fcf      	lsrs	r7, r1, #31
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dmul+0x24>
 8001c12:	e15c      	b.n	8001ece <__aeabi_dmul+0x2de>
 8001c14:	4ad9      	ldr	r2, [pc, #868]	; (8001f7c <__aeabi_dmul+0x38c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dmul+0x2c>
 8001c1a:	e175      	b.n	8001f08 <__aeabi_dmul+0x318>
 8001c1c:	0f42      	lsrs	r2, r0, #29
 8001c1e:	00e4      	lsls	r4, r4, #3
 8001c20:	4314      	orrs	r4, r2
 8001c22:	2280      	movs	r2, #128	; 0x80
 8001c24:	0412      	lsls	r2, r2, #16
 8001c26:	4314      	orrs	r4, r2
 8001c28:	4ad5      	ldr	r2, [pc, #852]	; (8001f80 <__aeabi_dmul+0x390>)
 8001c2a:	00c5      	lsls	r5, r0, #3
 8001c2c:	4694      	mov	ip, r2
 8001c2e:	4463      	add	r3, ip
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2300      	movs	r3, #0
 8001c34:	4699      	mov	r9, r3
 8001c36:	469b      	mov	fp, r3
 8001c38:	4643      	mov	r3, r8
 8001c3a:	4642      	mov	r2, r8
 8001c3c:	031e      	lsls	r6, r3, #12
 8001c3e:	0fd2      	lsrs	r2, r2, #31
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4650      	mov	r0, sl
 8001c44:	4690      	mov	r8, r2
 8001c46:	0b36      	lsrs	r6, r6, #12
 8001c48:	0d5b      	lsrs	r3, r3, #21
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dmul+0x5e>
 8001c4c:	e120      	b.n	8001e90 <__aeabi_dmul+0x2a0>
 8001c4e:	4acb      	ldr	r2, [pc, #812]	; (8001f7c <__aeabi_dmul+0x38c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dmul+0x66>
 8001c54:	e162      	b.n	8001f1c <__aeabi_dmul+0x32c>
 8001c56:	49ca      	ldr	r1, [pc, #808]	; (8001f80 <__aeabi_dmul+0x390>)
 8001c58:	0f42      	lsrs	r2, r0, #29
 8001c5a:	468c      	mov	ip, r1
 8001c5c:	9900      	ldr	r1, [sp, #0]
 8001c5e:	4463      	add	r3, ip
 8001c60:	00f6      	lsls	r6, r6, #3
 8001c62:	468c      	mov	ip, r1
 8001c64:	4316      	orrs	r6, r2
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	449c      	add	ip, r3
 8001c6a:	0412      	lsls	r2, r2, #16
 8001c6c:	4663      	mov	r3, ip
 8001c6e:	4316      	orrs	r6, r2
 8001c70:	00c2      	lsls	r2, r0, #3
 8001c72:	2000      	movs	r0, #0
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	9900      	ldr	r1, [sp, #0]
 8001c78:	4643      	mov	r3, r8
 8001c7a:	3101      	adds	r1, #1
 8001c7c:	468c      	mov	ip, r1
 8001c7e:	4649      	mov	r1, r9
 8001c80:	407b      	eors	r3, r7
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	290f      	cmp	r1, #15
 8001c86:	d826      	bhi.n	8001cd6 <__aeabi_dmul+0xe6>
 8001c88:	4bbe      	ldr	r3, [pc, #760]	; (8001f84 <__aeabi_dmul+0x394>)
 8001c8a:	0089      	lsls	r1, r1, #2
 8001c8c:	5859      	ldr	r1, [r3, r1]
 8001c8e:	468f      	mov	pc, r1
 8001c90:	4643      	mov	r3, r8
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	0034      	movs	r4, r6
 8001c96:	0015      	movs	r5, r2
 8001c98:	4683      	mov	fp, r0
 8001c9a:	465b      	mov	r3, fp
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d016      	beq.n	8001cce <__aeabi_dmul+0xde>
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_dmul+0xb6>
 8001ca4:	e203      	b.n	80020ae <__aeabi_dmul+0x4be>
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d000      	beq.n	8001cac <__aeabi_dmul+0xbc>
 8001caa:	e0cd      	b.n	8001e48 <__aeabi_dmul+0x258>
 8001cac:	2200      	movs	r2, #0
 8001cae:	2400      	movs	r4, #0
 8001cb0:	2500      	movs	r5, #0
 8001cb2:	9b01      	ldr	r3, [sp, #4]
 8001cb4:	0512      	lsls	r2, r2, #20
 8001cb6:	4322      	orrs	r2, r4
 8001cb8:	07db      	lsls	r3, r3, #31
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	0028      	movs	r0, r5
 8001cbe:	0011      	movs	r1, r2
 8001cc0:	b007      	add	sp, #28
 8001cc2:	bcf0      	pop	{r4, r5, r6, r7}
 8001cc4:	46bb      	mov	fp, r7
 8001cc6:	46b2      	mov	sl, r6
 8001cc8:	46a9      	mov	r9, r5
 8001cca:	46a0      	mov	r8, r4
 8001ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cce:	2400      	movs	r4, #0
 8001cd0:	2500      	movs	r5, #0
 8001cd2:	4aaa      	ldr	r2, [pc, #680]	; (8001f7c <__aeabi_dmul+0x38c>)
 8001cd4:	e7ed      	b.n	8001cb2 <__aeabi_dmul+0xc2>
 8001cd6:	0c28      	lsrs	r0, r5, #16
 8001cd8:	042d      	lsls	r5, r5, #16
 8001cda:	0c2d      	lsrs	r5, r5, #16
 8001cdc:	002b      	movs	r3, r5
 8001cde:	0c11      	lsrs	r1, r2, #16
 8001ce0:	0412      	lsls	r2, r2, #16
 8001ce2:	0c12      	lsrs	r2, r2, #16
 8001ce4:	4353      	muls	r3, r2
 8001ce6:	4698      	mov	r8, r3
 8001ce8:	0013      	movs	r3, r2
 8001cea:	002f      	movs	r7, r5
 8001cec:	4343      	muls	r3, r0
 8001cee:	4699      	mov	r9, r3
 8001cf0:	434f      	muls	r7, r1
 8001cf2:	444f      	add	r7, r9
 8001cf4:	46bb      	mov	fp, r7
 8001cf6:	4647      	mov	r7, r8
 8001cf8:	000b      	movs	r3, r1
 8001cfa:	0c3f      	lsrs	r7, r7, #16
 8001cfc:	46ba      	mov	sl, r7
 8001cfe:	4343      	muls	r3, r0
 8001d00:	44da      	add	sl, fp
 8001d02:	9302      	str	r3, [sp, #8]
 8001d04:	45d1      	cmp	r9, sl
 8001d06:	d904      	bls.n	8001d12 <__aeabi_dmul+0x122>
 8001d08:	2780      	movs	r7, #128	; 0x80
 8001d0a:	027f      	lsls	r7, r7, #9
 8001d0c:	46b9      	mov	r9, r7
 8001d0e:	444b      	add	r3, r9
 8001d10:	9302      	str	r3, [sp, #8]
 8001d12:	4653      	mov	r3, sl
 8001d14:	0c1b      	lsrs	r3, r3, #16
 8001d16:	469b      	mov	fp, r3
 8001d18:	4653      	mov	r3, sl
 8001d1a:	041f      	lsls	r7, r3, #16
 8001d1c:	4643      	mov	r3, r8
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	0c1b      	lsrs	r3, r3, #16
 8001d22:	4698      	mov	r8, r3
 8001d24:	003b      	movs	r3, r7
 8001d26:	4443      	add	r3, r8
 8001d28:	9304      	str	r3, [sp, #16]
 8001d2a:	0c33      	lsrs	r3, r6, #16
 8001d2c:	0436      	lsls	r6, r6, #16
 8001d2e:	0c36      	lsrs	r6, r6, #16
 8001d30:	4698      	mov	r8, r3
 8001d32:	0033      	movs	r3, r6
 8001d34:	4343      	muls	r3, r0
 8001d36:	4699      	mov	r9, r3
 8001d38:	4643      	mov	r3, r8
 8001d3a:	4343      	muls	r3, r0
 8001d3c:	002f      	movs	r7, r5
 8001d3e:	469a      	mov	sl, r3
 8001d40:	4643      	mov	r3, r8
 8001d42:	4377      	muls	r7, r6
 8001d44:	435d      	muls	r5, r3
 8001d46:	0c38      	lsrs	r0, r7, #16
 8001d48:	444d      	add	r5, r9
 8001d4a:	1945      	adds	r5, r0, r5
 8001d4c:	45a9      	cmp	r9, r5
 8001d4e:	d903      	bls.n	8001d58 <__aeabi_dmul+0x168>
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	025b      	lsls	r3, r3, #9
 8001d54:	4699      	mov	r9, r3
 8001d56:	44ca      	add	sl, r9
 8001d58:	043f      	lsls	r7, r7, #16
 8001d5a:	0c28      	lsrs	r0, r5, #16
 8001d5c:	0c3f      	lsrs	r7, r7, #16
 8001d5e:	042d      	lsls	r5, r5, #16
 8001d60:	19ed      	adds	r5, r5, r7
 8001d62:	0c27      	lsrs	r7, r4, #16
 8001d64:	0424      	lsls	r4, r4, #16
 8001d66:	0c24      	lsrs	r4, r4, #16
 8001d68:	0003      	movs	r3, r0
 8001d6a:	0020      	movs	r0, r4
 8001d6c:	4350      	muls	r0, r2
 8001d6e:	437a      	muls	r2, r7
 8001d70:	4691      	mov	r9, r2
 8001d72:	003a      	movs	r2, r7
 8001d74:	4453      	add	r3, sl
 8001d76:	9305      	str	r3, [sp, #20]
 8001d78:	0c03      	lsrs	r3, r0, #16
 8001d7a:	469a      	mov	sl, r3
 8001d7c:	434a      	muls	r2, r1
 8001d7e:	4361      	muls	r1, r4
 8001d80:	4449      	add	r1, r9
 8001d82:	4451      	add	r1, sl
 8001d84:	44ab      	add	fp, r5
 8001d86:	4589      	cmp	r9, r1
 8001d88:	d903      	bls.n	8001d92 <__aeabi_dmul+0x1a2>
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	025b      	lsls	r3, r3, #9
 8001d8e:	4699      	mov	r9, r3
 8001d90:	444a      	add	r2, r9
 8001d92:	0400      	lsls	r0, r0, #16
 8001d94:	0c0b      	lsrs	r3, r1, #16
 8001d96:	0c00      	lsrs	r0, r0, #16
 8001d98:	0409      	lsls	r1, r1, #16
 8001d9a:	1809      	adds	r1, r1, r0
 8001d9c:	0020      	movs	r0, r4
 8001d9e:	4699      	mov	r9, r3
 8001da0:	4643      	mov	r3, r8
 8001da2:	4370      	muls	r0, r6
 8001da4:	435c      	muls	r4, r3
 8001da6:	437e      	muls	r6, r7
 8001da8:	435f      	muls	r7, r3
 8001daa:	0c03      	lsrs	r3, r0, #16
 8001dac:	4698      	mov	r8, r3
 8001dae:	19a4      	adds	r4, r4, r6
 8001db0:	4444      	add	r4, r8
 8001db2:	444a      	add	r2, r9
 8001db4:	9703      	str	r7, [sp, #12]
 8001db6:	42a6      	cmp	r6, r4
 8001db8:	d904      	bls.n	8001dc4 <__aeabi_dmul+0x1d4>
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	025b      	lsls	r3, r3, #9
 8001dbe:	4698      	mov	r8, r3
 8001dc0:	4447      	add	r7, r8
 8001dc2:	9703      	str	r7, [sp, #12]
 8001dc4:	0423      	lsls	r3, r4, #16
 8001dc6:	9e02      	ldr	r6, [sp, #8]
 8001dc8:	469a      	mov	sl, r3
 8001dca:	9b05      	ldr	r3, [sp, #20]
 8001dcc:	445e      	add	r6, fp
 8001dce:	4698      	mov	r8, r3
 8001dd0:	42ae      	cmp	r6, r5
 8001dd2:	41ad      	sbcs	r5, r5
 8001dd4:	1876      	adds	r6, r6, r1
 8001dd6:	428e      	cmp	r6, r1
 8001dd8:	4189      	sbcs	r1, r1
 8001dda:	0400      	lsls	r0, r0, #16
 8001ddc:	0c00      	lsrs	r0, r0, #16
 8001dde:	4450      	add	r0, sl
 8001de0:	4440      	add	r0, r8
 8001de2:	426d      	negs	r5, r5
 8001de4:	1947      	adds	r7, r0, r5
 8001de6:	46b8      	mov	r8, r7
 8001de8:	4693      	mov	fp, r2
 8001dea:	4249      	negs	r1, r1
 8001dec:	4689      	mov	r9, r1
 8001dee:	44c3      	add	fp, r8
 8001df0:	44d9      	add	r9, fp
 8001df2:	4298      	cmp	r0, r3
 8001df4:	4180      	sbcs	r0, r0
 8001df6:	45a8      	cmp	r8, r5
 8001df8:	41ad      	sbcs	r5, r5
 8001dfa:	4593      	cmp	fp, r2
 8001dfc:	4192      	sbcs	r2, r2
 8001dfe:	4589      	cmp	r9, r1
 8001e00:	4189      	sbcs	r1, r1
 8001e02:	426d      	negs	r5, r5
 8001e04:	4240      	negs	r0, r0
 8001e06:	4328      	orrs	r0, r5
 8001e08:	0c24      	lsrs	r4, r4, #16
 8001e0a:	4252      	negs	r2, r2
 8001e0c:	4249      	negs	r1, r1
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	9b03      	ldr	r3, [sp, #12]
 8001e12:	1900      	adds	r0, r0, r4
 8001e14:	1880      	adds	r0, r0, r2
 8001e16:	18c7      	adds	r7, r0, r3
 8001e18:	464b      	mov	r3, r9
 8001e1a:	0ddc      	lsrs	r4, r3, #23
 8001e1c:	9b04      	ldr	r3, [sp, #16]
 8001e1e:	0275      	lsls	r5, r6, #9
 8001e20:	431d      	orrs	r5, r3
 8001e22:	1e6a      	subs	r2, r5, #1
 8001e24:	4195      	sbcs	r5, r2
 8001e26:	464b      	mov	r3, r9
 8001e28:	0df6      	lsrs	r6, r6, #23
 8001e2a:	027f      	lsls	r7, r7, #9
 8001e2c:	4335      	orrs	r5, r6
 8001e2e:	025a      	lsls	r2, r3, #9
 8001e30:	433c      	orrs	r4, r7
 8001e32:	4315      	orrs	r5, r2
 8001e34:	01fb      	lsls	r3, r7, #7
 8001e36:	d400      	bmi.n	8001e3a <__aeabi_dmul+0x24a>
 8001e38:	e11c      	b.n	8002074 <__aeabi_dmul+0x484>
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	086a      	lsrs	r2, r5, #1
 8001e3e:	400d      	ands	r5, r1
 8001e40:	4315      	orrs	r5, r2
 8001e42:	07e2      	lsls	r2, r4, #31
 8001e44:	4315      	orrs	r5, r2
 8001e46:	0864      	lsrs	r4, r4, #1
 8001e48:	494f      	ldr	r1, [pc, #316]	; (8001f88 <__aeabi_dmul+0x398>)
 8001e4a:	4461      	add	r1, ip
 8001e4c:	2900      	cmp	r1, #0
 8001e4e:	dc00      	bgt.n	8001e52 <__aeabi_dmul+0x262>
 8001e50:	e0b0      	b.n	8001fb4 <__aeabi_dmul+0x3c4>
 8001e52:	076b      	lsls	r3, r5, #29
 8001e54:	d009      	beq.n	8001e6a <__aeabi_dmul+0x27a>
 8001e56:	220f      	movs	r2, #15
 8001e58:	402a      	ands	r2, r5
 8001e5a:	2a04      	cmp	r2, #4
 8001e5c:	d005      	beq.n	8001e6a <__aeabi_dmul+0x27a>
 8001e5e:	1d2a      	adds	r2, r5, #4
 8001e60:	42aa      	cmp	r2, r5
 8001e62:	41ad      	sbcs	r5, r5
 8001e64:	426d      	negs	r5, r5
 8001e66:	1964      	adds	r4, r4, r5
 8001e68:	0015      	movs	r5, r2
 8001e6a:	01e3      	lsls	r3, r4, #7
 8001e6c:	d504      	bpl.n	8001e78 <__aeabi_dmul+0x288>
 8001e6e:	2180      	movs	r1, #128	; 0x80
 8001e70:	4a46      	ldr	r2, [pc, #280]	; (8001f8c <__aeabi_dmul+0x39c>)
 8001e72:	00c9      	lsls	r1, r1, #3
 8001e74:	4014      	ands	r4, r2
 8001e76:	4461      	add	r1, ip
 8001e78:	4a45      	ldr	r2, [pc, #276]	; (8001f90 <__aeabi_dmul+0x3a0>)
 8001e7a:	4291      	cmp	r1, r2
 8001e7c:	dd00      	ble.n	8001e80 <__aeabi_dmul+0x290>
 8001e7e:	e726      	b.n	8001cce <__aeabi_dmul+0xde>
 8001e80:	0762      	lsls	r2, r4, #29
 8001e82:	08ed      	lsrs	r5, r5, #3
 8001e84:	0264      	lsls	r4, r4, #9
 8001e86:	0549      	lsls	r1, r1, #21
 8001e88:	4315      	orrs	r5, r2
 8001e8a:	0b24      	lsrs	r4, r4, #12
 8001e8c:	0d4a      	lsrs	r2, r1, #21
 8001e8e:	e710      	b.n	8001cb2 <__aeabi_dmul+0xc2>
 8001e90:	4652      	mov	r2, sl
 8001e92:	4332      	orrs	r2, r6
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x2a8>
 8001e96:	e07f      	b.n	8001f98 <__aeabi_dmul+0x3a8>
 8001e98:	2e00      	cmp	r6, #0
 8001e9a:	d100      	bne.n	8001e9e <__aeabi_dmul+0x2ae>
 8001e9c:	e0dc      	b.n	8002058 <__aeabi_dmul+0x468>
 8001e9e:	0030      	movs	r0, r6
 8001ea0:	f000 fe1e 	bl	8002ae0 <__clzsi2>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	3a0b      	subs	r2, #11
 8001ea8:	231d      	movs	r3, #29
 8001eaa:	0001      	movs	r1, r0
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	4652      	mov	r2, sl
 8001eb0:	3908      	subs	r1, #8
 8001eb2:	40da      	lsrs	r2, r3
 8001eb4:	408e      	lsls	r6, r1
 8001eb6:	4316      	orrs	r6, r2
 8001eb8:	4652      	mov	r2, sl
 8001eba:	408a      	lsls	r2, r1
 8001ebc:	9b00      	ldr	r3, [sp, #0]
 8001ebe:	4935      	ldr	r1, [pc, #212]	; (8001f94 <__aeabi_dmul+0x3a4>)
 8001ec0:	1a18      	subs	r0, r3, r0
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	468c      	mov	ip, r1
 8001ec6:	4463      	add	r3, ip
 8001ec8:	2000      	movs	r0, #0
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	e6d3      	b.n	8001c76 <__aeabi_dmul+0x86>
 8001ece:	0025      	movs	r5, r4
 8001ed0:	4305      	orrs	r5, r0
 8001ed2:	d04a      	beq.n	8001f6a <__aeabi_dmul+0x37a>
 8001ed4:	2c00      	cmp	r4, #0
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dmul+0x2ea>
 8001ed8:	e0b0      	b.n	800203c <__aeabi_dmul+0x44c>
 8001eda:	0020      	movs	r0, r4
 8001edc:	f000 fe00 	bl	8002ae0 <__clzsi2>
 8001ee0:	0001      	movs	r1, r0
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	390b      	subs	r1, #11
 8001ee6:	231d      	movs	r3, #29
 8001ee8:	0010      	movs	r0, r2
 8001eea:	1a5b      	subs	r3, r3, r1
 8001eec:	0031      	movs	r1, r6
 8001eee:	0035      	movs	r5, r6
 8001ef0:	3808      	subs	r0, #8
 8001ef2:	4084      	lsls	r4, r0
 8001ef4:	40d9      	lsrs	r1, r3
 8001ef6:	4085      	lsls	r5, r0
 8001ef8:	430c      	orrs	r4, r1
 8001efa:	4826      	ldr	r0, [pc, #152]	; (8001f94 <__aeabi_dmul+0x3a4>)
 8001efc:	1a83      	subs	r3, r0, r2
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	2300      	movs	r3, #0
 8001f02:	4699      	mov	r9, r3
 8001f04:	469b      	mov	fp, r3
 8001f06:	e697      	b.n	8001c38 <__aeabi_dmul+0x48>
 8001f08:	0005      	movs	r5, r0
 8001f0a:	4325      	orrs	r5, r4
 8001f0c:	d126      	bne.n	8001f5c <__aeabi_dmul+0x36c>
 8001f0e:	2208      	movs	r2, #8
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2302      	movs	r3, #2
 8001f14:	2400      	movs	r4, #0
 8001f16:	4691      	mov	r9, r2
 8001f18:	469b      	mov	fp, r3
 8001f1a:	e68d      	b.n	8001c38 <__aeabi_dmul+0x48>
 8001f1c:	4652      	mov	r2, sl
 8001f1e:	9b00      	ldr	r3, [sp, #0]
 8001f20:	4332      	orrs	r2, r6
 8001f22:	d110      	bne.n	8001f46 <__aeabi_dmul+0x356>
 8001f24:	4915      	ldr	r1, [pc, #84]	; (8001f7c <__aeabi_dmul+0x38c>)
 8001f26:	2600      	movs	r6, #0
 8001f28:	468c      	mov	ip, r1
 8001f2a:	4463      	add	r3, ip
 8001f2c:	4649      	mov	r1, r9
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2302      	movs	r3, #2
 8001f32:	4319      	orrs	r1, r3
 8001f34:	4689      	mov	r9, r1
 8001f36:	2002      	movs	r0, #2
 8001f38:	e69d      	b.n	8001c76 <__aeabi_dmul+0x86>
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	9701      	str	r7, [sp, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d000      	beq.n	8001f44 <__aeabi_dmul+0x354>
 8001f42:	e6ad      	b.n	8001ca0 <__aeabi_dmul+0xb0>
 8001f44:	e6c3      	b.n	8001cce <__aeabi_dmul+0xde>
 8001f46:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <__aeabi_dmul+0x38c>)
 8001f48:	2003      	movs	r0, #3
 8001f4a:	4694      	mov	ip, r2
 8001f4c:	4463      	add	r3, ip
 8001f4e:	464a      	mov	r2, r9
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2303      	movs	r3, #3
 8001f54:	431a      	orrs	r2, r3
 8001f56:	4691      	mov	r9, r2
 8001f58:	4652      	mov	r2, sl
 8001f5a:	e68c      	b.n	8001c76 <__aeabi_dmul+0x86>
 8001f5c:	220c      	movs	r2, #12
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2303      	movs	r3, #3
 8001f62:	0005      	movs	r5, r0
 8001f64:	4691      	mov	r9, r2
 8001f66:	469b      	mov	fp, r3
 8001f68:	e666      	b.n	8001c38 <__aeabi_dmul+0x48>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	4699      	mov	r9, r3
 8001f6e:	2300      	movs	r3, #0
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	3301      	adds	r3, #1
 8001f74:	2400      	movs	r4, #0
 8001f76:	469b      	mov	fp, r3
 8001f78:	e65e      	b.n	8001c38 <__aeabi_dmul+0x48>
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	000007ff 	.word	0x000007ff
 8001f80:	fffffc01 	.word	0xfffffc01
 8001f84:	0800cf60 	.word	0x0800cf60
 8001f88:	000003ff 	.word	0x000003ff
 8001f8c:	feffffff 	.word	0xfeffffff
 8001f90:	000007fe 	.word	0x000007fe
 8001f94:	fffffc0d 	.word	0xfffffc0d
 8001f98:	4649      	mov	r1, r9
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	4319      	orrs	r1, r3
 8001f9e:	4689      	mov	r9, r1
 8001fa0:	2600      	movs	r6, #0
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	e667      	b.n	8001c76 <__aeabi_dmul+0x86>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2480      	movs	r4, #128	; 0x80
 8001faa:	2500      	movs	r5, #0
 8001fac:	4a43      	ldr	r2, [pc, #268]	; (80020bc <__aeabi_dmul+0x4cc>)
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	0324      	lsls	r4, r4, #12
 8001fb2:	e67e      	b.n	8001cb2 <__aeabi_dmul+0xc2>
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	1a40      	subs	r0, r0, r1
 8001fb8:	2838      	cmp	r0, #56	; 0x38
 8001fba:	dd00      	ble.n	8001fbe <__aeabi_dmul+0x3ce>
 8001fbc:	e676      	b.n	8001cac <__aeabi_dmul+0xbc>
 8001fbe:	281f      	cmp	r0, #31
 8001fc0:	dd5b      	ble.n	800207a <__aeabi_dmul+0x48a>
 8001fc2:	221f      	movs	r2, #31
 8001fc4:	0023      	movs	r3, r4
 8001fc6:	4252      	negs	r2, r2
 8001fc8:	1a51      	subs	r1, r2, r1
 8001fca:	40cb      	lsrs	r3, r1
 8001fcc:	0019      	movs	r1, r3
 8001fce:	2820      	cmp	r0, #32
 8001fd0:	d003      	beq.n	8001fda <__aeabi_dmul+0x3ea>
 8001fd2:	4a3b      	ldr	r2, [pc, #236]	; (80020c0 <__aeabi_dmul+0x4d0>)
 8001fd4:	4462      	add	r2, ip
 8001fd6:	4094      	lsls	r4, r2
 8001fd8:	4325      	orrs	r5, r4
 8001fda:	1e6a      	subs	r2, r5, #1
 8001fdc:	4195      	sbcs	r5, r2
 8001fde:	002a      	movs	r2, r5
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	2107      	movs	r1, #7
 8001fe4:	000d      	movs	r5, r1
 8001fe6:	2400      	movs	r4, #0
 8001fe8:	4015      	ands	r5, r2
 8001fea:	4211      	tst	r1, r2
 8001fec:	d05b      	beq.n	80020a6 <__aeabi_dmul+0x4b6>
 8001fee:	210f      	movs	r1, #15
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	4011      	ands	r1, r2
 8001ff4:	2904      	cmp	r1, #4
 8001ff6:	d053      	beq.n	80020a0 <__aeabi_dmul+0x4b0>
 8001ff8:	1d11      	adds	r1, r2, #4
 8001ffa:	4291      	cmp	r1, r2
 8001ffc:	4192      	sbcs	r2, r2
 8001ffe:	4252      	negs	r2, r2
 8002000:	18a4      	adds	r4, r4, r2
 8002002:	000a      	movs	r2, r1
 8002004:	0223      	lsls	r3, r4, #8
 8002006:	d54b      	bpl.n	80020a0 <__aeabi_dmul+0x4b0>
 8002008:	2201      	movs	r2, #1
 800200a:	2400      	movs	r4, #0
 800200c:	2500      	movs	r5, #0
 800200e:	e650      	b.n	8001cb2 <__aeabi_dmul+0xc2>
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	031b      	lsls	r3, r3, #12
 8002014:	421c      	tst	r4, r3
 8002016:	d009      	beq.n	800202c <__aeabi_dmul+0x43c>
 8002018:	421e      	tst	r6, r3
 800201a:	d107      	bne.n	800202c <__aeabi_dmul+0x43c>
 800201c:	4333      	orrs	r3, r6
 800201e:	031c      	lsls	r4, r3, #12
 8002020:	4643      	mov	r3, r8
 8002022:	0015      	movs	r5, r2
 8002024:	0b24      	lsrs	r4, r4, #12
 8002026:	4a25      	ldr	r2, [pc, #148]	; (80020bc <__aeabi_dmul+0x4cc>)
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	e642      	b.n	8001cb2 <__aeabi_dmul+0xc2>
 800202c:	2280      	movs	r2, #128	; 0x80
 800202e:	0312      	lsls	r2, r2, #12
 8002030:	4314      	orrs	r4, r2
 8002032:	0324      	lsls	r4, r4, #12
 8002034:	4a21      	ldr	r2, [pc, #132]	; (80020bc <__aeabi_dmul+0x4cc>)
 8002036:	0b24      	lsrs	r4, r4, #12
 8002038:	9701      	str	r7, [sp, #4]
 800203a:	e63a      	b.n	8001cb2 <__aeabi_dmul+0xc2>
 800203c:	f000 fd50 	bl	8002ae0 <__clzsi2>
 8002040:	0001      	movs	r1, r0
 8002042:	0002      	movs	r2, r0
 8002044:	3115      	adds	r1, #21
 8002046:	3220      	adds	r2, #32
 8002048:	291c      	cmp	r1, #28
 800204a:	dc00      	bgt.n	800204e <__aeabi_dmul+0x45e>
 800204c:	e74b      	b.n	8001ee6 <__aeabi_dmul+0x2f6>
 800204e:	0034      	movs	r4, r6
 8002050:	3808      	subs	r0, #8
 8002052:	2500      	movs	r5, #0
 8002054:	4084      	lsls	r4, r0
 8002056:	e750      	b.n	8001efa <__aeabi_dmul+0x30a>
 8002058:	f000 fd42 	bl	8002ae0 <__clzsi2>
 800205c:	0003      	movs	r3, r0
 800205e:	001a      	movs	r2, r3
 8002060:	3215      	adds	r2, #21
 8002062:	3020      	adds	r0, #32
 8002064:	2a1c      	cmp	r2, #28
 8002066:	dc00      	bgt.n	800206a <__aeabi_dmul+0x47a>
 8002068:	e71e      	b.n	8001ea8 <__aeabi_dmul+0x2b8>
 800206a:	4656      	mov	r6, sl
 800206c:	3b08      	subs	r3, #8
 800206e:	2200      	movs	r2, #0
 8002070:	409e      	lsls	r6, r3
 8002072:	e723      	b.n	8001ebc <__aeabi_dmul+0x2cc>
 8002074:	9b00      	ldr	r3, [sp, #0]
 8002076:	469c      	mov	ip, r3
 8002078:	e6e6      	b.n	8001e48 <__aeabi_dmul+0x258>
 800207a:	4912      	ldr	r1, [pc, #72]	; (80020c4 <__aeabi_dmul+0x4d4>)
 800207c:	0022      	movs	r2, r4
 800207e:	4461      	add	r1, ip
 8002080:	002e      	movs	r6, r5
 8002082:	408d      	lsls	r5, r1
 8002084:	408a      	lsls	r2, r1
 8002086:	40c6      	lsrs	r6, r0
 8002088:	1e69      	subs	r1, r5, #1
 800208a:	418d      	sbcs	r5, r1
 800208c:	4332      	orrs	r2, r6
 800208e:	432a      	orrs	r2, r5
 8002090:	40c4      	lsrs	r4, r0
 8002092:	0753      	lsls	r3, r2, #29
 8002094:	d0b6      	beq.n	8002004 <__aeabi_dmul+0x414>
 8002096:	210f      	movs	r1, #15
 8002098:	4011      	ands	r1, r2
 800209a:	2904      	cmp	r1, #4
 800209c:	d1ac      	bne.n	8001ff8 <__aeabi_dmul+0x408>
 800209e:	e7b1      	b.n	8002004 <__aeabi_dmul+0x414>
 80020a0:	0765      	lsls	r5, r4, #29
 80020a2:	0264      	lsls	r4, r4, #9
 80020a4:	0b24      	lsrs	r4, r4, #12
 80020a6:	08d2      	lsrs	r2, r2, #3
 80020a8:	4315      	orrs	r5, r2
 80020aa:	2200      	movs	r2, #0
 80020ac:	e601      	b.n	8001cb2 <__aeabi_dmul+0xc2>
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	0312      	lsls	r2, r2, #12
 80020b2:	4314      	orrs	r4, r2
 80020b4:	0324      	lsls	r4, r4, #12
 80020b6:	4a01      	ldr	r2, [pc, #4]	; (80020bc <__aeabi_dmul+0x4cc>)
 80020b8:	0b24      	lsrs	r4, r4, #12
 80020ba:	e5fa      	b.n	8001cb2 <__aeabi_dmul+0xc2>
 80020bc:	000007ff 	.word	0x000007ff
 80020c0:	0000043e 	.word	0x0000043e
 80020c4:	0000041e 	.word	0x0000041e

080020c8 <__aeabi_dsub>:
 80020c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ca:	4657      	mov	r7, sl
 80020cc:	464e      	mov	r6, r9
 80020ce:	4645      	mov	r5, r8
 80020d0:	46de      	mov	lr, fp
 80020d2:	b5e0      	push	{r5, r6, r7, lr}
 80020d4:	001e      	movs	r6, r3
 80020d6:	0017      	movs	r7, r2
 80020d8:	004a      	lsls	r2, r1, #1
 80020da:	030b      	lsls	r3, r1, #12
 80020dc:	0d52      	lsrs	r2, r2, #21
 80020de:	0a5b      	lsrs	r3, r3, #9
 80020e0:	4690      	mov	r8, r2
 80020e2:	0f42      	lsrs	r2, r0, #29
 80020e4:	431a      	orrs	r2, r3
 80020e6:	0fcd      	lsrs	r5, r1, #31
 80020e8:	4ccd      	ldr	r4, [pc, #820]	; (8002420 <__aeabi_dsub+0x358>)
 80020ea:	0331      	lsls	r1, r6, #12
 80020ec:	00c3      	lsls	r3, r0, #3
 80020ee:	4694      	mov	ip, r2
 80020f0:	0070      	lsls	r0, r6, #1
 80020f2:	0f7a      	lsrs	r2, r7, #29
 80020f4:	0a49      	lsrs	r1, r1, #9
 80020f6:	00ff      	lsls	r7, r7, #3
 80020f8:	469a      	mov	sl, r3
 80020fa:	46b9      	mov	r9, r7
 80020fc:	0d40      	lsrs	r0, r0, #21
 80020fe:	0ff6      	lsrs	r6, r6, #31
 8002100:	4311      	orrs	r1, r2
 8002102:	42a0      	cmp	r0, r4
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x40>
 8002106:	e0b1      	b.n	800226c <__aeabi_dsub+0x1a4>
 8002108:	2201      	movs	r2, #1
 800210a:	4056      	eors	r6, r2
 800210c:	46b3      	mov	fp, r6
 800210e:	42b5      	cmp	r5, r6
 8002110:	d100      	bne.n	8002114 <__aeabi_dsub+0x4c>
 8002112:	e088      	b.n	8002226 <__aeabi_dsub+0x15e>
 8002114:	4642      	mov	r2, r8
 8002116:	1a12      	subs	r2, r2, r0
 8002118:	2a00      	cmp	r2, #0
 800211a:	dc00      	bgt.n	800211e <__aeabi_dsub+0x56>
 800211c:	e0ae      	b.n	800227c <__aeabi_dsub+0x1b4>
 800211e:	2800      	cmp	r0, #0
 8002120:	d100      	bne.n	8002124 <__aeabi_dsub+0x5c>
 8002122:	e0c1      	b.n	80022a8 <__aeabi_dsub+0x1e0>
 8002124:	48be      	ldr	r0, [pc, #760]	; (8002420 <__aeabi_dsub+0x358>)
 8002126:	4580      	cmp	r8, r0
 8002128:	d100      	bne.n	800212c <__aeabi_dsub+0x64>
 800212a:	e151      	b.n	80023d0 <__aeabi_dsub+0x308>
 800212c:	2080      	movs	r0, #128	; 0x80
 800212e:	0400      	lsls	r0, r0, #16
 8002130:	4301      	orrs	r1, r0
 8002132:	2a38      	cmp	r2, #56	; 0x38
 8002134:	dd00      	ble.n	8002138 <__aeabi_dsub+0x70>
 8002136:	e17b      	b.n	8002430 <__aeabi_dsub+0x368>
 8002138:	2a1f      	cmp	r2, #31
 800213a:	dd00      	ble.n	800213e <__aeabi_dsub+0x76>
 800213c:	e1ee      	b.n	800251c <__aeabi_dsub+0x454>
 800213e:	2020      	movs	r0, #32
 8002140:	003e      	movs	r6, r7
 8002142:	1a80      	subs	r0, r0, r2
 8002144:	000c      	movs	r4, r1
 8002146:	40d6      	lsrs	r6, r2
 8002148:	40d1      	lsrs	r1, r2
 800214a:	4087      	lsls	r7, r0
 800214c:	4662      	mov	r2, ip
 800214e:	4084      	lsls	r4, r0
 8002150:	1a52      	subs	r2, r2, r1
 8002152:	1e78      	subs	r0, r7, #1
 8002154:	4187      	sbcs	r7, r0
 8002156:	4694      	mov	ip, r2
 8002158:	4334      	orrs	r4, r6
 800215a:	4327      	orrs	r7, r4
 800215c:	1bdc      	subs	r4, r3, r7
 800215e:	42a3      	cmp	r3, r4
 8002160:	419b      	sbcs	r3, r3
 8002162:	4662      	mov	r2, ip
 8002164:	425b      	negs	r3, r3
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	4699      	mov	r9, r3
 800216a:	464b      	mov	r3, r9
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	d400      	bmi.n	8002172 <__aeabi_dsub+0xaa>
 8002170:	e118      	b.n	80023a4 <__aeabi_dsub+0x2dc>
 8002172:	464b      	mov	r3, r9
 8002174:	0258      	lsls	r0, r3, #9
 8002176:	0a43      	lsrs	r3, r0, #9
 8002178:	4699      	mov	r9, r3
 800217a:	464b      	mov	r3, r9
 800217c:	2b00      	cmp	r3, #0
 800217e:	d100      	bne.n	8002182 <__aeabi_dsub+0xba>
 8002180:	e137      	b.n	80023f2 <__aeabi_dsub+0x32a>
 8002182:	4648      	mov	r0, r9
 8002184:	f000 fcac 	bl	8002ae0 <__clzsi2>
 8002188:	0001      	movs	r1, r0
 800218a:	3908      	subs	r1, #8
 800218c:	2320      	movs	r3, #32
 800218e:	0022      	movs	r2, r4
 8002190:	4648      	mov	r0, r9
 8002192:	1a5b      	subs	r3, r3, r1
 8002194:	40da      	lsrs	r2, r3
 8002196:	4088      	lsls	r0, r1
 8002198:	408c      	lsls	r4, r1
 800219a:	4643      	mov	r3, r8
 800219c:	4310      	orrs	r0, r2
 800219e:	4588      	cmp	r8, r1
 80021a0:	dd00      	ble.n	80021a4 <__aeabi_dsub+0xdc>
 80021a2:	e136      	b.n	8002412 <__aeabi_dsub+0x34a>
 80021a4:	1ac9      	subs	r1, r1, r3
 80021a6:	1c4b      	adds	r3, r1, #1
 80021a8:	2b1f      	cmp	r3, #31
 80021aa:	dd00      	ble.n	80021ae <__aeabi_dsub+0xe6>
 80021ac:	e0ea      	b.n	8002384 <__aeabi_dsub+0x2bc>
 80021ae:	2220      	movs	r2, #32
 80021b0:	0026      	movs	r6, r4
 80021b2:	1ad2      	subs	r2, r2, r3
 80021b4:	0001      	movs	r1, r0
 80021b6:	4094      	lsls	r4, r2
 80021b8:	40de      	lsrs	r6, r3
 80021ba:	40d8      	lsrs	r0, r3
 80021bc:	2300      	movs	r3, #0
 80021be:	4091      	lsls	r1, r2
 80021c0:	1e62      	subs	r2, r4, #1
 80021c2:	4194      	sbcs	r4, r2
 80021c4:	4681      	mov	r9, r0
 80021c6:	4698      	mov	r8, r3
 80021c8:	4331      	orrs	r1, r6
 80021ca:	430c      	orrs	r4, r1
 80021cc:	0763      	lsls	r3, r4, #29
 80021ce:	d009      	beq.n	80021e4 <__aeabi_dsub+0x11c>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4023      	ands	r3, r4
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d005      	beq.n	80021e4 <__aeabi_dsub+0x11c>
 80021d8:	1d23      	adds	r3, r4, #4
 80021da:	42a3      	cmp	r3, r4
 80021dc:	41a4      	sbcs	r4, r4
 80021de:	4264      	negs	r4, r4
 80021e0:	44a1      	add	r9, r4
 80021e2:	001c      	movs	r4, r3
 80021e4:	464b      	mov	r3, r9
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	d400      	bmi.n	80021ec <__aeabi_dsub+0x124>
 80021ea:	e0de      	b.n	80023aa <__aeabi_dsub+0x2e2>
 80021ec:	4641      	mov	r1, r8
 80021ee:	4b8c      	ldr	r3, [pc, #560]	; (8002420 <__aeabi_dsub+0x358>)
 80021f0:	3101      	adds	r1, #1
 80021f2:	4299      	cmp	r1, r3
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x130>
 80021f6:	e0e7      	b.n	80023c8 <__aeabi_dsub+0x300>
 80021f8:	464b      	mov	r3, r9
 80021fa:	488a      	ldr	r0, [pc, #552]	; (8002424 <__aeabi_dsub+0x35c>)
 80021fc:	08e4      	lsrs	r4, r4, #3
 80021fe:	4003      	ands	r3, r0
 8002200:	0018      	movs	r0, r3
 8002202:	0549      	lsls	r1, r1, #21
 8002204:	075b      	lsls	r3, r3, #29
 8002206:	0240      	lsls	r0, r0, #9
 8002208:	4323      	orrs	r3, r4
 800220a:	0d4a      	lsrs	r2, r1, #21
 800220c:	0b04      	lsrs	r4, r0, #12
 800220e:	0512      	lsls	r2, r2, #20
 8002210:	07ed      	lsls	r5, r5, #31
 8002212:	4322      	orrs	r2, r4
 8002214:	432a      	orrs	r2, r5
 8002216:	0018      	movs	r0, r3
 8002218:	0011      	movs	r1, r2
 800221a:	bcf0      	pop	{r4, r5, r6, r7}
 800221c:	46bb      	mov	fp, r7
 800221e:	46b2      	mov	sl, r6
 8002220:	46a9      	mov	r9, r5
 8002222:	46a0      	mov	r8, r4
 8002224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002226:	4642      	mov	r2, r8
 8002228:	1a12      	subs	r2, r2, r0
 800222a:	2a00      	cmp	r2, #0
 800222c:	dd52      	ble.n	80022d4 <__aeabi_dsub+0x20c>
 800222e:	2800      	cmp	r0, #0
 8002230:	d100      	bne.n	8002234 <__aeabi_dsub+0x16c>
 8002232:	e09c      	b.n	800236e <__aeabi_dsub+0x2a6>
 8002234:	45a0      	cmp	r8, r4
 8002236:	d100      	bne.n	800223a <__aeabi_dsub+0x172>
 8002238:	e0ca      	b.n	80023d0 <__aeabi_dsub+0x308>
 800223a:	2080      	movs	r0, #128	; 0x80
 800223c:	0400      	lsls	r0, r0, #16
 800223e:	4301      	orrs	r1, r0
 8002240:	2a38      	cmp	r2, #56	; 0x38
 8002242:	dd00      	ble.n	8002246 <__aeabi_dsub+0x17e>
 8002244:	e149      	b.n	80024da <__aeabi_dsub+0x412>
 8002246:	2a1f      	cmp	r2, #31
 8002248:	dc00      	bgt.n	800224c <__aeabi_dsub+0x184>
 800224a:	e197      	b.n	800257c <__aeabi_dsub+0x4b4>
 800224c:	0010      	movs	r0, r2
 800224e:	000e      	movs	r6, r1
 8002250:	3820      	subs	r0, #32
 8002252:	40c6      	lsrs	r6, r0
 8002254:	2a20      	cmp	r2, #32
 8002256:	d004      	beq.n	8002262 <__aeabi_dsub+0x19a>
 8002258:	2040      	movs	r0, #64	; 0x40
 800225a:	1a82      	subs	r2, r0, r2
 800225c:	4091      	lsls	r1, r2
 800225e:	430f      	orrs	r7, r1
 8002260:	46b9      	mov	r9, r7
 8002262:	464c      	mov	r4, r9
 8002264:	1e62      	subs	r2, r4, #1
 8002266:	4194      	sbcs	r4, r2
 8002268:	4334      	orrs	r4, r6
 800226a:	e13a      	b.n	80024e2 <__aeabi_dsub+0x41a>
 800226c:	000a      	movs	r2, r1
 800226e:	433a      	orrs	r2, r7
 8002270:	d028      	beq.n	80022c4 <__aeabi_dsub+0x1fc>
 8002272:	46b3      	mov	fp, r6
 8002274:	42b5      	cmp	r5, r6
 8002276:	d02b      	beq.n	80022d0 <__aeabi_dsub+0x208>
 8002278:	4a6b      	ldr	r2, [pc, #428]	; (8002428 <__aeabi_dsub+0x360>)
 800227a:	4442      	add	r2, r8
 800227c:	2a00      	cmp	r2, #0
 800227e:	d05d      	beq.n	800233c <__aeabi_dsub+0x274>
 8002280:	4642      	mov	r2, r8
 8002282:	4644      	mov	r4, r8
 8002284:	1a82      	subs	r2, r0, r2
 8002286:	2c00      	cmp	r4, #0
 8002288:	d000      	beq.n	800228c <__aeabi_dsub+0x1c4>
 800228a:	e0f5      	b.n	8002478 <__aeabi_dsub+0x3b0>
 800228c:	4665      	mov	r5, ip
 800228e:	431d      	orrs	r5, r3
 8002290:	d100      	bne.n	8002294 <__aeabi_dsub+0x1cc>
 8002292:	e19c      	b.n	80025ce <__aeabi_dsub+0x506>
 8002294:	1e55      	subs	r5, r2, #1
 8002296:	2a01      	cmp	r2, #1
 8002298:	d100      	bne.n	800229c <__aeabi_dsub+0x1d4>
 800229a:	e1fb      	b.n	8002694 <__aeabi_dsub+0x5cc>
 800229c:	4c60      	ldr	r4, [pc, #384]	; (8002420 <__aeabi_dsub+0x358>)
 800229e:	42a2      	cmp	r2, r4
 80022a0:	d100      	bne.n	80022a4 <__aeabi_dsub+0x1dc>
 80022a2:	e1bd      	b.n	8002620 <__aeabi_dsub+0x558>
 80022a4:	002a      	movs	r2, r5
 80022a6:	e0f0      	b.n	800248a <__aeabi_dsub+0x3c2>
 80022a8:	0008      	movs	r0, r1
 80022aa:	4338      	orrs	r0, r7
 80022ac:	d100      	bne.n	80022b0 <__aeabi_dsub+0x1e8>
 80022ae:	e0c3      	b.n	8002438 <__aeabi_dsub+0x370>
 80022b0:	1e50      	subs	r0, r2, #1
 80022b2:	2a01      	cmp	r2, #1
 80022b4:	d100      	bne.n	80022b8 <__aeabi_dsub+0x1f0>
 80022b6:	e1a8      	b.n	800260a <__aeabi_dsub+0x542>
 80022b8:	4c59      	ldr	r4, [pc, #356]	; (8002420 <__aeabi_dsub+0x358>)
 80022ba:	42a2      	cmp	r2, r4
 80022bc:	d100      	bne.n	80022c0 <__aeabi_dsub+0x1f8>
 80022be:	e087      	b.n	80023d0 <__aeabi_dsub+0x308>
 80022c0:	0002      	movs	r2, r0
 80022c2:	e736      	b.n	8002132 <__aeabi_dsub+0x6a>
 80022c4:	2201      	movs	r2, #1
 80022c6:	4056      	eors	r6, r2
 80022c8:	46b3      	mov	fp, r6
 80022ca:	42b5      	cmp	r5, r6
 80022cc:	d000      	beq.n	80022d0 <__aeabi_dsub+0x208>
 80022ce:	e721      	b.n	8002114 <__aeabi_dsub+0x4c>
 80022d0:	4a55      	ldr	r2, [pc, #340]	; (8002428 <__aeabi_dsub+0x360>)
 80022d2:	4442      	add	r2, r8
 80022d4:	2a00      	cmp	r2, #0
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x212>
 80022d8:	e0b5      	b.n	8002446 <__aeabi_dsub+0x37e>
 80022da:	4642      	mov	r2, r8
 80022dc:	4644      	mov	r4, r8
 80022de:	1a82      	subs	r2, r0, r2
 80022e0:	2c00      	cmp	r4, #0
 80022e2:	d100      	bne.n	80022e6 <__aeabi_dsub+0x21e>
 80022e4:	e138      	b.n	8002558 <__aeabi_dsub+0x490>
 80022e6:	4e4e      	ldr	r6, [pc, #312]	; (8002420 <__aeabi_dsub+0x358>)
 80022e8:	42b0      	cmp	r0, r6
 80022ea:	d100      	bne.n	80022ee <__aeabi_dsub+0x226>
 80022ec:	e1de      	b.n	80026ac <__aeabi_dsub+0x5e4>
 80022ee:	2680      	movs	r6, #128	; 0x80
 80022f0:	4664      	mov	r4, ip
 80022f2:	0436      	lsls	r6, r6, #16
 80022f4:	4334      	orrs	r4, r6
 80022f6:	46a4      	mov	ip, r4
 80022f8:	2a38      	cmp	r2, #56	; 0x38
 80022fa:	dd00      	ble.n	80022fe <__aeabi_dsub+0x236>
 80022fc:	e196      	b.n	800262c <__aeabi_dsub+0x564>
 80022fe:	2a1f      	cmp	r2, #31
 8002300:	dd00      	ble.n	8002304 <__aeabi_dsub+0x23c>
 8002302:	e224      	b.n	800274e <__aeabi_dsub+0x686>
 8002304:	2620      	movs	r6, #32
 8002306:	1ab4      	subs	r4, r6, r2
 8002308:	46a2      	mov	sl, r4
 800230a:	4664      	mov	r4, ip
 800230c:	4656      	mov	r6, sl
 800230e:	40b4      	lsls	r4, r6
 8002310:	46a1      	mov	r9, r4
 8002312:	001c      	movs	r4, r3
 8002314:	464e      	mov	r6, r9
 8002316:	40d4      	lsrs	r4, r2
 8002318:	4326      	orrs	r6, r4
 800231a:	0034      	movs	r4, r6
 800231c:	4656      	mov	r6, sl
 800231e:	40b3      	lsls	r3, r6
 8002320:	1e5e      	subs	r6, r3, #1
 8002322:	41b3      	sbcs	r3, r6
 8002324:	431c      	orrs	r4, r3
 8002326:	4663      	mov	r3, ip
 8002328:	40d3      	lsrs	r3, r2
 800232a:	18c9      	adds	r1, r1, r3
 800232c:	19e4      	adds	r4, r4, r7
 800232e:	42bc      	cmp	r4, r7
 8002330:	41bf      	sbcs	r7, r7
 8002332:	427f      	negs	r7, r7
 8002334:	46b9      	mov	r9, r7
 8002336:	4680      	mov	r8, r0
 8002338:	4489      	add	r9, r1
 800233a:	e0d8      	b.n	80024ee <__aeabi_dsub+0x426>
 800233c:	4640      	mov	r0, r8
 800233e:	4c3b      	ldr	r4, [pc, #236]	; (800242c <__aeabi_dsub+0x364>)
 8002340:	3001      	adds	r0, #1
 8002342:	4220      	tst	r0, r4
 8002344:	d000      	beq.n	8002348 <__aeabi_dsub+0x280>
 8002346:	e0b4      	b.n	80024b2 <__aeabi_dsub+0x3ea>
 8002348:	4640      	mov	r0, r8
 800234a:	2800      	cmp	r0, #0
 800234c:	d000      	beq.n	8002350 <__aeabi_dsub+0x288>
 800234e:	e144      	b.n	80025da <__aeabi_dsub+0x512>
 8002350:	4660      	mov	r0, ip
 8002352:	4318      	orrs	r0, r3
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x290>
 8002356:	e190      	b.n	800267a <__aeabi_dsub+0x5b2>
 8002358:	0008      	movs	r0, r1
 800235a:	4338      	orrs	r0, r7
 800235c:	d000      	beq.n	8002360 <__aeabi_dsub+0x298>
 800235e:	e1aa      	b.n	80026b6 <__aeabi_dsub+0x5ee>
 8002360:	4661      	mov	r1, ip
 8002362:	08db      	lsrs	r3, r3, #3
 8002364:	0749      	lsls	r1, r1, #29
 8002366:	430b      	orrs	r3, r1
 8002368:	4661      	mov	r1, ip
 800236a:	08cc      	lsrs	r4, r1, #3
 800236c:	e027      	b.n	80023be <__aeabi_dsub+0x2f6>
 800236e:	0008      	movs	r0, r1
 8002370:	4338      	orrs	r0, r7
 8002372:	d061      	beq.n	8002438 <__aeabi_dsub+0x370>
 8002374:	1e50      	subs	r0, r2, #1
 8002376:	2a01      	cmp	r2, #1
 8002378:	d100      	bne.n	800237c <__aeabi_dsub+0x2b4>
 800237a:	e139      	b.n	80025f0 <__aeabi_dsub+0x528>
 800237c:	42a2      	cmp	r2, r4
 800237e:	d027      	beq.n	80023d0 <__aeabi_dsub+0x308>
 8002380:	0002      	movs	r2, r0
 8002382:	e75d      	b.n	8002240 <__aeabi_dsub+0x178>
 8002384:	0002      	movs	r2, r0
 8002386:	391f      	subs	r1, #31
 8002388:	40ca      	lsrs	r2, r1
 800238a:	0011      	movs	r1, r2
 800238c:	2b20      	cmp	r3, #32
 800238e:	d003      	beq.n	8002398 <__aeabi_dsub+0x2d0>
 8002390:	2240      	movs	r2, #64	; 0x40
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	4098      	lsls	r0, r3
 8002396:	4304      	orrs	r4, r0
 8002398:	1e63      	subs	r3, r4, #1
 800239a:	419c      	sbcs	r4, r3
 800239c:	2300      	movs	r3, #0
 800239e:	4699      	mov	r9, r3
 80023a0:	4698      	mov	r8, r3
 80023a2:	430c      	orrs	r4, r1
 80023a4:	0763      	lsls	r3, r4, #29
 80023a6:	d000      	beq.n	80023aa <__aeabi_dsub+0x2e2>
 80023a8:	e712      	b.n	80021d0 <__aeabi_dsub+0x108>
 80023aa:	464b      	mov	r3, r9
 80023ac:	464a      	mov	r2, r9
 80023ae:	08e4      	lsrs	r4, r4, #3
 80023b0:	075b      	lsls	r3, r3, #29
 80023b2:	4323      	orrs	r3, r4
 80023b4:	08d4      	lsrs	r4, r2, #3
 80023b6:	4642      	mov	r2, r8
 80023b8:	4919      	ldr	r1, [pc, #100]	; (8002420 <__aeabi_dsub+0x358>)
 80023ba:	428a      	cmp	r2, r1
 80023bc:	d00e      	beq.n	80023dc <__aeabi_dsub+0x314>
 80023be:	0324      	lsls	r4, r4, #12
 80023c0:	0552      	lsls	r2, r2, #21
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	0d52      	lsrs	r2, r2, #21
 80023c6:	e722      	b.n	800220e <__aeabi_dsub+0x146>
 80023c8:	000a      	movs	r2, r1
 80023ca:	2400      	movs	r4, #0
 80023cc:	2300      	movs	r3, #0
 80023ce:	e71e      	b.n	800220e <__aeabi_dsub+0x146>
 80023d0:	08db      	lsrs	r3, r3, #3
 80023d2:	4662      	mov	r2, ip
 80023d4:	0752      	lsls	r2, r2, #29
 80023d6:	4313      	orrs	r3, r2
 80023d8:	4662      	mov	r2, ip
 80023da:	08d4      	lsrs	r4, r2, #3
 80023dc:	001a      	movs	r2, r3
 80023de:	4322      	orrs	r2, r4
 80023e0:	d100      	bne.n	80023e4 <__aeabi_dsub+0x31c>
 80023e2:	e1fc      	b.n	80027de <__aeabi_dsub+0x716>
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	0312      	lsls	r2, r2, #12
 80023e8:	4314      	orrs	r4, r2
 80023ea:	0324      	lsls	r4, r4, #12
 80023ec:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <__aeabi_dsub+0x358>)
 80023ee:	0b24      	lsrs	r4, r4, #12
 80023f0:	e70d      	b.n	800220e <__aeabi_dsub+0x146>
 80023f2:	0020      	movs	r0, r4
 80023f4:	f000 fb74 	bl	8002ae0 <__clzsi2>
 80023f8:	0001      	movs	r1, r0
 80023fa:	3118      	adds	r1, #24
 80023fc:	291f      	cmp	r1, #31
 80023fe:	dc00      	bgt.n	8002402 <__aeabi_dsub+0x33a>
 8002400:	e6c4      	b.n	800218c <__aeabi_dsub+0xc4>
 8002402:	3808      	subs	r0, #8
 8002404:	4084      	lsls	r4, r0
 8002406:	4643      	mov	r3, r8
 8002408:	0020      	movs	r0, r4
 800240a:	2400      	movs	r4, #0
 800240c:	4588      	cmp	r8, r1
 800240e:	dc00      	bgt.n	8002412 <__aeabi_dsub+0x34a>
 8002410:	e6c8      	b.n	80021a4 <__aeabi_dsub+0xdc>
 8002412:	4a04      	ldr	r2, [pc, #16]	; (8002424 <__aeabi_dsub+0x35c>)
 8002414:	1a5b      	subs	r3, r3, r1
 8002416:	4010      	ands	r0, r2
 8002418:	4698      	mov	r8, r3
 800241a:	4681      	mov	r9, r0
 800241c:	e6d6      	b.n	80021cc <__aeabi_dsub+0x104>
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	000007ff 	.word	0x000007ff
 8002424:	ff7fffff 	.word	0xff7fffff
 8002428:	fffff801 	.word	0xfffff801
 800242c:	000007fe 	.word	0x000007fe
 8002430:	430f      	orrs	r7, r1
 8002432:	1e7a      	subs	r2, r7, #1
 8002434:	4197      	sbcs	r7, r2
 8002436:	e691      	b.n	800215c <__aeabi_dsub+0x94>
 8002438:	4661      	mov	r1, ip
 800243a:	08db      	lsrs	r3, r3, #3
 800243c:	0749      	lsls	r1, r1, #29
 800243e:	430b      	orrs	r3, r1
 8002440:	4661      	mov	r1, ip
 8002442:	08cc      	lsrs	r4, r1, #3
 8002444:	e7b8      	b.n	80023b8 <__aeabi_dsub+0x2f0>
 8002446:	4640      	mov	r0, r8
 8002448:	4cd3      	ldr	r4, [pc, #844]	; (8002798 <__aeabi_dsub+0x6d0>)
 800244a:	3001      	adds	r0, #1
 800244c:	4220      	tst	r0, r4
 800244e:	d000      	beq.n	8002452 <__aeabi_dsub+0x38a>
 8002450:	e0a2      	b.n	8002598 <__aeabi_dsub+0x4d0>
 8002452:	4640      	mov	r0, r8
 8002454:	2800      	cmp	r0, #0
 8002456:	d000      	beq.n	800245a <__aeabi_dsub+0x392>
 8002458:	e101      	b.n	800265e <__aeabi_dsub+0x596>
 800245a:	4660      	mov	r0, ip
 800245c:	4318      	orrs	r0, r3
 800245e:	d100      	bne.n	8002462 <__aeabi_dsub+0x39a>
 8002460:	e15e      	b.n	8002720 <__aeabi_dsub+0x658>
 8002462:	0008      	movs	r0, r1
 8002464:	4338      	orrs	r0, r7
 8002466:	d000      	beq.n	800246a <__aeabi_dsub+0x3a2>
 8002468:	e15f      	b.n	800272a <__aeabi_dsub+0x662>
 800246a:	4661      	mov	r1, ip
 800246c:	08db      	lsrs	r3, r3, #3
 800246e:	0749      	lsls	r1, r1, #29
 8002470:	430b      	orrs	r3, r1
 8002472:	4661      	mov	r1, ip
 8002474:	08cc      	lsrs	r4, r1, #3
 8002476:	e7a2      	b.n	80023be <__aeabi_dsub+0x2f6>
 8002478:	4dc8      	ldr	r5, [pc, #800]	; (800279c <__aeabi_dsub+0x6d4>)
 800247a:	42a8      	cmp	r0, r5
 800247c:	d100      	bne.n	8002480 <__aeabi_dsub+0x3b8>
 800247e:	e0cf      	b.n	8002620 <__aeabi_dsub+0x558>
 8002480:	2580      	movs	r5, #128	; 0x80
 8002482:	4664      	mov	r4, ip
 8002484:	042d      	lsls	r5, r5, #16
 8002486:	432c      	orrs	r4, r5
 8002488:	46a4      	mov	ip, r4
 800248a:	2a38      	cmp	r2, #56	; 0x38
 800248c:	dc56      	bgt.n	800253c <__aeabi_dsub+0x474>
 800248e:	2a1f      	cmp	r2, #31
 8002490:	dd00      	ble.n	8002494 <__aeabi_dsub+0x3cc>
 8002492:	e0d1      	b.n	8002638 <__aeabi_dsub+0x570>
 8002494:	2520      	movs	r5, #32
 8002496:	001e      	movs	r6, r3
 8002498:	1aad      	subs	r5, r5, r2
 800249a:	4664      	mov	r4, ip
 800249c:	40ab      	lsls	r3, r5
 800249e:	40ac      	lsls	r4, r5
 80024a0:	40d6      	lsrs	r6, r2
 80024a2:	1e5d      	subs	r5, r3, #1
 80024a4:	41ab      	sbcs	r3, r5
 80024a6:	4334      	orrs	r4, r6
 80024a8:	4323      	orrs	r3, r4
 80024aa:	4664      	mov	r4, ip
 80024ac:	40d4      	lsrs	r4, r2
 80024ae:	1b09      	subs	r1, r1, r4
 80024b0:	e049      	b.n	8002546 <__aeabi_dsub+0x47e>
 80024b2:	4660      	mov	r0, ip
 80024b4:	1bdc      	subs	r4, r3, r7
 80024b6:	1a46      	subs	r6, r0, r1
 80024b8:	42a3      	cmp	r3, r4
 80024ba:	4180      	sbcs	r0, r0
 80024bc:	4240      	negs	r0, r0
 80024be:	4681      	mov	r9, r0
 80024c0:	0030      	movs	r0, r6
 80024c2:	464e      	mov	r6, r9
 80024c4:	1b80      	subs	r0, r0, r6
 80024c6:	4681      	mov	r9, r0
 80024c8:	0200      	lsls	r0, r0, #8
 80024ca:	d476      	bmi.n	80025ba <__aeabi_dsub+0x4f2>
 80024cc:	464b      	mov	r3, r9
 80024ce:	4323      	orrs	r3, r4
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x40c>
 80024d2:	e652      	b.n	800217a <__aeabi_dsub+0xb2>
 80024d4:	2400      	movs	r4, #0
 80024d6:	2500      	movs	r5, #0
 80024d8:	e771      	b.n	80023be <__aeabi_dsub+0x2f6>
 80024da:	4339      	orrs	r1, r7
 80024dc:	000c      	movs	r4, r1
 80024de:	1e62      	subs	r2, r4, #1
 80024e0:	4194      	sbcs	r4, r2
 80024e2:	18e4      	adds	r4, r4, r3
 80024e4:	429c      	cmp	r4, r3
 80024e6:	419b      	sbcs	r3, r3
 80024e8:	425b      	negs	r3, r3
 80024ea:	4463      	add	r3, ip
 80024ec:	4699      	mov	r9, r3
 80024ee:	464b      	mov	r3, r9
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	d400      	bmi.n	80024f6 <__aeabi_dsub+0x42e>
 80024f4:	e756      	b.n	80023a4 <__aeabi_dsub+0x2dc>
 80024f6:	2301      	movs	r3, #1
 80024f8:	469c      	mov	ip, r3
 80024fa:	4ba8      	ldr	r3, [pc, #672]	; (800279c <__aeabi_dsub+0x6d4>)
 80024fc:	44e0      	add	r8, ip
 80024fe:	4598      	cmp	r8, r3
 8002500:	d038      	beq.n	8002574 <__aeabi_dsub+0x4ac>
 8002502:	464b      	mov	r3, r9
 8002504:	48a6      	ldr	r0, [pc, #664]	; (80027a0 <__aeabi_dsub+0x6d8>)
 8002506:	2201      	movs	r2, #1
 8002508:	4003      	ands	r3, r0
 800250a:	0018      	movs	r0, r3
 800250c:	0863      	lsrs	r3, r4, #1
 800250e:	4014      	ands	r4, r2
 8002510:	431c      	orrs	r4, r3
 8002512:	07c3      	lsls	r3, r0, #31
 8002514:	431c      	orrs	r4, r3
 8002516:	0843      	lsrs	r3, r0, #1
 8002518:	4699      	mov	r9, r3
 800251a:	e657      	b.n	80021cc <__aeabi_dsub+0x104>
 800251c:	0010      	movs	r0, r2
 800251e:	000e      	movs	r6, r1
 8002520:	3820      	subs	r0, #32
 8002522:	40c6      	lsrs	r6, r0
 8002524:	2a20      	cmp	r2, #32
 8002526:	d004      	beq.n	8002532 <__aeabi_dsub+0x46a>
 8002528:	2040      	movs	r0, #64	; 0x40
 800252a:	1a82      	subs	r2, r0, r2
 800252c:	4091      	lsls	r1, r2
 800252e:	430f      	orrs	r7, r1
 8002530:	46b9      	mov	r9, r7
 8002532:	464f      	mov	r7, r9
 8002534:	1e7a      	subs	r2, r7, #1
 8002536:	4197      	sbcs	r7, r2
 8002538:	4337      	orrs	r7, r6
 800253a:	e60f      	b.n	800215c <__aeabi_dsub+0x94>
 800253c:	4662      	mov	r2, ip
 800253e:	431a      	orrs	r2, r3
 8002540:	0013      	movs	r3, r2
 8002542:	1e5a      	subs	r2, r3, #1
 8002544:	4193      	sbcs	r3, r2
 8002546:	1afc      	subs	r4, r7, r3
 8002548:	42a7      	cmp	r7, r4
 800254a:	41bf      	sbcs	r7, r7
 800254c:	427f      	negs	r7, r7
 800254e:	1bcb      	subs	r3, r1, r7
 8002550:	4699      	mov	r9, r3
 8002552:	465d      	mov	r5, fp
 8002554:	4680      	mov	r8, r0
 8002556:	e608      	b.n	800216a <__aeabi_dsub+0xa2>
 8002558:	4666      	mov	r6, ip
 800255a:	431e      	orrs	r6, r3
 800255c:	d100      	bne.n	8002560 <__aeabi_dsub+0x498>
 800255e:	e0be      	b.n	80026de <__aeabi_dsub+0x616>
 8002560:	1e56      	subs	r6, r2, #1
 8002562:	2a01      	cmp	r2, #1
 8002564:	d100      	bne.n	8002568 <__aeabi_dsub+0x4a0>
 8002566:	e109      	b.n	800277c <__aeabi_dsub+0x6b4>
 8002568:	4c8c      	ldr	r4, [pc, #560]	; (800279c <__aeabi_dsub+0x6d4>)
 800256a:	42a2      	cmp	r2, r4
 800256c:	d100      	bne.n	8002570 <__aeabi_dsub+0x4a8>
 800256e:	e119      	b.n	80027a4 <__aeabi_dsub+0x6dc>
 8002570:	0032      	movs	r2, r6
 8002572:	e6c1      	b.n	80022f8 <__aeabi_dsub+0x230>
 8002574:	4642      	mov	r2, r8
 8002576:	2400      	movs	r4, #0
 8002578:	2300      	movs	r3, #0
 800257a:	e648      	b.n	800220e <__aeabi_dsub+0x146>
 800257c:	2020      	movs	r0, #32
 800257e:	000c      	movs	r4, r1
 8002580:	1a80      	subs	r0, r0, r2
 8002582:	003e      	movs	r6, r7
 8002584:	4087      	lsls	r7, r0
 8002586:	4084      	lsls	r4, r0
 8002588:	40d6      	lsrs	r6, r2
 800258a:	1e78      	subs	r0, r7, #1
 800258c:	4187      	sbcs	r7, r0
 800258e:	40d1      	lsrs	r1, r2
 8002590:	4334      	orrs	r4, r6
 8002592:	433c      	orrs	r4, r7
 8002594:	448c      	add	ip, r1
 8002596:	e7a4      	b.n	80024e2 <__aeabi_dsub+0x41a>
 8002598:	4a80      	ldr	r2, [pc, #512]	; (800279c <__aeabi_dsub+0x6d4>)
 800259a:	4290      	cmp	r0, r2
 800259c:	d100      	bne.n	80025a0 <__aeabi_dsub+0x4d8>
 800259e:	e0e9      	b.n	8002774 <__aeabi_dsub+0x6ac>
 80025a0:	19df      	adds	r7, r3, r7
 80025a2:	429f      	cmp	r7, r3
 80025a4:	419b      	sbcs	r3, r3
 80025a6:	4461      	add	r1, ip
 80025a8:	425b      	negs	r3, r3
 80025aa:	18c9      	adds	r1, r1, r3
 80025ac:	07cc      	lsls	r4, r1, #31
 80025ae:	087f      	lsrs	r7, r7, #1
 80025b0:	084b      	lsrs	r3, r1, #1
 80025b2:	4699      	mov	r9, r3
 80025b4:	4680      	mov	r8, r0
 80025b6:	433c      	orrs	r4, r7
 80025b8:	e6f4      	b.n	80023a4 <__aeabi_dsub+0x2dc>
 80025ba:	1afc      	subs	r4, r7, r3
 80025bc:	42a7      	cmp	r7, r4
 80025be:	41bf      	sbcs	r7, r7
 80025c0:	4663      	mov	r3, ip
 80025c2:	427f      	negs	r7, r7
 80025c4:	1ac9      	subs	r1, r1, r3
 80025c6:	1bcb      	subs	r3, r1, r7
 80025c8:	4699      	mov	r9, r3
 80025ca:	465d      	mov	r5, fp
 80025cc:	e5d5      	b.n	800217a <__aeabi_dsub+0xb2>
 80025ce:	08ff      	lsrs	r7, r7, #3
 80025d0:	074b      	lsls	r3, r1, #29
 80025d2:	465d      	mov	r5, fp
 80025d4:	433b      	orrs	r3, r7
 80025d6:	08cc      	lsrs	r4, r1, #3
 80025d8:	e6ee      	b.n	80023b8 <__aeabi_dsub+0x2f0>
 80025da:	4662      	mov	r2, ip
 80025dc:	431a      	orrs	r2, r3
 80025de:	d000      	beq.n	80025e2 <__aeabi_dsub+0x51a>
 80025e0:	e082      	b.n	80026e8 <__aeabi_dsub+0x620>
 80025e2:	000b      	movs	r3, r1
 80025e4:	433b      	orrs	r3, r7
 80025e6:	d11b      	bne.n	8002620 <__aeabi_dsub+0x558>
 80025e8:	2480      	movs	r4, #128	; 0x80
 80025ea:	2500      	movs	r5, #0
 80025ec:	0324      	lsls	r4, r4, #12
 80025ee:	e6f9      	b.n	80023e4 <__aeabi_dsub+0x31c>
 80025f0:	19dc      	adds	r4, r3, r7
 80025f2:	429c      	cmp	r4, r3
 80025f4:	419b      	sbcs	r3, r3
 80025f6:	4461      	add	r1, ip
 80025f8:	4689      	mov	r9, r1
 80025fa:	425b      	negs	r3, r3
 80025fc:	4499      	add	r9, r3
 80025fe:	464b      	mov	r3, r9
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	d444      	bmi.n	800268e <__aeabi_dsub+0x5c6>
 8002604:	2301      	movs	r3, #1
 8002606:	4698      	mov	r8, r3
 8002608:	e6cc      	b.n	80023a4 <__aeabi_dsub+0x2dc>
 800260a:	1bdc      	subs	r4, r3, r7
 800260c:	4662      	mov	r2, ip
 800260e:	42a3      	cmp	r3, r4
 8002610:	419b      	sbcs	r3, r3
 8002612:	1a51      	subs	r1, r2, r1
 8002614:	425b      	negs	r3, r3
 8002616:	1acb      	subs	r3, r1, r3
 8002618:	4699      	mov	r9, r3
 800261a:	2301      	movs	r3, #1
 800261c:	4698      	mov	r8, r3
 800261e:	e5a4      	b.n	800216a <__aeabi_dsub+0xa2>
 8002620:	08ff      	lsrs	r7, r7, #3
 8002622:	074b      	lsls	r3, r1, #29
 8002624:	465d      	mov	r5, fp
 8002626:	433b      	orrs	r3, r7
 8002628:	08cc      	lsrs	r4, r1, #3
 800262a:	e6d7      	b.n	80023dc <__aeabi_dsub+0x314>
 800262c:	4662      	mov	r2, ip
 800262e:	431a      	orrs	r2, r3
 8002630:	0014      	movs	r4, r2
 8002632:	1e63      	subs	r3, r4, #1
 8002634:	419c      	sbcs	r4, r3
 8002636:	e679      	b.n	800232c <__aeabi_dsub+0x264>
 8002638:	0015      	movs	r5, r2
 800263a:	4664      	mov	r4, ip
 800263c:	3d20      	subs	r5, #32
 800263e:	40ec      	lsrs	r4, r5
 8002640:	46a0      	mov	r8, r4
 8002642:	2a20      	cmp	r2, #32
 8002644:	d005      	beq.n	8002652 <__aeabi_dsub+0x58a>
 8002646:	2540      	movs	r5, #64	; 0x40
 8002648:	4664      	mov	r4, ip
 800264a:	1aaa      	subs	r2, r5, r2
 800264c:	4094      	lsls	r4, r2
 800264e:	4323      	orrs	r3, r4
 8002650:	469a      	mov	sl, r3
 8002652:	4654      	mov	r4, sl
 8002654:	1e63      	subs	r3, r4, #1
 8002656:	419c      	sbcs	r4, r3
 8002658:	4643      	mov	r3, r8
 800265a:	4323      	orrs	r3, r4
 800265c:	e773      	b.n	8002546 <__aeabi_dsub+0x47e>
 800265e:	4662      	mov	r2, ip
 8002660:	431a      	orrs	r2, r3
 8002662:	d023      	beq.n	80026ac <__aeabi_dsub+0x5e4>
 8002664:	000a      	movs	r2, r1
 8002666:	433a      	orrs	r2, r7
 8002668:	d000      	beq.n	800266c <__aeabi_dsub+0x5a4>
 800266a:	e0a0      	b.n	80027ae <__aeabi_dsub+0x6e6>
 800266c:	4662      	mov	r2, ip
 800266e:	08db      	lsrs	r3, r3, #3
 8002670:	0752      	lsls	r2, r2, #29
 8002672:	4313      	orrs	r3, r2
 8002674:	4662      	mov	r2, ip
 8002676:	08d4      	lsrs	r4, r2, #3
 8002678:	e6b0      	b.n	80023dc <__aeabi_dsub+0x314>
 800267a:	000b      	movs	r3, r1
 800267c:	433b      	orrs	r3, r7
 800267e:	d100      	bne.n	8002682 <__aeabi_dsub+0x5ba>
 8002680:	e728      	b.n	80024d4 <__aeabi_dsub+0x40c>
 8002682:	08ff      	lsrs	r7, r7, #3
 8002684:	074b      	lsls	r3, r1, #29
 8002686:	465d      	mov	r5, fp
 8002688:	433b      	orrs	r3, r7
 800268a:	08cc      	lsrs	r4, r1, #3
 800268c:	e697      	b.n	80023be <__aeabi_dsub+0x2f6>
 800268e:	2302      	movs	r3, #2
 8002690:	4698      	mov	r8, r3
 8002692:	e736      	b.n	8002502 <__aeabi_dsub+0x43a>
 8002694:	1afc      	subs	r4, r7, r3
 8002696:	42a7      	cmp	r7, r4
 8002698:	41bf      	sbcs	r7, r7
 800269a:	4663      	mov	r3, ip
 800269c:	427f      	negs	r7, r7
 800269e:	1ac9      	subs	r1, r1, r3
 80026a0:	1bcb      	subs	r3, r1, r7
 80026a2:	4699      	mov	r9, r3
 80026a4:	2301      	movs	r3, #1
 80026a6:	465d      	mov	r5, fp
 80026a8:	4698      	mov	r8, r3
 80026aa:	e55e      	b.n	800216a <__aeabi_dsub+0xa2>
 80026ac:	074b      	lsls	r3, r1, #29
 80026ae:	08ff      	lsrs	r7, r7, #3
 80026b0:	433b      	orrs	r3, r7
 80026b2:	08cc      	lsrs	r4, r1, #3
 80026b4:	e692      	b.n	80023dc <__aeabi_dsub+0x314>
 80026b6:	1bdc      	subs	r4, r3, r7
 80026b8:	4660      	mov	r0, ip
 80026ba:	42a3      	cmp	r3, r4
 80026bc:	41b6      	sbcs	r6, r6
 80026be:	1a40      	subs	r0, r0, r1
 80026c0:	4276      	negs	r6, r6
 80026c2:	1b80      	subs	r0, r0, r6
 80026c4:	4681      	mov	r9, r0
 80026c6:	0200      	lsls	r0, r0, #8
 80026c8:	d560      	bpl.n	800278c <__aeabi_dsub+0x6c4>
 80026ca:	1afc      	subs	r4, r7, r3
 80026cc:	42a7      	cmp	r7, r4
 80026ce:	41bf      	sbcs	r7, r7
 80026d0:	4663      	mov	r3, ip
 80026d2:	427f      	negs	r7, r7
 80026d4:	1ac9      	subs	r1, r1, r3
 80026d6:	1bcb      	subs	r3, r1, r7
 80026d8:	4699      	mov	r9, r3
 80026da:	465d      	mov	r5, fp
 80026dc:	e576      	b.n	80021cc <__aeabi_dsub+0x104>
 80026de:	08ff      	lsrs	r7, r7, #3
 80026e0:	074b      	lsls	r3, r1, #29
 80026e2:	433b      	orrs	r3, r7
 80026e4:	08cc      	lsrs	r4, r1, #3
 80026e6:	e667      	b.n	80023b8 <__aeabi_dsub+0x2f0>
 80026e8:	000a      	movs	r2, r1
 80026ea:	08db      	lsrs	r3, r3, #3
 80026ec:	433a      	orrs	r2, r7
 80026ee:	d100      	bne.n	80026f2 <__aeabi_dsub+0x62a>
 80026f0:	e66f      	b.n	80023d2 <__aeabi_dsub+0x30a>
 80026f2:	4662      	mov	r2, ip
 80026f4:	0752      	lsls	r2, r2, #29
 80026f6:	4313      	orrs	r3, r2
 80026f8:	4662      	mov	r2, ip
 80026fa:	08d4      	lsrs	r4, r2, #3
 80026fc:	2280      	movs	r2, #128	; 0x80
 80026fe:	0312      	lsls	r2, r2, #12
 8002700:	4214      	tst	r4, r2
 8002702:	d007      	beq.n	8002714 <__aeabi_dsub+0x64c>
 8002704:	08c8      	lsrs	r0, r1, #3
 8002706:	4210      	tst	r0, r2
 8002708:	d104      	bne.n	8002714 <__aeabi_dsub+0x64c>
 800270a:	465d      	mov	r5, fp
 800270c:	0004      	movs	r4, r0
 800270e:	08fb      	lsrs	r3, r7, #3
 8002710:	0749      	lsls	r1, r1, #29
 8002712:	430b      	orrs	r3, r1
 8002714:	0f5a      	lsrs	r2, r3, #29
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	08db      	lsrs	r3, r3, #3
 800271a:	0752      	lsls	r2, r2, #29
 800271c:	4313      	orrs	r3, r2
 800271e:	e65d      	b.n	80023dc <__aeabi_dsub+0x314>
 8002720:	074b      	lsls	r3, r1, #29
 8002722:	08ff      	lsrs	r7, r7, #3
 8002724:	433b      	orrs	r3, r7
 8002726:	08cc      	lsrs	r4, r1, #3
 8002728:	e649      	b.n	80023be <__aeabi_dsub+0x2f6>
 800272a:	19dc      	adds	r4, r3, r7
 800272c:	429c      	cmp	r4, r3
 800272e:	419b      	sbcs	r3, r3
 8002730:	4461      	add	r1, ip
 8002732:	4689      	mov	r9, r1
 8002734:	425b      	negs	r3, r3
 8002736:	4499      	add	r9, r3
 8002738:	464b      	mov	r3, r9
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	d400      	bmi.n	8002740 <__aeabi_dsub+0x678>
 800273e:	e631      	b.n	80023a4 <__aeabi_dsub+0x2dc>
 8002740:	464a      	mov	r2, r9
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <__aeabi_dsub+0x6d8>)
 8002744:	401a      	ands	r2, r3
 8002746:	2301      	movs	r3, #1
 8002748:	4691      	mov	r9, r2
 800274a:	4698      	mov	r8, r3
 800274c:	e62a      	b.n	80023a4 <__aeabi_dsub+0x2dc>
 800274e:	0016      	movs	r6, r2
 8002750:	4664      	mov	r4, ip
 8002752:	3e20      	subs	r6, #32
 8002754:	40f4      	lsrs	r4, r6
 8002756:	46a0      	mov	r8, r4
 8002758:	2a20      	cmp	r2, #32
 800275a:	d005      	beq.n	8002768 <__aeabi_dsub+0x6a0>
 800275c:	2640      	movs	r6, #64	; 0x40
 800275e:	4664      	mov	r4, ip
 8002760:	1ab2      	subs	r2, r6, r2
 8002762:	4094      	lsls	r4, r2
 8002764:	4323      	orrs	r3, r4
 8002766:	469a      	mov	sl, r3
 8002768:	4654      	mov	r4, sl
 800276a:	1e63      	subs	r3, r4, #1
 800276c:	419c      	sbcs	r4, r3
 800276e:	4643      	mov	r3, r8
 8002770:	431c      	orrs	r4, r3
 8002772:	e5db      	b.n	800232c <__aeabi_dsub+0x264>
 8002774:	0002      	movs	r2, r0
 8002776:	2400      	movs	r4, #0
 8002778:	2300      	movs	r3, #0
 800277a:	e548      	b.n	800220e <__aeabi_dsub+0x146>
 800277c:	19dc      	adds	r4, r3, r7
 800277e:	42bc      	cmp	r4, r7
 8002780:	41bf      	sbcs	r7, r7
 8002782:	4461      	add	r1, ip
 8002784:	4689      	mov	r9, r1
 8002786:	427f      	negs	r7, r7
 8002788:	44b9      	add	r9, r7
 800278a:	e738      	b.n	80025fe <__aeabi_dsub+0x536>
 800278c:	464b      	mov	r3, r9
 800278e:	4323      	orrs	r3, r4
 8002790:	d100      	bne.n	8002794 <__aeabi_dsub+0x6cc>
 8002792:	e69f      	b.n	80024d4 <__aeabi_dsub+0x40c>
 8002794:	e606      	b.n	80023a4 <__aeabi_dsub+0x2dc>
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	000007fe 	.word	0x000007fe
 800279c:	000007ff 	.word	0x000007ff
 80027a0:	ff7fffff 	.word	0xff7fffff
 80027a4:	08ff      	lsrs	r7, r7, #3
 80027a6:	074b      	lsls	r3, r1, #29
 80027a8:	433b      	orrs	r3, r7
 80027aa:	08cc      	lsrs	r4, r1, #3
 80027ac:	e616      	b.n	80023dc <__aeabi_dsub+0x314>
 80027ae:	4662      	mov	r2, ip
 80027b0:	08db      	lsrs	r3, r3, #3
 80027b2:	0752      	lsls	r2, r2, #29
 80027b4:	4313      	orrs	r3, r2
 80027b6:	4662      	mov	r2, ip
 80027b8:	08d4      	lsrs	r4, r2, #3
 80027ba:	2280      	movs	r2, #128	; 0x80
 80027bc:	0312      	lsls	r2, r2, #12
 80027be:	4214      	tst	r4, r2
 80027c0:	d007      	beq.n	80027d2 <__aeabi_dsub+0x70a>
 80027c2:	08c8      	lsrs	r0, r1, #3
 80027c4:	4210      	tst	r0, r2
 80027c6:	d104      	bne.n	80027d2 <__aeabi_dsub+0x70a>
 80027c8:	465d      	mov	r5, fp
 80027ca:	0004      	movs	r4, r0
 80027cc:	08fb      	lsrs	r3, r7, #3
 80027ce:	0749      	lsls	r1, r1, #29
 80027d0:	430b      	orrs	r3, r1
 80027d2:	0f5a      	lsrs	r2, r3, #29
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	0752      	lsls	r2, r2, #29
 80027d8:	08db      	lsrs	r3, r3, #3
 80027da:	4313      	orrs	r3, r2
 80027dc:	e5fe      	b.n	80023dc <__aeabi_dsub+0x314>
 80027de:	2300      	movs	r3, #0
 80027e0:	4a01      	ldr	r2, [pc, #4]	; (80027e8 <__aeabi_dsub+0x720>)
 80027e2:	001c      	movs	r4, r3
 80027e4:	e513      	b.n	800220e <__aeabi_dsub+0x146>
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	000007ff 	.word	0x000007ff

080027ec <__aeabi_dcmpun>:
 80027ec:	b570      	push	{r4, r5, r6, lr}
 80027ee:	0005      	movs	r5, r0
 80027f0:	480c      	ldr	r0, [pc, #48]	; (8002824 <__aeabi_dcmpun+0x38>)
 80027f2:	031c      	lsls	r4, r3, #12
 80027f4:	0016      	movs	r6, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	030a      	lsls	r2, r1, #12
 80027fa:	0049      	lsls	r1, r1, #1
 80027fc:	0b12      	lsrs	r2, r2, #12
 80027fe:	0d49      	lsrs	r1, r1, #21
 8002800:	0b24      	lsrs	r4, r4, #12
 8002802:	0d5b      	lsrs	r3, r3, #21
 8002804:	4281      	cmp	r1, r0
 8002806:	d008      	beq.n	800281a <__aeabi_dcmpun+0x2e>
 8002808:	4a06      	ldr	r2, [pc, #24]	; (8002824 <__aeabi_dcmpun+0x38>)
 800280a:	2000      	movs	r0, #0
 800280c:	4293      	cmp	r3, r2
 800280e:	d103      	bne.n	8002818 <__aeabi_dcmpun+0x2c>
 8002810:	0020      	movs	r0, r4
 8002812:	4330      	orrs	r0, r6
 8002814:	1e43      	subs	r3, r0, #1
 8002816:	4198      	sbcs	r0, r3
 8002818:	bd70      	pop	{r4, r5, r6, pc}
 800281a:	2001      	movs	r0, #1
 800281c:	432a      	orrs	r2, r5
 800281e:	d1fb      	bne.n	8002818 <__aeabi_dcmpun+0x2c>
 8002820:	e7f2      	b.n	8002808 <__aeabi_dcmpun+0x1c>
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	000007ff 	.word	0x000007ff

08002828 <__aeabi_d2iz>:
 8002828:	000a      	movs	r2, r1
 800282a:	b530      	push	{r4, r5, lr}
 800282c:	4c13      	ldr	r4, [pc, #76]	; (800287c <__aeabi_d2iz+0x54>)
 800282e:	0053      	lsls	r3, r2, #1
 8002830:	0309      	lsls	r1, r1, #12
 8002832:	0005      	movs	r5, r0
 8002834:	0b09      	lsrs	r1, r1, #12
 8002836:	2000      	movs	r0, #0
 8002838:	0d5b      	lsrs	r3, r3, #21
 800283a:	0fd2      	lsrs	r2, r2, #31
 800283c:	42a3      	cmp	r3, r4
 800283e:	dd04      	ble.n	800284a <__aeabi_d2iz+0x22>
 8002840:	480f      	ldr	r0, [pc, #60]	; (8002880 <__aeabi_d2iz+0x58>)
 8002842:	4283      	cmp	r3, r0
 8002844:	dd02      	ble.n	800284c <__aeabi_d2iz+0x24>
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <__aeabi_d2iz+0x5c>)
 8002848:	18d0      	adds	r0, r2, r3
 800284a:	bd30      	pop	{r4, r5, pc}
 800284c:	2080      	movs	r0, #128	; 0x80
 800284e:	0340      	lsls	r0, r0, #13
 8002850:	4301      	orrs	r1, r0
 8002852:	480d      	ldr	r0, [pc, #52]	; (8002888 <__aeabi_d2iz+0x60>)
 8002854:	1ac0      	subs	r0, r0, r3
 8002856:	281f      	cmp	r0, #31
 8002858:	dd08      	ble.n	800286c <__aeabi_d2iz+0x44>
 800285a:	480c      	ldr	r0, [pc, #48]	; (800288c <__aeabi_d2iz+0x64>)
 800285c:	1ac3      	subs	r3, r0, r3
 800285e:	40d9      	lsrs	r1, r3
 8002860:	000b      	movs	r3, r1
 8002862:	4258      	negs	r0, r3
 8002864:	2a00      	cmp	r2, #0
 8002866:	d1f0      	bne.n	800284a <__aeabi_d2iz+0x22>
 8002868:	0018      	movs	r0, r3
 800286a:	e7ee      	b.n	800284a <__aeabi_d2iz+0x22>
 800286c:	4c08      	ldr	r4, [pc, #32]	; (8002890 <__aeabi_d2iz+0x68>)
 800286e:	40c5      	lsrs	r5, r0
 8002870:	46a4      	mov	ip, r4
 8002872:	4463      	add	r3, ip
 8002874:	4099      	lsls	r1, r3
 8002876:	000b      	movs	r3, r1
 8002878:	432b      	orrs	r3, r5
 800287a:	e7f2      	b.n	8002862 <__aeabi_d2iz+0x3a>
 800287c:	000003fe 	.word	0x000003fe
 8002880:	0000041d 	.word	0x0000041d
 8002884:	7fffffff 	.word	0x7fffffff
 8002888:	00000433 	.word	0x00000433
 800288c:	00000413 	.word	0x00000413
 8002890:	fffffbed 	.word	0xfffffbed

08002894 <__aeabi_i2d>:
 8002894:	b570      	push	{r4, r5, r6, lr}
 8002896:	2800      	cmp	r0, #0
 8002898:	d016      	beq.n	80028c8 <__aeabi_i2d+0x34>
 800289a:	17c3      	asrs	r3, r0, #31
 800289c:	18c5      	adds	r5, r0, r3
 800289e:	405d      	eors	r5, r3
 80028a0:	0fc4      	lsrs	r4, r0, #31
 80028a2:	0028      	movs	r0, r5
 80028a4:	f000 f91c 	bl	8002ae0 <__clzsi2>
 80028a8:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <__aeabi_i2d+0x5c>)
 80028aa:	1a12      	subs	r2, r2, r0
 80028ac:	280a      	cmp	r0, #10
 80028ae:	dc16      	bgt.n	80028de <__aeabi_i2d+0x4a>
 80028b0:	0003      	movs	r3, r0
 80028b2:	002e      	movs	r6, r5
 80028b4:	3315      	adds	r3, #21
 80028b6:	409e      	lsls	r6, r3
 80028b8:	230b      	movs	r3, #11
 80028ba:	1a18      	subs	r0, r3, r0
 80028bc:	40c5      	lsrs	r5, r0
 80028be:	0552      	lsls	r2, r2, #21
 80028c0:	032d      	lsls	r5, r5, #12
 80028c2:	0b2d      	lsrs	r5, r5, #12
 80028c4:	0d53      	lsrs	r3, r2, #21
 80028c6:	e003      	b.n	80028d0 <__aeabi_i2d+0x3c>
 80028c8:	2400      	movs	r4, #0
 80028ca:	2300      	movs	r3, #0
 80028cc:	2500      	movs	r5, #0
 80028ce:	2600      	movs	r6, #0
 80028d0:	051b      	lsls	r3, r3, #20
 80028d2:	432b      	orrs	r3, r5
 80028d4:	07e4      	lsls	r4, r4, #31
 80028d6:	4323      	orrs	r3, r4
 80028d8:	0030      	movs	r0, r6
 80028da:	0019      	movs	r1, r3
 80028dc:	bd70      	pop	{r4, r5, r6, pc}
 80028de:	380b      	subs	r0, #11
 80028e0:	4085      	lsls	r5, r0
 80028e2:	0552      	lsls	r2, r2, #21
 80028e4:	032d      	lsls	r5, r5, #12
 80028e6:	2600      	movs	r6, #0
 80028e8:	0b2d      	lsrs	r5, r5, #12
 80028ea:	0d53      	lsrs	r3, r2, #21
 80028ec:	e7f0      	b.n	80028d0 <__aeabi_i2d+0x3c>
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	0000041e 	.word	0x0000041e

080028f4 <__aeabi_ui2d>:
 80028f4:	b510      	push	{r4, lr}
 80028f6:	1e04      	subs	r4, r0, #0
 80028f8:	d010      	beq.n	800291c <__aeabi_ui2d+0x28>
 80028fa:	f000 f8f1 	bl	8002ae0 <__clzsi2>
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <__aeabi_ui2d+0x48>)
 8002900:	1a1b      	subs	r3, r3, r0
 8002902:	280a      	cmp	r0, #10
 8002904:	dc11      	bgt.n	800292a <__aeabi_ui2d+0x36>
 8002906:	220b      	movs	r2, #11
 8002908:	0021      	movs	r1, r4
 800290a:	1a12      	subs	r2, r2, r0
 800290c:	40d1      	lsrs	r1, r2
 800290e:	3015      	adds	r0, #21
 8002910:	030a      	lsls	r2, r1, #12
 8002912:	055b      	lsls	r3, r3, #21
 8002914:	4084      	lsls	r4, r0
 8002916:	0b12      	lsrs	r2, r2, #12
 8002918:	0d5b      	lsrs	r3, r3, #21
 800291a:	e001      	b.n	8002920 <__aeabi_ui2d+0x2c>
 800291c:	2300      	movs	r3, #0
 800291e:	2200      	movs	r2, #0
 8002920:	051b      	lsls	r3, r3, #20
 8002922:	4313      	orrs	r3, r2
 8002924:	0020      	movs	r0, r4
 8002926:	0019      	movs	r1, r3
 8002928:	bd10      	pop	{r4, pc}
 800292a:	0022      	movs	r2, r4
 800292c:	380b      	subs	r0, #11
 800292e:	4082      	lsls	r2, r0
 8002930:	055b      	lsls	r3, r3, #21
 8002932:	0312      	lsls	r2, r2, #12
 8002934:	2400      	movs	r4, #0
 8002936:	0b12      	lsrs	r2, r2, #12
 8002938:	0d5b      	lsrs	r3, r3, #21
 800293a:	e7f1      	b.n	8002920 <__aeabi_ui2d+0x2c>
 800293c:	0000041e 	.word	0x0000041e

08002940 <__aeabi_f2d>:
 8002940:	b570      	push	{r4, r5, r6, lr}
 8002942:	0043      	lsls	r3, r0, #1
 8002944:	0246      	lsls	r6, r0, #9
 8002946:	0fc4      	lsrs	r4, r0, #31
 8002948:	20fe      	movs	r0, #254	; 0xfe
 800294a:	0e1b      	lsrs	r3, r3, #24
 800294c:	1c59      	adds	r1, r3, #1
 800294e:	0a75      	lsrs	r5, r6, #9
 8002950:	4208      	tst	r0, r1
 8002952:	d00c      	beq.n	800296e <__aeabi_f2d+0x2e>
 8002954:	22e0      	movs	r2, #224	; 0xe0
 8002956:	0092      	lsls	r2, r2, #2
 8002958:	4694      	mov	ip, r2
 800295a:	076d      	lsls	r5, r5, #29
 800295c:	0b36      	lsrs	r6, r6, #12
 800295e:	4463      	add	r3, ip
 8002960:	051b      	lsls	r3, r3, #20
 8002962:	4333      	orrs	r3, r6
 8002964:	07e4      	lsls	r4, r4, #31
 8002966:	4323      	orrs	r3, r4
 8002968:	0028      	movs	r0, r5
 800296a:	0019      	movs	r1, r3
 800296c:	bd70      	pop	{r4, r5, r6, pc}
 800296e:	2b00      	cmp	r3, #0
 8002970:	d114      	bne.n	800299c <__aeabi_f2d+0x5c>
 8002972:	2d00      	cmp	r5, #0
 8002974:	d01b      	beq.n	80029ae <__aeabi_f2d+0x6e>
 8002976:	0028      	movs	r0, r5
 8002978:	f000 f8b2 	bl	8002ae0 <__clzsi2>
 800297c:	280a      	cmp	r0, #10
 800297e:	dc1c      	bgt.n	80029ba <__aeabi_f2d+0x7a>
 8002980:	230b      	movs	r3, #11
 8002982:	002e      	movs	r6, r5
 8002984:	1a1b      	subs	r3, r3, r0
 8002986:	40de      	lsrs	r6, r3
 8002988:	0003      	movs	r3, r0
 800298a:	3315      	adds	r3, #21
 800298c:	409d      	lsls	r5, r3
 800298e:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <__aeabi_f2d+0x88>)
 8002990:	0336      	lsls	r6, r6, #12
 8002992:	1a12      	subs	r2, r2, r0
 8002994:	0552      	lsls	r2, r2, #21
 8002996:	0b36      	lsrs	r6, r6, #12
 8002998:	0d53      	lsrs	r3, r2, #21
 800299a:	e7e1      	b.n	8002960 <__aeabi_f2d+0x20>
 800299c:	2d00      	cmp	r5, #0
 800299e:	d009      	beq.n	80029b4 <__aeabi_f2d+0x74>
 80029a0:	2280      	movs	r2, #128	; 0x80
 80029a2:	0b36      	lsrs	r6, r6, #12
 80029a4:	0312      	lsls	r2, r2, #12
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <__aeabi_f2d+0x8c>)
 80029a8:	076d      	lsls	r5, r5, #29
 80029aa:	4316      	orrs	r6, r2
 80029ac:	e7d8      	b.n	8002960 <__aeabi_f2d+0x20>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2600      	movs	r6, #0
 80029b2:	e7d5      	b.n	8002960 <__aeabi_f2d+0x20>
 80029b4:	2600      	movs	r6, #0
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <__aeabi_f2d+0x8c>)
 80029b8:	e7d2      	b.n	8002960 <__aeabi_f2d+0x20>
 80029ba:	0003      	movs	r3, r0
 80029bc:	3b0b      	subs	r3, #11
 80029be:	409d      	lsls	r5, r3
 80029c0:	002e      	movs	r6, r5
 80029c2:	2500      	movs	r5, #0
 80029c4:	e7e3      	b.n	800298e <__aeabi_f2d+0x4e>
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	00000389 	.word	0x00000389
 80029cc:	000007ff 	.word	0x000007ff

080029d0 <__aeabi_d2f>:
 80029d0:	0002      	movs	r2, r0
 80029d2:	004b      	lsls	r3, r1, #1
 80029d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d6:	0d5b      	lsrs	r3, r3, #21
 80029d8:	030c      	lsls	r4, r1, #12
 80029da:	4e3d      	ldr	r6, [pc, #244]	; (8002ad0 <__aeabi_d2f+0x100>)
 80029dc:	0a64      	lsrs	r4, r4, #9
 80029de:	0f40      	lsrs	r0, r0, #29
 80029e0:	1c5f      	adds	r7, r3, #1
 80029e2:	0fc9      	lsrs	r1, r1, #31
 80029e4:	4304      	orrs	r4, r0
 80029e6:	00d5      	lsls	r5, r2, #3
 80029e8:	4237      	tst	r7, r6
 80029ea:	d00a      	beq.n	8002a02 <__aeabi_d2f+0x32>
 80029ec:	4839      	ldr	r0, [pc, #228]	; (8002ad4 <__aeabi_d2f+0x104>)
 80029ee:	181e      	adds	r6, r3, r0
 80029f0:	2efe      	cmp	r6, #254	; 0xfe
 80029f2:	dd16      	ble.n	8002a22 <__aeabi_d2f+0x52>
 80029f4:	20ff      	movs	r0, #255	; 0xff
 80029f6:	2400      	movs	r4, #0
 80029f8:	05c0      	lsls	r0, r0, #23
 80029fa:	4320      	orrs	r0, r4
 80029fc:	07c9      	lsls	r1, r1, #31
 80029fe:	4308      	orrs	r0, r1
 8002a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <__aeabi_d2f+0x44>
 8002a06:	432c      	orrs	r4, r5
 8002a08:	d026      	beq.n	8002a58 <__aeabi_d2f+0x88>
 8002a0a:	2205      	movs	r2, #5
 8002a0c:	0192      	lsls	r2, r2, #6
 8002a0e:	0a54      	lsrs	r4, r2, #9
 8002a10:	b2d8      	uxtb	r0, r3
 8002a12:	e7f1      	b.n	80029f8 <__aeabi_d2f+0x28>
 8002a14:	4325      	orrs	r5, r4
 8002a16:	d0ed      	beq.n	80029f4 <__aeabi_d2f+0x24>
 8002a18:	2080      	movs	r0, #128	; 0x80
 8002a1a:	03c0      	lsls	r0, r0, #15
 8002a1c:	4304      	orrs	r4, r0
 8002a1e:	20ff      	movs	r0, #255	; 0xff
 8002a20:	e7ea      	b.n	80029f8 <__aeabi_d2f+0x28>
 8002a22:	2e00      	cmp	r6, #0
 8002a24:	dd1b      	ble.n	8002a5e <__aeabi_d2f+0x8e>
 8002a26:	0192      	lsls	r2, r2, #6
 8002a28:	1e53      	subs	r3, r2, #1
 8002a2a:	419a      	sbcs	r2, r3
 8002a2c:	00e4      	lsls	r4, r4, #3
 8002a2e:	0f6d      	lsrs	r5, r5, #29
 8002a30:	4322      	orrs	r2, r4
 8002a32:	432a      	orrs	r2, r5
 8002a34:	0753      	lsls	r3, r2, #29
 8002a36:	d048      	beq.n	8002aca <__aeabi_d2f+0xfa>
 8002a38:	230f      	movs	r3, #15
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d000      	beq.n	8002a42 <__aeabi_d2f+0x72>
 8002a40:	3204      	adds	r2, #4
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	04db      	lsls	r3, r3, #19
 8002a46:	4013      	ands	r3, r2
 8002a48:	d03f      	beq.n	8002aca <__aeabi_d2f+0xfa>
 8002a4a:	1c70      	adds	r0, r6, #1
 8002a4c:	2efe      	cmp	r6, #254	; 0xfe
 8002a4e:	d0d1      	beq.n	80029f4 <__aeabi_d2f+0x24>
 8002a50:	0192      	lsls	r2, r2, #6
 8002a52:	0a54      	lsrs	r4, r2, #9
 8002a54:	b2c0      	uxtb	r0, r0
 8002a56:	e7cf      	b.n	80029f8 <__aeabi_d2f+0x28>
 8002a58:	2000      	movs	r0, #0
 8002a5a:	2400      	movs	r4, #0
 8002a5c:	e7cc      	b.n	80029f8 <__aeabi_d2f+0x28>
 8002a5e:	0032      	movs	r2, r6
 8002a60:	3217      	adds	r2, #23
 8002a62:	db22      	blt.n	8002aaa <__aeabi_d2f+0xda>
 8002a64:	2080      	movs	r0, #128	; 0x80
 8002a66:	0400      	lsls	r0, r0, #16
 8002a68:	4320      	orrs	r0, r4
 8002a6a:	241e      	movs	r4, #30
 8002a6c:	1ba4      	subs	r4, r4, r6
 8002a6e:	2c1f      	cmp	r4, #31
 8002a70:	dd1d      	ble.n	8002aae <__aeabi_d2f+0xde>
 8002a72:	2202      	movs	r2, #2
 8002a74:	4252      	negs	r2, r2
 8002a76:	1b96      	subs	r6, r2, r6
 8002a78:	0002      	movs	r2, r0
 8002a7a:	40f2      	lsrs	r2, r6
 8002a7c:	0016      	movs	r6, r2
 8002a7e:	2c20      	cmp	r4, #32
 8002a80:	d004      	beq.n	8002a8c <__aeabi_d2f+0xbc>
 8002a82:	4a15      	ldr	r2, [pc, #84]	; (8002ad8 <__aeabi_d2f+0x108>)
 8002a84:	4694      	mov	ip, r2
 8002a86:	4463      	add	r3, ip
 8002a88:	4098      	lsls	r0, r3
 8002a8a:	4305      	orrs	r5, r0
 8002a8c:	002a      	movs	r2, r5
 8002a8e:	1e53      	subs	r3, r2, #1
 8002a90:	419a      	sbcs	r2, r3
 8002a92:	4332      	orrs	r2, r6
 8002a94:	2600      	movs	r6, #0
 8002a96:	0753      	lsls	r3, r2, #29
 8002a98:	d1ce      	bne.n	8002a38 <__aeabi_d2f+0x68>
 8002a9a:	2480      	movs	r4, #128	; 0x80
 8002a9c:	0013      	movs	r3, r2
 8002a9e:	04e4      	lsls	r4, r4, #19
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	4023      	ands	r3, r4
 8002aa4:	4222      	tst	r2, r4
 8002aa6:	d1d3      	bne.n	8002a50 <__aeabi_d2f+0x80>
 8002aa8:	e7b0      	b.n	8002a0c <__aeabi_d2f+0x3c>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e7ad      	b.n	8002a0a <__aeabi_d2f+0x3a>
 8002aae:	4a0b      	ldr	r2, [pc, #44]	; (8002adc <__aeabi_d2f+0x10c>)
 8002ab0:	4694      	mov	ip, r2
 8002ab2:	002a      	movs	r2, r5
 8002ab4:	40e2      	lsrs	r2, r4
 8002ab6:	0014      	movs	r4, r2
 8002ab8:	002a      	movs	r2, r5
 8002aba:	4463      	add	r3, ip
 8002abc:	409a      	lsls	r2, r3
 8002abe:	4098      	lsls	r0, r3
 8002ac0:	1e55      	subs	r5, r2, #1
 8002ac2:	41aa      	sbcs	r2, r5
 8002ac4:	4302      	orrs	r2, r0
 8002ac6:	4322      	orrs	r2, r4
 8002ac8:	e7e4      	b.n	8002a94 <__aeabi_d2f+0xc4>
 8002aca:	0033      	movs	r3, r6
 8002acc:	e79e      	b.n	8002a0c <__aeabi_d2f+0x3c>
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	000007fe 	.word	0x000007fe
 8002ad4:	fffffc80 	.word	0xfffffc80
 8002ad8:	fffffca2 	.word	0xfffffca2
 8002adc:	fffffc82 	.word	0xfffffc82

08002ae0 <__clzsi2>:
 8002ae0:	211c      	movs	r1, #28
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	041b      	lsls	r3, r3, #16
 8002ae6:	4298      	cmp	r0, r3
 8002ae8:	d301      	bcc.n	8002aee <__clzsi2+0xe>
 8002aea:	0c00      	lsrs	r0, r0, #16
 8002aec:	3910      	subs	r1, #16
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	4298      	cmp	r0, r3
 8002af2:	d301      	bcc.n	8002af8 <__clzsi2+0x18>
 8002af4:	0a00      	lsrs	r0, r0, #8
 8002af6:	3908      	subs	r1, #8
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	4298      	cmp	r0, r3
 8002afc:	d301      	bcc.n	8002b02 <__clzsi2+0x22>
 8002afe:	0900      	lsrs	r0, r0, #4
 8002b00:	3904      	subs	r1, #4
 8002b02:	a202      	add	r2, pc, #8	; (adr r2, 8002b0c <__clzsi2+0x2c>)
 8002b04:	5c10      	ldrb	r0, [r2, r0]
 8002b06:	1840      	adds	r0, r0, r1
 8002b08:	4770      	bx	lr
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	02020304 	.word	0x02020304
 8002b10:	01010101 	.word	0x01010101
	...

08002b1c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b09d      	sub	sp, #116	; 0x74
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4ac7      	ldr	r2, [pc, #796]	; (8002e48 <HAL_UART_RxCpltCallback+0x32c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d001      	beq.n	8002b32 <HAL_UART_RxCpltCallback+0x16>
 8002b2e:	f001 f859 	bl	8003be4 <HAL_UART_RxCpltCallback+0x10c8>
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8002b32:	49c6      	ldr	r1, [pc, #792]	; (8002e4c <HAL_UART_RxCpltCallback+0x330>)
 8002b34:	4bc6      	ldr	r3, [pc, #792]	; (8002e50 <HAL_UART_RxCpltCallback+0x334>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f004 fa86 	bl	800704a <HAL_UART_Receive_IT>
		char key = rx_buf[0];
 8002b3e:	215b      	movs	r1, #91	; 0x5b
 8002b40:	187b      	adds	r3, r7, r1
 8002b42:	4ac2      	ldr	r2, [pc, #776]	; (8002e4c <HAL_UART_RxCpltCallback+0x330>)
 8002b44:	7812      	ldrb	r2, [r2, #0]
 8002b46:	701a      	strb	r2, [r3, #0]
		if (key == 'a' || key == 'b' || key == 'c' || key == 'd' || key == 'e' || key == 'f' || key == 'g' || key == 'h') {
 8002b48:	000a      	movs	r2, r1
 8002b4a:	18bb      	adds	r3, r7, r2
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b61      	cmp	r3, #97	; 0x61
 8002b50:	d01d      	beq.n	8002b8e <HAL_UART_RxCpltCallback+0x72>
 8002b52:	18bb      	adds	r3, r7, r2
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b62      	cmp	r3, #98	; 0x62
 8002b58:	d019      	beq.n	8002b8e <HAL_UART_RxCpltCallback+0x72>
 8002b5a:	18bb      	adds	r3, r7, r2
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b63      	cmp	r3, #99	; 0x63
 8002b60:	d015      	beq.n	8002b8e <HAL_UART_RxCpltCallback+0x72>
 8002b62:	18bb      	adds	r3, r7, r2
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d011      	beq.n	8002b8e <HAL_UART_RxCpltCallback+0x72>
 8002b6a:	18bb      	adds	r3, r7, r2
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b65      	cmp	r3, #101	; 0x65
 8002b70:	d00d      	beq.n	8002b8e <HAL_UART_RxCpltCallback+0x72>
 8002b72:	18bb      	adds	r3, r7, r2
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b66      	cmp	r3, #102	; 0x66
 8002b78:	d009      	beq.n	8002b8e <HAL_UART_RxCpltCallback+0x72>
 8002b7a:	18bb      	adds	r3, r7, r2
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b67      	cmp	r3, #103	; 0x67
 8002b80:	d005      	beq.n	8002b8e <HAL_UART_RxCpltCallback+0x72>
 8002b82:	18bb      	adds	r3, r7, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b68      	cmp	r3, #104	; 0x68
 8002b88:	d001      	beq.n	8002b8e <HAL_UART_RxCpltCallback+0x72>
 8002b8a:	f001 f82b 	bl	8003be4 <HAL_UART_RxCpltCallback+0x10c8>
			int charNum = -1;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	425b      	negs	r3, r3
 8002b92:	667b      	str	r3, [r7, #100]	; 0x64
			switch (key) {
 8002b94:	235b      	movs	r3, #91	; 0x5b
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	3b61      	subs	r3, #97	; 0x61
 8002b9c:	2b07      	cmp	r3, #7
 8002b9e:	d81c      	bhi.n	8002bda <HAL_UART_RxCpltCallback+0xbe>
 8002ba0:	009a      	lsls	r2, r3, #2
 8002ba2:	4bac      	ldr	r3, [pc, #688]	; (8002e54 <HAL_UART_RxCpltCallback+0x338>)
 8002ba4:	18d3      	adds	r3, r2, r3
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	469f      	mov	pc, r3
			case 'a':
				charNum = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8002bae:	e014      	b.n	8002bda <HAL_UART_RxCpltCallback+0xbe>
			case 'b':
				charNum = 1;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8002bb4:	e011      	b.n	8002bda <HAL_UART_RxCpltCallback+0xbe>
			case 'c':
				charNum = 2;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8002bba:	e00e      	b.n	8002bda <HAL_UART_RxCpltCallback+0xbe>
			case 'd':
				charNum = 3;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8002bc0:	e00b      	b.n	8002bda <HAL_UART_RxCpltCallback+0xbe>
			case 'e':
				charNum = 4;
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8002bc6:	e008      	b.n	8002bda <HAL_UART_RxCpltCallback+0xbe>
			case 'f':
				charNum = 5;
 8002bc8:	2305      	movs	r3, #5
 8002bca:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8002bcc:	e005      	b.n	8002bda <HAL_UART_RxCpltCallback+0xbe>
			case 'g':
				charNum = 6;
 8002bce:	2306      	movs	r3, #6
 8002bd0:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8002bd2:	e002      	b.n	8002bda <HAL_UART_RxCpltCallback+0xbe>
			case 'h':
				charNum = 7;
 8002bd4:	2307      	movs	r3, #7
 8002bd6:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8002bd8:	46c0      	nop			; (mov r8, r8)
//			HAL_UART_Transmit(&huart1, "\x1B" , 1, 100);
//			HAL_UART_Transmit(&huart1, "\x5B" , 1, 100);
//			HAL_UART_Transmit(&huart1, "\x32" , 1, 100);
//			HAL_UART_Transmit(&huart1, "\x4A" , 1, 100);
			// Read all the ADCs (adcResultsDMA needs to be uint32_t!!!)
			HAL_ADC_Start_DMA(&hadc, (uint32_t*) adcResultsDMA,
 8002bda:	2311      	movs	r3, #17
 8002bdc:	001a      	movs	r2, r3
 8002bde:	499e      	ldr	r1, [pc, #632]	; (8002e58 <HAL_UART_RxCpltCallback+0x33c>)
 8002be0:	4b9e      	ldr	r3, [pc, #632]	; (8002e5c <HAL_UART_RxCpltCallback+0x340>)
 8002be2:	0018      	movs	r0, r3
 8002be4:	f001 ff4a 	bl	8004a7c <HAL_ADC_Start_DMA>
					adcChannelCount);
			for (int i = 0; i < num_gpios; i++) {
 8002be8:	2300      	movs	r3, #0
 8002bea:	663b      	str	r3, [r7, #96]	; 0x60
 8002bec:	e067      	b.n	8002cbe <HAL_UART_RxCpltCallback+0x1a2>

				// Changing to the next GPIO
				if (i == charNum) {
 8002bee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d12b      	bne.n	8002c4e <HAL_UART_RxCpltCallback+0x132>
					if (HAL_GPIO_ReadPin(gpios[i].gpio, gpios[i].pin)
 8002bf6:	4b9a      	ldr	r3, [pc, #616]	; (8002e60 <HAL_UART_RxCpltCallback+0x344>)
 8002bf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bfa:	00d2      	lsls	r2, r2, #3
 8002bfc:	58d0      	ldr	r0, [r2, r3]
 8002bfe:	4a98      	ldr	r2, [pc, #608]	; (8002e60 <HAL_UART_RxCpltCallback+0x344>)
 8002c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	18d3      	adds	r3, r2, r3
 8002c06:	3304      	adds	r3, #4
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	f002 fe4a 	bl	80058a4 <HAL_GPIO_ReadPin>
 8002c10:	0003      	movs	r3, r0
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d10e      	bne.n	8002c34 <HAL_UART_RxCpltCallback+0x118>
							== GPIO_PIN_SET) {
						HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin,
 8002c16:	4b92      	ldr	r3, [pc, #584]	; (8002e60 <HAL_UART_RxCpltCallback+0x344>)
 8002c18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c1a:	00d2      	lsls	r2, r2, #3
 8002c1c:	58d0      	ldr	r0, [r2, r3]
 8002c1e:	4a90      	ldr	r2, [pc, #576]	; (8002e60 <HAL_UART_RxCpltCallback+0x344>)
 8002c20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	18d3      	adds	r3, r2, r3
 8002c26:	3304      	adds	r3, #4
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	f002 fe56 	bl	80058de <HAL_GPIO_WritePin>
 8002c32:	e00c      	b.n	8002c4e <HAL_UART_RxCpltCallback+0x132>
								GPIO_PIN_RESET);
					} else {

						//			gpio_count == num_gpios - 1 ? gpio_count = 0 : gpio_count++;
						HAL_GPIO_TogglePin(gpios[i].gpio, gpios[i].pin);
 8002c34:	4b8a      	ldr	r3, [pc, #552]	; (8002e60 <HAL_UART_RxCpltCallback+0x344>)
 8002c36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c38:	00d2      	lsls	r2, r2, #3
 8002c3a:	58d0      	ldr	r0, [r2, r3]
 8002c3c:	4a88      	ldr	r2, [pc, #544]	; (8002e60 <HAL_UART_RxCpltCallback+0x344>)
 8002c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	18d3      	adds	r3, r2, r3
 8002c44:	3304      	adds	r3, #4
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	0019      	movs	r1, r3
 8002c4a:	f002 fe65 	bl	8005918 <HAL_GPIO_TogglePin>
						if (gpio_flags[i] == 1) {
						}
					}
				}

				HAL_UART_Transmit(&huart1, gpio_names[i], strlen(gpio_names[i]), 100);
 8002c4e:	4b85      	ldr	r3, [pc, #532]	; (8002e64 <HAL_UART_RxCpltCallback+0x348>)
 8002c50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c52:	0092      	lsls	r2, r2, #2
 8002c54:	58d4      	ldr	r4, [r2, r3]
 8002c56:	4b83      	ldr	r3, [pc, #524]	; (8002e64 <HAL_UART_RxCpltCallback+0x348>)
 8002c58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c5a:	0092      	lsls	r2, r2, #2
 8002c5c:	58d3      	ldr	r3, [r2, r3]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7fd fa52 	bl	8000108 <strlen>
 8002c64:	0003      	movs	r3, r0
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	4879      	ldr	r0, [pc, #484]	; (8002e50 <HAL_UART_RxCpltCallback+0x334>)
 8002c6a:	2364      	movs	r3, #100	; 0x64
 8002c6c:	0021      	movs	r1, r4
 8002c6e:	f004 f943 	bl	8006ef8 <HAL_UART_Transmit>
				if (HAL_GPIO_ReadPin(gpios[i].gpio, gpios[i].pin)
 8002c72:	4b7b      	ldr	r3, [pc, #492]	; (8002e60 <HAL_UART_RxCpltCallback+0x344>)
 8002c74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c76:	00d2      	lsls	r2, r2, #3
 8002c78:	58d0      	ldr	r0, [r2, r3]
 8002c7a:	4a79      	ldr	r2, [pc, #484]	; (8002e60 <HAL_UART_RxCpltCallback+0x344>)
 8002c7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	18d3      	adds	r3, r2, r3
 8002c82:	3304      	adds	r3, #4
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	0019      	movs	r1, r3
 8002c88:	f002 fe0c 	bl	80058a4 <HAL_GPIO_ReadPin>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d106      	bne.n	8002ca0 <HAL_UART_RxCpltCallback+0x184>
						== GPIO_PIN_SET) {
					HAL_UART_Transmit(&huart1, ": H", 3, 100);
 8002c92:	4975      	ldr	r1, [pc, #468]	; (8002e68 <HAL_UART_RxCpltCallback+0x34c>)
 8002c94:	486e      	ldr	r0, [pc, #440]	; (8002e50 <HAL_UART_RxCpltCallback+0x334>)
 8002c96:	2364      	movs	r3, #100	; 0x64
 8002c98:	2203      	movs	r2, #3
 8002c9a:	f004 f92d 	bl	8006ef8 <HAL_UART_Transmit>
 8002c9e:	e005      	b.n	8002cac <HAL_UART_RxCpltCallback+0x190>
				} else {
					HAL_UART_Transmit(&huart1, ": L", 3, 100);
 8002ca0:	4972      	ldr	r1, [pc, #456]	; (8002e6c <HAL_UART_RxCpltCallback+0x350>)
 8002ca2:	486b      	ldr	r0, [pc, #428]	; (8002e50 <HAL_UART_RxCpltCallback+0x334>)
 8002ca4:	2364      	movs	r3, #100	; 0x64
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	f004 f926 	bl	8006ef8 <HAL_UART_Transmit>
				}
				HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8002cac:	4970      	ldr	r1, [pc, #448]	; (8002e70 <HAL_UART_RxCpltCallback+0x354>)
 8002cae:	4868      	ldr	r0, [pc, #416]	; (8002e50 <HAL_UART_RxCpltCallback+0x334>)
 8002cb0:	2364      	movs	r3, #100	; 0x64
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f004 f920 	bl	8006ef8 <HAL_UART_Transmit>
			for (int i = 0; i < num_gpios; i++) {
 8002cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cba:	3301      	adds	r3, #1
 8002cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8002cbe:	4b6d      	ldr	r3, [pc, #436]	; (8002e74 <HAL_UART_RxCpltCallback+0x358>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	db92      	blt.n	8002bee <HAL_UART_RxCpltCallback+0xd2>
			}

			HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8002cc8:	4969      	ldr	r1, [pc, #420]	; (8002e70 <HAL_UART_RxCpltCallback+0x354>)
 8002cca:	4861      	ldr	r0, [pc, #388]	; (8002e50 <HAL_UART_RxCpltCallback+0x334>)
 8002ccc:	2364      	movs	r3, #100	; 0x64
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f004 f912 	bl	8006ef8 <HAL_UART_Transmit>

			// For each ADC get its voltage
			for (int i = 0; i < adcChannelCount; i++) {
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cd8:	f000 fe37 	bl	800394a <HAL_UART_RxCpltCallback+0xe2e>

				// Parsing ADCs value based on gpio_count
				uint16_t adc = adcResultsDMA[i];
 8002cdc:	4b5e      	ldr	r3, [pc, #376]	; (8002e58 <HAL_UART_RxCpltCallback+0x33c>)
 8002cde:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ce0:	0092      	lsls	r2, r2, #2
 8002ce2:	58d2      	ldr	r2, [r2, r3]
 8002ce4:	2158      	movs	r1, #88	; 0x58
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	801a      	strh	r2, [r3, #0]
				uint8_t adcval[2];
				adcval[0] = ((adc & 0xFF00) >> 8); // ADC reading MSB
 8002cea:	187b      	adds	r3, r7, r1
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	2010      	movs	r0, #16
 8002cf6:	183b      	adds	r3, r7, r0
 8002cf8:	701a      	strb	r2, [r3, #0]
				adcval[1] = (adc & 0xFF); // ADC reading LSB
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	183b      	adds	r3, r7, r0
 8002d02:	705a      	strb	r2, [r3, #1]

				// Processing results for UART Transmission

				char value[8];
				if (i == 0) { // When i is < 8 you read from one of the ADC channels
 8002d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d150      	bne.n	8002dac <HAL_UART_RxCpltCallback+0x290>
					float voltage = adc * (3.3 / 4095) * 6;
 8002d0a:	187b      	adds	r3, r7, r1
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f7ff fdc0 	bl	8002894 <__aeabi_i2d>
 8002d14:	4a58      	ldr	r2, [pc, #352]	; (8002e78 <HAL_UART_RxCpltCallback+0x35c>)
 8002d16:	4b59      	ldr	r3, [pc, #356]	; (8002e7c <HAL_UART_RxCpltCallback+0x360>)
 8002d18:	f7fe ff6a 	bl	8001bf0 <__aeabi_dmul>
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	000b      	movs	r3, r1
 8002d20:	0010      	movs	r0, r2
 8002d22:	0019      	movs	r1, r3
 8002d24:	2200      	movs	r2, #0
 8002d26:	4b56      	ldr	r3, [pc, #344]	; (8002e80 <HAL_UART_RxCpltCallback+0x364>)
 8002d28:	f7fe ff62 	bl	8001bf0 <__aeabi_dmul>
 8002d2c:	0002      	movs	r2, r0
 8002d2e:	000b      	movs	r3, r1
 8002d30:	0010      	movs	r0, r2
 8002d32:	0019      	movs	r1, r3
 8002d34:	f7ff fe4c 	bl	80029d0 <__aeabi_d2f>
 8002d38:	1c03      	adds	r3, r0, #0
 8002d3a:	617b      	str	r3, [r7, #20]
					sprintf(value, "%f", voltage);
 8002d3c:	6978      	ldr	r0, [r7, #20]
 8002d3e:	f7ff fdff 	bl	8002940 <__aeabi_f2d>
 8002d42:	0002      	movs	r2, r0
 8002d44:	000b      	movs	r3, r1
 8002d46:	494f      	ldr	r1, [pc, #316]	; (8002e84 <HAL_UART_RxCpltCallback+0x368>)
 8002d48:	2008      	movs	r0, #8
 8002d4a:	1838      	adds	r0, r7, r0
 8002d4c:	f006 f92e 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "END_mon PA0", 11, 100);
 8002d50:	494d      	ldr	r1, [pc, #308]	; (8002e88 <HAL_UART_RxCpltCallback+0x36c>)
 8002d52:	483f      	ldr	r0, [pc, #252]	; (8002e50 <HAL_UART_RxCpltCallback+0x334>)
 8002d54:	2364      	movs	r3, #100	; 0x64
 8002d56:	220b      	movs	r2, #11
 8002d58:	f004 f8ce 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8002d5c:	6978      	ldr	r0, [r7, #20]
 8002d5e:	f7ff fdef 	bl	8002940 <__aeabi_f2d>
 8002d62:	4a4a      	ldr	r2, [pc, #296]	; (8002e8c <HAL_UART_RxCpltCallback+0x370>)
 8002d64:	4b4a      	ldr	r3, [pc, #296]	; (8002e90 <HAL_UART_RxCpltCallback+0x374>)
 8002d66:	f7fd fb77 	bl	8000458 <__aeabi_dcmplt>
 8002d6a:	1e03      	subs	r3, r0, #0
 8002d6c:	d00f      	beq.n	8002d8e <HAL_UART_RxCpltCallback+0x272>
 8002d6e:	6978      	ldr	r0, [r7, #20]
 8002d70:	f7ff fde6 	bl	8002940 <__aeabi_f2d>
 8002d74:	4a47      	ldr	r2, [pc, #284]	; (8002e94 <HAL_UART_RxCpltCallback+0x378>)
 8002d76:	4b48      	ldr	r3, [pc, #288]	; (8002e98 <HAL_UART_RxCpltCallback+0x37c>)
 8002d78:	f7fd fb82 	bl	8000480 <__aeabi_dcmpgt>
 8002d7c:	1e03      	subs	r3, r0, #0
 8002d7e:	d006      	beq.n	8002d8e <HAL_UART_RxCpltCallback+0x272>
						gpio_flags[i] = 1;
 8002d80:	4b46      	ldr	r3, [pc, #280]	; (8002e9c <HAL_UART_RxCpltCallback+0x380>)
 8002d82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d84:	0092      	lsls	r2, r2, #2
 8002d86:	2101      	movs	r1, #1
 8002d88:	50d1      	str	r1, [r2, r3]
 8002d8a:	f000 fdc8 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
					} else if (voltage != 0) {
 8002d8e:	2100      	movs	r1, #0
 8002d90:	6978      	ldr	r0, [r7, #20]
 8002d92:	f7fd fb95 	bl	80004c0 <__aeabi_fcmpeq>
 8002d96:	1e03      	subs	r3, r0, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_UART_RxCpltCallback+0x282>
 8002d9a:	f000 fdc0 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 8002d9e:	4b3f      	ldr	r3, [pc, #252]	; (8002e9c <HAL_UART_RxCpltCallback+0x380>)
 8002da0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002da2:	0092      	lsls	r2, r2, #2
 8002da4:	2100      	movs	r1, #0
 8002da6:	50d1      	str	r1, [r2, r3]
 8002da8:	f000 fdb9 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
					}

				} else if (i == 1) {
 8002dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d000      	beq.n	8002db4 <HAL_UART_RxCpltCallback+0x298>
 8002db2:	e077      	b.n	8002ea4 <HAL_UART_RxCpltCallback+0x388>
					float voltage = adc * (3.3 / 4095);
 8002db4:	2358      	movs	r3, #88	; 0x58
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f7ff fd6a 	bl	8002894 <__aeabi_i2d>
 8002dc0:	4a2d      	ldr	r2, [pc, #180]	; (8002e78 <HAL_UART_RxCpltCallback+0x35c>)
 8002dc2:	4b2e      	ldr	r3, [pc, #184]	; (8002e7c <HAL_UART_RxCpltCallback+0x360>)
 8002dc4:	f7fe ff14 	bl	8001bf0 <__aeabi_dmul>
 8002dc8:	0002      	movs	r2, r0
 8002dca:	000b      	movs	r3, r1
 8002dcc:	0010      	movs	r0, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	f7ff fdfe 	bl	80029d0 <__aeabi_d2f>
 8002dd4:	1c03      	adds	r3, r0, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
					sprintf(value, "%f", voltage);
 8002dd8:	69b8      	ldr	r0, [r7, #24]
 8002dda:	f7ff fdb1 	bl	8002940 <__aeabi_f2d>
 8002dde:	0002      	movs	r2, r0
 8002de0:	000b      	movs	r3, r1
 8002de2:	4928      	ldr	r1, [pc, #160]	; (8002e84 <HAL_UART_RxCpltCallback+0x368>)
 8002de4:	2008      	movs	r0, #8
 8002de6:	1838      	adds	r0, r7, r0
 8002de8:	f006 f8e0 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "BUS_Imon PA1", 12, 100);
 8002dec:	492c      	ldr	r1, [pc, #176]	; (8002ea0 <HAL_UART_RxCpltCallback+0x384>)
 8002dee:	4818      	ldr	r0, [pc, #96]	; (8002e50 <HAL_UART_RxCpltCallback+0x334>)
 8002df0:	2364      	movs	r3, #100	; 0x64
 8002df2:	220c      	movs	r2, #12
 8002df4:	f004 f880 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8002df8:	69b8      	ldr	r0, [r7, #24]
 8002dfa:	f7ff fda1 	bl	8002940 <__aeabi_f2d>
 8002dfe:	4a23      	ldr	r2, [pc, #140]	; (8002e8c <HAL_UART_RxCpltCallback+0x370>)
 8002e00:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_UART_RxCpltCallback+0x374>)
 8002e02:	f7fd fb29 	bl	8000458 <__aeabi_dcmplt>
 8002e06:	1e03      	subs	r3, r0, #0
 8002e08:	d00f      	beq.n	8002e2a <HAL_UART_RxCpltCallback+0x30e>
 8002e0a:	69b8      	ldr	r0, [r7, #24]
 8002e0c:	f7ff fd98 	bl	8002940 <__aeabi_f2d>
 8002e10:	4a20      	ldr	r2, [pc, #128]	; (8002e94 <HAL_UART_RxCpltCallback+0x378>)
 8002e12:	4b21      	ldr	r3, [pc, #132]	; (8002e98 <HAL_UART_RxCpltCallback+0x37c>)
 8002e14:	f7fd fb34 	bl	8000480 <__aeabi_dcmpgt>
 8002e18:	1e03      	subs	r3, r0, #0
 8002e1a:	d006      	beq.n	8002e2a <HAL_UART_RxCpltCallback+0x30e>
						gpio_flags[i] = 1;
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <HAL_UART_RxCpltCallback+0x380>)
 8002e1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e20:	0092      	lsls	r2, r2, #2
 8002e22:	2101      	movs	r1, #1
 8002e24:	50d1      	str	r1, [r2, r3]
 8002e26:	f000 fd7a 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
					} else if (voltage != 0) {
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	69b8      	ldr	r0, [r7, #24]
 8002e2e:	f7fd fb47 	bl	80004c0 <__aeabi_fcmpeq>
 8002e32:	1e03      	subs	r3, r0, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_UART_RxCpltCallback+0x31e>
 8002e36:	f000 fd72 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 8002e3a:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <HAL_UART_RxCpltCallback+0x380>)
 8002e3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e3e:	0092      	lsls	r2, r2, #2
 8002e40:	2100      	movs	r1, #0
 8002e42:	50d1      	str	r1, [r2, r3]
 8002e44:	f000 fd6b 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
 8002e48:	40013800 	.word	0x40013800
 8002e4c:	20000380 	.word	0x20000380
 8002e50:	200002f0 	.word	0x200002f0
 8002e54:	0800cfe0 	.word	0x0800cfe0
 8002e58:	200003e4 	.word	0x200003e4
 8002e5c:	20000220 	.word	0x20000220
 8002e60:	0800cfa0 	.word	0x0800cfa0
 8002e64:	20000000 	.word	0x20000000
 8002e68:	0800cd84 	.word	0x0800cd84
 8002e6c:	0800cd88 	.word	0x0800cd88
 8002e70:	0800cd8c 	.word	0x0800cd8c
 8002e74:	20000020 	.word	0x20000020
 8002e78:	e734d9b4 	.word	0xe734d9b4
 8002e7c:	3f4a680c 	.word	0x3f4a680c
 8002e80:	40180000 	.word	0x40180000
 8002e84:	0800cd90 	.word	0x0800cd90
 8002e88:	0800cd94 	.word	0x0800cd94
 8002e8c:	33333333 	.word	0x33333333
 8002e90:	400b3333 	.word	0x400b3333
 8002e94:	9999999a 	.word	0x9999999a
 8002e98:	40099999 	.word	0x40099999
 8002e9c:	20000428 	.word	0x20000428
 8002ea0:	0800cda0 	.word	0x0800cda0
					}

				} else if (i == 2) {
 8002ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d151      	bne.n	8002f4e <HAL_UART_RxCpltCallback+0x432>
					float voltage = adc * (3.3 / 4095) * 2;
 8002eaa:	2358      	movs	r3, #88	; 0x58
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7ff fcef 	bl	8002894 <__aeabi_i2d>
 8002eb6:	4ad0      	ldr	r2, [pc, #832]	; (80031f8 <HAL_UART_RxCpltCallback+0x6dc>)
 8002eb8:	4bd0      	ldr	r3, [pc, #832]	; (80031fc <HAL_UART_RxCpltCallback+0x6e0>)
 8002eba:	f7fe fe99 	bl	8001bf0 <__aeabi_dmul>
 8002ebe:	0002      	movs	r2, r0
 8002ec0:	000b      	movs	r3, r1
 8002ec2:	0010      	movs	r0, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	000b      	movs	r3, r1
 8002eca:	f7fd ff53 	bl	8000d74 <__aeabi_dadd>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	000b      	movs	r3, r1
 8002ed2:	0010      	movs	r0, r2
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	f7ff fd7b 	bl	80029d0 <__aeabi_d2f>
 8002eda:	1c03      	adds	r3, r0, #0
 8002edc:	61fb      	str	r3, [r7, #28]
					sprintf(value, "%f", voltage);
 8002ede:	69f8      	ldr	r0, [r7, #28]
 8002ee0:	f7ff fd2e 	bl	8002940 <__aeabi_f2d>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	000b      	movs	r3, r1
 8002ee8:	49c5      	ldr	r1, [pc, #788]	; (8003200 <HAL_UART_RxCpltCallback+0x6e4>)
 8002eea:	2008      	movs	r0, #8
 8002eec:	1838      	adds	r0, r7, r0
 8002eee:	f006 f85d 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "BUS_Vmon PA2", 12, 100);
 8002ef2:	49c4      	ldr	r1, [pc, #784]	; (8003204 <HAL_UART_RxCpltCallback+0x6e8>)
 8002ef4:	48c4      	ldr	r0, [pc, #784]	; (8003208 <HAL_UART_RxCpltCallback+0x6ec>)
 8002ef6:	2364      	movs	r3, #100	; 0x64
 8002ef8:	220c      	movs	r2, #12
 8002efa:	f003 fffd 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8002efe:	69f8      	ldr	r0, [r7, #28]
 8002f00:	f7ff fd1e 	bl	8002940 <__aeabi_f2d>
 8002f04:	4ac1      	ldr	r2, [pc, #772]	; (800320c <HAL_UART_RxCpltCallback+0x6f0>)
 8002f06:	4bc2      	ldr	r3, [pc, #776]	; (8003210 <HAL_UART_RxCpltCallback+0x6f4>)
 8002f08:	f7fd faa6 	bl	8000458 <__aeabi_dcmplt>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d00f      	beq.n	8002f30 <HAL_UART_RxCpltCallback+0x414>
 8002f10:	69f8      	ldr	r0, [r7, #28]
 8002f12:	f7ff fd15 	bl	8002940 <__aeabi_f2d>
 8002f16:	4abf      	ldr	r2, [pc, #764]	; (8003214 <HAL_UART_RxCpltCallback+0x6f8>)
 8002f18:	4bbf      	ldr	r3, [pc, #764]	; (8003218 <HAL_UART_RxCpltCallback+0x6fc>)
 8002f1a:	f7fd fab1 	bl	8000480 <__aeabi_dcmpgt>
 8002f1e:	1e03      	subs	r3, r0, #0
 8002f20:	d006      	beq.n	8002f30 <HAL_UART_RxCpltCallback+0x414>
						gpio_flags[i] = 1;
 8002f22:	4bbe      	ldr	r3, [pc, #760]	; (800321c <HAL_UART_RxCpltCallback+0x700>)
 8002f24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f26:	0092      	lsls	r2, r2, #2
 8002f28:	2101      	movs	r1, #1
 8002f2a:	50d1      	str	r1, [r2, r3]
 8002f2c:	f000 fcf7 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
					} else if (voltage != 0) {
 8002f30:	2100      	movs	r1, #0
 8002f32:	69f8      	ldr	r0, [r7, #28]
 8002f34:	f7fd fac4 	bl	80004c0 <__aeabi_fcmpeq>
 8002f38:	1e03      	subs	r3, r0, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_UART_RxCpltCallback+0x424>
 8002f3c:	f000 fcef 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 8002f40:	4bb6      	ldr	r3, [pc, #728]	; (800321c <HAL_UART_RxCpltCallback+0x700>)
 8002f42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f44:	0092      	lsls	r2, r2, #2
 8002f46:	2100      	movs	r1, #0
 8002f48:	50d1      	str	r1, [r2, r3]
 8002f4a:	f000 fce8 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
					}

				} else if (i == 3) {
 8002f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d151      	bne.n	8002ff8 <HAL_UART_RxCpltCallback+0x4dc>
					float voltage = adc * (3.3 / 4095) * 1.1 ;
 8002f54:	2358      	movs	r3, #88	; 0x58
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7ff fc9a 	bl	8002894 <__aeabi_i2d>
 8002f60:	4aa5      	ldr	r2, [pc, #660]	; (80031f8 <HAL_UART_RxCpltCallback+0x6dc>)
 8002f62:	4ba6      	ldr	r3, [pc, #664]	; (80031fc <HAL_UART_RxCpltCallback+0x6e0>)
 8002f64:	f7fe fe44 	bl	8001bf0 <__aeabi_dmul>
 8002f68:	0002      	movs	r2, r0
 8002f6a:	000b      	movs	r3, r1
 8002f6c:	0010      	movs	r0, r2
 8002f6e:	0019      	movs	r1, r3
 8002f70:	4aa8      	ldr	r2, [pc, #672]	; (8003214 <HAL_UART_RxCpltCallback+0x6f8>)
 8002f72:	4bab      	ldr	r3, [pc, #684]	; (8003220 <HAL_UART_RxCpltCallback+0x704>)
 8002f74:	f7fe fe3c 	bl	8001bf0 <__aeabi_dmul>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	000b      	movs	r3, r1
 8002f7c:	0010      	movs	r0, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	f7ff fd26 	bl	80029d0 <__aeabi_d2f>
 8002f84:	1c03      	adds	r3, r0, #0
 8002f86:	623b      	str	r3, [r7, #32]
					// Need to multiply by 2
					sprintf(value, "%f", voltage);
 8002f88:	6a38      	ldr	r0, [r7, #32]
 8002f8a:	f7ff fcd9 	bl	8002940 <__aeabi_f2d>
 8002f8e:	0002      	movs	r2, r0
 8002f90:	000b      	movs	r3, r1
 8002f92:	499b      	ldr	r1, [pc, #620]	; (8003200 <HAL_UART_RxCpltCallback+0x6e4>)
 8002f94:	2008      	movs	r0, #8
 8002f96:	1838      	adds	r0, r7, r0
 8002f98:	f006 f808 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "3v3_mon PA3", 11, 100);
 8002f9c:	49a1      	ldr	r1, [pc, #644]	; (8003224 <HAL_UART_RxCpltCallback+0x708>)
 8002f9e:	489a      	ldr	r0, [pc, #616]	; (8003208 <HAL_UART_RxCpltCallback+0x6ec>)
 8002fa0:	2364      	movs	r3, #100	; 0x64
 8002fa2:	220b      	movs	r2, #11
 8002fa4:	f003 ffa8 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8002fa8:	6a38      	ldr	r0, [r7, #32]
 8002faa:	f7ff fcc9 	bl	8002940 <__aeabi_f2d>
 8002fae:	4a97      	ldr	r2, [pc, #604]	; (800320c <HAL_UART_RxCpltCallback+0x6f0>)
 8002fb0:	4b97      	ldr	r3, [pc, #604]	; (8003210 <HAL_UART_RxCpltCallback+0x6f4>)
 8002fb2:	f7fd fa51 	bl	8000458 <__aeabi_dcmplt>
 8002fb6:	1e03      	subs	r3, r0, #0
 8002fb8:	d00f      	beq.n	8002fda <HAL_UART_RxCpltCallback+0x4be>
 8002fba:	6a38      	ldr	r0, [r7, #32]
 8002fbc:	f7ff fcc0 	bl	8002940 <__aeabi_f2d>
 8002fc0:	4a94      	ldr	r2, [pc, #592]	; (8003214 <HAL_UART_RxCpltCallback+0x6f8>)
 8002fc2:	4b95      	ldr	r3, [pc, #596]	; (8003218 <HAL_UART_RxCpltCallback+0x6fc>)
 8002fc4:	f7fd fa5c 	bl	8000480 <__aeabi_dcmpgt>
 8002fc8:	1e03      	subs	r3, r0, #0
 8002fca:	d006      	beq.n	8002fda <HAL_UART_RxCpltCallback+0x4be>
						gpio_flags[i] = 1;
 8002fcc:	4b93      	ldr	r3, [pc, #588]	; (800321c <HAL_UART_RxCpltCallback+0x700>)
 8002fce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002fd0:	0092      	lsls	r2, r2, #2
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	50d1      	str	r1, [r2, r3]
 8002fd6:	f000 fca2 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
					} else if (voltage != 0) {
 8002fda:	2100      	movs	r1, #0
 8002fdc:	6a38      	ldr	r0, [r7, #32]
 8002fde:	f7fd fa6f 	bl	80004c0 <__aeabi_fcmpeq>
 8002fe2:	1e03      	subs	r3, r0, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_UART_RxCpltCallback+0x4ce>
 8002fe6:	f000 fc9a 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 8002fea:	4b8c      	ldr	r3, [pc, #560]	; (800321c <HAL_UART_RxCpltCallback+0x700>)
 8002fec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002fee:	0092      	lsls	r2, r2, #2
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	50d1      	str	r1, [r2, r3]
 8002ff4:	f000 fc93 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
					}

				} else if (i == 4) {
 8002ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d151      	bne.n	80030a2 <HAL_UART_RxCpltCallback+0x586>
					float voltage = adc * (3.3 / 4095) * -62.5;
 8002ffe:	2358      	movs	r3, #88	; 0x58
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	0018      	movs	r0, r3
 8003006:	f7ff fc45 	bl	8002894 <__aeabi_i2d>
 800300a:	4a7b      	ldr	r2, [pc, #492]	; (80031f8 <HAL_UART_RxCpltCallback+0x6dc>)
 800300c:	4b7b      	ldr	r3, [pc, #492]	; (80031fc <HAL_UART_RxCpltCallback+0x6e0>)
 800300e:	f7fe fdef 	bl	8001bf0 <__aeabi_dmul>
 8003012:	0002      	movs	r2, r0
 8003014:	000b      	movs	r3, r1
 8003016:	0010      	movs	r0, r2
 8003018:	0019      	movs	r1, r3
 800301a:	2200      	movs	r2, #0
 800301c:	4b82      	ldr	r3, [pc, #520]	; (8003228 <HAL_UART_RxCpltCallback+0x70c>)
 800301e:	f7fe fde7 	bl	8001bf0 <__aeabi_dmul>
 8003022:	0002      	movs	r2, r0
 8003024:	000b      	movs	r3, r1
 8003026:	0010      	movs	r0, r2
 8003028:	0019      	movs	r1, r3
 800302a:	f7ff fcd1 	bl	80029d0 <__aeabi_d2f>
 800302e:	1c03      	adds	r3, r0, #0
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
					sprintf(value, "%f", voltage);
 8003032:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003034:	f7ff fc84 	bl	8002940 <__aeabi_f2d>
 8003038:	0002      	movs	r2, r0
 800303a:	000b      	movs	r3, r1
 800303c:	4970      	ldr	r1, [pc, #448]	; (8003200 <HAL_UART_RxCpltCallback+0x6e4>)
 800303e:	2008      	movs	r0, #8
 8003040:	1838      	adds	r0, r7, r0
 8003042:	f005 ffb3 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "n150v_mon PA5", 13, 100);
 8003046:	4979      	ldr	r1, [pc, #484]	; (800322c <HAL_UART_RxCpltCallback+0x710>)
 8003048:	486f      	ldr	r0, [pc, #444]	; (8003208 <HAL_UART_RxCpltCallback+0x6ec>)
 800304a:	2364      	movs	r3, #100	; 0x64
 800304c:	220d      	movs	r2, #13
 800304e:	f003 ff53 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage > -150.1 && voltage < -149.9) {
 8003052:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003054:	f7ff fc74 	bl	8002940 <__aeabi_f2d>
 8003058:	4a6c      	ldr	r2, [pc, #432]	; (800320c <HAL_UART_RxCpltCallback+0x6f0>)
 800305a:	4b75      	ldr	r3, [pc, #468]	; (8003230 <HAL_UART_RxCpltCallback+0x714>)
 800305c:	f7fd fa10 	bl	8000480 <__aeabi_dcmpgt>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d00f      	beq.n	8003084 <HAL_UART_RxCpltCallback+0x568>
 8003064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003066:	f7ff fc6b 	bl	8002940 <__aeabi_f2d>
 800306a:	4a72      	ldr	r2, [pc, #456]	; (8003234 <HAL_UART_RxCpltCallback+0x718>)
 800306c:	4b72      	ldr	r3, [pc, #456]	; (8003238 <HAL_UART_RxCpltCallback+0x71c>)
 800306e:	f7fd f9f3 	bl	8000458 <__aeabi_dcmplt>
 8003072:	1e03      	subs	r3, r0, #0
 8003074:	d006      	beq.n	8003084 <HAL_UART_RxCpltCallback+0x568>
						gpio_flags[i] = 1;
 8003076:	4b69      	ldr	r3, [pc, #420]	; (800321c <HAL_UART_RxCpltCallback+0x700>)
 8003078:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800307a:	0092      	lsls	r2, r2, #2
 800307c:	2101      	movs	r1, #1
 800307e:	50d1      	str	r1, [r2, r3]
 8003080:	f000 fc4d 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
					} else if (voltage != 0) {
 8003084:	2100      	movs	r1, #0
 8003086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003088:	f7fd fa1a 	bl	80004c0 <__aeabi_fcmpeq>
 800308c:	1e03      	subs	r3, r0, #0
 800308e:	d001      	beq.n	8003094 <HAL_UART_RxCpltCallback+0x578>
 8003090:	f000 fc45 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 8003094:	4b61      	ldr	r3, [pc, #388]	; (800321c <HAL_UART_RxCpltCallback+0x700>)
 8003096:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003098:	0092      	lsls	r2, r2, #2
 800309a:	2100      	movs	r1, #0
 800309c:	50d1      	str	r1, [r2, r3]
 800309e:	f000 fc3e 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
					}

				} else if (i == 5) {
 80030a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a4:	2b05      	cmp	r3, #5
 80030a6:	d151      	bne.n	800314c <HAL_UART_RxCpltCallback+0x630>
					float voltage = adc * (3.3 / 4095) * -320;
 80030a8:	2358      	movs	r3, #88	; 0x58
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7ff fbf0 	bl	8002894 <__aeabi_i2d>
 80030b4:	4a50      	ldr	r2, [pc, #320]	; (80031f8 <HAL_UART_RxCpltCallback+0x6dc>)
 80030b6:	4b51      	ldr	r3, [pc, #324]	; (80031fc <HAL_UART_RxCpltCallback+0x6e0>)
 80030b8:	f7fe fd9a 	bl	8001bf0 <__aeabi_dmul>
 80030bc:	0002      	movs	r2, r0
 80030be:	000b      	movs	r3, r1
 80030c0:	0010      	movs	r0, r2
 80030c2:	0019      	movs	r1, r3
 80030c4:	2200      	movs	r2, #0
 80030c6:	4b5d      	ldr	r3, [pc, #372]	; (800323c <HAL_UART_RxCpltCallback+0x720>)
 80030c8:	f7fe fd92 	bl	8001bf0 <__aeabi_dmul>
 80030cc:	0002      	movs	r2, r0
 80030ce:	000b      	movs	r3, r1
 80030d0:	0010      	movs	r0, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	f7ff fc7c 	bl	80029d0 <__aeabi_d2f>
 80030d8:	1c03      	adds	r3, r0, #0
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
					sprintf(value, "%f", voltage);
 80030dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030de:	f7ff fc2f 	bl	8002940 <__aeabi_f2d>
 80030e2:	0002      	movs	r2, r0
 80030e4:	000b      	movs	r3, r1
 80030e6:	4946      	ldr	r1, [pc, #280]	; (8003200 <HAL_UART_RxCpltCallback+0x6e4>)
 80030e8:	2008      	movs	r0, #8
 80030ea:	1838      	adds	r0, r7, r0
 80030ec:	f005 ff5e 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "n800v_mon PA6", 13, 100);
 80030f0:	4953      	ldr	r1, [pc, #332]	; (8003240 <HAL_UART_RxCpltCallback+0x724>)
 80030f2:	4845      	ldr	r0, [pc, #276]	; (8003208 <HAL_UART_RxCpltCallback+0x6ec>)
 80030f4:	2364      	movs	r3, #100	; 0x64
 80030f6:	220d      	movs	r2, #13
 80030f8:	f003 fefe 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 80030fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030fe:	f7ff fc1f 	bl	8002940 <__aeabi_f2d>
 8003102:	4a42      	ldr	r2, [pc, #264]	; (800320c <HAL_UART_RxCpltCallback+0x6f0>)
 8003104:	4b42      	ldr	r3, [pc, #264]	; (8003210 <HAL_UART_RxCpltCallback+0x6f4>)
 8003106:	f7fd f9a7 	bl	8000458 <__aeabi_dcmplt>
 800310a:	1e03      	subs	r3, r0, #0
 800310c:	d00f      	beq.n	800312e <HAL_UART_RxCpltCallback+0x612>
 800310e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003110:	f7ff fc16 	bl	8002940 <__aeabi_f2d>
 8003114:	4a3f      	ldr	r2, [pc, #252]	; (8003214 <HAL_UART_RxCpltCallback+0x6f8>)
 8003116:	4b40      	ldr	r3, [pc, #256]	; (8003218 <HAL_UART_RxCpltCallback+0x6fc>)
 8003118:	f7fd f9b2 	bl	8000480 <__aeabi_dcmpgt>
 800311c:	1e03      	subs	r3, r0, #0
 800311e:	d006      	beq.n	800312e <HAL_UART_RxCpltCallback+0x612>
						gpio_flags[i] = 1;
 8003120:	4b3e      	ldr	r3, [pc, #248]	; (800321c <HAL_UART_RxCpltCallback+0x700>)
 8003122:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003124:	0092      	lsls	r2, r2, #2
 8003126:	2101      	movs	r1, #1
 8003128:	50d1      	str	r1, [r2, r3]
 800312a:	f000 fbf8 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
					} else if (voltage != 0) {
 800312e:	2100      	movs	r1, #0
 8003130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003132:	f7fd f9c5 	bl	80004c0 <__aeabi_fcmpeq>
 8003136:	1e03      	subs	r3, r0, #0
 8003138:	d001      	beq.n	800313e <HAL_UART_RxCpltCallback+0x622>
 800313a:	f000 fbf0 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 800313e:	4b37      	ldr	r3, [pc, #220]	; (800321c <HAL_UART_RxCpltCallback+0x700>)
 8003140:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003142:	0092      	lsls	r2, r2, #2
 8003144:	2100      	movs	r1, #0
 8003146:	50d1      	str	r1, [r2, r3]
 8003148:	f000 fbe9 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
					}

				} else if (i == 6) {
 800314c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800314e:	2b06      	cmp	r3, #6
 8003150:	d000      	beq.n	8003154 <HAL_UART_RxCpltCallback+0x638>
 8003152:	e07b      	b.n	800324c <HAL_UART_RxCpltCallback+0x730>
					float voltage = adc * (3.3 / 4095) * -50;
 8003154:	2358      	movs	r3, #88	; 0x58
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	0018      	movs	r0, r3
 800315c:	f7ff fb9a 	bl	8002894 <__aeabi_i2d>
 8003160:	4a25      	ldr	r2, [pc, #148]	; (80031f8 <HAL_UART_RxCpltCallback+0x6dc>)
 8003162:	4b26      	ldr	r3, [pc, #152]	; (80031fc <HAL_UART_RxCpltCallback+0x6e0>)
 8003164:	f7fe fd44 	bl	8001bf0 <__aeabi_dmul>
 8003168:	0002      	movs	r2, r0
 800316a:	000b      	movs	r3, r1
 800316c:	0010      	movs	r0, r2
 800316e:	0019      	movs	r1, r3
 8003170:	2200      	movs	r2, #0
 8003172:	4b34      	ldr	r3, [pc, #208]	; (8003244 <HAL_UART_RxCpltCallback+0x728>)
 8003174:	f7fe fd3c 	bl	8001bf0 <__aeabi_dmul>
 8003178:	0002      	movs	r2, r0
 800317a:	000b      	movs	r3, r1
 800317c:	0010      	movs	r0, r2
 800317e:	0019      	movs	r1, r3
 8003180:	f7ff fc26 	bl	80029d0 <__aeabi_d2f>
 8003184:	1c03      	adds	r3, r0, #0
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
					sprintf(value, "%f", voltage);
 8003188:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800318a:	f7ff fbd9 	bl	8002940 <__aeabi_f2d>
 800318e:	0002      	movs	r2, r0
 8003190:	000b      	movs	r3, r1
 8003192:	491b      	ldr	r1, [pc, #108]	; (8003200 <HAL_UART_RxCpltCallback+0x6e4>)
 8003194:	2008      	movs	r0, #8
 8003196:	1838      	adds	r0, r7, r0
 8003198:	f005 ff08 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "SWP_mon PA7", 11, 100);
 800319c:	492a      	ldr	r1, [pc, #168]	; (8003248 <HAL_UART_RxCpltCallback+0x72c>)
 800319e:	481a      	ldr	r0, [pc, #104]	; (8003208 <HAL_UART_RxCpltCallback+0x6ec>)
 80031a0:	2364      	movs	r3, #100	; 0x64
 80031a2:	220b      	movs	r2, #11
 80031a4:	f003 fea8 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 80031a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031aa:	f7ff fbc9 	bl	8002940 <__aeabi_f2d>
 80031ae:	4a17      	ldr	r2, [pc, #92]	; (800320c <HAL_UART_RxCpltCallback+0x6f0>)
 80031b0:	4b17      	ldr	r3, [pc, #92]	; (8003210 <HAL_UART_RxCpltCallback+0x6f4>)
 80031b2:	f7fd f951 	bl	8000458 <__aeabi_dcmplt>
 80031b6:	1e03      	subs	r3, r0, #0
 80031b8:	d00f      	beq.n	80031da <HAL_UART_RxCpltCallback+0x6be>
 80031ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031bc:	f7ff fbc0 	bl	8002940 <__aeabi_f2d>
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <HAL_UART_RxCpltCallback+0x6f8>)
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <HAL_UART_RxCpltCallback+0x6fc>)
 80031c4:	f7fd f95c 	bl	8000480 <__aeabi_dcmpgt>
 80031c8:	1e03      	subs	r3, r0, #0
 80031ca:	d006      	beq.n	80031da <HAL_UART_RxCpltCallback+0x6be>
						gpio_flags[i] = 1;
 80031cc:	4b13      	ldr	r3, [pc, #76]	; (800321c <HAL_UART_RxCpltCallback+0x700>)
 80031ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031d0:	0092      	lsls	r2, r2, #2
 80031d2:	2101      	movs	r1, #1
 80031d4:	50d1      	str	r1, [r2, r3]
 80031d6:	f000 fba2 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
					} else if (voltage != 0) {
 80031da:	2100      	movs	r1, #0
 80031dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031de:	f7fd f96f 	bl	80004c0 <__aeabi_fcmpeq>
 80031e2:	1e03      	subs	r3, r0, #0
 80031e4:	d001      	beq.n	80031ea <HAL_UART_RxCpltCallback+0x6ce>
 80031e6:	f000 fb9a 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 80031ea:	4b0c      	ldr	r3, [pc, #48]	; (800321c <HAL_UART_RxCpltCallback+0x700>)
 80031ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031ee:	0092      	lsls	r2, r2, #2
 80031f0:	2100      	movs	r1, #0
 80031f2:	50d1      	str	r1, [r2, r3]
 80031f4:	f000 fb93 	bl	800391e <HAL_UART_RxCpltCallback+0xe02>
 80031f8:	e734d9b4 	.word	0xe734d9b4
 80031fc:	3f4a680c 	.word	0x3f4a680c
 8003200:	0800cd90 	.word	0x0800cd90
 8003204:	0800cdb0 	.word	0x0800cdb0
 8003208:	200002f0 	.word	0x200002f0
 800320c:	33333333 	.word	0x33333333
 8003210:	400b3333 	.word	0x400b3333
 8003214:	9999999a 	.word	0x9999999a
 8003218:	40099999 	.word	0x40099999
 800321c:	20000428 	.word	0x20000428
 8003220:	3ff19999 	.word	0x3ff19999
 8003224:	0800cdc0 	.word	0x0800cdc0
 8003228:	c04f4000 	.word	0xc04f4000
 800322c:	0800cdcc 	.word	0x0800cdcc
 8003230:	c062c333 	.word	0xc062c333
 8003234:	cccccccd 	.word	0xcccccccd
 8003238:	c062bccc 	.word	0xc062bccc
 800323c:	c0740000 	.word	0xc0740000
 8003240:	0800cddc 	.word	0x0800cddc
 8003244:	c0490000 	.word	0xc0490000
 8003248:	0800cdec 	.word	0x0800cdec
					}

				} else if (i == 7) {
 800324c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800324e:	2b07      	cmp	r3, #7
 8003250:	d146      	bne.n	80032e0 <HAL_UART_RxCpltCallback+0x7c4>
					float voltage = adc * (3.3 / 4095);
 8003252:	2358      	movs	r3, #88	; 0x58
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	0018      	movs	r0, r3
 800325a:	f7ff fb1b 	bl	8002894 <__aeabi_i2d>
 800325e:	4abd      	ldr	r2, [pc, #756]	; (8003554 <HAL_UART_RxCpltCallback+0xa38>)
 8003260:	4bbd      	ldr	r3, [pc, #756]	; (8003558 <HAL_UART_RxCpltCallback+0xa3c>)
 8003262:	f7fe fcc5 	bl	8001bf0 <__aeabi_dmul>
 8003266:	0002      	movs	r2, r0
 8003268:	000b      	movs	r3, r1
 800326a:	0010      	movs	r0, r2
 800326c:	0019      	movs	r1, r3
 800326e:	f7ff fbaf 	bl	80029d0 <__aeabi_d2f>
 8003272:	1c03      	adds	r3, r0, #0
 8003274:	633b      	str	r3, [r7, #48]	; 0x30
//					 voltage *= -2;
					sprintf(value, "%f", voltage);
 8003276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003278:	f7ff fb62 	bl	8002940 <__aeabi_f2d>
 800327c:	0002      	movs	r2, r0
 800327e:	000b      	movs	r3, r1
 8003280:	49b6      	ldr	r1, [pc, #728]	; (800355c <HAL_UART_RxCpltCallback+0xa40>)
 8003282:	2008      	movs	r0, #8
 8003284:	1838      	adds	r0, r7, r0
 8003286:	f005 fe91 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "TMP_1 PB0", 9, 100);
 800328a:	49b5      	ldr	r1, [pc, #724]	; (8003560 <HAL_UART_RxCpltCallback+0xa44>)
 800328c:	48b5      	ldr	r0, [pc, #724]	; (8003564 <HAL_UART_RxCpltCallback+0xa48>)
 800328e:	2364      	movs	r3, #100	; 0x64
 8003290:	2209      	movs	r2, #9
 8003292:	f003 fe31 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage > -5.1 && voltage < -4.9) {
 8003296:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003298:	f7ff fb52 	bl	8002940 <__aeabi_f2d>
 800329c:	4ab2      	ldr	r2, [pc, #712]	; (8003568 <HAL_UART_RxCpltCallback+0xa4c>)
 800329e:	4bb3      	ldr	r3, [pc, #716]	; (800356c <HAL_UART_RxCpltCallback+0xa50>)
 80032a0:	f7fd f8ee 	bl	8000480 <__aeabi_dcmpgt>
 80032a4:	1e03      	subs	r3, r0, #0
 80032a6:	d00e      	beq.n	80032c6 <HAL_UART_RxCpltCallback+0x7aa>
 80032a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032aa:	f7ff fb49 	bl	8002940 <__aeabi_f2d>
 80032ae:	4ab0      	ldr	r2, [pc, #704]	; (8003570 <HAL_UART_RxCpltCallback+0xa54>)
 80032b0:	4bb0      	ldr	r3, [pc, #704]	; (8003574 <HAL_UART_RxCpltCallback+0xa58>)
 80032b2:	f7fd f8d1 	bl	8000458 <__aeabi_dcmplt>
 80032b6:	1e03      	subs	r3, r0, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_UART_RxCpltCallback+0x7aa>
						gpio_flags[i] = 1;
 80032ba:	4baf      	ldr	r3, [pc, #700]	; (8003578 <HAL_UART_RxCpltCallback+0xa5c>)
 80032bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032be:	0092      	lsls	r2, r2, #2
 80032c0:	2101      	movs	r1, #1
 80032c2:	50d1      	str	r1, [r2, r3]
 80032c4:	e32b      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					} else if (voltage != 0) {
 80032c6:	2100      	movs	r1, #0
 80032c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032ca:	f7fd f8f9 	bl	80004c0 <__aeabi_fcmpeq>
 80032ce:	1e03      	subs	r3, r0, #0
 80032d0:	d000      	beq.n	80032d4 <HAL_UART_RxCpltCallback+0x7b8>
 80032d2:	e324      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 80032d4:	4ba8      	ldr	r3, [pc, #672]	; (8003578 <HAL_UART_RxCpltCallback+0xa5c>)
 80032d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032d8:	0092      	lsls	r2, r2, #2
 80032da:	2100      	movs	r1, #0
 80032dc:	50d1      	str	r1, [r2, r3]
 80032de:	e31e      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					}

				} else if (i == 8) {
 80032e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d146      	bne.n	8003374 <HAL_UART_RxCpltCallback+0x858>
					float voltage = adc * (3.3 / 4095);
 80032e6:	2358      	movs	r3, #88	; 0x58
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	0018      	movs	r0, r3
 80032ee:	f7ff fad1 	bl	8002894 <__aeabi_i2d>
 80032f2:	4a98      	ldr	r2, [pc, #608]	; (8003554 <HAL_UART_RxCpltCallback+0xa38>)
 80032f4:	4b98      	ldr	r3, [pc, #608]	; (8003558 <HAL_UART_RxCpltCallback+0xa3c>)
 80032f6:	f7fe fc7b 	bl	8001bf0 <__aeabi_dmul>
 80032fa:	0002      	movs	r2, r0
 80032fc:	000b      	movs	r3, r1
 80032fe:	0010      	movs	r0, r2
 8003300:	0019      	movs	r1, r3
 8003302:	f7ff fb65 	bl	80029d0 <__aeabi_d2f>
 8003306:	1c03      	adds	r3, r0, #0
 8003308:	637b      	str	r3, [r7, #52]	; 0x34
//					 voltage *= 2;
					sprintf(value, "%f", voltage);
 800330a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800330c:	f7ff fb18 	bl	8002940 <__aeabi_f2d>
 8003310:	0002      	movs	r2, r0
 8003312:	000b      	movs	r3, r1
 8003314:	4991      	ldr	r1, [pc, #580]	; (800355c <HAL_UART_RxCpltCallback+0xa40>)
 8003316:	2008      	movs	r0, #8
 8003318:	1838      	adds	r0, r7, r0
 800331a:	f005 fe47 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "TMP_2 PB1", 9, 100);
 800331e:	4997      	ldr	r1, [pc, #604]	; (800357c <HAL_UART_RxCpltCallback+0xa60>)
 8003320:	4890      	ldr	r0, [pc, #576]	; (8003564 <HAL_UART_RxCpltCallback+0xa48>)
 8003322:	2364      	movs	r3, #100	; 0x64
 8003324:	2209      	movs	r2, #9
 8003326:	f003 fde7 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage > -5.1 && voltage < -4.9) {
 800332a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800332c:	f7ff fb08 	bl	8002940 <__aeabi_f2d>
 8003330:	4a8d      	ldr	r2, [pc, #564]	; (8003568 <HAL_UART_RxCpltCallback+0xa4c>)
 8003332:	4b8e      	ldr	r3, [pc, #568]	; (800356c <HAL_UART_RxCpltCallback+0xa50>)
 8003334:	f7fd f8a4 	bl	8000480 <__aeabi_dcmpgt>
 8003338:	1e03      	subs	r3, r0, #0
 800333a:	d00e      	beq.n	800335a <HAL_UART_RxCpltCallback+0x83e>
 800333c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800333e:	f7ff faff 	bl	8002940 <__aeabi_f2d>
 8003342:	4a8b      	ldr	r2, [pc, #556]	; (8003570 <HAL_UART_RxCpltCallback+0xa54>)
 8003344:	4b8b      	ldr	r3, [pc, #556]	; (8003574 <HAL_UART_RxCpltCallback+0xa58>)
 8003346:	f7fd f887 	bl	8000458 <__aeabi_dcmplt>
 800334a:	1e03      	subs	r3, r0, #0
 800334c:	d005      	beq.n	800335a <HAL_UART_RxCpltCallback+0x83e>
						gpio_flags[i] = 1;
 800334e:	4b8a      	ldr	r3, [pc, #552]	; (8003578 <HAL_UART_RxCpltCallback+0xa5c>)
 8003350:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003352:	0092      	lsls	r2, r2, #2
 8003354:	2101      	movs	r1, #1
 8003356:	50d1      	str	r1, [r2, r3]
 8003358:	e2e1      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					} else if (voltage != 0) {
 800335a:	2100      	movs	r1, #0
 800335c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800335e:	f7fd f8af 	bl	80004c0 <__aeabi_fcmpeq>
 8003362:	1e03      	subs	r3, r0, #0
 8003364:	d000      	beq.n	8003368 <HAL_UART_RxCpltCallback+0x84c>
 8003366:	e2da      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 8003368:	4b83      	ldr	r3, [pc, #524]	; (8003578 <HAL_UART_RxCpltCallback+0xa5c>)
 800336a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800336c:	0092      	lsls	r2, r2, #2
 800336e:	2100      	movs	r1, #0
 8003370:	50d1      	str	r1, [r2, r3]
 8003372:	e2d4      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					}

				} else if (i == 9) {
 8003374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003376:	2b09      	cmp	r3, #9
 8003378:	d146      	bne.n	8003408 <HAL_UART_RxCpltCallback+0x8ec>
					float voltage = adc * (3.3 / 4095);
 800337a:	2358      	movs	r3, #88	; 0x58
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	0018      	movs	r0, r3
 8003382:	f7ff fa87 	bl	8002894 <__aeabi_i2d>
 8003386:	4a73      	ldr	r2, [pc, #460]	; (8003554 <HAL_UART_RxCpltCallback+0xa38>)
 8003388:	4b73      	ldr	r3, [pc, #460]	; (8003558 <HAL_UART_RxCpltCallback+0xa3c>)
 800338a:	f7fe fc31 	bl	8001bf0 <__aeabi_dmul>
 800338e:	0002      	movs	r2, r0
 8003390:	000b      	movs	r3, r1
 8003392:	0010      	movs	r0, r2
 8003394:	0019      	movs	r1, r3
 8003396:	f7ff fb1b 	bl	80029d0 <__aeabi_d2f>
 800339a:	1c03      	adds	r3, r0, #0
 800339c:	63bb      	str	r3, [r7, #56]	; 0x38
//					 voltage *= 2;
					sprintf(value, "%f", voltage);
 800339e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80033a0:	f7ff face 	bl	8002940 <__aeabi_f2d>
 80033a4:	0002      	movs	r2, r0
 80033a6:	000b      	movs	r3, r1
 80033a8:	496c      	ldr	r1, [pc, #432]	; (800355c <HAL_UART_RxCpltCallback+0xa40>)
 80033aa:	2008      	movs	r0, #8
 80033ac:	1838      	adds	r0, r7, r0
 80033ae:	f005 fdfd 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "2v5_mon PC0", 11, 100);
 80033b2:	4973      	ldr	r1, [pc, #460]	; (8003580 <HAL_UART_RxCpltCallback+0xa64>)
 80033b4:	486b      	ldr	r0, [pc, #428]	; (8003564 <HAL_UART_RxCpltCallback+0xa48>)
 80033b6:	2364      	movs	r3, #100	; 0x64
 80033b8:	220b      	movs	r2, #11
 80033ba:	f003 fd9d 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage < 5.1 && voltage > 4.9) {
 80033be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80033c0:	f7ff fabe 	bl	8002940 <__aeabi_f2d>
 80033c4:	4a68      	ldr	r2, [pc, #416]	; (8003568 <HAL_UART_RxCpltCallback+0xa4c>)
 80033c6:	4b6f      	ldr	r3, [pc, #444]	; (8003584 <HAL_UART_RxCpltCallback+0xa68>)
 80033c8:	f7fd f846 	bl	8000458 <__aeabi_dcmplt>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d00e      	beq.n	80033ee <HAL_UART_RxCpltCallback+0x8d2>
 80033d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80033d2:	f7ff fab5 	bl	8002940 <__aeabi_f2d>
 80033d6:	4a66      	ldr	r2, [pc, #408]	; (8003570 <HAL_UART_RxCpltCallback+0xa54>)
 80033d8:	4b6b      	ldr	r3, [pc, #428]	; (8003588 <HAL_UART_RxCpltCallback+0xa6c>)
 80033da:	f7fd f851 	bl	8000480 <__aeabi_dcmpgt>
 80033de:	1e03      	subs	r3, r0, #0
 80033e0:	d005      	beq.n	80033ee <HAL_UART_RxCpltCallback+0x8d2>
						gpio_flags[i] = 1;
 80033e2:	4b65      	ldr	r3, [pc, #404]	; (8003578 <HAL_UART_RxCpltCallback+0xa5c>)
 80033e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033e6:	0092      	lsls	r2, r2, #2
 80033e8:	2101      	movs	r1, #1
 80033ea:	50d1      	str	r1, [r2, r3]
 80033ec:	e297      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					} else if (voltage != 0) {
 80033ee:	2100      	movs	r1, #0
 80033f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80033f2:	f7fd f865 	bl	80004c0 <__aeabi_fcmpeq>
 80033f6:	1e03      	subs	r3, r0, #0
 80033f8:	d000      	beq.n	80033fc <HAL_UART_RxCpltCallback+0x8e0>
 80033fa:	e290      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 80033fc:	4b5e      	ldr	r3, [pc, #376]	; (8003578 <HAL_UART_RxCpltCallback+0xa5c>)
 80033fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003400:	0092      	lsls	r2, r2, #2
 8003402:	2100      	movs	r1, #0
 8003404:	50d1      	str	r1, [r2, r3]
 8003406:	e28a      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					}

				} else if (i == 10) {
 8003408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800340a:	2b0a      	cmp	r3, #10
 800340c:	d14e      	bne.n	80034ac <HAL_UART_RxCpltCallback+0x990>
					float voltage = adc * (3.3 / 4095) * -1.65;
 800340e:	2358      	movs	r3, #88	; 0x58
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	0018      	movs	r0, r3
 8003416:	f7ff fa3d 	bl	8002894 <__aeabi_i2d>
 800341a:	4a4e      	ldr	r2, [pc, #312]	; (8003554 <HAL_UART_RxCpltCallback+0xa38>)
 800341c:	4b4e      	ldr	r3, [pc, #312]	; (8003558 <HAL_UART_RxCpltCallback+0xa3c>)
 800341e:	f7fe fbe7 	bl	8001bf0 <__aeabi_dmul>
 8003422:	0002      	movs	r2, r0
 8003424:	000b      	movs	r3, r1
 8003426:	0010      	movs	r0, r2
 8003428:	0019      	movs	r1, r3
 800342a:	4a4f      	ldr	r2, [pc, #316]	; (8003568 <HAL_UART_RxCpltCallback+0xa4c>)
 800342c:	4b57      	ldr	r3, [pc, #348]	; (800358c <HAL_UART_RxCpltCallback+0xa70>)
 800342e:	f7fe fbdf 	bl	8001bf0 <__aeabi_dmul>
 8003432:	0002      	movs	r2, r0
 8003434:	000b      	movs	r3, r1
 8003436:	0010      	movs	r0, r2
 8003438:	0019      	movs	r1, r3
 800343a:	f7ff fac9 	bl	80029d0 <__aeabi_d2f>
 800343e:	1c03      	adds	r3, r0, #0
 8003440:	63fb      	str	r3, [r7, #60]	; 0x3c
//					 voltage *= -1;
					sprintf(value, "%f", voltage);
 8003442:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003444:	f7ff fa7c 	bl	8002940 <__aeabi_f2d>
 8003448:	0002      	movs	r2, r0
 800344a:	000b      	movs	r3, r1
 800344c:	4943      	ldr	r1, [pc, #268]	; (800355c <HAL_UART_RxCpltCallback+0xa40>)
 800344e:	2008      	movs	r0, #8
 8003450:	1838      	adds	r0, r7, r0
 8003452:	f005 fdab 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "n5v_mon PC1", 11, 100);
 8003456:	494e      	ldr	r1, [pc, #312]	; (8003590 <HAL_UART_RxCpltCallback+0xa74>)
 8003458:	4842      	ldr	r0, [pc, #264]	; (8003564 <HAL_UART_RxCpltCallback+0xa48>)
 800345a:	2364      	movs	r3, #100	; 0x64
 800345c:	220b      	movs	r2, #11
 800345e:	f003 fd4b 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage > -3.4 && voltage < -3.2) {
 8003462:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003464:	f7ff fa6c 	bl	8002940 <__aeabi_f2d>
 8003468:	4a4a      	ldr	r2, [pc, #296]	; (8003594 <HAL_UART_RxCpltCallback+0xa78>)
 800346a:	4b4b      	ldr	r3, [pc, #300]	; (8003598 <HAL_UART_RxCpltCallback+0xa7c>)
 800346c:	f7fd f808 	bl	8000480 <__aeabi_dcmpgt>
 8003470:	1e03      	subs	r3, r0, #0
 8003472:	d00e      	beq.n	8003492 <HAL_UART_RxCpltCallback+0x976>
 8003474:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003476:	f7ff fa63 	bl	8002940 <__aeabi_f2d>
 800347a:	4a3d      	ldr	r2, [pc, #244]	; (8003570 <HAL_UART_RxCpltCallback+0xa54>)
 800347c:	4b47      	ldr	r3, [pc, #284]	; (800359c <HAL_UART_RxCpltCallback+0xa80>)
 800347e:	f7fc ffeb 	bl	8000458 <__aeabi_dcmplt>
 8003482:	1e03      	subs	r3, r0, #0
 8003484:	d005      	beq.n	8003492 <HAL_UART_RxCpltCallback+0x976>
						gpio_flags[i] = 1;
 8003486:	4b3c      	ldr	r3, [pc, #240]	; (8003578 <HAL_UART_RxCpltCallback+0xa5c>)
 8003488:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800348a:	0092      	lsls	r2, r2, #2
 800348c:	2101      	movs	r1, #1
 800348e:	50d1      	str	r1, [r2, r3]
 8003490:	e245      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					} else if (voltage != 0) {
 8003492:	2100      	movs	r1, #0
 8003494:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003496:	f7fd f813 	bl	80004c0 <__aeabi_fcmpeq>
 800349a:	1e03      	subs	r3, r0, #0
 800349c:	d000      	beq.n	80034a0 <HAL_UART_RxCpltCallback+0x984>
 800349e:	e23e      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 80034a0:	4b35      	ldr	r3, [pc, #212]	; (8003578 <HAL_UART_RxCpltCallback+0xa5c>)
 80034a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034a4:	0092      	lsls	r2, r2, #2
 80034a6:	2100      	movs	r1, #0
 80034a8:	50d1      	str	r1, [r2, r3]
 80034aa:	e238      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					}
				} else if (i == 11) {
 80034ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ae:	2b0b      	cmp	r3, #11
 80034b0:	d000      	beq.n	80034b4 <HAL_UART_RxCpltCallback+0x998>
 80034b2:	e081      	b.n	80035b8 <HAL_UART_RxCpltCallback+0xa9c>
					float voltage = adc * (3.3 / 4095) * 1.67;
 80034b4:	2358      	movs	r3, #88	; 0x58
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7ff f9ea 	bl	8002894 <__aeabi_i2d>
 80034c0:	4a24      	ldr	r2, [pc, #144]	; (8003554 <HAL_UART_RxCpltCallback+0xa38>)
 80034c2:	4b25      	ldr	r3, [pc, #148]	; (8003558 <HAL_UART_RxCpltCallback+0xa3c>)
 80034c4:	f7fe fb94 	bl	8001bf0 <__aeabi_dmul>
 80034c8:	0002      	movs	r2, r0
 80034ca:	000b      	movs	r3, r1
 80034cc:	0010      	movs	r0, r2
 80034ce:	0019      	movs	r1, r3
 80034d0:	4a33      	ldr	r2, [pc, #204]	; (80035a0 <HAL_UART_RxCpltCallback+0xa84>)
 80034d2:	4b34      	ldr	r3, [pc, #208]	; (80035a4 <HAL_UART_RxCpltCallback+0xa88>)
 80034d4:	f7fe fb8c 	bl	8001bf0 <__aeabi_dmul>
 80034d8:	0002      	movs	r2, r0
 80034da:	000b      	movs	r3, r1
 80034dc:	0010      	movs	r0, r2
 80034de:	0019      	movs	r1, r3
 80034e0:	f7ff fa76 	bl	80029d0 <__aeabi_d2f>
 80034e4:	1c03      	adds	r3, r0, #0
 80034e6:	643b      	str	r3, [r7, #64]	; 0x40
//					 voltage *= -50;
					sprintf(value, "%f", voltage);
 80034e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80034ea:	f7ff fa29 	bl	8002940 <__aeabi_f2d>
 80034ee:	0002      	movs	r2, r0
 80034f0:	000b      	movs	r3, r1
 80034f2:	491a      	ldr	r1, [pc, #104]	; (800355c <HAL_UART_RxCpltCallback+0xa40>)
 80034f4:	2008      	movs	r0, #8
 80034f6:	1838      	adds	r0, r7, r0
 80034f8:	f005 fd58 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "5v_mon PC2", 10, 100);
 80034fc:	492a      	ldr	r1, [pc, #168]	; (80035a8 <HAL_UART_RxCpltCallback+0xa8c>)
 80034fe:	4819      	ldr	r0, [pc, #100]	; (8003564 <HAL_UART_RxCpltCallback+0xa48>)
 8003500:	2364      	movs	r3, #100	; 0x64
 8003502:	220a      	movs	r2, #10
 8003504:	f003 fcf8 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage > -150.1 && voltage < -149.9) {
 8003508:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800350a:	f7ff fa19 	bl	8002940 <__aeabi_f2d>
 800350e:	4a21      	ldr	r2, [pc, #132]	; (8003594 <HAL_UART_RxCpltCallback+0xa78>)
 8003510:	4b26      	ldr	r3, [pc, #152]	; (80035ac <HAL_UART_RxCpltCallback+0xa90>)
 8003512:	f7fc ffb5 	bl	8000480 <__aeabi_dcmpgt>
 8003516:	1e03      	subs	r3, r0, #0
 8003518:	d00e      	beq.n	8003538 <HAL_UART_RxCpltCallback+0xa1c>
 800351a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800351c:	f7ff fa10 	bl	8002940 <__aeabi_f2d>
 8003520:	4a23      	ldr	r2, [pc, #140]	; (80035b0 <HAL_UART_RxCpltCallback+0xa94>)
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <HAL_UART_RxCpltCallback+0xa98>)
 8003524:	f7fc ff98 	bl	8000458 <__aeabi_dcmplt>
 8003528:	1e03      	subs	r3, r0, #0
 800352a:	d005      	beq.n	8003538 <HAL_UART_RxCpltCallback+0xa1c>
						gpio_flags[i] = 1;
 800352c:	4b12      	ldr	r3, [pc, #72]	; (8003578 <HAL_UART_RxCpltCallback+0xa5c>)
 800352e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003530:	0092      	lsls	r2, r2, #2
 8003532:	2101      	movs	r1, #1
 8003534:	50d1      	str	r1, [r2, r3]
 8003536:	e1f2      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					} else if (voltage != 0) {
 8003538:	2100      	movs	r1, #0
 800353a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800353c:	f7fc ffc0 	bl	80004c0 <__aeabi_fcmpeq>
 8003540:	1e03      	subs	r3, r0, #0
 8003542:	d000      	beq.n	8003546 <HAL_UART_RxCpltCallback+0xa2a>
 8003544:	e1eb      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <HAL_UART_RxCpltCallback+0xa5c>)
 8003548:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800354a:	0092      	lsls	r2, r2, #2
 800354c:	2100      	movs	r1, #0
 800354e:	50d1      	str	r1, [r2, r3]
 8003550:	e1e5      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	e734d9b4 	.word	0xe734d9b4
 8003558:	3f4a680c 	.word	0x3f4a680c
 800355c:	0800cd90 	.word	0x0800cd90
 8003560:	0800cdf8 	.word	0x0800cdf8
 8003564:	200002f0 	.word	0x200002f0
 8003568:	66666666 	.word	0x66666666
 800356c:	c0146666 	.word	0xc0146666
 8003570:	9999999a 	.word	0x9999999a
 8003574:	c0139999 	.word	0xc0139999
 8003578:	20000428 	.word	0x20000428
 800357c:	0800ce04 	.word	0x0800ce04
 8003580:	0800ce10 	.word	0x0800ce10
 8003584:	40146666 	.word	0x40146666
 8003588:	40139999 	.word	0x40139999
 800358c:	bffa6666 	.word	0xbffa6666
 8003590:	0800ce1c 	.word	0x0800ce1c
 8003594:	33333333 	.word	0x33333333
 8003598:	c00b3333 	.word	0xc00b3333
 800359c:	c0099999 	.word	0xc0099999
 80035a0:	eb851eb8 	.word	0xeb851eb8
 80035a4:	3ffab851 	.word	0x3ffab851
 80035a8:	0800ce28 	.word	0x0800ce28
 80035ac:	c062c333 	.word	0xc062c333
 80035b0:	cccccccd 	.word	0xcccccccd
 80035b4:	c062bccc 	.word	0xc062bccc
					}

				} else if (i == 12) {
 80035b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ba:	2b0c      	cmp	r3, #12
 80035bc:	d14e      	bne.n	800365c <HAL_UART_RxCpltCallback+0xb40>
					float voltage = adc * (3.3 / 4095) * -1.05;
 80035be:	2358      	movs	r3, #88	; 0x58
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7ff f965 	bl	8002894 <__aeabi_i2d>
 80035ca:	4aba      	ldr	r2, [pc, #744]	; (80038b4 <HAL_UART_RxCpltCallback+0xd98>)
 80035cc:	4bba      	ldr	r3, [pc, #744]	; (80038b8 <HAL_UART_RxCpltCallback+0xd9c>)
 80035ce:	f7fe fb0f 	bl	8001bf0 <__aeabi_dmul>
 80035d2:	0002      	movs	r2, r0
 80035d4:	000b      	movs	r3, r1
 80035d6:	0010      	movs	r0, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	4ab8      	ldr	r2, [pc, #736]	; (80038bc <HAL_UART_RxCpltCallback+0xda0>)
 80035dc:	4bb8      	ldr	r3, [pc, #736]	; (80038c0 <HAL_UART_RxCpltCallback+0xda4>)
 80035de:	f7fe fb07 	bl	8001bf0 <__aeabi_dmul>
 80035e2:	0002      	movs	r2, r0
 80035e4:	000b      	movs	r3, r1
 80035e6:	0010      	movs	r0, r2
 80035e8:	0019      	movs	r1, r3
 80035ea:	f7ff f9f1 	bl	80029d0 <__aeabi_d2f>
 80035ee:	1c03      	adds	r3, r0, #0
 80035f0:	647b      	str	r3, [r7, #68]	; 0x44
//					 voltage *= 5;
					sprintf(value, "%f", voltage);
 80035f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80035f4:	f7ff f9a4 	bl	8002940 <__aeabi_f2d>
 80035f8:	0002      	movs	r2, r0
 80035fa:	000b      	movs	r3, r1
 80035fc:	49b1      	ldr	r1, [pc, #708]	; (80038c4 <HAL_UART_RxCpltCallback+0xda8>)
 80035fe:	2008      	movs	r0, #8
 8003600:	1838      	adds	r0, r7, r0
 8003602:	f005 fcd3 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "n3v3_mon PC3", 12, 100);
 8003606:	49b0      	ldr	r1, [pc, #704]	; (80038c8 <HAL_UART_RxCpltCallback+0xdac>)
 8003608:	48b0      	ldr	r0, [pc, #704]	; (80038cc <HAL_UART_RxCpltCallback+0xdb0>)
 800360a:	2364      	movs	r3, #100	; 0x64
 800360c:	220c      	movs	r2, #12
 800360e:	f003 fc73 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage < 15.1 && voltage > 14.9) {
 8003612:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003614:	f7ff f994 	bl	8002940 <__aeabi_f2d>
 8003618:	4aad      	ldr	r2, [pc, #692]	; (80038d0 <HAL_UART_RxCpltCallback+0xdb4>)
 800361a:	4bae      	ldr	r3, [pc, #696]	; (80038d4 <HAL_UART_RxCpltCallback+0xdb8>)
 800361c:	f7fc ff1c 	bl	8000458 <__aeabi_dcmplt>
 8003620:	1e03      	subs	r3, r0, #0
 8003622:	d00e      	beq.n	8003642 <HAL_UART_RxCpltCallback+0xb26>
 8003624:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003626:	f7ff f98b 	bl	8002940 <__aeabi_f2d>
 800362a:	4aa4      	ldr	r2, [pc, #656]	; (80038bc <HAL_UART_RxCpltCallback+0xda0>)
 800362c:	4baa      	ldr	r3, [pc, #680]	; (80038d8 <HAL_UART_RxCpltCallback+0xdbc>)
 800362e:	f7fc ff27 	bl	8000480 <__aeabi_dcmpgt>
 8003632:	1e03      	subs	r3, r0, #0
 8003634:	d005      	beq.n	8003642 <HAL_UART_RxCpltCallback+0xb26>
						gpio_flags[i] = 1;
 8003636:	4ba9      	ldr	r3, [pc, #676]	; (80038dc <HAL_UART_RxCpltCallback+0xdc0>)
 8003638:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800363a:	0092      	lsls	r2, r2, #2
 800363c:	2101      	movs	r1, #1
 800363e:	50d1      	str	r1, [r2, r3]
 8003640:	e16d      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					} else if (voltage != 0) {
 8003642:	2100      	movs	r1, #0
 8003644:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003646:	f7fc ff3b 	bl	80004c0 <__aeabi_fcmpeq>
 800364a:	1e03      	subs	r3, r0, #0
 800364c:	d000      	beq.n	8003650 <HAL_UART_RxCpltCallback+0xb34>
 800364e:	e166      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 8003650:	4ba2      	ldr	r3, [pc, #648]	; (80038dc <HAL_UART_RxCpltCallback+0xdc0>)
 8003652:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003654:	0092      	lsls	r2, r2, #2
 8003656:	2100      	movs	r1, #0
 8003658:	50d1      	str	r1, [r2, r3]
 800365a:	e160      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					}

				} else if (i == 13) {
 800365c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800365e:	2b0d      	cmp	r3, #13
 8003660:	d14e      	bne.n	8003700 <HAL_UART_RxCpltCallback+0xbe4>
					float voltage = adc * (3.3 / 4095) * 1.67;
 8003662:	2358      	movs	r3, #88	; 0x58
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	0018      	movs	r0, r3
 800366a:	f7ff f913 	bl	8002894 <__aeabi_i2d>
 800366e:	4a91      	ldr	r2, [pc, #580]	; (80038b4 <HAL_UART_RxCpltCallback+0xd98>)
 8003670:	4b91      	ldr	r3, [pc, #580]	; (80038b8 <HAL_UART_RxCpltCallback+0xd9c>)
 8003672:	f7fe fabd 	bl	8001bf0 <__aeabi_dmul>
 8003676:	0002      	movs	r2, r0
 8003678:	000b      	movs	r3, r1
 800367a:	0010      	movs	r0, r2
 800367c:	0019      	movs	r1, r3
 800367e:	4a98      	ldr	r2, [pc, #608]	; (80038e0 <HAL_UART_RxCpltCallback+0xdc4>)
 8003680:	4b98      	ldr	r3, [pc, #608]	; (80038e4 <HAL_UART_RxCpltCallback+0xdc8>)
 8003682:	f7fe fab5 	bl	8001bf0 <__aeabi_dmul>
 8003686:	0002      	movs	r2, r0
 8003688:	000b      	movs	r3, r1
 800368a:	0010      	movs	r0, r2
 800368c:	0019      	movs	r1, r3
 800368e:	f7ff f99f 	bl	80029d0 <__aeabi_d2f>
 8003692:	1c03      	adds	r3, r0, #0
 8003694:	64bb      	str	r3, [r7, #72]	; 0x48
					sprintf(value, "%f", voltage);
 8003696:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003698:	f7ff f952 	bl	8002940 <__aeabi_f2d>
 800369c:	0002      	movs	r2, r0
 800369e:	000b      	movs	r3, r1
 80036a0:	4988      	ldr	r1, [pc, #544]	; (80038c4 <HAL_UART_RxCpltCallback+0xda8>)
 80036a2:	2008      	movs	r0, #8
 80036a4:	1838      	adds	r0, r7, r0
 80036a6:	f005 fc81 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "5vref_mon PC4", 13, 100);
 80036aa:	498f      	ldr	r1, [pc, #572]	; (80038e8 <HAL_UART_RxCpltCallback+0xdcc>)
 80036ac:	4887      	ldr	r0, [pc, #540]	; (80038cc <HAL_UART_RxCpltCallback+0xdb0>)
 80036ae:	2364      	movs	r3, #100	; 0x64
 80036b0:	220d      	movs	r2, #13
 80036b2:	f003 fc21 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 80036b6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80036b8:	f7ff f942 	bl	8002940 <__aeabi_f2d>
 80036bc:	4a84      	ldr	r2, [pc, #528]	; (80038d0 <HAL_UART_RxCpltCallback+0xdb4>)
 80036be:	4b8b      	ldr	r3, [pc, #556]	; (80038ec <HAL_UART_RxCpltCallback+0xdd0>)
 80036c0:	f7fc feca 	bl	8000458 <__aeabi_dcmplt>
 80036c4:	1e03      	subs	r3, r0, #0
 80036c6:	d00e      	beq.n	80036e6 <HAL_UART_RxCpltCallback+0xbca>
 80036c8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80036ca:	f7ff f939 	bl	8002940 <__aeabi_f2d>
 80036ce:	4a88      	ldr	r2, [pc, #544]	; (80038f0 <HAL_UART_RxCpltCallback+0xdd4>)
 80036d0:	4b88      	ldr	r3, [pc, #544]	; (80038f4 <HAL_UART_RxCpltCallback+0xdd8>)
 80036d2:	f7fc fed5 	bl	8000480 <__aeabi_dcmpgt>
 80036d6:	1e03      	subs	r3, r0, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_UART_RxCpltCallback+0xbca>
						gpio_flags[i] = 1;
 80036da:	4b80      	ldr	r3, [pc, #512]	; (80038dc <HAL_UART_RxCpltCallback+0xdc0>)
 80036dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036de:	0092      	lsls	r2, r2, #2
 80036e0:	2101      	movs	r1, #1
 80036e2:	50d1      	str	r1, [r2, r3]
 80036e4:	e11b      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					} else if (voltage != 0) {
 80036e6:	2100      	movs	r1, #0
 80036e8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80036ea:	f7fc fee9 	bl	80004c0 <__aeabi_fcmpeq>
 80036ee:	1e03      	subs	r3, r0, #0
 80036f0:	d000      	beq.n	80036f4 <HAL_UART_RxCpltCallback+0xbd8>
 80036f2:	e114      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 80036f4:	4b79      	ldr	r3, [pc, #484]	; (80038dc <HAL_UART_RxCpltCallback+0xdc0>)
 80036f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036f8:	0092      	lsls	r2, r2, #2
 80036fa:	2100      	movs	r1, #0
 80036fc:	50d1      	str	r1, [r2, r3]
 80036fe:	e10e      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					}
				} else if (i == 14) { // for i = 13 you read the internal temperature
 8003700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003702:	2b0e      	cmp	r3, #14
 8003704:	d14e      	bne.n	80037a4 <HAL_UART_RxCpltCallback+0xc88>
					// Should be 1.5ish for our actual Signal Board
					float voltage = adc * (3.3 / 4095) * 5;
 8003706:	2358      	movs	r3, #88	; 0x58
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	0018      	movs	r0, r3
 800370e:	f7ff f8c1 	bl	8002894 <__aeabi_i2d>
 8003712:	4a68      	ldr	r2, [pc, #416]	; (80038b4 <HAL_UART_RxCpltCallback+0xd98>)
 8003714:	4b68      	ldr	r3, [pc, #416]	; (80038b8 <HAL_UART_RxCpltCallback+0xd9c>)
 8003716:	f7fe fa6b 	bl	8001bf0 <__aeabi_dmul>
 800371a:	0002      	movs	r2, r0
 800371c:	000b      	movs	r3, r1
 800371e:	0010      	movs	r0, r2
 8003720:	0019      	movs	r1, r3
 8003722:	2200      	movs	r2, #0
 8003724:	4b74      	ldr	r3, [pc, #464]	; (80038f8 <HAL_UART_RxCpltCallback+0xddc>)
 8003726:	f7fe fa63 	bl	8001bf0 <__aeabi_dmul>
 800372a:	0002      	movs	r2, r0
 800372c:	000b      	movs	r3, r1
 800372e:	0010      	movs	r0, r2
 8003730:	0019      	movs	r1, r3
 8003732:	f7ff f94d 	bl	80029d0 <__aeabi_d2f>
 8003736:	1c03      	adds	r3, r0, #0
 8003738:	64fb      	str	r3, [r7, #76]	; 0x4c
					sprintf(value, "%f", voltage);
 800373a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800373c:	f7ff f900 	bl	8002940 <__aeabi_f2d>
 8003740:	0002      	movs	r2, r0
 8003742:	000b      	movs	r3, r1
 8003744:	495f      	ldr	r1, [pc, #380]	; (80038c4 <HAL_UART_RxCpltCallback+0xda8>)
 8003746:	2008      	movs	r0, #8
 8003748:	1838      	adds	r0, r7, r0
 800374a:	f005 fc2f 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "15v_mon PC5", 11, 100);
 800374e:	496b      	ldr	r1, [pc, #428]	; (80038fc <HAL_UART_RxCpltCallback+0xde0>)
 8003750:	485e      	ldr	r0, [pc, #376]	; (80038cc <HAL_UART_RxCpltCallback+0xdb0>)
 8003752:	2364      	movs	r3, #100	; 0x64
 8003754:	220b      	movs	r2, #11
 8003756:	f003 fbcf 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 800375a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800375c:	f7ff f8f0 	bl	8002940 <__aeabi_f2d>
 8003760:	4a5b      	ldr	r2, [pc, #364]	; (80038d0 <HAL_UART_RxCpltCallback+0xdb4>)
 8003762:	4b62      	ldr	r3, [pc, #392]	; (80038ec <HAL_UART_RxCpltCallback+0xdd0>)
 8003764:	f7fc fe78 	bl	8000458 <__aeabi_dcmplt>
 8003768:	1e03      	subs	r3, r0, #0
 800376a:	d00e      	beq.n	800378a <HAL_UART_RxCpltCallback+0xc6e>
 800376c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800376e:	f7ff f8e7 	bl	8002940 <__aeabi_f2d>
 8003772:	4a5f      	ldr	r2, [pc, #380]	; (80038f0 <HAL_UART_RxCpltCallback+0xdd4>)
 8003774:	4b5f      	ldr	r3, [pc, #380]	; (80038f4 <HAL_UART_RxCpltCallback+0xdd8>)
 8003776:	f7fc fe83 	bl	8000480 <__aeabi_dcmpgt>
 800377a:	1e03      	subs	r3, r0, #0
 800377c:	d005      	beq.n	800378a <HAL_UART_RxCpltCallback+0xc6e>
						gpio_flags[i] = 1;
 800377e:	4b57      	ldr	r3, [pc, #348]	; (80038dc <HAL_UART_RxCpltCallback+0xdc0>)
 8003780:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003782:	0092      	lsls	r2, r2, #2
 8003784:	2101      	movs	r1, #1
 8003786:	50d1      	str	r1, [r2, r3]
 8003788:	e0c9      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					} else if (voltage != 0) {
 800378a:	2100      	movs	r1, #0
 800378c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800378e:	f7fc fe97 	bl	80004c0 <__aeabi_fcmpeq>
 8003792:	1e03      	subs	r3, r0, #0
 8003794:	d000      	beq.n	8003798 <HAL_UART_RxCpltCallback+0xc7c>
 8003796:	e0c2      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 8003798:	4b50      	ldr	r3, [pc, #320]	; (80038dc <HAL_UART_RxCpltCallback+0xdc0>)
 800379a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800379c:	0092      	lsls	r2, r2, #2
 800379e:	2100      	movs	r1, #0
 80037a0:	50d1      	str	r1, [r2, r3]
 80037a2:	e0bc      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					}

				} else if (i == 15) { // for i = 13 you read the internal temperature
 80037a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	d146      	bne.n	8003838 <HAL_UART_RxCpltCallback+0xd1c>
					// Should be 1.5ish for our actual Signal Board
					float voltage = adc * (3.3 / 4095);
 80037aa:	2358      	movs	r3, #88	; 0x58
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7ff f86f 	bl	8002894 <__aeabi_i2d>
 80037b6:	4a3f      	ldr	r2, [pc, #252]	; (80038b4 <HAL_UART_RxCpltCallback+0xd98>)
 80037b8:	4b3f      	ldr	r3, [pc, #252]	; (80038b8 <HAL_UART_RxCpltCallback+0xd9c>)
 80037ba:	f7fe fa19 	bl	8001bf0 <__aeabi_dmul>
 80037be:	0002      	movs	r2, r0
 80037c0:	000b      	movs	r3, r1
 80037c2:	0010      	movs	r0, r2
 80037c4:	0019      	movs	r1, r3
 80037c6:	f7ff f903 	bl	80029d0 <__aeabi_d2f>
 80037ca:	1c03      	adds	r3, r0, #0
 80037cc:	653b      	str	r3, [r7, #80]	; 0x50
					sprintf(value, "%f", voltage);
 80037ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80037d0:	f7ff f8b6 	bl	8002940 <__aeabi_f2d>
 80037d4:	0002      	movs	r2, r0
 80037d6:	000b      	movs	r3, r1
 80037d8:	493a      	ldr	r1, [pc, #232]	; (80038c4 <HAL_UART_RxCpltCallback+0xda8>)
 80037da:	2008      	movs	r0, #8
 80037dc:	1838      	adds	r0, r7, r0
 80037de:	f005 fbe5 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "TMPSENSE", 8, 100);
 80037e2:	4947      	ldr	r1, [pc, #284]	; (8003900 <HAL_UART_RxCpltCallback+0xde4>)
 80037e4:	4839      	ldr	r0, [pc, #228]	; (80038cc <HAL_UART_RxCpltCallback+0xdb0>)
 80037e6:	2364      	movs	r3, #100	; 0x64
 80037e8:	2208      	movs	r2, #8
 80037ea:	f003 fb85 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 80037ee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80037f0:	f7ff f8a6 	bl	8002940 <__aeabi_f2d>
 80037f4:	4a36      	ldr	r2, [pc, #216]	; (80038d0 <HAL_UART_RxCpltCallback+0xdb4>)
 80037f6:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <HAL_UART_RxCpltCallback+0xdd0>)
 80037f8:	f7fc fe2e 	bl	8000458 <__aeabi_dcmplt>
 80037fc:	1e03      	subs	r3, r0, #0
 80037fe:	d00e      	beq.n	800381e <HAL_UART_RxCpltCallback+0xd02>
 8003800:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003802:	f7ff f89d 	bl	8002940 <__aeabi_f2d>
 8003806:	4a3a      	ldr	r2, [pc, #232]	; (80038f0 <HAL_UART_RxCpltCallback+0xdd4>)
 8003808:	4b3a      	ldr	r3, [pc, #232]	; (80038f4 <HAL_UART_RxCpltCallback+0xdd8>)
 800380a:	f7fc fe39 	bl	8000480 <__aeabi_dcmpgt>
 800380e:	1e03      	subs	r3, r0, #0
 8003810:	d005      	beq.n	800381e <HAL_UART_RxCpltCallback+0xd02>
						gpio_flags[i] = 1;
 8003812:	4b32      	ldr	r3, [pc, #200]	; (80038dc <HAL_UART_RxCpltCallback+0xdc0>)
 8003814:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003816:	0092      	lsls	r2, r2, #2
 8003818:	2101      	movs	r1, #1
 800381a:	50d1      	str	r1, [r2, r3]
 800381c:	e07f      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					} else if (voltage != 0) {
 800381e:	2100      	movs	r1, #0
 8003820:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003822:	f7fc fe4d 	bl	80004c0 <__aeabi_fcmpeq>
 8003826:	1e03      	subs	r3, r0, #0
 8003828:	d000      	beq.n	800382c <HAL_UART_RxCpltCallback+0xd10>
 800382a:	e078      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 800382c:	4b2b      	ldr	r3, [pc, #172]	; (80038dc <HAL_UART_RxCpltCallback+0xdc0>)
 800382e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003830:	0092      	lsls	r2, r2, #2
 8003832:	2100      	movs	r1, #0
 8003834:	50d1      	str	r1, [r2, r3]
 8003836:	e072      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					}

				} else if (i == 16) { // for i = 14 you read the internal voltage
 8003838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800383a:	2b10      	cmp	r3, #16
 800383c:	d16f      	bne.n	800391e <HAL_UART_RxCpltCallback+0xe02>
					// Should be 3.3 for our actual Signal Board
					float voltage = adc * (3.3 / 4095);
 800383e:	2358      	movs	r3, #88	; 0x58
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	0018      	movs	r0, r3
 8003846:	f7ff f825 	bl	8002894 <__aeabi_i2d>
 800384a:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <HAL_UART_RxCpltCallback+0xd98>)
 800384c:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <HAL_UART_RxCpltCallback+0xd9c>)
 800384e:	f7fe f9cf 	bl	8001bf0 <__aeabi_dmul>
 8003852:	0002      	movs	r2, r0
 8003854:	000b      	movs	r3, r1
 8003856:	0010      	movs	r0, r2
 8003858:	0019      	movs	r1, r3
 800385a:	f7ff f8b9 	bl	80029d0 <__aeabi_d2f>
 800385e:	1c03      	adds	r3, r0, #0
 8003860:	657b      	str	r3, [r7, #84]	; 0x54
					sprintf(value, "%f", voltage);
 8003862:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003864:	f7ff f86c 	bl	8002940 <__aeabi_f2d>
 8003868:	0002      	movs	r2, r0
 800386a:	000b      	movs	r3, r1
 800386c:	4915      	ldr	r1, [pc, #84]	; (80038c4 <HAL_UART_RxCpltCallback+0xda8>)
 800386e:	2008      	movs	r0, #8
 8003870:	1838      	adds	r0, r7, r0
 8003872:	f005 fb9b 	bl	8008fac <siprintf>
					HAL_UART_Transmit(&huart1, "VREFINT", 7, 100);
 8003876:	4923      	ldr	r1, [pc, #140]	; (8003904 <HAL_UART_RxCpltCallback+0xde8>)
 8003878:	4814      	ldr	r0, [pc, #80]	; (80038cc <HAL_UART_RxCpltCallback+0xdb0>)
 800387a:	2364      	movs	r3, #100	; 0x64
 800387c:	2207      	movs	r2, #7
 800387e:	f003 fb3b 	bl	8006ef8 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8003882:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003884:	f7ff f85c 	bl	8002940 <__aeabi_f2d>
 8003888:	4a11      	ldr	r2, [pc, #68]	; (80038d0 <HAL_UART_RxCpltCallback+0xdb4>)
 800388a:	4b18      	ldr	r3, [pc, #96]	; (80038ec <HAL_UART_RxCpltCallback+0xdd0>)
 800388c:	f7fc fde4 	bl	8000458 <__aeabi_dcmplt>
 8003890:	1e03      	subs	r3, r0, #0
 8003892:	d039      	beq.n	8003908 <HAL_UART_RxCpltCallback+0xdec>
 8003894:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003896:	f7ff f853 	bl	8002940 <__aeabi_f2d>
 800389a:	4a15      	ldr	r2, [pc, #84]	; (80038f0 <HAL_UART_RxCpltCallback+0xdd4>)
 800389c:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <HAL_UART_RxCpltCallback+0xdd8>)
 800389e:	f7fc fdef 	bl	8000480 <__aeabi_dcmpgt>
 80038a2:	1e03      	subs	r3, r0, #0
 80038a4:	d030      	beq.n	8003908 <HAL_UART_RxCpltCallback+0xdec>
						gpio_flags[i] = 1;
 80038a6:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <HAL_UART_RxCpltCallback+0xdc0>)
 80038a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038aa:	0092      	lsls	r2, r2, #2
 80038ac:	2101      	movs	r1, #1
 80038ae:	50d1      	str	r1, [r2, r3]
 80038b0:	e035      	b.n	800391e <HAL_UART_RxCpltCallback+0xe02>
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	e734d9b4 	.word	0xe734d9b4
 80038b8:	3f4a680c 	.word	0x3f4a680c
 80038bc:	cccccccd 	.word	0xcccccccd
 80038c0:	bff0cccc 	.word	0xbff0cccc
 80038c4:	0800cd90 	.word	0x0800cd90
 80038c8:	0800ce34 	.word	0x0800ce34
 80038cc:	200002f0 	.word	0x200002f0
 80038d0:	33333333 	.word	0x33333333
 80038d4:	402e3333 	.word	0x402e3333
 80038d8:	402dcccc 	.word	0x402dcccc
 80038dc:	20000428 	.word	0x20000428
 80038e0:	eb851eb8 	.word	0xeb851eb8
 80038e4:	3ffab851 	.word	0x3ffab851
 80038e8:	0800ce44 	.word	0x0800ce44
 80038ec:	400b3333 	.word	0x400b3333
 80038f0:	9999999a 	.word	0x9999999a
 80038f4:	40099999 	.word	0x40099999
 80038f8:	40140000 	.word	0x40140000
 80038fc:	0800ce54 	.word	0x0800ce54
 8003900:	0800ce60 	.word	0x0800ce60
 8003904:	0800ce6c 	.word	0x0800ce6c
					} else if (voltage != 0) {
 8003908:	2100      	movs	r1, #0
 800390a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800390c:	f7fc fdd8 	bl	80004c0 <__aeabi_fcmpeq>
 8003910:	1e03      	subs	r3, r0, #0
 8003912:	d104      	bne.n	800391e <HAL_UART_RxCpltCallback+0xe02>
						gpio_flags[i] = 0;
 8003914:	4bb5      	ldr	r3, [pc, #724]	; (8003bec <HAL_UART_RxCpltCallback+0x10d0>)
 8003916:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003918:	0092      	lsls	r2, r2, #2
 800391a:	2100      	movs	r1, #0
 800391c:	50d1      	str	r1, [r2, r3]
					}

				}

				HAL_UART_Transmit(&huart1, ": ", 2, 100);
 800391e:	49b4      	ldr	r1, [pc, #720]	; (8003bf0 <HAL_UART_RxCpltCallback+0x10d4>)
 8003920:	48b4      	ldr	r0, [pc, #720]	; (8003bf4 <HAL_UART_RxCpltCallback+0x10d8>)
 8003922:	2364      	movs	r3, #100	; 0x64
 8003924:	2202      	movs	r2, #2
 8003926:	f003 fae7 	bl	8006ef8 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, value, 8, 100);
 800392a:	2308      	movs	r3, #8
 800392c:	18f9      	adds	r1, r7, r3
 800392e:	48b1      	ldr	r0, [pc, #708]	; (8003bf4 <HAL_UART_RxCpltCallback+0x10d8>)
 8003930:	2364      	movs	r3, #100	; 0x64
 8003932:	2208      	movs	r2, #8
 8003934:	f003 fae0 	bl	8006ef8 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8003938:	49af      	ldr	r1, [pc, #700]	; (8003bf8 <HAL_UART_RxCpltCallback+0x10dc>)
 800393a:	48ae      	ldr	r0, [pc, #696]	; (8003bf4 <HAL_UART_RxCpltCallback+0x10d8>)
 800393c:	2364      	movs	r3, #100	; 0x64
 800393e:	2202      	movs	r2, #2
 8003940:	f003 fada 	bl	8006ef8 <HAL_UART_Transmit>
			for (int i = 0; i < adcChannelCount; i++) {
 8003944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003946:	3301      	adds	r3, #1
 8003948:	65fb      	str	r3, [r7, #92]	; 0x5c
 800394a:	2211      	movs	r2, #17
 800394c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800394e:	4293      	cmp	r3, r2
 8003950:	da01      	bge.n	8003956 <HAL_UART_RxCpltCallback+0xe3a>
 8003952:	f7ff f9c3 	bl	8002cdc <HAL_UART_RxCpltCallback+0x1c0>

			}

			HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8003956:	49a8      	ldr	r1, [pc, #672]	; (8003bf8 <HAL_UART_RxCpltCallback+0x10dc>)
 8003958:	48a6      	ldr	r0, [pc, #664]	; (8003bf4 <HAL_UART_RxCpltCallback+0x10d8>)
 800395a:	2364      	movs	r3, #100	; 0x64
 800395c:	2202      	movs	r2, #2
 800395e:	f003 facb 	bl	8006ef8 <HAL_UART_Transmit>

			 // Tell ADT7410_1 that we want to read from the temperature register
			 buf[0] = REG_TEMP;
 8003962:	2200      	movs	r2, #0
 8003964:	4ba5      	ldr	r3, [pc, #660]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 8003966:	701a      	strb	r2, [r3, #0]
			 ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1, 1000);
 8003968:	2390      	movs	r3, #144	; 0x90
 800396a:	b299      	uxth	r1, r3
 800396c:	4aa3      	ldr	r2, [pc, #652]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 800396e:	48a4      	ldr	r0, [pc, #656]	; (8003c00 <HAL_UART_RxCpltCallback+0x10e4>)
 8003970:	23fa      	movs	r3, #250	; 0xfa
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	2301      	movs	r3, #1
 8003978:	f002 f880 	bl	8005a7c <HAL_I2C_Master_Transmit>
 800397c:	0003      	movs	r3, r0
 800397e:	001a      	movs	r2, r3
 8003980:	4ba0      	ldr	r3, [pc, #640]	; (8003c04 <HAL_UART_RxCpltCallback+0x10e8>)
 8003982:	701a      	strb	r2, [r3, #0]
			 //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
			 if (ret != HAL_OK) {
 8003984:	4b9f      	ldr	r3, [pc, #636]	; (8003c04 <HAL_UART_RxCpltCallback+0x10e8>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_UART_RxCpltCallback+0xe82>
			 strcpy((char*) buf, "Error Tx\r\n");
 800398c:	4b9b      	ldr	r3, [pc, #620]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 800398e:	4a9e      	ldr	r2, [pc, #632]	; (8003c08 <HAL_UART_RxCpltCallback+0x10ec>)
 8003990:	ca03      	ldmia	r2!, {r0, r1}
 8003992:	c303      	stmia	r3!, {r0, r1}
 8003994:	8811      	ldrh	r1, [r2, #0]
 8003996:	8019      	strh	r1, [r3, #0]
 8003998:	7892      	ldrb	r2, [r2, #2]
 800399a:	709a      	strb	r2, [r3, #2]
 800399c:	e073      	b.n	8003a86 <HAL_UART_RxCpltCallback+0xf6a>
			 } else {

			 //				 Read 2 bytes from the temperature register
			 ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2, 1000);
 800399e:	2390      	movs	r3, #144	; 0x90
 80039a0:	b299      	uxth	r1, r3
 80039a2:	4a96      	ldr	r2, [pc, #600]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 80039a4:	4896      	ldr	r0, [pc, #600]	; (8003c00 <HAL_UART_RxCpltCallback+0x10e4>)
 80039a6:	23fa      	movs	r3, #250	; 0xfa
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2302      	movs	r3, #2
 80039ae:	f002 f96d 	bl	8005c8c <HAL_I2C_Master_Receive>
 80039b2:	0003      	movs	r3, r0
 80039b4:	001a      	movs	r2, r3
 80039b6:	4b93      	ldr	r3, [pc, #588]	; (8003c04 <HAL_UART_RxCpltCallback+0x10e8>)
 80039b8:	701a      	strb	r2, [r3, #0]
			 if (ret != HAL_OK) {
 80039ba:	4b92      	ldr	r3, [pc, #584]	; (8003c04 <HAL_UART_RxCpltCallback+0x10e8>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <HAL_UART_RxCpltCallback+0xeb8>
			 strcpy((char*) buf, "Error Rx\r\n");
 80039c2:	4b8e      	ldr	r3, [pc, #568]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 80039c4:	4a91      	ldr	r2, [pc, #580]	; (8003c0c <HAL_UART_RxCpltCallback+0x10f0>)
 80039c6:	ca03      	ldmia	r2!, {r0, r1}
 80039c8:	c303      	stmia	r3!, {r0, r1}
 80039ca:	8811      	ldrh	r1, [r2, #0]
 80039cc:	8019      	strh	r1, [r3, #0]
 80039ce:	7892      	ldrb	r2, [r2, #2]
 80039d0:	709a      	strb	r2, [r3, #2]
 80039d2:	e058      	b.n	8003a86 <HAL_UART_RxCpltCallback+0xf6a>
			 } else {

			 val = (int16_t) (buf[0] << 8);
 80039d4:	4b89      	ldr	r3, [pc, #548]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	b21a      	sxth	r2, r3
 80039dc:	4b8c      	ldr	r3, [pc, #560]	; (8003c10 <HAL_UART_RxCpltCallback+0x10f4>)
 80039de:	801a      	strh	r2, [r3, #0]
			 val = (val | buf[1]) >> 3;
 80039e0:	4b8b      	ldr	r3, [pc, #556]	; (8003c10 <HAL_UART_RxCpltCallback+0x10f4>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	5e9b      	ldrsh	r3, [r3, r2]
 80039e6:	001a      	movs	r2, r3
 80039e8:	4b84      	ldr	r3, [pc, #528]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 80039ea:	785b      	ldrb	r3, [r3, #1]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	10db      	asrs	r3, r3, #3
 80039f0:	b21a      	sxth	r2, r3
 80039f2:	4b87      	ldr	r3, [pc, #540]	; (8003c10 <HAL_UART_RxCpltCallback+0x10f4>)
 80039f4:	801a      	strh	r2, [r3, #0]

			 // Convert to 2's complement, since temperature can be negative
			 if (val > 0x7FF) {
 80039f6:	4b86      	ldr	r3, [pc, #536]	; (8003c10 <HAL_UART_RxCpltCallback+0x10f4>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	5e9a      	ldrsh	r2, [r3, r2]
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	429a      	cmp	r2, r3
 8003a02:	db07      	blt.n	8003a14 <HAL_UART_RxCpltCallback+0xef8>
			 val |= 0xF000;
 8003a04:	4b82      	ldr	r3, [pc, #520]	; (8003c10 <HAL_UART_RxCpltCallback+0x10f4>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	5e9b      	ldrsh	r3, [r3, r2]
 8003a0a:	4a82      	ldr	r2, [pc, #520]	; (8003c14 <HAL_UART_RxCpltCallback+0x10f8>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	b21a      	sxth	r2, r3
 8003a10:	4b7f      	ldr	r3, [pc, #508]	; (8003c10 <HAL_UART_RxCpltCallback+0x10f4>)
 8003a12:	801a      	strh	r2, [r3, #0]
			 }

			 // Convert to float temperature value (Celsius)
			 temp_c = val * 0.0625;
 8003a14:	4b7e      	ldr	r3, [pc, #504]	; (8003c10 <HAL_UART_RxCpltCallback+0x10f4>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	5e9b      	ldrsh	r3, [r3, r2]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7fe ff3a 	bl	8002894 <__aeabi_i2d>
 8003a20:	2200      	movs	r2, #0
 8003a22:	4b7d      	ldr	r3, [pc, #500]	; (8003c18 <HAL_UART_RxCpltCallback+0x10fc>)
 8003a24:	f7fe f8e4 	bl	8001bf0 <__aeabi_dmul>
 8003a28:	0002      	movs	r2, r0
 8003a2a:	000b      	movs	r3, r1
 8003a2c:	0010      	movs	r0, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	f7fe ffce 	bl	80029d0 <__aeabi_d2f>
 8003a34:	1c02      	adds	r2, r0, #0
 8003a36:	4b79      	ldr	r3, [pc, #484]	; (8003c1c <HAL_UART_RxCpltCallback+0x1100>)
 8003a38:	601a      	str	r2, [r3, #0]

			 // Convert temperature to decimal value
			 temp_c *= 100;
 8003a3a:	4b78      	ldr	r3, [pc, #480]	; (8003c1c <HAL_UART_RxCpltCallback+0x1100>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4978      	ldr	r1, [pc, #480]	; (8003c20 <HAL_UART_RxCpltCallback+0x1104>)
 8003a40:	1c18      	adds	r0, r3, #0
 8003a42:	f7fc fea3 	bl	800078c <__aeabi_fmul>
 8003a46:	1c03      	adds	r3, r0, #0
 8003a48:	1c1a      	adds	r2, r3, #0
 8003a4a:	4b74      	ldr	r3, [pc, #464]	; (8003c1c <HAL_UART_RxCpltCallback+0x1100>)
 8003a4c:	601a      	str	r2, [r3, #0]

			 sprintf((char*) buf, "ADT7410_1: %u.%u C\r\n",
			 ((unsigned int) temp_c / 100),
 8003a4e:	4b73      	ldr	r3, [pc, #460]	; (8003c1c <HAL_UART_RxCpltCallback+0x1100>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	1c18      	adds	r0, r3, #0
 8003a54:	f7fc fd62 	bl	800051c <__aeabi_f2uiz>
 8003a58:	0003      	movs	r3, r0
			 sprintf((char*) buf, "ADT7410_1: %u.%u C\r\n",
 8003a5a:	2164      	movs	r1, #100	; 0x64
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f7fc fb6f 	bl	8000140 <__udivsi3>
 8003a62:	0003      	movs	r3, r0
 8003a64:	001c      	movs	r4, r3
			 ((unsigned int) temp_c % 100));
 8003a66:	4b6d      	ldr	r3, [pc, #436]	; (8003c1c <HAL_UART_RxCpltCallback+0x1100>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	1c18      	adds	r0, r3, #0
 8003a6c:	f7fc fd56 	bl	800051c <__aeabi_f2uiz>
 8003a70:	0003      	movs	r3, r0
			 sprintf((char*) buf, "ADT7410_1: %u.%u C\r\n",
 8003a72:	2164      	movs	r1, #100	; 0x64
 8003a74:	0018      	movs	r0, r3
 8003a76:	f7fc fbe9 	bl	800024c <__aeabi_uidivmod>
 8003a7a:	000b      	movs	r3, r1
 8003a7c:	4969      	ldr	r1, [pc, #420]	; (8003c24 <HAL_UART_RxCpltCallback+0x1108>)
 8003a7e:	485f      	ldr	r0, [pc, #380]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 8003a80:	0022      	movs	r2, r4
 8003a82:	f005 fa93 	bl	8008fac <siprintf>
			 }
			 }

			 HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), HAL_MAX_DELAY);
 8003a86:	4b5d      	ldr	r3, [pc, #372]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f7fc fb3d 	bl	8000108 <strlen>
 8003a8e:	0003      	movs	r3, r0
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	2301      	movs	r3, #1
 8003a94:	425b      	negs	r3, r3
 8003a96:	4959      	ldr	r1, [pc, #356]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 8003a98:	4856      	ldr	r0, [pc, #344]	; (8003bf4 <HAL_UART_RxCpltCallback+0x10d8>)
 8003a9a:	f003 fa2d 	bl	8006ef8 <HAL_UART_Transmit>

			 // Tell ADT7410_2 that we want to read from the temperature register
			 buf[0] = REG_TEMP;
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	4b56      	ldr	r3, [pc, #344]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 8003aa2:	701a      	strb	r2, [r3, #0]
			 ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1, 1000);
 8003aa4:	2394      	movs	r3, #148	; 0x94
 8003aa6:	b299      	uxth	r1, r3
 8003aa8:	4a54      	ldr	r2, [pc, #336]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 8003aaa:	4855      	ldr	r0, [pc, #340]	; (8003c00 <HAL_UART_RxCpltCallback+0x10e4>)
 8003aac:	23fa      	movs	r3, #250	; 0xfa
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f001 ffe2 	bl	8005a7c <HAL_I2C_Master_Transmit>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	001a      	movs	r2, r3
 8003abc:	4b51      	ldr	r3, [pc, #324]	; (8003c04 <HAL_UART_RxCpltCallback+0x10e8>)
 8003abe:	701a      	strb	r2, [r3, #0]
			 //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
			 if (ret != HAL_OK) {
 8003ac0:	4b50      	ldr	r3, [pc, #320]	; (8003c04 <HAL_UART_RxCpltCallback+0x10e8>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_UART_RxCpltCallback+0xfbe>
			 strcpy((char*) buf, "Error Tx\r\n");
 8003ac8:	4b4c      	ldr	r3, [pc, #304]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 8003aca:	4a4f      	ldr	r2, [pc, #316]	; (8003c08 <HAL_UART_RxCpltCallback+0x10ec>)
 8003acc:	ca03      	ldmia	r2!, {r0, r1}
 8003ace:	c303      	stmia	r3!, {r0, r1}
 8003ad0:	8811      	ldrh	r1, [r2, #0]
 8003ad2:	8019      	strh	r1, [r3, #0]
 8003ad4:	7892      	ldrb	r2, [r2, #2]
 8003ad6:	709a      	strb	r2, [r3, #2]
 8003ad8:	e073      	b.n	8003bc2 <HAL_UART_RxCpltCallback+0x10a6>
			 } else {

			 //				 Read 2 bytes from the temperature register
			 ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2, 1000);
 8003ada:	2394      	movs	r3, #148	; 0x94
 8003adc:	b299      	uxth	r1, r3
 8003ade:	4a47      	ldr	r2, [pc, #284]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 8003ae0:	4847      	ldr	r0, [pc, #284]	; (8003c00 <HAL_UART_RxCpltCallback+0x10e4>)
 8003ae2:	23fa      	movs	r3, #250	; 0xfa
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	2302      	movs	r3, #2
 8003aea:	f002 f8cf 	bl	8005c8c <HAL_I2C_Master_Receive>
 8003aee:	0003      	movs	r3, r0
 8003af0:	001a      	movs	r2, r3
 8003af2:	4b44      	ldr	r3, [pc, #272]	; (8003c04 <HAL_UART_RxCpltCallback+0x10e8>)
 8003af4:	701a      	strb	r2, [r3, #0]
			 if (ret != HAL_OK) {
 8003af6:	4b43      	ldr	r3, [pc, #268]	; (8003c04 <HAL_UART_RxCpltCallback+0x10e8>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d008      	beq.n	8003b10 <HAL_UART_RxCpltCallback+0xff4>
			 strcpy((char*) buf, "Error Rx\r\n");
 8003afe:	4b3f      	ldr	r3, [pc, #252]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 8003b00:	4a42      	ldr	r2, [pc, #264]	; (8003c0c <HAL_UART_RxCpltCallback+0x10f0>)
 8003b02:	ca03      	ldmia	r2!, {r0, r1}
 8003b04:	c303      	stmia	r3!, {r0, r1}
 8003b06:	8811      	ldrh	r1, [r2, #0]
 8003b08:	8019      	strh	r1, [r3, #0]
 8003b0a:	7892      	ldrb	r2, [r2, #2]
 8003b0c:	709a      	strb	r2, [r3, #2]
 8003b0e:	e058      	b.n	8003bc2 <HAL_UART_RxCpltCallback+0x10a6>
			 } else {

			 val = (int16_t) (buf[0] << 8);
 8003b10:	4b3a      	ldr	r3, [pc, #232]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	b21a      	sxth	r2, r3
 8003b18:	4b3d      	ldr	r3, [pc, #244]	; (8003c10 <HAL_UART_RxCpltCallback+0x10f4>)
 8003b1a:	801a      	strh	r2, [r3, #0]
			 val = (val | buf[1]) >> 3;
 8003b1c:	4b3c      	ldr	r3, [pc, #240]	; (8003c10 <HAL_UART_RxCpltCallback+0x10f4>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	5e9b      	ldrsh	r3, [r3, r2]
 8003b22:	001a      	movs	r2, r3
 8003b24:	4b35      	ldr	r3, [pc, #212]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 8003b26:	785b      	ldrb	r3, [r3, #1]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	10db      	asrs	r3, r3, #3
 8003b2c:	b21a      	sxth	r2, r3
 8003b2e:	4b38      	ldr	r3, [pc, #224]	; (8003c10 <HAL_UART_RxCpltCallback+0x10f4>)
 8003b30:	801a      	strh	r2, [r3, #0]

			 // Convert to 2's complement, since temperature can be negative
			 if (val > 0x7FF) {
 8003b32:	4b37      	ldr	r3, [pc, #220]	; (8003c10 <HAL_UART_RxCpltCallback+0x10f4>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	5e9a      	ldrsh	r2, [r3, r2]
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	db07      	blt.n	8003b50 <HAL_UART_RxCpltCallback+0x1034>
			 val |= 0xF000;
 8003b40:	4b33      	ldr	r3, [pc, #204]	; (8003c10 <HAL_UART_RxCpltCallback+0x10f4>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	5e9b      	ldrsh	r3, [r3, r2]
 8003b46:	4a33      	ldr	r2, [pc, #204]	; (8003c14 <HAL_UART_RxCpltCallback+0x10f8>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	b21a      	sxth	r2, r3
 8003b4c:	4b30      	ldr	r3, [pc, #192]	; (8003c10 <HAL_UART_RxCpltCallback+0x10f4>)
 8003b4e:	801a      	strh	r2, [r3, #0]
			 }

			 // Convert to float temperature value (Celsius)
			 temp_c = val * 0.0625;
 8003b50:	4b2f      	ldr	r3, [pc, #188]	; (8003c10 <HAL_UART_RxCpltCallback+0x10f4>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	5e9b      	ldrsh	r3, [r3, r2]
 8003b56:	0018      	movs	r0, r3
 8003b58:	f7fe fe9c 	bl	8002894 <__aeabi_i2d>
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	4b2e      	ldr	r3, [pc, #184]	; (8003c18 <HAL_UART_RxCpltCallback+0x10fc>)
 8003b60:	f7fe f846 	bl	8001bf0 <__aeabi_dmul>
 8003b64:	0002      	movs	r2, r0
 8003b66:	000b      	movs	r3, r1
 8003b68:	0010      	movs	r0, r2
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	f7fe ff30 	bl	80029d0 <__aeabi_d2f>
 8003b70:	1c02      	adds	r2, r0, #0
 8003b72:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <HAL_UART_RxCpltCallback+0x1100>)
 8003b74:	601a      	str	r2, [r3, #0]

			 // Convert temperature to decimal value
			 temp_c *= 100;
 8003b76:	4b29      	ldr	r3, [pc, #164]	; (8003c1c <HAL_UART_RxCpltCallback+0x1100>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4929      	ldr	r1, [pc, #164]	; (8003c20 <HAL_UART_RxCpltCallback+0x1104>)
 8003b7c:	1c18      	adds	r0, r3, #0
 8003b7e:	f7fc fe05 	bl	800078c <__aeabi_fmul>
 8003b82:	1c03      	adds	r3, r0, #0
 8003b84:	1c1a      	adds	r2, r3, #0
 8003b86:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <HAL_UART_RxCpltCallback+0x1100>)
 8003b88:	601a      	str	r2, [r3, #0]

			 sprintf((char*) buf, "ADT7410 2: %u.%u C\r\n",
			 ((unsigned int) temp_c / 100),
 8003b8a:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <HAL_UART_RxCpltCallback+0x1100>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	1c18      	adds	r0, r3, #0
 8003b90:	f7fc fcc4 	bl	800051c <__aeabi_f2uiz>
 8003b94:	0003      	movs	r3, r0
			 sprintf((char*) buf, "ADT7410 2: %u.%u C\r\n",
 8003b96:	2164      	movs	r1, #100	; 0x64
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7fc fad1 	bl	8000140 <__udivsi3>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	001c      	movs	r4, r3
			 ((unsigned int) temp_c % 100));
 8003ba2:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <HAL_UART_RxCpltCallback+0x1100>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	1c18      	adds	r0, r3, #0
 8003ba8:	f7fc fcb8 	bl	800051c <__aeabi_f2uiz>
 8003bac:	0003      	movs	r3, r0
			 sprintf((char*) buf, "ADT7410 2: %u.%u C\r\n",
 8003bae:	2164      	movs	r1, #100	; 0x64
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7fc fb4b 	bl	800024c <__aeabi_uidivmod>
 8003bb6:	000b      	movs	r3, r1
 8003bb8:	491b      	ldr	r1, [pc, #108]	; (8003c28 <HAL_UART_RxCpltCallback+0x110c>)
 8003bba:	4810      	ldr	r0, [pc, #64]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 8003bbc:	0022      	movs	r2, r4
 8003bbe:	f005 f9f5 	bl	8008fac <siprintf>
			 }
			 }

			 HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 100);
 8003bc2:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f7fc fa9f 	bl	8000108 <strlen>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	490b      	ldr	r1, [pc, #44]	; (8003bfc <HAL_UART_RxCpltCallback+0x10e0>)
 8003bd0:	4808      	ldr	r0, [pc, #32]	; (8003bf4 <HAL_UART_RxCpltCallback+0x10d8>)
 8003bd2:	2364      	movs	r3, #100	; 0x64
 8003bd4:	f003 f990 	bl	8006ef8 <HAL_UART_Transmit>
			 HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8003bd8:	4907      	ldr	r1, [pc, #28]	; (8003bf8 <HAL_UART_RxCpltCallback+0x10dc>)
 8003bda:	4806      	ldr	r0, [pc, #24]	; (8003bf4 <HAL_UART_RxCpltCallback+0x10d8>)
 8003bdc:	2364      	movs	r3, #100	; 0x64
 8003bde:	2202      	movs	r2, #2
 8003be0:	f003 f98a 	bl	8006ef8 <HAL_UART_Transmit>

		}
	}
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b01b      	add	sp, #108	; 0x6c
 8003bea:	bd90      	pop	{r4, r7, pc}
 8003bec:	20000428 	.word	0x20000428
 8003bf0:	0800ce74 	.word	0x0800ce74
 8003bf4:	200002f0 	.word	0x200002f0
 8003bf8:	0800cd8c 	.word	0x0800cd8c
 8003bfc:	20000378 	.word	0x20000378
 8003c00:	200002a4 	.word	0x200002a4
 8003c04:	20000374 	.word	0x20000374
 8003c08:	0800ce78 	.word	0x0800ce78
 8003c0c:	0800ce84 	.word	0x0800ce84
 8003c10:	2000037a 	.word	0x2000037a
 8003c14:	fffff000 	.word	0xfffff000
 8003c18:	3fb00000 	.word	0x3fb00000
 8003c1c:	2000037c 	.word	0x2000037c
 8003c20:	42c80000 	.word	0x42c80000
 8003c24:	0800ce90 	.word	0x0800ce90
 8003c28:	0800cea8 	.word	0x0800cea8

08003c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c32:	f000 fd7f 	bl	8004734 <HAL_Init>
	/* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c36:	f000 f82d 	bl	8003c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c3a:	f000 fa45 	bl	80040c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c3e:	f000 fa25 	bl	800408c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003c42:	f000 f9f3 	bl	800402c <MX_USART1_UART_Init>
  MX_ADC_Init();
 8003c46:	f000 f885 	bl	8003d54 <MX_ADC_Init>
  MX_I2C1_Init();
 8003c4a:	f000 f9af 	bl	8003fac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	for (int i = 0; i < 15; i++) {
 8003c4e:	2300      	movs	r3, #0
 8003c50:	607b      	str	r3, [r7, #4]
 8003c52:	e007      	b.n	8003c64 <main+0x38>
		gpio_flags[i] = 1;
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <main+0x58>)
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	0092      	lsls	r2, r2, #2
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < 15; i++) {
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3301      	adds	r3, #1
 8003c62:	607b      	str	r3, [r7, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b0e      	cmp	r3, #14
 8003c68:	ddf4      	ble.n	8003c54 <main+0x28>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8003c6a:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <main+0x5c>)
 8003c6c:	2120      	movs	r1, #32
 8003c6e:	2201      	movs	r2, #1
 8003c70:	0018      	movs	r0, r3
 8003c72:	f001 fe34 	bl	80058de <HAL_GPIO_WritePin>

	/* USER CODE BEGIN WHILE */
	while (1) {

		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8003c76:	4905      	ldr	r1, [pc, #20]	; (8003c8c <main+0x60>)
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <main+0x64>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f003 f9e4 	bl	800704a <HAL_UART_Receive_IT>
 8003c82:	e7f8      	b.n	8003c76 <main+0x4a>
 8003c84:	20000428 	.word	0x20000428
 8003c88:	48000400 	.word	0x48000400
 8003c8c:	20000380 	.word	0x20000380
 8003c90:	200002f0 	.word	0x200002f0

08003c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c94:	b590      	push	{r4, r7, lr}
 8003c96:	b097      	sub	sp, #92	; 0x5c
 8003c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c9a:	2428      	movs	r4, #40	; 0x28
 8003c9c:	193b      	adds	r3, r7, r4
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	2330      	movs	r3, #48	; 0x30
 8003ca2:	001a      	movs	r2, r3
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	f004 faff 	bl	80082a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003caa:	2318      	movs	r3, #24
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	0018      	movs	r0, r3
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	001a      	movs	r2, r3
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	f004 faf7 	bl	80082a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cba:	1d3b      	adds	r3, r7, #4
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	2314      	movs	r3, #20
 8003cc0:	001a      	movs	r2, r3
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	f004 faf0 	bl	80082a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8003cc8:	0021      	movs	r1, r4
 8003cca:	187b      	adds	r3, r7, r1
 8003ccc:	2212      	movs	r2, #18
 8003cce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cd0:	187b      	adds	r3, r7, r1
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003cd6:	187b      	adds	r3, r7, r1
 8003cd8:	2201      	movs	r2, #1
 8003cda:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cdc:	187b      	adds	r3, r7, r1
 8003cde:	2210      	movs	r2, #16
 8003ce0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003ce2:	187b      	adds	r3, r7, r1
 8003ce4:	2210      	movs	r2, #16
 8003ce6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003ce8:	187b      	adds	r3, r7, r1
 8003cea:	2200      	movs	r2, #0
 8003cec:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cee:	187b      	adds	r3, r7, r1
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f002 fb63 	bl	80063bc <HAL_RCC_OscConfig>
 8003cf6:	1e03      	subs	r3, r0, #0
 8003cf8:	d001      	beq.n	8003cfe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003cfa:	f000 fa7f 	bl	80041fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cfe:	2118      	movs	r1, #24
 8003d00:	187b      	adds	r3, r7, r1
 8003d02:	2207      	movs	r2, #7
 8003d04:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003d06:	187b      	adds	r3, r7, r1
 8003d08:	2200      	movs	r2, #0
 8003d0a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	2200      	movs	r2, #0
 8003d10:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d12:	187b      	adds	r3, r7, r1
 8003d14:	2200      	movs	r2, #0
 8003d16:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003d18:	187b      	adds	r3, r7, r1
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f002 fe67 	bl	80069f0 <HAL_RCC_ClockConfig>
 8003d22:	1e03      	subs	r3, r0, #0
 8003d24:	d001      	beq.n	8003d2a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003d26:	f000 fa69 	bl	80041fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003d2a:	1d3b      	adds	r3, r7, #4
 8003d2c:	2221      	movs	r2, #33	; 0x21
 8003d2e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003d30:	1d3b      	adds	r3, r7, #4
 8003d32:	2200      	movs	r2, #0
 8003d34:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003d36:	1d3b      	adds	r3, r7, #4
 8003d38:	2200      	movs	r2, #0
 8003d3a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d3c:	1d3b      	adds	r3, r7, #4
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f002 ffa8 	bl	8006c94 <HAL_RCCEx_PeriphCLKConfig>
 8003d44:	1e03      	subs	r3, r0, #0
 8003d46:	d001      	beq.n	8003d4c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003d48:	f000 fa58 	bl	80041fc <Error_Handler>
  }
}
 8003d4c:	46c0      	nop			; (mov r8, r8)
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b017      	add	sp, #92	; 0x5c
 8003d52:	bd90      	pop	{r4, r7, pc}

08003d54 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d5a:	1d3b      	adds	r3, r7, #4
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	230c      	movs	r3, #12
 8003d60:	001a      	movs	r2, r3
 8003d62:	2100      	movs	r1, #0
 8003d64:	f004 faa0 	bl	80082a8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003d68:	4b8e      	ldr	r3, [pc, #568]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003d6a:	4a8f      	ldr	r2, [pc, #572]	; (8003fa8 <MX_ADC_Init+0x254>)
 8003d6c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003d6e:	4b8d      	ldr	r3, [pc, #564]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003d74:	4b8b      	ldr	r3, [pc, #556]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d7a:	4b8a      	ldr	r3, [pc, #552]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003d80:	4b88      	ldr	r3, [pc, #544]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d86:	4b87      	ldr	r3, [pc, #540]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003d88:	2204      	movs	r2, #4
 8003d8a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003d8c:	4b85      	ldr	r3, [pc, #532]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003d92:	4b84      	ldr	r3, [pc, #528]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003d98:	4b82      	ldr	r3, [pc, #520]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003d9e:	4b81      	ldr	r3, [pc, #516]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003da4:	4b7f      	ldr	r3, [pc, #508]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003da6:	22c2      	movs	r2, #194	; 0xc2
 8003da8:	32ff      	adds	r2, #255	; 0xff
 8003daa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003dac:	4b7d      	ldr	r3, [pc, #500]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003db2:	4b7c      	ldr	r3, [pc, #496]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003db4:	2224      	movs	r2, #36	; 0x24
 8003db6:	2100      	movs	r1, #0
 8003db8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003dba:	4b7a      	ldr	r3, [pc, #488]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003dc0:	4b78      	ldr	r3, [pc, #480]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f000 fd1a 	bl	80047fc <HAL_ADC_Init>
 8003dc8:	1e03      	subs	r3, r0, #0
 8003dca:	d001      	beq.n	8003dd0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003dcc:	f000 fa16 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003dd0:	1d3b      	adds	r3, r7, #4
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	2280      	movs	r2, #128	; 0x80
 8003dda:	0152      	lsls	r2, r2, #5
 8003ddc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003dde:	1d3b      	adds	r3, r7, #4
 8003de0:	2280      	movs	r2, #128	; 0x80
 8003de2:	0552      	lsls	r2, r2, #21
 8003de4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003de6:	1d3a      	adds	r2, r7, #4
 8003de8:	4b6e      	ldr	r3, [pc, #440]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003dea:	0011      	movs	r1, r2
 8003dec:	0018      	movs	r0, r3
 8003dee:	f000 fedf 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003df2:	1e03      	subs	r3, r0, #0
 8003df4:	d001      	beq.n	8003dfa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8003df6:	f000 fa01 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003dfa:	1d3b      	adds	r3, r7, #4
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003e00:	1d3a      	adds	r2, r7, #4
 8003e02:	4b68      	ldr	r3, [pc, #416]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003e04:	0011      	movs	r1, r2
 8003e06:	0018      	movs	r0, r3
 8003e08:	f000 fed2 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003e0c:	1e03      	subs	r3, r0, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8003e10:	f000 f9f4 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003e14:	1d3b      	adds	r3, r7, #4
 8003e16:	2202      	movs	r2, #2
 8003e18:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003e1a:	1d3a      	adds	r2, r7, #4
 8003e1c:	4b61      	ldr	r3, [pc, #388]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003e1e:	0011      	movs	r1, r2
 8003e20:	0018      	movs	r0, r3
 8003e22:	f000 fec5 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003e26:	1e03      	subs	r3, r0, #0
 8003e28:	d001      	beq.n	8003e2e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8003e2a:	f000 f9e7 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003e2e:	1d3b      	adds	r3, r7, #4
 8003e30:	2203      	movs	r2, #3
 8003e32:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003e34:	1d3a      	adds	r2, r7, #4
 8003e36:	4b5b      	ldr	r3, [pc, #364]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003e38:	0011      	movs	r1, r2
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f000 feb8 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003e40:	1e03      	subs	r3, r0, #0
 8003e42:	d001      	beq.n	8003e48 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8003e44:	f000 f9da 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003e48:	1d3b      	adds	r3, r7, #4
 8003e4a:	2205      	movs	r2, #5
 8003e4c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003e4e:	1d3a      	adds	r2, r7, #4
 8003e50:	4b54      	ldr	r3, [pc, #336]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003e52:	0011      	movs	r1, r2
 8003e54:	0018      	movs	r0, r3
 8003e56:	f000 feab 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003e5a:	1e03      	subs	r3, r0, #0
 8003e5c:	d001      	beq.n	8003e62 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8003e5e:	f000 f9cd 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003e62:	1d3b      	adds	r3, r7, #4
 8003e64:	2206      	movs	r2, #6
 8003e66:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003e68:	1d3a      	adds	r2, r7, #4
 8003e6a:	4b4e      	ldr	r3, [pc, #312]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003e6c:	0011      	movs	r1, r2
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f000 fe9e 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003e74:	1e03      	subs	r3, r0, #0
 8003e76:	d001      	beq.n	8003e7c <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8003e78:	f000 f9c0 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003e7c:	1d3b      	adds	r3, r7, #4
 8003e7e:	2207      	movs	r2, #7
 8003e80:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003e82:	1d3a      	adds	r2, r7, #4
 8003e84:	4b47      	ldr	r3, [pc, #284]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003e86:	0011      	movs	r1, r2
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f000 fe91 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003e8e:	1e03      	subs	r3, r0, #0
 8003e90:	d001      	beq.n	8003e96 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8003e92:	f000 f9b3 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003e96:	1d3b      	adds	r3, r7, #4
 8003e98:	2208      	movs	r2, #8
 8003e9a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003e9c:	1d3a      	adds	r2, r7, #4
 8003e9e:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003ea0:	0011      	movs	r1, r2
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f000 fe84 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003ea8:	1e03      	subs	r3, r0, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8003eac:	f000 f9a6 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003eb0:	1d3b      	adds	r3, r7, #4
 8003eb2:	2209      	movs	r2, #9
 8003eb4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003eb6:	1d3a      	adds	r2, r7, #4
 8003eb8:	4b3a      	ldr	r3, [pc, #232]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003eba:	0011      	movs	r1, r2
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f000 fe77 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003ec2:	1e03      	subs	r3, r0, #0
 8003ec4:	d001      	beq.n	8003eca <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8003ec6:	f000 f999 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003eca:	1d3b      	adds	r3, r7, #4
 8003ecc:	220a      	movs	r2, #10
 8003ece:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003ed0:	1d3a      	adds	r2, r7, #4
 8003ed2:	4b34      	ldr	r3, [pc, #208]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003ed4:	0011      	movs	r1, r2
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 fe6a 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003edc:	1e03      	subs	r3, r0, #0
 8003ede:	d001      	beq.n	8003ee4 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8003ee0:	f000 f98c 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003ee4:	1d3b      	adds	r3, r7, #4
 8003ee6:	220b      	movs	r2, #11
 8003ee8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003eea:	1d3a      	adds	r2, r7, #4
 8003eec:	4b2d      	ldr	r3, [pc, #180]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003eee:	0011      	movs	r1, r2
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f000 fe5d 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003ef6:	1e03      	subs	r3, r0, #0
 8003ef8:	d001      	beq.n	8003efe <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8003efa:	f000 f97f 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003efe:	1d3b      	adds	r3, r7, #4
 8003f00:	220c      	movs	r2, #12
 8003f02:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f04:	1d3a      	adds	r2, r7, #4
 8003f06:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003f08:	0011      	movs	r1, r2
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f000 fe50 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003f10:	1e03      	subs	r3, r0, #0
 8003f12:	d001      	beq.n	8003f18 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8003f14:	f000 f972 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003f18:	1d3b      	adds	r3, r7, #4
 8003f1a:	220d      	movs	r2, #13
 8003f1c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f1e:	1d3a      	adds	r2, r7, #4
 8003f20:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003f22:	0011      	movs	r1, r2
 8003f24:	0018      	movs	r0, r3
 8003f26:	f000 fe43 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003f2a:	1e03      	subs	r3, r0, #0
 8003f2c:	d001      	beq.n	8003f32 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8003f2e:	f000 f965 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003f32:	1d3b      	adds	r3, r7, #4
 8003f34:	220e      	movs	r2, #14
 8003f36:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f38:	1d3a      	adds	r2, r7, #4
 8003f3a:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003f3c:	0011      	movs	r1, r2
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f000 fe36 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003f44:	1e03      	subs	r3, r0, #0
 8003f46:	d001      	beq.n	8003f4c <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8003f48:	f000 f958 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003f4c:	1d3b      	adds	r3, r7, #4
 8003f4e:	220f      	movs	r2, #15
 8003f50:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f52:	1d3a      	adds	r2, r7, #4
 8003f54:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003f56:	0011      	movs	r1, r2
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f000 fe29 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003f5e:	1e03      	subs	r3, r0, #0
 8003f60:	d001      	beq.n	8003f66 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8003f62:	f000 f94b 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	2210      	movs	r2, #16
 8003f6a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f6c:	1d3a      	adds	r2, r7, #4
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003f70:	0011      	movs	r1, r2
 8003f72:	0018      	movs	r0, r3
 8003f74:	f000 fe1c 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003f78:	1e03      	subs	r3, r0, #0
 8003f7a:	d001      	beq.n	8003f80 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8003f7c:	f000 f93e 	bl	80041fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	2211      	movs	r2, #17
 8003f84:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f86:	1d3a      	adds	r2, r7, #4
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <MX_ADC_Init+0x250>)
 8003f8a:	0011      	movs	r1, r2
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f000 fe0f 	bl	8004bb0 <HAL_ADC_ConfigChannel>
 8003f92:	1e03      	subs	r3, r0, #0
 8003f94:	d001      	beq.n	8003f9a <MX_ADC_Init+0x246>
  {
    Error_Handler();
 8003f96:	f000 f931 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b004      	add	sp, #16
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	20000220 	.word	0x20000220
 8003fa8:	40012400 	.word	0x40012400

08003fac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003fb0:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <MX_I2C1_Init+0x74>)
 8003fb2:	4a1c      	ldr	r2, [pc, #112]	; (8004024 <MX_I2C1_Init+0x78>)
 8003fb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003fb6:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <MX_I2C1_Init+0x74>)
 8003fb8:	4a1b      	ldr	r2, [pc, #108]	; (8004028 <MX_I2C1_Init+0x7c>)
 8003fba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003fbc:	4b18      	ldr	r3, [pc, #96]	; (8004020 <MX_I2C1_Init+0x74>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fc2:	4b17      	ldr	r3, [pc, #92]	; (8004020 <MX_I2C1_Init+0x74>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003fc8:	4b15      	ldr	r3, [pc, #84]	; (8004020 <MX_I2C1_Init+0x74>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003fce:	4b14      	ldr	r3, [pc, #80]	; (8004020 <MX_I2C1_Init+0x74>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003fd4:	4b12      	ldr	r3, [pc, #72]	; (8004020 <MX_I2C1_Init+0x74>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003fda:	4b11      	ldr	r3, [pc, #68]	; (8004020 <MX_I2C1_Init+0x74>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003fe0:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <MX_I2C1_Init+0x74>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003fe6:	4b0e      	ldr	r3, [pc, #56]	; (8004020 <MX_I2C1_Init+0x74>)
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f001 fcb1 	bl	8005950 <HAL_I2C_Init>
 8003fee:	1e03      	subs	r3, r0, #0
 8003ff0:	d001      	beq.n	8003ff6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003ff2:	f000 f903 	bl	80041fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <MX_I2C1_Init+0x74>)
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f002 f946 	bl	800628c <HAL_I2CEx_ConfigAnalogFilter>
 8004000:	1e03      	subs	r3, r0, #0
 8004002:	d001      	beq.n	8004008 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004004:	f000 f8fa 	bl	80041fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <MX_I2C1_Init+0x74>)
 800400a:	2100      	movs	r1, #0
 800400c:	0018      	movs	r0, r3
 800400e:	f002 f989 	bl	8006324 <HAL_I2CEx_ConfigDigitalFilter>
 8004012:	1e03      	subs	r3, r0, #0
 8004014:	d001      	beq.n	800401a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004016:	f000 f8f1 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	200002a4 	.word	0x200002a4
 8004024:	40005400 	.word	0x40005400
 8004028:	2000090e 	.word	0x2000090e

0800402c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004030:	4b14      	ldr	r3, [pc, #80]	; (8004084 <MX_USART1_UART_Init+0x58>)
 8004032:	4a15      	ldr	r2, [pc, #84]	; (8004088 <MX_USART1_UART_Init+0x5c>)
 8004034:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004036:	4b13      	ldr	r3, [pc, #76]	; (8004084 <MX_USART1_UART_Init+0x58>)
 8004038:	22e1      	movs	r2, #225	; 0xe1
 800403a:	0252      	lsls	r2, r2, #9
 800403c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800403e:	4b11      	ldr	r3, [pc, #68]	; (8004084 <MX_USART1_UART_Init+0x58>)
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004044:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <MX_USART1_UART_Init+0x58>)
 8004046:	2200      	movs	r2, #0
 8004048:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800404a:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <MX_USART1_UART_Init+0x58>)
 800404c:	2200      	movs	r2, #0
 800404e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <MX_USART1_UART_Init+0x58>)
 8004052:	220c      	movs	r2, #12
 8004054:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004056:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <MX_USART1_UART_Init+0x58>)
 8004058:	2200      	movs	r2, #0
 800405a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800405c:	4b09      	ldr	r3, [pc, #36]	; (8004084 <MX_USART1_UART_Init+0x58>)
 800405e:	2200      	movs	r2, #0
 8004060:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004062:	4b08      	ldr	r3, [pc, #32]	; (8004084 <MX_USART1_UART_Init+0x58>)
 8004064:	2200      	movs	r2, #0
 8004066:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <MX_USART1_UART_Init+0x58>)
 800406a:	2200      	movs	r2, #0
 800406c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <MX_USART1_UART_Init+0x58>)
 8004070:	0018      	movs	r0, r3
 8004072:	f002 feed 	bl	8006e50 <HAL_UART_Init>
 8004076:	1e03      	subs	r3, r0, #0
 8004078:	d001      	beq.n	800407e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800407a:	f000 f8bf 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	200002f0 	.word	0x200002f0
 8004088:	40013800 	.word	0x40013800

0800408c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004092:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <MX_DMA_Init+0x38>)
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <MX_DMA_Init+0x38>)
 8004098:	2101      	movs	r1, #1
 800409a:	430a      	orrs	r2, r1
 800409c:	615a      	str	r2, [r3, #20]
 800409e:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <MX_DMA_Init+0x38>)
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	2201      	movs	r2, #1
 80040a4:	4013      	ands	r3, r2
 80040a6:	607b      	str	r3, [r7, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80040aa:	2200      	movs	r2, #0
 80040ac:	2100      	movs	r1, #0
 80040ae:	2009      	movs	r0, #9
 80040b0:	f001 f840 	bl	8005134 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80040b4:	2009      	movs	r0, #9
 80040b6:	f001 f852 	bl	800515e <HAL_NVIC_EnableIRQ>

}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	b002      	add	sp, #8
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	40021000 	.word	0x40021000

080040c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b08b      	sub	sp, #44	; 0x2c
 80040cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ce:	2414      	movs	r4, #20
 80040d0:	193b      	adds	r3, r7, r4
 80040d2:	0018      	movs	r0, r3
 80040d4:	2314      	movs	r3, #20
 80040d6:	001a      	movs	r2, r3
 80040d8:	2100      	movs	r1, #0
 80040da:	f004 f8e5 	bl	80082a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040de:	4b43      	ldr	r3, [pc, #268]	; (80041ec <MX_GPIO_Init+0x124>)
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	4b42      	ldr	r3, [pc, #264]	; (80041ec <MX_GPIO_Init+0x124>)
 80040e4:	2180      	movs	r1, #128	; 0x80
 80040e6:	0309      	lsls	r1, r1, #12
 80040e8:	430a      	orrs	r2, r1
 80040ea:	615a      	str	r2, [r3, #20]
 80040ec:	4b3f      	ldr	r3, [pc, #252]	; (80041ec <MX_GPIO_Init+0x124>)
 80040ee:	695a      	ldr	r2, [r3, #20]
 80040f0:	2380      	movs	r3, #128	; 0x80
 80040f2:	031b      	lsls	r3, r3, #12
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040fa:	4b3c      	ldr	r3, [pc, #240]	; (80041ec <MX_GPIO_Init+0x124>)
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	4b3b      	ldr	r3, [pc, #236]	; (80041ec <MX_GPIO_Init+0x124>)
 8004100:	2180      	movs	r1, #128	; 0x80
 8004102:	0289      	lsls	r1, r1, #10
 8004104:	430a      	orrs	r2, r1
 8004106:	615a      	str	r2, [r3, #20]
 8004108:	4b38      	ldr	r3, [pc, #224]	; (80041ec <MX_GPIO_Init+0x124>)
 800410a:	695a      	ldr	r2, [r3, #20]
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	029b      	lsls	r3, r3, #10
 8004110:	4013      	ands	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004116:	4b35      	ldr	r3, [pc, #212]	; (80041ec <MX_GPIO_Init+0x124>)
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	4b34      	ldr	r3, [pc, #208]	; (80041ec <MX_GPIO_Init+0x124>)
 800411c:	2180      	movs	r1, #128	; 0x80
 800411e:	02c9      	lsls	r1, r1, #11
 8004120:	430a      	orrs	r2, r1
 8004122:	615a      	str	r2, [r3, #20]
 8004124:	4b31      	ldr	r3, [pc, #196]	; (80041ec <MX_GPIO_Init+0x124>)
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	2380      	movs	r3, #128	; 0x80
 800412a:	02db      	lsls	r3, r3, #11
 800412c:	4013      	ands	r3, r2
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004132:	4b2e      	ldr	r3, [pc, #184]	; (80041ec <MX_GPIO_Init+0x124>)
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	4b2d      	ldr	r3, [pc, #180]	; (80041ec <MX_GPIO_Init+0x124>)
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	03c9      	lsls	r1, r1, #15
 800413c:	430a      	orrs	r2, r1
 800413e:	615a      	str	r2, [r3, #20]
 8004140:	4b2a      	ldr	r3, [pc, #168]	; (80041ec <MX_GPIO_Init+0x124>)
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	03db      	lsls	r3, r3, #15
 8004148:	4013      	ands	r3, r2
 800414a:	607b      	str	r3, [r7, #4]
 800414c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800414e:	239f      	movs	r3, #159	; 0x9f
 8004150:	019b      	lsls	r3, r3, #6
 8004152:	4827      	ldr	r0, [pc, #156]	; (80041f0 <MX_GPIO_Init+0x128>)
 8004154:	2200      	movs	r2, #0
 8004156:	0019      	movs	r1, r3
 8004158:	f001 fbc1 	bl	80058de <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800415c:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <MX_GPIO_Init+0x12c>)
 800415e:	2200      	movs	r2, #0
 8004160:	21c0      	movs	r1, #192	; 0xc0
 8004162:	0018      	movs	r0, r3
 8004164:	f001 fbbb 	bl	80058de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8004168:	4b23      	ldr	r3, [pc, #140]	; (80041f8 <MX_GPIO_Init+0x130>)
 800416a:	2200      	movs	r2, #0
 800416c:	2160      	movs	r1, #96	; 0x60
 800416e:	0018      	movs	r0, r3
 8004170:	f001 fbb5 	bl	80058de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8004174:	193b      	adds	r3, r7, r4
 8004176:	229f      	movs	r2, #159	; 0x9f
 8004178:	0192      	lsls	r2, r2, #6
 800417a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800417c:	193b      	adds	r3, r7, r4
 800417e:	2201      	movs	r2, #1
 8004180:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004182:	193b      	adds	r3, r7, r4
 8004184:	2200      	movs	r2, #0
 8004186:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004188:	193b      	adds	r3, r7, r4
 800418a:	2200      	movs	r2, #0
 800418c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800418e:	193b      	adds	r3, r7, r4
 8004190:	4a17      	ldr	r2, [pc, #92]	; (80041f0 <MX_GPIO_Init+0x128>)
 8004192:	0019      	movs	r1, r3
 8004194:	0010      	movs	r0, r2
 8004196:	f001 fa15 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800419a:	193b      	adds	r3, r7, r4
 800419c:	22c0      	movs	r2, #192	; 0xc0
 800419e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041a0:	193b      	adds	r3, r7, r4
 80041a2:	2201      	movs	r2, #1
 80041a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a6:	193b      	adds	r3, r7, r4
 80041a8:	2200      	movs	r2, #0
 80041aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ac:	193b      	adds	r3, r7, r4
 80041ae:	2200      	movs	r2, #0
 80041b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80041b2:	193b      	adds	r3, r7, r4
 80041b4:	4a0f      	ldr	r2, [pc, #60]	; (80041f4 <MX_GPIO_Init+0x12c>)
 80041b6:	0019      	movs	r1, r3
 80041b8:	0010      	movs	r0, r2
 80041ba:	f001 fa03 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80041be:	0021      	movs	r1, r4
 80041c0:	187b      	adds	r3, r7, r1
 80041c2:	2260      	movs	r2, #96	; 0x60
 80041c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c6:	187b      	adds	r3, r7, r1
 80041c8:	2201      	movs	r2, #1
 80041ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041cc:	187b      	adds	r3, r7, r1
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d2:	187b      	adds	r3, r7, r1
 80041d4:	2200      	movs	r2, #0
 80041d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041d8:	187b      	adds	r3, r7, r1
 80041da:	4a07      	ldr	r2, [pc, #28]	; (80041f8 <MX_GPIO_Init+0x130>)
 80041dc:	0019      	movs	r1, r3
 80041de:	0010      	movs	r0, r2
 80041e0:	f001 f9f0 	bl	80055c4 <HAL_GPIO_Init>

}
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b00b      	add	sp, #44	; 0x2c
 80041ea:	bd90      	pop	{r4, r7, pc}
 80041ec:	40021000 	.word	0x40021000
 80041f0:	48000800 	.word	0x48000800
 80041f4:	48001400 	.word	0x48001400
 80041f8:	48000400 	.word	0x48000400

080041fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004200:	b672      	cpsid	i
}
 8004202:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004204:	e7fe      	b.n	8004204 <Error_Handler+0x8>
	...

08004208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <HAL_MspInit+0x44>)
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	4b0e      	ldr	r3, [pc, #56]	; (800424c <HAL_MspInit+0x44>)
 8004214:	2101      	movs	r1, #1
 8004216:	430a      	orrs	r2, r1
 8004218:	619a      	str	r2, [r3, #24]
 800421a:	4b0c      	ldr	r3, [pc, #48]	; (800424c <HAL_MspInit+0x44>)
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	2201      	movs	r2, #1
 8004220:	4013      	ands	r3, r2
 8004222:	607b      	str	r3, [r7, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <HAL_MspInit+0x44>)
 8004228:	69da      	ldr	r2, [r3, #28]
 800422a:	4b08      	ldr	r3, [pc, #32]	; (800424c <HAL_MspInit+0x44>)
 800422c:	2180      	movs	r1, #128	; 0x80
 800422e:	0549      	lsls	r1, r1, #21
 8004230:	430a      	orrs	r2, r1
 8004232:	61da      	str	r2, [r3, #28]
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_MspInit+0x44>)
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	2380      	movs	r3, #128	; 0x80
 800423a:	055b      	lsls	r3, r3, #21
 800423c:	4013      	ands	r3, r2
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	46bd      	mov	sp, r7
 8004246:	b002      	add	sp, #8
 8004248:	bd80      	pop	{r7, pc}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	40021000 	.word	0x40021000

08004250 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b08d      	sub	sp, #52	; 0x34
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004258:	241c      	movs	r4, #28
 800425a:	193b      	adds	r3, r7, r4
 800425c:	0018      	movs	r0, r3
 800425e:	2314      	movs	r3, #20
 8004260:	001a      	movs	r2, r3
 8004262:	2100      	movs	r1, #0
 8004264:	f004 f820 	bl	80082a8 <memset>
  if(hadc->Instance==ADC1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a4a      	ldr	r2, [pc, #296]	; (8004398 <HAL_ADC_MspInit+0x148>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d000      	beq.n	8004274 <HAL_ADC_MspInit+0x24>
 8004272:	e08d      	b.n	8004390 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004274:	4b49      	ldr	r3, [pc, #292]	; (800439c <HAL_ADC_MspInit+0x14c>)
 8004276:	699a      	ldr	r2, [r3, #24]
 8004278:	4b48      	ldr	r3, [pc, #288]	; (800439c <HAL_ADC_MspInit+0x14c>)
 800427a:	2180      	movs	r1, #128	; 0x80
 800427c:	0089      	lsls	r1, r1, #2
 800427e:	430a      	orrs	r2, r1
 8004280:	619a      	str	r2, [r3, #24]
 8004282:	4b46      	ldr	r3, [pc, #280]	; (800439c <HAL_ADC_MspInit+0x14c>)
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	2380      	movs	r3, #128	; 0x80
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4013      	ands	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004290:	4b42      	ldr	r3, [pc, #264]	; (800439c <HAL_ADC_MspInit+0x14c>)
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	4b41      	ldr	r3, [pc, #260]	; (800439c <HAL_ADC_MspInit+0x14c>)
 8004296:	2180      	movs	r1, #128	; 0x80
 8004298:	0309      	lsls	r1, r1, #12
 800429a:	430a      	orrs	r2, r1
 800429c:	615a      	str	r2, [r3, #20]
 800429e:	4b3f      	ldr	r3, [pc, #252]	; (800439c <HAL_ADC_MspInit+0x14c>)
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	031b      	lsls	r3, r3, #12
 80042a6:	4013      	ands	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ac:	4b3b      	ldr	r3, [pc, #236]	; (800439c <HAL_ADC_MspInit+0x14c>)
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	4b3a      	ldr	r3, [pc, #232]	; (800439c <HAL_ADC_MspInit+0x14c>)
 80042b2:	2180      	movs	r1, #128	; 0x80
 80042b4:	0289      	lsls	r1, r1, #10
 80042b6:	430a      	orrs	r2, r1
 80042b8:	615a      	str	r2, [r3, #20]
 80042ba:	4b38      	ldr	r3, [pc, #224]	; (800439c <HAL_ADC_MspInit+0x14c>)
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	029b      	lsls	r3, r3, #10
 80042c2:	4013      	ands	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042c8:	4b34      	ldr	r3, [pc, #208]	; (800439c <HAL_ADC_MspInit+0x14c>)
 80042ca:	695a      	ldr	r2, [r3, #20]
 80042cc:	4b33      	ldr	r3, [pc, #204]	; (800439c <HAL_ADC_MspInit+0x14c>)
 80042ce:	2180      	movs	r1, #128	; 0x80
 80042d0:	02c9      	lsls	r1, r1, #11
 80042d2:	430a      	orrs	r2, r1
 80042d4:	615a      	str	r2, [r3, #20]
 80042d6:	4b31      	ldr	r3, [pc, #196]	; (800439c <HAL_ADC_MspInit+0x14c>)
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	02db      	lsls	r3, r3, #11
 80042de:	4013      	ands	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80042e4:	193b      	adds	r3, r7, r4
 80042e6:	223f      	movs	r2, #63	; 0x3f
 80042e8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042ea:	193b      	adds	r3, r7, r4
 80042ec:	2203      	movs	r2, #3
 80042ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f0:	193b      	adds	r3, r7, r4
 80042f2:	2200      	movs	r2, #0
 80042f4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042f6:	193b      	adds	r3, r7, r4
 80042f8:	4a29      	ldr	r2, [pc, #164]	; (80043a0 <HAL_ADC_MspInit+0x150>)
 80042fa:	0019      	movs	r1, r3
 80042fc:	0010      	movs	r0, r2
 80042fe:	f001 f961 	bl	80055c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004302:	193b      	adds	r3, r7, r4
 8004304:	22ef      	movs	r2, #239	; 0xef
 8004306:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004308:	193b      	adds	r3, r7, r4
 800430a:	2203      	movs	r2, #3
 800430c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430e:	193b      	adds	r3, r7, r4
 8004310:	2200      	movs	r2, #0
 8004312:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004314:	193a      	adds	r2, r7, r4
 8004316:	2390      	movs	r3, #144	; 0x90
 8004318:	05db      	lsls	r3, r3, #23
 800431a:	0011      	movs	r1, r2
 800431c:	0018      	movs	r0, r3
 800431e:	f001 f951 	bl	80055c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004322:	193b      	adds	r3, r7, r4
 8004324:	2203      	movs	r2, #3
 8004326:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004328:	193b      	adds	r3, r7, r4
 800432a:	2203      	movs	r2, #3
 800432c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432e:	193b      	adds	r3, r7, r4
 8004330:	2200      	movs	r2, #0
 8004332:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004334:	193b      	adds	r3, r7, r4
 8004336:	4a1b      	ldr	r2, [pc, #108]	; (80043a4 <HAL_ADC_MspInit+0x154>)
 8004338:	0019      	movs	r1, r3
 800433a:	0010      	movs	r0, r2
 800433c:	f001 f942 	bl	80055c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8004340:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <HAL_ADC_MspInit+0x158>)
 8004342:	4a1a      	ldr	r2, [pc, #104]	; (80043ac <HAL_ADC_MspInit+0x15c>)
 8004344:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <HAL_ADC_MspInit+0x158>)
 8004348:	2200      	movs	r2, #0
 800434a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800434c:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <HAL_ADC_MspInit+0x158>)
 800434e:	2200      	movs	r2, #0
 8004350:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <HAL_ADC_MspInit+0x158>)
 8004354:	2280      	movs	r2, #128	; 0x80
 8004356:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004358:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <HAL_ADC_MspInit+0x158>)
 800435a:	2280      	movs	r2, #128	; 0x80
 800435c:	0092      	lsls	r2, r2, #2
 800435e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <HAL_ADC_MspInit+0x158>)
 8004362:	2280      	movs	r2, #128	; 0x80
 8004364:	0112      	lsls	r2, r2, #4
 8004366:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8004368:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <HAL_ADC_MspInit+0x158>)
 800436a:	2220      	movs	r2, #32
 800436c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800436e:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <HAL_ADC_MspInit+0x158>)
 8004370:	2200      	movs	r2, #0
 8004372:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004374:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <HAL_ADC_MspInit+0x158>)
 8004376:	0018      	movs	r0, r3
 8004378:	f000 ff0e 	bl	8005198 <HAL_DMA_Init>
 800437c:	1e03      	subs	r3, r0, #0
 800437e:	d001      	beq.n	8004384 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8004380:	f7ff ff3c 	bl	80041fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <HAL_ADC_MspInit+0x158>)
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
 800438a:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <HAL_ADC_MspInit+0x158>)
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b00d      	add	sp, #52	; 0x34
 8004396:	bd90      	pop	{r4, r7, pc}
 8004398:	40012400 	.word	0x40012400
 800439c:	40021000 	.word	0x40021000
 80043a0:	48000800 	.word	0x48000800
 80043a4:	48000400 	.word	0x48000400
 80043a8:	20000260 	.word	0x20000260
 80043ac:	40020008 	.word	0x40020008

080043b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80043b0:	b590      	push	{r4, r7, lr}
 80043b2:	b08b      	sub	sp, #44	; 0x2c
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b8:	2414      	movs	r4, #20
 80043ba:	193b      	adds	r3, r7, r4
 80043bc:	0018      	movs	r0, r3
 80043be:	2314      	movs	r3, #20
 80043c0:	001a      	movs	r2, r3
 80043c2:	2100      	movs	r1, #0
 80043c4:	f003 ff70 	bl	80082a8 <memset>
  if(hi2c->Instance==I2C1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <HAL_I2C_MspInit+0x90>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d132      	bne.n	8004438 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043d2:	4b1c      	ldr	r3, [pc, #112]	; (8004444 <HAL_I2C_MspInit+0x94>)
 80043d4:	695a      	ldr	r2, [r3, #20]
 80043d6:	4b1b      	ldr	r3, [pc, #108]	; (8004444 <HAL_I2C_MspInit+0x94>)
 80043d8:	2180      	movs	r1, #128	; 0x80
 80043da:	02c9      	lsls	r1, r1, #11
 80043dc:	430a      	orrs	r2, r1
 80043de:	615a      	str	r2, [r3, #20]
 80043e0:	4b18      	ldr	r3, [pc, #96]	; (8004444 <HAL_I2C_MspInit+0x94>)
 80043e2:	695a      	ldr	r2, [r3, #20]
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	02db      	lsls	r3, r3, #11
 80043e8:	4013      	ands	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80043ee:	193b      	adds	r3, r7, r4
 80043f0:	22c0      	movs	r2, #192	; 0xc0
 80043f2:	0092      	lsls	r2, r2, #2
 80043f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043f6:	0021      	movs	r1, r4
 80043f8:	187b      	adds	r3, r7, r1
 80043fa:	2212      	movs	r2, #18
 80043fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fe:	187b      	adds	r3, r7, r1
 8004400:	2200      	movs	r2, #0
 8004402:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004404:	187b      	adds	r3, r7, r1
 8004406:	2203      	movs	r2, #3
 8004408:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800440a:	187b      	adds	r3, r7, r1
 800440c:	2201      	movs	r2, #1
 800440e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004410:	187b      	adds	r3, r7, r1
 8004412:	4a0d      	ldr	r2, [pc, #52]	; (8004448 <HAL_I2C_MspInit+0x98>)
 8004414:	0019      	movs	r1, r3
 8004416:	0010      	movs	r0, r2
 8004418:	f001 f8d4 	bl	80055c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800441c:	4b09      	ldr	r3, [pc, #36]	; (8004444 <HAL_I2C_MspInit+0x94>)
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	4b08      	ldr	r3, [pc, #32]	; (8004444 <HAL_I2C_MspInit+0x94>)
 8004422:	2180      	movs	r1, #128	; 0x80
 8004424:	0389      	lsls	r1, r1, #14
 8004426:	430a      	orrs	r2, r1
 8004428:	61da      	str	r2, [r3, #28]
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <HAL_I2C_MspInit+0x94>)
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	039b      	lsls	r3, r3, #14
 8004432:	4013      	ands	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004438:	46c0      	nop			; (mov r8, r8)
 800443a:	46bd      	mov	sp, r7
 800443c:	b00b      	add	sp, #44	; 0x2c
 800443e:	bd90      	pop	{r4, r7, pc}
 8004440:	40005400 	.word	0x40005400
 8004444:	40021000 	.word	0x40021000
 8004448:	48000400 	.word	0x48000400

0800444c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800444c:	b590      	push	{r4, r7, lr}
 800444e:	b08b      	sub	sp, #44	; 0x2c
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004454:	2414      	movs	r4, #20
 8004456:	193b      	adds	r3, r7, r4
 8004458:	0018      	movs	r0, r3
 800445a:	2314      	movs	r3, #20
 800445c:	001a      	movs	r2, r3
 800445e:	2100      	movs	r1, #0
 8004460:	f003 ff22 	bl	80082a8 <memset>
  if(huart->Instance==USART1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <HAL_UART_MspInit+0xa4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d13b      	bne.n	80044e6 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800446e:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <HAL_UART_MspInit+0xa8>)
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <HAL_UART_MspInit+0xa8>)
 8004474:	2180      	movs	r1, #128	; 0x80
 8004476:	01c9      	lsls	r1, r1, #7
 8004478:	430a      	orrs	r2, r1
 800447a:	619a      	str	r2, [r3, #24]
 800447c:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <HAL_UART_MspInit+0xa8>)
 800447e:	699a      	ldr	r2, [r3, #24]
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	01db      	lsls	r3, r3, #7
 8004484:	4013      	ands	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800448a:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <HAL_UART_MspInit+0xa8>)
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	4b19      	ldr	r3, [pc, #100]	; (80044f4 <HAL_UART_MspInit+0xa8>)
 8004490:	2180      	movs	r1, #128	; 0x80
 8004492:	0289      	lsls	r1, r1, #10
 8004494:	430a      	orrs	r2, r1
 8004496:	615a      	str	r2, [r3, #20]
 8004498:	4b16      	ldr	r3, [pc, #88]	; (80044f4 <HAL_UART_MspInit+0xa8>)
 800449a:	695a      	ldr	r2, [r3, #20]
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	029b      	lsls	r3, r3, #10
 80044a0:	4013      	ands	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044a6:	193b      	adds	r3, r7, r4
 80044a8:	22c0      	movs	r2, #192	; 0xc0
 80044aa:	00d2      	lsls	r2, r2, #3
 80044ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ae:	0021      	movs	r1, r4
 80044b0:	187b      	adds	r3, r7, r1
 80044b2:	2202      	movs	r2, #2
 80044b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b6:	187b      	adds	r3, r7, r1
 80044b8:	2200      	movs	r2, #0
 80044ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044bc:	187b      	adds	r3, r7, r1
 80044be:	2203      	movs	r2, #3
 80044c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80044c2:	187b      	adds	r3, r7, r1
 80044c4:	2201      	movs	r2, #1
 80044c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c8:	187a      	adds	r2, r7, r1
 80044ca:	2390      	movs	r3, #144	; 0x90
 80044cc:	05db      	lsls	r3, r3, #23
 80044ce:	0011      	movs	r1, r2
 80044d0:	0018      	movs	r0, r3
 80044d2:	f001 f877 	bl	80055c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80044d6:	2200      	movs	r2, #0
 80044d8:	2100      	movs	r1, #0
 80044da:	201b      	movs	r0, #27
 80044dc:	f000 fe2a 	bl	8005134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80044e0:	201b      	movs	r0, #27
 80044e2:	f000 fe3c 	bl	800515e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b00b      	add	sp, #44	; 0x2c
 80044ec:	bd90      	pop	{r4, r7, pc}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	40013800 	.word	0x40013800
 80044f4:	40021000 	.word	0x40021000

080044f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044fc:	e7fe      	b.n	80044fc <NMI_Handler+0x4>

080044fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004502:	e7fe      	b.n	8004502 <HardFault_Handler+0x4>

08004504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004508:	46c0      	nop			; (mov r8, r8)
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800451c:	f000 f952 	bl	80047c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004520:	46c0      	nop			; (mov r8, r8)
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800452c:	4b03      	ldr	r3, [pc, #12]	; (800453c <DMA1_Channel1_IRQHandler+0x14>)
 800452e:	0018      	movs	r0, r3
 8004530:	f000 ff5d 	bl	80053ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004534:	46c0      	nop			; (mov r8, r8)
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	20000260 	.word	0x20000260

08004540 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004544:	4b03      	ldr	r3, [pc, #12]	; (8004554 <USART1_IRQHandler+0x14>)
 8004546:	0018      	movs	r0, r3
 8004548:	f002 fde0 	bl	800710c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800454c:	46c0      	nop			; (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	200002f0 	.word	0x200002f0

08004558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
	return 1;
 800455c:	2301      	movs	r3, #1
}
 800455e:	0018      	movs	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <_kill>:

int _kill(int pid, int sig)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800456e:	f003 fe71 	bl	8008254 <__errno>
 8004572:	0003      	movs	r3, r0
 8004574:	2216      	movs	r2, #22
 8004576:	601a      	str	r2, [r3, #0]
	return -1;
 8004578:	2301      	movs	r3, #1
 800457a:	425b      	negs	r3, r3
}
 800457c:	0018      	movs	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	b002      	add	sp, #8
 8004582:	bd80      	pop	{r7, pc}

08004584 <_exit>:

void _exit (int status)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800458c:	2301      	movs	r3, #1
 800458e:	425a      	negs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	0011      	movs	r1, r2
 8004594:	0018      	movs	r0, r3
 8004596:	f7ff ffe5 	bl	8004564 <_kill>
	while (1) {}		/* Make sure we hang here */
 800459a:	e7fe      	b.n	800459a <_exit+0x16>

0800459c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	e00a      	b.n	80045c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80045ae:	e000      	b.n	80045b2 <_read+0x16>
 80045b0:	bf00      	nop
 80045b2:	0001      	movs	r1, r0
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	60ba      	str	r2, [r7, #8]
 80045ba:	b2ca      	uxtb	r2, r1
 80045bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	3301      	adds	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	dbf0      	blt.n	80045ae <_read+0x12>
	}

return len;
 80045cc:	687b      	ldr	r3, [r7, #4]
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b006      	add	sp, #24
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b086      	sub	sp, #24
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e009      	b.n	80045fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	60ba      	str	r2, [r7, #8]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	0018      	movs	r0, r3
 80045f2:	e000      	b.n	80045f6 <_write+0x20>
 80045f4:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	3301      	adds	r3, #1
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	dbf1      	blt.n	80045e8 <_write+0x12>
	}
	return len;
 8004604:	687b      	ldr	r3, [r7, #4]
}
 8004606:	0018      	movs	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	b006      	add	sp, #24
 800460c:	bd80      	pop	{r7, pc}

0800460e <_close>:

int _close(int file)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
	return -1;
 8004616:	2301      	movs	r3, #1
 8004618:	425b      	negs	r3, r3
}
 800461a:	0018      	movs	r0, r3
 800461c:	46bd      	mov	sp, r7
 800461e:	b002      	add	sp, #8
 8004620:	bd80      	pop	{r7, pc}

08004622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2280      	movs	r2, #128	; 0x80
 8004630:	0192      	lsls	r2, r2, #6
 8004632:	605a      	str	r2, [r3, #4]
	return 0;
 8004634:	2300      	movs	r3, #0
}
 8004636:	0018      	movs	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	b002      	add	sp, #8
 800463c:	bd80      	pop	{r7, pc}

0800463e <_isatty>:

int _isatty(int file)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b082      	sub	sp, #8
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
	return 1;
 8004646:	2301      	movs	r3, #1
}
 8004648:	0018      	movs	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	b002      	add	sp, #8
 800464e:	bd80      	pop	{r7, pc}

08004650 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
	return 0;
 800465c:	2300      	movs	r3, #0
}
 800465e:	0018      	movs	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	b004      	add	sp, #16
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004670:	4a14      	ldr	r2, [pc, #80]	; (80046c4 <_sbrk+0x5c>)
 8004672:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <_sbrk+0x60>)
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800467c:	4b13      	ldr	r3, [pc, #76]	; (80046cc <_sbrk+0x64>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d102      	bne.n	800468a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004684:	4b11      	ldr	r3, [pc, #68]	; (80046cc <_sbrk+0x64>)
 8004686:	4a12      	ldr	r2, [pc, #72]	; (80046d0 <_sbrk+0x68>)
 8004688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800468a:	4b10      	ldr	r3, [pc, #64]	; (80046cc <_sbrk+0x64>)
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	18d3      	adds	r3, r2, r3
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	429a      	cmp	r2, r3
 8004696:	d207      	bcs.n	80046a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004698:	f003 fddc 	bl	8008254 <__errno>
 800469c:	0003      	movs	r3, r0
 800469e:	220c      	movs	r2, #12
 80046a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046a2:	2301      	movs	r3, #1
 80046a4:	425b      	negs	r3, r3
 80046a6:	e009      	b.n	80046bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046a8:	4b08      	ldr	r3, [pc, #32]	; (80046cc <_sbrk+0x64>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046ae:	4b07      	ldr	r3, [pc, #28]	; (80046cc <_sbrk+0x64>)
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	18d2      	adds	r2, r2, r3
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <_sbrk+0x64>)
 80046b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80046ba:	68fb      	ldr	r3, [r7, #12]
}
 80046bc:	0018      	movs	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	b006      	add	sp, #24
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20002000 	.word	0x20002000
 80046c8:	00000400 	.word	0x00000400
 80046cc:	2000046c 	.word	0x2000046c
 80046d0:	20000488 	.word	0x20000488

080046d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80046e0:	480d      	ldr	r0, [pc, #52]	; (8004718 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80046e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046e4:	480d      	ldr	r0, [pc, #52]	; (800471c <LoopForever+0x6>)
  ldr r1, =_edata
 80046e6:	490e      	ldr	r1, [pc, #56]	; (8004720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80046e8:	4a0e      	ldr	r2, [pc, #56]	; (8004724 <LoopForever+0xe>)
  movs r3, #0
 80046ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046ec:	e002      	b.n	80046f4 <LoopCopyDataInit>

080046ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046f2:	3304      	adds	r3, #4

080046f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046f8:	d3f9      	bcc.n	80046ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046fa:	4a0b      	ldr	r2, [pc, #44]	; (8004728 <LoopForever+0x12>)
  ldr r4, =_ebss
 80046fc:	4c0b      	ldr	r4, [pc, #44]	; (800472c <LoopForever+0x16>)
  movs r3, #0
 80046fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004700:	e001      	b.n	8004706 <LoopFillZerobss>

08004702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004704:	3204      	adds	r2, #4

08004706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004708:	d3fb      	bcc.n	8004702 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800470a:	f7ff ffe3 	bl	80046d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800470e:	f003 fda7 	bl	8008260 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004712:	f7ff fa8b 	bl	8003c2c <main>

08004716 <LoopForever>:

LoopForever:
    b LoopForever
 8004716:	e7fe      	b.n	8004716 <LoopForever>
  ldr   r0, =_estack
 8004718:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800471c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004720:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8004724:	0800d4c4 	.word	0x0800d4c4
  ldr r2, =_sbss
 8004728:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 800472c:	20000484 	.word	0x20000484

08004730 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004730:	e7fe      	b.n	8004730 <ADC1_COMP_IRQHandler>
	...

08004734 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004738:	4b07      	ldr	r3, [pc, #28]	; (8004758 <HAL_Init+0x24>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_Init+0x24>)
 800473e:	2110      	movs	r1, #16
 8004740:	430a      	orrs	r2, r1
 8004742:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004744:	2003      	movs	r0, #3
 8004746:	f000 f809 	bl	800475c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800474a:	f7ff fd5d 	bl	8004208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	0018      	movs	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	40022000 	.word	0x40022000

0800475c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800475c:	b590      	push	{r4, r7, lr}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004764:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <HAL_InitTick+0x5c>)
 8004766:	681c      	ldr	r4, [r3, #0]
 8004768:	4b14      	ldr	r3, [pc, #80]	; (80047bc <HAL_InitTick+0x60>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	0019      	movs	r1, r3
 800476e:	23fa      	movs	r3, #250	; 0xfa
 8004770:	0098      	lsls	r0, r3, #2
 8004772:	f7fb fce5 	bl	8000140 <__udivsi3>
 8004776:	0003      	movs	r3, r0
 8004778:	0019      	movs	r1, r3
 800477a:	0020      	movs	r0, r4
 800477c:	f7fb fce0 	bl	8000140 <__udivsi3>
 8004780:	0003      	movs	r3, r0
 8004782:	0018      	movs	r0, r3
 8004784:	f000 fcfb 	bl	800517e <HAL_SYSTICK_Config>
 8004788:	1e03      	subs	r3, r0, #0
 800478a:	d001      	beq.n	8004790 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e00f      	b.n	80047b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b03      	cmp	r3, #3
 8004794:	d80b      	bhi.n	80047ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	2301      	movs	r3, #1
 800479a:	425b      	negs	r3, r3
 800479c:	2200      	movs	r2, #0
 800479e:	0018      	movs	r0, r3
 80047a0:	f000 fcc8 	bl	8005134 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047a4:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <HAL_InitTick+0x64>)
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e000      	b.n	80047b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
}
 80047b0:	0018      	movs	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	b003      	add	sp, #12
 80047b6:	bd90      	pop	{r4, r7, pc}
 80047b8:	20000024 	.word	0x20000024
 80047bc:	2000002c 	.word	0x2000002c
 80047c0:	20000028 	.word	0x20000028

080047c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <HAL_IncTick+0x1c>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	001a      	movs	r2, r3
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <HAL_IncTick+0x20>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	18d2      	adds	r2, r2, r3
 80047d4:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <HAL_IncTick+0x20>)
 80047d6:	601a      	str	r2, [r3, #0]
}
 80047d8:	46c0      	nop			; (mov r8, r8)
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	2000002c 	.word	0x2000002c
 80047e4:	20000470 	.word	0x20000470

080047e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  return uwTick;
 80047ec:	4b02      	ldr	r3, [pc, #8]	; (80047f8 <HAL_GetTick+0x10>)
 80047ee:	681b      	ldr	r3, [r3, #0]
}
 80047f0:	0018      	movs	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	20000470 	.word	0x20000470

080047fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004804:	230f      	movs	r3, #15
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e125      	b.n	8004a66 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10a      	bne.n	8004838 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2234      	movs	r2, #52	; 0x34
 800482c:	2100      	movs	r1, #0
 800482e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	0018      	movs	r0, r3
 8004834:	f7ff fd0c 	bl	8004250 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	2210      	movs	r2, #16
 800483e:	4013      	ands	r3, r2
 8004840:	d000      	beq.n	8004844 <HAL_ADC_Init+0x48>
 8004842:	e103      	b.n	8004a4c <HAL_ADC_Init+0x250>
 8004844:	230f      	movs	r3, #15
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d000      	beq.n	8004850 <HAL_ADC_Init+0x54>
 800484e:	e0fd      	b.n	8004a4c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2204      	movs	r2, #4
 8004858:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800485a:	d000      	beq.n	800485e <HAL_ADC_Init+0x62>
 800485c:	e0f6      	b.n	8004a4c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	4a83      	ldr	r2, [pc, #524]	; (8004a70 <HAL_ADC_Init+0x274>)
 8004864:	4013      	ands	r3, r2
 8004866:	2202      	movs	r2, #2
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2203      	movs	r2, #3
 8004876:	4013      	ands	r3, r2
 8004878:	2b01      	cmp	r3, #1
 800487a:	d112      	bne.n	80048a2 <HAL_ADC_Init+0xa6>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2201      	movs	r2, #1
 8004884:	4013      	ands	r3, r2
 8004886:	2b01      	cmp	r3, #1
 8004888:	d009      	beq.n	800489e <HAL_ADC_Init+0xa2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	2380      	movs	r3, #128	; 0x80
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	401a      	ands	r2, r3
 8004896:	2380      	movs	r3, #128	; 0x80
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	429a      	cmp	r2, r3
 800489c:	d101      	bne.n	80048a2 <HAL_ADC_Init+0xa6>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <HAL_ADC_Init+0xa8>
 80048a2:	2300      	movs	r3, #0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d116      	bne.n	80048d6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2218      	movs	r2, #24
 80048b0:	4393      	bics	r3, r2
 80048b2:	0019      	movs	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	0899      	lsrs	r1, r3, #2
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4964      	ldr	r1, [pc, #400]	; (8004a74 <HAL_ADC_Init+0x278>)
 80048e2:	400a      	ands	r2, r1
 80048e4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	7e1b      	ldrb	r3, [r3, #24]
 80048ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	7e5b      	ldrb	r3, [r3, #25]
 80048f0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80048f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	7e9b      	ldrb	r3, [r3, #26]
 80048f8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80048fa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	2b01      	cmp	r3, #1
 8004902:	d002      	beq.n	800490a <HAL_ADC_Init+0x10e>
 8004904:	2380      	movs	r3, #128	; 0x80
 8004906:	015b      	lsls	r3, r3, #5
 8004908:	e000      	b.n	800490c <HAL_ADC_Init+0x110>
 800490a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800490c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004912:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d101      	bne.n	8004920 <HAL_ADC_Init+0x124>
 800491c:	2304      	movs	r3, #4
 800491e:	e000      	b.n	8004922 <HAL_ADC_Init+0x126>
 8004920:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004922:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2124      	movs	r1, #36	; 0x24
 8004928:	5c5b      	ldrb	r3, [r3, r1]
 800492a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800492c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	4313      	orrs	r3, r2
 8004932:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	7edb      	ldrb	r3, [r3, #27]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d115      	bne.n	8004968 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	7e9b      	ldrb	r3, [r3, #26]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d105      	bne.n	8004950 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2280      	movs	r2, #128	; 0x80
 8004948:	0252      	lsls	r2, r2, #9
 800494a:	4313      	orrs	r3, r2
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	e00b      	b.n	8004968 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	2220      	movs	r2, #32
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004960:	2201      	movs	r2, #1
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69da      	ldr	r2, [r3, #28]
 800496c:	23c2      	movs	r3, #194	; 0xc2
 800496e:	33ff      	adds	r3, #255	; 0xff
 8004970:	429a      	cmp	r2, r3
 8004972:	d007      	beq.n	8004984 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800497c:	4313      	orrs	r3, r2
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	4313      	orrs	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68d9      	ldr	r1, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	430a      	orrs	r2, r1
 8004992:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004998:	2380      	movs	r3, #128	; 0x80
 800499a:	055b      	lsls	r3, r3, #21
 800499c:	429a      	cmp	r2, r3
 800499e:	d01b      	beq.n	80049d8 <HAL_ADC_Init+0x1dc>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d017      	beq.n	80049d8 <HAL_ADC_Init+0x1dc>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d013      	beq.n	80049d8 <HAL_ADC_Init+0x1dc>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d00f      	beq.n	80049d8 <HAL_ADC_Init+0x1dc>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d00b      	beq.n	80049d8 <HAL_ADC_Init+0x1dc>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	2b05      	cmp	r3, #5
 80049c6:	d007      	beq.n	80049d8 <HAL_ADC_Init+0x1dc>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	2b06      	cmp	r3, #6
 80049ce:	d003      	beq.n	80049d8 <HAL_ADC_Init+0x1dc>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	2b07      	cmp	r3, #7
 80049d6:	d112      	bne.n	80049fe <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695a      	ldr	r2, [r3, #20]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2107      	movs	r1, #7
 80049e4:	438a      	bics	r2, r1
 80049e6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6959      	ldr	r1, [r3, #20]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	2207      	movs	r2, #7
 80049f4:	401a      	ands	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	4a1c      	ldr	r2, [pc, #112]	; (8004a78 <HAL_ADC_Init+0x27c>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d10b      	bne.n	8004a26 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	2203      	movs	r2, #3
 8004a1a:	4393      	bics	r3, r2
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004a24:	e01c      	b.n	8004a60 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	2212      	movs	r2, #18
 8004a2c:	4393      	bics	r3, r2
 8004a2e:	2210      	movs	r2, #16
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004a42:	230f      	movs	r3, #15
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	2201      	movs	r2, #1
 8004a48:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004a4a:	e009      	b.n	8004a60 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	2210      	movs	r2, #16
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004a58:	230f      	movs	r3, #15
 8004a5a:	18fb      	adds	r3, r7, r3
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004a60:	230f      	movs	r3, #15
 8004a62:	18fb      	adds	r3, r7, r3
 8004a64:	781b      	ldrb	r3, [r3, #0]
}
 8004a66:	0018      	movs	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b004      	add	sp, #16
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	fffffefd 	.word	0xfffffefd
 8004a74:	fffe0219 	.word	0xfffe0219
 8004a78:	833fffe7 	.word	0x833fffe7

08004a7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004a7c:	b590      	push	{r4, r7, lr}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a88:	2317      	movs	r3, #23
 8004a8a:	18fb      	adds	r3, r7, r3
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2204      	movs	r2, #4
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d15e      	bne.n	8004b5a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2234      	movs	r2, #52	; 0x34
 8004aa0:	5c9b      	ldrb	r3, [r3, r2]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_ADC_Start_DMA+0x2e>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e05e      	b.n	8004b68 <HAL_ADC_Start_DMA+0xec>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2234      	movs	r2, #52	; 0x34
 8004aae:	2101      	movs	r1, #1
 8004ab0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	7e5b      	ldrb	r3, [r3, #25]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d007      	beq.n	8004aca <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004aba:	2317      	movs	r3, #23
 8004abc:	18fc      	adds	r4, r7, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 f983 	bl	8004dcc <ADC_Enable>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004aca:	2317      	movs	r3, #23
 8004acc:	18fb      	adds	r3, r7, r3
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d146      	bne.n	8004b62 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	4a25      	ldr	r2, [pc, #148]	; (8004b70 <HAL_ADC_Start_DMA+0xf4>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	2280      	movs	r2, #128	; 0x80
 8004ade:	0052      	lsls	r2, r2, #1
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2234      	movs	r2, #52	; 0x34
 8004af0:	2100      	movs	r1, #0
 8004af2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af8:	4a1e      	ldr	r2, [pc, #120]	; (8004b74 <HAL_ADC_Start_DMA+0xf8>)
 8004afa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	4a1d      	ldr	r2, [pc, #116]	; (8004b78 <HAL_ADC_Start_DMA+0xfc>)
 8004b02:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	4a1c      	ldr	r2, [pc, #112]	; (8004b7c <HAL_ADC_Start_DMA+0x100>)
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	221c      	movs	r2, #28
 8004b12:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2110      	movs	r1, #16
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2101      	movs	r1, #1
 8004b30:	430a      	orrs	r2, r1
 8004b32:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3340      	adds	r3, #64	; 0x40
 8004b3e:	0019      	movs	r1, r3
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f000 fb70 	bl	8005228 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2104      	movs	r1, #4
 8004b54:	430a      	orrs	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]
 8004b58:	e003      	b.n	8004b62 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b5a:	2317      	movs	r3, #23
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	2202      	movs	r2, #2
 8004b60:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004b62:	2317      	movs	r3, #23
 8004b64:	18fb      	adds	r3, r7, r3
 8004b66:	781b      	ldrb	r3, [r3, #0]
}
 8004b68:	0018      	movs	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	b007      	add	sp, #28
 8004b6e:	bd90      	pop	{r4, r7, pc}
 8004b70:	fffff0fe 	.word	0xfffff0fe
 8004b74:	08004ed5 	.word	0x08004ed5
 8004b78:	08004f89 	.word	0x08004f89
 8004b7c:	08004fa7 	.word	0x08004fa7

08004b80 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004b88:	46c0      	nop			; (mov r8, r8)
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b002      	add	sp, #8
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b002      	add	sp, #8
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ba8:	46c0      	nop			; (mov r8, r8)
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b002      	add	sp, #8
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bba:	230f      	movs	r3, #15
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	055b      	lsls	r3, r3, #21
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d011      	beq.n	8004bf6 <HAL_ADC_ConfigChannel+0x46>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d00d      	beq.n	8004bf6 <HAL_ADC_ConfigChannel+0x46>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d009      	beq.n	8004bf6 <HAL_ADC_ConfigChannel+0x46>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d005      	beq.n	8004bf6 <HAL_ADC_ConfigChannel+0x46>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d001      	beq.n	8004bf6 <HAL_ADC_ConfigChannel+0x46>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2234      	movs	r2, #52	; 0x34
 8004bfa:	5c9b      	ldrb	r3, [r3, r2]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_ADC_ConfigChannel+0x54>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e0d0      	b.n	8004da6 <HAL_ADC_ConfigChannel+0x1f6>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2234      	movs	r2, #52	; 0x34
 8004c08:	2101      	movs	r1, #1
 8004c0a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2204      	movs	r2, #4
 8004c14:	4013      	ands	r3, r2
 8004c16:	d000      	beq.n	8004c1a <HAL_ADC_ConfigChannel+0x6a>
 8004c18:	e0b4      	b.n	8004d84 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	4a64      	ldr	r2, [pc, #400]	; (8004db0 <HAL_ADC_ConfigChannel+0x200>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d100      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x76>
 8004c24:	e082      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2201      	movs	r2, #1
 8004c32:	409a      	lsls	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	055b      	lsls	r3, r3, #21
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d037      	beq.n	8004cb8 <HAL_ADC_ConfigChannel+0x108>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d033      	beq.n	8004cb8 <HAL_ADC_ConfigChannel+0x108>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d02f      	beq.n	8004cb8 <HAL_ADC_ConfigChannel+0x108>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d02b      	beq.n	8004cb8 <HAL_ADC_ConfigChannel+0x108>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d027      	beq.n	8004cb8 <HAL_ADC_ConfigChannel+0x108>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	2b05      	cmp	r3, #5
 8004c6e:	d023      	beq.n	8004cb8 <HAL_ADC_ConfigChannel+0x108>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	2b06      	cmp	r3, #6
 8004c76:	d01f      	beq.n	8004cb8 <HAL_ADC_ConfigChannel+0x108>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	2b07      	cmp	r3, #7
 8004c7e:	d01b      	beq.n	8004cb8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	2107      	movs	r1, #7
 8004c8c:	400b      	ands	r3, r1
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d012      	beq.n	8004cb8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695a      	ldr	r2, [r3, #20]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2107      	movs	r1, #7
 8004c9e:	438a      	bics	r2, r1
 8004ca0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6959      	ldr	r1, [r3, #20]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2207      	movs	r2, #7
 8004cae:	401a      	ands	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	d007      	beq.n	8004cd0 <HAL_ADC_ConfigChannel+0x120>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b11      	cmp	r3, #17
 8004cc6:	d003      	beq.n	8004cd0 <HAL_ADC_ConfigChannel+0x120>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b12      	cmp	r3, #18
 8004cce:	d163      	bne.n	8004d98 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004cd0:	4b38      	ldr	r3, [pc, #224]	; (8004db4 <HAL_ADC_ConfigChannel+0x204>)
 8004cd2:	6819      	ldr	r1, [r3, #0]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d009      	beq.n	8004cf0 <HAL_ADC_ConfigChannel+0x140>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b11      	cmp	r3, #17
 8004ce2:	d102      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x13a>
 8004ce4:	2380      	movs	r3, #128	; 0x80
 8004ce6:	03db      	lsls	r3, r3, #15
 8004ce8:	e004      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x144>
 8004cea:	2380      	movs	r3, #128	; 0x80
 8004cec:	045b      	lsls	r3, r3, #17
 8004cee:	e001      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x144>
 8004cf0:	2380      	movs	r3, #128	; 0x80
 8004cf2:	041b      	lsls	r3, r3, #16
 8004cf4:	4a2f      	ldr	r2, [pc, #188]	; (8004db4 <HAL_ADC_ConfigChannel+0x204>)
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b10      	cmp	r3, #16
 8004d00:	d14a      	bne.n	8004d98 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d02:	4b2d      	ldr	r3, [pc, #180]	; (8004db8 <HAL_ADC_ConfigChannel+0x208>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	492d      	ldr	r1, [pc, #180]	; (8004dbc <HAL_ADC_ConfigChannel+0x20c>)
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f7fb fa19 	bl	8000140 <__udivsi3>
 8004d0e:	0003      	movs	r3, r0
 8004d10:	001a      	movs	r2, r3
 8004d12:	0013      	movs	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	189b      	adds	r3, r3, r2
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d1c:	e002      	b.n	8004d24 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f9      	bne.n	8004d1e <HAL_ADC_ConfigChannel+0x16e>
 8004d2a:	e035      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2101      	movs	r1, #1
 8004d38:	4099      	lsls	r1, r3
 8004d3a:	000b      	movs	r3, r1
 8004d3c:	43d9      	mvns	r1, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	400a      	ands	r2, r1
 8004d44:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b10      	cmp	r3, #16
 8004d4c:	d007      	beq.n	8004d5e <HAL_ADC_ConfigChannel+0x1ae>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b11      	cmp	r3, #17
 8004d54:	d003      	beq.n	8004d5e <HAL_ADC_ConfigChannel+0x1ae>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b12      	cmp	r3, #18
 8004d5c:	d11c      	bne.n	8004d98 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004d5e:	4b15      	ldr	r3, [pc, #84]	; (8004db4 <HAL_ADC_ConfigChannel+0x204>)
 8004d60:	6819      	ldr	r1, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	d007      	beq.n	8004d7a <HAL_ADC_ConfigChannel+0x1ca>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b11      	cmp	r3, #17
 8004d70:	d101      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x1c6>
 8004d72:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <HAL_ADC_ConfigChannel+0x210>)
 8004d74:	e002      	b.n	8004d7c <HAL_ADC_ConfigChannel+0x1cc>
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <HAL_ADC_ConfigChannel+0x214>)
 8004d78:	e000      	b.n	8004d7c <HAL_ADC_ConfigChannel+0x1cc>
 8004d7a:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <HAL_ADC_ConfigChannel+0x218>)
 8004d7c:	4a0d      	ldr	r2, [pc, #52]	; (8004db4 <HAL_ADC_ConfigChannel+0x204>)
 8004d7e:	400b      	ands	r3, r1
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	e009      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	2220      	movs	r2, #32
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004d90:	230f      	movs	r3, #15
 8004d92:	18fb      	adds	r3, r7, r3
 8004d94:	2201      	movs	r2, #1
 8004d96:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2234      	movs	r2, #52	; 0x34
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004da0:	230f      	movs	r3, #15
 8004da2:	18fb      	adds	r3, r7, r3
 8004da4:	781b      	ldrb	r3, [r3, #0]
}
 8004da6:	0018      	movs	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b004      	add	sp, #16
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	00001001 	.word	0x00001001
 8004db4:	40012708 	.word	0x40012708
 8004db8:	20000024 	.word	0x20000024
 8004dbc:	000f4240 	.word	0x000f4240
 8004dc0:	ffbfffff 	.word	0xffbfffff
 8004dc4:	feffffff 	.word	0xfeffffff
 8004dc8:	ff7fffff 	.word	0xff7fffff

08004dcc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	2203      	movs	r2, #3
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d112      	bne.n	8004e10 <ADC_Enable+0x44>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d009      	beq.n	8004e0c <ADC_Enable+0x40>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	401a      	ands	r2, r3
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d101      	bne.n	8004e10 <ADC_Enable+0x44>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e000      	b.n	8004e12 <ADC_Enable+0x46>
 8004e10:	2300      	movs	r3, #0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d152      	bne.n	8004ebc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4a2a      	ldr	r2, [pc, #168]	; (8004ec8 <ADC_Enable+0xfc>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d00d      	beq.n	8004e3e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	2210      	movs	r2, #16
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e32:	2201      	movs	r2, #1
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e03f      	b.n	8004ebe <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2101      	movs	r1, #1
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004e4e:	4b1f      	ldr	r3, [pc, #124]	; (8004ecc <ADC_Enable+0x100>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	491f      	ldr	r1, [pc, #124]	; (8004ed0 <ADC_Enable+0x104>)
 8004e54:	0018      	movs	r0, r3
 8004e56:	f7fb f973 	bl	8000140 <__udivsi3>
 8004e5a:	0003      	movs	r3, r0
 8004e5c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004e5e:	e002      	b.n	8004e66 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1f9      	bne.n	8004e60 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e6c:	f7ff fcbc 	bl	80047e8 <HAL_GetTick>
 8004e70:	0003      	movs	r3, r0
 8004e72:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004e74:	e01b      	b.n	8004eae <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e76:	f7ff fcb7 	bl	80047e8 <HAL_GetTick>
 8004e7a:	0002      	movs	r2, r0
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d914      	bls.n	8004eae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d00d      	beq.n	8004eae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	2210      	movs	r2, #16
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e007      	b.n	8004ebe <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d1dc      	bne.n	8004e76 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b004      	add	sp, #16
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	80000017 	.word	0x80000017
 8004ecc:	20000024 	.word	0x20000024
 8004ed0:	000f4240 	.word	0x000f4240

08004ed4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	2250      	movs	r2, #80	; 0x50
 8004ee8:	4013      	ands	r3, r2
 8004eea:	d140      	bne.n	8004f6e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	2280      	movs	r2, #128	; 0x80
 8004ef2:	0092      	lsls	r2, r2, #2
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	23c0      	movs	r3, #192	; 0xc0
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	4013      	ands	r3, r2
 8004f06:	d12d      	bne.n	8004f64 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d129      	bne.n	8004f64 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2208      	movs	r2, #8
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d122      	bne.n	8004f64 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2204      	movs	r2, #4
 8004f26:	4013      	ands	r3, r2
 8004f28:	d110      	bne.n	8004f4c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	210c      	movs	r1, #12
 8004f36:	438a      	bics	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	4a11      	ldr	r2, [pc, #68]	; (8004f84 <ADC_DMAConvCplt+0xb0>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	2201      	movs	r2, #1
 8004f44:	431a      	orrs	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	639a      	str	r2, [r3, #56]	; 0x38
 8004f4a:	e00b      	b.n	8004f64 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	2220      	movs	r2, #32
 8004f52:	431a      	orrs	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	0018      	movs	r0, r3
 8004f68:	f7ff fe0a 	bl	8004b80 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8004f6c:	e005      	b.n	8004f7a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	0010      	movs	r0, r2
 8004f78:	4798      	blx	r3
}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	b004      	add	sp, #16
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	fffffefe 	.word	0xfffffefe

08004f88 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f7ff fdf9 	bl	8004b90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	b004      	add	sp, #16
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	2240      	movs	r2, #64	; 0x40
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f7ff fde6 	bl	8004ba0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fd4:	46c0      	nop			; (mov r8, r8)
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b004      	add	sp, #16
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	0002      	movs	r2, r0
 8004fe4:	1dfb      	adds	r3, r7, #7
 8004fe6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004fe8:	1dfb      	adds	r3, r7, #7
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b7f      	cmp	r3, #127	; 0x7f
 8004fee:	d809      	bhi.n	8005004 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ff0:	1dfb      	adds	r3, r7, #7
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	001a      	movs	r2, r3
 8004ff6:	231f      	movs	r3, #31
 8004ff8:	401a      	ands	r2, r3
 8004ffa:	4b04      	ldr	r3, [pc, #16]	; (800500c <__NVIC_EnableIRQ+0x30>)
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	4091      	lsls	r1, r2
 8005000:	000a      	movs	r2, r1
 8005002:	601a      	str	r2, [r3, #0]
  }
}
 8005004:	46c0      	nop			; (mov r8, r8)
 8005006:	46bd      	mov	sp, r7
 8005008:	b002      	add	sp, #8
 800500a:	bd80      	pop	{r7, pc}
 800500c:	e000e100 	.word	0xe000e100

08005010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005010:	b590      	push	{r4, r7, lr}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	0002      	movs	r2, r0
 8005018:	6039      	str	r1, [r7, #0]
 800501a:	1dfb      	adds	r3, r7, #7
 800501c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800501e:	1dfb      	adds	r3, r7, #7
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b7f      	cmp	r3, #127	; 0x7f
 8005024:	d828      	bhi.n	8005078 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005026:	4a2f      	ldr	r2, [pc, #188]	; (80050e4 <__NVIC_SetPriority+0xd4>)
 8005028:	1dfb      	adds	r3, r7, #7
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	b25b      	sxtb	r3, r3
 800502e:	089b      	lsrs	r3, r3, #2
 8005030:	33c0      	adds	r3, #192	; 0xc0
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	589b      	ldr	r3, [r3, r2]
 8005036:	1dfa      	adds	r2, r7, #7
 8005038:	7812      	ldrb	r2, [r2, #0]
 800503a:	0011      	movs	r1, r2
 800503c:	2203      	movs	r2, #3
 800503e:	400a      	ands	r2, r1
 8005040:	00d2      	lsls	r2, r2, #3
 8005042:	21ff      	movs	r1, #255	; 0xff
 8005044:	4091      	lsls	r1, r2
 8005046:	000a      	movs	r2, r1
 8005048:	43d2      	mvns	r2, r2
 800504a:	401a      	ands	r2, r3
 800504c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	019b      	lsls	r3, r3, #6
 8005052:	22ff      	movs	r2, #255	; 0xff
 8005054:	401a      	ands	r2, r3
 8005056:	1dfb      	adds	r3, r7, #7
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	0018      	movs	r0, r3
 800505c:	2303      	movs	r3, #3
 800505e:	4003      	ands	r3, r0
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005064:	481f      	ldr	r0, [pc, #124]	; (80050e4 <__NVIC_SetPriority+0xd4>)
 8005066:	1dfb      	adds	r3, r7, #7
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	b25b      	sxtb	r3, r3
 800506c:	089b      	lsrs	r3, r3, #2
 800506e:	430a      	orrs	r2, r1
 8005070:	33c0      	adds	r3, #192	; 0xc0
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005076:	e031      	b.n	80050dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005078:	4a1b      	ldr	r2, [pc, #108]	; (80050e8 <__NVIC_SetPriority+0xd8>)
 800507a:	1dfb      	adds	r3, r7, #7
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	0019      	movs	r1, r3
 8005080:	230f      	movs	r3, #15
 8005082:	400b      	ands	r3, r1
 8005084:	3b08      	subs	r3, #8
 8005086:	089b      	lsrs	r3, r3, #2
 8005088:	3306      	adds	r3, #6
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	18d3      	adds	r3, r2, r3
 800508e:	3304      	adds	r3, #4
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	1dfa      	adds	r2, r7, #7
 8005094:	7812      	ldrb	r2, [r2, #0]
 8005096:	0011      	movs	r1, r2
 8005098:	2203      	movs	r2, #3
 800509a:	400a      	ands	r2, r1
 800509c:	00d2      	lsls	r2, r2, #3
 800509e:	21ff      	movs	r1, #255	; 0xff
 80050a0:	4091      	lsls	r1, r2
 80050a2:	000a      	movs	r2, r1
 80050a4:	43d2      	mvns	r2, r2
 80050a6:	401a      	ands	r2, r3
 80050a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	019b      	lsls	r3, r3, #6
 80050ae:	22ff      	movs	r2, #255	; 0xff
 80050b0:	401a      	ands	r2, r3
 80050b2:	1dfb      	adds	r3, r7, #7
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	0018      	movs	r0, r3
 80050b8:	2303      	movs	r3, #3
 80050ba:	4003      	ands	r3, r0
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050c0:	4809      	ldr	r0, [pc, #36]	; (80050e8 <__NVIC_SetPriority+0xd8>)
 80050c2:	1dfb      	adds	r3, r7, #7
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	001c      	movs	r4, r3
 80050c8:	230f      	movs	r3, #15
 80050ca:	4023      	ands	r3, r4
 80050cc:	3b08      	subs	r3, #8
 80050ce:	089b      	lsrs	r3, r3, #2
 80050d0:	430a      	orrs	r2, r1
 80050d2:	3306      	adds	r3, #6
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	18c3      	adds	r3, r0, r3
 80050d8:	3304      	adds	r3, #4
 80050da:	601a      	str	r2, [r3, #0]
}
 80050dc:	46c0      	nop			; (mov r8, r8)
 80050de:	46bd      	mov	sp, r7
 80050e0:	b003      	add	sp, #12
 80050e2:	bd90      	pop	{r4, r7, pc}
 80050e4:	e000e100 	.word	0xe000e100
 80050e8:	e000ed00 	.word	0xe000ed00

080050ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	1e5a      	subs	r2, r3, #1
 80050f8:	2380      	movs	r3, #128	; 0x80
 80050fa:	045b      	lsls	r3, r3, #17
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d301      	bcc.n	8005104 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005100:	2301      	movs	r3, #1
 8005102:	e010      	b.n	8005126 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005104:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <SysTick_Config+0x44>)
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	3a01      	subs	r2, #1
 800510a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800510c:	2301      	movs	r3, #1
 800510e:	425b      	negs	r3, r3
 8005110:	2103      	movs	r1, #3
 8005112:	0018      	movs	r0, r3
 8005114:	f7ff ff7c 	bl	8005010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005118:	4b05      	ldr	r3, [pc, #20]	; (8005130 <SysTick_Config+0x44>)
 800511a:	2200      	movs	r2, #0
 800511c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800511e:	4b04      	ldr	r3, [pc, #16]	; (8005130 <SysTick_Config+0x44>)
 8005120:	2207      	movs	r2, #7
 8005122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005124:	2300      	movs	r3, #0
}
 8005126:	0018      	movs	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	b002      	add	sp, #8
 800512c:	bd80      	pop	{r7, pc}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	e000e010 	.word	0xe000e010

08005134 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	210f      	movs	r1, #15
 8005140:	187b      	adds	r3, r7, r1
 8005142:	1c02      	adds	r2, r0, #0
 8005144:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	187b      	adds	r3, r7, r1
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	b25b      	sxtb	r3, r3
 800514e:	0011      	movs	r1, r2
 8005150:	0018      	movs	r0, r3
 8005152:	f7ff ff5d 	bl	8005010 <__NVIC_SetPriority>
}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	46bd      	mov	sp, r7
 800515a:	b004      	add	sp, #16
 800515c:	bd80      	pop	{r7, pc}

0800515e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
 8005164:	0002      	movs	r2, r0
 8005166:	1dfb      	adds	r3, r7, #7
 8005168:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800516a:	1dfb      	adds	r3, r7, #7
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	b25b      	sxtb	r3, r3
 8005170:	0018      	movs	r0, r3
 8005172:	f7ff ff33 	bl	8004fdc <__NVIC_EnableIRQ>
}
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	46bd      	mov	sp, r7
 800517a:	b002      	add	sp, #8
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	0018      	movs	r0, r3
 800518a:	f7ff ffaf 	bl	80050ec <SysTick_Config>
 800518e:	0003      	movs	r3, r0
}
 8005190:	0018      	movs	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	b002      	add	sp, #8
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e036      	b.n	800521c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2221      	movs	r2, #33	; 0x21
 80051b2:	2102      	movs	r1, #2
 80051b4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4a18      	ldr	r2, [pc, #96]	; (8005224 <HAL_DMA_Init+0x8c>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80051ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	0018      	movs	r0, r3
 8005200:	f000 f9c4 	bl	800558c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2221      	movs	r2, #33	; 0x21
 800520e:	2101      	movs	r1, #1
 8005210:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	2100      	movs	r1, #0
 8005218:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}  
 800521c:	0018      	movs	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	b004      	add	sp, #16
 8005222:	bd80      	pop	{r7, pc}
 8005224:	ffffc00f 	.word	0xffffc00f

08005228 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005236:	2317      	movs	r3, #23
 8005238:	18fb      	adds	r3, r7, r3
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	5c9b      	ldrb	r3, [r3, r2]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_DMA_Start_IT+0x24>
 8005248:	2302      	movs	r3, #2
 800524a:	e04f      	b.n	80052ec <HAL_DMA_Start_IT+0xc4>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2220      	movs	r2, #32
 8005250:	2101      	movs	r1, #1
 8005252:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2221      	movs	r2, #33	; 0x21
 8005258:	5c9b      	ldrb	r3, [r3, r2]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	d13a      	bne.n	80052d6 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2221      	movs	r2, #33	; 0x21
 8005264:	2102      	movs	r1, #2
 8005266:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2101      	movs	r1, #1
 800527a:	438a      	bics	r2, r1
 800527c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f954 	bl	8005532 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d008      	beq.n	80052a4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	210e      	movs	r1, #14
 800529e:	430a      	orrs	r2, r1
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e00f      	b.n	80052c4 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	210a      	movs	r1, #10
 80052b0:	430a      	orrs	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2104      	movs	r1, #4
 80052c0:	438a      	bics	r2, r1
 80052c2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2101      	movs	r1, #1
 80052d0:	430a      	orrs	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	e007      	b.n	80052e6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2220      	movs	r2, #32
 80052da:	2100      	movs	r1, #0
 80052dc:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80052de:	2317      	movs	r3, #23
 80052e0:	18fb      	adds	r3, r7, r3
 80052e2:	2202      	movs	r2, #2
 80052e4:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80052e6:	2317      	movs	r3, #23
 80052e8:	18fb      	adds	r3, r7, r3
 80052ea:	781b      	ldrb	r3, [r3, #0]
} 
 80052ec:	0018      	movs	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	b006      	add	sp, #24
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2221      	movs	r2, #33	; 0x21
 8005300:	5c9b      	ldrb	r3, [r3, r2]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d008      	beq.n	800531a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2204      	movs	r2, #4
 800530c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	2100      	movs	r1, #0
 8005314:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e020      	b.n	800535c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	210e      	movs	r1, #14
 8005326:	438a      	bics	r2, r1
 8005328:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2101      	movs	r1, #1
 8005336:	438a      	bics	r2, r1
 8005338:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005342:	2101      	movs	r1, #1
 8005344:	4091      	lsls	r1, r2
 8005346:	000a      	movs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2221      	movs	r2, #33	; 0x21
 800534e:	2101      	movs	r1, #1
 8005350:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2220      	movs	r2, #32
 8005356:	2100      	movs	r1, #0
 8005358:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	0018      	movs	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	b002      	add	sp, #8
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800536c:	210f      	movs	r1, #15
 800536e:	187b      	adds	r3, r7, r1
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2221      	movs	r2, #33	; 0x21
 8005378:	5c9b      	ldrb	r3, [r3, r2]
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d006      	beq.n	800538e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2204      	movs	r2, #4
 8005384:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005386:	187b      	adds	r3, r7, r1
 8005388:	2201      	movs	r2, #1
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	e028      	b.n	80053e0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	210e      	movs	r1, #14
 800539a:	438a      	bics	r2, r1
 800539c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2101      	movs	r1, #1
 80053aa:	438a      	bics	r2, r1
 80053ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b6:	2101      	movs	r1, #1
 80053b8:	4091      	lsls	r1, r2
 80053ba:	000a      	movs	r2, r1
 80053bc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2221      	movs	r2, #33	; 0x21
 80053c2:	2101      	movs	r1, #1
 80053c4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	2100      	movs	r1, #0
 80053cc:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d004      	beq.n	80053e0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	0010      	movs	r0, r2
 80053de:	4798      	blx	r3
    } 
  }
  return status;
 80053e0:	230f      	movs	r3, #15
 80053e2:	18fb      	adds	r3, r7, r3
 80053e4:	781b      	ldrb	r3, [r3, #0]
}
 80053e6:	0018      	movs	r0, r3
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b004      	add	sp, #16
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	2204      	movs	r2, #4
 800540c:	409a      	lsls	r2, r3
 800540e:	0013      	movs	r3, r2
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4013      	ands	r3, r2
 8005414:	d024      	beq.n	8005460 <HAL_DMA_IRQHandler+0x72>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2204      	movs	r2, #4
 800541a:	4013      	ands	r3, r2
 800541c:	d020      	beq.n	8005460 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2220      	movs	r2, #32
 8005426:	4013      	ands	r3, r2
 8005428:	d107      	bne.n	800543a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2104      	movs	r1, #4
 8005436:	438a      	bics	r2, r1
 8005438:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005442:	2104      	movs	r1, #4
 8005444:	4091      	lsls	r1, r2
 8005446:	000a      	movs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d100      	bne.n	8005454 <HAL_DMA_IRQHandler+0x66>
 8005452:	e06a      	b.n	800552a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	0010      	movs	r0, r2
 800545c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800545e:	e064      	b.n	800552a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	2202      	movs	r2, #2
 8005466:	409a      	lsls	r2, r3
 8005468:	0013      	movs	r3, r2
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4013      	ands	r3, r2
 800546e:	d02b      	beq.n	80054c8 <HAL_DMA_IRQHandler+0xda>
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2202      	movs	r2, #2
 8005474:	4013      	ands	r3, r2
 8005476:	d027      	beq.n	80054c8 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2220      	movs	r2, #32
 8005480:	4013      	ands	r3, r2
 8005482:	d10b      	bne.n	800549c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	210a      	movs	r1, #10
 8005490:	438a      	bics	r2, r1
 8005492:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2221      	movs	r2, #33	; 0x21
 8005498:	2101      	movs	r1, #1
 800549a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a4:	2102      	movs	r1, #2
 80054a6:	4091      	lsls	r1, r2
 80054a8:	000a      	movs	r2, r1
 80054aa:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	2100      	movs	r1, #0
 80054b2:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d036      	beq.n	800552a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	0010      	movs	r0, r2
 80054c4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80054c6:	e030      	b.n	800552a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	2208      	movs	r2, #8
 80054ce:	409a      	lsls	r2, r3
 80054d0:	0013      	movs	r3, r2
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4013      	ands	r3, r2
 80054d6:	d028      	beq.n	800552a <HAL_DMA_IRQHandler+0x13c>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2208      	movs	r2, #8
 80054dc:	4013      	ands	r3, r2
 80054de:	d024      	beq.n	800552a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	210e      	movs	r1, #14
 80054ec:	438a      	bics	r2, r1
 80054ee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f8:	2101      	movs	r1, #1
 80054fa:	4091      	lsls	r1, r2
 80054fc:	000a      	movs	r2, r1
 80054fe:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2221      	movs	r2, #33	; 0x21
 800550a:	2101      	movs	r1, #1
 800550c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	2100      	movs	r1, #0
 8005514:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	0010      	movs	r0, r2
 8005526:	4798      	blx	r3
    }
   }
}  
 8005528:	e7ff      	b.n	800552a <HAL_DMA_IRQHandler+0x13c>
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	46bd      	mov	sp, r7
 800552e:	b004      	add	sp, #16
 8005530:	bd80      	pop	{r7, pc}

08005532 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	60f8      	str	r0, [r7, #12]
 800553a:	60b9      	str	r1, [r7, #8]
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005548:	2101      	movs	r1, #1
 800554a:	4091      	lsls	r1, r2
 800554c:	000a      	movs	r2, r1
 800554e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	2b10      	cmp	r3, #16
 800555e:	d108      	bne.n	8005572 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005570:	e007      	b.n	8005582 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	60da      	str	r2, [r3, #12]
}
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	46bd      	mov	sp, r7
 8005586:	b004      	add	sp, #16
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a08      	ldr	r2, [pc, #32]	; (80055bc <DMA_CalcBaseAndBitshift+0x30>)
 800559a:	4694      	mov	ip, r2
 800559c:	4463      	add	r3, ip
 800559e:	2114      	movs	r1, #20
 80055a0:	0018      	movs	r0, r3
 80055a2:	f7fa fdcd 	bl	8000140 <__udivsi3>
 80055a6:	0003      	movs	r3, r0
 80055a8:	009a      	lsls	r2, r3, #2
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a03      	ldr	r2, [pc, #12]	; (80055c0 <DMA_CalcBaseAndBitshift+0x34>)
 80055b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80055b4:	46c0      	nop			; (mov r8, r8)
 80055b6:	46bd      	mov	sp, r7
 80055b8:	b002      	add	sp, #8
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	bffdfff8 	.word	0xbffdfff8
 80055c0:	40020000 	.word	0x40020000

080055c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055d2:	e14f      	b.n	8005874 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2101      	movs	r1, #1
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4091      	lsls	r1, r2
 80055de:	000a      	movs	r2, r1
 80055e0:	4013      	ands	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d100      	bne.n	80055ec <HAL_GPIO_Init+0x28>
 80055ea:	e140      	b.n	800586e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2203      	movs	r2, #3
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d005      	beq.n	8005604 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2203      	movs	r2, #3
 80055fe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005600:	2b02      	cmp	r3, #2
 8005602:	d130      	bne.n	8005666 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	2203      	movs	r2, #3
 8005610:	409a      	lsls	r2, r3
 8005612:	0013      	movs	r3, r2
 8005614:	43da      	mvns	r2, r3
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	4013      	ands	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	409a      	lsls	r2, r3
 8005626:	0013      	movs	r3, r2
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800563a:	2201      	movs	r2, #1
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	409a      	lsls	r2, r3
 8005640:	0013      	movs	r3, r2
 8005642:	43da      	mvns	r2, r3
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	4013      	ands	r3, r2
 8005648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	091b      	lsrs	r3, r3, #4
 8005650:	2201      	movs	r2, #1
 8005652:	401a      	ands	r2, r3
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	409a      	lsls	r2, r3
 8005658:	0013      	movs	r3, r2
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2203      	movs	r2, #3
 800566c:	4013      	ands	r3, r2
 800566e:	2b03      	cmp	r3, #3
 8005670:	d017      	beq.n	80056a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	2203      	movs	r2, #3
 800567e:	409a      	lsls	r2, r3
 8005680:	0013      	movs	r3, r2
 8005682:	43da      	mvns	r2, r3
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4013      	ands	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	409a      	lsls	r2, r3
 8005694:	0013      	movs	r3, r2
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2203      	movs	r2, #3
 80056a8:	4013      	ands	r3, r2
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d123      	bne.n	80056f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	08da      	lsrs	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3208      	adds	r2, #8
 80056b6:	0092      	lsls	r2, r2, #2
 80056b8:	58d3      	ldr	r3, [r2, r3]
 80056ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2207      	movs	r2, #7
 80056c0:	4013      	ands	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	220f      	movs	r2, #15
 80056c6:	409a      	lsls	r2, r3
 80056c8:	0013      	movs	r3, r2
 80056ca:	43da      	mvns	r2, r3
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	4013      	ands	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2107      	movs	r1, #7
 80056da:	400b      	ands	r3, r1
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	409a      	lsls	r2, r3
 80056e0:	0013      	movs	r3, r2
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	08da      	lsrs	r2, r3, #3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3208      	adds	r2, #8
 80056f0:	0092      	lsls	r2, r2, #2
 80056f2:	6939      	ldr	r1, [r7, #16]
 80056f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	2203      	movs	r2, #3
 8005702:	409a      	lsls	r2, r3
 8005704:	0013      	movs	r3, r2
 8005706:	43da      	mvns	r2, r3
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4013      	ands	r3, r2
 800570c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2203      	movs	r2, #3
 8005714:	401a      	ands	r2, r3
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	409a      	lsls	r2, r3
 800571c:	0013      	movs	r3, r2
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	23c0      	movs	r3, #192	; 0xc0
 8005730:	029b      	lsls	r3, r3, #10
 8005732:	4013      	ands	r3, r2
 8005734:	d100      	bne.n	8005738 <HAL_GPIO_Init+0x174>
 8005736:	e09a      	b.n	800586e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005738:	4b54      	ldr	r3, [pc, #336]	; (800588c <HAL_GPIO_Init+0x2c8>)
 800573a:	699a      	ldr	r2, [r3, #24]
 800573c:	4b53      	ldr	r3, [pc, #332]	; (800588c <HAL_GPIO_Init+0x2c8>)
 800573e:	2101      	movs	r1, #1
 8005740:	430a      	orrs	r2, r1
 8005742:	619a      	str	r2, [r3, #24]
 8005744:	4b51      	ldr	r3, [pc, #324]	; (800588c <HAL_GPIO_Init+0x2c8>)
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	2201      	movs	r2, #1
 800574a:	4013      	ands	r3, r2
 800574c:	60bb      	str	r3, [r7, #8]
 800574e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005750:	4a4f      	ldr	r2, [pc, #316]	; (8005890 <HAL_GPIO_Init+0x2cc>)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	089b      	lsrs	r3, r3, #2
 8005756:	3302      	adds	r3, #2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	589b      	ldr	r3, [r3, r2]
 800575c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2203      	movs	r2, #3
 8005762:	4013      	ands	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	220f      	movs	r2, #15
 8005768:	409a      	lsls	r2, r3
 800576a:	0013      	movs	r3, r2
 800576c:	43da      	mvns	r2, r3
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4013      	ands	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	2390      	movs	r3, #144	; 0x90
 8005778:	05db      	lsls	r3, r3, #23
 800577a:	429a      	cmp	r2, r3
 800577c:	d013      	beq.n	80057a6 <HAL_GPIO_Init+0x1e2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a44      	ldr	r2, [pc, #272]	; (8005894 <HAL_GPIO_Init+0x2d0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00d      	beq.n	80057a2 <HAL_GPIO_Init+0x1de>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a43      	ldr	r2, [pc, #268]	; (8005898 <HAL_GPIO_Init+0x2d4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d007      	beq.n	800579e <HAL_GPIO_Init+0x1da>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a42      	ldr	r2, [pc, #264]	; (800589c <HAL_GPIO_Init+0x2d8>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d101      	bne.n	800579a <HAL_GPIO_Init+0x1d6>
 8005796:	2303      	movs	r3, #3
 8005798:	e006      	b.n	80057a8 <HAL_GPIO_Init+0x1e4>
 800579a:	2305      	movs	r3, #5
 800579c:	e004      	b.n	80057a8 <HAL_GPIO_Init+0x1e4>
 800579e:	2302      	movs	r3, #2
 80057a0:	e002      	b.n	80057a8 <HAL_GPIO_Init+0x1e4>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <HAL_GPIO_Init+0x1e4>
 80057a6:	2300      	movs	r3, #0
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	2103      	movs	r1, #3
 80057ac:	400a      	ands	r2, r1
 80057ae:	0092      	lsls	r2, r2, #2
 80057b0:	4093      	lsls	r3, r2
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80057b8:	4935      	ldr	r1, [pc, #212]	; (8005890 <HAL_GPIO_Init+0x2cc>)
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	089b      	lsrs	r3, r3, #2
 80057be:	3302      	adds	r3, #2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057c6:	4b36      	ldr	r3, [pc, #216]	; (80058a0 <HAL_GPIO_Init+0x2dc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	43da      	mvns	r2, r3
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4013      	ands	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	2380      	movs	r3, #128	; 0x80
 80057dc:	025b      	lsls	r3, r3, #9
 80057de:	4013      	ands	r3, r2
 80057e0:	d003      	beq.n	80057ea <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80057ea:	4b2d      	ldr	r3, [pc, #180]	; (80058a0 <HAL_GPIO_Init+0x2dc>)
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80057f0:	4b2b      	ldr	r3, [pc, #172]	; (80058a0 <HAL_GPIO_Init+0x2dc>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	43da      	mvns	r2, r3
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	4013      	ands	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	2380      	movs	r3, #128	; 0x80
 8005806:	029b      	lsls	r3, r3, #10
 8005808:	4013      	ands	r3, r2
 800580a:	d003      	beq.n	8005814 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005814:	4b22      	ldr	r3, [pc, #136]	; (80058a0 <HAL_GPIO_Init+0x2dc>)
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800581a:	4b21      	ldr	r3, [pc, #132]	; (80058a0 <HAL_GPIO_Init+0x2dc>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	43da      	mvns	r2, r3
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	4013      	ands	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	035b      	lsls	r3, r3, #13
 8005832:	4013      	ands	r3, r2
 8005834:	d003      	beq.n	800583e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800583e:	4b18      	ldr	r3, [pc, #96]	; (80058a0 <HAL_GPIO_Init+0x2dc>)
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005844:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <HAL_GPIO_Init+0x2dc>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	43da      	mvns	r2, r3
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	4013      	ands	r3, r2
 8005852:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	2380      	movs	r3, #128	; 0x80
 800585a:	039b      	lsls	r3, r3, #14
 800585c:	4013      	ands	r3, r2
 800585e:	d003      	beq.n	8005868 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005868:	4b0d      	ldr	r3, [pc, #52]	; (80058a0 <HAL_GPIO_Init+0x2dc>)
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	3301      	adds	r3, #1
 8005872:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	40da      	lsrs	r2, r3
 800587c:	1e13      	subs	r3, r2, #0
 800587e:	d000      	beq.n	8005882 <HAL_GPIO_Init+0x2be>
 8005880:	e6a8      	b.n	80055d4 <HAL_GPIO_Init+0x10>
  } 
}
 8005882:	46c0      	nop			; (mov r8, r8)
 8005884:	46c0      	nop			; (mov r8, r8)
 8005886:	46bd      	mov	sp, r7
 8005888:	b006      	add	sp, #24
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40021000 	.word	0x40021000
 8005890:	40010000 	.word	0x40010000
 8005894:	48000400 	.word	0x48000400
 8005898:	48000800 	.word	0x48000800
 800589c:	48000c00 	.word	0x48000c00
 80058a0:	40010400 	.word	0x40010400

080058a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	000a      	movs	r2, r1
 80058ae:	1cbb      	adds	r3, r7, #2
 80058b0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	1cba      	adds	r2, r7, #2
 80058b8:	8812      	ldrh	r2, [r2, #0]
 80058ba:	4013      	ands	r3, r2
 80058bc:	d004      	beq.n	80058c8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80058be:	230f      	movs	r3, #15
 80058c0:	18fb      	adds	r3, r7, r3
 80058c2:	2201      	movs	r2, #1
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	e003      	b.n	80058d0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058c8:	230f      	movs	r3, #15
 80058ca:	18fb      	adds	r3, r7, r3
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80058d0:	230f      	movs	r3, #15
 80058d2:	18fb      	adds	r3, r7, r3
 80058d4:	781b      	ldrb	r3, [r3, #0]
  }
 80058d6:	0018      	movs	r0, r3
 80058d8:	46bd      	mov	sp, r7
 80058da:	b004      	add	sp, #16
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	0008      	movs	r0, r1
 80058e8:	0011      	movs	r1, r2
 80058ea:	1cbb      	adds	r3, r7, #2
 80058ec:	1c02      	adds	r2, r0, #0
 80058ee:	801a      	strh	r2, [r3, #0]
 80058f0:	1c7b      	adds	r3, r7, #1
 80058f2:	1c0a      	adds	r2, r1, #0
 80058f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058f6:	1c7b      	adds	r3, r7, #1
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d004      	beq.n	8005908 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80058fe:	1cbb      	adds	r3, r7, #2
 8005900:	881a      	ldrh	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005906:	e003      	b.n	8005910 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005908:	1cbb      	adds	r3, r7, #2
 800590a:	881a      	ldrh	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005910:	46c0      	nop			; (mov r8, r8)
 8005912:	46bd      	mov	sp, r7
 8005914:	b002      	add	sp, #8
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	000a      	movs	r2, r1
 8005922:	1cbb      	adds	r3, r7, #2
 8005924:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800592c:	1cbb      	adds	r3, r7, #2
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4013      	ands	r3, r2
 8005934:	041a      	lsls	r2, r3, #16
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	43db      	mvns	r3, r3
 800593a:	1cb9      	adds	r1, r7, #2
 800593c:	8809      	ldrh	r1, [r1, #0]
 800593e:	400b      	ands	r3, r1
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	619a      	str	r2, [r3, #24]
}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	46bd      	mov	sp, r7
 800594a:	b004      	add	sp, #16
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e082      	b.n	8005a68 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2241      	movs	r2, #65	; 0x41
 8005966:	5c9b      	ldrb	r3, [r3, r2]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d107      	bne.n	800597e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2240      	movs	r2, #64	; 0x40
 8005972:	2100      	movs	r1, #0
 8005974:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	0018      	movs	r0, r3
 800597a:	f7fe fd19 	bl	80043b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2241      	movs	r2, #65	; 0x41
 8005982:	2124      	movs	r1, #36	; 0x24
 8005984:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2101      	movs	r1, #1
 8005992:	438a      	bics	r2, r1
 8005994:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4934      	ldr	r1, [pc, #208]	; (8005a70 <HAL_I2C_Init+0x120>)
 80059a0:	400a      	ands	r2, r1
 80059a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4931      	ldr	r1, [pc, #196]	; (8005a74 <HAL_I2C_Init+0x124>)
 80059b0:	400a      	ands	r2, r1
 80059b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d108      	bne.n	80059ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2180      	movs	r1, #128	; 0x80
 80059c6:	0209      	lsls	r1, r1, #8
 80059c8:	430a      	orrs	r2, r1
 80059ca:	609a      	str	r2, [r3, #8]
 80059cc:	e007      	b.n	80059de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2184      	movs	r1, #132	; 0x84
 80059d8:	0209      	lsls	r1, r1, #8
 80059da:	430a      	orrs	r2, r1
 80059dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d104      	bne.n	80059f0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2280      	movs	r2, #128	; 0x80
 80059ec:	0112      	lsls	r2, r2, #4
 80059ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	491f      	ldr	r1, [pc, #124]	; (8005a78 <HAL_I2C_Init+0x128>)
 80059fc:	430a      	orrs	r2, r1
 80059fe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	491a      	ldr	r1, [pc, #104]	; (8005a74 <HAL_I2C_Init+0x124>)
 8005a0c:	400a      	ands	r2, r1
 8005a0e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69d9      	ldr	r1, [r3, #28]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1a      	ldr	r2, [r3, #32]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2101      	movs	r1, #1
 8005a46:	430a      	orrs	r2, r1
 8005a48:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2241      	movs	r2, #65	; 0x41
 8005a54:	2120      	movs	r1, #32
 8005a56:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2242      	movs	r2, #66	; 0x42
 8005a62:	2100      	movs	r1, #0
 8005a64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	0018      	movs	r0, r3
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	b002      	add	sp, #8
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	f0ffffff 	.word	0xf0ffffff
 8005a74:	ffff7fff 	.word	0xffff7fff
 8005a78:	02008000 	.word	0x02008000

08005a7c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a7c:	b590      	push	{r4, r7, lr}
 8005a7e:	b089      	sub	sp, #36	; 0x24
 8005a80:	af02      	add	r7, sp, #8
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	0008      	movs	r0, r1
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	0019      	movs	r1, r3
 8005a8a:	230a      	movs	r3, #10
 8005a8c:	18fb      	adds	r3, r7, r3
 8005a8e:	1c02      	adds	r2, r0, #0
 8005a90:	801a      	strh	r2, [r3, #0]
 8005a92:	2308      	movs	r3, #8
 8005a94:	18fb      	adds	r3, r7, r3
 8005a96:	1c0a      	adds	r2, r1, #0
 8005a98:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2241      	movs	r2, #65	; 0x41
 8005a9e:	5c9b      	ldrb	r3, [r3, r2]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b20      	cmp	r3, #32
 8005aa4:	d000      	beq.n	8005aa8 <HAL_I2C_Master_Transmit+0x2c>
 8005aa6:	e0e7      	b.n	8005c78 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2240      	movs	r2, #64	; 0x40
 8005aac:	5c9b      	ldrb	r3, [r3, r2]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_I2C_Master_Transmit+0x3a>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e0e1      	b.n	8005c7a <HAL_I2C_Master_Transmit+0x1fe>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2240      	movs	r2, #64	; 0x40
 8005aba:	2101      	movs	r1, #1
 8005abc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005abe:	f7fe fe93 	bl	80047e8 <HAL_GetTick>
 8005ac2:	0003      	movs	r3, r0
 8005ac4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ac6:	2380      	movs	r3, #128	; 0x80
 8005ac8:	0219      	lsls	r1, r3, #8
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	2319      	movs	r3, #25
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f000 fa04 	bl	8005ee0 <I2C_WaitOnFlagUntilTimeout>
 8005ad8:	1e03      	subs	r3, r0, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e0cc      	b.n	8005c7a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2241      	movs	r2, #65	; 0x41
 8005ae4:	2121      	movs	r1, #33	; 0x21
 8005ae6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2242      	movs	r2, #66	; 0x42
 8005aec:	2110      	movs	r1, #16
 8005aee:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2208      	movs	r2, #8
 8005b00:	18ba      	adds	r2, r7, r2
 8005b02:	8812      	ldrh	r2, [r2, #0]
 8005b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2bff      	cmp	r3, #255	; 0xff
 8005b14:	d911      	bls.n	8005b3a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	22ff      	movs	r2, #255	; 0xff
 8005b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	2380      	movs	r3, #128	; 0x80
 8005b24:	045c      	lsls	r4, r3, #17
 8005b26:	230a      	movs	r3, #10
 8005b28:	18fb      	adds	r3, r7, r3
 8005b2a:	8819      	ldrh	r1, [r3, #0]
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	4b55      	ldr	r3, [pc, #340]	; (8005c84 <HAL_I2C_Master_Transmit+0x208>)
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	0023      	movs	r3, r4
 8005b34:	f000 fb74 	bl	8006220 <I2C_TransferConfig>
 8005b38:	e075      	b.n	8005c26 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	2380      	movs	r3, #128	; 0x80
 8005b4c:	049c      	lsls	r4, r3, #18
 8005b4e:	230a      	movs	r3, #10
 8005b50:	18fb      	adds	r3, r7, r3
 8005b52:	8819      	ldrh	r1, [r3, #0]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	4b4b      	ldr	r3, [pc, #300]	; (8005c84 <HAL_I2C_Master_Transmit+0x208>)
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	0023      	movs	r3, r4
 8005b5c:	f000 fb60 	bl	8006220 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b60:	e061      	b.n	8005c26 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f000 f9f8 	bl	8005f5e <I2C_WaitOnTXISFlagUntilTimeout>
 8005b6e:	1e03      	subs	r3, r0, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e081      	b.n	8005c7a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	781a      	ldrb	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d03a      	beq.n	8005c26 <HAL_I2C_Master_Transmit+0x1aa>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d136      	bne.n	8005c26 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	0013      	movs	r3, r2
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2180      	movs	r1, #128	; 0x80
 8005bc6:	f000 f98b 	bl	8005ee0 <I2C_WaitOnFlagUntilTimeout>
 8005bca:	1e03      	subs	r3, r0, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e053      	b.n	8005c7a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	2bff      	cmp	r3, #255	; 0xff
 8005bda:	d911      	bls.n	8005c00 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	22ff      	movs	r2, #255	; 0xff
 8005be0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	045c      	lsls	r4, r3, #17
 8005bec:	230a      	movs	r3, #10
 8005bee:	18fb      	adds	r3, r7, r3
 8005bf0:	8819      	ldrh	r1, [r3, #0]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	0023      	movs	r3, r4
 8005bfa:	f000 fb11 	bl	8006220 <I2C_TransferConfig>
 8005bfe:	e012      	b.n	8005c26 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	2380      	movs	r3, #128	; 0x80
 8005c12:	049c      	lsls	r4, r3, #18
 8005c14:	230a      	movs	r3, #10
 8005c16:	18fb      	adds	r3, r7, r3
 8005c18:	8819      	ldrh	r1, [r3, #0]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	0023      	movs	r3, r4
 8005c22:	f000 fafd 	bl	8006220 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d198      	bne.n	8005b62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	0018      	movs	r0, r3
 8005c38:	f000 f9d0 	bl	8005fdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c3c:	1e03      	subs	r3, r0, #0
 8005c3e:	d001      	beq.n	8005c44 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e01a      	b.n	8005c7a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	490c      	ldr	r1, [pc, #48]	; (8005c88 <HAL_I2C_Master_Transmit+0x20c>)
 8005c58:	400a      	ands	r2, r1
 8005c5a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2241      	movs	r2, #65	; 0x41
 8005c60:	2120      	movs	r1, #32
 8005c62:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2242      	movs	r2, #66	; 0x42
 8005c68:	2100      	movs	r1, #0
 8005c6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2240      	movs	r2, #64	; 0x40
 8005c70:	2100      	movs	r1, #0
 8005c72:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	e000      	b.n	8005c7a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005c78:	2302      	movs	r3, #2
  }
}
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b007      	add	sp, #28
 8005c80:	bd90      	pop	{r4, r7, pc}
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	80002000 	.word	0x80002000
 8005c88:	fe00e800 	.word	0xfe00e800

08005c8c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005c8c:	b590      	push	{r4, r7, lr}
 8005c8e:	b089      	sub	sp, #36	; 0x24
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	0008      	movs	r0, r1
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	0019      	movs	r1, r3
 8005c9a:	230a      	movs	r3, #10
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	1c02      	adds	r2, r0, #0
 8005ca0:	801a      	strh	r2, [r3, #0]
 8005ca2:	2308      	movs	r3, #8
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	1c0a      	adds	r2, r1, #0
 8005ca8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2241      	movs	r2, #65	; 0x41
 8005cae:	5c9b      	ldrb	r3, [r3, r2]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	d000      	beq.n	8005cb8 <HAL_I2C_Master_Receive+0x2c>
 8005cb6:	e0e8      	b.n	8005e8a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2240      	movs	r2, #64	; 0x40
 8005cbc:	5c9b      	ldrb	r3, [r3, r2]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_I2C_Master_Receive+0x3a>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e0e2      	b.n	8005e8c <HAL_I2C_Master_Receive+0x200>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2240      	movs	r2, #64	; 0x40
 8005cca:	2101      	movs	r1, #1
 8005ccc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cce:	f7fe fd8b 	bl	80047e8 <HAL_GetTick>
 8005cd2:	0003      	movs	r3, r0
 8005cd4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cd6:	2380      	movs	r3, #128	; 0x80
 8005cd8:	0219      	lsls	r1, r3, #8
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	2319      	movs	r3, #25
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f000 f8fc 	bl	8005ee0 <I2C_WaitOnFlagUntilTimeout>
 8005ce8:	1e03      	subs	r3, r0, #0
 8005cea:	d001      	beq.n	8005cf0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0cd      	b.n	8005e8c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2241      	movs	r2, #65	; 0x41
 8005cf4:	2122      	movs	r1, #34	; 0x22
 8005cf6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2242      	movs	r2, #66	; 0x42
 8005cfc:	2110      	movs	r1, #16
 8005cfe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2208      	movs	r2, #8
 8005d10:	18ba      	adds	r2, r7, r2
 8005d12:	8812      	ldrh	r2, [r2, #0]
 8005d14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2bff      	cmp	r3, #255	; 0xff
 8005d24:	d911      	bls.n	8005d4a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	22ff      	movs	r2, #255	; 0xff
 8005d2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	2380      	movs	r3, #128	; 0x80
 8005d34:	045c      	lsls	r4, r3, #17
 8005d36:	230a      	movs	r3, #10
 8005d38:	18fb      	adds	r3, r7, r3
 8005d3a:	8819      	ldrh	r1, [r3, #0]
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	4b55      	ldr	r3, [pc, #340]	; (8005e94 <HAL_I2C_Master_Receive+0x208>)
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	0023      	movs	r3, r4
 8005d44:	f000 fa6c 	bl	8006220 <I2C_TransferConfig>
 8005d48:	e076      	b.n	8005e38 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	049c      	lsls	r4, r3, #18
 8005d5e:	230a      	movs	r3, #10
 8005d60:	18fb      	adds	r3, r7, r3
 8005d62:	8819      	ldrh	r1, [r3, #0]
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	4b4b      	ldr	r3, [pc, #300]	; (8005e94 <HAL_I2C_Master_Receive+0x208>)
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	0023      	movs	r3, r4
 8005d6c:	f000 fa58 	bl	8006220 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005d70:	e062      	b.n	8005e38 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f000 f96b 	bl	8006054 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d7e:	1e03      	subs	r3, r0, #0
 8005d80:	d001      	beq.n	8005d86 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e082      	b.n	8005e8c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	b2d2      	uxtb	r2, r2
 8005d92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d03a      	beq.n	8005e38 <HAL_I2C_Master_Receive+0x1ac>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d136      	bne.n	8005e38 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	0013      	movs	r3, r2
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2180      	movs	r1, #128	; 0x80
 8005dd8:	f000 f882 	bl	8005ee0 <I2C_WaitOnFlagUntilTimeout>
 8005ddc:	1e03      	subs	r3, r0, #0
 8005dde:	d001      	beq.n	8005de4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e053      	b.n	8005e8c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2bff      	cmp	r3, #255	; 0xff
 8005dec:	d911      	bls.n	8005e12 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	22ff      	movs	r2, #255	; 0xff
 8005df2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	2380      	movs	r3, #128	; 0x80
 8005dfc:	045c      	lsls	r4, r3, #17
 8005dfe:	230a      	movs	r3, #10
 8005e00:	18fb      	adds	r3, r7, r3
 8005e02:	8819      	ldrh	r1, [r3, #0]
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	2300      	movs	r3, #0
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	0023      	movs	r3, r4
 8005e0c:	f000 fa08 	bl	8006220 <I2C_TransferConfig>
 8005e10:	e012      	b.n	8005e38 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	2380      	movs	r3, #128	; 0x80
 8005e24:	049c      	lsls	r4, r3, #18
 8005e26:	230a      	movs	r3, #10
 8005e28:	18fb      	adds	r3, r7, r3
 8005e2a:	8819      	ldrh	r1, [r3, #0]
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	0023      	movs	r3, r4
 8005e34:	f000 f9f4 	bl	8006220 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d197      	bne.n	8005d72 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f000 f8c7 	bl	8005fdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e4e:	1e03      	subs	r3, r0, #0
 8005e50:	d001      	beq.n	8005e56 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e01a      	b.n	8005e8c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	490b      	ldr	r1, [pc, #44]	; (8005e98 <HAL_I2C_Master_Receive+0x20c>)
 8005e6a:	400a      	ands	r2, r1
 8005e6c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2241      	movs	r2, #65	; 0x41
 8005e72:	2120      	movs	r1, #32
 8005e74:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2242      	movs	r2, #66	; 0x42
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2240      	movs	r2, #64	; 0x40
 8005e82:	2100      	movs	r1, #0
 8005e84:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	e000      	b.n	8005e8c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005e8a:	2302      	movs	r3, #2
  }
}
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	b007      	add	sp, #28
 8005e92:	bd90      	pop	{r4, r7, pc}
 8005e94:	80002400 	.word	0x80002400
 8005e98:	fe00e800 	.word	0xfe00e800

08005e9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	4013      	ands	r3, r2
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d103      	bne.n	8005eba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d007      	beq.n	8005ed8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699a      	ldr	r2, [r3, #24]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	619a      	str	r2, [r3, #24]
  }
}
 8005ed8:	46c0      	nop			; (mov r8, r8)
 8005eda:	46bd      	mov	sp, r7
 8005edc:	b002      	add	sp, #8
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	1dfb      	adds	r3, r7, #7
 8005eee:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ef0:	e021      	b.n	8005f36 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	d01e      	beq.n	8005f36 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef8:	f7fe fc76 	bl	80047e8 <HAL_GetTick>
 8005efc:	0002      	movs	r2, r0
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d302      	bcc.n	8005f0e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d113      	bne.n	8005f36 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f12:	2220      	movs	r2, #32
 8005f14:	431a      	orrs	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2241      	movs	r2, #65	; 0x41
 8005f1e:	2120      	movs	r1, #32
 8005f20:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2242      	movs	r2, #66	; 0x42
 8005f26:	2100      	movs	r1, #0
 8005f28:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2240      	movs	r2, #64	; 0x40
 8005f2e:	2100      	movs	r1, #0
 8005f30:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e00f      	b.n	8005f56 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	425a      	negs	r2, r3
 8005f46:	4153      	adcs	r3, r2
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	001a      	movs	r2, r3
 8005f4c:	1dfb      	adds	r3, r7, #7
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d0ce      	beq.n	8005ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	0018      	movs	r0, r3
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	b004      	add	sp, #16
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	60b9      	str	r1, [r7, #8]
 8005f68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f6a:	e02b      	b.n	8005fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	68b9      	ldr	r1, [r7, #8]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	0018      	movs	r0, r3
 8005f74:	f000 f8da 	bl	800612c <I2C_IsAcknowledgeFailed>
 8005f78:	1e03      	subs	r3, r0, #0
 8005f7a:	d001      	beq.n	8005f80 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e029      	b.n	8005fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	3301      	adds	r3, #1
 8005f84:	d01e      	beq.n	8005fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f86:	f7fe fc2f 	bl	80047e8 <HAL_GetTick>
 8005f8a:	0002      	movs	r2, r0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d302      	bcc.n	8005f9c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d113      	bne.n	8005fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2241      	movs	r2, #65	; 0x41
 8005fac:	2120      	movs	r1, #32
 8005fae:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2242      	movs	r2, #66	; 0x42
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2240      	movs	r2, #64	; 0x40
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e007      	b.n	8005fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	4013      	ands	r3, r2
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d1cc      	bne.n	8005f6c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	b004      	add	sp, #16
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fe8:	e028      	b.n	800603c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	68b9      	ldr	r1, [r7, #8]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f000 f89b 	bl	800612c <I2C_IsAcknowledgeFailed>
 8005ff6:	1e03      	subs	r3, r0, #0
 8005ff8:	d001      	beq.n	8005ffe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e026      	b.n	800604c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffe:	f7fe fbf3 	bl	80047e8 <HAL_GetTick>
 8006002:	0002      	movs	r2, r0
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	429a      	cmp	r2, r3
 800600c:	d302      	bcc.n	8006014 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d113      	bne.n	800603c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006018:	2220      	movs	r2, #32
 800601a:	431a      	orrs	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2241      	movs	r2, #65	; 0x41
 8006024:	2120      	movs	r1, #32
 8006026:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2242      	movs	r2, #66	; 0x42
 800602c:	2100      	movs	r1, #0
 800602e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2240      	movs	r2, #64	; 0x40
 8006034:	2100      	movs	r1, #0
 8006036:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e007      	b.n	800604c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	2220      	movs	r2, #32
 8006044:	4013      	ands	r3, r2
 8006046:	2b20      	cmp	r3, #32
 8006048:	d1cf      	bne.n	8005fea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	0018      	movs	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	b004      	add	sp, #16
 8006052:	bd80      	pop	{r7, pc}

08006054 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006060:	e055      	b.n	800610e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	0018      	movs	r0, r3
 800606a:	f000 f85f 	bl	800612c <I2C_IsAcknowledgeFailed>
 800606e:	1e03      	subs	r3, r0, #0
 8006070:	d001      	beq.n	8006076 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e053      	b.n	800611e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	2220      	movs	r2, #32
 800607e:	4013      	ands	r3, r2
 8006080:	2b20      	cmp	r3, #32
 8006082:	d129      	bne.n	80060d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	2204      	movs	r2, #4
 800608c:	4013      	ands	r3, r2
 800608e:	2b04      	cmp	r3, #4
 8006090:	d105      	bne.n	800609e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	e03f      	b.n	800611e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2220      	movs	r2, #32
 80060a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	491d      	ldr	r1, [pc, #116]	; (8006128 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80060b2:	400a      	ands	r2, r1
 80060b4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2241      	movs	r2, #65	; 0x41
 80060c0:	2120      	movs	r1, #32
 80060c2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2242      	movs	r2, #66	; 0x42
 80060c8:	2100      	movs	r1, #0
 80060ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2240      	movs	r2, #64	; 0x40
 80060d0:	2100      	movs	r1, #0
 80060d2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e022      	b.n	800611e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d8:	f7fe fb86 	bl	80047e8 <HAL_GetTick>
 80060dc:	0002      	movs	r2, r0
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d302      	bcc.n	80060ee <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10f      	bne.n	800610e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f2:	2220      	movs	r2, #32
 80060f4:	431a      	orrs	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2241      	movs	r2, #65	; 0x41
 80060fe:	2120      	movs	r1, #32
 8006100:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2240      	movs	r2, #64	; 0x40
 8006106:	2100      	movs	r1, #0
 8006108:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e007      	b.n	800611e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	2204      	movs	r2, #4
 8006116:	4013      	ands	r3, r2
 8006118:	2b04      	cmp	r3, #4
 800611a:	d1a2      	bne.n	8006062 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	0018      	movs	r0, r3
 8006120:	46bd      	mov	sp, r7
 8006122:	b004      	add	sp, #16
 8006124:	bd80      	pop	{r7, pc}
 8006126:	46c0      	nop			; (mov r8, r8)
 8006128:	fe00e800 	.word	0xfe00e800

0800612c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	2210      	movs	r2, #16
 8006140:	4013      	ands	r3, r2
 8006142:	2b10      	cmp	r3, #16
 8006144:	d164      	bne.n	8006210 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	2380      	movs	r3, #128	; 0x80
 800614e:	049b      	lsls	r3, r3, #18
 8006150:	401a      	ands	r2, r3
 8006152:	2380      	movs	r3, #128	; 0x80
 8006154:	049b      	lsls	r3, r3, #18
 8006156:	429a      	cmp	r2, r3
 8006158:	d02b      	beq.n	80061b2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2180      	movs	r1, #128	; 0x80
 8006166:	01c9      	lsls	r1, r1, #7
 8006168:	430a      	orrs	r2, r1
 800616a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800616c:	e021      	b.n	80061b2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	3301      	adds	r3, #1
 8006172:	d01e      	beq.n	80061b2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006174:	f7fe fb38 	bl	80047e8 <HAL_GetTick>
 8006178:	0002      	movs	r2, r0
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	429a      	cmp	r2, r3
 8006182:	d302      	bcc.n	800618a <I2C_IsAcknowledgeFailed+0x5e>
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d113      	bne.n	80061b2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618e:	2220      	movs	r2, #32
 8006190:	431a      	orrs	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2241      	movs	r2, #65	; 0x41
 800619a:	2120      	movs	r1, #32
 800619c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2242      	movs	r2, #66	; 0x42
 80061a2:	2100      	movs	r1, #0
 80061a4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2240      	movs	r2, #64	; 0x40
 80061aa:	2100      	movs	r1, #0
 80061ac:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e02f      	b.n	8006212 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	2220      	movs	r2, #32
 80061ba:	4013      	ands	r3, r2
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d1d6      	bne.n	800616e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2210      	movs	r2, #16
 80061c6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2220      	movs	r2, #32
 80061ce:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	0018      	movs	r0, r3
 80061d4:	f7ff fe62 	bl	8005e9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	490e      	ldr	r1, [pc, #56]	; (800621c <I2C_IsAcknowledgeFailed+0xf0>)
 80061e4:	400a      	ands	r2, r1
 80061e6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ec:	2204      	movs	r2, #4
 80061ee:	431a      	orrs	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2241      	movs	r2, #65	; 0x41
 80061f8:	2120      	movs	r1, #32
 80061fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2242      	movs	r2, #66	; 0x42
 8006200:	2100      	movs	r1, #0
 8006202:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2240      	movs	r2, #64	; 0x40
 8006208:	2100      	movs	r1, #0
 800620a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	0018      	movs	r0, r3
 8006214:	46bd      	mov	sp, r7
 8006216:	b004      	add	sp, #16
 8006218:	bd80      	pop	{r7, pc}
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	fe00e800 	.word	0xfe00e800

08006220 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006220:	b590      	push	{r4, r7, lr}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	0008      	movs	r0, r1
 800622a:	0011      	movs	r1, r2
 800622c:	607b      	str	r3, [r7, #4]
 800622e:	240a      	movs	r4, #10
 8006230:	193b      	adds	r3, r7, r4
 8006232:	1c02      	adds	r2, r0, #0
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	2009      	movs	r0, #9
 8006238:	183b      	adds	r3, r7, r0
 800623a:	1c0a      	adds	r2, r1, #0
 800623c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	6a3a      	ldr	r2, [r7, #32]
 8006246:	0d51      	lsrs	r1, r2, #21
 8006248:	2280      	movs	r2, #128	; 0x80
 800624a:	00d2      	lsls	r2, r2, #3
 800624c:	400a      	ands	r2, r1
 800624e:	490e      	ldr	r1, [pc, #56]	; (8006288 <I2C_TransferConfig+0x68>)
 8006250:	430a      	orrs	r2, r1
 8006252:	43d2      	mvns	r2, r2
 8006254:	401a      	ands	r2, r3
 8006256:	0011      	movs	r1, r2
 8006258:	193b      	adds	r3, r7, r4
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	059b      	lsls	r3, r3, #22
 800625e:	0d9a      	lsrs	r2, r3, #22
 8006260:	183b      	adds	r3, r7, r0
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	0418      	lsls	r0, r3, #16
 8006266:	23ff      	movs	r3, #255	; 0xff
 8006268:	041b      	lsls	r3, r3, #16
 800626a:	4003      	ands	r3, r0
 800626c:	431a      	orrs	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	431a      	orrs	r2, r3
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	431a      	orrs	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800627e:	46c0      	nop			; (mov r8, r8)
 8006280:	46bd      	mov	sp, r7
 8006282:	b005      	add	sp, #20
 8006284:	bd90      	pop	{r4, r7, pc}
 8006286:	46c0      	nop			; (mov r8, r8)
 8006288:	03ff63ff 	.word	0x03ff63ff

0800628c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2241      	movs	r2, #65	; 0x41
 800629a:	5c9b      	ldrb	r3, [r3, r2]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b20      	cmp	r3, #32
 80062a0:	d138      	bne.n	8006314 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2240      	movs	r2, #64	; 0x40
 80062a6:	5c9b      	ldrb	r3, [r3, r2]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e032      	b.n	8006316 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2240      	movs	r2, #64	; 0x40
 80062b4:	2101      	movs	r1, #1
 80062b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2241      	movs	r2, #65	; 0x41
 80062bc:	2124      	movs	r1, #36	; 0x24
 80062be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2101      	movs	r1, #1
 80062cc:	438a      	bics	r2, r1
 80062ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4911      	ldr	r1, [pc, #68]	; (8006320 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80062dc:	400a      	ands	r2, r1
 80062de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6819      	ldr	r1, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2101      	movs	r1, #1
 80062fc:	430a      	orrs	r2, r1
 80062fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2241      	movs	r2, #65	; 0x41
 8006304:	2120      	movs	r1, #32
 8006306:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2240      	movs	r2, #64	; 0x40
 800630c:	2100      	movs	r1, #0
 800630e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	e000      	b.n	8006316 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006314:	2302      	movs	r3, #2
  }
}
 8006316:	0018      	movs	r0, r3
 8006318:	46bd      	mov	sp, r7
 800631a:	b002      	add	sp, #8
 800631c:	bd80      	pop	{r7, pc}
 800631e:	46c0      	nop			; (mov r8, r8)
 8006320:	ffffefff 	.word	0xffffefff

08006324 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2241      	movs	r2, #65	; 0x41
 8006332:	5c9b      	ldrb	r3, [r3, r2]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b20      	cmp	r3, #32
 8006338:	d139      	bne.n	80063ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2240      	movs	r2, #64	; 0x40
 800633e:	5c9b      	ldrb	r3, [r3, r2]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d101      	bne.n	8006348 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006344:	2302      	movs	r3, #2
 8006346:	e033      	b.n	80063b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2240      	movs	r2, #64	; 0x40
 800634c:	2101      	movs	r1, #1
 800634e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2241      	movs	r2, #65	; 0x41
 8006354:	2124      	movs	r1, #36	; 0x24
 8006356:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2101      	movs	r1, #1
 8006364:	438a      	bics	r2, r1
 8006366:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4a11      	ldr	r2, [pc, #68]	; (80063b8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006374:	4013      	ands	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2101      	movs	r1, #1
 8006396:	430a      	orrs	r2, r1
 8006398:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2241      	movs	r2, #65	; 0x41
 800639e:	2120      	movs	r1, #32
 80063a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2240      	movs	r2, #64	; 0x40
 80063a6:	2100      	movs	r1, #0
 80063a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e000      	b.n	80063b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80063ae:	2302      	movs	r3, #2
  }
}
 80063b0:	0018      	movs	r0, r3
 80063b2:	46bd      	mov	sp, r7
 80063b4:	b004      	add	sp, #16
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	fffff0ff 	.word	0xfffff0ff

080063bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e301      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2201      	movs	r2, #1
 80063d4:	4013      	ands	r3, r2
 80063d6:	d100      	bne.n	80063da <HAL_RCC_OscConfig+0x1e>
 80063d8:	e08d      	b.n	80064f6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80063da:	4bc3      	ldr	r3, [pc, #780]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	220c      	movs	r2, #12
 80063e0:	4013      	ands	r3, r2
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d00e      	beq.n	8006404 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063e6:	4bc0      	ldr	r3, [pc, #768]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	220c      	movs	r2, #12
 80063ec:	4013      	ands	r3, r2
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d116      	bne.n	8006420 <HAL_RCC_OscConfig+0x64>
 80063f2:	4bbd      	ldr	r3, [pc, #756]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	2380      	movs	r3, #128	; 0x80
 80063f8:	025b      	lsls	r3, r3, #9
 80063fa:	401a      	ands	r2, r3
 80063fc:	2380      	movs	r3, #128	; 0x80
 80063fe:	025b      	lsls	r3, r3, #9
 8006400:	429a      	cmp	r2, r3
 8006402:	d10d      	bne.n	8006420 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006404:	4bb8      	ldr	r3, [pc, #736]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	2380      	movs	r3, #128	; 0x80
 800640a:	029b      	lsls	r3, r3, #10
 800640c:	4013      	ands	r3, r2
 800640e:	d100      	bne.n	8006412 <HAL_RCC_OscConfig+0x56>
 8006410:	e070      	b.n	80064f4 <HAL_RCC_OscConfig+0x138>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d000      	beq.n	800641c <HAL_RCC_OscConfig+0x60>
 800641a:	e06b      	b.n	80064f4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e2d8      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d107      	bne.n	8006438 <HAL_RCC_OscConfig+0x7c>
 8006428:	4baf      	ldr	r3, [pc, #700]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	4bae      	ldr	r3, [pc, #696]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 800642e:	2180      	movs	r1, #128	; 0x80
 8006430:	0249      	lsls	r1, r1, #9
 8006432:	430a      	orrs	r2, r1
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	e02f      	b.n	8006498 <HAL_RCC_OscConfig+0xdc>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10c      	bne.n	800645a <HAL_RCC_OscConfig+0x9e>
 8006440:	4ba9      	ldr	r3, [pc, #676]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	4ba8      	ldr	r3, [pc, #672]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006446:	49a9      	ldr	r1, [pc, #676]	; (80066ec <HAL_RCC_OscConfig+0x330>)
 8006448:	400a      	ands	r2, r1
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	4ba6      	ldr	r3, [pc, #664]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	4ba5      	ldr	r3, [pc, #660]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006452:	49a7      	ldr	r1, [pc, #668]	; (80066f0 <HAL_RCC_OscConfig+0x334>)
 8006454:	400a      	ands	r2, r1
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	e01e      	b.n	8006498 <HAL_RCC_OscConfig+0xdc>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2b05      	cmp	r3, #5
 8006460:	d10e      	bne.n	8006480 <HAL_RCC_OscConfig+0xc4>
 8006462:	4ba1      	ldr	r3, [pc, #644]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	4ba0      	ldr	r3, [pc, #640]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006468:	2180      	movs	r1, #128	; 0x80
 800646a:	02c9      	lsls	r1, r1, #11
 800646c:	430a      	orrs	r2, r1
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	4b9d      	ldr	r3, [pc, #628]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	4b9c      	ldr	r3, [pc, #624]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006476:	2180      	movs	r1, #128	; 0x80
 8006478:	0249      	lsls	r1, r1, #9
 800647a:	430a      	orrs	r2, r1
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	e00b      	b.n	8006498 <HAL_RCC_OscConfig+0xdc>
 8006480:	4b99      	ldr	r3, [pc, #612]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	4b98      	ldr	r3, [pc, #608]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006486:	4999      	ldr	r1, [pc, #612]	; (80066ec <HAL_RCC_OscConfig+0x330>)
 8006488:	400a      	ands	r2, r1
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	4b96      	ldr	r3, [pc, #600]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	4b95      	ldr	r3, [pc, #596]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006492:	4997      	ldr	r1, [pc, #604]	; (80066f0 <HAL_RCC_OscConfig+0x334>)
 8006494:	400a      	ands	r2, r1
 8006496:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d014      	beq.n	80064ca <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064a0:	f7fe f9a2 	bl	80047e8 <HAL_GetTick>
 80064a4:	0003      	movs	r3, r0
 80064a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064a8:	e008      	b.n	80064bc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064aa:	f7fe f99d 	bl	80047e8 <HAL_GetTick>
 80064ae:	0002      	movs	r2, r0
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b64      	cmp	r3, #100	; 0x64
 80064b6:	d901      	bls.n	80064bc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e28a      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064bc:	4b8a      	ldr	r3, [pc, #552]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	2380      	movs	r3, #128	; 0x80
 80064c2:	029b      	lsls	r3, r3, #10
 80064c4:	4013      	ands	r3, r2
 80064c6:	d0f0      	beq.n	80064aa <HAL_RCC_OscConfig+0xee>
 80064c8:	e015      	b.n	80064f6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ca:	f7fe f98d 	bl	80047e8 <HAL_GetTick>
 80064ce:	0003      	movs	r3, r0
 80064d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064d4:	f7fe f988 	bl	80047e8 <HAL_GetTick>
 80064d8:	0002      	movs	r2, r0
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b64      	cmp	r3, #100	; 0x64
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e275      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064e6:	4b80      	ldr	r3, [pc, #512]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	029b      	lsls	r3, r3, #10
 80064ee:	4013      	ands	r3, r2
 80064f0:	d1f0      	bne.n	80064d4 <HAL_RCC_OscConfig+0x118>
 80064f2:	e000      	b.n	80064f6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2202      	movs	r2, #2
 80064fc:	4013      	ands	r3, r2
 80064fe:	d100      	bne.n	8006502 <HAL_RCC_OscConfig+0x146>
 8006500:	e069      	b.n	80065d6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006502:	4b79      	ldr	r3, [pc, #484]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	220c      	movs	r2, #12
 8006508:	4013      	ands	r3, r2
 800650a:	d00b      	beq.n	8006524 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800650c:	4b76      	ldr	r3, [pc, #472]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	220c      	movs	r2, #12
 8006512:	4013      	ands	r3, r2
 8006514:	2b08      	cmp	r3, #8
 8006516:	d11c      	bne.n	8006552 <HAL_RCC_OscConfig+0x196>
 8006518:	4b73      	ldr	r3, [pc, #460]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	2380      	movs	r3, #128	; 0x80
 800651e:	025b      	lsls	r3, r3, #9
 8006520:	4013      	ands	r3, r2
 8006522:	d116      	bne.n	8006552 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006524:	4b70      	ldr	r3, [pc, #448]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2202      	movs	r2, #2
 800652a:	4013      	ands	r3, r2
 800652c:	d005      	beq.n	800653a <HAL_RCC_OscConfig+0x17e>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d001      	beq.n	800653a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e24b      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800653a:	4b6b      	ldr	r3, [pc, #428]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	22f8      	movs	r2, #248	; 0xf8
 8006540:	4393      	bics	r3, r2
 8006542:	0019      	movs	r1, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	00da      	lsls	r2, r3, #3
 800654a:	4b67      	ldr	r3, [pc, #412]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 800654c:	430a      	orrs	r2, r1
 800654e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006550:	e041      	b.n	80065d6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d024      	beq.n	80065a4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800655a:	4b63      	ldr	r3, [pc, #396]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	4b62      	ldr	r3, [pc, #392]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006560:	2101      	movs	r1, #1
 8006562:	430a      	orrs	r2, r1
 8006564:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006566:	f7fe f93f 	bl	80047e8 <HAL_GetTick>
 800656a:	0003      	movs	r3, r0
 800656c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006570:	f7fe f93a 	bl	80047e8 <HAL_GetTick>
 8006574:	0002      	movs	r2, r0
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e227      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006582:	4b59      	ldr	r3, [pc, #356]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2202      	movs	r2, #2
 8006588:	4013      	ands	r3, r2
 800658a:	d0f1      	beq.n	8006570 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800658c:	4b56      	ldr	r3, [pc, #344]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	22f8      	movs	r2, #248	; 0xf8
 8006592:	4393      	bics	r3, r2
 8006594:	0019      	movs	r1, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	00da      	lsls	r2, r3, #3
 800659c:	4b52      	ldr	r3, [pc, #328]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 800659e:	430a      	orrs	r2, r1
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	e018      	b.n	80065d6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065a4:	4b50      	ldr	r3, [pc, #320]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	4b4f      	ldr	r3, [pc, #316]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 80065aa:	2101      	movs	r1, #1
 80065ac:	438a      	bics	r2, r1
 80065ae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b0:	f7fe f91a 	bl	80047e8 <HAL_GetTick>
 80065b4:	0003      	movs	r3, r0
 80065b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065b8:	e008      	b.n	80065cc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065ba:	f7fe f915 	bl	80047e8 <HAL_GetTick>
 80065be:	0002      	movs	r2, r0
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d901      	bls.n	80065cc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e202      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065cc:	4b46      	ldr	r3, [pc, #280]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2202      	movs	r2, #2
 80065d2:	4013      	ands	r3, r2
 80065d4:	d1f1      	bne.n	80065ba <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2208      	movs	r2, #8
 80065dc:	4013      	ands	r3, r2
 80065de:	d036      	beq.n	800664e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d019      	beq.n	800661c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065e8:	4b3f      	ldr	r3, [pc, #252]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 80065ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065ec:	4b3e      	ldr	r3, [pc, #248]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 80065ee:	2101      	movs	r1, #1
 80065f0:	430a      	orrs	r2, r1
 80065f2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065f4:	f7fe f8f8 	bl	80047e8 <HAL_GetTick>
 80065f8:	0003      	movs	r3, r0
 80065fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065fc:	e008      	b.n	8006610 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065fe:	f7fe f8f3 	bl	80047e8 <HAL_GetTick>
 8006602:	0002      	movs	r2, r0
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2b02      	cmp	r3, #2
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e1e0      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006610:	4b35      	ldr	r3, [pc, #212]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	2202      	movs	r2, #2
 8006616:	4013      	ands	r3, r2
 8006618:	d0f1      	beq.n	80065fe <HAL_RCC_OscConfig+0x242>
 800661a:	e018      	b.n	800664e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800661c:	4b32      	ldr	r3, [pc, #200]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 800661e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006620:	4b31      	ldr	r3, [pc, #196]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006622:	2101      	movs	r1, #1
 8006624:	438a      	bics	r2, r1
 8006626:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006628:	f7fe f8de 	bl	80047e8 <HAL_GetTick>
 800662c:	0003      	movs	r3, r0
 800662e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006630:	e008      	b.n	8006644 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006632:	f7fe f8d9 	bl	80047e8 <HAL_GetTick>
 8006636:	0002      	movs	r2, r0
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e1c6      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006644:	4b28      	ldr	r3, [pc, #160]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	2202      	movs	r2, #2
 800664a:	4013      	ands	r3, r2
 800664c:	d1f1      	bne.n	8006632 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2204      	movs	r2, #4
 8006654:	4013      	ands	r3, r2
 8006656:	d100      	bne.n	800665a <HAL_RCC_OscConfig+0x29e>
 8006658:	e0b4      	b.n	80067c4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800665a:	201f      	movs	r0, #31
 800665c:	183b      	adds	r3, r7, r0
 800665e:	2200      	movs	r2, #0
 8006660:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006662:	4b21      	ldr	r3, [pc, #132]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006664:	69da      	ldr	r2, [r3, #28]
 8006666:	2380      	movs	r3, #128	; 0x80
 8006668:	055b      	lsls	r3, r3, #21
 800666a:	4013      	ands	r3, r2
 800666c:	d110      	bne.n	8006690 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800666e:	4b1e      	ldr	r3, [pc, #120]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006670:	69da      	ldr	r2, [r3, #28]
 8006672:	4b1d      	ldr	r3, [pc, #116]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 8006674:	2180      	movs	r1, #128	; 0x80
 8006676:	0549      	lsls	r1, r1, #21
 8006678:	430a      	orrs	r2, r1
 800667a:	61da      	str	r2, [r3, #28]
 800667c:	4b1a      	ldr	r3, [pc, #104]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 800667e:	69da      	ldr	r2, [r3, #28]
 8006680:	2380      	movs	r3, #128	; 0x80
 8006682:	055b      	lsls	r3, r3, #21
 8006684:	4013      	ands	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800668a:	183b      	adds	r3, r7, r0
 800668c:	2201      	movs	r2, #1
 800668e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006690:	4b18      	ldr	r3, [pc, #96]	; (80066f4 <HAL_RCC_OscConfig+0x338>)
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	2380      	movs	r3, #128	; 0x80
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	4013      	ands	r3, r2
 800669a:	d11a      	bne.n	80066d2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800669c:	4b15      	ldr	r3, [pc, #84]	; (80066f4 <HAL_RCC_OscConfig+0x338>)
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	4b14      	ldr	r3, [pc, #80]	; (80066f4 <HAL_RCC_OscConfig+0x338>)
 80066a2:	2180      	movs	r1, #128	; 0x80
 80066a4:	0049      	lsls	r1, r1, #1
 80066a6:	430a      	orrs	r2, r1
 80066a8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066aa:	f7fe f89d 	bl	80047e8 <HAL_GetTick>
 80066ae:	0003      	movs	r3, r0
 80066b0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066b2:	e008      	b.n	80066c6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066b4:	f7fe f898 	bl	80047e8 <HAL_GetTick>
 80066b8:	0002      	movs	r2, r0
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b64      	cmp	r3, #100	; 0x64
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e185      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066c6:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <HAL_RCC_OscConfig+0x338>)
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	2380      	movs	r3, #128	; 0x80
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	4013      	ands	r3, r2
 80066d0:	d0f0      	beq.n	80066b4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d10e      	bne.n	80066f8 <HAL_RCC_OscConfig+0x33c>
 80066da:	4b03      	ldr	r3, [pc, #12]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 80066dc:	6a1a      	ldr	r2, [r3, #32]
 80066de:	4b02      	ldr	r3, [pc, #8]	; (80066e8 <HAL_RCC_OscConfig+0x32c>)
 80066e0:	2101      	movs	r1, #1
 80066e2:	430a      	orrs	r2, r1
 80066e4:	621a      	str	r2, [r3, #32]
 80066e6:	e035      	b.n	8006754 <HAL_RCC_OscConfig+0x398>
 80066e8:	40021000 	.word	0x40021000
 80066ec:	fffeffff 	.word	0xfffeffff
 80066f0:	fffbffff 	.word	0xfffbffff
 80066f4:	40007000 	.word	0x40007000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10c      	bne.n	800671a <HAL_RCC_OscConfig+0x35e>
 8006700:	4bb6      	ldr	r3, [pc, #728]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006702:	6a1a      	ldr	r2, [r3, #32]
 8006704:	4bb5      	ldr	r3, [pc, #724]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006706:	2101      	movs	r1, #1
 8006708:	438a      	bics	r2, r1
 800670a:	621a      	str	r2, [r3, #32]
 800670c:	4bb3      	ldr	r3, [pc, #716]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 800670e:	6a1a      	ldr	r2, [r3, #32]
 8006710:	4bb2      	ldr	r3, [pc, #712]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006712:	2104      	movs	r1, #4
 8006714:	438a      	bics	r2, r1
 8006716:	621a      	str	r2, [r3, #32]
 8006718:	e01c      	b.n	8006754 <HAL_RCC_OscConfig+0x398>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2b05      	cmp	r3, #5
 8006720:	d10c      	bne.n	800673c <HAL_RCC_OscConfig+0x380>
 8006722:	4bae      	ldr	r3, [pc, #696]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006724:	6a1a      	ldr	r2, [r3, #32]
 8006726:	4bad      	ldr	r3, [pc, #692]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006728:	2104      	movs	r1, #4
 800672a:	430a      	orrs	r2, r1
 800672c:	621a      	str	r2, [r3, #32]
 800672e:	4bab      	ldr	r3, [pc, #684]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006730:	6a1a      	ldr	r2, [r3, #32]
 8006732:	4baa      	ldr	r3, [pc, #680]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006734:	2101      	movs	r1, #1
 8006736:	430a      	orrs	r2, r1
 8006738:	621a      	str	r2, [r3, #32]
 800673a:	e00b      	b.n	8006754 <HAL_RCC_OscConfig+0x398>
 800673c:	4ba7      	ldr	r3, [pc, #668]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 800673e:	6a1a      	ldr	r2, [r3, #32]
 8006740:	4ba6      	ldr	r3, [pc, #664]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006742:	2101      	movs	r1, #1
 8006744:	438a      	bics	r2, r1
 8006746:	621a      	str	r2, [r3, #32]
 8006748:	4ba4      	ldr	r3, [pc, #656]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 800674a:	6a1a      	ldr	r2, [r3, #32]
 800674c:	4ba3      	ldr	r3, [pc, #652]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 800674e:	2104      	movs	r1, #4
 8006750:	438a      	bics	r2, r1
 8006752:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d014      	beq.n	8006786 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800675c:	f7fe f844 	bl	80047e8 <HAL_GetTick>
 8006760:	0003      	movs	r3, r0
 8006762:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006764:	e009      	b.n	800677a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006766:	f7fe f83f 	bl	80047e8 <HAL_GetTick>
 800676a:	0002      	movs	r2, r0
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	4a9b      	ldr	r2, [pc, #620]	; (80069e0 <HAL_RCC_OscConfig+0x624>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e12b      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800677a:	4b98      	ldr	r3, [pc, #608]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	2202      	movs	r2, #2
 8006780:	4013      	ands	r3, r2
 8006782:	d0f0      	beq.n	8006766 <HAL_RCC_OscConfig+0x3aa>
 8006784:	e013      	b.n	80067ae <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006786:	f7fe f82f 	bl	80047e8 <HAL_GetTick>
 800678a:	0003      	movs	r3, r0
 800678c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800678e:	e009      	b.n	80067a4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006790:	f7fe f82a 	bl	80047e8 <HAL_GetTick>
 8006794:	0002      	movs	r2, r0
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	4a91      	ldr	r2, [pc, #580]	; (80069e0 <HAL_RCC_OscConfig+0x624>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e116      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067a4:	4b8d      	ldr	r3, [pc, #564]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	2202      	movs	r2, #2
 80067aa:	4013      	ands	r3, r2
 80067ac:	d1f0      	bne.n	8006790 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80067ae:	231f      	movs	r3, #31
 80067b0:	18fb      	adds	r3, r7, r3
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d105      	bne.n	80067c4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067b8:	4b88      	ldr	r3, [pc, #544]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	4b87      	ldr	r3, [pc, #540]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 80067be:	4989      	ldr	r1, [pc, #548]	; (80069e4 <HAL_RCC_OscConfig+0x628>)
 80067c0:	400a      	ands	r2, r1
 80067c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2210      	movs	r2, #16
 80067ca:	4013      	ands	r3, r2
 80067cc:	d063      	beq.n	8006896 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d12a      	bne.n	800682c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80067d6:	4b81      	ldr	r3, [pc, #516]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 80067d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067da:	4b80      	ldr	r3, [pc, #512]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 80067dc:	2104      	movs	r1, #4
 80067de:	430a      	orrs	r2, r1
 80067e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80067e2:	4b7e      	ldr	r3, [pc, #504]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 80067e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067e6:	4b7d      	ldr	r3, [pc, #500]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 80067e8:	2101      	movs	r1, #1
 80067ea:	430a      	orrs	r2, r1
 80067ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067ee:	f7fd fffb 	bl	80047e8 <HAL_GetTick>
 80067f2:	0003      	movs	r3, r0
 80067f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80067f8:	f7fd fff6 	bl	80047e8 <HAL_GetTick>
 80067fc:	0002      	movs	r2, r0
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e0e3      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800680a:	4b74      	ldr	r3, [pc, #464]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 800680c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680e:	2202      	movs	r2, #2
 8006810:	4013      	ands	r3, r2
 8006812:	d0f1      	beq.n	80067f8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006814:	4b71      	ldr	r3, [pc, #452]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006818:	22f8      	movs	r2, #248	; 0xf8
 800681a:	4393      	bics	r3, r2
 800681c:	0019      	movs	r1, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	00da      	lsls	r2, r3, #3
 8006824:	4b6d      	ldr	r3, [pc, #436]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006826:	430a      	orrs	r2, r1
 8006828:	635a      	str	r2, [r3, #52]	; 0x34
 800682a:	e034      	b.n	8006896 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	3305      	adds	r3, #5
 8006832:	d111      	bne.n	8006858 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006834:	4b69      	ldr	r3, [pc, #420]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006838:	4b68      	ldr	r3, [pc, #416]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 800683a:	2104      	movs	r1, #4
 800683c:	438a      	bics	r2, r1
 800683e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006840:	4b66      	ldr	r3, [pc, #408]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006844:	22f8      	movs	r2, #248	; 0xf8
 8006846:	4393      	bics	r3, r2
 8006848:	0019      	movs	r1, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	00da      	lsls	r2, r3, #3
 8006850:	4b62      	ldr	r3, [pc, #392]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006852:	430a      	orrs	r2, r1
 8006854:	635a      	str	r2, [r3, #52]	; 0x34
 8006856:	e01e      	b.n	8006896 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006858:	4b60      	ldr	r3, [pc, #384]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 800685a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800685c:	4b5f      	ldr	r3, [pc, #380]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 800685e:	2104      	movs	r1, #4
 8006860:	430a      	orrs	r2, r1
 8006862:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006864:	4b5d      	ldr	r3, [pc, #372]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006868:	4b5c      	ldr	r3, [pc, #368]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 800686a:	2101      	movs	r1, #1
 800686c:	438a      	bics	r2, r1
 800686e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006870:	f7fd ffba 	bl	80047e8 <HAL_GetTick>
 8006874:	0003      	movs	r3, r0
 8006876:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006878:	e008      	b.n	800688c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800687a:	f7fd ffb5 	bl	80047e8 <HAL_GetTick>
 800687e:	0002      	movs	r2, r0
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	2b02      	cmp	r3, #2
 8006886:	d901      	bls.n	800688c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e0a2      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800688c:	4b53      	ldr	r3, [pc, #332]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 800688e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006890:	2202      	movs	r2, #2
 8006892:	4013      	ands	r3, r2
 8006894:	d1f1      	bne.n	800687a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d100      	bne.n	80068a0 <HAL_RCC_OscConfig+0x4e4>
 800689e:	e097      	b.n	80069d0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068a0:	4b4e      	ldr	r3, [pc, #312]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	220c      	movs	r2, #12
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d100      	bne.n	80068ae <HAL_RCC_OscConfig+0x4f2>
 80068ac:	e06b      	b.n	8006986 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d14c      	bne.n	8006950 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068b6:	4b49      	ldr	r3, [pc, #292]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b48      	ldr	r3, [pc, #288]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 80068bc:	494a      	ldr	r1, [pc, #296]	; (80069e8 <HAL_RCC_OscConfig+0x62c>)
 80068be:	400a      	ands	r2, r1
 80068c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c2:	f7fd ff91 	bl	80047e8 <HAL_GetTick>
 80068c6:	0003      	movs	r3, r0
 80068c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068cc:	f7fd ff8c 	bl	80047e8 <HAL_GetTick>
 80068d0:	0002      	movs	r2, r0
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e079      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068de:	4b3f      	ldr	r3, [pc, #252]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	2380      	movs	r3, #128	; 0x80
 80068e4:	049b      	lsls	r3, r3, #18
 80068e6:	4013      	ands	r3, r2
 80068e8:	d1f0      	bne.n	80068cc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068ea:	4b3c      	ldr	r3, [pc, #240]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 80068ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ee:	220f      	movs	r2, #15
 80068f0:	4393      	bics	r3, r2
 80068f2:	0019      	movs	r1, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f8:	4b38      	ldr	r3, [pc, #224]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 80068fa:	430a      	orrs	r2, r1
 80068fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80068fe:	4b37      	ldr	r3, [pc, #220]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	4a3a      	ldr	r2, [pc, #232]	; (80069ec <HAL_RCC_OscConfig+0x630>)
 8006904:	4013      	ands	r3, r2
 8006906:	0019      	movs	r1, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	431a      	orrs	r2, r3
 8006912:	4b32      	ldr	r3, [pc, #200]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006914:	430a      	orrs	r2, r1
 8006916:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006918:	4b30      	ldr	r3, [pc, #192]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	4b2f      	ldr	r3, [pc, #188]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 800691e:	2180      	movs	r1, #128	; 0x80
 8006920:	0449      	lsls	r1, r1, #17
 8006922:	430a      	orrs	r2, r1
 8006924:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006926:	f7fd ff5f 	bl	80047e8 <HAL_GetTick>
 800692a:	0003      	movs	r3, r0
 800692c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800692e:	e008      	b.n	8006942 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006930:	f7fd ff5a 	bl	80047e8 <HAL_GetTick>
 8006934:	0002      	movs	r2, r0
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	2b02      	cmp	r3, #2
 800693c:	d901      	bls.n	8006942 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e047      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006942:	4b26      	ldr	r3, [pc, #152]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	2380      	movs	r3, #128	; 0x80
 8006948:	049b      	lsls	r3, r3, #18
 800694a:	4013      	ands	r3, r2
 800694c:	d0f0      	beq.n	8006930 <HAL_RCC_OscConfig+0x574>
 800694e:	e03f      	b.n	80069d0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006950:	4b22      	ldr	r3, [pc, #136]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	4b21      	ldr	r3, [pc, #132]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006956:	4924      	ldr	r1, [pc, #144]	; (80069e8 <HAL_RCC_OscConfig+0x62c>)
 8006958:	400a      	ands	r2, r1
 800695a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800695c:	f7fd ff44 	bl	80047e8 <HAL_GetTick>
 8006960:	0003      	movs	r3, r0
 8006962:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006964:	e008      	b.n	8006978 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006966:	f7fd ff3f 	bl	80047e8 <HAL_GetTick>
 800696a:	0002      	movs	r2, r0
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e02c      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006978:	4b18      	ldr	r3, [pc, #96]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	2380      	movs	r3, #128	; 0x80
 800697e:	049b      	lsls	r3, r3, #18
 8006980:	4013      	ands	r3, r2
 8006982:	d1f0      	bne.n	8006966 <HAL_RCC_OscConfig+0x5aa>
 8006984:	e024      	b.n	80069d0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d101      	bne.n	8006992 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e01f      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006992:	4b12      	ldr	r3, [pc, #72]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006998:	4b10      	ldr	r3, [pc, #64]	; (80069dc <HAL_RCC_OscConfig+0x620>)
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	2380      	movs	r3, #128	; 0x80
 80069a2:	025b      	lsls	r3, r3, #9
 80069a4:	401a      	ands	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d10e      	bne.n	80069cc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	220f      	movs	r2, #15
 80069b2:	401a      	ands	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d107      	bne.n	80069cc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	23f0      	movs	r3, #240	; 0xf0
 80069c0:	039b      	lsls	r3, r3, #14
 80069c2:	401a      	ands	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d001      	beq.n	80069d0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	0018      	movs	r0, r3
 80069d4:	46bd      	mov	sp, r7
 80069d6:	b008      	add	sp, #32
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	40021000 	.word	0x40021000
 80069e0:	00001388 	.word	0x00001388
 80069e4:	efffffff 	.word	0xefffffff
 80069e8:	feffffff 	.word	0xfeffffff
 80069ec:	ffc2ffff 	.word	0xffc2ffff

080069f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e0b3      	b.n	8006b6c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a04:	4b5b      	ldr	r3, [pc, #364]	; (8006b74 <HAL_RCC_ClockConfig+0x184>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d911      	bls.n	8006a36 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a12:	4b58      	ldr	r3, [pc, #352]	; (8006b74 <HAL_RCC_ClockConfig+0x184>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2201      	movs	r2, #1
 8006a18:	4393      	bics	r3, r2
 8006a1a:	0019      	movs	r1, r3
 8006a1c:	4b55      	ldr	r3, [pc, #340]	; (8006b74 <HAL_RCC_ClockConfig+0x184>)
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a24:	4b53      	ldr	r3, [pc, #332]	; (8006b74 <HAL_RCC_ClockConfig+0x184>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d001      	beq.n	8006a36 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e09a      	b.n	8006b6c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	d015      	beq.n	8006a6c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2204      	movs	r2, #4
 8006a46:	4013      	ands	r3, r2
 8006a48:	d006      	beq.n	8006a58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006a4a:	4b4b      	ldr	r3, [pc, #300]	; (8006b78 <HAL_RCC_ClockConfig+0x188>)
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	4b4a      	ldr	r3, [pc, #296]	; (8006b78 <HAL_RCC_ClockConfig+0x188>)
 8006a50:	21e0      	movs	r1, #224	; 0xe0
 8006a52:	00c9      	lsls	r1, r1, #3
 8006a54:	430a      	orrs	r2, r1
 8006a56:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a58:	4b47      	ldr	r3, [pc, #284]	; (8006b78 <HAL_RCC_ClockConfig+0x188>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	22f0      	movs	r2, #240	; 0xf0
 8006a5e:	4393      	bics	r3, r2
 8006a60:	0019      	movs	r1, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	689a      	ldr	r2, [r3, #8]
 8006a66:	4b44      	ldr	r3, [pc, #272]	; (8006b78 <HAL_RCC_ClockConfig+0x188>)
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2201      	movs	r2, #1
 8006a72:	4013      	ands	r3, r2
 8006a74:	d040      	beq.n	8006af8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d107      	bne.n	8006a8e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a7e:	4b3e      	ldr	r3, [pc, #248]	; (8006b78 <HAL_RCC_ClockConfig+0x188>)
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	2380      	movs	r3, #128	; 0x80
 8006a84:	029b      	lsls	r3, r3, #10
 8006a86:	4013      	ands	r3, r2
 8006a88:	d114      	bne.n	8006ab4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e06e      	b.n	8006b6c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d107      	bne.n	8006aa6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a96:	4b38      	ldr	r3, [pc, #224]	; (8006b78 <HAL_RCC_ClockConfig+0x188>)
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	2380      	movs	r3, #128	; 0x80
 8006a9c:	049b      	lsls	r3, r3, #18
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	d108      	bne.n	8006ab4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e062      	b.n	8006b6c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aa6:	4b34      	ldr	r3, [pc, #208]	; (8006b78 <HAL_RCC_ClockConfig+0x188>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	4013      	ands	r3, r2
 8006aae:	d101      	bne.n	8006ab4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e05b      	b.n	8006b6c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ab4:	4b30      	ldr	r3, [pc, #192]	; (8006b78 <HAL_RCC_ClockConfig+0x188>)
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2203      	movs	r2, #3
 8006aba:	4393      	bics	r3, r2
 8006abc:	0019      	movs	r1, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	4b2d      	ldr	r3, [pc, #180]	; (8006b78 <HAL_RCC_ClockConfig+0x188>)
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ac8:	f7fd fe8e 	bl	80047e8 <HAL_GetTick>
 8006acc:	0003      	movs	r3, r0
 8006ace:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ad0:	e009      	b.n	8006ae6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ad2:	f7fd fe89 	bl	80047e8 <HAL_GetTick>
 8006ad6:	0002      	movs	r2, r0
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	4a27      	ldr	r2, [pc, #156]	; (8006b7c <HAL_RCC_ClockConfig+0x18c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e042      	b.n	8006b6c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ae6:	4b24      	ldr	r3, [pc, #144]	; (8006b78 <HAL_RCC_ClockConfig+0x188>)
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	220c      	movs	r2, #12
 8006aec:	401a      	ands	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d1ec      	bne.n	8006ad2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006af8:	4b1e      	ldr	r3, [pc, #120]	; (8006b74 <HAL_RCC_ClockConfig+0x184>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2201      	movs	r2, #1
 8006afe:	4013      	ands	r3, r2
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d211      	bcs.n	8006b2a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b06:	4b1b      	ldr	r3, [pc, #108]	; (8006b74 <HAL_RCC_ClockConfig+0x184>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	4393      	bics	r3, r2
 8006b0e:	0019      	movs	r1, r3
 8006b10:	4b18      	ldr	r3, [pc, #96]	; (8006b74 <HAL_RCC_ClockConfig+0x184>)
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b18:	4b16      	ldr	r3, [pc, #88]	; (8006b74 <HAL_RCC_ClockConfig+0x184>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	4013      	ands	r3, r2
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d001      	beq.n	8006b2a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e020      	b.n	8006b6c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2204      	movs	r2, #4
 8006b30:	4013      	ands	r3, r2
 8006b32:	d009      	beq.n	8006b48 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006b34:	4b10      	ldr	r3, [pc, #64]	; (8006b78 <HAL_RCC_ClockConfig+0x188>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	4a11      	ldr	r2, [pc, #68]	; (8006b80 <HAL_RCC_ClockConfig+0x190>)
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	0019      	movs	r1, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68da      	ldr	r2, [r3, #12]
 8006b42:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <HAL_RCC_ClockConfig+0x188>)
 8006b44:	430a      	orrs	r2, r1
 8006b46:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006b48:	f000 f820 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 8006b4c:	0001      	movs	r1, r0
 8006b4e:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <HAL_RCC_ClockConfig+0x188>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	091b      	lsrs	r3, r3, #4
 8006b54:	220f      	movs	r2, #15
 8006b56:	4013      	ands	r3, r2
 8006b58:	4a0a      	ldr	r2, [pc, #40]	; (8006b84 <HAL_RCC_ClockConfig+0x194>)
 8006b5a:	5cd3      	ldrb	r3, [r2, r3]
 8006b5c:	000a      	movs	r2, r1
 8006b5e:	40da      	lsrs	r2, r3
 8006b60:	4b09      	ldr	r3, [pc, #36]	; (8006b88 <HAL_RCC_ClockConfig+0x198>)
 8006b62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006b64:	2003      	movs	r0, #3
 8006b66:	f7fd fdf9 	bl	800475c <HAL_InitTick>
  
  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	b004      	add	sp, #16
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	40022000 	.word	0x40022000
 8006b78:	40021000 	.word	0x40021000
 8006b7c:	00001388 	.word	0x00001388
 8006b80:	fffff8ff 	.word	0xfffff8ff
 8006b84:	0800d000 	.word	0x0800d000
 8006b88:	20000024 	.word	0x20000024

08006b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b8c:	b590      	push	{r4, r7, lr}
 8006b8e:	b08f      	sub	sp, #60	; 0x3c
 8006b90:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006b92:	2314      	movs	r3, #20
 8006b94:	18fb      	adds	r3, r7, r3
 8006b96:	4a2b      	ldr	r2, [pc, #172]	; (8006c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b98:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006b9a:	c313      	stmia	r3!, {r0, r1, r4}
 8006b9c:	6812      	ldr	r2, [r2, #0]
 8006b9e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006ba0:	1d3b      	adds	r3, r7, #4
 8006ba2:	4a29      	ldr	r2, [pc, #164]	; (8006c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ba4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006ba6:	c313      	stmia	r3!, {r0, r1, r4}
 8006ba8:	6812      	ldr	r2, [r2, #0]
 8006baa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb8:	2300      	movs	r3, #0
 8006bba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006bc0:	4b22      	ldr	r3, [pc, #136]	; (8006c4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	220c      	movs	r2, #12
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d002      	beq.n	8006bd6 <HAL_RCC_GetSysClockFreq+0x4a>
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d003      	beq.n	8006bdc <HAL_RCC_GetSysClockFreq+0x50>
 8006bd4:	e02d      	b.n	8006c32 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006bd6:	4b1e      	ldr	r3, [pc, #120]	; (8006c50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006bd8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006bda:	e02d      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	0c9b      	lsrs	r3, r3, #18
 8006be0:	220f      	movs	r2, #15
 8006be2:	4013      	ands	r3, r2
 8006be4:	2214      	movs	r2, #20
 8006be6:	18ba      	adds	r2, r7, r2
 8006be8:	5cd3      	ldrb	r3, [r2, r3]
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006bec:	4b17      	ldr	r3, [pc, #92]	; (8006c4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	220f      	movs	r2, #15
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	1d3a      	adds	r2, r7, #4
 8006bf6:	5cd3      	ldrb	r3, [r2, r3]
 8006bf8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bfc:	2380      	movs	r3, #128	; 0x80
 8006bfe:	025b      	lsls	r3, r3, #9
 8006c00:	4013      	ands	r3, r2
 8006c02:	d009      	beq.n	8006c18 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c06:	4812      	ldr	r0, [pc, #72]	; (8006c50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006c08:	f7f9 fa9a 	bl	8000140 <__udivsi3>
 8006c0c:	0003      	movs	r3, r0
 8006c0e:	001a      	movs	r2, r3
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	4353      	muls	r3, r2
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
 8006c16:	e009      	b.n	8006c2c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c1a:	000a      	movs	r2, r1
 8006c1c:	0152      	lsls	r2, r2, #5
 8006c1e:	1a52      	subs	r2, r2, r1
 8006c20:	0193      	lsls	r3, r2, #6
 8006c22:	1a9b      	subs	r3, r3, r2
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	185b      	adds	r3, r3, r1
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006c30:	e002      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006c32:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006c34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006c36:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	b00f      	add	sp, #60	; 0x3c
 8006c40:	bd90      	pop	{r4, r7, pc}
 8006c42:	46c0      	nop			; (mov r8, r8)
 8006c44:	0800cec0 	.word	0x0800cec0
 8006c48:	0800ced0 	.word	0x0800ced0
 8006c4c:	40021000 	.word	0x40021000
 8006c50:	007a1200 	.word	0x007a1200

08006c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c58:	4b02      	ldr	r3, [pc, #8]	; (8006c64 <HAL_RCC_GetHCLKFreq+0x10>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
}
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	20000024 	.word	0x20000024

08006c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006c6c:	f7ff fff2 	bl	8006c54 <HAL_RCC_GetHCLKFreq>
 8006c70:	0001      	movs	r1, r0
 8006c72:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	0a1b      	lsrs	r3, r3, #8
 8006c78:	2207      	movs	r2, #7
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	4a04      	ldr	r2, [pc, #16]	; (8006c90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c7e:	5cd3      	ldrb	r3, [r2, r3]
 8006c80:	40d9      	lsrs	r1, r3
 8006c82:	000b      	movs	r3, r1
}    
 8006c84:	0018      	movs	r0, r3
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	40021000 	.word	0x40021000
 8006c90:	0800d010 	.word	0x0800d010

08006c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	2380      	movs	r3, #128	; 0x80
 8006caa:	025b      	lsls	r3, r3, #9
 8006cac:	4013      	ands	r3, r2
 8006cae:	d100      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006cb0:	e08e      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006cb2:	2017      	movs	r0, #23
 8006cb4:	183b      	adds	r3, r7, r0
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cba:	4b5f      	ldr	r3, [pc, #380]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006cbc:	69da      	ldr	r2, [r3, #28]
 8006cbe:	2380      	movs	r3, #128	; 0x80
 8006cc0:	055b      	lsls	r3, r3, #21
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	d110      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cc6:	4b5c      	ldr	r3, [pc, #368]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006cc8:	69da      	ldr	r2, [r3, #28]
 8006cca:	4b5b      	ldr	r3, [pc, #364]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ccc:	2180      	movs	r1, #128	; 0x80
 8006cce:	0549      	lsls	r1, r1, #21
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	61da      	str	r2, [r3, #28]
 8006cd4:	4b58      	ldr	r3, [pc, #352]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	2380      	movs	r3, #128	; 0x80
 8006cda:	055b      	lsls	r3, r3, #21
 8006cdc:	4013      	ands	r3, r2
 8006cde:	60bb      	str	r3, [r7, #8]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ce2:	183b      	adds	r3, r7, r0
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ce8:	4b54      	ldr	r3, [pc, #336]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	2380      	movs	r3, #128	; 0x80
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	d11a      	bne.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cf4:	4b51      	ldr	r3, [pc, #324]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	4b50      	ldr	r3, [pc, #320]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006cfa:	2180      	movs	r1, #128	; 0x80
 8006cfc:	0049      	lsls	r1, r1, #1
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d02:	f7fd fd71 	bl	80047e8 <HAL_GetTick>
 8006d06:	0003      	movs	r3, r0
 8006d08:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d0a:	e008      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d0c:	f7fd fd6c 	bl	80047e8 <HAL_GetTick>
 8006d10:	0002      	movs	r2, r0
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b64      	cmp	r3, #100	; 0x64
 8006d18:	d901      	bls.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e087      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d1e:	4b47      	ldr	r3, [pc, #284]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	2380      	movs	r3, #128	; 0x80
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	4013      	ands	r3, r2
 8006d28:	d0f0      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d2a:	4b43      	ldr	r3, [pc, #268]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006d2c:	6a1a      	ldr	r2, [r3, #32]
 8006d2e:	23c0      	movs	r3, #192	; 0xc0
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4013      	ands	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d034      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	23c0      	movs	r3, #192	; 0xc0
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4013      	ands	r3, r2
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d02c      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d4c:	4b3a      	ldr	r3, [pc, #232]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	4a3b      	ldr	r2, [pc, #236]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d52:	4013      	ands	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d56:	4b38      	ldr	r3, [pc, #224]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006d58:	6a1a      	ldr	r2, [r3, #32]
 8006d5a:	4b37      	ldr	r3, [pc, #220]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006d5c:	2180      	movs	r1, #128	; 0x80
 8006d5e:	0249      	lsls	r1, r1, #9
 8006d60:	430a      	orrs	r2, r1
 8006d62:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d64:	4b34      	ldr	r3, [pc, #208]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006d66:	6a1a      	ldr	r2, [r3, #32]
 8006d68:	4b33      	ldr	r3, [pc, #204]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006d6a:	4936      	ldr	r1, [pc, #216]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006d6c:	400a      	ands	r2, r1
 8006d6e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006d70:	4b31      	ldr	r3, [pc, #196]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	d013      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d7e:	f7fd fd33 	bl	80047e8 <HAL_GetTick>
 8006d82:	0003      	movs	r3, r0
 8006d84:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d86:	e009      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d88:	f7fd fd2e 	bl	80047e8 <HAL_GetTick>
 8006d8c:	0002      	movs	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	4a2d      	ldr	r2, [pc, #180]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e048      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d9c:	4b26      	ldr	r3, [pc, #152]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	2202      	movs	r2, #2
 8006da2:	4013      	ands	r3, r2
 8006da4:	d0f0      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006da6:	4b24      	ldr	r3, [pc, #144]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	4a25      	ldr	r2, [pc, #148]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006dac:	4013      	ands	r3, r2
 8006dae:	0019      	movs	r1, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	4b20      	ldr	r3, [pc, #128]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006db6:	430a      	orrs	r2, r1
 8006db8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006dba:	2317      	movs	r3, #23
 8006dbc:	18fb      	adds	r3, r7, r3
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d105      	bne.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dc4:	4b1c      	ldr	r3, [pc, #112]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	4b1b      	ldr	r3, [pc, #108]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006dca:	4920      	ldr	r1, [pc, #128]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dcc:	400a      	ands	r2, r1
 8006dce:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	d009      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006dda:	4b17      	ldr	r3, [pc, #92]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dde:	2203      	movs	r2, #3
 8006de0:	4393      	bics	r3, r2
 8006de2:	0019      	movs	r1, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	4b13      	ldr	r3, [pc, #76]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006dea:	430a      	orrs	r2, r1
 8006dec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2220      	movs	r2, #32
 8006df4:	4013      	ands	r3, r2
 8006df6:	d009      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006df8:	4b0f      	ldr	r3, [pc, #60]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfc:	2210      	movs	r2, #16
 8006dfe:	4393      	bics	r3, r2
 8006e00:	0019      	movs	r1, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	2380      	movs	r3, #128	; 0x80
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	4013      	ands	r3, r2
 8006e16:	d009      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e18:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1c:	2240      	movs	r2, #64	; 0x40
 8006e1e:	4393      	bics	r3, r2
 8006e20:	0019      	movs	r1, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	691a      	ldr	r2, [r3, #16]
 8006e26:	4b04      	ldr	r3, [pc, #16]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	0018      	movs	r0, r3
 8006e30:	46bd      	mov	sp, r7
 8006e32:	b006      	add	sp, #24
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	46c0      	nop			; (mov r8, r8)
 8006e38:	40021000 	.word	0x40021000
 8006e3c:	40007000 	.word	0x40007000
 8006e40:	fffffcff 	.word	0xfffffcff
 8006e44:	fffeffff 	.word	0xfffeffff
 8006e48:	00001388 	.word	0x00001388
 8006e4c:	efffffff 	.word	0xefffffff

08006e50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e044      	b.n	8006eec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d107      	bne.n	8006e7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2274      	movs	r2, #116	; 0x74
 8006e6e:	2100      	movs	r1, #0
 8006e70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	0018      	movs	r0, r3
 8006e76:	f7fd fae9 	bl	800444c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2224      	movs	r2, #36	; 0x24
 8006e7e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	438a      	bics	r2, r1
 8006e8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	0018      	movs	r0, r3
 8006e94:	f000 fc2e 	bl	80076f4 <UART_SetConfig>
 8006e98:	0003      	movs	r3, r0
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d101      	bne.n	8006ea2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e024      	b.n	8006eec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	0018      	movs	r0, r3
 8006eae:	f000 fd61 	bl	8007974 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	490d      	ldr	r1, [pc, #52]	; (8006ef4 <HAL_UART_Init+0xa4>)
 8006ebe:	400a      	ands	r2, r1
 8006ec0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	212a      	movs	r1, #42	; 0x2a
 8006ece:	438a      	bics	r2, r1
 8006ed0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2101      	movs	r1, #1
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f000 fdf9 	bl	8007adc <UART_CheckIdleState>
 8006eea:	0003      	movs	r3, r0
}
 8006eec:	0018      	movs	r0, r3
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	b002      	add	sp, #8
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	ffffb7ff 	.word	0xffffb7ff

08006ef8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	; 0x28
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	1dbb      	adds	r3, r7, #6
 8006f06:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f0c:	2b20      	cmp	r3, #32
 8006f0e:	d000      	beq.n	8006f12 <HAL_UART_Transmit+0x1a>
 8006f10:	e096      	b.n	8007040 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <HAL_UART_Transmit+0x28>
 8006f18:	1dbb      	adds	r3, r7, #6
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e08e      	b.n	8007042 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	2380      	movs	r3, #128	; 0x80
 8006f2a:	015b      	lsls	r3, r3, #5
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d109      	bne.n	8006f44 <HAL_UART_Transmit+0x4c>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d105      	bne.n	8006f44 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	d001      	beq.n	8006f44 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e07e      	b.n	8007042 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2274      	movs	r2, #116	; 0x74
 8006f48:	5c9b      	ldrb	r3, [r3, r2]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_UART_Transmit+0x5a>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e077      	b.n	8007042 <HAL_UART_Transmit+0x14a>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2274      	movs	r2, #116	; 0x74
 8006f56:	2101      	movs	r1, #1
 8006f58:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2280      	movs	r2, #128	; 0x80
 8006f5e:	2100      	movs	r1, #0
 8006f60:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2221      	movs	r2, #33	; 0x21
 8006f66:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f68:	f7fd fc3e 	bl	80047e8 <HAL_GetTick>
 8006f6c:	0003      	movs	r3, r0
 8006f6e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	1dba      	adds	r2, r7, #6
 8006f74:	2150      	movs	r1, #80	; 0x50
 8006f76:	8812      	ldrh	r2, [r2, #0]
 8006f78:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	1dba      	adds	r2, r7, #6
 8006f7e:	2152      	movs	r1, #82	; 0x52
 8006f80:	8812      	ldrh	r2, [r2, #0]
 8006f82:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	2380      	movs	r3, #128	; 0x80
 8006f8a:	015b      	lsls	r3, r3, #5
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d108      	bne.n	8006fa2 <HAL_UART_Transmit+0xaa>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d104      	bne.n	8006fa2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	61bb      	str	r3, [r7, #24]
 8006fa0:	e003      	b.n	8006faa <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2274      	movs	r2, #116	; 0x74
 8006fae:	2100      	movs	r1, #0
 8006fb0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006fb2:	e02d      	b.n	8007010 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	0013      	movs	r3, r2
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2180      	movs	r1, #128	; 0x80
 8006fc2:	f000 fdd3 	bl	8007b6c <UART_WaitOnFlagUntilTimeout>
 8006fc6:	1e03      	subs	r3, r0, #0
 8006fc8:	d001      	beq.n	8006fce <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e039      	b.n	8007042 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10b      	bne.n	8006fec <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	881a      	ldrh	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	05d2      	lsls	r2, r2, #23
 8006fde:	0dd2      	lsrs	r2, r2, #23
 8006fe0:	b292      	uxth	r2, r2
 8006fe2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	3302      	adds	r3, #2
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	e008      	b.n	8006ffe <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	781a      	ldrb	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	b292      	uxth	r2, r2
 8006ff6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2252      	movs	r2, #82	; 0x52
 8007002:	5a9b      	ldrh	r3, [r3, r2]
 8007004:	b29b      	uxth	r3, r3
 8007006:	3b01      	subs	r3, #1
 8007008:	b299      	uxth	r1, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2252      	movs	r2, #82	; 0x52
 800700e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2252      	movs	r2, #82	; 0x52
 8007014:	5a9b      	ldrh	r3, [r3, r2]
 8007016:	b29b      	uxth	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1cb      	bne.n	8006fb4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	0013      	movs	r3, r2
 8007026:	2200      	movs	r2, #0
 8007028:	2140      	movs	r1, #64	; 0x40
 800702a:	f000 fd9f 	bl	8007b6c <UART_WaitOnFlagUntilTimeout>
 800702e:	1e03      	subs	r3, r0, #0
 8007030:	d001      	beq.n	8007036 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e005      	b.n	8007042 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2220      	movs	r2, #32
 800703a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	e000      	b.n	8007042 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007040:	2302      	movs	r3, #2
  }
}
 8007042:	0018      	movs	r0, r3
 8007044:	46bd      	mov	sp, r7
 8007046:	b008      	add	sp, #32
 8007048:	bd80      	pop	{r7, pc}

0800704a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b088      	sub	sp, #32
 800704e:	af00      	add	r7, sp, #0
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	1dbb      	adds	r3, r7, #6
 8007056:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800705c:	2b20      	cmp	r3, #32
 800705e:	d150      	bne.n	8007102 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_UART_Receive_IT+0x24>
 8007066:	1dbb      	adds	r3, r7, #6
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e048      	b.n	8007104 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	2380      	movs	r3, #128	; 0x80
 8007078:	015b      	lsls	r3, r3, #5
 800707a:	429a      	cmp	r2, r3
 800707c:	d109      	bne.n	8007092 <HAL_UART_Receive_IT+0x48>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d105      	bne.n	8007092 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2201      	movs	r2, #1
 800708a:	4013      	ands	r3, r2
 800708c:	d001      	beq.n	8007092 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e038      	b.n	8007104 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2274      	movs	r2, #116	; 0x74
 8007096:	5c9b      	ldrb	r3, [r3, r2]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d101      	bne.n	80070a0 <HAL_UART_Receive_IT+0x56>
 800709c:	2302      	movs	r3, #2
 800709e:	e031      	b.n	8007104 <HAL_UART_Receive_IT+0xba>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2274      	movs	r2, #116	; 0x74
 80070a4:	2101      	movs	r1, #1
 80070a6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	2380      	movs	r3, #128	; 0x80
 80070b6:	041b      	lsls	r3, r3, #16
 80070b8:	4013      	ands	r3, r2
 80070ba:	d019      	beq.n	80070f0 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070bc:	f3ef 8310 	mrs	r3, PRIMASK
 80070c0:	613b      	str	r3, [r7, #16]
  return(result);
 80070c2:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070c4:	61fb      	str	r3, [r7, #28]
 80070c6:	2301      	movs	r3, #1
 80070c8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f383 8810 	msr	PRIMASK, r3
}
 80070d0:	46c0      	nop			; (mov r8, r8)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2180      	movs	r1, #128	; 0x80
 80070de:	04c9      	lsls	r1, r1, #19
 80070e0:	430a      	orrs	r2, r1
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	f383 8810 	msr	PRIMASK, r3
}
 80070ee:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070f0:	1dbb      	adds	r3, r7, #6
 80070f2:	881a      	ldrh	r2, [r3, #0]
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	0018      	movs	r0, r3
 80070fa:	f000 fdfb 	bl	8007cf4 <UART_Start_Receive_IT>
 80070fe:	0003      	movs	r3, r0
 8007100:	e000      	b.n	8007104 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007102:	2302      	movs	r3, #2
  }
}
 8007104:	0018      	movs	r0, r3
 8007106:	46bd      	mov	sp, r7
 8007108:	b008      	add	sp, #32
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800710c:	b590      	push	{r4, r7, lr}
 800710e:	b0ab      	sub	sp, #172	; 0xac
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	22a4      	movs	r2, #164	; 0xa4
 800711c:	18b9      	adds	r1, r7, r2
 800711e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	20a0      	movs	r0, #160	; 0xa0
 8007128:	1839      	adds	r1, r7, r0
 800712a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	219c      	movs	r1, #156	; 0x9c
 8007134:	1879      	adds	r1, r7, r1
 8007136:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007138:	0011      	movs	r1, r2
 800713a:	18bb      	adds	r3, r7, r2
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a99      	ldr	r2, [pc, #612]	; (80073a4 <HAL_UART_IRQHandler+0x298>)
 8007140:	4013      	ands	r3, r2
 8007142:	2298      	movs	r2, #152	; 0x98
 8007144:	18bc      	adds	r4, r7, r2
 8007146:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007148:	18bb      	adds	r3, r7, r2
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d114      	bne.n	800717a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007150:	187b      	adds	r3, r7, r1
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2220      	movs	r2, #32
 8007156:	4013      	ands	r3, r2
 8007158:	d00f      	beq.n	800717a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800715a:	183b      	adds	r3, r7, r0
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2220      	movs	r2, #32
 8007160:	4013      	ands	r3, r2
 8007162:	d00a      	beq.n	800717a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007168:	2b00      	cmp	r3, #0
 800716a:	d100      	bne.n	800716e <HAL_UART_IRQHandler+0x62>
 800716c:	e296      	b.n	800769c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	0010      	movs	r0, r2
 8007176:	4798      	blx	r3
      }
      return;
 8007178:	e290      	b.n	800769c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800717a:	2398      	movs	r3, #152	; 0x98
 800717c:	18fb      	adds	r3, r7, r3
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d100      	bne.n	8007186 <HAL_UART_IRQHandler+0x7a>
 8007184:	e114      	b.n	80073b0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007186:	239c      	movs	r3, #156	; 0x9c
 8007188:	18fb      	adds	r3, r7, r3
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2201      	movs	r2, #1
 800718e:	4013      	ands	r3, r2
 8007190:	d106      	bne.n	80071a0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007192:	23a0      	movs	r3, #160	; 0xa0
 8007194:	18fb      	adds	r3, r7, r3
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a83      	ldr	r2, [pc, #524]	; (80073a8 <HAL_UART_IRQHandler+0x29c>)
 800719a:	4013      	ands	r3, r2
 800719c:	d100      	bne.n	80071a0 <HAL_UART_IRQHandler+0x94>
 800719e:	e107      	b.n	80073b0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071a0:	23a4      	movs	r3, #164	; 0xa4
 80071a2:	18fb      	adds	r3, r7, r3
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2201      	movs	r2, #1
 80071a8:	4013      	ands	r3, r2
 80071aa:	d012      	beq.n	80071d2 <HAL_UART_IRQHandler+0xc6>
 80071ac:	23a0      	movs	r3, #160	; 0xa0
 80071ae:	18fb      	adds	r3, r7, r3
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	2380      	movs	r3, #128	; 0x80
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	4013      	ands	r3, r2
 80071b8:	d00b      	beq.n	80071d2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2201      	movs	r2, #1
 80071c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2280      	movs	r2, #128	; 0x80
 80071c6:	589b      	ldr	r3, [r3, r2]
 80071c8:	2201      	movs	r2, #1
 80071ca:	431a      	orrs	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2180      	movs	r1, #128	; 0x80
 80071d0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071d2:	23a4      	movs	r3, #164	; 0xa4
 80071d4:	18fb      	adds	r3, r7, r3
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2202      	movs	r2, #2
 80071da:	4013      	ands	r3, r2
 80071dc:	d011      	beq.n	8007202 <HAL_UART_IRQHandler+0xf6>
 80071de:	239c      	movs	r3, #156	; 0x9c
 80071e0:	18fb      	adds	r3, r7, r3
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2201      	movs	r2, #1
 80071e6:	4013      	ands	r3, r2
 80071e8:	d00b      	beq.n	8007202 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2202      	movs	r2, #2
 80071f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2280      	movs	r2, #128	; 0x80
 80071f6:	589b      	ldr	r3, [r3, r2]
 80071f8:	2204      	movs	r2, #4
 80071fa:	431a      	orrs	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2180      	movs	r1, #128	; 0x80
 8007200:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007202:	23a4      	movs	r3, #164	; 0xa4
 8007204:	18fb      	adds	r3, r7, r3
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2204      	movs	r2, #4
 800720a:	4013      	ands	r3, r2
 800720c:	d011      	beq.n	8007232 <HAL_UART_IRQHandler+0x126>
 800720e:	239c      	movs	r3, #156	; 0x9c
 8007210:	18fb      	adds	r3, r7, r3
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2201      	movs	r2, #1
 8007216:	4013      	ands	r3, r2
 8007218:	d00b      	beq.n	8007232 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2204      	movs	r2, #4
 8007220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2280      	movs	r2, #128	; 0x80
 8007226:	589b      	ldr	r3, [r3, r2]
 8007228:	2202      	movs	r2, #2
 800722a:	431a      	orrs	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2180      	movs	r1, #128	; 0x80
 8007230:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007232:	23a4      	movs	r3, #164	; 0xa4
 8007234:	18fb      	adds	r3, r7, r3
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2208      	movs	r2, #8
 800723a:	4013      	ands	r3, r2
 800723c:	d017      	beq.n	800726e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800723e:	23a0      	movs	r3, #160	; 0xa0
 8007240:	18fb      	adds	r3, r7, r3
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2220      	movs	r2, #32
 8007246:	4013      	ands	r3, r2
 8007248:	d105      	bne.n	8007256 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800724a:	239c      	movs	r3, #156	; 0x9c
 800724c:	18fb      	adds	r3, r7, r3
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2201      	movs	r2, #1
 8007252:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007254:	d00b      	beq.n	800726e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2208      	movs	r2, #8
 800725c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2280      	movs	r2, #128	; 0x80
 8007262:	589b      	ldr	r3, [r3, r2]
 8007264:	2208      	movs	r2, #8
 8007266:	431a      	orrs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2180      	movs	r1, #128	; 0x80
 800726c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800726e:	23a4      	movs	r3, #164	; 0xa4
 8007270:	18fb      	adds	r3, r7, r3
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	2380      	movs	r3, #128	; 0x80
 8007276:	011b      	lsls	r3, r3, #4
 8007278:	4013      	ands	r3, r2
 800727a:	d013      	beq.n	80072a4 <HAL_UART_IRQHandler+0x198>
 800727c:	23a0      	movs	r3, #160	; 0xa0
 800727e:	18fb      	adds	r3, r7, r3
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	2380      	movs	r3, #128	; 0x80
 8007284:	04db      	lsls	r3, r3, #19
 8007286:	4013      	ands	r3, r2
 8007288:	d00c      	beq.n	80072a4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2280      	movs	r2, #128	; 0x80
 8007290:	0112      	lsls	r2, r2, #4
 8007292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2280      	movs	r2, #128	; 0x80
 8007298:	589b      	ldr	r3, [r3, r2]
 800729a:	2220      	movs	r2, #32
 800729c:	431a      	orrs	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2180      	movs	r1, #128	; 0x80
 80072a2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2280      	movs	r2, #128	; 0x80
 80072a8:	589b      	ldr	r3, [r3, r2]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d100      	bne.n	80072b0 <HAL_UART_IRQHandler+0x1a4>
 80072ae:	e1f7      	b.n	80076a0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80072b0:	23a4      	movs	r3, #164	; 0xa4
 80072b2:	18fb      	adds	r3, r7, r3
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2220      	movs	r2, #32
 80072b8:	4013      	ands	r3, r2
 80072ba:	d00e      	beq.n	80072da <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072bc:	23a0      	movs	r3, #160	; 0xa0
 80072be:	18fb      	adds	r3, r7, r3
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2220      	movs	r2, #32
 80072c4:	4013      	ands	r3, r2
 80072c6:	d008      	beq.n	80072da <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d004      	beq.n	80072da <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	0010      	movs	r0, r2
 80072d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2280      	movs	r2, #128	; 0x80
 80072de:	589b      	ldr	r3, [r3, r2]
 80072e0:	2194      	movs	r1, #148	; 0x94
 80072e2:	187a      	adds	r2, r7, r1
 80072e4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	2240      	movs	r2, #64	; 0x40
 80072ee:	4013      	ands	r3, r2
 80072f0:	2b40      	cmp	r3, #64	; 0x40
 80072f2:	d004      	beq.n	80072fe <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072f4:	187b      	adds	r3, r7, r1
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2228      	movs	r2, #40	; 0x28
 80072fa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072fc:	d047      	beq.n	800738e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	0018      	movs	r0, r3
 8007302:	f000 fd93 	bl	8007e2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	2240      	movs	r2, #64	; 0x40
 800730e:	4013      	ands	r3, r2
 8007310:	2b40      	cmp	r3, #64	; 0x40
 8007312:	d137      	bne.n	8007384 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007314:	f3ef 8310 	mrs	r3, PRIMASK
 8007318:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800731a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800731c:	2090      	movs	r0, #144	; 0x90
 800731e:	183a      	adds	r2, r7, r0
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	2301      	movs	r3, #1
 8007324:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007326:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007328:	f383 8810 	msr	PRIMASK, r3
}
 800732c:	46c0      	nop			; (mov r8, r8)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689a      	ldr	r2, [r3, #8]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2140      	movs	r1, #64	; 0x40
 800733a:	438a      	bics	r2, r1
 800733c:	609a      	str	r2, [r3, #8]
 800733e:	183b      	adds	r3, r7, r0
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007346:	f383 8810 	msr	PRIMASK, r3
}
 800734a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007350:	2b00      	cmp	r3, #0
 8007352:	d012      	beq.n	800737a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007358:	4a14      	ldr	r2, [pc, #80]	; (80073ac <HAL_UART_IRQHandler+0x2a0>)
 800735a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007360:	0018      	movs	r0, r3
 8007362:	f7fd ffff 	bl	8005364 <HAL_DMA_Abort_IT>
 8007366:	1e03      	subs	r3, r0, #0
 8007368:	d01a      	beq.n	80073a0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007374:	0018      	movs	r0, r3
 8007376:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007378:	e012      	b.n	80073a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	0018      	movs	r0, r3
 800737e:	f000 f9a5 	bl	80076cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007382:	e00d      	b.n	80073a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	0018      	movs	r0, r3
 8007388:	f000 f9a0 	bl	80076cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800738c:	e008      	b.n	80073a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	0018      	movs	r0, r3
 8007392:	f000 f99b 	bl	80076cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2280      	movs	r2, #128	; 0x80
 800739a:	2100      	movs	r1, #0
 800739c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800739e:	e17f      	b.n	80076a0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a0:	46c0      	nop			; (mov r8, r8)
    return;
 80073a2:	e17d      	b.n	80076a0 <HAL_UART_IRQHandler+0x594>
 80073a4:	0000080f 	.word	0x0000080f
 80073a8:	04000120 	.word	0x04000120
 80073ac:	08007ef1 	.word	0x08007ef1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d000      	beq.n	80073ba <HAL_UART_IRQHandler+0x2ae>
 80073b8:	e131      	b.n	800761e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80073ba:	23a4      	movs	r3, #164	; 0xa4
 80073bc:	18fb      	adds	r3, r7, r3
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2210      	movs	r2, #16
 80073c2:	4013      	ands	r3, r2
 80073c4:	d100      	bne.n	80073c8 <HAL_UART_IRQHandler+0x2bc>
 80073c6:	e12a      	b.n	800761e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80073c8:	23a0      	movs	r3, #160	; 0xa0
 80073ca:	18fb      	adds	r3, r7, r3
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2210      	movs	r2, #16
 80073d0:	4013      	ands	r3, r2
 80073d2:	d100      	bne.n	80073d6 <HAL_UART_IRQHandler+0x2ca>
 80073d4:	e123      	b.n	800761e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2210      	movs	r2, #16
 80073dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	2240      	movs	r2, #64	; 0x40
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b40      	cmp	r3, #64	; 0x40
 80073ea:	d000      	beq.n	80073ee <HAL_UART_IRQHandler+0x2e2>
 80073ec:	e09b      	b.n	8007526 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	217e      	movs	r1, #126	; 0x7e
 80073f8:	187b      	adds	r3, r7, r1
 80073fa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80073fc:	187b      	adds	r3, r7, r1
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d100      	bne.n	8007406 <HAL_UART_IRQHandler+0x2fa>
 8007404:	e14e      	b.n	80076a4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2258      	movs	r2, #88	; 0x58
 800740a:	5a9b      	ldrh	r3, [r3, r2]
 800740c:	187a      	adds	r2, r7, r1
 800740e:	8812      	ldrh	r2, [r2, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d300      	bcc.n	8007416 <HAL_UART_IRQHandler+0x30a>
 8007414:	e146      	b.n	80076a4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	187a      	adds	r2, r7, r1
 800741a:	215a      	movs	r1, #90	; 0x5a
 800741c:	8812      	ldrh	r2, [r2, #0]
 800741e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	2b20      	cmp	r3, #32
 8007428:	d06e      	beq.n	8007508 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800742a:	f3ef 8310 	mrs	r3, PRIMASK
 800742e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007432:	67bb      	str	r3, [r7, #120]	; 0x78
 8007434:	2301      	movs	r3, #1
 8007436:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743a:	f383 8810 	msr	PRIMASK, r3
}
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	499a      	ldr	r1, [pc, #616]	; (80076b4 <HAL_UART_IRQHandler+0x5a8>)
 800744c:	400a      	ands	r2, r1
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007452:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007456:	f383 8810 	msr	PRIMASK, r3
}
 800745a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800745c:	f3ef 8310 	mrs	r3, PRIMASK
 8007460:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007464:	677b      	str	r3, [r7, #116]	; 0x74
 8007466:	2301      	movs	r3, #1
 8007468:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800746a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800746c:	f383 8810 	msr	PRIMASK, r3
}
 8007470:	46c0      	nop			; (mov r8, r8)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2101      	movs	r1, #1
 800747e:	438a      	bics	r2, r1
 8007480:	609a      	str	r2, [r3, #8]
 8007482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007484:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007488:	f383 8810 	msr	PRIMASK, r3
}
 800748c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800748e:	f3ef 8310 	mrs	r3, PRIMASK
 8007492:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007494:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007496:	673b      	str	r3, [r7, #112]	; 0x70
 8007498:	2301      	movs	r3, #1
 800749a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800749c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800749e:	f383 8810 	msr	PRIMASK, r3
}
 80074a2:	46c0      	nop			; (mov r8, r8)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	689a      	ldr	r2, [r3, #8]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2140      	movs	r1, #64	; 0x40
 80074b0:	438a      	bics	r2, r1
 80074b2:	609a      	str	r2, [r3, #8]
 80074b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074b6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ba:	f383 8810 	msr	PRIMASK, r3
}
 80074be:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074cc:	f3ef 8310 	mrs	r3, PRIMASK
 80074d0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80074d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074d6:	2301      	movs	r3, #1
 80074d8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074dc:	f383 8810 	msr	PRIMASK, r3
}
 80074e0:	46c0      	nop			; (mov r8, r8)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2110      	movs	r1, #16
 80074ee:	438a      	bics	r2, r1
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f8:	f383 8810 	msr	PRIMASK, r3
}
 80074fc:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007502:	0018      	movs	r0, r3
 8007504:	f7fd fef6 	bl	80052f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2258      	movs	r2, #88	; 0x58
 800750c:	5a9a      	ldrh	r2, [r3, r2]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	215a      	movs	r1, #90	; 0x5a
 8007512:	5a5b      	ldrh	r3, [r3, r1]
 8007514:	b29b      	uxth	r3, r3
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	b29a      	uxth	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	0011      	movs	r1, r2
 800751e:	0018      	movs	r0, r3
 8007520:	f000 f8dc 	bl	80076dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007524:	e0be      	b.n	80076a4 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2258      	movs	r2, #88	; 0x58
 800752a:	5a99      	ldrh	r1, [r3, r2]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	225a      	movs	r2, #90	; 0x5a
 8007530:	5a9b      	ldrh	r3, [r3, r2]
 8007532:	b29a      	uxth	r2, r3
 8007534:	208e      	movs	r0, #142	; 0x8e
 8007536:	183b      	adds	r3, r7, r0
 8007538:	1a8a      	subs	r2, r1, r2
 800753a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	225a      	movs	r2, #90	; 0x5a
 8007540:	5a9b      	ldrh	r3, [r3, r2]
 8007542:	b29b      	uxth	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d100      	bne.n	800754a <HAL_UART_IRQHandler+0x43e>
 8007548:	e0ae      	b.n	80076a8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800754a:	183b      	adds	r3, r7, r0
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d100      	bne.n	8007554 <HAL_UART_IRQHandler+0x448>
 8007552:	e0a9      	b.n	80076a8 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007554:	f3ef 8310 	mrs	r3, PRIMASK
 8007558:	60fb      	str	r3, [r7, #12]
  return(result);
 800755a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800755c:	2488      	movs	r4, #136	; 0x88
 800755e:	193a      	adds	r2, r7, r4
 8007560:	6013      	str	r3, [r2, #0]
 8007562:	2301      	movs	r3, #1
 8007564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f383 8810 	msr	PRIMASK, r3
}
 800756c:	46c0      	nop			; (mov r8, r8)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	494f      	ldr	r1, [pc, #316]	; (80076b8 <HAL_UART_IRQHandler+0x5ac>)
 800757a:	400a      	ands	r2, r1
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	193b      	adds	r3, r7, r4
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f383 8810 	msr	PRIMASK, r3
}
 800758a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800758c:	f3ef 8310 	mrs	r3, PRIMASK
 8007590:	61bb      	str	r3, [r7, #24]
  return(result);
 8007592:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007594:	2484      	movs	r4, #132	; 0x84
 8007596:	193a      	adds	r2, r7, r4
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	2301      	movs	r3, #1
 800759c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	f383 8810 	msr	PRIMASK, r3
}
 80075a4:	46c0      	nop			; (mov r8, r8)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2101      	movs	r1, #1
 80075b2:	438a      	bics	r2, r1
 80075b4:	609a      	str	r2, [r3, #8]
 80075b6:	193b      	adds	r3, r7, r4
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	f383 8810 	msr	PRIMASK, r3
}
 80075c2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2220      	movs	r2, #32
 80075c8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d6:	f3ef 8310 	mrs	r3, PRIMASK
 80075da:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075de:	2480      	movs	r4, #128	; 0x80
 80075e0:	193a      	adds	r2, r7, r4
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	2301      	movs	r3, #1
 80075e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ea:	f383 8810 	msr	PRIMASK, r3
}
 80075ee:	46c0      	nop			; (mov r8, r8)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2110      	movs	r1, #16
 80075fc:	438a      	bics	r2, r1
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	193b      	adds	r3, r7, r4
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007608:	f383 8810 	msr	PRIMASK, r3
}
 800760c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800760e:	183b      	adds	r3, r7, r0
 8007610:	881a      	ldrh	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	0011      	movs	r1, r2
 8007616:	0018      	movs	r0, r3
 8007618:	f000 f860 	bl	80076dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800761c:	e044      	b.n	80076a8 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800761e:	23a4      	movs	r3, #164	; 0xa4
 8007620:	18fb      	adds	r3, r7, r3
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	2380      	movs	r3, #128	; 0x80
 8007626:	035b      	lsls	r3, r3, #13
 8007628:	4013      	ands	r3, r2
 800762a:	d010      	beq.n	800764e <HAL_UART_IRQHandler+0x542>
 800762c:	239c      	movs	r3, #156	; 0x9c
 800762e:	18fb      	adds	r3, r7, r3
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	2380      	movs	r3, #128	; 0x80
 8007634:	03db      	lsls	r3, r3, #15
 8007636:	4013      	ands	r3, r2
 8007638:	d009      	beq.n	800764e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2280      	movs	r2, #128	; 0x80
 8007640:	0352      	lsls	r2, r2, #13
 8007642:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	0018      	movs	r0, r3
 8007648:	f000 fdfc 	bl	8008244 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800764c:	e02f      	b.n	80076ae <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800764e:	23a4      	movs	r3, #164	; 0xa4
 8007650:	18fb      	adds	r3, r7, r3
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2280      	movs	r2, #128	; 0x80
 8007656:	4013      	ands	r3, r2
 8007658:	d00f      	beq.n	800767a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800765a:	23a0      	movs	r3, #160	; 0xa0
 800765c:	18fb      	adds	r3, r7, r3
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2280      	movs	r2, #128	; 0x80
 8007662:	4013      	ands	r3, r2
 8007664:	d009      	beq.n	800767a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800766a:	2b00      	cmp	r3, #0
 800766c:	d01e      	beq.n	80076ac <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	0010      	movs	r0, r2
 8007676:	4798      	blx	r3
    }
    return;
 8007678:	e018      	b.n	80076ac <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800767a:	23a4      	movs	r3, #164	; 0xa4
 800767c:	18fb      	adds	r3, r7, r3
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2240      	movs	r2, #64	; 0x40
 8007682:	4013      	ands	r3, r2
 8007684:	d013      	beq.n	80076ae <HAL_UART_IRQHandler+0x5a2>
 8007686:	23a0      	movs	r3, #160	; 0xa0
 8007688:	18fb      	adds	r3, r7, r3
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2240      	movs	r2, #64	; 0x40
 800768e:	4013      	ands	r3, r2
 8007690:	d00d      	beq.n	80076ae <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	0018      	movs	r0, r3
 8007696:	f000 fc42 	bl	8007f1e <UART_EndTransmit_IT>
    return;
 800769a:	e008      	b.n	80076ae <HAL_UART_IRQHandler+0x5a2>
      return;
 800769c:	46c0      	nop			; (mov r8, r8)
 800769e:	e006      	b.n	80076ae <HAL_UART_IRQHandler+0x5a2>
    return;
 80076a0:	46c0      	nop			; (mov r8, r8)
 80076a2:	e004      	b.n	80076ae <HAL_UART_IRQHandler+0x5a2>
      return;
 80076a4:	46c0      	nop			; (mov r8, r8)
 80076a6:	e002      	b.n	80076ae <HAL_UART_IRQHandler+0x5a2>
      return;
 80076a8:	46c0      	nop			; (mov r8, r8)
 80076aa:	e000      	b.n	80076ae <HAL_UART_IRQHandler+0x5a2>
    return;
 80076ac:	46c0      	nop			; (mov r8, r8)
  }

}
 80076ae:	46bd      	mov	sp, r7
 80076b0:	b02b      	add	sp, #172	; 0xac
 80076b2:	bd90      	pop	{r4, r7, pc}
 80076b4:	fffffeff 	.word	0xfffffeff
 80076b8:	fffffedf 	.word	0xfffffedf

080076bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80076c4:	46c0      	nop			; (mov r8, r8)
 80076c6:	46bd      	mov	sp, r7
 80076c8:	b002      	add	sp, #8
 80076ca:	bd80      	pop	{r7, pc}

080076cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076d4:	46c0      	nop			; (mov r8, r8)
 80076d6:	46bd      	mov	sp, r7
 80076d8:	b002      	add	sp, #8
 80076da:	bd80      	pop	{r7, pc}

080076dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	000a      	movs	r2, r1
 80076e6:	1cbb      	adds	r3, r7, #2
 80076e8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	46bd      	mov	sp, r7
 80076ee:	b002      	add	sp, #8
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076fc:	231e      	movs	r3, #30
 80076fe:	18fb      	adds	r3, r7, r3
 8007700:	2200      	movs	r2, #0
 8007702:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	431a      	orrs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	4313      	orrs	r3, r2
 800771a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a8d      	ldr	r2, [pc, #564]	; (8007958 <UART_SetConfig+0x264>)
 8007724:	4013      	ands	r3, r2
 8007726:	0019      	movs	r1, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	430a      	orrs	r2, r1
 8007730:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	4a88      	ldr	r2, [pc, #544]	; (800795c <UART_SetConfig+0x268>)
 800773a:	4013      	ands	r3, r2
 800773c:	0019      	movs	r1, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	4313      	orrs	r3, r2
 8007758:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	4a7f      	ldr	r2, [pc, #508]	; (8007960 <UART_SetConfig+0x26c>)
 8007762:	4013      	ands	r3, r2
 8007764:	0019      	movs	r1, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	430a      	orrs	r2, r1
 800776e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a7b      	ldr	r2, [pc, #492]	; (8007964 <UART_SetConfig+0x270>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d127      	bne.n	80077ca <UART_SetConfig+0xd6>
 800777a:	4b7b      	ldr	r3, [pc, #492]	; (8007968 <UART_SetConfig+0x274>)
 800777c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777e:	2203      	movs	r2, #3
 8007780:	4013      	ands	r3, r2
 8007782:	2b03      	cmp	r3, #3
 8007784:	d00d      	beq.n	80077a2 <UART_SetConfig+0xae>
 8007786:	d81b      	bhi.n	80077c0 <UART_SetConfig+0xcc>
 8007788:	2b02      	cmp	r3, #2
 800778a:	d014      	beq.n	80077b6 <UART_SetConfig+0xc2>
 800778c:	d818      	bhi.n	80077c0 <UART_SetConfig+0xcc>
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <UART_SetConfig+0xa4>
 8007792:	2b01      	cmp	r3, #1
 8007794:	d00a      	beq.n	80077ac <UART_SetConfig+0xb8>
 8007796:	e013      	b.n	80077c0 <UART_SetConfig+0xcc>
 8007798:	231f      	movs	r3, #31
 800779a:	18fb      	adds	r3, r7, r3
 800779c:	2200      	movs	r2, #0
 800779e:	701a      	strb	r2, [r3, #0]
 80077a0:	e021      	b.n	80077e6 <UART_SetConfig+0xf2>
 80077a2:	231f      	movs	r3, #31
 80077a4:	18fb      	adds	r3, r7, r3
 80077a6:	2202      	movs	r2, #2
 80077a8:	701a      	strb	r2, [r3, #0]
 80077aa:	e01c      	b.n	80077e6 <UART_SetConfig+0xf2>
 80077ac:	231f      	movs	r3, #31
 80077ae:	18fb      	adds	r3, r7, r3
 80077b0:	2204      	movs	r2, #4
 80077b2:	701a      	strb	r2, [r3, #0]
 80077b4:	e017      	b.n	80077e6 <UART_SetConfig+0xf2>
 80077b6:	231f      	movs	r3, #31
 80077b8:	18fb      	adds	r3, r7, r3
 80077ba:	2208      	movs	r2, #8
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	e012      	b.n	80077e6 <UART_SetConfig+0xf2>
 80077c0:	231f      	movs	r3, #31
 80077c2:	18fb      	adds	r3, r7, r3
 80077c4:	2210      	movs	r2, #16
 80077c6:	701a      	strb	r2, [r3, #0]
 80077c8:	e00d      	b.n	80077e6 <UART_SetConfig+0xf2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a67      	ldr	r2, [pc, #412]	; (800796c <UART_SetConfig+0x278>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d104      	bne.n	80077de <UART_SetConfig+0xea>
 80077d4:	231f      	movs	r3, #31
 80077d6:	18fb      	adds	r3, r7, r3
 80077d8:	2200      	movs	r2, #0
 80077da:	701a      	strb	r2, [r3, #0]
 80077dc:	e003      	b.n	80077e6 <UART_SetConfig+0xf2>
 80077de:	231f      	movs	r3, #31
 80077e0:	18fb      	adds	r3, r7, r3
 80077e2:	2210      	movs	r2, #16
 80077e4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	69da      	ldr	r2, [r3, #28]
 80077ea:	2380      	movs	r3, #128	; 0x80
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d15d      	bne.n	80078ae <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80077f2:	231f      	movs	r3, #31
 80077f4:	18fb      	adds	r3, r7, r3
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	2b08      	cmp	r3, #8
 80077fa:	d015      	beq.n	8007828 <UART_SetConfig+0x134>
 80077fc:	dc18      	bgt.n	8007830 <UART_SetConfig+0x13c>
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d00d      	beq.n	800781e <UART_SetConfig+0x12a>
 8007802:	dc15      	bgt.n	8007830 <UART_SetConfig+0x13c>
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <UART_SetConfig+0x11a>
 8007808:	2b02      	cmp	r3, #2
 800780a:	d005      	beq.n	8007818 <UART_SetConfig+0x124>
 800780c:	e010      	b.n	8007830 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800780e:	f7ff fa2b 	bl	8006c68 <HAL_RCC_GetPCLK1Freq>
 8007812:	0003      	movs	r3, r0
 8007814:	61bb      	str	r3, [r7, #24]
        break;
 8007816:	e012      	b.n	800783e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007818:	4b55      	ldr	r3, [pc, #340]	; (8007970 <UART_SetConfig+0x27c>)
 800781a:	61bb      	str	r3, [r7, #24]
        break;
 800781c:	e00f      	b.n	800783e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800781e:	f7ff f9b5 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 8007822:	0003      	movs	r3, r0
 8007824:	61bb      	str	r3, [r7, #24]
        break;
 8007826:	e00a      	b.n	800783e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007828:	2380      	movs	r3, #128	; 0x80
 800782a:	021b      	lsls	r3, r3, #8
 800782c:	61bb      	str	r3, [r7, #24]
        break;
 800782e:	e006      	b.n	800783e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8007830:	2300      	movs	r3, #0
 8007832:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007834:	231e      	movs	r3, #30
 8007836:	18fb      	adds	r3, r7, r3
 8007838:	2201      	movs	r2, #1
 800783a:	701a      	strb	r2, [r3, #0]
        break;
 800783c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d100      	bne.n	8007846 <UART_SetConfig+0x152>
 8007844:	e07b      	b.n	800793e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	005a      	lsls	r2, r3, #1
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	085b      	lsrs	r3, r3, #1
 8007850:	18d2      	adds	r2, r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	0019      	movs	r1, r3
 8007858:	0010      	movs	r0, r2
 800785a:	f7f8 fc71 	bl	8000140 <__udivsi3>
 800785e:	0003      	movs	r3, r0
 8007860:	b29b      	uxth	r3, r3
 8007862:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	2b0f      	cmp	r3, #15
 8007868:	d91c      	bls.n	80078a4 <UART_SetConfig+0x1b0>
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	2380      	movs	r3, #128	; 0x80
 800786e:	025b      	lsls	r3, r3, #9
 8007870:	429a      	cmp	r2, r3
 8007872:	d217      	bcs.n	80078a4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	b29a      	uxth	r2, r3
 8007878:	200e      	movs	r0, #14
 800787a:	183b      	adds	r3, r7, r0
 800787c:	210f      	movs	r1, #15
 800787e:	438a      	bics	r2, r1
 8007880:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	085b      	lsrs	r3, r3, #1
 8007886:	b29b      	uxth	r3, r3
 8007888:	2207      	movs	r2, #7
 800788a:	4013      	ands	r3, r2
 800788c:	b299      	uxth	r1, r3
 800788e:	183b      	adds	r3, r7, r0
 8007890:	183a      	adds	r2, r7, r0
 8007892:	8812      	ldrh	r2, [r2, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	183a      	adds	r2, r7, r0
 800789e:	8812      	ldrh	r2, [r2, #0]
 80078a0:	60da      	str	r2, [r3, #12]
 80078a2:	e04c      	b.n	800793e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80078a4:	231e      	movs	r3, #30
 80078a6:	18fb      	adds	r3, r7, r3
 80078a8:	2201      	movs	r2, #1
 80078aa:	701a      	strb	r2, [r3, #0]
 80078ac:	e047      	b.n	800793e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078ae:	231f      	movs	r3, #31
 80078b0:	18fb      	adds	r3, r7, r3
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d015      	beq.n	80078e4 <UART_SetConfig+0x1f0>
 80078b8:	dc18      	bgt.n	80078ec <UART_SetConfig+0x1f8>
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	d00d      	beq.n	80078da <UART_SetConfig+0x1e6>
 80078be:	dc15      	bgt.n	80078ec <UART_SetConfig+0x1f8>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <UART_SetConfig+0x1d6>
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d005      	beq.n	80078d4 <UART_SetConfig+0x1e0>
 80078c8:	e010      	b.n	80078ec <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078ca:	f7ff f9cd 	bl	8006c68 <HAL_RCC_GetPCLK1Freq>
 80078ce:	0003      	movs	r3, r0
 80078d0:	61bb      	str	r3, [r7, #24]
        break;
 80078d2:	e012      	b.n	80078fa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078d4:	4b26      	ldr	r3, [pc, #152]	; (8007970 <UART_SetConfig+0x27c>)
 80078d6:	61bb      	str	r3, [r7, #24]
        break;
 80078d8:	e00f      	b.n	80078fa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078da:	f7ff f957 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 80078de:	0003      	movs	r3, r0
 80078e0:	61bb      	str	r3, [r7, #24]
        break;
 80078e2:	e00a      	b.n	80078fa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078e4:	2380      	movs	r3, #128	; 0x80
 80078e6:	021b      	lsls	r3, r3, #8
 80078e8:	61bb      	str	r3, [r7, #24]
        break;
 80078ea:	e006      	b.n	80078fa <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078f0:	231e      	movs	r3, #30
 80078f2:	18fb      	adds	r3, r7, r3
 80078f4:	2201      	movs	r2, #1
 80078f6:	701a      	strb	r2, [r3, #0]
        break;
 80078f8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d01e      	beq.n	800793e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	085a      	lsrs	r2, r3, #1
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	18d2      	adds	r2, r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	0019      	movs	r1, r3
 8007910:	0010      	movs	r0, r2
 8007912:	f7f8 fc15 	bl	8000140 <__udivsi3>
 8007916:	0003      	movs	r3, r0
 8007918:	b29b      	uxth	r3, r3
 800791a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	2b0f      	cmp	r3, #15
 8007920:	d909      	bls.n	8007936 <UART_SetConfig+0x242>
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	2380      	movs	r3, #128	; 0x80
 8007926:	025b      	lsls	r3, r3, #9
 8007928:	429a      	cmp	r2, r3
 800792a:	d204      	bcs.n	8007936 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	60da      	str	r2, [r3, #12]
 8007934:	e003      	b.n	800793e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8007936:	231e      	movs	r3, #30
 8007938:	18fb      	adds	r3, r7, r3
 800793a:	2201      	movs	r2, #1
 800793c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800794a:	231e      	movs	r3, #30
 800794c:	18fb      	adds	r3, r7, r3
 800794e:	781b      	ldrb	r3, [r3, #0]
}
 8007950:	0018      	movs	r0, r3
 8007952:	46bd      	mov	sp, r7
 8007954:	b008      	add	sp, #32
 8007956:	bd80      	pop	{r7, pc}
 8007958:	ffff69f3 	.word	0xffff69f3
 800795c:	ffffcfff 	.word	0xffffcfff
 8007960:	fffff4ff 	.word	0xfffff4ff
 8007964:	40013800 	.word	0x40013800
 8007968:	40021000 	.word	0x40021000
 800796c:	40004400 	.word	0x40004400
 8007970:	007a1200 	.word	0x007a1200

08007974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	2201      	movs	r2, #1
 8007982:	4013      	ands	r3, r2
 8007984:	d00b      	beq.n	800799e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	4a4a      	ldr	r2, [pc, #296]	; (8007ab8 <UART_AdvFeatureConfig+0x144>)
 800798e:	4013      	ands	r3, r2
 8007990:	0019      	movs	r1, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	2202      	movs	r2, #2
 80079a4:	4013      	ands	r3, r2
 80079a6:	d00b      	beq.n	80079c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	4a43      	ldr	r2, [pc, #268]	; (8007abc <UART_AdvFeatureConfig+0x148>)
 80079b0:	4013      	ands	r3, r2
 80079b2:	0019      	movs	r1, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	2204      	movs	r2, #4
 80079c6:	4013      	ands	r3, r2
 80079c8:	d00b      	beq.n	80079e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	4a3b      	ldr	r2, [pc, #236]	; (8007ac0 <UART_AdvFeatureConfig+0x14c>)
 80079d2:	4013      	ands	r3, r2
 80079d4:	0019      	movs	r1, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	2208      	movs	r2, #8
 80079e8:	4013      	ands	r3, r2
 80079ea:	d00b      	beq.n	8007a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	4a34      	ldr	r2, [pc, #208]	; (8007ac4 <UART_AdvFeatureConfig+0x150>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	0019      	movs	r1, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	2210      	movs	r2, #16
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	d00b      	beq.n	8007a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	4a2c      	ldr	r2, [pc, #176]	; (8007ac8 <UART_AdvFeatureConfig+0x154>)
 8007a16:	4013      	ands	r3, r2
 8007a18:	0019      	movs	r1, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	d00b      	beq.n	8007a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	4a25      	ldr	r2, [pc, #148]	; (8007acc <UART_AdvFeatureConfig+0x158>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	0019      	movs	r1, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	2240      	movs	r2, #64	; 0x40
 8007a4e:	4013      	ands	r3, r2
 8007a50:	d01d      	beq.n	8007a8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	4a1d      	ldr	r2, [pc, #116]	; (8007ad0 <UART_AdvFeatureConfig+0x15c>)
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	0019      	movs	r1, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a6e:	2380      	movs	r3, #128	; 0x80
 8007a70:	035b      	lsls	r3, r3, #13
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d10b      	bne.n	8007a8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	4a15      	ldr	r2, [pc, #84]	; (8007ad4 <UART_AdvFeatureConfig+0x160>)
 8007a7e:	4013      	ands	r3, r2
 8007a80:	0019      	movs	r1, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	2280      	movs	r2, #128	; 0x80
 8007a94:	4013      	ands	r3, r2
 8007a96:	d00b      	beq.n	8007ab0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	4a0e      	ldr	r2, [pc, #56]	; (8007ad8 <UART_AdvFeatureConfig+0x164>)
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	0019      	movs	r1, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	605a      	str	r2, [r3, #4]
  }
}
 8007ab0:	46c0      	nop			; (mov r8, r8)
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	b002      	add	sp, #8
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	fffdffff 	.word	0xfffdffff
 8007abc:	fffeffff 	.word	0xfffeffff
 8007ac0:	fffbffff 	.word	0xfffbffff
 8007ac4:	ffff7fff 	.word	0xffff7fff
 8007ac8:	ffffefff 	.word	0xffffefff
 8007acc:	ffffdfff 	.word	0xffffdfff
 8007ad0:	ffefffff 	.word	0xffefffff
 8007ad4:	ff9fffff 	.word	0xff9fffff
 8007ad8:	fff7ffff 	.word	0xfff7ffff

08007adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2280      	movs	r2, #128	; 0x80
 8007ae8:	2100      	movs	r1, #0
 8007aea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007aec:	f7fc fe7c 	bl	80047e8 <HAL_GetTick>
 8007af0:	0003      	movs	r3, r0
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2208      	movs	r2, #8
 8007afc:	4013      	ands	r3, r2
 8007afe:	2b08      	cmp	r3, #8
 8007b00:	d10c      	bne.n	8007b1c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2280      	movs	r2, #128	; 0x80
 8007b06:	0391      	lsls	r1, r2, #14
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	4a17      	ldr	r2, [pc, #92]	; (8007b68 <UART_CheckIdleState+0x8c>)
 8007b0c:	9200      	str	r2, [sp, #0]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f000 f82c 	bl	8007b6c <UART_WaitOnFlagUntilTimeout>
 8007b14:	1e03      	subs	r3, r0, #0
 8007b16:	d001      	beq.n	8007b1c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e021      	b.n	8007b60 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2204      	movs	r2, #4
 8007b24:	4013      	ands	r3, r2
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d10c      	bne.n	8007b44 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2280      	movs	r2, #128	; 0x80
 8007b2e:	03d1      	lsls	r1, r2, #15
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	4a0d      	ldr	r2, [pc, #52]	; (8007b68 <UART_CheckIdleState+0x8c>)
 8007b34:	9200      	str	r2, [sp, #0]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f000 f818 	bl	8007b6c <UART_WaitOnFlagUntilTimeout>
 8007b3c:	1e03      	subs	r3, r0, #0
 8007b3e:	d001      	beq.n	8007b44 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e00d      	b.n	8007b60 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2220      	movs	r2, #32
 8007b48:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2274      	movs	r2, #116	; 0x74
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	0018      	movs	r0, r3
 8007b62:	46bd      	mov	sp, r7
 8007b64:	b004      	add	sp, #16
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	01ffffff 	.word	0x01ffffff

08007b6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b094      	sub	sp, #80	; 0x50
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	1dfb      	adds	r3, r7, #7
 8007b7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b7c:	e0a3      	b.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b80:	3301      	adds	r3, #1
 8007b82:	d100      	bne.n	8007b86 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007b84:	e09f      	b.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b86:	f7fc fe2f 	bl	80047e8 <HAL_GetTick>
 8007b8a:	0002      	movs	r2, r0
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d302      	bcc.n	8007b9c <UART_WaitOnFlagUntilTimeout+0x30>
 8007b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d13d      	bne.n	8007c18 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8007ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	f383 8810 	msr	PRIMASK, r3
}
 8007bb0:	46c0      	nop			; (mov r8, r8)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	494c      	ldr	r1, [pc, #304]	; (8007cf0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007bbe:	400a      	ands	r2, r1
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bc4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	f383 8810 	msr	PRIMASK, r3
}
 8007bcc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bce:	f3ef 8310 	mrs	r3, PRIMASK
 8007bd2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8007bd8:	2301      	movs	r3, #1
 8007bda:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	f383 8810 	msr	PRIMASK, r3
}
 8007be2:	46c0      	nop			; (mov r8, r8)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2101      	movs	r1, #1
 8007bf0:	438a      	bics	r2, r1
 8007bf2:	609a      	str	r2, [r3, #8]
 8007bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bfa:	f383 8810 	msr	PRIMASK, r3
}
 8007bfe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2220      	movs	r2, #32
 8007c04:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2274      	movs	r2, #116	; 0x74
 8007c10:	2100      	movs	r1, #0
 8007c12:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e067      	b.n	8007ce8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2204      	movs	r2, #4
 8007c20:	4013      	ands	r3, r2
 8007c22:	d050      	beq.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	69da      	ldr	r2, [r3, #28]
 8007c2a:	2380      	movs	r3, #128	; 0x80
 8007c2c:	011b      	lsls	r3, r3, #4
 8007c2e:	401a      	ands	r2, r3
 8007c30:	2380      	movs	r3, #128	; 0x80
 8007c32:	011b      	lsls	r3, r3, #4
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d146      	bne.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2280      	movs	r2, #128	; 0x80
 8007c3e:	0112      	lsls	r2, r2, #4
 8007c40:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c42:	f3ef 8310 	mrs	r3, PRIMASK
 8007c46:	613b      	str	r3, [r7, #16]
  return(result);
 8007c48:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f383 8810 	msr	PRIMASK, r3
}
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4923      	ldr	r1, [pc, #140]	; (8007cf0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007c64:	400a      	ands	r2, r1
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	f383 8810 	msr	PRIMASK, r3
}
 8007c72:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c74:	f3ef 8310 	mrs	r3, PRIMASK
 8007c78:	61fb      	str	r3, [r7, #28]
  return(result);
 8007c7a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c7e:	2301      	movs	r3, #1
 8007c80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	f383 8810 	msr	PRIMASK, r3
}
 8007c88:	46c0      	nop			; (mov r8, r8)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2101      	movs	r1, #1
 8007c96:	438a      	bics	r2, r1
 8007c98:	609a      	str	r2, [r3, #8]
 8007c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	f383 8810 	msr	PRIMASK, r3
}
 8007ca4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2280      	movs	r2, #128	; 0x80
 8007cb6:	2120      	movs	r1, #32
 8007cb8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2274      	movs	r2, #116	; 0x74
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e010      	b.n	8007ce8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	425a      	negs	r2, r3
 8007cd6:	4153      	adcs	r3, r2
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	001a      	movs	r2, r3
 8007cdc:	1dfb      	adds	r3, r7, #7
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d100      	bne.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007ce4:	e74b      	b.n	8007b7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	0018      	movs	r0, r3
 8007cea:	46bd      	mov	sp, r7
 8007cec:	b014      	add	sp, #80	; 0x50
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	fffffe5f 	.word	0xfffffe5f

08007cf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08c      	sub	sp, #48	; 0x30
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	1dbb      	adds	r3, r7, #6
 8007d00:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	1dba      	adds	r2, r7, #6
 8007d0c:	2158      	movs	r1, #88	; 0x58
 8007d0e:	8812      	ldrh	r2, [r2, #0]
 8007d10:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	1dba      	adds	r2, r7, #6
 8007d16:	215a      	movs	r1, #90	; 0x5a
 8007d18:	8812      	ldrh	r2, [r2, #0]
 8007d1a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	689a      	ldr	r2, [r3, #8]
 8007d26:	2380      	movs	r3, #128	; 0x80
 8007d28:	015b      	lsls	r3, r3, #5
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d10d      	bne.n	8007d4a <UART_Start_Receive_IT+0x56>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d104      	bne.n	8007d40 <UART_Start_Receive_IT+0x4c>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	225c      	movs	r2, #92	; 0x5c
 8007d3a:	4939      	ldr	r1, [pc, #228]	; (8007e20 <UART_Start_Receive_IT+0x12c>)
 8007d3c:	5299      	strh	r1, [r3, r2]
 8007d3e:	e01a      	b.n	8007d76 <UART_Start_Receive_IT+0x82>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	225c      	movs	r2, #92	; 0x5c
 8007d44:	21ff      	movs	r1, #255	; 0xff
 8007d46:	5299      	strh	r1, [r3, r2]
 8007d48:	e015      	b.n	8007d76 <UART_Start_Receive_IT+0x82>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10d      	bne.n	8007d6e <UART_Start_Receive_IT+0x7a>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d104      	bne.n	8007d64 <UART_Start_Receive_IT+0x70>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	225c      	movs	r2, #92	; 0x5c
 8007d5e:	21ff      	movs	r1, #255	; 0xff
 8007d60:	5299      	strh	r1, [r3, r2]
 8007d62:	e008      	b.n	8007d76 <UART_Start_Receive_IT+0x82>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	225c      	movs	r2, #92	; 0x5c
 8007d68:	217f      	movs	r1, #127	; 0x7f
 8007d6a:	5299      	strh	r1, [r3, r2]
 8007d6c:	e003      	b.n	8007d76 <UART_Start_Receive_IT+0x82>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	225c      	movs	r2, #92	; 0x5c
 8007d72:	2100      	movs	r1, #0
 8007d74:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2280      	movs	r2, #128	; 0x80
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2222      	movs	r2, #34	; 0x22
 8007d82:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d84:	f3ef 8310 	mrs	r3, PRIMASK
 8007d88:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d8a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d8e:	2301      	movs	r3, #1
 8007d90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	f383 8810 	msr	PRIMASK, r3
}
 8007d98:	46c0      	nop			; (mov r8, r8)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689a      	ldr	r2, [r3, #8]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2101      	movs	r1, #1
 8007da6:	430a      	orrs	r2, r1
 8007da8:	609a      	str	r2, [r3, #8]
 8007daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db0:	f383 8810 	msr	PRIMASK, r3
}
 8007db4:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	2380      	movs	r3, #128	; 0x80
 8007dbc:	015b      	lsls	r3, r3, #5
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d107      	bne.n	8007dd2 <UART_Start_Receive_IT+0xde>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d103      	bne.n	8007dd2 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	4a15      	ldr	r2, [pc, #84]	; (8007e24 <UART_Start_Receive_IT+0x130>)
 8007dce:	665a      	str	r2, [r3, #100]	; 0x64
 8007dd0:	e002      	b.n	8007dd8 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	4a14      	ldr	r2, [pc, #80]	; (8007e28 <UART_Start_Receive_IT+0x134>)
 8007dd6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2274      	movs	r2, #116	; 0x74
 8007ddc:	2100      	movs	r1, #0
 8007dde:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007de0:	f3ef 8310 	mrs	r3, PRIMASK
 8007de4:	613b      	str	r3, [r7, #16]
  return(result);
 8007de6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dea:	2301      	movs	r3, #1
 8007dec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f383 8810 	msr	PRIMASK, r3
}
 8007df4:	46c0      	nop			; (mov r8, r8)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2190      	movs	r1, #144	; 0x90
 8007e02:	0049      	lsls	r1, r1, #1
 8007e04:	430a      	orrs	r2, r1
 8007e06:	601a      	str	r2, [r3, #0]
 8007e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	f383 8810 	msr	PRIMASK, r3
}
 8007e12:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	0018      	movs	r0, r3
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	b00c      	add	sp, #48	; 0x30
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	46c0      	nop			; (mov r8, r8)
 8007e20:	000001ff 	.word	0x000001ff
 8007e24:	080080dd 	.word	0x080080dd
 8007e28:	08007f75 	.word	0x08007f75

08007e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08e      	sub	sp, #56	; 0x38
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e34:	f3ef 8310 	mrs	r3, PRIMASK
 8007e38:	617b      	str	r3, [r7, #20]
  return(result);
 8007e3a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e3e:	2301      	movs	r3, #1
 8007e40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	f383 8810 	msr	PRIMASK, r3
}
 8007e48:	46c0      	nop			; (mov r8, r8)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4925      	ldr	r1, [pc, #148]	; (8007eec <UART_EndRxTransfer+0xc0>)
 8007e56:	400a      	ands	r2, r1
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	f383 8810 	msr	PRIMASK, r3
}
 8007e64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e66:	f3ef 8310 	mrs	r3, PRIMASK
 8007e6a:	623b      	str	r3, [r7, #32]
  return(result);
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e70:	2301      	movs	r3, #1
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	f383 8810 	msr	PRIMASK, r3
}
 8007e7a:	46c0      	nop			; (mov r8, r8)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689a      	ldr	r2, [r3, #8]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2101      	movs	r1, #1
 8007e88:	438a      	bics	r2, r1
 8007e8a:	609a      	str	r2, [r3, #8]
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	f383 8810 	msr	PRIMASK, r3
}
 8007e96:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d118      	bne.n	8007ed2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ea4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eaa:	2301      	movs	r3, #1
 8007eac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f383 8810 	msr	PRIMASK, r3
}
 8007eb4:	46c0      	nop			; (mov r8, r8)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2110      	movs	r1, #16
 8007ec2:	438a      	bics	r2, r1
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	f383 8810 	msr	PRIMASK, r3
}
 8007ed0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007ee4:	46c0      	nop			; (mov r8, r8)
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	b00e      	add	sp, #56	; 0x38
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	fffffedf 	.word	0xfffffedf

08007ef0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	225a      	movs	r2, #90	; 0x5a
 8007f02:	2100      	movs	r1, #0
 8007f04:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2252      	movs	r2, #82	; 0x52
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	0018      	movs	r0, r3
 8007f12:	f7ff fbdb 	bl	80076cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f16:	46c0      	nop			; (mov r8, r8)
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	b004      	add	sp, #16
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b086      	sub	sp, #24
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f26:	f3ef 8310 	mrs	r3, PRIMASK
 8007f2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f2e:	617b      	str	r3, [r7, #20]
 8007f30:	2301      	movs	r3, #1
 8007f32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f383 8810 	msr	PRIMASK, r3
}
 8007f3a:	46c0      	nop			; (mov r8, r8)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2140      	movs	r1, #64	; 0x40
 8007f48:	438a      	bics	r2, r1
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f383 8810 	msr	PRIMASK, r3
}
 8007f56:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	0018      	movs	r0, r3
 8007f68:	f7ff fba8 	bl	80076bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f6c:	46c0      	nop			; (mov r8, r8)
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	b006      	add	sp, #24
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b090      	sub	sp, #64	; 0x40
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f7c:	203e      	movs	r0, #62	; 0x3e
 8007f7e:	183b      	adds	r3, r7, r0
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	215c      	movs	r1, #92	; 0x5c
 8007f84:	5a52      	ldrh	r2, [r2, r1]
 8007f86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f8c:	2b22      	cmp	r3, #34	; 0x22
 8007f8e:	d000      	beq.n	8007f92 <UART_RxISR_8BIT+0x1e>
 8007f90:	e095      	b.n	80080be <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	213c      	movs	r1, #60	; 0x3c
 8007f98:	187b      	adds	r3, r7, r1
 8007f9a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007f9c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f9e:	187b      	adds	r3, r7, r1
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	183b      	adds	r3, r7, r0
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	b2d9      	uxtb	r1, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fae:	400a      	ands	r2, r1
 8007fb0:	b2d2      	uxtb	r2, r2
 8007fb2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	225a      	movs	r2, #90	; 0x5a
 8007fc2:	5a9b      	ldrh	r3, [r3, r2]
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	b299      	uxth	r1, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	225a      	movs	r2, #90	; 0x5a
 8007fce:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	225a      	movs	r2, #90	; 0x5a
 8007fd4:	5a9b      	ldrh	r3, [r3, r2]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d178      	bne.n	80080ce <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8007fe0:	61bb      	str	r3, [r7, #24]
  return(result);
 8007fe2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fe4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	f383 8810 	msr	PRIMASK, r3
}
 8007ff0:	46c0      	nop			; (mov r8, r8)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4936      	ldr	r1, [pc, #216]	; (80080d8 <UART_RxISR_8BIT+0x164>)
 8007ffe:	400a      	ands	r2, r1
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008004:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	f383 8810 	msr	PRIMASK, r3
}
 800800c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800800e:	f3ef 8310 	mrs	r3, PRIMASK
 8008012:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008016:	637b      	str	r3, [r7, #52]	; 0x34
 8008018:	2301      	movs	r3, #1
 800801a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801e:	f383 8810 	msr	PRIMASK, r3
}
 8008022:	46c0      	nop			; (mov r8, r8)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689a      	ldr	r2, [r3, #8]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2101      	movs	r1, #1
 8008030:	438a      	bics	r2, r1
 8008032:	609a      	str	r2, [r3, #8]
 8008034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008036:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803a:	f383 8810 	msr	PRIMASK, r3
}
 800803e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2220      	movs	r2, #32
 8008044:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008050:	2b01      	cmp	r3, #1
 8008052:	d12f      	bne.n	80080b4 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800805a:	f3ef 8310 	mrs	r3, PRIMASK
 800805e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008060:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008062:	633b      	str	r3, [r7, #48]	; 0x30
 8008064:	2301      	movs	r3, #1
 8008066:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	f383 8810 	msr	PRIMASK, r3
}
 800806e:	46c0      	nop			; (mov r8, r8)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2110      	movs	r1, #16
 800807c:	438a      	bics	r2, r1
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008082:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f383 8810 	msr	PRIMASK, r3
}
 800808a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	2210      	movs	r2, #16
 8008094:	4013      	ands	r3, r2
 8008096:	2b10      	cmp	r3, #16
 8008098:	d103      	bne.n	80080a2 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2210      	movs	r2, #16
 80080a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2258      	movs	r2, #88	; 0x58
 80080a6:	5a9a      	ldrh	r2, [r3, r2]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	0011      	movs	r1, r2
 80080ac:	0018      	movs	r0, r3
 80080ae:	f7ff fb15 	bl	80076dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080b2:	e00c      	b.n	80080ce <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	0018      	movs	r0, r3
 80080b8:	f7fa fd30 	bl	8002b1c <HAL_UART_RxCpltCallback>
}
 80080bc:	e007      	b.n	80080ce <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	699a      	ldr	r2, [r3, #24]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2108      	movs	r1, #8
 80080ca:	430a      	orrs	r2, r1
 80080cc:	619a      	str	r2, [r3, #24]
}
 80080ce:	46c0      	nop			; (mov r8, r8)
 80080d0:	46bd      	mov	sp, r7
 80080d2:	b010      	add	sp, #64	; 0x40
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	46c0      	nop			; (mov r8, r8)
 80080d8:	fffffedf 	.word	0xfffffedf

080080dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b090      	sub	sp, #64	; 0x40
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80080e4:	203e      	movs	r0, #62	; 0x3e
 80080e6:	183b      	adds	r3, r7, r0
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	215c      	movs	r1, #92	; 0x5c
 80080ec:	5a52      	ldrh	r2, [r2, r1]
 80080ee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080f4:	2b22      	cmp	r3, #34	; 0x22
 80080f6:	d000      	beq.n	80080fa <UART_RxISR_16BIT+0x1e>
 80080f8:	e095      	b.n	8008226 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	213c      	movs	r1, #60	; 0x3c
 8008100:	187b      	adds	r3, r7, r1
 8008102:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8008104:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800810c:	187b      	adds	r3, r7, r1
 800810e:	183a      	adds	r2, r7, r0
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	8812      	ldrh	r2, [r2, #0]
 8008114:	4013      	ands	r3, r2
 8008116:	b29a      	uxth	r2, r3
 8008118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008120:	1c9a      	adds	r2, r3, #2
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	225a      	movs	r2, #90	; 0x5a
 800812a:	5a9b      	ldrh	r3, [r3, r2]
 800812c:	b29b      	uxth	r3, r3
 800812e:	3b01      	subs	r3, #1
 8008130:	b299      	uxth	r1, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	225a      	movs	r2, #90	; 0x5a
 8008136:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	225a      	movs	r2, #90	; 0x5a
 800813c:	5a9b      	ldrh	r3, [r3, r2]
 800813e:	b29b      	uxth	r3, r3
 8008140:	2b00      	cmp	r3, #0
 8008142:	d178      	bne.n	8008236 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008144:	f3ef 8310 	mrs	r3, PRIMASK
 8008148:	617b      	str	r3, [r7, #20]
  return(result);
 800814a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800814c:	637b      	str	r3, [r7, #52]	; 0x34
 800814e:	2301      	movs	r3, #1
 8008150:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	f383 8810 	msr	PRIMASK, r3
}
 8008158:	46c0      	nop			; (mov r8, r8)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4936      	ldr	r1, [pc, #216]	; (8008240 <UART_RxISR_16BIT+0x164>)
 8008166:	400a      	ands	r2, r1
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800816c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	f383 8810 	msr	PRIMASK, r3
}
 8008174:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008176:	f3ef 8310 	mrs	r3, PRIMASK
 800817a:	623b      	str	r3, [r7, #32]
  return(result);
 800817c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817e:	633b      	str	r3, [r7, #48]	; 0x30
 8008180:	2301      	movs	r3, #1
 8008182:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	f383 8810 	msr	PRIMASK, r3
}
 800818a:	46c0      	nop			; (mov r8, r8)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	689a      	ldr	r2, [r3, #8]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2101      	movs	r1, #1
 8008198:	438a      	bics	r2, r1
 800819a:	609a      	str	r2, [r3, #8]
 800819c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a2:	f383 8810 	msr	PRIMASK, r3
}
 80081a6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2220      	movs	r2, #32
 80081ac:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d12f      	bne.n	800821c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081c2:	f3ef 8310 	mrs	r3, PRIMASK
 80081c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80081c8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081cc:	2301      	movs	r3, #1
 80081ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f383 8810 	msr	PRIMASK, r3
}
 80081d6:	46c0      	nop			; (mov r8, r8)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2110      	movs	r1, #16
 80081e4:	438a      	bics	r2, r1
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f383 8810 	msr	PRIMASK, r3
}
 80081f2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	2210      	movs	r2, #16
 80081fc:	4013      	ands	r3, r2
 80081fe:	2b10      	cmp	r3, #16
 8008200:	d103      	bne.n	800820a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2210      	movs	r2, #16
 8008208:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2258      	movs	r2, #88	; 0x58
 800820e:	5a9a      	ldrh	r2, [r3, r2]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	0011      	movs	r1, r2
 8008214:	0018      	movs	r0, r3
 8008216:	f7ff fa61 	bl	80076dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800821a:	e00c      	b.n	8008236 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	0018      	movs	r0, r3
 8008220:	f7fa fc7c 	bl	8002b1c <HAL_UART_RxCpltCallback>
}
 8008224:	e007      	b.n	8008236 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	699a      	ldr	r2, [r3, #24]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2108      	movs	r1, #8
 8008232:	430a      	orrs	r2, r1
 8008234:	619a      	str	r2, [r3, #24]
}
 8008236:	46c0      	nop			; (mov r8, r8)
 8008238:	46bd      	mov	sp, r7
 800823a:	b010      	add	sp, #64	; 0x40
 800823c:	bd80      	pop	{r7, pc}
 800823e:	46c0      	nop			; (mov r8, r8)
 8008240:	fffffedf 	.word	0xfffffedf

08008244 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800824c:	46c0      	nop			; (mov r8, r8)
 800824e:	46bd      	mov	sp, r7
 8008250:	b002      	add	sp, #8
 8008252:	bd80      	pop	{r7, pc}

08008254 <__errno>:
 8008254:	4b01      	ldr	r3, [pc, #4]	; (800825c <__errno+0x8>)
 8008256:	6818      	ldr	r0, [r3, #0]
 8008258:	4770      	bx	lr
 800825a:	46c0      	nop			; (mov r8, r8)
 800825c:	20000030 	.word	0x20000030

08008260 <__libc_init_array>:
 8008260:	b570      	push	{r4, r5, r6, lr}
 8008262:	2600      	movs	r6, #0
 8008264:	4d0c      	ldr	r5, [pc, #48]	; (8008298 <__libc_init_array+0x38>)
 8008266:	4c0d      	ldr	r4, [pc, #52]	; (800829c <__libc_init_array+0x3c>)
 8008268:	1b64      	subs	r4, r4, r5
 800826a:	10a4      	asrs	r4, r4, #2
 800826c:	42a6      	cmp	r6, r4
 800826e:	d109      	bne.n	8008284 <__libc_init_array+0x24>
 8008270:	2600      	movs	r6, #0
 8008272:	f004 fd47 	bl	800cd04 <_init>
 8008276:	4d0a      	ldr	r5, [pc, #40]	; (80082a0 <__libc_init_array+0x40>)
 8008278:	4c0a      	ldr	r4, [pc, #40]	; (80082a4 <__libc_init_array+0x44>)
 800827a:	1b64      	subs	r4, r4, r5
 800827c:	10a4      	asrs	r4, r4, #2
 800827e:	42a6      	cmp	r6, r4
 8008280:	d105      	bne.n	800828e <__libc_init_array+0x2e>
 8008282:	bd70      	pop	{r4, r5, r6, pc}
 8008284:	00b3      	lsls	r3, r6, #2
 8008286:	58eb      	ldr	r3, [r5, r3]
 8008288:	4798      	blx	r3
 800828a:	3601      	adds	r6, #1
 800828c:	e7ee      	b.n	800826c <__libc_init_array+0xc>
 800828e:	00b3      	lsls	r3, r6, #2
 8008290:	58eb      	ldr	r3, [r5, r3]
 8008292:	4798      	blx	r3
 8008294:	3601      	adds	r6, #1
 8008296:	e7f2      	b.n	800827e <__libc_init_array+0x1e>
 8008298:	0800d4bc 	.word	0x0800d4bc
 800829c:	0800d4bc 	.word	0x0800d4bc
 80082a0:	0800d4bc 	.word	0x0800d4bc
 80082a4:	0800d4c0 	.word	0x0800d4c0

080082a8 <memset>:
 80082a8:	0003      	movs	r3, r0
 80082aa:	1882      	adds	r2, r0, r2
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d100      	bne.n	80082b2 <memset+0xa>
 80082b0:	4770      	bx	lr
 80082b2:	7019      	strb	r1, [r3, #0]
 80082b4:	3301      	adds	r3, #1
 80082b6:	e7f9      	b.n	80082ac <memset+0x4>

080082b8 <__cvt>:
 80082b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ba:	001e      	movs	r6, r3
 80082bc:	2300      	movs	r3, #0
 80082be:	0014      	movs	r4, r2
 80082c0:	b08b      	sub	sp, #44	; 0x2c
 80082c2:	429e      	cmp	r6, r3
 80082c4:	da04      	bge.n	80082d0 <__cvt+0x18>
 80082c6:	2180      	movs	r1, #128	; 0x80
 80082c8:	0609      	lsls	r1, r1, #24
 80082ca:	1873      	adds	r3, r6, r1
 80082cc:	001e      	movs	r6, r3
 80082ce:	232d      	movs	r3, #45	; 0x2d
 80082d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80082d4:	7013      	strb	r3, [r2, #0]
 80082d6:	2320      	movs	r3, #32
 80082d8:	2203      	movs	r2, #3
 80082da:	439f      	bics	r7, r3
 80082dc:	2f46      	cmp	r7, #70	; 0x46
 80082de:	d007      	beq.n	80082f0 <__cvt+0x38>
 80082e0:	003b      	movs	r3, r7
 80082e2:	3b45      	subs	r3, #69	; 0x45
 80082e4:	4259      	negs	r1, r3
 80082e6:	414b      	adcs	r3, r1
 80082e8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80082ea:	3a01      	subs	r2, #1
 80082ec:	18cb      	adds	r3, r1, r3
 80082ee:	9310      	str	r3, [sp, #64]	; 0x40
 80082f0:	ab09      	add	r3, sp, #36	; 0x24
 80082f2:	9304      	str	r3, [sp, #16]
 80082f4:	ab08      	add	r3, sp, #32
 80082f6:	9303      	str	r3, [sp, #12]
 80082f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082fa:	9200      	str	r2, [sp, #0]
 80082fc:	9302      	str	r3, [sp, #8]
 80082fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008300:	0022      	movs	r2, r4
 8008302:	9301      	str	r3, [sp, #4]
 8008304:	0033      	movs	r3, r6
 8008306:	f001 fdc3 	bl	8009e90 <_dtoa_r>
 800830a:	0005      	movs	r5, r0
 800830c:	2f47      	cmp	r7, #71	; 0x47
 800830e:	d102      	bne.n	8008316 <__cvt+0x5e>
 8008310:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008312:	07db      	lsls	r3, r3, #31
 8008314:	d528      	bpl.n	8008368 <__cvt+0xb0>
 8008316:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008318:	18eb      	adds	r3, r5, r3
 800831a:	9307      	str	r3, [sp, #28]
 800831c:	2f46      	cmp	r7, #70	; 0x46
 800831e:	d114      	bne.n	800834a <__cvt+0x92>
 8008320:	782b      	ldrb	r3, [r5, #0]
 8008322:	2b30      	cmp	r3, #48	; 0x30
 8008324:	d10c      	bne.n	8008340 <__cvt+0x88>
 8008326:	2200      	movs	r2, #0
 8008328:	2300      	movs	r3, #0
 800832a:	0020      	movs	r0, r4
 800832c:	0031      	movs	r1, r6
 800832e:	f7f8 f88d 	bl	800044c <__aeabi_dcmpeq>
 8008332:	2800      	cmp	r0, #0
 8008334:	d104      	bne.n	8008340 <__cvt+0x88>
 8008336:	2301      	movs	r3, #1
 8008338:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800833a:	1a9b      	subs	r3, r3, r2
 800833c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008342:	9a07      	ldr	r2, [sp, #28]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	18d3      	adds	r3, r2, r3
 8008348:	9307      	str	r3, [sp, #28]
 800834a:	2200      	movs	r2, #0
 800834c:	2300      	movs	r3, #0
 800834e:	0020      	movs	r0, r4
 8008350:	0031      	movs	r1, r6
 8008352:	f7f8 f87b 	bl	800044c <__aeabi_dcmpeq>
 8008356:	2800      	cmp	r0, #0
 8008358:	d001      	beq.n	800835e <__cvt+0xa6>
 800835a:	9b07      	ldr	r3, [sp, #28]
 800835c:	9309      	str	r3, [sp, #36]	; 0x24
 800835e:	2230      	movs	r2, #48	; 0x30
 8008360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008362:	9907      	ldr	r1, [sp, #28]
 8008364:	428b      	cmp	r3, r1
 8008366:	d306      	bcc.n	8008376 <__cvt+0xbe>
 8008368:	0028      	movs	r0, r5
 800836a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800836e:	1b5b      	subs	r3, r3, r5
 8008370:	6013      	str	r3, [r2, #0]
 8008372:	b00b      	add	sp, #44	; 0x2c
 8008374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008376:	1c59      	adds	r1, r3, #1
 8008378:	9109      	str	r1, [sp, #36]	; 0x24
 800837a:	701a      	strb	r2, [r3, #0]
 800837c:	e7f0      	b.n	8008360 <__cvt+0xa8>

0800837e <__exponent>:
 800837e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008380:	1c83      	adds	r3, r0, #2
 8008382:	b087      	sub	sp, #28
 8008384:	9303      	str	r3, [sp, #12]
 8008386:	0005      	movs	r5, r0
 8008388:	000c      	movs	r4, r1
 800838a:	232b      	movs	r3, #43	; 0x2b
 800838c:	7002      	strb	r2, [r0, #0]
 800838e:	2900      	cmp	r1, #0
 8008390:	da01      	bge.n	8008396 <__exponent+0x18>
 8008392:	424c      	negs	r4, r1
 8008394:	3302      	adds	r3, #2
 8008396:	706b      	strb	r3, [r5, #1]
 8008398:	2c09      	cmp	r4, #9
 800839a:	dd31      	ble.n	8008400 <__exponent+0x82>
 800839c:	270a      	movs	r7, #10
 800839e:	ab04      	add	r3, sp, #16
 80083a0:	1dde      	adds	r6, r3, #7
 80083a2:	0020      	movs	r0, r4
 80083a4:	0039      	movs	r1, r7
 80083a6:	9601      	str	r6, [sp, #4]
 80083a8:	f7f8 f83a 	bl	8000420 <__aeabi_idivmod>
 80083ac:	3e01      	subs	r6, #1
 80083ae:	3130      	adds	r1, #48	; 0x30
 80083b0:	0020      	movs	r0, r4
 80083b2:	7031      	strb	r1, [r6, #0]
 80083b4:	0039      	movs	r1, r7
 80083b6:	9402      	str	r4, [sp, #8]
 80083b8:	f7f7 ff4c 	bl	8000254 <__divsi3>
 80083bc:	9b02      	ldr	r3, [sp, #8]
 80083be:	0004      	movs	r4, r0
 80083c0:	2b63      	cmp	r3, #99	; 0x63
 80083c2:	dcee      	bgt.n	80083a2 <__exponent+0x24>
 80083c4:	9b01      	ldr	r3, [sp, #4]
 80083c6:	3430      	adds	r4, #48	; 0x30
 80083c8:	1e9a      	subs	r2, r3, #2
 80083ca:	0013      	movs	r3, r2
 80083cc:	9903      	ldr	r1, [sp, #12]
 80083ce:	7014      	strb	r4, [r2, #0]
 80083d0:	a804      	add	r0, sp, #16
 80083d2:	3007      	adds	r0, #7
 80083d4:	4298      	cmp	r0, r3
 80083d6:	d80e      	bhi.n	80083f6 <__exponent+0x78>
 80083d8:	ab04      	add	r3, sp, #16
 80083da:	3307      	adds	r3, #7
 80083dc:	2000      	movs	r0, #0
 80083de:	429a      	cmp	r2, r3
 80083e0:	d804      	bhi.n	80083ec <__exponent+0x6e>
 80083e2:	ab04      	add	r3, sp, #16
 80083e4:	3009      	adds	r0, #9
 80083e6:	18c0      	adds	r0, r0, r3
 80083e8:	9b01      	ldr	r3, [sp, #4]
 80083ea:	1ac0      	subs	r0, r0, r3
 80083ec:	9b03      	ldr	r3, [sp, #12]
 80083ee:	1818      	adds	r0, r3, r0
 80083f0:	1b40      	subs	r0, r0, r5
 80083f2:	b007      	add	sp, #28
 80083f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083f6:	7818      	ldrb	r0, [r3, #0]
 80083f8:	3301      	adds	r3, #1
 80083fa:	7008      	strb	r0, [r1, #0]
 80083fc:	3101      	adds	r1, #1
 80083fe:	e7e7      	b.n	80083d0 <__exponent+0x52>
 8008400:	2330      	movs	r3, #48	; 0x30
 8008402:	18e4      	adds	r4, r4, r3
 8008404:	70ab      	strb	r3, [r5, #2]
 8008406:	1d28      	adds	r0, r5, #4
 8008408:	70ec      	strb	r4, [r5, #3]
 800840a:	e7f1      	b.n	80083f0 <__exponent+0x72>

0800840c <_printf_float>:
 800840c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800840e:	b095      	sub	sp, #84	; 0x54
 8008410:	000c      	movs	r4, r1
 8008412:	9209      	str	r2, [sp, #36]	; 0x24
 8008414:	001e      	movs	r6, r3
 8008416:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008418:	0007      	movs	r7, r0
 800841a:	f002 fec7 	bl	800b1ac <_localeconv_r>
 800841e:	6803      	ldr	r3, [r0, #0]
 8008420:	0018      	movs	r0, r3
 8008422:	930c      	str	r3, [sp, #48]	; 0x30
 8008424:	f7f7 fe70 	bl	8000108 <strlen>
 8008428:	2300      	movs	r3, #0
 800842a:	9312      	str	r3, [sp, #72]	; 0x48
 800842c:	7e23      	ldrb	r3, [r4, #24]
 800842e:	2207      	movs	r2, #7
 8008430:	930a      	str	r3, [sp, #40]	; 0x28
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	900e      	str	r0, [sp, #56]	; 0x38
 8008436:	930d      	str	r3, [sp, #52]	; 0x34
 8008438:	990d      	ldr	r1, [sp, #52]	; 0x34
 800843a:	682b      	ldr	r3, [r5, #0]
 800843c:	05c9      	lsls	r1, r1, #23
 800843e:	d547      	bpl.n	80084d0 <_printf_float+0xc4>
 8008440:	189b      	adds	r3, r3, r2
 8008442:	4393      	bics	r3, r2
 8008444:	001a      	movs	r2, r3
 8008446:	3208      	adds	r2, #8
 8008448:	602a      	str	r2, [r5, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	64a2      	str	r2, [r4, #72]	; 0x48
 8008450:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008452:	2201      	movs	r2, #1
 8008454:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008456:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008458:	930b      	str	r3, [sp, #44]	; 0x2c
 800845a:	006b      	lsls	r3, r5, #1
 800845c:	085b      	lsrs	r3, r3, #1
 800845e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008460:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008462:	4ba7      	ldr	r3, [pc, #668]	; (8008700 <_printf_float+0x2f4>)
 8008464:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008466:	4252      	negs	r2, r2
 8008468:	f7fa f9c0 	bl	80027ec <__aeabi_dcmpun>
 800846c:	2800      	cmp	r0, #0
 800846e:	d131      	bne.n	80084d4 <_printf_float+0xc8>
 8008470:	2201      	movs	r2, #1
 8008472:	4ba3      	ldr	r3, [pc, #652]	; (8008700 <_printf_float+0x2f4>)
 8008474:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008476:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008478:	4252      	negs	r2, r2
 800847a:	f7f7 fff7 	bl	800046c <__aeabi_dcmple>
 800847e:	2800      	cmp	r0, #0
 8008480:	d128      	bne.n	80084d4 <_printf_float+0xc8>
 8008482:	2200      	movs	r2, #0
 8008484:	2300      	movs	r3, #0
 8008486:	0029      	movs	r1, r5
 8008488:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800848a:	f7f7 ffe5 	bl	8000458 <__aeabi_dcmplt>
 800848e:	2800      	cmp	r0, #0
 8008490:	d003      	beq.n	800849a <_printf_float+0x8e>
 8008492:	0023      	movs	r3, r4
 8008494:	222d      	movs	r2, #45	; 0x2d
 8008496:	3343      	adds	r3, #67	; 0x43
 8008498:	701a      	strb	r2, [r3, #0]
 800849a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800849c:	4d99      	ldr	r5, [pc, #612]	; (8008704 <_printf_float+0x2f8>)
 800849e:	2b47      	cmp	r3, #71	; 0x47
 80084a0:	d900      	bls.n	80084a4 <_printf_float+0x98>
 80084a2:	4d99      	ldr	r5, [pc, #612]	; (8008708 <_printf_float+0x2fc>)
 80084a4:	2303      	movs	r3, #3
 80084a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084a8:	6123      	str	r3, [r4, #16]
 80084aa:	3301      	adds	r3, #1
 80084ac:	439a      	bics	r2, r3
 80084ae:	2300      	movs	r3, #0
 80084b0:	6022      	str	r2, [r4, #0]
 80084b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80084b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b6:	0021      	movs	r1, r4
 80084b8:	0038      	movs	r0, r7
 80084ba:	9600      	str	r6, [sp, #0]
 80084bc:	aa13      	add	r2, sp, #76	; 0x4c
 80084be:	f000 f9e7 	bl	8008890 <_printf_common>
 80084c2:	1c43      	adds	r3, r0, #1
 80084c4:	d000      	beq.n	80084c8 <_printf_float+0xbc>
 80084c6:	e0a2      	b.n	800860e <_printf_float+0x202>
 80084c8:	2001      	movs	r0, #1
 80084ca:	4240      	negs	r0, r0
 80084cc:	b015      	add	sp, #84	; 0x54
 80084ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084d0:	3307      	adds	r3, #7
 80084d2:	e7b6      	b.n	8008442 <_printf_float+0x36>
 80084d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084d6:	002b      	movs	r3, r5
 80084d8:	0010      	movs	r0, r2
 80084da:	0029      	movs	r1, r5
 80084dc:	f7fa f986 	bl	80027ec <__aeabi_dcmpun>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d00b      	beq.n	80084fc <_printf_float+0xf0>
 80084e4:	2d00      	cmp	r5, #0
 80084e6:	da03      	bge.n	80084f0 <_printf_float+0xe4>
 80084e8:	0023      	movs	r3, r4
 80084ea:	222d      	movs	r2, #45	; 0x2d
 80084ec:	3343      	adds	r3, #67	; 0x43
 80084ee:	701a      	strb	r2, [r3, #0]
 80084f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084f2:	4d86      	ldr	r5, [pc, #536]	; (800870c <_printf_float+0x300>)
 80084f4:	2b47      	cmp	r3, #71	; 0x47
 80084f6:	d9d5      	bls.n	80084a4 <_printf_float+0x98>
 80084f8:	4d85      	ldr	r5, [pc, #532]	; (8008710 <_printf_float+0x304>)
 80084fa:	e7d3      	b.n	80084a4 <_printf_float+0x98>
 80084fc:	2220      	movs	r2, #32
 80084fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008500:	6863      	ldr	r3, [r4, #4]
 8008502:	4391      	bics	r1, r2
 8008504:	910f      	str	r1, [sp, #60]	; 0x3c
 8008506:	1c5a      	adds	r2, r3, #1
 8008508:	d149      	bne.n	800859e <_printf_float+0x192>
 800850a:	3307      	adds	r3, #7
 800850c:	6063      	str	r3, [r4, #4]
 800850e:	2380      	movs	r3, #128	; 0x80
 8008510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008512:	00db      	lsls	r3, r3, #3
 8008514:	4313      	orrs	r3, r2
 8008516:	2200      	movs	r2, #0
 8008518:	9206      	str	r2, [sp, #24]
 800851a:	aa12      	add	r2, sp, #72	; 0x48
 800851c:	9205      	str	r2, [sp, #20]
 800851e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008520:	a908      	add	r1, sp, #32
 8008522:	9204      	str	r2, [sp, #16]
 8008524:	aa11      	add	r2, sp, #68	; 0x44
 8008526:	9203      	str	r2, [sp, #12]
 8008528:	2223      	movs	r2, #35	; 0x23
 800852a:	6023      	str	r3, [r4, #0]
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	6863      	ldr	r3, [r4, #4]
 8008530:	1852      	adds	r2, r2, r1
 8008532:	9202      	str	r2, [sp, #8]
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	0038      	movs	r0, r7
 8008538:	002b      	movs	r3, r5
 800853a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800853c:	f7ff febc 	bl	80082b8 <__cvt>
 8008540:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008542:	0005      	movs	r5, r0
 8008544:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008546:	2b47      	cmp	r3, #71	; 0x47
 8008548:	d108      	bne.n	800855c <_printf_float+0x150>
 800854a:	1ccb      	adds	r3, r1, #3
 800854c:	db02      	blt.n	8008554 <_printf_float+0x148>
 800854e:	6863      	ldr	r3, [r4, #4]
 8008550:	4299      	cmp	r1, r3
 8008552:	dd48      	ble.n	80085e6 <_printf_float+0x1da>
 8008554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008556:	3b02      	subs	r3, #2
 8008558:	b2db      	uxtb	r3, r3
 800855a:	930a      	str	r3, [sp, #40]	; 0x28
 800855c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800855e:	2b65      	cmp	r3, #101	; 0x65
 8008560:	d824      	bhi.n	80085ac <_printf_float+0x1a0>
 8008562:	0020      	movs	r0, r4
 8008564:	001a      	movs	r2, r3
 8008566:	3901      	subs	r1, #1
 8008568:	3050      	adds	r0, #80	; 0x50
 800856a:	9111      	str	r1, [sp, #68]	; 0x44
 800856c:	f7ff ff07 	bl	800837e <__exponent>
 8008570:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008572:	900b      	str	r0, [sp, #44]	; 0x2c
 8008574:	1813      	adds	r3, r2, r0
 8008576:	6123      	str	r3, [r4, #16]
 8008578:	2a01      	cmp	r2, #1
 800857a:	dc02      	bgt.n	8008582 <_printf_float+0x176>
 800857c:	6822      	ldr	r2, [r4, #0]
 800857e:	07d2      	lsls	r2, r2, #31
 8008580:	d501      	bpl.n	8008586 <_printf_float+0x17a>
 8008582:	3301      	adds	r3, #1
 8008584:	6123      	str	r3, [r4, #16]
 8008586:	2323      	movs	r3, #35	; 0x23
 8008588:	aa08      	add	r2, sp, #32
 800858a:	189b      	adds	r3, r3, r2
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d100      	bne.n	8008594 <_printf_float+0x188>
 8008592:	e78f      	b.n	80084b4 <_printf_float+0xa8>
 8008594:	0023      	movs	r3, r4
 8008596:	222d      	movs	r2, #45	; 0x2d
 8008598:	3343      	adds	r3, #67	; 0x43
 800859a:	701a      	strb	r2, [r3, #0]
 800859c:	e78a      	b.n	80084b4 <_printf_float+0xa8>
 800859e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80085a0:	2a47      	cmp	r2, #71	; 0x47
 80085a2:	d1b4      	bne.n	800850e <_printf_float+0x102>
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1b2      	bne.n	800850e <_printf_float+0x102>
 80085a8:	3301      	adds	r3, #1
 80085aa:	e7af      	b.n	800850c <_printf_float+0x100>
 80085ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ae:	2b66      	cmp	r3, #102	; 0x66
 80085b0:	d11b      	bne.n	80085ea <_printf_float+0x1de>
 80085b2:	6863      	ldr	r3, [r4, #4]
 80085b4:	2900      	cmp	r1, #0
 80085b6:	dd0d      	ble.n	80085d4 <_printf_float+0x1c8>
 80085b8:	6121      	str	r1, [r4, #16]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d102      	bne.n	80085c4 <_printf_float+0x1b8>
 80085be:	6822      	ldr	r2, [r4, #0]
 80085c0:	07d2      	lsls	r2, r2, #31
 80085c2:	d502      	bpl.n	80085ca <_printf_float+0x1be>
 80085c4:	3301      	adds	r3, #1
 80085c6:	1859      	adds	r1, r3, r1
 80085c8:	6121      	str	r1, [r4, #16]
 80085ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80085ce:	2300      	movs	r3, #0
 80085d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085d2:	e7d8      	b.n	8008586 <_printf_float+0x17a>
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d103      	bne.n	80085e0 <_printf_float+0x1d4>
 80085d8:	2201      	movs	r2, #1
 80085da:	6821      	ldr	r1, [r4, #0]
 80085dc:	4211      	tst	r1, r2
 80085de:	d000      	beq.n	80085e2 <_printf_float+0x1d6>
 80085e0:	1c9a      	adds	r2, r3, #2
 80085e2:	6122      	str	r2, [r4, #16]
 80085e4:	e7f1      	b.n	80085ca <_printf_float+0x1be>
 80085e6:	2367      	movs	r3, #103	; 0x67
 80085e8:	930a      	str	r3, [sp, #40]	; 0x28
 80085ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085ee:	4293      	cmp	r3, r2
 80085f0:	db06      	blt.n	8008600 <_printf_float+0x1f4>
 80085f2:	6822      	ldr	r2, [r4, #0]
 80085f4:	6123      	str	r3, [r4, #16]
 80085f6:	07d2      	lsls	r2, r2, #31
 80085f8:	d5e7      	bpl.n	80085ca <_printf_float+0x1be>
 80085fa:	3301      	adds	r3, #1
 80085fc:	6123      	str	r3, [r4, #16]
 80085fe:	e7e4      	b.n	80085ca <_printf_float+0x1be>
 8008600:	2101      	movs	r1, #1
 8008602:	2b00      	cmp	r3, #0
 8008604:	dc01      	bgt.n	800860a <_printf_float+0x1fe>
 8008606:	1849      	adds	r1, r1, r1
 8008608:	1ac9      	subs	r1, r1, r3
 800860a:	1852      	adds	r2, r2, r1
 800860c:	e7e9      	b.n	80085e2 <_printf_float+0x1d6>
 800860e:	6822      	ldr	r2, [r4, #0]
 8008610:	0553      	lsls	r3, r2, #21
 8008612:	d407      	bmi.n	8008624 <_printf_float+0x218>
 8008614:	6923      	ldr	r3, [r4, #16]
 8008616:	002a      	movs	r2, r5
 8008618:	0038      	movs	r0, r7
 800861a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800861c:	47b0      	blx	r6
 800861e:	1c43      	adds	r3, r0, #1
 8008620:	d128      	bne.n	8008674 <_printf_float+0x268>
 8008622:	e751      	b.n	80084c8 <_printf_float+0xbc>
 8008624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008626:	2b65      	cmp	r3, #101	; 0x65
 8008628:	d800      	bhi.n	800862c <_printf_float+0x220>
 800862a:	e0e1      	b.n	80087f0 <_printf_float+0x3e4>
 800862c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800862e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008630:	2200      	movs	r2, #0
 8008632:	2300      	movs	r3, #0
 8008634:	f7f7 ff0a 	bl	800044c <__aeabi_dcmpeq>
 8008638:	2800      	cmp	r0, #0
 800863a:	d031      	beq.n	80086a0 <_printf_float+0x294>
 800863c:	2301      	movs	r3, #1
 800863e:	0038      	movs	r0, r7
 8008640:	4a34      	ldr	r2, [pc, #208]	; (8008714 <_printf_float+0x308>)
 8008642:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008644:	47b0      	blx	r6
 8008646:	1c43      	adds	r3, r0, #1
 8008648:	d100      	bne.n	800864c <_printf_float+0x240>
 800864a:	e73d      	b.n	80084c8 <_printf_float+0xbc>
 800864c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800864e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008650:	4293      	cmp	r3, r2
 8008652:	db02      	blt.n	800865a <_printf_float+0x24e>
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	07db      	lsls	r3, r3, #31
 8008658:	d50c      	bpl.n	8008674 <_printf_float+0x268>
 800865a:	0038      	movs	r0, r7
 800865c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800865e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008660:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008662:	47b0      	blx	r6
 8008664:	2500      	movs	r5, #0
 8008666:	1c43      	adds	r3, r0, #1
 8008668:	d100      	bne.n	800866c <_printf_float+0x260>
 800866a:	e72d      	b.n	80084c8 <_printf_float+0xbc>
 800866c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800866e:	3b01      	subs	r3, #1
 8008670:	42ab      	cmp	r3, r5
 8008672:	dc0a      	bgt.n	800868a <_printf_float+0x27e>
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	079b      	lsls	r3, r3, #30
 8008678:	d500      	bpl.n	800867c <_printf_float+0x270>
 800867a:	e106      	b.n	800888a <_printf_float+0x47e>
 800867c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800867e:	68e0      	ldr	r0, [r4, #12]
 8008680:	4298      	cmp	r0, r3
 8008682:	db00      	blt.n	8008686 <_printf_float+0x27a>
 8008684:	e722      	b.n	80084cc <_printf_float+0xc0>
 8008686:	0018      	movs	r0, r3
 8008688:	e720      	b.n	80084cc <_printf_float+0xc0>
 800868a:	0022      	movs	r2, r4
 800868c:	2301      	movs	r3, #1
 800868e:	0038      	movs	r0, r7
 8008690:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008692:	321a      	adds	r2, #26
 8008694:	47b0      	blx	r6
 8008696:	1c43      	adds	r3, r0, #1
 8008698:	d100      	bne.n	800869c <_printf_float+0x290>
 800869a:	e715      	b.n	80084c8 <_printf_float+0xbc>
 800869c:	3501      	adds	r5, #1
 800869e:	e7e5      	b.n	800866c <_printf_float+0x260>
 80086a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	dc38      	bgt.n	8008718 <_printf_float+0x30c>
 80086a6:	2301      	movs	r3, #1
 80086a8:	0038      	movs	r0, r7
 80086aa:	4a1a      	ldr	r2, [pc, #104]	; (8008714 <_printf_float+0x308>)
 80086ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086ae:	47b0      	blx	r6
 80086b0:	1c43      	adds	r3, r0, #1
 80086b2:	d100      	bne.n	80086b6 <_printf_float+0x2aa>
 80086b4:	e708      	b.n	80084c8 <_printf_float+0xbc>
 80086b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086ba:	4313      	orrs	r3, r2
 80086bc:	d102      	bne.n	80086c4 <_printf_float+0x2b8>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	07db      	lsls	r3, r3, #31
 80086c2:	d5d7      	bpl.n	8008674 <_printf_float+0x268>
 80086c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086c6:	0038      	movs	r0, r7
 80086c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086cc:	47b0      	blx	r6
 80086ce:	1c43      	adds	r3, r0, #1
 80086d0:	d100      	bne.n	80086d4 <_printf_float+0x2c8>
 80086d2:	e6f9      	b.n	80084c8 <_printf_float+0xbc>
 80086d4:	2300      	movs	r3, #0
 80086d6:	930a      	str	r3, [sp, #40]	; 0x28
 80086d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086dc:	425b      	negs	r3, r3
 80086de:	4293      	cmp	r3, r2
 80086e0:	dc01      	bgt.n	80086e6 <_printf_float+0x2da>
 80086e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086e4:	e797      	b.n	8008616 <_printf_float+0x20a>
 80086e6:	0022      	movs	r2, r4
 80086e8:	2301      	movs	r3, #1
 80086ea:	0038      	movs	r0, r7
 80086ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086ee:	321a      	adds	r2, #26
 80086f0:	47b0      	blx	r6
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	d100      	bne.n	80086f8 <_printf_float+0x2ec>
 80086f6:	e6e7      	b.n	80084c8 <_printf_float+0xbc>
 80086f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086fa:	3301      	adds	r3, #1
 80086fc:	e7eb      	b.n	80086d6 <_printf_float+0x2ca>
 80086fe:	46c0      	nop			; (mov r8, r8)
 8008700:	7fefffff 	.word	0x7fefffff
 8008704:	0800d01c 	.word	0x0800d01c
 8008708:	0800d020 	.word	0x0800d020
 800870c:	0800d024 	.word	0x0800d024
 8008710:	0800d028 	.word	0x0800d028
 8008714:	0800d02c 	.word	0x0800d02c
 8008718:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800871a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800871c:	920a      	str	r2, [sp, #40]	; 0x28
 800871e:	429a      	cmp	r2, r3
 8008720:	dd00      	ble.n	8008724 <_printf_float+0x318>
 8008722:	930a      	str	r3, [sp, #40]	; 0x28
 8008724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008726:	2b00      	cmp	r3, #0
 8008728:	dc3c      	bgt.n	80087a4 <_printf_float+0x398>
 800872a:	2300      	movs	r3, #0
 800872c:	930d      	str	r3, [sp, #52]	; 0x34
 800872e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008730:	43db      	mvns	r3, r3
 8008732:	17db      	asrs	r3, r3, #31
 8008734:	930f      	str	r3, [sp, #60]	; 0x3c
 8008736:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008738:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800873a:	930b      	str	r3, [sp, #44]	; 0x2c
 800873c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800873e:	4013      	ands	r3, r2
 8008740:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008746:	4293      	cmp	r3, r2
 8008748:	dc34      	bgt.n	80087b4 <_printf_float+0x3a8>
 800874a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800874c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800874e:	4293      	cmp	r3, r2
 8008750:	db3d      	blt.n	80087ce <_printf_float+0x3c2>
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	07db      	lsls	r3, r3, #31
 8008756:	d43a      	bmi.n	80087ce <_printf_float+0x3c2>
 8008758:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800875a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800875c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	1a52      	subs	r2, r2, r1
 8008762:	920a      	str	r2, [sp, #40]	; 0x28
 8008764:	429a      	cmp	r2, r3
 8008766:	dd00      	ble.n	800876a <_printf_float+0x35e>
 8008768:	930a      	str	r3, [sp, #40]	; 0x28
 800876a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800876c:	2b00      	cmp	r3, #0
 800876e:	dc36      	bgt.n	80087de <_printf_float+0x3d2>
 8008770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008772:	2500      	movs	r5, #0
 8008774:	43db      	mvns	r3, r3
 8008776:	17db      	asrs	r3, r3, #31
 8008778:	930b      	str	r3, [sp, #44]	; 0x2c
 800877a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800877c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800877e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008780:	1a9b      	subs	r3, r3, r2
 8008782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008784:	400a      	ands	r2, r1
 8008786:	1a9b      	subs	r3, r3, r2
 8008788:	42ab      	cmp	r3, r5
 800878a:	dc00      	bgt.n	800878e <_printf_float+0x382>
 800878c:	e772      	b.n	8008674 <_printf_float+0x268>
 800878e:	0022      	movs	r2, r4
 8008790:	2301      	movs	r3, #1
 8008792:	0038      	movs	r0, r7
 8008794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008796:	321a      	adds	r2, #26
 8008798:	47b0      	blx	r6
 800879a:	1c43      	adds	r3, r0, #1
 800879c:	d100      	bne.n	80087a0 <_printf_float+0x394>
 800879e:	e693      	b.n	80084c8 <_printf_float+0xbc>
 80087a0:	3501      	adds	r5, #1
 80087a2:	e7ea      	b.n	800877a <_printf_float+0x36e>
 80087a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a6:	002a      	movs	r2, r5
 80087a8:	0038      	movs	r0, r7
 80087aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ac:	47b0      	blx	r6
 80087ae:	1c43      	adds	r3, r0, #1
 80087b0:	d1bb      	bne.n	800872a <_printf_float+0x31e>
 80087b2:	e689      	b.n	80084c8 <_printf_float+0xbc>
 80087b4:	0022      	movs	r2, r4
 80087b6:	2301      	movs	r3, #1
 80087b8:	0038      	movs	r0, r7
 80087ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087bc:	321a      	adds	r2, #26
 80087be:	47b0      	blx	r6
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d100      	bne.n	80087c6 <_printf_float+0x3ba>
 80087c4:	e680      	b.n	80084c8 <_printf_float+0xbc>
 80087c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087c8:	3301      	adds	r3, #1
 80087ca:	930d      	str	r3, [sp, #52]	; 0x34
 80087cc:	e7b3      	b.n	8008736 <_printf_float+0x32a>
 80087ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087d0:	0038      	movs	r0, r7
 80087d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087d6:	47b0      	blx	r6
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d1bd      	bne.n	8008758 <_printf_float+0x34c>
 80087dc:	e674      	b.n	80084c8 <_printf_float+0xbc>
 80087de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087e0:	0038      	movs	r0, r7
 80087e2:	18ea      	adds	r2, r5, r3
 80087e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e8:	47b0      	blx	r6
 80087ea:	1c43      	adds	r3, r0, #1
 80087ec:	d1c0      	bne.n	8008770 <_printf_float+0x364>
 80087ee:	e66b      	b.n	80084c8 <_printf_float+0xbc>
 80087f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	dc02      	bgt.n	80087fc <_printf_float+0x3f0>
 80087f6:	2301      	movs	r3, #1
 80087f8:	421a      	tst	r2, r3
 80087fa:	d034      	beq.n	8008866 <_printf_float+0x45a>
 80087fc:	2301      	movs	r3, #1
 80087fe:	002a      	movs	r2, r5
 8008800:	0038      	movs	r0, r7
 8008802:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008804:	47b0      	blx	r6
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	d100      	bne.n	800880c <_printf_float+0x400>
 800880a:	e65d      	b.n	80084c8 <_printf_float+0xbc>
 800880c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800880e:	0038      	movs	r0, r7
 8008810:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008812:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008814:	47b0      	blx	r6
 8008816:	1c43      	adds	r3, r0, #1
 8008818:	d100      	bne.n	800881c <_printf_float+0x410>
 800881a:	e655      	b.n	80084c8 <_printf_float+0xbc>
 800881c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800881e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008820:	2200      	movs	r2, #0
 8008822:	2300      	movs	r3, #0
 8008824:	f7f7 fe12 	bl	800044c <__aeabi_dcmpeq>
 8008828:	2800      	cmp	r0, #0
 800882a:	d11a      	bne.n	8008862 <_printf_float+0x456>
 800882c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800882e:	1c6a      	adds	r2, r5, #1
 8008830:	3b01      	subs	r3, #1
 8008832:	0038      	movs	r0, r7
 8008834:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008836:	47b0      	blx	r6
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	d10e      	bne.n	800885a <_printf_float+0x44e>
 800883c:	e644      	b.n	80084c8 <_printf_float+0xbc>
 800883e:	0022      	movs	r2, r4
 8008840:	2301      	movs	r3, #1
 8008842:	0038      	movs	r0, r7
 8008844:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008846:	321a      	adds	r2, #26
 8008848:	47b0      	blx	r6
 800884a:	1c43      	adds	r3, r0, #1
 800884c:	d100      	bne.n	8008850 <_printf_float+0x444>
 800884e:	e63b      	b.n	80084c8 <_printf_float+0xbc>
 8008850:	3501      	adds	r5, #1
 8008852:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008854:	3b01      	subs	r3, #1
 8008856:	42ab      	cmp	r3, r5
 8008858:	dcf1      	bgt.n	800883e <_printf_float+0x432>
 800885a:	0022      	movs	r2, r4
 800885c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800885e:	3250      	adds	r2, #80	; 0x50
 8008860:	e6da      	b.n	8008618 <_printf_float+0x20c>
 8008862:	2500      	movs	r5, #0
 8008864:	e7f5      	b.n	8008852 <_printf_float+0x446>
 8008866:	002a      	movs	r2, r5
 8008868:	e7e3      	b.n	8008832 <_printf_float+0x426>
 800886a:	0022      	movs	r2, r4
 800886c:	2301      	movs	r3, #1
 800886e:	0038      	movs	r0, r7
 8008870:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008872:	3219      	adds	r2, #25
 8008874:	47b0      	blx	r6
 8008876:	1c43      	adds	r3, r0, #1
 8008878:	d100      	bne.n	800887c <_printf_float+0x470>
 800887a:	e625      	b.n	80084c8 <_printf_float+0xbc>
 800887c:	3501      	adds	r5, #1
 800887e:	68e3      	ldr	r3, [r4, #12]
 8008880:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008882:	1a9b      	subs	r3, r3, r2
 8008884:	42ab      	cmp	r3, r5
 8008886:	dcf0      	bgt.n	800886a <_printf_float+0x45e>
 8008888:	e6f8      	b.n	800867c <_printf_float+0x270>
 800888a:	2500      	movs	r5, #0
 800888c:	e7f7      	b.n	800887e <_printf_float+0x472>
 800888e:	46c0      	nop			; (mov r8, r8)

08008890 <_printf_common>:
 8008890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008892:	0015      	movs	r5, r2
 8008894:	9301      	str	r3, [sp, #4]
 8008896:	688a      	ldr	r2, [r1, #8]
 8008898:	690b      	ldr	r3, [r1, #16]
 800889a:	000c      	movs	r4, r1
 800889c:	9000      	str	r0, [sp, #0]
 800889e:	4293      	cmp	r3, r2
 80088a0:	da00      	bge.n	80088a4 <_printf_common+0x14>
 80088a2:	0013      	movs	r3, r2
 80088a4:	0022      	movs	r2, r4
 80088a6:	602b      	str	r3, [r5, #0]
 80088a8:	3243      	adds	r2, #67	; 0x43
 80088aa:	7812      	ldrb	r2, [r2, #0]
 80088ac:	2a00      	cmp	r2, #0
 80088ae:	d001      	beq.n	80088b4 <_printf_common+0x24>
 80088b0:	3301      	adds	r3, #1
 80088b2:	602b      	str	r3, [r5, #0]
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	069b      	lsls	r3, r3, #26
 80088b8:	d502      	bpl.n	80088c0 <_printf_common+0x30>
 80088ba:	682b      	ldr	r3, [r5, #0]
 80088bc:	3302      	adds	r3, #2
 80088be:	602b      	str	r3, [r5, #0]
 80088c0:	6822      	ldr	r2, [r4, #0]
 80088c2:	2306      	movs	r3, #6
 80088c4:	0017      	movs	r7, r2
 80088c6:	401f      	ands	r7, r3
 80088c8:	421a      	tst	r2, r3
 80088ca:	d027      	beq.n	800891c <_printf_common+0x8c>
 80088cc:	0023      	movs	r3, r4
 80088ce:	3343      	adds	r3, #67	; 0x43
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	1e5a      	subs	r2, r3, #1
 80088d4:	4193      	sbcs	r3, r2
 80088d6:	6822      	ldr	r2, [r4, #0]
 80088d8:	0692      	lsls	r2, r2, #26
 80088da:	d430      	bmi.n	800893e <_printf_common+0xae>
 80088dc:	0022      	movs	r2, r4
 80088de:	9901      	ldr	r1, [sp, #4]
 80088e0:	9800      	ldr	r0, [sp, #0]
 80088e2:	9e08      	ldr	r6, [sp, #32]
 80088e4:	3243      	adds	r2, #67	; 0x43
 80088e6:	47b0      	blx	r6
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	d025      	beq.n	8008938 <_printf_common+0xa8>
 80088ec:	2306      	movs	r3, #6
 80088ee:	6820      	ldr	r0, [r4, #0]
 80088f0:	682a      	ldr	r2, [r5, #0]
 80088f2:	68e1      	ldr	r1, [r4, #12]
 80088f4:	2500      	movs	r5, #0
 80088f6:	4003      	ands	r3, r0
 80088f8:	2b04      	cmp	r3, #4
 80088fa:	d103      	bne.n	8008904 <_printf_common+0x74>
 80088fc:	1a8d      	subs	r5, r1, r2
 80088fe:	43eb      	mvns	r3, r5
 8008900:	17db      	asrs	r3, r3, #31
 8008902:	401d      	ands	r5, r3
 8008904:	68a3      	ldr	r3, [r4, #8]
 8008906:	6922      	ldr	r2, [r4, #16]
 8008908:	4293      	cmp	r3, r2
 800890a:	dd01      	ble.n	8008910 <_printf_common+0x80>
 800890c:	1a9b      	subs	r3, r3, r2
 800890e:	18ed      	adds	r5, r5, r3
 8008910:	2700      	movs	r7, #0
 8008912:	42bd      	cmp	r5, r7
 8008914:	d120      	bne.n	8008958 <_printf_common+0xc8>
 8008916:	2000      	movs	r0, #0
 8008918:	e010      	b.n	800893c <_printf_common+0xac>
 800891a:	3701      	adds	r7, #1
 800891c:	68e3      	ldr	r3, [r4, #12]
 800891e:	682a      	ldr	r2, [r5, #0]
 8008920:	1a9b      	subs	r3, r3, r2
 8008922:	42bb      	cmp	r3, r7
 8008924:	ddd2      	ble.n	80088cc <_printf_common+0x3c>
 8008926:	0022      	movs	r2, r4
 8008928:	2301      	movs	r3, #1
 800892a:	9901      	ldr	r1, [sp, #4]
 800892c:	9800      	ldr	r0, [sp, #0]
 800892e:	9e08      	ldr	r6, [sp, #32]
 8008930:	3219      	adds	r2, #25
 8008932:	47b0      	blx	r6
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	d1f0      	bne.n	800891a <_printf_common+0x8a>
 8008938:	2001      	movs	r0, #1
 800893a:	4240      	negs	r0, r0
 800893c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800893e:	2030      	movs	r0, #48	; 0x30
 8008940:	18e1      	adds	r1, r4, r3
 8008942:	3143      	adds	r1, #67	; 0x43
 8008944:	7008      	strb	r0, [r1, #0]
 8008946:	0021      	movs	r1, r4
 8008948:	1c5a      	adds	r2, r3, #1
 800894a:	3145      	adds	r1, #69	; 0x45
 800894c:	7809      	ldrb	r1, [r1, #0]
 800894e:	18a2      	adds	r2, r4, r2
 8008950:	3243      	adds	r2, #67	; 0x43
 8008952:	3302      	adds	r3, #2
 8008954:	7011      	strb	r1, [r2, #0]
 8008956:	e7c1      	b.n	80088dc <_printf_common+0x4c>
 8008958:	0022      	movs	r2, r4
 800895a:	2301      	movs	r3, #1
 800895c:	9901      	ldr	r1, [sp, #4]
 800895e:	9800      	ldr	r0, [sp, #0]
 8008960:	9e08      	ldr	r6, [sp, #32]
 8008962:	321a      	adds	r2, #26
 8008964:	47b0      	blx	r6
 8008966:	1c43      	adds	r3, r0, #1
 8008968:	d0e6      	beq.n	8008938 <_printf_common+0xa8>
 800896a:	3701      	adds	r7, #1
 800896c:	e7d1      	b.n	8008912 <_printf_common+0x82>
	...

08008970 <_printf_i>:
 8008970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008972:	b08b      	sub	sp, #44	; 0x2c
 8008974:	9206      	str	r2, [sp, #24]
 8008976:	000a      	movs	r2, r1
 8008978:	3243      	adds	r2, #67	; 0x43
 800897a:	9307      	str	r3, [sp, #28]
 800897c:	9005      	str	r0, [sp, #20]
 800897e:	9204      	str	r2, [sp, #16]
 8008980:	7e0a      	ldrb	r2, [r1, #24]
 8008982:	000c      	movs	r4, r1
 8008984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008986:	2a78      	cmp	r2, #120	; 0x78
 8008988:	d807      	bhi.n	800899a <_printf_i+0x2a>
 800898a:	2a62      	cmp	r2, #98	; 0x62
 800898c:	d809      	bhi.n	80089a2 <_printf_i+0x32>
 800898e:	2a00      	cmp	r2, #0
 8008990:	d100      	bne.n	8008994 <_printf_i+0x24>
 8008992:	e0c1      	b.n	8008b18 <_printf_i+0x1a8>
 8008994:	2a58      	cmp	r2, #88	; 0x58
 8008996:	d100      	bne.n	800899a <_printf_i+0x2a>
 8008998:	e08c      	b.n	8008ab4 <_printf_i+0x144>
 800899a:	0026      	movs	r6, r4
 800899c:	3642      	adds	r6, #66	; 0x42
 800899e:	7032      	strb	r2, [r6, #0]
 80089a0:	e022      	b.n	80089e8 <_printf_i+0x78>
 80089a2:	0010      	movs	r0, r2
 80089a4:	3863      	subs	r0, #99	; 0x63
 80089a6:	2815      	cmp	r0, #21
 80089a8:	d8f7      	bhi.n	800899a <_printf_i+0x2a>
 80089aa:	f7f7 fbbf 	bl	800012c <__gnu_thumb1_case_shi>
 80089ae:	0016      	.short	0x0016
 80089b0:	fff6001f 	.word	0xfff6001f
 80089b4:	fff6fff6 	.word	0xfff6fff6
 80089b8:	001ffff6 	.word	0x001ffff6
 80089bc:	fff6fff6 	.word	0xfff6fff6
 80089c0:	fff6fff6 	.word	0xfff6fff6
 80089c4:	003600a8 	.word	0x003600a8
 80089c8:	fff6009a 	.word	0xfff6009a
 80089cc:	00b9fff6 	.word	0x00b9fff6
 80089d0:	0036fff6 	.word	0x0036fff6
 80089d4:	fff6fff6 	.word	0xfff6fff6
 80089d8:	009e      	.short	0x009e
 80089da:	0026      	movs	r6, r4
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	3642      	adds	r6, #66	; 0x42
 80089e0:	1d11      	adds	r1, r2, #4
 80089e2:	6019      	str	r1, [r3, #0]
 80089e4:	6813      	ldr	r3, [r2, #0]
 80089e6:	7033      	strb	r3, [r6, #0]
 80089e8:	2301      	movs	r3, #1
 80089ea:	e0a7      	b.n	8008b3c <_printf_i+0x1cc>
 80089ec:	6808      	ldr	r0, [r1, #0]
 80089ee:	6819      	ldr	r1, [r3, #0]
 80089f0:	1d0a      	adds	r2, r1, #4
 80089f2:	0605      	lsls	r5, r0, #24
 80089f4:	d50b      	bpl.n	8008a0e <_printf_i+0x9e>
 80089f6:	680d      	ldr	r5, [r1, #0]
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	2d00      	cmp	r5, #0
 80089fc:	da03      	bge.n	8008a06 <_printf_i+0x96>
 80089fe:	232d      	movs	r3, #45	; 0x2d
 8008a00:	9a04      	ldr	r2, [sp, #16]
 8008a02:	426d      	negs	r5, r5
 8008a04:	7013      	strb	r3, [r2, #0]
 8008a06:	4b61      	ldr	r3, [pc, #388]	; (8008b8c <_printf_i+0x21c>)
 8008a08:	270a      	movs	r7, #10
 8008a0a:	9303      	str	r3, [sp, #12]
 8008a0c:	e01b      	b.n	8008a46 <_printf_i+0xd6>
 8008a0e:	680d      	ldr	r5, [r1, #0]
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	0641      	lsls	r1, r0, #25
 8008a14:	d5f1      	bpl.n	80089fa <_printf_i+0x8a>
 8008a16:	b22d      	sxth	r5, r5
 8008a18:	e7ef      	b.n	80089fa <_printf_i+0x8a>
 8008a1a:	680d      	ldr	r5, [r1, #0]
 8008a1c:	6819      	ldr	r1, [r3, #0]
 8008a1e:	1d08      	adds	r0, r1, #4
 8008a20:	6018      	str	r0, [r3, #0]
 8008a22:	062e      	lsls	r6, r5, #24
 8008a24:	d501      	bpl.n	8008a2a <_printf_i+0xba>
 8008a26:	680d      	ldr	r5, [r1, #0]
 8008a28:	e003      	b.n	8008a32 <_printf_i+0xc2>
 8008a2a:	066d      	lsls	r5, r5, #25
 8008a2c:	d5fb      	bpl.n	8008a26 <_printf_i+0xb6>
 8008a2e:	680d      	ldr	r5, [r1, #0]
 8008a30:	b2ad      	uxth	r5, r5
 8008a32:	4b56      	ldr	r3, [pc, #344]	; (8008b8c <_printf_i+0x21c>)
 8008a34:	2708      	movs	r7, #8
 8008a36:	9303      	str	r3, [sp, #12]
 8008a38:	2a6f      	cmp	r2, #111	; 0x6f
 8008a3a:	d000      	beq.n	8008a3e <_printf_i+0xce>
 8008a3c:	3702      	adds	r7, #2
 8008a3e:	0023      	movs	r3, r4
 8008a40:	2200      	movs	r2, #0
 8008a42:	3343      	adds	r3, #67	; 0x43
 8008a44:	701a      	strb	r2, [r3, #0]
 8008a46:	6863      	ldr	r3, [r4, #4]
 8008a48:	60a3      	str	r3, [r4, #8]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	db03      	blt.n	8008a56 <_printf_i+0xe6>
 8008a4e:	2204      	movs	r2, #4
 8008a50:	6821      	ldr	r1, [r4, #0]
 8008a52:	4391      	bics	r1, r2
 8008a54:	6021      	str	r1, [r4, #0]
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	d102      	bne.n	8008a60 <_printf_i+0xf0>
 8008a5a:	9e04      	ldr	r6, [sp, #16]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00c      	beq.n	8008a7a <_printf_i+0x10a>
 8008a60:	9e04      	ldr	r6, [sp, #16]
 8008a62:	0028      	movs	r0, r5
 8008a64:	0039      	movs	r1, r7
 8008a66:	f7f7 fbf1 	bl	800024c <__aeabi_uidivmod>
 8008a6a:	9b03      	ldr	r3, [sp, #12]
 8008a6c:	3e01      	subs	r6, #1
 8008a6e:	5c5b      	ldrb	r3, [r3, r1]
 8008a70:	7033      	strb	r3, [r6, #0]
 8008a72:	002b      	movs	r3, r5
 8008a74:	0005      	movs	r5, r0
 8008a76:	429f      	cmp	r7, r3
 8008a78:	d9f3      	bls.n	8008a62 <_printf_i+0xf2>
 8008a7a:	2f08      	cmp	r7, #8
 8008a7c:	d109      	bne.n	8008a92 <_printf_i+0x122>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	07db      	lsls	r3, r3, #31
 8008a82:	d506      	bpl.n	8008a92 <_printf_i+0x122>
 8008a84:	6863      	ldr	r3, [r4, #4]
 8008a86:	6922      	ldr	r2, [r4, #16]
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	dc02      	bgt.n	8008a92 <_printf_i+0x122>
 8008a8c:	2330      	movs	r3, #48	; 0x30
 8008a8e:	3e01      	subs	r6, #1
 8008a90:	7033      	strb	r3, [r6, #0]
 8008a92:	9b04      	ldr	r3, [sp, #16]
 8008a94:	1b9b      	subs	r3, r3, r6
 8008a96:	6123      	str	r3, [r4, #16]
 8008a98:	9b07      	ldr	r3, [sp, #28]
 8008a9a:	0021      	movs	r1, r4
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	9805      	ldr	r0, [sp, #20]
 8008aa0:	9b06      	ldr	r3, [sp, #24]
 8008aa2:	aa09      	add	r2, sp, #36	; 0x24
 8008aa4:	f7ff fef4 	bl	8008890 <_printf_common>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d14c      	bne.n	8008b46 <_printf_i+0x1d6>
 8008aac:	2001      	movs	r0, #1
 8008aae:	4240      	negs	r0, r0
 8008ab0:	b00b      	add	sp, #44	; 0x2c
 8008ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ab4:	3145      	adds	r1, #69	; 0x45
 8008ab6:	700a      	strb	r2, [r1, #0]
 8008ab8:	4a34      	ldr	r2, [pc, #208]	; (8008b8c <_printf_i+0x21c>)
 8008aba:	9203      	str	r2, [sp, #12]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	6821      	ldr	r1, [r4, #0]
 8008ac0:	ca20      	ldmia	r2!, {r5}
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	0608      	lsls	r0, r1, #24
 8008ac6:	d516      	bpl.n	8008af6 <_printf_i+0x186>
 8008ac8:	07cb      	lsls	r3, r1, #31
 8008aca:	d502      	bpl.n	8008ad2 <_printf_i+0x162>
 8008acc:	2320      	movs	r3, #32
 8008ace:	4319      	orrs	r1, r3
 8008ad0:	6021      	str	r1, [r4, #0]
 8008ad2:	2710      	movs	r7, #16
 8008ad4:	2d00      	cmp	r5, #0
 8008ad6:	d1b2      	bne.n	8008a3e <_printf_i+0xce>
 8008ad8:	2320      	movs	r3, #32
 8008ada:	6822      	ldr	r2, [r4, #0]
 8008adc:	439a      	bics	r2, r3
 8008ade:	6022      	str	r2, [r4, #0]
 8008ae0:	e7ad      	b.n	8008a3e <_printf_i+0xce>
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	6809      	ldr	r1, [r1, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	6022      	str	r2, [r4, #0]
 8008aea:	0022      	movs	r2, r4
 8008aec:	2178      	movs	r1, #120	; 0x78
 8008aee:	3245      	adds	r2, #69	; 0x45
 8008af0:	7011      	strb	r1, [r2, #0]
 8008af2:	4a27      	ldr	r2, [pc, #156]	; (8008b90 <_printf_i+0x220>)
 8008af4:	e7e1      	b.n	8008aba <_printf_i+0x14a>
 8008af6:	0648      	lsls	r0, r1, #25
 8008af8:	d5e6      	bpl.n	8008ac8 <_printf_i+0x158>
 8008afa:	b2ad      	uxth	r5, r5
 8008afc:	e7e4      	b.n	8008ac8 <_printf_i+0x158>
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	680d      	ldr	r5, [r1, #0]
 8008b02:	1d10      	adds	r0, r2, #4
 8008b04:	6949      	ldr	r1, [r1, #20]
 8008b06:	6018      	str	r0, [r3, #0]
 8008b08:	6813      	ldr	r3, [r2, #0]
 8008b0a:	062e      	lsls	r6, r5, #24
 8008b0c:	d501      	bpl.n	8008b12 <_printf_i+0x1a2>
 8008b0e:	6019      	str	r1, [r3, #0]
 8008b10:	e002      	b.n	8008b18 <_printf_i+0x1a8>
 8008b12:	066d      	lsls	r5, r5, #25
 8008b14:	d5fb      	bpl.n	8008b0e <_printf_i+0x19e>
 8008b16:	8019      	strh	r1, [r3, #0]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	9e04      	ldr	r6, [sp, #16]
 8008b1c:	6123      	str	r3, [r4, #16]
 8008b1e:	e7bb      	b.n	8008a98 <_printf_i+0x128>
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	1d11      	adds	r1, r2, #4
 8008b24:	6019      	str	r1, [r3, #0]
 8008b26:	6816      	ldr	r6, [r2, #0]
 8008b28:	2100      	movs	r1, #0
 8008b2a:	0030      	movs	r0, r6
 8008b2c:	6862      	ldr	r2, [r4, #4]
 8008b2e:	f002 fb5d 	bl	800b1ec <memchr>
 8008b32:	2800      	cmp	r0, #0
 8008b34:	d001      	beq.n	8008b3a <_printf_i+0x1ca>
 8008b36:	1b80      	subs	r0, r0, r6
 8008b38:	6060      	str	r0, [r4, #4]
 8008b3a:	6863      	ldr	r3, [r4, #4]
 8008b3c:	6123      	str	r3, [r4, #16]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	9a04      	ldr	r2, [sp, #16]
 8008b42:	7013      	strb	r3, [r2, #0]
 8008b44:	e7a8      	b.n	8008a98 <_printf_i+0x128>
 8008b46:	6923      	ldr	r3, [r4, #16]
 8008b48:	0032      	movs	r2, r6
 8008b4a:	9906      	ldr	r1, [sp, #24]
 8008b4c:	9805      	ldr	r0, [sp, #20]
 8008b4e:	9d07      	ldr	r5, [sp, #28]
 8008b50:	47a8      	blx	r5
 8008b52:	1c43      	adds	r3, r0, #1
 8008b54:	d0aa      	beq.n	8008aac <_printf_i+0x13c>
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	079b      	lsls	r3, r3, #30
 8008b5a:	d415      	bmi.n	8008b88 <_printf_i+0x218>
 8008b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b5e:	68e0      	ldr	r0, [r4, #12]
 8008b60:	4298      	cmp	r0, r3
 8008b62:	daa5      	bge.n	8008ab0 <_printf_i+0x140>
 8008b64:	0018      	movs	r0, r3
 8008b66:	e7a3      	b.n	8008ab0 <_printf_i+0x140>
 8008b68:	0022      	movs	r2, r4
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	9906      	ldr	r1, [sp, #24]
 8008b6e:	9805      	ldr	r0, [sp, #20]
 8008b70:	9e07      	ldr	r6, [sp, #28]
 8008b72:	3219      	adds	r2, #25
 8008b74:	47b0      	blx	r6
 8008b76:	1c43      	adds	r3, r0, #1
 8008b78:	d098      	beq.n	8008aac <_printf_i+0x13c>
 8008b7a:	3501      	adds	r5, #1
 8008b7c:	68e3      	ldr	r3, [r4, #12]
 8008b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b80:	1a9b      	subs	r3, r3, r2
 8008b82:	42ab      	cmp	r3, r5
 8008b84:	dcf0      	bgt.n	8008b68 <_printf_i+0x1f8>
 8008b86:	e7e9      	b.n	8008b5c <_printf_i+0x1ec>
 8008b88:	2500      	movs	r5, #0
 8008b8a:	e7f7      	b.n	8008b7c <_printf_i+0x20c>
 8008b8c:	0800d02e 	.word	0x0800d02e
 8008b90:	0800d03f 	.word	0x0800d03f

08008b94 <_scanf_float>:
 8008b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b96:	b08b      	sub	sp, #44	; 0x2c
 8008b98:	0015      	movs	r5, r2
 8008b9a:	9001      	str	r0, [sp, #4]
 8008b9c:	22ae      	movs	r2, #174	; 0xae
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	9306      	str	r3, [sp, #24]
 8008ba2:	688b      	ldr	r3, [r1, #8]
 8008ba4:	000e      	movs	r6, r1
 8008ba6:	1e59      	subs	r1, r3, #1
 8008ba8:	0052      	lsls	r2, r2, #1
 8008baa:	9005      	str	r0, [sp, #20]
 8008bac:	4291      	cmp	r1, r2
 8008bae:	d905      	bls.n	8008bbc <_scanf_float+0x28>
 8008bb0:	3b5e      	subs	r3, #94	; 0x5e
 8008bb2:	3bff      	subs	r3, #255	; 0xff
 8008bb4:	9305      	str	r3, [sp, #20]
 8008bb6:	235e      	movs	r3, #94	; 0x5e
 8008bb8:	33ff      	adds	r3, #255	; 0xff
 8008bba:	60b3      	str	r3, [r6, #8]
 8008bbc:	23f0      	movs	r3, #240	; 0xf0
 8008bbe:	6832      	ldr	r2, [r6, #0]
 8008bc0:	00db      	lsls	r3, r3, #3
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	6033      	str	r3, [r6, #0]
 8008bc6:	0033      	movs	r3, r6
 8008bc8:	2400      	movs	r4, #0
 8008bca:	331c      	adds	r3, #28
 8008bcc:	001f      	movs	r7, r3
 8008bce:	9303      	str	r3, [sp, #12]
 8008bd0:	9402      	str	r4, [sp, #8]
 8008bd2:	9408      	str	r4, [sp, #32]
 8008bd4:	9407      	str	r4, [sp, #28]
 8008bd6:	9400      	str	r4, [sp, #0]
 8008bd8:	9404      	str	r4, [sp, #16]
 8008bda:	68b2      	ldr	r2, [r6, #8]
 8008bdc:	2a00      	cmp	r2, #0
 8008bde:	d00a      	beq.n	8008bf6 <_scanf_float+0x62>
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	2b4e      	cmp	r3, #78	; 0x4e
 8008be6:	d844      	bhi.n	8008c72 <_scanf_float+0xde>
 8008be8:	0018      	movs	r0, r3
 8008bea:	2b40      	cmp	r3, #64	; 0x40
 8008bec:	d82c      	bhi.n	8008c48 <_scanf_float+0xb4>
 8008bee:	382b      	subs	r0, #43	; 0x2b
 8008bf0:	b2c1      	uxtb	r1, r0
 8008bf2:	290e      	cmp	r1, #14
 8008bf4:	d92a      	bls.n	8008c4c <_scanf_float+0xb8>
 8008bf6:	9b00      	ldr	r3, [sp, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d003      	beq.n	8008c04 <_scanf_float+0x70>
 8008bfc:	6832      	ldr	r2, [r6, #0]
 8008bfe:	4ba4      	ldr	r3, [pc, #656]	; (8008e90 <_scanf_float+0x2fc>)
 8008c00:	4013      	ands	r3, r2
 8008c02:	6033      	str	r3, [r6, #0]
 8008c04:	9b02      	ldr	r3, [sp, #8]
 8008c06:	3b01      	subs	r3, #1
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d900      	bls.n	8008c0e <_scanf_float+0x7a>
 8008c0c:	e0f9      	b.n	8008e02 <_scanf_float+0x26e>
 8008c0e:	24be      	movs	r4, #190	; 0xbe
 8008c10:	0064      	lsls	r4, r4, #1
 8008c12:	9b03      	ldr	r3, [sp, #12]
 8008c14:	429f      	cmp	r7, r3
 8008c16:	d900      	bls.n	8008c1a <_scanf_float+0x86>
 8008c18:	e0e9      	b.n	8008dee <_scanf_float+0x25a>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	9302      	str	r3, [sp, #8]
 8008c1e:	e185      	b.n	8008f2c <_scanf_float+0x398>
 8008c20:	0018      	movs	r0, r3
 8008c22:	3861      	subs	r0, #97	; 0x61
 8008c24:	280d      	cmp	r0, #13
 8008c26:	d8e6      	bhi.n	8008bf6 <_scanf_float+0x62>
 8008c28:	f7f7 fa80 	bl	800012c <__gnu_thumb1_case_shi>
 8008c2c:	ffe50083 	.word	0xffe50083
 8008c30:	ffe5ffe5 	.word	0xffe5ffe5
 8008c34:	00a200b6 	.word	0x00a200b6
 8008c38:	ffe5ffe5 	.word	0xffe5ffe5
 8008c3c:	ffe50089 	.word	0xffe50089
 8008c40:	ffe5ffe5 	.word	0xffe5ffe5
 8008c44:	0065ffe5 	.word	0x0065ffe5
 8008c48:	3841      	subs	r0, #65	; 0x41
 8008c4a:	e7eb      	b.n	8008c24 <_scanf_float+0x90>
 8008c4c:	280e      	cmp	r0, #14
 8008c4e:	d8d2      	bhi.n	8008bf6 <_scanf_float+0x62>
 8008c50:	f7f7 fa6c 	bl	800012c <__gnu_thumb1_case_shi>
 8008c54:	ffd1004b 	.word	0xffd1004b
 8008c58:	0098004b 	.word	0x0098004b
 8008c5c:	0020ffd1 	.word	0x0020ffd1
 8008c60:	00400040 	.word	0x00400040
 8008c64:	00400040 	.word	0x00400040
 8008c68:	00400040 	.word	0x00400040
 8008c6c:	00400040 	.word	0x00400040
 8008c70:	0040      	.short	0x0040
 8008c72:	2b6e      	cmp	r3, #110	; 0x6e
 8008c74:	d809      	bhi.n	8008c8a <_scanf_float+0xf6>
 8008c76:	2b60      	cmp	r3, #96	; 0x60
 8008c78:	d8d2      	bhi.n	8008c20 <_scanf_float+0x8c>
 8008c7a:	2b54      	cmp	r3, #84	; 0x54
 8008c7c:	d07d      	beq.n	8008d7a <_scanf_float+0x1e6>
 8008c7e:	2b59      	cmp	r3, #89	; 0x59
 8008c80:	d1b9      	bne.n	8008bf6 <_scanf_float+0x62>
 8008c82:	2c07      	cmp	r4, #7
 8008c84:	d1b7      	bne.n	8008bf6 <_scanf_float+0x62>
 8008c86:	2408      	movs	r4, #8
 8008c88:	e02c      	b.n	8008ce4 <_scanf_float+0x150>
 8008c8a:	2b74      	cmp	r3, #116	; 0x74
 8008c8c:	d075      	beq.n	8008d7a <_scanf_float+0x1e6>
 8008c8e:	2b79      	cmp	r3, #121	; 0x79
 8008c90:	d0f7      	beq.n	8008c82 <_scanf_float+0xee>
 8008c92:	e7b0      	b.n	8008bf6 <_scanf_float+0x62>
 8008c94:	6831      	ldr	r1, [r6, #0]
 8008c96:	05c8      	lsls	r0, r1, #23
 8008c98:	d51c      	bpl.n	8008cd4 <_scanf_float+0x140>
 8008c9a:	2380      	movs	r3, #128	; 0x80
 8008c9c:	4399      	bics	r1, r3
 8008c9e:	9b00      	ldr	r3, [sp, #0]
 8008ca0:	6031      	str	r1, [r6, #0]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	9b05      	ldr	r3, [sp, #20]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <_scanf_float+0x120>
 8008cac:	3b01      	subs	r3, #1
 8008cae:	3201      	adds	r2, #1
 8008cb0:	9305      	str	r3, [sp, #20]
 8008cb2:	60b2      	str	r2, [r6, #8]
 8008cb4:	68b3      	ldr	r3, [r6, #8]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	60b3      	str	r3, [r6, #8]
 8008cba:	6933      	ldr	r3, [r6, #16]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	6133      	str	r3, [r6, #16]
 8008cc0:	686b      	ldr	r3, [r5, #4]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	606b      	str	r3, [r5, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	dc00      	bgt.n	8008ccc <_scanf_float+0x138>
 8008cca:	e086      	b.n	8008dda <_scanf_float+0x246>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	602b      	str	r3, [r5, #0]
 8008cd2:	e782      	b.n	8008bda <_scanf_float+0x46>
 8008cd4:	9a02      	ldr	r2, [sp, #8]
 8008cd6:	1912      	adds	r2, r2, r4
 8008cd8:	2a00      	cmp	r2, #0
 8008cda:	d18c      	bne.n	8008bf6 <_scanf_float+0x62>
 8008cdc:	4a6d      	ldr	r2, [pc, #436]	; (8008e94 <_scanf_float+0x300>)
 8008cde:	6831      	ldr	r1, [r6, #0]
 8008ce0:	400a      	ands	r2, r1
 8008ce2:	6032      	str	r2, [r6, #0]
 8008ce4:	703b      	strb	r3, [r7, #0]
 8008ce6:	3701      	adds	r7, #1
 8008ce8:	e7e4      	b.n	8008cb4 <_scanf_float+0x120>
 8008cea:	2180      	movs	r1, #128	; 0x80
 8008cec:	6832      	ldr	r2, [r6, #0]
 8008cee:	420a      	tst	r2, r1
 8008cf0:	d081      	beq.n	8008bf6 <_scanf_float+0x62>
 8008cf2:	438a      	bics	r2, r1
 8008cf4:	e7f5      	b.n	8008ce2 <_scanf_float+0x14e>
 8008cf6:	9a02      	ldr	r2, [sp, #8]
 8008cf8:	2a00      	cmp	r2, #0
 8008cfa:	d10f      	bne.n	8008d1c <_scanf_float+0x188>
 8008cfc:	9a00      	ldr	r2, [sp, #0]
 8008cfe:	2a00      	cmp	r2, #0
 8008d00:	d10f      	bne.n	8008d22 <_scanf_float+0x18e>
 8008d02:	6832      	ldr	r2, [r6, #0]
 8008d04:	21e0      	movs	r1, #224	; 0xe0
 8008d06:	0010      	movs	r0, r2
 8008d08:	00c9      	lsls	r1, r1, #3
 8008d0a:	4008      	ands	r0, r1
 8008d0c:	4288      	cmp	r0, r1
 8008d0e:	d108      	bne.n	8008d22 <_scanf_float+0x18e>
 8008d10:	4961      	ldr	r1, [pc, #388]	; (8008e98 <_scanf_float+0x304>)
 8008d12:	400a      	ands	r2, r1
 8008d14:	6032      	str	r2, [r6, #0]
 8008d16:	2201      	movs	r2, #1
 8008d18:	9202      	str	r2, [sp, #8]
 8008d1a:	e7e3      	b.n	8008ce4 <_scanf_float+0x150>
 8008d1c:	9a02      	ldr	r2, [sp, #8]
 8008d1e:	2a02      	cmp	r2, #2
 8008d20:	d059      	beq.n	8008dd6 <_scanf_float+0x242>
 8008d22:	2c01      	cmp	r4, #1
 8008d24:	d002      	beq.n	8008d2c <_scanf_float+0x198>
 8008d26:	2c04      	cmp	r4, #4
 8008d28:	d000      	beq.n	8008d2c <_scanf_float+0x198>
 8008d2a:	e764      	b.n	8008bf6 <_scanf_float+0x62>
 8008d2c:	3401      	adds	r4, #1
 8008d2e:	b2e4      	uxtb	r4, r4
 8008d30:	e7d8      	b.n	8008ce4 <_scanf_float+0x150>
 8008d32:	9a02      	ldr	r2, [sp, #8]
 8008d34:	2a01      	cmp	r2, #1
 8008d36:	d000      	beq.n	8008d3a <_scanf_float+0x1a6>
 8008d38:	e75d      	b.n	8008bf6 <_scanf_float+0x62>
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	e7ec      	b.n	8008d18 <_scanf_float+0x184>
 8008d3e:	2c00      	cmp	r4, #0
 8008d40:	d110      	bne.n	8008d64 <_scanf_float+0x1d0>
 8008d42:	9a00      	ldr	r2, [sp, #0]
 8008d44:	2a00      	cmp	r2, #0
 8008d46:	d000      	beq.n	8008d4a <_scanf_float+0x1b6>
 8008d48:	e758      	b.n	8008bfc <_scanf_float+0x68>
 8008d4a:	6832      	ldr	r2, [r6, #0]
 8008d4c:	21e0      	movs	r1, #224	; 0xe0
 8008d4e:	0010      	movs	r0, r2
 8008d50:	00c9      	lsls	r1, r1, #3
 8008d52:	4008      	ands	r0, r1
 8008d54:	4288      	cmp	r0, r1
 8008d56:	d000      	beq.n	8008d5a <_scanf_float+0x1c6>
 8008d58:	e754      	b.n	8008c04 <_scanf_float+0x70>
 8008d5a:	494f      	ldr	r1, [pc, #316]	; (8008e98 <_scanf_float+0x304>)
 8008d5c:	3401      	adds	r4, #1
 8008d5e:	400a      	ands	r2, r1
 8008d60:	6032      	str	r2, [r6, #0]
 8008d62:	e7bf      	b.n	8008ce4 <_scanf_float+0x150>
 8008d64:	21fd      	movs	r1, #253	; 0xfd
 8008d66:	1ee2      	subs	r2, r4, #3
 8008d68:	420a      	tst	r2, r1
 8008d6a:	d000      	beq.n	8008d6e <_scanf_float+0x1da>
 8008d6c:	e743      	b.n	8008bf6 <_scanf_float+0x62>
 8008d6e:	e7dd      	b.n	8008d2c <_scanf_float+0x198>
 8008d70:	2c02      	cmp	r4, #2
 8008d72:	d000      	beq.n	8008d76 <_scanf_float+0x1e2>
 8008d74:	e73f      	b.n	8008bf6 <_scanf_float+0x62>
 8008d76:	2403      	movs	r4, #3
 8008d78:	e7b4      	b.n	8008ce4 <_scanf_float+0x150>
 8008d7a:	2c06      	cmp	r4, #6
 8008d7c:	d000      	beq.n	8008d80 <_scanf_float+0x1ec>
 8008d7e:	e73a      	b.n	8008bf6 <_scanf_float+0x62>
 8008d80:	2407      	movs	r4, #7
 8008d82:	e7af      	b.n	8008ce4 <_scanf_float+0x150>
 8008d84:	6832      	ldr	r2, [r6, #0]
 8008d86:	0591      	lsls	r1, r2, #22
 8008d88:	d400      	bmi.n	8008d8c <_scanf_float+0x1f8>
 8008d8a:	e734      	b.n	8008bf6 <_scanf_float+0x62>
 8008d8c:	4943      	ldr	r1, [pc, #268]	; (8008e9c <_scanf_float+0x308>)
 8008d8e:	400a      	ands	r2, r1
 8008d90:	6032      	str	r2, [r6, #0]
 8008d92:	9a00      	ldr	r2, [sp, #0]
 8008d94:	9204      	str	r2, [sp, #16]
 8008d96:	e7a5      	b.n	8008ce4 <_scanf_float+0x150>
 8008d98:	21a0      	movs	r1, #160	; 0xa0
 8008d9a:	2080      	movs	r0, #128	; 0x80
 8008d9c:	6832      	ldr	r2, [r6, #0]
 8008d9e:	00c9      	lsls	r1, r1, #3
 8008da0:	4011      	ands	r1, r2
 8008da2:	00c0      	lsls	r0, r0, #3
 8008da4:	4281      	cmp	r1, r0
 8008da6:	d006      	beq.n	8008db6 <_scanf_float+0x222>
 8008da8:	4202      	tst	r2, r0
 8008daa:	d100      	bne.n	8008dae <_scanf_float+0x21a>
 8008dac:	e723      	b.n	8008bf6 <_scanf_float+0x62>
 8008dae:	9900      	ldr	r1, [sp, #0]
 8008db0:	2900      	cmp	r1, #0
 8008db2:	d100      	bne.n	8008db6 <_scanf_float+0x222>
 8008db4:	e726      	b.n	8008c04 <_scanf_float+0x70>
 8008db6:	0591      	lsls	r1, r2, #22
 8008db8:	d404      	bmi.n	8008dc4 <_scanf_float+0x230>
 8008dba:	9900      	ldr	r1, [sp, #0]
 8008dbc:	9804      	ldr	r0, [sp, #16]
 8008dbe:	9708      	str	r7, [sp, #32]
 8008dc0:	1a09      	subs	r1, r1, r0
 8008dc2:	9107      	str	r1, [sp, #28]
 8008dc4:	4934      	ldr	r1, [pc, #208]	; (8008e98 <_scanf_float+0x304>)
 8008dc6:	400a      	ands	r2, r1
 8008dc8:	21c0      	movs	r1, #192	; 0xc0
 8008dca:	0049      	lsls	r1, r1, #1
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	6032      	str	r2, [r6, #0]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	9200      	str	r2, [sp, #0]
 8008dd4:	e786      	b.n	8008ce4 <_scanf_float+0x150>
 8008dd6:	2203      	movs	r2, #3
 8008dd8:	e79e      	b.n	8008d18 <_scanf_float+0x184>
 8008dda:	23c0      	movs	r3, #192	; 0xc0
 8008ddc:	005b      	lsls	r3, r3, #1
 8008dde:	0029      	movs	r1, r5
 8008de0:	58f3      	ldr	r3, [r6, r3]
 8008de2:	9801      	ldr	r0, [sp, #4]
 8008de4:	4798      	blx	r3
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d100      	bne.n	8008dec <_scanf_float+0x258>
 8008dea:	e6f6      	b.n	8008bda <_scanf_float+0x46>
 8008dec:	e703      	b.n	8008bf6 <_scanf_float+0x62>
 8008dee:	3f01      	subs	r7, #1
 8008df0:	5933      	ldr	r3, [r6, r4]
 8008df2:	002a      	movs	r2, r5
 8008df4:	7839      	ldrb	r1, [r7, #0]
 8008df6:	9801      	ldr	r0, [sp, #4]
 8008df8:	4798      	blx	r3
 8008dfa:	6933      	ldr	r3, [r6, #16]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	6133      	str	r3, [r6, #16]
 8008e00:	e707      	b.n	8008c12 <_scanf_float+0x7e>
 8008e02:	1e63      	subs	r3, r4, #1
 8008e04:	2b06      	cmp	r3, #6
 8008e06:	d80e      	bhi.n	8008e26 <_scanf_float+0x292>
 8008e08:	9702      	str	r7, [sp, #8]
 8008e0a:	2c02      	cmp	r4, #2
 8008e0c:	d920      	bls.n	8008e50 <_scanf_float+0x2bc>
 8008e0e:	1be3      	subs	r3, r4, r7
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	9305      	str	r3, [sp, #20]
 8008e14:	9b02      	ldr	r3, [sp, #8]
 8008e16:	9a05      	ldr	r2, [sp, #20]
 8008e18:	189b      	adds	r3, r3, r2
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	d827      	bhi.n	8008e70 <_scanf_float+0x2dc>
 8008e20:	3c03      	subs	r4, #3
 8008e22:	b2e4      	uxtb	r4, r4
 8008e24:	1b3f      	subs	r7, r7, r4
 8008e26:	6833      	ldr	r3, [r6, #0]
 8008e28:	05da      	lsls	r2, r3, #23
 8008e2a:	d554      	bpl.n	8008ed6 <_scanf_float+0x342>
 8008e2c:	055b      	lsls	r3, r3, #21
 8008e2e:	d537      	bpl.n	8008ea0 <_scanf_float+0x30c>
 8008e30:	24be      	movs	r4, #190	; 0xbe
 8008e32:	0064      	lsls	r4, r4, #1
 8008e34:	9b03      	ldr	r3, [sp, #12]
 8008e36:	429f      	cmp	r7, r3
 8008e38:	d800      	bhi.n	8008e3c <_scanf_float+0x2a8>
 8008e3a:	e6ee      	b.n	8008c1a <_scanf_float+0x86>
 8008e3c:	3f01      	subs	r7, #1
 8008e3e:	5933      	ldr	r3, [r6, r4]
 8008e40:	002a      	movs	r2, r5
 8008e42:	7839      	ldrb	r1, [r7, #0]
 8008e44:	9801      	ldr	r0, [sp, #4]
 8008e46:	4798      	blx	r3
 8008e48:	6933      	ldr	r3, [r6, #16]
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	6133      	str	r3, [r6, #16]
 8008e4e:	e7f1      	b.n	8008e34 <_scanf_float+0x2a0>
 8008e50:	24be      	movs	r4, #190	; 0xbe
 8008e52:	0064      	lsls	r4, r4, #1
 8008e54:	9b03      	ldr	r3, [sp, #12]
 8008e56:	429f      	cmp	r7, r3
 8008e58:	d800      	bhi.n	8008e5c <_scanf_float+0x2c8>
 8008e5a:	e6de      	b.n	8008c1a <_scanf_float+0x86>
 8008e5c:	3f01      	subs	r7, #1
 8008e5e:	5933      	ldr	r3, [r6, r4]
 8008e60:	002a      	movs	r2, r5
 8008e62:	7839      	ldrb	r1, [r7, #0]
 8008e64:	9801      	ldr	r0, [sp, #4]
 8008e66:	4798      	blx	r3
 8008e68:	6933      	ldr	r3, [r6, #16]
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	6133      	str	r3, [r6, #16]
 8008e6e:	e7f1      	b.n	8008e54 <_scanf_float+0x2c0>
 8008e70:	9b02      	ldr	r3, [sp, #8]
 8008e72:	002a      	movs	r2, r5
 8008e74:	3b01      	subs	r3, #1
 8008e76:	7819      	ldrb	r1, [r3, #0]
 8008e78:	9302      	str	r3, [sp, #8]
 8008e7a:	23be      	movs	r3, #190	; 0xbe
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	58f3      	ldr	r3, [r6, r3]
 8008e80:	9801      	ldr	r0, [sp, #4]
 8008e82:	9309      	str	r3, [sp, #36]	; 0x24
 8008e84:	4798      	blx	r3
 8008e86:	6933      	ldr	r3, [r6, #16]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	6133      	str	r3, [r6, #16]
 8008e8c:	e7c2      	b.n	8008e14 <_scanf_float+0x280>
 8008e8e:	46c0      	nop			; (mov r8, r8)
 8008e90:	fffffeff 	.word	0xfffffeff
 8008e94:	fffffe7f 	.word	0xfffffe7f
 8008e98:	fffff87f 	.word	0xfffff87f
 8008e9c:	fffffd7f 	.word	0xfffffd7f
 8008ea0:	6933      	ldr	r3, [r6, #16]
 8008ea2:	1e7c      	subs	r4, r7, #1
 8008ea4:	7821      	ldrb	r1, [r4, #0]
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	6133      	str	r3, [r6, #16]
 8008eaa:	2965      	cmp	r1, #101	; 0x65
 8008eac:	d00c      	beq.n	8008ec8 <_scanf_float+0x334>
 8008eae:	2945      	cmp	r1, #69	; 0x45
 8008eb0:	d00a      	beq.n	8008ec8 <_scanf_float+0x334>
 8008eb2:	23be      	movs	r3, #190	; 0xbe
 8008eb4:	005b      	lsls	r3, r3, #1
 8008eb6:	58f3      	ldr	r3, [r6, r3]
 8008eb8:	002a      	movs	r2, r5
 8008eba:	9801      	ldr	r0, [sp, #4]
 8008ebc:	4798      	blx	r3
 8008ebe:	6933      	ldr	r3, [r6, #16]
 8008ec0:	1ebc      	subs	r4, r7, #2
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	7821      	ldrb	r1, [r4, #0]
 8008ec6:	6133      	str	r3, [r6, #16]
 8008ec8:	23be      	movs	r3, #190	; 0xbe
 8008eca:	005b      	lsls	r3, r3, #1
 8008ecc:	002a      	movs	r2, r5
 8008ece:	58f3      	ldr	r3, [r6, r3]
 8008ed0:	9801      	ldr	r0, [sp, #4]
 8008ed2:	4798      	blx	r3
 8008ed4:	0027      	movs	r7, r4
 8008ed6:	6832      	ldr	r2, [r6, #0]
 8008ed8:	2310      	movs	r3, #16
 8008eda:	0011      	movs	r1, r2
 8008edc:	4019      	ands	r1, r3
 8008ede:	9102      	str	r1, [sp, #8]
 8008ee0:	421a      	tst	r2, r3
 8008ee2:	d158      	bne.n	8008f96 <_scanf_float+0x402>
 8008ee4:	23c0      	movs	r3, #192	; 0xc0
 8008ee6:	7039      	strb	r1, [r7, #0]
 8008ee8:	6832      	ldr	r2, [r6, #0]
 8008eea:	00db      	lsls	r3, r3, #3
 8008eec:	4013      	ands	r3, r2
 8008eee:	2280      	movs	r2, #128	; 0x80
 8008ef0:	00d2      	lsls	r2, r2, #3
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d11d      	bne.n	8008f32 <_scanf_float+0x39e>
 8008ef6:	9b04      	ldr	r3, [sp, #16]
 8008ef8:	9a00      	ldr	r2, [sp, #0]
 8008efa:	9900      	ldr	r1, [sp, #0]
 8008efc:	1a9a      	subs	r2, r3, r2
 8008efe:	428b      	cmp	r3, r1
 8008f00:	d124      	bne.n	8008f4c <_scanf_float+0x3b8>
 8008f02:	2200      	movs	r2, #0
 8008f04:	9903      	ldr	r1, [sp, #12]
 8008f06:	9801      	ldr	r0, [sp, #4]
 8008f08:	f000 fe9c 	bl	8009c44 <_strtod_r>
 8008f0c:	9b06      	ldr	r3, [sp, #24]
 8008f0e:	000d      	movs	r5, r1
 8008f10:	6831      	ldr	r1, [r6, #0]
 8008f12:	0004      	movs	r4, r0
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	078a      	lsls	r2, r1, #30
 8008f18:	d525      	bpl.n	8008f66 <_scanf_float+0x3d2>
 8008f1a:	1d1a      	adds	r2, r3, #4
 8008f1c:	9906      	ldr	r1, [sp, #24]
 8008f1e:	600a      	str	r2, [r1, #0]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	601c      	str	r4, [r3, #0]
 8008f24:	605d      	str	r5, [r3, #4]
 8008f26:	68f3      	ldr	r3, [r6, #12]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	60f3      	str	r3, [r6, #12]
 8008f2c:	9802      	ldr	r0, [sp, #8]
 8008f2e:	b00b      	add	sp, #44	; 0x2c
 8008f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f32:	9b07      	ldr	r3, [sp, #28]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d0e4      	beq.n	8008f02 <_scanf_float+0x36e>
 8008f38:	9b08      	ldr	r3, [sp, #32]
 8008f3a:	9a02      	ldr	r2, [sp, #8]
 8008f3c:	1c59      	adds	r1, r3, #1
 8008f3e:	9801      	ldr	r0, [sp, #4]
 8008f40:	230a      	movs	r3, #10
 8008f42:	f000 ff15 	bl	8009d70 <_strtol_r>
 8008f46:	9b07      	ldr	r3, [sp, #28]
 8008f48:	9f08      	ldr	r7, [sp, #32]
 8008f4a:	1ac2      	subs	r2, r0, r3
 8008f4c:	0033      	movs	r3, r6
 8008f4e:	3370      	adds	r3, #112	; 0x70
 8008f50:	33ff      	adds	r3, #255	; 0xff
 8008f52:	429f      	cmp	r7, r3
 8008f54:	d302      	bcc.n	8008f5c <_scanf_float+0x3c8>
 8008f56:	0037      	movs	r7, r6
 8008f58:	376f      	adds	r7, #111	; 0x6f
 8008f5a:	37ff      	adds	r7, #255	; 0xff
 8008f5c:	0038      	movs	r0, r7
 8008f5e:	490f      	ldr	r1, [pc, #60]	; (8008f9c <_scanf_float+0x408>)
 8008f60:	f000 f824 	bl	8008fac <siprintf>
 8008f64:	e7cd      	b.n	8008f02 <_scanf_float+0x36e>
 8008f66:	1d1a      	adds	r2, r3, #4
 8008f68:	0749      	lsls	r1, r1, #29
 8008f6a:	d4d7      	bmi.n	8008f1c <_scanf_float+0x388>
 8008f6c:	9906      	ldr	r1, [sp, #24]
 8008f6e:	0020      	movs	r0, r4
 8008f70:	600a      	str	r2, [r1, #0]
 8008f72:	681f      	ldr	r7, [r3, #0]
 8008f74:	0022      	movs	r2, r4
 8008f76:	002b      	movs	r3, r5
 8008f78:	0029      	movs	r1, r5
 8008f7a:	f7f9 fc37 	bl	80027ec <__aeabi_dcmpun>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d004      	beq.n	8008f8c <_scanf_float+0x3f8>
 8008f82:	4807      	ldr	r0, [pc, #28]	; (8008fa0 <_scanf_float+0x40c>)
 8008f84:	f000 f80e 	bl	8008fa4 <nanf>
 8008f88:	6038      	str	r0, [r7, #0]
 8008f8a:	e7cc      	b.n	8008f26 <_scanf_float+0x392>
 8008f8c:	0020      	movs	r0, r4
 8008f8e:	0029      	movs	r1, r5
 8008f90:	f7f9 fd1e 	bl	80029d0 <__aeabi_d2f>
 8008f94:	e7f8      	b.n	8008f88 <_scanf_float+0x3f4>
 8008f96:	2300      	movs	r3, #0
 8008f98:	e640      	b.n	8008c1c <_scanf_float+0x88>
 8008f9a:	46c0      	nop			; (mov r8, r8)
 8008f9c:	0800d050 	.word	0x0800d050
 8008fa0:	0800d458 	.word	0x0800d458

08008fa4 <nanf>:
 8008fa4:	4800      	ldr	r0, [pc, #0]	; (8008fa8 <nanf+0x4>)
 8008fa6:	4770      	bx	lr
 8008fa8:	7fc00000 	.word	0x7fc00000

08008fac <siprintf>:
 8008fac:	b40e      	push	{r1, r2, r3}
 8008fae:	b500      	push	{lr}
 8008fb0:	490b      	ldr	r1, [pc, #44]	; (8008fe0 <siprintf+0x34>)
 8008fb2:	b09c      	sub	sp, #112	; 0x70
 8008fb4:	ab1d      	add	r3, sp, #116	; 0x74
 8008fb6:	9002      	str	r0, [sp, #8]
 8008fb8:	9006      	str	r0, [sp, #24]
 8008fba:	9107      	str	r1, [sp, #28]
 8008fbc:	9104      	str	r1, [sp, #16]
 8008fbe:	4809      	ldr	r0, [pc, #36]	; (8008fe4 <siprintf+0x38>)
 8008fc0:	4909      	ldr	r1, [pc, #36]	; (8008fe8 <siprintf+0x3c>)
 8008fc2:	cb04      	ldmia	r3!, {r2}
 8008fc4:	9105      	str	r1, [sp, #20]
 8008fc6:	6800      	ldr	r0, [r0, #0]
 8008fc8:	a902      	add	r1, sp, #8
 8008fca:	9301      	str	r3, [sp, #4]
 8008fcc:	f002 ff5c 	bl	800be88 <_svfiprintf_r>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	9a02      	ldr	r2, [sp, #8]
 8008fd4:	7013      	strb	r3, [r2, #0]
 8008fd6:	b01c      	add	sp, #112	; 0x70
 8008fd8:	bc08      	pop	{r3}
 8008fda:	b003      	add	sp, #12
 8008fdc:	4718      	bx	r3
 8008fde:	46c0      	nop			; (mov r8, r8)
 8008fe0:	7fffffff 	.word	0x7fffffff
 8008fe4:	20000030 	.word	0x20000030
 8008fe8:	ffff0208 	.word	0xffff0208

08008fec <sulp>:
 8008fec:	b570      	push	{r4, r5, r6, lr}
 8008fee:	0016      	movs	r6, r2
 8008ff0:	000d      	movs	r5, r1
 8008ff2:	f002 fc93 	bl	800b91c <__ulp>
 8008ff6:	2e00      	cmp	r6, #0
 8008ff8:	d00d      	beq.n	8009016 <sulp+0x2a>
 8008ffa:	236b      	movs	r3, #107	; 0x6b
 8008ffc:	006a      	lsls	r2, r5, #1
 8008ffe:	0d52      	lsrs	r2, r2, #21
 8009000:	1a9b      	subs	r3, r3, r2
 8009002:	2b00      	cmp	r3, #0
 8009004:	dd07      	ble.n	8009016 <sulp+0x2a>
 8009006:	2400      	movs	r4, #0
 8009008:	4a03      	ldr	r2, [pc, #12]	; (8009018 <sulp+0x2c>)
 800900a:	051b      	lsls	r3, r3, #20
 800900c:	189d      	adds	r5, r3, r2
 800900e:	002b      	movs	r3, r5
 8009010:	0022      	movs	r2, r4
 8009012:	f7f8 fded 	bl	8001bf0 <__aeabi_dmul>
 8009016:	bd70      	pop	{r4, r5, r6, pc}
 8009018:	3ff00000 	.word	0x3ff00000

0800901c <_strtod_l>:
 800901c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800901e:	001d      	movs	r5, r3
 8009020:	2300      	movs	r3, #0
 8009022:	b0a5      	sub	sp, #148	; 0x94
 8009024:	9320      	str	r3, [sp, #128]	; 0x80
 8009026:	4bac      	ldr	r3, [pc, #688]	; (80092d8 <_strtod_l+0x2bc>)
 8009028:	9005      	str	r0, [sp, #20]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	9108      	str	r1, [sp, #32]
 800902e:	0018      	movs	r0, r3
 8009030:	9307      	str	r3, [sp, #28]
 8009032:	921b      	str	r2, [sp, #108]	; 0x6c
 8009034:	f7f7 f868 	bl	8000108 <strlen>
 8009038:	2600      	movs	r6, #0
 800903a:	0004      	movs	r4, r0
 800903c:	2700      	movs	r7, #0
 800903e:	9b08      	ldr	r3, [sp, #32]
 8009040:	931f      	str	r3, [sp, #124]	; 0x7c
 8009042:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009044:	7813      	ldrb	r3, [r2, #0]
 8009046:	2b2b      	cmp	r3, #43	; 0x2b
 8009048:	d058      	beq.n	80090fc <_strtod_l+0xe0>
 800904a:	d844      	bhi.n	80090d6 <_strtod_l+0xba>
 800904c:	2b0d      	cmp	r3, #13
 800904e:	d83d      	bhi.n	80090cc <_strtod_l+0xb0>
 8009050:	2b08      	cmp	r3, #8
 8009052:	d83d      	bhi.n	80090d0 <_strtod_l+0xb4>
 8009054:	2b00      	cmp	r3, #0
 8009056:	d047      	beq.n	80090e8 <_strtod_l+0xcc>
 8009058:	2300      	movs	r3, #0
 800905a:	930e      	str	r3, [sp, #56]	; 0x38
 800905c:	2200      	movs	r2, #0
 800905e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009060:	920a      	str	r2, [sp, #40]	; 0x28
 8009062:	9306      	str	r3, [sp, #24]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	2b30      	cmp	r3, #48	; 0x30
 8009068:	d000      	beq.n	800906c <_strtod_l+0x50>
 800906a:	e07f      	b.n	800916c <_strtod_l+0x150>
 800906c:	9b06      	ldr	r3, [sp, #24]
 800906e:	3220      	adds	r2, #32
 8009070:	785b      	ldrb	r3, [r3, #1]
 8009072:	4393      	bics	r3, r2
 8009074:	2b58      	cmp	r3, #88	; 0x58
 8009076:	d000      	beq.n	800907a <_strtod_l+0x5e>
 8009078:	e06e      	b.n	8009158 <_strtod_l+0x13c>
 800907a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800907c:	9502      	str	r5, [sp, #8]
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	ab20      	add	r3, sp, #128	; 0x80
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	4a95      	ldr	r2, [pc, #596]	; (80092dc <_strtod_l+0x2c0>)
 8009086:	ab21      	add	r3, sp, #132	; 0x84
 8009088:	9805      	ldr	r0, [sp, #20]
 800908a:	a91f      	add	r1, sp, #124	; 0x7c
 800908c:	f001 fd84 	bl	800ab98 <__gethex>
 8009090:	2307      	movs	r3, #7
 8009092:	0005      	movs	r5, r0
 8009094:	0004      	movs	r4, r0
 8009096:	401d      	ands	r5, r3
 8009098:	4218      	tst	r0, r3
 800909a:	d006      	beq.n	80090aa <_strtod_l+0x8e>
 800909c:	2d06      	cmp	r5, #6
 800909e:	d12f      	bne.n	8009100 <_strtod_l+0xe4>
 80090a0:	9b06      	ldr	r3, [sp, #24]
 80090a2:	3301      	adds	r3, #1
 80090a4:	931f      	str	r3, [sp, #124]	; 0x7c
 80090a6:	2300      	movs	r3, #0
 80090a8:	930e      	str	r3, [sp, #56]	; 0x38
 80090aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <_strtod_l+0x9a>
 80090b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090b2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80090b4:	601a      	str	r2, [r3, #0]
 80090b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d01c      	beq.n	80090f6 <_strtod_l+0xda>
 80090bc:	2380      	movs	r3, #128	; 0x80
 80090be:	0032      	movs	r2, r6
 80090c0:	061b      	lsls	r3, r3, #24
 80090c2:	18fb      	adds	r3, r7, r3
 80090c4:	0010      	movs	r0, r2
 80090c6:	0019      	movs	r1, r3
 80090c8:	b025      	add	sp, #148	; 0x94
 80090ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090cc:	2b20      	cmp	r3, #32
 80090ce:	d1c3      	bne.n	8009058 <_strtod_l+0x3c>
 80090d0:	3201      	adds	r2, #1
 80090d2:	921f      	str	r2, [sp, #124]	; 0x7c
 80090d4:	e7b5      	b.n	8009042 <_strtod_l+0x26>
 80090d6:	2b2d      	cmp	r3, #45	; 0x2d
 80090d8:	d1be      	bne.n	8009058 <_strtod_l+0x3c>
 80090da:	3b2c      	subs	r3, #44	; 0x2c
 80090dc:	930e      	str	r3, [sp, #56]	; 0x38
 80090de:	1c53      	adds	r3, r2, #1
 80090e0:	931f      	str	r3, [sp, #124]	; 0x7c
 80090e2:	7853      	ldrb	r3, [r2, #1]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1b9      	bne.n	800905c <_strtod_l+0x40>
 80090e8:	9b08      	ldr	r3, [sp, #32]
 80090ea:	931f      	str	r3, [sp, #124]	; 0x7c
 80090ec:	2300      	movs	r3, #0
 80090ee:	930e      	str	r3, [sp, #56]	; 0x38
 80090f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1dc      	bne.n	80090b0 <_strtod_l+0x94>
 80090f6:	0032      	movs	r2, r6
 80090f8:	003b      	movs	r3, r7
 80090fa:	e7e3      	b.n	80090c4 <_strtod_l+0xa8>
 80090fc:	2300      	movs	r3, #0
 80090fe:	e7ed      	b.n	80090dc <_strtod_l+0xc0>
 8009100:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009102:	2a00      	cmp	r2, #0
 8009104:	d007      	beq.n	8009116 <_strtod_l+0xfa>
 8009106:	2135      	movs	r1, #53	; 0x35
 8009108:	a822      	add	r0, sp, #136	; 0x88
 800910a:	f002 fd08 	bl	800bb1e <__copybits>
 800910e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009110:	9805      	ldr	r0, [sp, #20]
 8009112:	f002 f8c3 	bl	800b29c <_Bfree>
 8009116:	1e68      	subs	r0, r5, #1
 8009118:	2804      	cmp	r0, #4
 800911a:	d806      	bhi.n	800912a <_strtod_l+0x10e>
 800911c:	f7f6 fffc 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009120:	1816030b 	.word	0x1816030b
 8009124:	0b          	.byte	0x0b
 8009125:	00          	.byte	0x00
 8009126:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009128:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800912a:	0723      	lsls	r3, r4, #28
 800912c:	d5bd      	bpl.n	80090aa <_strtod_l+0x8e>
 800912e:	2380      	movs	r3, #128	; 0x80
 8009130:	061b      	lsls	r3, r3, #24
 8009132:	431f      	orrs	r7, r3
 8009134:	e7b9      	b.n	80090aa <_strtod_l+0x8e>
 8009136:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009138:	4a69      	ldr	r2, [pc, #420]	; (80092e0 <_strtod_l+0x2c4>)
 800913a:	496a      	ldr	r1, [pc, #424]	; (80092e4 <_strtod_l+0x2c8>)
 800913c:	401a      	ands	r2, r3
 800913e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009140:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009142:	185b      	adds	r3, r3, r1
 8009144:	051b      	lsls	r3, r3, #20
 8009146:	431a      	orrs	r2, r3
 8009148:	0017      	movs	r7, r2
 800914a:	e7ee      	b.n	800912a <_strtod_l+0x10e>
 800914c:	4f66      	ldr	r7, [pc, #408]	; (80092e8 <_strtod_l+0x2cc>)
 800914e:	e7ec      	b.n	800912a <_strtod_l+0x10e>
 8009150:	2601      	movs	r6, #1
 8009152:	4f66      	ldr	r7, [pc, #408]	; (80092ec <_strtod_l+0x2d0>)
 8009154:	4276      	negs	r6, r6
 8009156:	e7e8      	b.n	800912a <_strtod_l+0x10e>
 8009158:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	921f      	str	r2, [sp, #124]	; 0x7c
 800915e:	785b      	ldrb	r3, [r3, #1]
 8009160:	2b30      	cmp	r3, #48	; 0x30
 8009162:	d0f9      	beq.n	8009158 <_strtod_l+0x13c>
 8009164:	2b00      	cmp	r3, #0
 8009166:	d0a0      	beq.n	80090aa <_strtod_l+0x8e>
 8009168:	2301      	movs	r3, #1
 800916a:	930a      	str	r3, [sp, #40]	; 0x28
 800916c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800916e:	220a      	movs	r2, #10
 8009170:	9310      	str	r3, [sp, #64]	; 0x40
 8009172:	2300      	movs	r3, #0
 8009174:	930f      	str	r3, [sp, #60]	; 0x3c
 8009176:	930b      	str	r3, [sp, #44]	; 0x2c
 8009178:	9309      	str	r3, [sp, #36]	; 0x24
 800917a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800917c:	7805      	ldrb	r5, [r0, #0]
 800917e:	002b      	movs	r3, r5
 8009180:	3b30      	subs	r3, #48	; 0x30
 8009182:	b2d9      	uxtb	r1, r3
 8009184:	2909      	cmp	r1, #9
 8009186:	d927      	bls.n	80091d8 <_strtod_l+0x1bc>
 8009188:	0022      	movs	r2, r4
 800918a:	9907      	ldr	r1, [sp, #28]
 800918c:	f002 ff94 	bl	800c0b8 <strncmp>
 8009190:	2800      	cmp	r0, #0
 8009192:	d033      	beq.n	80091fc <_strtod_l+0x1e0>
 8009194:	2000      	movs	r0, #0
 8009196:	002b      	movs	r3, r5
 8009198:	4684      	mov	ip, r0
 800919a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800919c:	900c      	str	r0, [sp, #48]	; 0x30
 800919e:	9206      	str	r2, [sp, #24]
 80091a0:	2220      	movs	r2, #32
 80091a2:	0019      	movs	r1, r3
 80091a4:	4391      	bics	r1, r2
 80091a6:	000a      	movs	r2, r1
 80091a8:	2100      	movs	r1, #0
 80091aa:	9107      	str	r1, [sp, #28]
 80091ac:	2a45      	cmp	r2, #69	; 0x45
 80091ae:	d000      	beq.n	80091b2 <_strtod_l+0x196>
 80091b0:	e0c5      	b.n	800933e <_strtod_l+0x322>
 80091b2:	9b06      	ldr	r3, [sp, #24]
 80091b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091b6:	4303      	orrs	r3, r0
 80091b8:	4313      	orrs	r3, r2
 80091ba:	428b      	cmp	r3, r1
 80091bc:	d094      	beq.n	80090e8 <_strtod_l+0xcc>
 80091be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80091c0:	9308      	str	r3, [sp, #32]
 80091c2:	3301      	adds	r3, #1
 80091c4:	931f      	str	r3, [sp, #124]	; 0x7c
 80091c6:	9b08      	ldr	r3, [sp, #32]
 80091c8:	785b      	ldrb	r3, [r3, #1]
 80091ca:	2b2b      	cmp	r3, #43	; 0x2b
 80091cc:	d076      	beq.n	80092bc <_strtod_l+0x2a0>
 80091ce:	000c      	movs	r4, r1
 80091d0:	2b2d      	cmp	r3, #45	; 0x2d
 80091d2:	d179      	bne.n	80092c8 <_strtod_l+0x2ac>
 80091d4:	2401      	movs	r4, #1
 80091d6:	e072      	b.n	80092be <_strtod_l+0x2a2>
 80091d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091da:	2908      	cmp	r1, #8
 80091dc:	dc09      	bgt.n	80091f2 <_strtod_l+0x1d6>
 80091de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091e0:	4351      	muls	r1, r2
 80091e2:	185b      	adds	r3, r3, r1
 80091e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80091e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091e8:	3001      	adds	r0, #1
 80091ea:	3301      	adds	r3, #1
 80091ec:	9309      	str	r3, [sp, #36]	; 0x24
 80091ee:	901f      	str	r0, [sp, #124]	; 0x7c
 80091f0:	e7c3      	b.n	800917a <_strtod_l+0x15e>
 80091f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80091f4:	4351      	muls	r1, r2
 80091f6:	185b      	adds	r3, r3, r1
 80091f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80091fa:	e7f4      	b.n	80091e6 <_strtod_l+0x1ca>
 80091fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80091fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009200:	191c      	adds	r4, r3, r4
 8009202:	941f      	str	r4, [sp, #124]	; 0x7c
 8009204:	7823      	ldrb	r3, [r4, #0]
 8009206:	2a00      	cmp	r2, #0
 8009208:	d039      	beq.n	800927e <_strtod_l+0x262>
 800920a:	900c      	str	r0, [sp, #48]	; 0x30
 800920c:	9206      	str	r2, [sp, #24]
 800920e:	001a      	movs	r2, r3
 8009210:	3a30      	subs	r2, #48	; 0x30
 8009212:	2a09      	cmp	r2, #9
 8009214:	d912      	bls.n	800923c <_strtod_l+0x220>
 8009216:	2201      	movs	r2, #1
 8009218:	4694      	mov	ip, r2
 800921a:	e7c1      	b.n	80091a0 <_strtod_l+0x184>
 800921c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800921e:	3001      	adds	r0, #1
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	921f      	str	r2, [sp, #124]	; 0x7c
 8009224:	785b      	ldrb	r3, [r3, #1]
 8009226:	2b30      	cmp	r3, #48	; 0x30
 8009228:	d0f8      	beq.n	800921c <_strtod_l+0x200>
 800922a:	001a      	movs	r2, r3
 800922c:	3a31      	subs	r2, #49	; 0x31
 800922e:	2a08      	cmp	r2, #8
 8009230:	d83f      	bhi.n	80092b2 <_strtod_l+0x296>
 8009232:	900c      	str	r0, [sp, #48]	; 0x30
 8009234:	2000      	movs	r0, #0
 8009236:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009238:	9006      	str	r0, [sp, #24]
 800923a:	9210      	str	r2, [sp, #64]	; 0x40
 800923c:	001a      	movs	r2, r3
 800923e:	1c41      	adds	r1, r0, #1
 8009240:	3a30      	subs	r2, #48	; 0x30
 8009242:	2b30      	cmp	r3, #48	; 0x30
 8009244:	d015      	beq.n	8009272 <_strtod_l+0x256>
 8009246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009248:	185b      	adds	r3, r3, r1
 800924a:	210a      	movs	r1, #10
 800924c:	930c      	str	r3, [sp, #48]	; 0x30
 800924e:	9b06      	ldr	r3, [sp, #24]
 8009250:	18c4      	adds	r4, r0, r3
 8009252:	42a3      	cmp	r3, r4
 8009254:	d115      	bne.n	8009282 <_strtod_l+0x266>
 8009256:	9906      	ldr	r1, [sp, #24]
 8009258:	9b06      	ldr	r3, [sp, #24]
 800925a:	3101      	adds	r1, #1
 800925c:	1809      	adds	r1, r1, r0
 800925e:	181b      	adds	r3, r3, r0
 8009260:	9106      	str	r1, [sp, #24]
 8009262:	2b08      	cmp	r3, #8
 8009264:	dc1b      	bgt.n	800929e <_strtod_l+0x282>
 8009266:	230a      	movs	r3, #10
 8009268:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800926a:	434b      	muls	r3, r1
 800926c:	2100      	movs	r1, #0
 800926e:	18d3      	adds	r3, r2, r3
 8009270:	930b      	str	r3, [sp, #44]	; 0x2c
 8009272:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009274:	0008      	movs	r0, r1
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	921f      	str	r2, [sp, #124]	; 0x7c
 800927a:	785b      	ldrb	r3, [r3, #1]
 800927c:	e7c7      	b.n	800920e <_strtod_l+0x1f2>
 800927e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009280:	e7d1      	b.n	8009226 <_strtod_l+0x20a>
 8009282:	2b08      	cmp	r3, #8
 8009284:	dc04      	bgt.n	8009290 <_strtod_l+0x274>
 8009286:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009288:	434d      	muls	r5, r1
 800928a:	950b      	str	r5, [sp, #44]	; 0x2c
 800928c:	3301      	adds	r3, #1
 800928e:	e7e0      	b.n	8009252 <_strtod_l+0x236>
 8009290:	1c5d      	adds	r5, r3, #1
 8009292:	2d10      	cmp	r5, #16
 8009294:	dcfa      	bgt.n	800928c <_strtod_l+0x270>
 8009296:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009298:	434d      	muls	r5, r1
 800929a:	950f      	str	r5, [sp, #60]	; 0x3c
 800929c:	e7f6      	b.n	800928c <_strtod_l+0x270>
 800929e:	9b06      	ldr	r3, [sp, #24]
 80092a0:	2100      	movs	r1, #0
 80092a2:	2b10      	cmp	r3, #16
 80092a4:	dce5      	bgt.n	8009272 <_strtod_l+0x256>
 80092a6:	230a      	movs	r3, #10
 80092a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80092aa:	4343      	muls	r3, r0
 80092ac:	18d3      	adds	r3, r2, r3
 80092ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80092b0:	e7df      	b.n	8009272 <_strtod_l+0x256>
 80092b2:	2200      	movs	r2, #0
 80092b4:	920c      	str	r2, [sp, #48]	; 0x30
 80092b6:	9206      	str	r2, [sp, #24]
 80092b8:	3201      	adds	r2, #1
 80092ba:	e7ad      	b.n	8009218 <_strtod_l+0x1fc>
 80092bc:	2400      	movs	r4, #0
 80092be:	9b08      	ldr	r3, [sp, #32]
 80092c0:	3302      	adds	r3, #2
 80092c2:	931f      	str	r3, [sp, #124]	; 0x7c
 80092c4:	9b08      	ldr	r3, [sp, #32]
 80092c6:	789b      	ldrb	r3, [r3, #2]
 80092c8:	001a      	movs	r2, r3
 80092ca:	3a30      	subs	r2, #48	; 0x30
 80092cc:	2a09      	cmp	r2, #9
 80092ce:	d913      	bls.n	80092f8 <_strtod_l+0x2dc>
 80092d0:	9a08      	ldr	r2, [sp, #32]
 80092d2:	921f      	str	r2, [sp, #124]	; 0x7c
 80092d4:	2200      	movs	r2, #0
 80092d6:	e031      	b.n	800933c <_strtod_l+0x320>
 80092d8:	0800d2a0 	.word	0x0800d2a0
 80092dc:	0800d058 	.word	0x0800d058
 80092e0:	ffefffff 	.word	0xffefffff
 80092e4:	00000433 	.word	0x00000433
 80092e8:	7ff00000 	.word	0x7ff00000
 80092ec:	7fffffff 	.word	0x7fffffff
 80092f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	921f      	str	r2, [sp, #124]	; 0x7c
 80092f6:	785b      	ldrb	r3, [r3, #1]
 80092f8:	2b30      	cmp	r3, #48	; 0x30
 80092fa:	d0f9      	beq.n	80092f0 <_strtod_l+0x2d4>
 80092fc:	2200      	movs	r2, #0
 80092fe:	9207      	str	r2, [sp, #28]
 8009300:	001a      	movs	r2, r3
 8009302:	3a31      	subs	r2, #49	; 0x31
 8009304:	2a08      	cmp	r2, #8
 8009306:	d81a      	bhi.n	800933e <_strtod_l+0x322>
 8009308:	3b30      	subs	r3, #48	; 0x30
 800930a:	001a      	movs	r2, r3
 800930c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800930e:	9307      	str	r3, [sp, #28]
 8009310:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009312:	1c59      	adds	r1, r3, #1
 8009314:	911f      	str	r1, [sp, #124]	; 0x7c
 8009316:	785b      	ldrb	r3, [r3, #1]
 8009318:	001d      	movs	r5, r3
 800931a:	3d30      	subs	r5, #48	; 0x30
 800931c:	2d09      	cmp	r5, #9
 800931e:	d939      	bls.n	8009394 <_strtod_l+0x378>
 8009320:	9d07      	ldr	r5, [sp, #28]
 8009322:	1b49      	subs	r1, r1, r5
 8009324:	4db0      	ldr	r5, [pc, #704]	; (80095e8 <_strtod_l+0x5cc>)
 8009326:	9507      	str	r5, [sp, #28]
 8009328:	2908      	cmp	r1, #8
 800932a:	dc03      	bgt.n	8009334 <_strtod_l+0x318>
 800932c:	9207      	str	r2, [sp, #28]
 800932e:	42aa      	cmp	r2, r5
 8009330:	dd00      	ble.n	8009334 <_strtod_l+0x318>
 8009332:	9507      	str	r5, [sp, #28]
 8009334:	2c00      	cmp	r4, #0
 8009336:	d002      	beq.n	800933e <_strtod_l+0x322>
 8009338:	9a07      	ldr	r2, [sp, #28]
 800933a:	4252      	negs	r2, r2
 800933c:	9207      	str	r2, [sp, #28]
 800933e:	9a06      	ldr	r2, [sp, #24]
 8009340:	2a00      	cmp	r2, #0
 8009342:	d14b      	bne.n	80093dc <_strtod_l+0x3c0>
 8009344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009346:	4310      	orrs	r0, r2
 8009348:	d000      	beq.n	800934c <_strtod_l+0x330>
 800934a:	e6ae      	b.n	80090aa <_strtod_l+0x8e>
 800934c:	4662      	mov	r2, ip
 800934e:	2a00      	cmp	r2, #0
 8009350:	d000      	beq.n	8009354 <_strtod_l+0x338>
 8009352:	e6c9      	b.n	80090e8 <_strtod_l+0xcc>
 8009354:	2b69      	cmp	r3, #105	; 0x69
 8009356:	d025      	beq.n	80093a4 <_strtod_l+0x388>
 8009358:	dc21      	bgt.n	800939e <_strtod_l+0x382>
 800935a:	2b49      	cmp	r3, #73	; 0x49
 800935c:	d022      	beq.n	80093a4 <_strtod_l+0x388>
 800935e:	2b4e      	cmp	r3, #78	; 0x4e
 8009360:	d000      	beq.n	8009364 <_strtod_l+0x348>
 8009362:	e6c1      	b.n	80090e8 <_strtod_l+0xcc>
 8009364:	49a1      	ldr	r1, [pc, #644]	; (80095ec <_strtod_l+0x5d0>)
 8009366:	a81f      	add	r0, sp, #124	; 0x7c
 8009368:	f001 fe64 	bl	800b034 <__match>
 800936c:	2800      	cmp	r0, #0
 800936e:	d100      	bne.n	8009372 <_strtod_l+0x356>
 8009370:	e6ba      	b.n	80090e8 <_strtod_l+0xcc>
 8009372:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	2b28      	cmp	r3, #40	; 0x28
 8009378:	d12a      	bne.n	80093d0 <_strtod_l+0x3b4>
 800937a:	499d      	ldr	r1, [pc, #628]	; (80095f0 <_strtod_l+0x5d4>)
 800937c:	aa22      	add	r2, sp, #136	; 0x88
 800937e:	a81f      	add	r0, sp, #124	; 0x7c
 8009380:	f001 fe6c 	bl	800b05c <__hexnan>
 8009384:	2805      	cmp	r0, #5
 8009386:	d123      	bne.n	80093d0 <_strtod_l+0x3b4>
 8009388:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800938a:	4a9a      	ldr	r2, [pc, #616]	; (80095f4 <_strtod_l+0x5d8>)
 800938c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800938e:	431a      	orrs	r2, r3
 8009390:	0017      	movs	r7, r2
 8009392:	e68a      	b.n	80090aa <_strtod_l+0x8e>
 8009394:	210a      	movs	r1, #10
 8009396:	434a      	muls	r2, r1
 8009398:	18d2      	adds	r2, r2, r3
 800939a:	3a30      	subs	r2, #48	; 0x30
 800939c:	e7b8      	b.n	8009310 <_strtod_l+0x2f4>
 800939e:	2b6e      	cmp	r3, #110	; 0x6e
 80093a0:	d0e0      	beq.n	8009364 <_strtod_l+0x348>
 80093a2:	e6a1      	b.n	80090e8 <_strtod_l+0xcc>
 80093a4:	4994      	ldr	r1, [pc, #592]	; (80095f8 <_strtod_l+0x5dc>)
 80093a6:	a81f      	add	r0, sp, #124	; 0x7c
 80093a8:	f001 fe44 	bl	800b034 <__match>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d100      	bne.n	80093b2 <_strtod_l+0x396>
 80093b0:	e69a      	b.n	80090e8 <_strtod_l+0xcc>
 80093b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80093b4:	4991      	ldr	r1, [pc, #580]	; (80095fc <_strtod_l+0x5e0>)
 80093b6:	3b01      	subs	r3, #1
 80093b8:	a81f      	add	r0, sp, #124	; 0x7c
 80093ba:	931f      	str	r3, [sp, #124]	; 0x7c
 80093bc:	f001 fe3a 	bl	800b034 <__match>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d102      	bne.n	80093ca <_strtod_l+0x3ae>
 80093c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80093c6:	3301      	adds	r3, #1
 80093c8:	931f      	str	r3, [sp, #124]	; 0x7c
 80093ca:	2600      	movs	r6, #0
 80093cc:	4f89      	ldr	r7, [pc, #548]	; (80095f4 <_strtod_l+0x5d8>)
 80093ce:	e66c      	b.n	80090aa <_strtod_l+0x8e>
 80093d0:	488b      	ldr	r0, [pc, #556]	; (8009600 <_strtod_l+0x5e4>)
 80093d2:	f002 fe59 	bl	800c088 <nan>
 80093d6:	0006      	movs	r6, r0
 80093d8:	000f      	movs	r7, r1
 80093da:	e666      	b.n	80090aa <_strtod_l+0x8e>
 80093dc:	9b07      	ldr	r3, [sp, #28]
 80093de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093e0:	1a9b      	subs	r3, r3, r2
 80093e2:	930a      	str	r3, [sp, #40]	; 0x28
 80093e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d101      	bne.n	80093ee <_strtod_l+0x3d2>
 80093ea:	9b06      	ldr	r3, [sp, #24]
 80093ec:	9309      	str	r3, [sp, #36]	; 0x24
 80093ee:	9c06      	ldr	r4, [sp, #24]
 80093f0:	2c10      	cmp	r4, #16
 80093f2:	dd00      	ble.n	80093f6 <_strtod_l+0x3da>
 80093f4:	2410      	movs	r4, #16
 80093f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80093f8:	f7f9 fa7c 	bl	80028f4 <__aeabi_ui2d>
 80093fc:	9b06      	ldr	r3, [sp, #24]
 80093fe:	0006      	movs	r6, r0
 8009400:	000f      	movs	r7, r1
 8009402:	2b09      	cmp	r3, #9
 8009404:	dd15      	ble.n	8009432 <_strtod_l+0x416>
 8009406:	0022      	movs	r2, r4
 8009408:	4b7e      	ldr	r3, [pc, #504]	; (8009604 <_strtod_l+0x5e8>)
 800940a:	3a09      	subs	r2, #9
 800940c:	00d2      	lsls	r2, r2, #3
 800940e:	189b      	adds	r3, r3, r2
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	f7f8 fbec 	bl	8001bf0 <__aeabi_dmul>
 8009418:	0006      	movs	r6, r0
 800941a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800941c:	000f      	movs	r7, r1
 800941e:	f7f9 fa69 	bl	80028f4 <__aeabi_ui2d>
 8009422:	0002      	movs	r2, r0
 8009424:	000b      	movs	r3, r1
 8009426:	0030      	movs	r0, r6
 8009428:	0039      	movs	r1, r7
 800942a:	f7f7 fca3 	bl	8000d74 <__aeabi_dadd>
 800942e:	0006      	movs	r6, r0
 8009430:	000f      	movs	r7, r1
 8009432:	9b06      	ldr	r3, [sp, #24]
 8009434:	2b0f      	cmp	r3, #15
 8009436:	dc39      	bgt.n	80094ac <_strtod_l+0x490>
 8009438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800943a:	2b00      	cmp	r3, #0
 800943c:	d100      	bne.n	8009440 <_strtod_l+0x424>
 800943e:	e634      	b.n	80090aa <_strtod_l+0x8e>
 8009440:	dd24      	ble.n	800948c <_strtod_l+0x470>
 8009442:	2b16      	cmp	r3, #22
 8009444:	dc09      	bgt.n	800945a <_strtod_l+0x43e>
 8009446:	496f      	ldr	r1, [pc, #444]	; (8009604 <_strtod_l+0x5e8>)
 8009448:	00db      	lsls	r3, r3, #3
 800944a:	18c9      	adds	r1, r1, r3
 800944c:	0032      	movs	r2, r6
 800944e:	6808      	ldr	r0, [r1, #0]
 8009450:	6849      	ldr	r1, [r1, #4]
 8009452:	003b      	movs	r3, r7
 8009454:	f7f8 fbcc 	bl	8001bf0 <__aeabi_dmul>
 8009458:	e7bd      	b.n	80093d6 <_strtod_l+0x3ba>
 800945a:	2325      	movs	r3, #37	; 0x25
 800945c:	9a06      	ldr	r2, [sp, #24]
 800945e:	1a9b      	subs	r3, r3, r2
 8009460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009462:	4293      	cmp	r3, r2
 8009464:	db22      	blt.n	80094ac <_strtod_l+0x490>
 8009466:	240f      	movs	r4, #15
 8009468:	9b06      	ldr	r3, [sp, #24]
 800946a:	4d66      	ldr	r5, [pc, #408]	; (8009604 <_strtod_l+0x5e8>)
 800946c:	1ae4      	subs	r4, r4, r3
 800946e:	00e1      	lsls	r1, r4, #3
 8009470:	1869      	adds	r1, r5, r1
 8009472:	0032      	movs	r2, r6
 8009474:	6808      	ldr	r0, [r1, #0]
 8009476:	6849      	ldr	r1, [r1, #4]
 8009478:	003b      	movs	r3, r7
 800947a:	f7f8 fbb9 	bl	8001bf0 <__aeabi_dmul>
 800947e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009480:	1b1c      	subs	r4, r3, r4
 8009482:	00e4      	lsls	r4, r4, #3
 8009484:	192c      	adds	r4, r5, r4
 8009486:	6822      	ldr	r2, [r4, #0]
 8009488:	6863      	ldr	r3, [r4, #4]
 800948a:	e7e3      	b.n	8009454 <_strtod_l+0x438>
 800948c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800948e:	3316      	adds	r3, #22
 8009490:	db0c      	blt.n	80094ac <_strtod_l+0x490>
 8009492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009494:	9a07      	ldr	r2, [sp, #28]
 8009496:	0030      	movs	r0, r6
 8009498:	1a9a      	subs	r2, r3, r2
 800949a:	4b5a      	ldr	r3, [pc, #360]	; (8009604 <_strtod_l+0x5e8>)
 800949c:	00d2      	lsls	r2, r2, #3
 800949e:	189b      	adds	r3, r3, r2
 80094a0:	0039      	movs	r1, r7
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	f7f7 ffa1 	bl	80013ec <__aeabi_ddiv>
 80094aa:	e794      	b.n	80093d6 <_strtod_l+0x3ba>
 80094ac:	9b06      	ldr	r3, [sp, #24]
 80094ae:	1b1c      	subs	r4, r3, r4
 80094b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094b2:	18e4      	adds	r4, r4, r3
 80094b4:	2c00      	cmp	r4, #0
 80094b6:	dd72      	ble.n	800959e <_strtod_l+0x582>
 80094b8:	230f      	movs	r3, #15
 80094ba:	0021      	movs	r1, r4
 80094bc:	4019      	ands	r1, r3
 80094be:	421c      	tst	r4, r3
 80094c0:	d00a      	beq.n	80094d8 <_strtod_l+0x4bc>
 80094c2:	00cb      	lsls	r3, r1, #3
 80094c4:	494f      	ldr	r1, [pc, #316]	; (8009604 <_strtod_l+0x5e8>)
 80094c6:	0032      	movs	r2, r6
 80094c8:	18c9      	adds	r1, r1, r3
 80094ca:	6808      	ldr	r0, [r1, #0]
 80094cc:	6849      	ldr	r1, [r1, #4]
 80094ce:	003b      	movs	r3, r7
 80094d0:	f7f8 fb8e 	bl	8001bf0 <__aeabi_dmul>
 80094d4:	0006      	movs	r6, r0
 80094d6:	000f      	movs	r7, r1
 80094d8:	230f      	movs	r3, #15
 80094da:	439c      	bics	r4, r3
 80094dc:	d04a      	beq.n	8009574 <_strtod_l+0x558>
 80094de:	3326      	adds	r3, #38	; 0x26
 80094e0:	33ff      	adds	r3, #255	; 0xff
 80094e2:	429c      	cmp	r4, r3
 80094e4:	dd22      	ble.n	800952c <_strtod_l+0x510>
 80094e6:	2300      	movs	r3, #0
 80094e8:	9306      	str	r3, [sp, #24]
 80094ea:	9307      	str	r3, [sp, #28]
 80094ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80094ee:	9309      	str	r3, [sp, #36]	; 0x24
 80094f0:	2322      	movs	r3, #34	; 0x22
 80094f2:	2600      	movs	r6, #0
 80094f4:	9a05      	ldr	r2, [sp, #20]
 80094f6:	4f3f      	ldr	r7, [pc, #252]	; (80095f4 <_strtod_l+0x5d8>)
 80094f8:	6013      	str	r3, [r2, #0]
 80094fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094fc:	42b3      	cmp	r3, r6
 80094fe:	d100      	bne.n	8009502 <_strtod_l+0x4e6>
 8009500:	e5d3      	b.n	80090aa <_strtod_l+0x8e>
 8009502:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009504:	9805      	ldr	r0, [sp, #20]
 8009506:	f001 fec9 	bl	800b29c <_Bfree>
 800950a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800950c:	9805      	ldr	r0, [sp, #20]
 800950e:	f001 fec5 	bl	800b29c <_Bfree>
 8009512:	9907      	ldr	r1, [sp, #28]
 8009514:	9805      	ldr	r0, [sp, #20]
 8009516:	f001 fec1 	bl	800b29c <_Bfree>
 800951a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800951c:	9805      	ldr	r0, [sp, #20]
 800951e:	f001 febd 	bl	800b29c <_Bfree>
 8009522:	9906      	ldr	r1, [sp, #24]
 8009524:	9805      	ldr	r0, [sp, #20]
 8009526:	f001 feb9 	bl	800b29c <_Bfree>
 800952a:	e5be      	b.n	80090aa <_strtod_l+0x8e>
 800952c:	2300      	movs	r3, #0
 800952e:	0030      	movs	r0, r6
 8009530:	0039      	movs	r1, r7
 8009532:	4d35      	ldr	r5, [pc, #212]	; (8009608 <_strtod_l+0x5ec>)
 8009534:	1124      	asrs	r4, r4, #4
 8009536:	9308      	str	r3, [sp, #32]
 8009538:	2c01      	cmp	r4, #1
 800953a:	dc1e      	bgt.n	800957a <_strtod_l+0x55e>
 800953c:	2b00      	cmp	r3, #0
 800953e:	d001      	beq.n	8009544 <_strtod_l+0x528>
 8009540:	0006      	movs	r6, r0
 8009542:	000f      	movs	r7, r1
 8009544:	4b31      	ldr	r3, [pc, #196]	; (800960c <_strtod_l+0x5f0>)
 8009546:	0032      	movs	r2, r6
 8009548:	18ff      	adds	r7, r7, r3
 800954a:	9b08      	ldr	r3, [sp, #32]
 800954c:	00dd      	lsls	r5, r3, #3
 800954e:	4b2e      	ldr	r3, [pc, #184]	; (8009608 <_strtod_l+0x5ec>)
 8009550:	195d      	adds	r5, r3, r5
 8009552:	6828      	ldr	r0, [r5, #0]
 8009554:	6869      	ldr	r1, [r5, #4]
 8009556:	003b      	movs	r3, r7
 8009558:	f7f8 fb4a 	bl	8001bf0 <__aeabi_dmul>
 800955c:	4b25      	ldr	r3, [pc, #148]	; (80095f4 <_strtod_l+0x5d8>)
 800955e:	4a2c      	ldr	r2, [pc, #176]	; (8009610 <_strtod_l+0x5f4>)
 8009560:	0006      	movs	r6, r0
 8009562:	400b      	ands	r3, r1
 8009564:	4293      	cmp	r3, r2
 8009566:	d8be      	bhi.n	80094e6 <_strtod_l+0x4ca>
 8009568:	4a2a      	ldr	r2, [pc, #168]	; (8009614 <_strtod_l+0x5f8>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d913      	bls.n	8009596 <_strtod_l+0x57a>
 800956e:	2601      	movs	r6, #1
 8009570:	4f29      	ldr	r7, [pc, #164]	; (8009618 <_strtod_l+0x5fc>)
 8009572:	4276      	negs	r6, r6
 8009574:	2300      	movs	r3, #0
 8009576:	9308      	str	r3, [sp, #32]
 8009578:	e087      	b.n	800968a <_strtod_l+0x66e>
 800957a:	2201      	movs	r2, #1
 800957c:	4214      	tst	r4, r2
 800957e:	d004      	beq.n	800958a <_strtod_l+0x56e>
 8009580:	682a      	ldr	r2, [r5, #0]
 8009582:	686b      	ldr	r3, [r5, #4]
 8009584:	f7f8 fb34 	bl	8001bf0 <__aeabi_dmul>
 8009588:	2301      	movs	r3, #1
 800958a:	9a08      	ldr	r2, [sp, #32]
 800958c:	1064      	asrs	r4, r4, #1
 800958e:	3201      	adds	r2, #1
 8009590:	9208      	str	r2, [sp, #32]
 8009592:	3508      	adds	r5, #8
 8009594:	e7d0      	b.n	8009538 <_strtod_l+0x51c>
 8009596:	23d4      	movs	r3, #212	; 0xd4
 8009598:	049b      	lsls	r3, r3, #18
 800959a:	18cf      	adds	r7, r1, r3
 800959c:	e7ea      	b.n	8009574 <_strtod_l+0x558>
 800959e:	2c00      	cmp	r4, #0
 80095a0:	d0e8      	beq.n	8009574 <_strtod_l+0x558>
 80095a2:	4264      	negs	r4, r4
 80095a4:	220f      	movs	r2, #15
 80095a6:	0023      	movs	r3, r4
 80095a8:	4013      	ands	r3, r2
 80095aa:	4214      	tst	r4, r2
 80095ac:	d00a      	beq.n	80095c4 <_strtod_l+0x5a8>
 80095ae:	00da      	lsls	r2, r3, #3
 80095b0:	4b14      	ldr	r3, [pc, #80]	; (8009604 <_strtod_l+0x5e8>)
 80095b2:	0030      	movs	r0, r6
 80095b4:	189b      	adds	r3, r3, r2
 80095b6:	0039      	movs	r1, r7
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	f7f7 ff16 	bl	80013ec <__aeabi_ddiv>
 80095c0:	0006      	movs	r6, r0
 80095c2:	000f      	movs	r7, r1
 80095c4:	1124      	asrs	r4, r4, #4
 80095c6:	d0d5      	beq.n	8009574 <_strtod_l+0x558>
 80095c8:	2c1f      	cmp	r4, #31
 80095ca:	dd27      	ble.n	800961c <_strtod_l+0x600>
 80095cc:	2300      	movs	r3, #0
 80095ce:	9306      	str	r3, [sp, #24]
 80095d0:	9307      	str	r3, [sp, #28]
 80095d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80095d4:	9309      	str	r3, [sp, #36]	; 0x24
 80095d6:	2322      	movs	r3, #34	; 0x22
 80095d8:	9a05      	ldr	r2, [sp, #20]
 80095da:	2600      	movs	r6, #0
 80095dc:	6013      	str	r3, [r2, #0]
 80095de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095e0:	2700      	movs	r7, #0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d18d      	bne.n	8009502 <_strtod_l+0x4e6>
 80095e6:	e560      	b.n	80090aa <_strtod_l+0x8e>
 80095e8:	00004e1f 	.word	0x00004e1f
 80095ec:	0800d029 	.word	0x0800d029
 80095f0:	0800d06c 	.word	0x0800d06c
 80095f4:	7ff00000 	.word	0x7ff00000
 80095f8:	0800d021 	.word	0x0800d021
 80095fc:	0800d1ac 	.word	0x0800d1ac
 8009600:	0800d458 	.word	0x0800d458
 8009604:	0800d338 	.word	0x0800d338
 8009608:	0800d310 	.word	0x0800d310
 800960c:	fcb00000 	.word	0xfcb00000
 8009610:	7ca00000 	.word	0x7ca00000
 8009614:	7c900000 	.word	0x7c900000
 8009618:	7fefffff 	.word	0x7fefffff
 800961c:	2310      	movs	r3, #16
 800961e:	0022      	movs	r2, r4
 8009620:	401a      	ands	r2, r3
 8009622:	9208      	str	r2, [sp, #32]
 8009624:	421c      	tst	r4, r3
 8009626:	d001      	beq.n	800962c <_strtod_l+0x610>
 8009628:	335a      	adds	r3, #90	; 0x5a
 800962a:	9308      	str	r3, [sp, #32]
 800962c:	0030      	movs	r0, r6
 800962e:	0039      	movs	r1, r7
 8009630:	2300      	movs	r3, #0
 8009632:	4dc5      	ldr	r5, [pc, #788]	; (8009948 <_strtod_l+0x92c>)
 8009634:	2201      	movs	r2, #1
 8009636:	4214      	tst	r4, r2
 8009638:	d004      	beq.n	8009644 <_strtod_l+0x628>
 800963a:	682a      	ldr	r2, [r5, #0]
 800963c:	686b      	ldr	r3, [r5, #4]
 800963e:	f7f8 fad7 	bl	8001bf0 <__aeabi_dmul>
 8009642:	2301      	movs	r3, #1
 8009644:	1064      	asrs	r4, r4, #1
 8009646:	3508      	adds	r5, #8
 8009648:	2c00      	cmp	r4, #0
 800964a:	d1f3      	bne.n	8009634 <_strtod_l+0x618>
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <_strtod_l+0x638>
 8009650:	0006      	movs	r6, r0
 8009652:	000f      	movs	r7, r1
 8009654:	9b08      	ldr	r3, [sp, #32]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00f      	beq.n	800967a <_strtod_l+0x65e>
 800965a:	236b      	movs	r3, #107	; 0x6b
 800965c:	007a      	lsls	r2, r7, #1
 800965e:	0d52      	lsrs	r2, r2, #21
 8009660:	0039      	movs	r1, r7
 8009662:	1a9b      	subs	r3, r3, r2
 8009664:	2b00      	cmp	r3, #0
 8009666:	dd08      	ble.n	800967a <_strtod_l+0x65e>
 8009668:	2b1f      	cmp	r3, #31
 800966a:	dc00      	bgt.n	800966e <_strtod_l+0x652>
 800966c:	e124      	b.n	80098b8 <_strtod_l+0x89c>
 800966e:	2600      	movs	r6, #0
 8009670:	2b34      	cmp	r3, #52	; 0x34
 8009672:	dc00      	bgt.n	8009676 <_strtod_l+0x65a>
 8009674:	e119      	b.n	80098aa <_strtod_l+0x88e>
 8009676:	27dc      	movs	r7, #220	; 0xdc
 8009678:	04bf      	lsls	r7, r7, #18
 800967a:	2200      	movs	r2, #0
 800967c:	2300      	movs	r3, #0
 800967e:	0030      	movs	r0, r6
 8009680:	0039      	movs	r1, r7
 8009682:	f7f6 fee3 	bl	800044c <__aeabi_dcmpeq>
 8009686:	2800      	cmp	r0, #0
 8009688:	d1a0      	bne.n	80095cc <_strtod_l+0x5b0>
 800968a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800968c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009692:	9b06      	ldr	r3, [sp, #24]
 8009694:	9805      	ldr	r0, [sp, #20]
 8009696:	f001 fe69 	bl	800b36c <__s2b>
 800969a:	900b      	str	r0, [sp, #44]	; 0x2c
 800969c:	2800      	cmp	r0, #0
 800969e:	d100      	bne.n	80096a2 <_strtod_l+0x686>
 80096a0:	e721      	b.n	80094e6 <_strtod_l+0x4ca>
 80096a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096a4:	9907      	ldr	r1, [sp, #28]
 80096a6:	17da      	asrs	r2, r3, #31
 80096a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096aa:	1a5b      	subs	r3, r3, r1
 80096ac:	401a      	ands	r2, r3
 80096ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096b0:	9215      	str	r2, [sp, #84]	; 0x54
 80096b2:	43db      	mvns	r3, r3
 80096b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096b6:	17db      	asrs	r3, r3, #31
 80096b8:	401a      	ands	r2, r3
 80096ba:	2300      	movs	r3, #0
 80096bc:	921a      	str	r2, [sp, #104]	; 0x68
 80096be:	9306      	str	r3, [sp, #24]
 80096c0:	9307      	str	r3, [sp, #28]
 80096c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096c4:	9805      	ldr	r0, [sp, #20]
 80096c6:	6859      	ldr	r1, [r3, #4]
 80096c8:	f001 fda4 	bl	800b214 <_Balloc>
 80096cc:	9009      	str	r0, [sp, #36]	; 0x24
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d100      	bne.n	80096d4 <_strtod_l+0x6b8>
 80096d2:	e70d      	b.n	80094f0 <_strtod_l+0x4d4>
 80096d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	310c      	adds	r1, #12
 80096dc:	1c9a      	adds	r2, r3, #2
 80096de:	0092      	lsls	r2, r2, #2
 80096e0:	300c      	adds	r0, #12
 80096e2:	930c      	str	r3, [sp, #48]	; 0x30
 80096e4:	f001 fd8d 	bl	800b202 <memcpy>
 80096e8:	ab22      	add	r3, sp, #136	; 0x88
 80096ea:	9301      	str	r3, [sp, #4]
 80096ec:	ab21      	add	r3, sp, #132	; 0x84
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	0032      	movs	r2, r6
 80096f2:	003b      	movs	r3, r7
 80096f4:	9805      	ldr	r0, [sp, #20]
 80096f6:	9612      	str	r6, [sp, #72]	; 0x48
 80096f8:	9713      	str	r7, [sp, #76]	; 0x4c
 80096fa:	f002 f983 	bl	800ba04 <__d2b>
 80096fe:	9020      	str	r0, [sp, #128]	; 0x80
 8009700:	2800      	cmp	r0, #0
 8009702:	d100      	bne.n	8009706 <_strtod_l+0x6ea>
 8009704:	e6f4      	b.n	80094f0 <_strtod_l+0x4d4>
 8009706:	2101      	movs	r1, #1
 8009708:	9805      	ldr	r0, [sp, #20]
 800970a:	f001 fec3 	bl	800b494 <__i2b>
 800970e:	9007      	str	r0, [sp, #28]
 8009710:	2800      	cmp	r0, #0
 8009712:	d100      	bne.n	8009716 <_strtod_l+0x6fa>
 8009714:	e6ec      	b.n	80094f0 <_strtod_l+0x4d4>
 8009716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009718:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800971a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800971c:	1ad4      	subs	r4, r2, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	db01      	blt.n	8009726 <_strtod_l+0x70a>
 8009722:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8009724:	195d      	adds	r5, r3, r5
 8009726:	9908      	ldr	r1, [sp, #32]
 8009728:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800972a:	1a5b      	subs	r3, r3, r1
 800972c:	2136      	movs	r1, #54	; 0x36
 800972e:	189b      	adds	r3, r3, r2
 8009730:	1a8a      	subs	r2, r1, r2
 8009732:	4986      	ldr	r1, [pc, #536]	; (800994c <_strtod_l+0x930>)
 8009734:	2001      	movs	r0, #1
 8009736:	468c      	mov	ip, r1
 8009738:	2100      	movs	r1, #0
 800973a:	3b01      	subs	r3, #1
 800973c:	9110      	str	r1, [sp, #64]	; 0x40
 800973e:	9014      	str	r0, [sp, #80]	; 0x50
 8009740:	4563      	cmp	r3, ip
 8009742:	da07      	bge.n	8009754 <_strtod_l+0x738>
 8009744:	4661      	mov	r1, ip
 8009746:	1ac9      	subs	r1, r1, r3
 8009748:	1a52      	subs	r2, r2, r1
 800974a:	291f      	cmp	r1, #31
 800974c:	dd00      	ble.n	8009750 <_strtod_l+0x734>
 800974e:	e0b8      	b.n	80098c2 <_strtod_l+0x8a6>
 8009750:	4088      	lsls	r0, r1
 8009752:	9014      	str	r0, [sp, #80]	; 0x50
 8009754:	18ab      	adds	r3, r5, r2
 8009756:	930c      	str	r3, [sp, #48]	; 0x30
 8009758:	18a4      	adds	r4, r4, r2
 800975a:	9b08      	ldr	r3, [sp, #32]
 800975c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800975e:	191c      	adds	r4, r3, r4
 8009760:	002b      	movs	r3, r5
 8009762:	4295      	cmp	r5, r2
 8009764:	dd00      	ble.n	8009768 <_strtod_l+0x74c>
 8009766:	0013      	movs	r3, r2
 8009768:	42a3      	cmp	r3, r4
 800976a:	dd00      	ble.n	800976e <_strtod_l+0x752>
 800976c:	0023      	movs	r3, r4
 800976e:	2b00      	cmp	r3, #0
 8009770:	dd04      	ble.n	800977c <_strtod_l+0x760>
 8009772:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009774:	1ae4      	subs	r4, r4, r3
 8009776:	1ad2      	subs	r2, r2, r3
 8009778:	920c      	str	r2, [sp, #48]	; 0x30
 800977a:	1aed      	subs	r5, r5, r3
 800977c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800977e:	2b00      	cmp	r3, #0
 8009780:	dd17      	ble.n	80097b2 <_strtod_l+0x796>
 8009782:	001a      	movs	r2, r3
 8009784:	9907      	ldr	r1, [sp, #28]
 8009786:	9805      	ldr	r0, [sp, #20]
 8009788:	f001 ff4a 	bl	800b620 <__pow5mult>
 800978c:	9007      	str	r0, [sp, #28]
 800978e:	2800      	cmp	r0, #0
 8009790:	d100      	bne.n	8009794 <_strtod_l+0x778>
 8009792:	e6ad      	b.n	80094f0 <_strtod_l+0x4d4>
 8009794:	0001      	movs	r1, r0
 8009796:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009798:	9805      	ldr	r0, [sp, #20]
 800979a:	f001 fe91 	bl	800b4c0 <__multiply>
 800979e:	900f      	str	r0, [sp, #60]	; 0x3c
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d100      	bne.n	80097a6 <_strtod_l+0x78a>
 80097a4:	e6a4      	b.n	80094f0 <_strtod_l+0x4d4>
 80097a6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80097a8:	9805      	ldr	r0, [sp, #20]
 80097aa:	f001 fd77 	bl	800b29c <_Bfree>
 80097ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097b0:	9320      	str	r3, [sp, #128]	; 0x80
 80097b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	dd00      	ble.n	80097ba <_strtod_l+0x79e>
 80097b8:	e089      	b.n	80098ce <_strtod_l+0x8b2>
 80097ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097bc:	2b00      	cmp	r3, #0
 80097be:	dd08      	ble.n	80097d2 <_strtod_l+0x7b6>
 80097c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80097c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097c4:	9805      	ldr	r0, [sp, #20]
 80097c6:	f001 ff2b 	bl	800b620 <__pow5mult>
 80097ca:	9009      	str	r0, [sp, #36]	; 0x24
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d100      	bne.n	80097d2 <_strtod_l+0x7b6>
 80097d0:	e68e      	b.n	80094f0 <_strtod_l+0x4d4>
 80097d2:	2c00      	cmp	r4, #0
 80097d4:	dd08      	ble.n	80097e8 <_strtod_l+0x7cc>
 80097d6:	0022      	movs	r2, r4
 80097d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097da:	9805      	ldr	r0, [sp, #20]
 80097dc:	f001 ff7c 	bl	800b6d8 <__lshift>
 80097e0:	9009      	str	r0, [sp, #36]	; 0x24
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d100      	bne.n	80097e8 <_strtod_l+0x7cc>
 80097e6:	e683      	b.n	80094f0 <_strtod_l+0x4d4>
 80097e8:	2d00      	cmp	r5, #0
 80097ea:	dd08      	ble.n	80097fe <_strtod_l+0x7e2>
 80097ec:	002a      	movs	r2, r5
 80097ee:	9907      	ldr	r1, [sp, #28]
 80097f0:	9805      	ldr	r0, [sp, #20]
 80097f2:	f001 ff71 	bl	800b6d8 <__lshift>
 80097f6:	9007      	str	r0, [sp, #28]
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d100      	bne.n	80097fe <_strtod_l+0x7e2>
 80097fc:	e678      	b.n	80094f0 <_strtod_l+0x4d4>
 80097fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009800:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009802:	9805      	ldr	r0, [sp, #20]
 8009804:	f001 fff2 	bl	800b7ec <__mdiff>
 8009808:	9006      	str	r0, [sp, #24]
 800980a:	2800      	cmp	r0, #0
 800980c:	d100      	bne.n	8009810 <_strtod_l+0x7f4>
 800980e:	e66f      	b.n	80094f0 <_strtod_l+0x4d4>
 8009810:	2200      	movs	r2, #0
 8009812:	68c3      	ldr	r3, [r0, #12]
 8009814:	9907      	ldr	r1, [sp, #28]
 8009816:	60c2      	str	r2, [r0, #12]
 8009818:	930f      	str	r3, [sp, #60]	; 0x3c
 800981a:	f001 ffcb 	bl	800b7b4 <__mcmp>
 800981e:	2800      	cmp	r0, #0
 8009820:	da5f      	bge.n	80098e2 <_strtod_l+0x8c6>
 8009822:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009824:	4333      	orrs	r3, r6
 8009826:	d000      	beq.n	800982a <_strtod_l+0x80e>
 8009828:	e08a      	b.n	8009940 <_strtod_l+0x924>
 800982a:	033b      	lsls	r3, r7, #12
 800982c:	d000      	beq.n	8009830 <_strtod_l+0x814>
 800982e:	e087      	b.n	8009940 <_strtod_l+0x924>
 8009830:	22d6      	movs	r2, #214	; 0xd6
 8009832:	4b47      	ldr	r3, [pc, #284]	; (8009950 <_strtod_l+0x934>)
 8009834:	04d2      	lsls	r2, r2, #19
 8009836:	403b      	ands	r3, r7
 8009838:	4293      	cmp	r3, r2
 800983a:	d800      	bhi.n	800983e <_strtod_l+0x822>
 800983c:	e080      	b.n	8009940 <_strtod_l+0x924>
 800983e:	9b06      	ldr	r3, [sp, #24]
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	930a      	str	r3, [sp, #40]	; 0x28
 8009844:	2b00      	cmp	r3, #0
 8009846:	d104      	bne.n	8009852 <_strtod_l+0x836>
 8009848:	9b06      	ldr	r3, [sp, #24]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	930a      	str	r3, [sp, #40]	; 0x28
 800984e:	2b01      	cmp	r3, #1
 8009850:	dd76      	ble.n	8009940 <_strtod_l+0x924>
 8009852:	9906      	ldr	r1, [sp, #24]
 8009854:	2201      	movs	r2, #1
 8009856:	9805      	ldr	r0, [sp, #20]
 8009858:	f001 ff3e 	bl	800b6d8 <__lshift>
 800985c:	9907      	ldr	r1, [sp, #28]
 800985e:	9006      	str	r0, [sp, #24]
 8009860:	f001 ffa8 	bl	800b7b4 <__mcmp>
 8009864:	2800      	cmp	r0, #0
 8009866:	dd6b      	ble.n	8009940 <_strtod_l+0x924>
 8009868:	9908      	ldr	r1, [sp, #32]
 800986a:	003b      	movs	r3, r7
 800986c:	4a38      	ldr	r2, [pc, #224]	; (8009950 <_strtod_l+0x934>)
 800986e:	2900      	cmp	r1, #0
 8009870:	d100      	bne.n	8009874 <_strtod_l+0x858>
 8009872:	e092      	b.n	800999a <_strtod_l+0x97e>
 8009874:	0011      	movs	r1, r2
 8009876:	20d6      	movs	r0, #214	; 0xd6
 8009878:	4039      	ands	r1, r7
 800987a:	04c0      	lsls	r0, r0, #19
 800987c:	4281      	cmp	r1, r0
 800987e:	dd00      	ble.n	8009882 <_strtod_l+0x866>
 8009880:	e08b      	b.n	800999a <_strtod_l+0x97e>
 8009882:	23dc      	movs	r3, #220	; 0xdc
 8009884:	049b      	lsls	r3, r3, #18
 8009886:	4299      	cmp	r1, r3
 8009888:	dc00      	bgt.n	800988c <_strtod_l+0x870>
 800988a:	e6a4      	b.n	80095d6 <_strtod_l+0x5ba>
 800988c:	0030      	movs	r0, r6
 800988e:	0039      	movs	r1, r7
 8009890:	2200      	movs	r2, #0
 8009892:	4b30      	ldr	r3, [pc, #192]	; (8009954 <_strtod_l+0x938>)
 8009894:	f7f8 f9ac 	bl	8001bf0 <__aeabi_dmul>
 8009898:	0006      	movs	r6, r0
 800989a:	000f      	movs	r7, r1
 800989c:	4308      	orrs	r0, r1
 800989e:	d000      	beq.n	80098a2 <_strtod_l+0x886>
 80098a0:	e62f      	b.n	8009502 <_strtod_l+0x4e6>
 80098a2:	2322      	movs	r3, #34	; 0x22
 80098a4:	9a05      	ldr	r2, [sp, #20]
 80098a6:	6013      	str	r3, [r2, #0]
 80098a8:	e62b      	b.n	8009502 <_strtod_l+0x4e6>
 80098aa:	234b      	movs	r3, #75	; 0x4b
 80098ac:	1a9a      	subs	r2, r3, r2
 80098ae:	3b4c      	subs	r3, #76	; 0x4c
 80098b0:	4093      	lsls	r3, r2
 80098b2:	4019      	ands	r1, r3
 80098b4:	000f      	movs	r7, r1
 80098b6:	e6e0      	b.n	800967a <_strtod_l+0x65e>
 80098b8:	2201      	movs	r2, #1
 80098ba:	4252      	negs	r2, r2
 80098bc:	409a      	lsls	r2, r3
 80098be:	4016      	ands	r6, r2
 80098c0:	e6db      	b.n	800967a <_strtod_l+0x65e>
 80098c2:	4925      	ldr	r1, [pc, #148]	; (8009958 <_strtod_l+0x93c>)
 80098c4:	1acb      	subs	r3, r1, r3
 80098c6:	0001      	movs	r1, r0
 80098c8:	4099      	lsls	r1, r3
 80098ca:	9110      	str	r1, [sp, #64]	; 0x40
 80098cc:	e741      	b.n	8009752 <_strtod_l+0x736>
 80098ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098d0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80098d2:	9805      	ldr	r0, [sp, #20]
 80098d4:	f001 ff00 	bl	800b6d8 <__lshift>
 80098d8:	9020      	str	r0, [sp, #128]	; 0x80
 80098da:	2800      	cmp	r0, #0
 80098dc:	d000      	beq.n	80098e0 <_strtod_l+0x8c4>
 80098de:	e76c      	b.n	80097ba <_strtod_l+0x79e>
 80098e0:	e606      	b.n	80094f0 <_strtod_l+0x4d4>
 80098e2:	970c      	str	r7, [sp, #48]	; 0x30
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d176      	bne.n	80099d6 <_strtod_l+0x9ba>
 80098e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098ea:	033b      	lsls	r3, r7, #12
 80098ec:	0b1b      	lsrs	r3, r3, #12
 80098ee:	2a00      	cmp	r2, #0
 80098f0:	d038      	beq.n	8009964 <_strtod_l+0x948>
 80098f2:	4a1a      	ldr	r2, [pc, #104]	; (800995c <_strtod_l+0x940>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d138      	bne.n	800996a <_strtod_l+0x94e>
 80098f8:	2201      	movs	r2, #1
 80098fa:	9b08      	ldr	r3, [sp, #32]
 80098fc:	4252      	negs	r2, r2
 80098fe:	0031      	movs	r1, r6
 8009900:	0010      	movs	r0, r2
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00b      	beq.n	800991e <_strtod_l+0x902>
 8009906:	24d4      	movs	r4, #212	; 0xd4
 8009908:	4b11      	ldr	r3, [pc, #68]	; (8009950 <_strtod_l+0x934>)
 800990a:	0010      	movs	r0, r2
 800990c:	403b      	ands	r3, r7
 800990e:	04e4      	lsls	r4, r4, #19
 8009910:	42a3      	cmp	r3, r4
 8009912:	d804      	bhi.n	800991e <_strtod_l+0x902>
 8009914:	306c      	adds	r0, #108	; 0x6c
 8009916:	0d1b      	lsrs	r3, r3, #20
 8009918:	1ac3      	subs	r3, r0, r3
 800991a:	409a      	lsls	r2, r3
 800991c:	0010      	movs	r0, r2
 800991e:	4281      	cmp	r1, r0
 8009920:	d123      	bne.n	800996a <_strtod_l+0x94e>
 8009922:	4b0f      	ldr	r3, [pc, #60]	; (8009960 <_strtod_l+0x944>)
 8009924:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009926:	429a      	cmp	r2, r3
 8009928:	d102      	bne.n	8009930 <_strtod_l+0x914>
 800992a:	1c4b      	adds	r3, r1, #1
 800992c:	d100      	bne.n	8009930 <_strtod_l+0x914>
 800992e:	e5df      	b.n	80094f0 <_strtod_l+0x4d4>
 8009930:	4b07      	ldr	r3, [pc, #28]	; (8009950 <_strtod_l+0x934>)
 8009932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009934:	2600      	movs	r6, #0
 8009936:	401a      	ands	r2, r3
 8009938:	0013      	movs	r3, r2
 800993a:	2280      	movs	r2, #128	; 0x80
 800993c:	0352      	lsls	r2, r2, #13
 800993e:	189f      	adds	r7, r3, r2
 8009940:	9b08      	ldr	r3, [sp, #32]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1a2      	bne.n	800988c <_strtod_l+0x870>
 8009946:	e5dc      	b.n	8009502 <_strtod_l+0x4e6>
 8009948:	0800d080 	.word	0x0800d080
 800994c:	fffffc02 	.word	0xfffffc02
 8009950:	7ff00000 	.word	0x7ff00000
 8009954:	39500000 	.word	0x39500000
 8009958:	fffffbe2 	.word	0xfffffbe2
 800995c:	000fffff 	.word	0x000fffff
 8009960:	7fefffff 	.word	0x7fefffff
 8009964:	4333      	orrs	r3, r6
 8009966:	d100      	bne.n	800996a <_strtod_l+0x94e>
 8009968:	e77e      	b.n	8009868 <_strtod_l+0x84c>
 800996a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800996c:	2b00      	cmp	r3, #0
 800996e:	d01d      	beq.n	80099ac <_strtod_l+0x990>
 8009970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009972:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009974:	4213      	tst	r3, r2
 8009976:	d0e3      	beq.n	8009940 <_strtod_l+0x924>
 8009978:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800997a:	0030      	movs	r0, r6
 800997c:	0039      	movs	r1, r7
 800997e:	9a08      	ldr	r2, [sp, #32]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d017      	beq.n	80099b4 <_strtod_l+0x998>
 8009984:	f7ff fb32 	bl	8008fec <sulp>
 8009988:	0002      	movs	r2, r0
 800998a:	000b      	movs	r3, r1
 800998c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800998e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009990:	f7f7 f9f0 	bl	8000d74 <__aeabi_dadd>
 8009994:	0006      	movs	r6, r0
 8009996:	000f      	movs	r7, r1
 8009998:	e7d2      	b.n	8009940 <_strtod_l+0x924>
 800999a:	2601      	movs	r6, #1
 800999c:	4013      	ands	r3, r2
 800999e:	4a99      	ldr	r2, [pc, #612]	; (8009c04 <_strtod_l+0xbe8>)
 80099a0:	4276      	negs	r6, r6
 80099a2:	189b      	adds	r3, r3, r2
 80099a4:	4a98      	ldr	r2, [pc, #608]	; (8009c08 <_strtod_l+0xbec>)
 80099a6:	431a      	orrs	r2, r3
 80099a8:	0017      	movs	r7, r2
 80099aa:	e7c9      	b.n	8009940 <_strtod_l+0x924>
 80099ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099ae:	4233      	tst	r3, r6
 80099b0:	d0c6      	beq.n	8009940 <_strtod_l+0x924>
 80099b2:	e7e1      	b.n	8009978 <_strtod_l+0x95c>
 80099b4:	f7ff fb1a 	bl	8008fec <sulp>
 80099b8:	0002      	movs	r2, r0
 80099ba:	000b      	movs	r3, r1
 80099bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80099be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80099c0:	f7f8 fb82 	bl	80020c8 <__aeabi_dsub>
 80099c4:	2200      	movs	r2, #0
 80099c6:	2300      	movs	r3, #0
 80099c8:	0006      	movs	r6, r0
 80099ca:	000f      	movs	r7, r1
 80099cc:	f7f6 fd3e 	bl	800044c <__aeabi_dcmpeq>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d0b5      	beq.n	8009940 <_strtod_l+0x924>
 80099d4:	e5ff      	b.n	80095d6 <_strtod_l+0x5ba>
 80099d6:	9907      	ldr	r1, [sp, #28]
 80099d8:	9806      	ldr	r0, [sp, #24]
 80099da:	f002 f877 	bl	800bacc <__ratio>
 80099de:	2380      	movs	r3, #128	; 0x80
 80099e0:	2200      	movs	r2, #0
 80099e2:	05db      	lsls	r3, r3, #23
 80099e4:	0004      	movs	r4, r0
 80099e6:	000d      	movs	r5, r1
 80099e8:	f7f6 fd40 	bl	800046c <__aeabi_dcmple>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d075      	beq.n	8009adc <_strtod_l+0xac0>
 80099f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d047      	beq.n	8009a86 <_strtod_l+0xa6a>
 80099f6:	2300      	movs	r3, #0
 80099f8:	4c84      	ldr	r4, [pc, #528]	; (8009c0c <_strtod_l+0xbf0>)
 80099fa:	2500      	movs	r5, #0
 80099fc:	9310      	str	r3, [sp, #64]	; 0x40
 80099fe:	9411      	str	r4, [sp, #68]	; 0x44
 8009a00:	4c82      	ldr	r4, [pc, #520]	; (8009c0c <_strtod_l+0xbf0>)
 8009a02:	4a83      	ldr	r2, [pc, #524]	; (8009c10 <_strtod_l+0xbf4>)
 8009a04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a06:	4013      	ands	r3, r2
 8009a08:	9314      	str	r3, [sp, #80]	; 0x50
 8009a0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a0c:	4b81      	ldr	r3, [pc, #516]	; (8009c14 <_strtod_l+0xbf8>)
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d000      	beq.n	8009a14 <_strtod_l+0x9f8>
 8009a12:	e0ac      	b.n	8009b6e <_strtod_l+0xb52>
 8009a14:	4a80      	ldr	r2, [pc, #512]	; (8009c18 <_strtod_l+0xbfc>)
 8009a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a18:	4694      	mov	ip, r2
 8009a1a:	4463      	add	r3, ip
 8009a1c:	001f      	movs	r7, r3
 8009a1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a22:	0030      	movs	r0, r6
 8009a24:	0039      	movs	r1, r7
 8009a26:	920c      	str	r2, [sp, #48]	; 0x30
 8009a28:	930d      	str	r3, [sp, #52]	; 0x34
 8009a2a:	f001 ff77 	bl	800b91c <__ulp>
 8009a2e:	0002      	movs	r2, r0
 8009a30:	000b      	movs	r3, r1
 8009a32:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009a34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a36:	f7f8 f8db 	bl	8001bf0 <__aeabi_dmul>
 8009a3a:	0032      	movs	r2, r6
 8009a3c:	003b      	movs	r3, r7
 8009a3e:	f7f7 f999 	bl	8000d74 <__aeabi_dadd>
 8009a42:	4a73      	ldr	r2, [pc, #460]	; (8009c10 <_strtod_l+0xbf4>)
 8009a44:	4b75      	ldr	r3, [pc, #468]	; (8009c1c <_strtod_l+0xc00>)
 8009a46:	0006      	movs	r6, r0
 8009a48:	400a      	ands	r2, r1
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d95e      	bls.n	8009b0c <_strtod_l+0xaf0>
 8009a4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a50:	4b73      	ldr	r3, [pc, #460]	; (8009c20 <_strtod_l+0xc04>)
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d103      	bne.n	8009a5e <_strtod_l+0xa42>
 8009a56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a58:	3301      	adds	r3, #1
 8009a5a:	d100      	bne.n	8009a5e <_strtod_l+0xa42>
 8009a5c:	e548      	b.n	80094f0 <_strtod_l+0x4d4>
 8009a5e:	2601      	movs	r6, #1
 8009a60:	4f6f      	ldr	r7, [pc, #444]	; (8009c20 <_strtod_l+0xc04>)
 8009a62:	4276      	negs	r6, r6
 8009a64:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009a66:	9805      	ldr	r0, [sp, #20]
 8009a68:	f001 fc18 	bl	800b29c <_Bfree>
 8009a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a6e:	9805      	ldr	r0, [sp, #20]
 8009a70:	f001 fc14 	bl	800b29c <_Bfree>
 8009a74:	9907      	ldr	r1, [sp, #28]
 8009a76:	9805      	ldr	r0, [sp, #20]
 8009a78:	f001 fc10 	bl	800b29c <_Bfree>
 8009a7c:	9906      	ldr	r1, [sp, #24]
 8009a7e:	9805      	ldr	r0, [sp, #20]
 8009a80:	f001 fc0c 	bl	800b29c <_Bfree>
 8009a84:	e61d      	b.n	80096c2 <_strtod_l+0x6a6>
 8009a86:	2e00      	cmp	r6, #0
 8009a88:	d11c      	bne.n	8009ac4 <_strtod_l+0xaa8>
 8009a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a8c:	031b      	lsls	r3, r3, #12
 8009a8e:	d11f      	bne.n	8009ad0 <_strtod_l+0xab4>
 8009a90:	2200      	movs	r2, #0
 8009a92:	0020      	movs	r0, r4
 8009a94:	0029      	movs	r1, r5
 8009a96:	4b5d      	ldr	r3, [pc, #372]	; (8009c0c <_strtod_l+0xbf0>)
 8009a98:	f7f6 fcde 	bl	8000458 <__aeabi_dcmplt>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d11a      	bne.n	8009ad6 <_strtod_l+0xaba>
 8009aa0:	0020      	movs	r0, r4
 8009aa2:	0029      	movs	r1, r5
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	4b5f      	ldr	r3, [pc, #380]	; (8009c24 <_strtod_l+0xc08>)
 8009aa8:	f7f8 f8a2 	bl	8001bf0 <__aeabi_dmul>
 8009aac:	0005      	movs	r5, r0
 8009aae:	000c      	movs	r4, r1
 8009ab0:	2380      	movs	r3, #128	; 0x80
 8009ab2:	061b      	lsls	r3, r3, #24
 8009ab4:	18e3      	adds	r3, r4, r3
 8009ab6:	951c      	str	r5, [sp, #112]	; 0x70
 8009ab8:	931d      	str	r3, [sp, #116]	; 0x74
 8009aba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009abc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009abe:	9210      	str	r2, [sp, #64]	; 0x40
 8009ac0:	9311      	str	r3, [sp, #68]	; 0x44
 8009ac2:	e79e      	b.n	8009a02 <_strtod_l+0x9e6>
 8009ac4:	2e01      	cmp	r6, #1
 8009ac6:	d103      	bne.n	8009ad0 <_strtod_l+0xab4>
 8009ac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d100      	bne.n	8009ad0 <_strtod_l+0xab4>
 8009ace:	e582      	b.n	80095d6 <_strtod_l+0x5ba>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	4c55      	ldr	r4, [pc, #340]	; (8009c28 <_strtod_l+0xc0c>)
 8009ad4:	e791      	b.n	80099fa <_strtod_l+0x9de>
 8009ad6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009ad8:	4c52      	ldr	r4, [pc, #328]	; (8009c24 <_strtod_l+0xc08>)
 8009ada:	e7e9      	b.n	8009ab0 <_strtod_l+0xa94>
 8009adc:	2200      	movs	r2, #0
 8009ade:	0020      	movs	r0, r4
 8009ae0:	0029      	movs	r1, r5
 8009ae2:	4b50      	ldr	r3, [pc, #320]	; (8009c24 <_strtod_l+0xc08>)
 8009ae4:	f7f8 f884 	bl	8001bf0 <__aeabi_dmul>
 8009ae8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009aea:	0005      	movs	r5, r0
 8009aec:	000b      	movs	r3, r1
 8009aee:	000c      	movs	r4, r1
 8009af0:	2a00      	cmp	r2, #0
 8009af2:	d107      	bne.n	8009b04 <_strtod_l+0xae8>
 8009af4:	2280      	movs	r2, #128	; 0x80
 8009af6:	0612      	lsls	r2, r2, #24
 8009af8:	188b      	adds	r3, r1, r2
 8009afa:	9016      	str	r0, [sp, #88]	; 0x58
 8009afc:	9317      	str	r3, [sp, #92]	; 0x5c
 8009afe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009b00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b02:	e7dc      	b.n	8009abe <_strtod_l+0xaa2>
 8009b04:	0002      	movs	r2, r0
 8009b06:	9216      	str	r2, [sp, #88]	; 0x58
 8009b08:	9317      	str	r3, [sp, #92]	; 0x5c
 8009b0a:	e7f8      	b.n	8009afe <_strtod_l+0xae2>
 8009b0c:	23d4      	movs	r3, #212	; 0xd4
 8009b0e:	049b      	lsls	r3, r3, #18
 8009b10:	18cf      	adds	r7, r1, r3
 8009b12:	9b08      	ldr	r3, [sp, #32]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1a5      	bne.n	8009a64 <_strtod_l+0xa48>
 8009b18:	4b3d      	ldr	r3, [pc, #244]	; (8009c10 <_strtod_l+0xbf4>)
 8009b1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b1c:	403b      	ands	r3, r7
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d1a0      	bne.n	8009a64 <_strtod_l+0xa48>
 8009b22:	0028      	movs	r0, r5
 8009b24:	0021      	movs	r1, r4
 8009b26:	f7f6 fd2f 	bl	8000588 <__aeabi_d2lz>
 8009b2a:	f7f6 fd69 	bl	8000600 <__aeabi_l2d>
 8009b2e:	0002      	movs	r2, r0
 8009b30:	000b      	movs	r3, r1
 8009b32:	0028      	movs	r0, r5
 8009b34:	0021      	movs	r1, r4
 8009b36:	f7f8 fac7 	bl	80020c8 <__aeabi_dsub>
 8009b3a:	033b      	lsls	r3, r7, #12
 8009b3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b3e:	0b1b      	lsrs	r3, r3, #12
 8009b40:	4333      	orrs	r3, r6
 8009b42:	4313      	orrs	r3, r2
 8009b44:	0004      	movs	r4, r0
 8009b46:	000d      	movs	r5, r1
 8009b48:	4a38      	ldr	r2, [pc, #224]	; (8009c2c <_strtod_l+0xc10>)
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d055      	beq.n	8009bfa <_strtod_l+0xbde>
 8009b4e:	4b38      	ldr	r3, [pc, #224]	; (8009c30 <_strtod_l+0xc14>)
 8009b50:	f7f6 fc82 	bl	8000458 <__aeabi_dcmplt>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d000      	beq.n	8009b5a <_strtod_l+0xb3e>
 8009b58:	e4d3      	b.n	8009502 <_strtod_l+0x4e6>
 8009b5a:	0020      	movs	r0, r4
 8009b5c:	0029      	movs	r1, r5
 8009b5e:	4a35      	ldr	r2, [pc, #212]	; (8009c34 <_strtod_l+0xc18>)
 8009b60:	4b30      	ldr	r3, [pc, #192]	; (8009c24 <_strtod_l+0xc08>)
 8009b62:	f7f6 fc8d 	bl	8000480 <__aeabi_dcmpgt>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d100      	bne.n	8009b6c <_strtod_l+0xb50>
 8009b6a:	e77b      	b.n	8009a64 <_strtod_l+0xa48>
 8009b6c:	e4c9      	b.n	8009502 <_strtod_l+0x4e6>
 8009b6e:	9b08      	ldr	r3, [sp, #32]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d02b      	beq.n	8009bcc <_strtod_l+0xbb0>
 8009b74:	23d4      	movs	r3, #212	; 0xd4
 8009b76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b78:	04db      	lsls	r3, r3, #19
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d826      	bhi.n	8009bcc <_strtod_l+0xbb0>
 8009b7e:	0028      	movs	r0, r5
 8009b80:	0021      	movs	r1, r4
 8009b82:	4a2d      	ldr	r2, [pc, #180]	; (8009c38 <_strtod_l+0xc1c>)
 8009b84:	4b2d      	ldr	r3, [pc, #180]	; (8009c3c <_strtod_l+0xc20>)
 8009b86:	f7f6 fc71 	bl	800046c <__aeabi_dcmple>
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	d017      	beq.n	8009bbe <_strtod_l+0xba2>
 8009b8e:	0028      	movs	r0, r5
 8009b90:	0021      	movs	r1, r4
 8009b92:	f7f6 fcdb 	bl	800054c <__aeabi_d2uiz>
 8009b96:	2800      	cmp	r0, #0
 8009b98:	d100      	bne.n	8009b9c <_strtod_l+0xb80>
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	f7f8 feaa 	bl	80028f4 <__aeabi_ui2d>
 8009ba0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ba2:	0005      	movs	r5, r0
 8009ba4:	000b      	movs	r3, r1
 8009ba6:	000c      	movs	r4, r1
 8009ba8:	2a00      	cmp	r2, #0
 8009baa:	d122      	bne.n	8009bf2 <_strtod_l+0xbd6>
 8009bac:	2280      	movs	r2, #128	; 0x80
 8009bae:	0612      	lsls	r2, r2, #24
 8009bb0:	188b      	adds	r3, r1, r2
 8009bb2:	9018      	str	r0, [sp, #96]	; 0x60
 8009bb4:	9319      	str	r3, [sp, #100]	; 0x64
 8009bb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009bb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009bba:	9210      	str	r2, [sp, #64]	; 0x40
 8009bbc:	9311      	str	r3, [sp, #68]	; 0x44
 8009bbe:	22d6      	movs	r2, #214	; 0xd6
 8009bc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bc2:	04d2      	lsls	r2, r2, #19
 8009bc4:	189b      	adds	r3, r3, r2
 8009bc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009bc8:	1a9b      	subs	r3, r3, r2
 8009bca:	9311      	str	r3, [sp, #68]	; 0x44
 8009bcc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009bce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009bd0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8009bd2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8009bd4:	f001 fea2 	bl	800b91c <__ulp>
 8009bd8:	0002      	movs	r2, r0
 8009bda:	000b      	movs	r3, r1
 8009bdc:	0030      	movs	r0, r6
 8009bde:	0039      	movs	r1, r7
 8009be0:	f7f8 f806 	bl	8001bf0 <__aeabi_dmul>
 8009be4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009be6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009be8:	f7f7 f8c4 	bl	8000d74 <__aeabi_dadd>
 8009bec:	0006      	movs	r6, r0
 8009bee:	000f      	movs	r7, r1
 8009bf0:	e78f      	b.n	8009b12 <_strtod_l+0xaf6>
 8009bf2:	0002      	movs	r2, r0
 8009bf4:	9218      	str	r2, [sp, #96]	; 0x60
 8009bf6:	9319      	str	r3, [sp, #100]	; 0x64
 8009bf8:	e7dd      	b.n	8009bb6 <_strtod_l+0xb9a>
 8009bfa:	4b11      	ldr	r3, [pc, #68]	; (8009c40 <_strtod_l+0xc24>)
 8009bfc:	f7f6 fc2c 	bl	8000458 <__aeabi_dcmplt>
 8009c00:	e7b1      	b.n	8009b66 <_strtod_l+0xb4a>
 8009c02:	46c0      	nop			; (mov r8, r8)
 8009c04:	fff00000 	.word	0xfff00000
 8009c08:	000fffff 	.word	0x000fffff
 8009c0c:	3ff00000 	.word	0x3ff00000
 8009c10:	7ff00000 	.word	0x7ff00000
 8009c14:	7fe00000 	.word	0x7fe00000
 8009c18:	fcb00000 	.word	0xfcb00000
 8009c1c:	7c9fffff 	.word	0x7c9fffff
 8009c20:	7fefffff 	.word	0x7fefffff
 8009c24:	3fe00000 	.word	0x3fe00000
 8009c28:	bff00000 	.word	0xbff00000
 8009c2c:	94a03595 	.word	0x94a03595
 8009c30:	3fdfffff 	.word	0x3fdfffff
 8009c34:	35afe535 	.word	0x35afe535
 8009c38:	ffc00000 	.word	0xffc00000
 8009c3c:	41dfffff 	.word	0x41dfffff
 8009c40:	3fcfffff 	.word	0x3fcfffff

08009c44 <_strtod_r>:
 8009c44:	b510      	push	{r4, lr}
 8009c46:	4b02      	ldr	r3, [pc, #8]	; (8009c50 <_strtod_r+0xc>)
 8009c48:	f7ff f9e8 	bl	800901c <_strtod_l>
 8009c4c:	bd10      	pop	{r4, pc}
 8009c4e:	46c0      	nop			; (mov r8, r8)
 8009c50:	20000098 	.word	0x20000098

08009c54 <_strtol_l.constprop.0>:
 8009c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c56:	b087      	sub	sp, #28
 8009c58:	001e      	movs	r6, r3
 8009c5a:	9005      	str	r0, [sp, #20]
 8009c5c:	9101      	str	r1, [sp, #4]
 8009c5e:	9202      	str	r2, [sp, #8]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d045      	beq.n	8009cf0 <_strtol_l.constprop.0+0x9c>
 8009c64:	000b      	movs	r3, r1
 8009c66:	2e24      	cmp	r6, #36	; 0x24
 8009c68:	d842      	bhi.n	8009cf0 <_strtol_l.constprop.0+0x9c>
 8009c6a:	4a3f      	ldr	r2, [pc, #252]	; (8009d68 <_strtol_l.constprop.0+0x114>)
 8009c6c:	2108      	movs	r1, #8
 8009c6e:	4694      	mov	ip, r2
 8009c70:	001a      	movs	r2, r3
 8009c72:	4660      	mov	r0, ip
 8009c74:	7814      	ldrb	r4, [r2, #0]
 8009c76:	3301      	adds	r3, #1
 8009c78:	5d00      	ldrb	r0, [r0, r4]
 8009c7a:	001d      	movs	r5, r3
 8009c7c:	0007      	movs	r7, r0
 8009c7e:	400f      	ands	r7, r1
 8009c80:	4208      	tst	r0, r1
 8009c82:	d1f5      	bne.n	8009c70 <_strtol_l.constprop.0+0x1c>
 8009c84:	2c2d      	cmp	r4, #45	; 0x2d
 8009c86:	d13a      	bne.n	8009cfe <_strtol_l.constprop.0+0xaa>
 8009c88:	2701      	movs	r7, #1
 8009c8a:	781c      	ldrb	r4, [r3, #0]
 8009c8c:	1c95      	adds	r5, r2, #2
 8009c8e:	2e00      	cmp	r6, #0
 8009c90:	d065      	beq.n	8009d5e <_strtol_l.constprop.0+0x10a>
 8009c92:	2e10      	cmp	r6, #16
 8009c94:	d109      	bne.n	8009caa <_strtol_l.constprop.0+0x56>
 8009c96:	2c30      	cmp	r4, #48	; 0x30
 8009c98:	d107      	bne.n	8009caa <_strtol_l.constprop.0+0x56>
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	782b      	ldrb	r3, [r5, #0]
 8009c9e:	4393      	bics	r3, r2
 8009ca0:	2b58      	cmp	r3, #88	; 0x58
 8009ca2:	d157      	bne.n	8009d54 <_strtol_l.constprop.0+0x100>
 8009ca4:	2610      	movs	r6, #16
 8009ca6:	786c      	ldrb	r4, [r5, #1]
 8009ca8:	3502      	adds	r5, #2
 8009caa:	4b30      	ldr	r3, [pc, #192]	; (8009d6c <_strtol_l.constprop.0+0x118>)
 8009cac:	0031      	movs	r1, r6
 8009cae:	18fb      	adds	r3, r7, r3
 8009cb0:	0018      	movs	r0, r3
 8009cb2:	9303      	str	r3, [sp, #12]
 8009cb4:	f7f6 faca 	bl	800024c <__aeabi_uidivmod>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	2201      	movs	r2, #1
 8009cbc:	4684      	mov	ip, r0
 8009cbe:	0018      	movs	r0, r3
 8009cc0:	9104      	str	r1, [sp, #16]
 8009cc2:	4252      	negs	r2, r2
 8009cc4:	0021      	movs	r1, r4
 8009cc6:	3930      	subs	r1, #48	; 0x30
 8009cc8:	2909      	cmp	r1, #9
 8009cca:	d81d      	bhi.n	8009d08 <_strtol_l.constprop.0+0xb4>
 8009ccc:	000c      	movs	r4, r1
 8009cce:	42a6      	cmp	r6, r4
 8009cd0:	dd28      	ble.n	8009d24 <_strtol_l.constprop.0+0xd0>
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	db24      	blt.n	8009d20 <_strtol_l.constprop.0+0xcc>
 8009cd6:	0013      	movs	r3, r2
 8009cd8:	4584      	cmp	ip, r0
 8009cda:	d306      	bcc.n	8009cea <_strtol_l.constprop.0+0x96>
 8009cdc:	d102      	bne.n	8009ce4 <_strtol_l.constprop.0+0x90>
 8009cde:	9904      	ldr	r1, [sp, #16]
 8009ce0:	42a1      	cmp	r1, r4
 8009ce2:	db02      	blt.n	8009cea <_strtol_l.constprop.0+0x96>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	4370      	muls	r0, r6
 8009ce8:	1820      	adds	r0, r4, r0
 8009cea:	782c      	ldrb	r4, [r5, #0]
 8009cec:	3501      	adds	r5, #1
 8009cee:	e7e9      	b.n	8009cc4 <_strtol_l.constprop.0+0x70>
 8009cf0:	f7fe fab0 	bl	8008254 <__errno>
 8009cf4:	2316      	movs	r3, #22
 8009cf6:	6003      	str	r3, [r0, #0]
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	b007      	add	sp, #28
 8009cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cfe:	2c2b      	cmp	r4, #43	; 0x2b
 8009d00:	d1c5      	bne.n	8009c8e <_strtol_l.constprop.0+0x3a>
 8009d02:	781c      	ldrb	r4, [r3, #0]
 8009d04:	1c95      	adds	r5, r2, #2
 8009d06:	e7c2      	b.n	8009c8e <_strtol_l.constprop.0+0x3a>
 8009d08:	0021      	movs	r1, r4
 8009d0a:	3941      	subs	r1, #65	; 0x41
 8009d0c:	2919      	cmp	r1, #25
 8009d0e:	d801      	bhi.n	8009d14 <_strtol_l.constprop.0+0xc0>
 8009d10:	3c37      	subs	r4, #55	; 0x37
 8009d12:	e7dc      	b.n	8009cce <_strtol_l.constprop.0+0x7a>
 8009d14:	0021      	movs	r1, r4
 8009d16:	3961      	subs	r1, #97	; 0x61
 8009d18:	2919      	cmp	r1, #25
 8009d1a:	d803      	bhi.n	8009d24 <_strtol_l.constprop.0+0xd0>
 8009d1c:	3c57      	subs	r4, #87	; 0x57
 8009d1e:	e7d6      	b.n	8009cce <_strtol_l.constprop.0+0x7a>
 8009d20:	0013      	movs	r3, r2
 8009d22:	e7e2      	b.n	8009cea <_strtol_l.constprop.0+0x96>
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	da09      	bge.n	8009d3c <_strtol_l.constprop.0+0xe8>
 8009d28:	2322      	movs	r3, #34	; 0x22
 8009d2a:	9a05      	ldr	r2, [sp, #20]
 8009d2c:	9803      	ldr	r0, [sp, #12]
 8009d2e:	6013      	str	r3, [r2, #0]
 8009d30:	9b02      	ldr	r3, [sp, #8]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d0e1      	beq.n	8009cfa <_strtol_l.constprop.0+0xa6>
 8009d36:	1e6b      	subs	r3, r5, #1
 8009d38:	9301      	str	r3, [sp, #4]
 8009d3a:	e007      	b.n	8009d4c <_strtol_l.constprop.0+0xf8>
 8009d3c:	2f00      	cmp	r7, #0
 8009d3e:	d000      	beq.n	8009d42 <_strtol_l.constprop.0+0xee>
 8009d40:	4240      	negs	r0, r0
 8009d42:	9a02      	ldr	r2, [sp, #8]
 8009d44:	2a00      	cmp	r2, #0
 8009d46:	d0d8      	beq.n	8009cfa <_strtol_l.constprop.0+0xa6>
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1f4      	bne.n	8009d36 <_strtol_l.constprop.0+0xe2>
 8009d4c:	9b02      	ldr	r3, [sp, #8]
 8009d4e:	9a01      	ldr	r2, [sp, #4]
 8009d50:	601a      	str	r2, [r3, #0]
 8009d52:	e7d2      	b.n	8009cfa <_strtol_l.constprop.0+0xa6>
 8009d54:	2430      	movs	r4, #48	; 0x30
 8009d56:	2e00      	cmp	r6, #0
 8009d58:	d1a7      	bne.n	8009caa <_strtol_l.constprop.0+0x56>
 8009d5a:	3608      	adds	r6, #8
 8009d5c:	e7a5      	b.n	8009caa <_strtol_l.constprop.0+0x56>
 8009d5e:	2c30      	cmp	r4, #48	; 0x30
 8009d60:	d09b      	beq.n	8009c9a <_strtol_l.constprop.0+0x46>
 8009d62:	260a      	movs	r6, #10
 8009d64:	e7a1      	b.n	8009caa <_strtol_l.constprop.0+0x56>
 8009d66:	46c0      	nop			; (mov r8, r8)
 8009d68:	0800d0a9 	.word	0x0800d0a9
 8009d6c:	7fffffff 	.word	0x7fffffff

08009d70 <_strtol_r>:
 8009d70:	b510      	push	{r4, lr}
 8009d72:	f7ff ff6f 	bl	8009c54 <_strtol_l.constprop.0>
 8009d76:	bd10      	pop	{r4, pc}

08009d78 <quorem>:
 8009d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d7a:	0006      	movs	r6, r0
 8009d7c:	690b      	ldr	r3, [r1, #16]
 8009d7e:	6932      	ldr	r2, [r6, #16]
 8009d80:	b087      	sub	sp, #28
 8009d82:	2000      	movs	r0, #0
 8009d84:	9103      	str	r1, [sp, #12]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	db65      	blt.n	8009e56 <quorem+0xde>
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	009c      	lsls	r4, r3, #2
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	000b      	movs	r3, r1
 8009d92:	3314      	adds	r3, #20
 8009d94:	9305      	str	r3, [sp, #20]
 8009d96:	191b      	adds	r3, r3, r4
 8009d98:	9304      	str	r3, [sp, #16]
 8009d9a:	0033      	movs	r3, r6
 8009d9c:	3314      	adds	r3, #20
 8009d9e:	9302      	str	r3, [sp, #8]
 8009da0:	191c      	adds	r4, r3, r4
 8009da2:	9b04      	ldr	r3, [sp, #16]
 8009da4:	6827      	ldr	r7, [r4, #0]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	0038      	movs	r0, r7
 8009daa:	1c5d      	adds	r5, r3, #1
 8009dac:	0029      	movs	r1, r5
 8009dae:	9301      	str	r3, [sp, #4]
 8009db0:	f7f6 f9c6 	bl	8000140 <__udivsi3>
 8009db4:	9001      	str	r0, [sp, #4]
 8009db6:	42af      	cmp	r7, r5
 8009db8:	d324      	bcc.n	8009e04 <quorem+0x8c>
 8009dba:	2500      	movs	r5, #0
 8009dbc:	46ac      	mov	ip, r5
 8009dbe:	9802      	ldr	r0, [sp, #8]
 8009dc0:	9f05      	ldr	r7, [sp, #20]
 8009dc2:	cf08      	ldmia	r7!, {r3}
 8009dc4:	9a01      	ldr	r2, [sp, #4]
 8009dc6:	b299      	uxth	r1, r3
 8009dc8:	4351      	muls	r1, r2
 8009dca:	0c1b      	lsrs	r3, r3, #16
 8009dcc:	4353      	muls	r3, r2
 8009dce:	1949      	adds	r1, r1, r5
 8009dd0:	0c0a      	lsrs	r2, r1, #16
 8009dd2:	189b      	adds	r3, r3, r2
 8009dd4:	6802      	ldr	r2, [r0, #0]
 8009dd6:	b289      	uxth	r1, r1
 8009dd8:	b292      	uxth	r2, r2
 8009dda:	4462      	add	r2, ip
 8009ddc:	1a52      	subs	r2, r2, r1
 8009dde:	6801      	ldr	r1, [r0, #0]
 8009de0:	0c1d      	lsrs	r5, r3, #16
 8009de2:	0c09      	lsrs	r1, r1, #16
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	1acb      	subs	r3, r1, r3
 8009de8:	1411      	asrs	r1, r2, #16
 8009dea:	185b      	adds	r3, r3, r1
 8009dec:	1419      	asrs	r1, r3, #16
 8009dee:	b292      	uxth	r2, r2
 8009df0:	041b      	lsls	r3, r3, #16
 8009df2:	431a      	orrs	r2, r3
 8009df4:	9b04      	ldr	r3, [sp, #16]
 8009df6:	468c      	mov	ip, r1
 8009df8:	c004      	stmia	r0!, {r2}
 8009dfa:	42bb      	cmp	r3, r7
 8009dfc:	d2e1      	bcs.n	8009dc2 <quorem+0x4a>
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d030      	beq.n	8009e66 <quorem+0xee>
 8009e04:	0030      	movs	r0, r6
 8009e06:	9903      	ldr	r1, [sp, #12]
 8009e08:	f001 fcd4 	bl	800b7b4 <__mcmp>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	db21      	blt.n	8009e54 <quorem+0xdc>
 8009e10:	0030      	movs	r0, r6
 8009e12:	2400      	movs	r4, #0
 8009e14:	9b01      	ldr	r3, [sp, #4]
 8009e16:	9903      	ldr	r1, [sp, #12]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	9301      	str	r3, [sp, #4]
 8009e1c:	3014      	adds	r0, #20
 8009e1e:	3114      	adds	r1, #20
 8009e20:	6803      	ldr	r3, [r0, #0]
 8009e22:	c920      	ldmia	r1!, {r5}
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	1914      	adds	r4, r2, r4
 8009e28:	b2aa      	uxth	r2, r5
 8009e2a:	1aa2      	subs	r2, r4, r2
 8009e2c:	0c1b      	lsrs	r3, r3, #16
 8009e2e:	0c2d      	lsrs	r5, r5, #16
 8009e30:	1414      	asrs	r4, r2, #16
 8009e32:	1b5b      	subs	r3, r3, r5
 8009e34:	191b      	adds	r3, r3, r4
 8009e36:	141c      	asrs	r4, r3, #16
 8009e38:	b292      	uxth	r2, r2
 8009e3a:	041b      	lsls	r3, r3, #16
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	c008      	stmia	r0!, {r3}
 8009e40:	9b04      	ldr	r3, [sp, #16]
 8009e42:	428b      	cmp	r3, r1
 8009e44:	d2ec      	bcs.n	8009e20 <quorem+0xa8>
 8009e46:	9b00      	ldr	r3, [sp, #0]
 8009e48:	9a02      	ldr	r2, [sp, #8]
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	18d3      	adds	r3, r2, r3
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	2a00      	cmp	r2, #0
 8009e52:	d015      	beq.n	8009e80 <quorem+0x108>
 8009e54:	9801      	ldr	r0, [sp, #4]
 8009e56:	b007      	add	sp, #28
 8009e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e5a:	6823      	ldr	r3, [r4, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d106      	bne.n	8009e6e <quorem+0xf6>
 8009e60:	9b00      	ldr	r3, [sp, #0]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	9b02      	ldr	r3, [sp, #8]
 8009e68:	3c04      	subs	r4, #4
 8009e6a:	42a3      	cmp	r3, r4
 8009e6c:	d3f5      	bcc.n	8009e5a <quorem+0xe2>
 8009e6e:	9b00      	ldr	r3, [sp, #0]
 8009e70:	6133      	str	r3, [r6, #16]
 8009e72:	e7c7      	b.n	8009e04 <quorem+0x8c>
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	2a00      	cmp	r2, #0
 8009e78:	d106      	bne.n	8009e88 <quorem+0x110>
 8009e7a:	9a00      	ldr	r2, [sp, #0]
 8009e7c:	3a01      	subs	r2, #1
 8009e7e:	9200      	str	r2, [sp, #0]
 8009e80:	9a02      	ldr	r2, [sp, #8]
 8009e82:	3b04      	subs	r3, #4
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d3f5      	bcc.n	8009e74 <quorem+0xfc>
 8009e88:	9b00      	ldr	r3, [sp, #0]
 8009e8a:	6133      	str	r3, [r6, #16]
 8009e8c:	e7e2      	b.n	8009e54 <quorem+0xdc>
	...

08009e90 <_dtoa_r>:
 8009e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e92:	b09d      	sub	sp, #116	; 0x74
 8009e94:	9202      	str	r2, [sp, #8]
 8009e96:	9303      	str	r3, [sp, #12]
 8009e98:	9b02      	ldr	r3, [sp, #8]
 8009e9a:	9c03      	ldr	r4, [sp, #12]
 8009e9c:	9308      	str	r3, [sp, #32]
 8009e9e:	9409      	str	r4, [sp, #36]	; 0x24
 8009ea0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009ea2:	0007      	movs	r7, r0
 8009ea4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8009ea6:	2c00      	cmp	r4, #0
 8009ea8:	d10e      	bne.n	8009ec8 <_dtoa_r+0x38>
 8009eaa:	2010      	movs	r0, #16
 8009eac:	f001 f982 	bl	800b1b4 <malloc>
 8009eb0:	1e02      	subs	r2, r0, #0
 8009eb2:	6278      	str	r0, [r7, #36]	; 0x24
 8009eb4:	d104      	bne.n	8009ec0 <_dtoa_r+0x30>
 8009eb6:	21ea      	movs	r1, #234	; 0xea
 8009eb8:	4bc7      	ldr	r3, [pc, #796]	; (800a1d8 <_dtoa_r+0x348>)
 8009eba:	48c8      	ldr	r0, [pc, #800]	; (800a1dc <_dtoa_r+0x34c>)
 8009ebc:	f002 f91c 	bl	800c0f8 <__assert_func>
 8009ec0:	6044      	str	r4, [r0, #4]
 8009ec2:	6084      	str	r4, [r0, #8]
 8009ec4:	6004      	str	r4, [r0, #0]
 8009ec6:	60c4      	str	r4, [r0, #12]
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	6819      	ldr	r1, [r3, #0]
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	d00a      	beq.n	8009ee6 <_dtoa_r+0x56>
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	4093      	lsls	r3, r2
 8009ed6:	604a      	str	r2, [r1, #4]
 8009ed8:	608b      	str	r3, [r1, #8]
 8009eda:	0038      	movs	r0, r7
 8009edc:	f001 f9de 	bl	800b29c <_Bfree>
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	601a      	str	r2, [r3, #0]
 8009ee6:	9b03      	ldr	r3, [sp, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	da20      	bge.n	8009f2e <_dtoa_r+0x9e>
 8009eec:	2301      	movs	r3, #1
 8009eee:	602b      	str	r3, [r5, #0]
 8009ef0:	9b03      	ldr	r3, [sp, #12]
 8009ef2:	005b      	lsls	r3, r3, #1
 8009ef4:	085b      	lsrs	r3, r3, #1
 8009ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009efa:	4bb9      	ldr	r3, [pc, #740]	; (800a1e0 <_dtoa_r+0x350>)
 8009efc:	4ab8      	ldr	r2, [pc, #736]	; (800a1e0 <_dtoa_r+0x350>)
 8009efe:	402b      	ands	r3, r5
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d117      	bne.n	8009f34 <_dtoa_r+0xa4>
 8009f04:	4bb7      	ldr	r3, [pc, #732]	; (800a1e4 <_dtoa_r+0x354>)
 8009f06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009f08:	0328      	lsls	r0, r5, #12
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	9b02      	ldr	r3, [sp, #8]
 8009f0e:	0b00      	lsrs	r0, r0, #12
 8009f10:	4318      	orrs	r0, r3
 8009f12:	d101      	bne.n	8009f18 <_dtoa_r+0x88>
 8009f14:	f000 fdbf 	bl	800aa96 <_dtoa_r+0xc06>
 8009f18:	48b3      	ldr	r0, [pc, #716]	; (800a1e8 <_dtoa_r+0x358>)
 8009f1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f1c:	9006      	str	r0, [sp, #24]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d002      	beq.n	8009f28 <_dtoa_r+0x98>
 8009f22:	4bb2      	ldr	r3, [pc, #712]	; (800a1ec <_dtoa_r+0x35c>)
 8009f24:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009f26:	6013      	str	r3, [r2, #0]
 8009f28:	9806      	ldr	r0, [sp, #24]
 8009f2a:	b01d      	add	sp, #116	; 0x74
 8009f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f2e:	2300      	movs	r3, #0
 8009f30:	602b      	str	r3, [r5, #0]
 8009f32:	e7e1      	b.n	8009ef8 <_dtoa_r+0x68>
 8009f34:	9b08      	ldr	r3, [sp, #32]
 8009f36:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009f38:	9312      	str	r3, [sp, #72]	; 0x48
 8009f3a:	9413      	str	r4, [sp, #76]	; 0x4c
 8009f3c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009f3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009f40:	2200      	movs	r2, #0
 8009f42:	2300      	movs	r3, #0
 8009f44:	f7f6 fa82 	bl	800044c <__aeabi_dcmpeq>
 8009f48:	1e04      	subs	r4, r0, #0
 8009f4a:	d009      	beq.n	8009f60 <_dtoa_r+0xd0>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009f50:	6013      	str	r3, [r2, #0]
 8009f52:	4ba7      	ldr	r3, [pc, #668]	; (800a1f0 <_dtoa_r+0x360>)
 8009f54:	9306      	str	r3, [sp, #24]
 8009f56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d0e5      	beq.n	8009f28 <_dtoa_r+0x98>
 8009f5c:	4ba5      	ldr	r3, [pc, #660]	; (800a1f4 <_dtoa_r+0x364>)
 8009f5e:	e7e1      	b.n	8009f24 <_dtoa_r+0x94>
 8009f60:	ab1a      	add	r3, sp, #104	; 0x68
 8009f62:	9301      	str	r3, [sp, #4]
 8009f64:	ab1b      	add	r3, sp, #108	; 0x6c
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	0038      	movs	r0, r7
 8009f6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f6e:	f001 fd49 	bl	800ba04 <__d2b>
 8009f72:	006e      	lsls	r6, r5, #1
 8009f74:	9005      	str	r0, [sp, #20]
 8009f76:	0d76      	lsrs	r6, r6, #21
 8009f78:	d100      	bne.n	8009f7c <_dtoa_r+0xec>
 8009f7a:	e07c      	b.n	800a076 <_dtoa_r+0x1e6>
 8009f7c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009f7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009f80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f82:	4a9d      	ldr	r2, [pc, #628]	; (800a1f8 <_dtoa_r+0x368>)
 8009f84:	031b      	lsls	r3, r3, #12
 8009f86:	0b1b      	lsrs	r3, r3, #12
 8009f88:	431a      	orrs	r2, r3
 8009f8a:	0011      	movs	r1, r2
 8009f8c:	4b9b      	ldr	r3, [pc, #620]	; (800a1fc <_dtoa_r+0x36c>)
 8009f8e:	9418      	str	r4, [sp, #96]	; 0x60
 8009f90:	18f6      	adds	r6, r6, r3
 8009f92:	2200      	movs	r2, #0
 8009f94:	4b9a      	ldr	r3, [pc, #616]	; (800a200 <_dtoa_r+0x370>)
 8009f96:	f7f8 f897 	bl	80020c8 <__aeabi_dsub>
 8009f9a:	4a9a      	ldr	r2, [pc, #616]	; (800a204 <_dtoa_r+0x374>)
 8009f9c:	4b9a      	ldr	r3, [pc, #616]	; (800a208 <_dtoa_r+0x378>)
 8009f9e:	f7f7 fe27 	bl	8001bf0 <__aeabi_dmul>
 8009fa2:	4a9a      	ldr	r2, [pc, #616]	; (800a20c <_dtoa_r+0x37c>)
 8009fa4:	4b9a      	ldr	r3, [pc, #616]	; (800a210 <_dtoa_r+0x380>)
 8009fa6:	f7f6 fee5 	bl	8000d74 <__aeabi_dadd>
 8009faa:	0004      	movs	r4, r0
 8009fac:	0030      	movs	r0, r6
 8009fae:	000d      	movs	r5, r1
 8009fb0:	f7f8 fc70 	bl	8002894 <__aeabi_i2d>
 8009fb4:	4a97      	ldr	r2, [pc, #604]	; (800a214 <_dtoa_r+0x384>)
 8009fb6:	4b98      	ldr	r3, [pc, #608]	; (800a218 <_dtoa_r+0x388>)
 8009fb8:	f7f7 fe1a 	bl	8001bf0 <__aeabi_dmul>
 8009fbc:	0002      	movs	r2, r0
 8009fbe:	000b      	movs	r3, r1
 8009fc0:	0020      	movs	r0, r4
 8009fc2:	0029      	movs	r1, r5
 8009fc4:	f7f6 fed6 	bl	8000d74 <__aeabi_dadd>
 8009fc8:	0004      	movs	r4, r0
 8009fca:	000d      	movs	r5, r1
 8009fcc:	f7f8 fc2c 	bl	8002828 <__aeabi_d2iz>
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	9002      	str	r0, [sp, #8]
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	0020      	movs	r0, r4
 8009fd8:	0029      	movs	r1, r5
 8009fda:	f7f6 fa3d 	bl	8000458 <__aeabi_dcmplt>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d00b      	beq.n	8009ffa <_dtoa_r+0x16a>
 8009fe2:	9802      	ldr	r0, [sp, #8]
 8009fe4:	f7f8 fc56 	bl	8002894 <__aeabi_i2d>
 8009fe8:	002b      	movs	r3, r5
 8009fea:	0022      	movs	r2, r4
 8009fec:	f7f6 fa2e 	bl	800044c <__aeabi_dcmpeq>
 8009ff0:	4243      	negs	r3, r0
 8009ff2:	4158      	adcs	r0, r3
 8009ff4:	9b02      	ldr	r3, [sp, #8]
 8009ff6:	1a1b      	subs	r3, r3, r0
 8009ff8:	9302      	str	r3, [sp, #8]
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	9316      	str	r3, [sp, #88]	; 0x58
 8009ffe:	9b02      	ldr	r3, [sp, #8]
 800a000:	2b16      	cmp	r3, #22
 800a002:	d80f      	bhi.n	800a024 <_dtoa_r+0x194>
 800a004:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a006:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a008:	00da      	lsls	r2, r3, #3
 800a00a:	4b84      	ldr	r3, [pc, #528]	; (800a21c <_dtoa_r+0x38c>)
 800a00c:	189b      	adds	r3, r3, r2
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f7f6 fa21 	bl	8000458 <__aeabi_dcmplt>
 800a016:	2800      	cmp	r0, #0
 800a018:	d049      	beq.n	800a0ae <_dtoa_r+0x21e>
 800a01a:	9b02      	ldr	r3, [sp, #8]
 800a01c:	3b01      	subs	r3, #1
 800a01e:	9302      	str	r3, [sp, #8]
 800a020:	2300      	movs	r3, #0
 800a022:	9316      	str	r3, [sp, #88]	; 0x58
 800a024:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a026:	1b9e      	subs	r6, r3, r6
 800a028:	2300      	movs	r3, #0
 800a02a:	930a      	str	r3, [sp, #40]	; 0x28
 800a02c:	0033      	movs	r3, r6
 800a02e:	3b01      	subs	r3, #1
 800a030:	930d      	str	r3, [sp, #52]	; 0x34
 800a032:	d504      	bpl.n	800a03e <_dtoa_r+0x1ae>
 800a034:	2301      	movs	r3, #1
 800a036:	1b9b      	subs	r3, r3, r6
 800a038:	930a      	str	r3, [sp, #40]	; 0x28
 800a03a:	2300      	movs	r3, #0
 800a03c:	930d      	str	r3, [sp, #52]	; 0x34
 800a03e:	9b02      	ldr	r3, [sp, #8]
 800a040:	2b00      	cmp	r3, #0
 800a042:	db36      	blt.n	800a0b2 <_dtoa_r+0x222>
 800a044:	9a02      	ldr	r2, [sp, #8]
 800a046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a048:	4694      	mov	ip, r2
 800a04a:	4463      	add	r3, ip
 800a04c:	930d      	str	r3, [sp, #52]	; 0x34
 800a04e:	2300      	movs	r3, #0
 800a050:	9215      	str	r2, [sp, #84]	; 0x54
 800a052:	930e      	str	r3, [sp, #56]	; 0x38
 800a054:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a056:	2401      	movs	r4, #1
 800a058:	2b09      	cmp	r3, #9
 800a05a:	d864      	bhi.n	800a126 <_dtoa_r+0x296>
 800a05c:	2b05      	cmp	r3, #5
 800a05e:	dd02      	ble.n	800a066 <_dtoa_r+0x1d6>
 800a060:	2400      	movs	r4, #0
 800a062:	3b04      	subs	r3, #4
 800a064:	9322      	str	r3, [sp, #136]	; 0x88
 800a066:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a068:	1e98      	subs	r0, r3, #2
 800a06a:	2803      	cmp	r0, #3
 800a06c:	d864      	bhi.n	800a138 <_dtoa_r+0x2a8>
 800a06e:	f7f6 f853 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a072:	3829      	.short	0x3829
 800a074:	5836      	.short	0x5836
 800a076:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a078:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a07a:	189e      	adds	r6, r3, r2
 800a07c:	4b68      	ldr	r3, [pc, #416]	; (800a220 <_dtoa_r+0x390>)
 800a07e:	18f2      	adds	r2, r6, r3
 800a080:	2a20      	cmp	r2, #32
 800a082:	dd0f      	ble.n	800a0a4 <_dtoa_r+0x214>
 800a084:	2340      	movs	r3, #64	; 0x40
 800a086:	1a9b      	subs	r3, r3, r2
 800a088:	409d      	lsls	r5, r3
 800a08a:	4b66      	ldr	r3, [pc, #408]	; (800a224 <_dtoa_r+0x394>)
 800a08c:	9802      	ldr	r0, [sp, #8]
 800a08e:	18f3      	adds	r3, r6, r3
 800a090:	40d8      	lsrs	r0, r3
 800a092:	4328      	orrs	r0, r5
 800a094:	f7f8 fc2e 	bl	80028f4 <__aeabi_ui2d>
 800a098:	2301      	movs	r3, #1
 800a09a:	4c63      	ldr	r4, [pc, #396]	; (800a228 <_dtoa_r+0x398>)
 800a09c:	3e01      	subs	r6, #1
 800a09e:	1909      	adds	r1, r1, r4
 800a0a0:	9318      	str	r3, [sp, #96]	; 0x60
 800a0a2:	e776      	b.n	8009f92 <_dtoa_r+0x102>
 800a0a4:	2320      	movs	r3, #32
 800a0a6:	9802      	ldr	r0, [sp, #8]
 800a0a8:	1a9b      	subs	r3, r3, r2
 800a0aa:	4098      	lsls	r0, r3
 800a0ac:	e7f2      	b.n	800a094 <_dtoa_r+0x204>
 800a0ae:	9016      	str	r0, [sp, #88]	; 0x58
 800a0b0:	e7b8      	b.n	800a024 <_dtoa_r+0x194>
 800a0b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0b4:	9a02      	ldr	r2, [sp, #8]
 800a0b6:	1a9b      	subs	r3, r3, r2
 800a0b8:	930a      	str	r3, [sp, #40]	; 0x28
 800a0ba:	4253      	negs	r3, r2
 800a0bc:	930e      	str	r3, [sp, #56]	; 0x38
 800a0be:	2300      	movs	r3, #0
 800a0c0:	9315      	str	r3, [sp, #84]	; 0x54
 800a0c2:	e7c7      	b.n	800a054 <_dtoa_r+0x1c4>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0ca:	930c      	str	r3, [sp, #48]	; 0x30
 800a0cc:	9307      	str	r3, [sp, #28]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	dc13      	bgt.n	800a0fa <_dtoa_r+0x26a>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	001a      	movs	r2, r3
 800a0d6:	930c      	str	r3, [sp, #48]	; 0x30
 800a0d8:	9307      	str	r3, [sp, #28]
 800a0da:	9223      	str	r2, [sp, #140]	; 0x8c
 800a0dc:	e00d      	b.n	800a0fa <_dtoa_r+0x26a>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e7f1      	b.n	800a0c6 <_dtoa_r+0x236>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a0e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0e8:	4694      	mov	ip, r2
 800a0ea:	9b02      	ldr	r3, [sp, #8]
 800a0ec:	4463      	add	r3, ip
 800a0ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	9307      	str	r3, [sp, #28]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	dc00      	bgt.n	800a0fa <_dtoa_r+0x26a>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0fe:	6042      	str	r2, [r0, #4]
 800a100:	3204      	adds	r2, #4
 800a102:	0015      	movs	r5, r2
 800a104:	3514      	adds	r5, #20
 800a106:	6841      	ldr	r1, [r0, #4]
 800a108:	429d      	cmp	r5, r3
 800a10a:	d919      	bls.n	800a140 <_dtoa_r+0x2b0>
 800a10c:	0038      	movs	r0, r7
 800a10e:	f001 f881 	bl	800b214 <_Balloc>
 800a112:	9006      	str	r0, [sp, #24]
 800a114:	2800      	cmp	r0, #0
 800a116:	d117      	bne.n	800a148 <_dtoa_r+0x2b8>
 800a118:	21d5      	movs	r1, #213	; 0xd5
 800a11a:	0002      	movs	r2, r0
 800a11c:	4b43      	ldr	r3, [pc, #268]	; (800a22c <_dtoa_r+0x39c>)
 800a11e:	0049      	lsls	r1, r1, #1
 800a120:	e6cb      	b.n	8009eba <_dtoa_r+0x2a>
 800a122:	2301      	movs	r3, #1
 800a124:	e7de      	b.n	800a0e4 <_dtoa_r+0x254>
 800a126:	2300      	movs	r3, #0
 800a128:	940f      	str	r4, [sp, #60]	; 0x3c
 800a12a:	9322      	str	r3, [sp, #136]	; 0x88
 800a12c:	3b01      	subs	r3, #1
 800a12e:	930c      	str	r3, [sp, #48]	; 0x30
 800a130:	9307      	str	r3, [sp, #28]
 800a132:	2200      	movs	r2, #0
 800a134:	3313      	adds	r3, #19
 800a136:	e7d0      	b.n	800a0da <_dtoa_r+0x24a>
 800a138:	2301      	movs	r3, #1
 800a13a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a13c:	3b02      	subs	r3, #2
 800a13e:	e7f6      	b.n	800a12e <_dtoa_r+0x29e>
 800a140:	3101      	adds	r1, #1
 800a142:	6041      	str	r1, [r0, #4]
 800a144:	0052      	lsls	r2, r2, #1
 800a146:	e7dc      	b.n	800a102 <_dtoa_r+0x272>
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	9a06      	ldr	r2, [sp, #24]
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	9b07      	ldr	r3, [sp, #28]
 800a150:	2b0e      	cmp	r3, #14
 800a152:	d900      	bls.n	800a156 <_dtoa_r+0x2c6>
 800a154:	e0eb      	b.n	800a32e <_dtoa_r+0x49e>
 800a156:	2c00      	cmp	r4, #0
 800a158:	d100      	bne.n	800a15c <_dtoa_r+0x2cc>
 800a15a:	e0e8      	b.n	800a32e <_dtoa_r+0x49e>
 800a15c:	9b02      	ldr	r3, [sp, #8]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	dd68      	ble.n	800a234 <_dtoa_r+0x3a4>
 800a162:	001a      	movs	r2, r3
 800a164:	210f      	movs	r1, #15
 800a166:	4b2d      	ldr	r3, [pc, #180]	; (800a21c <_dtoa_r+0x38c>)
 800a168:	400a      	ands	r2, r1
 800a16a:	00d2      	lsls	r2, r2, #3
 800a16c:	189b      	adds	r3, r3, r2
 800a16e:	681d      	ldr	r5, [r3, #0]
 800a170:	685e      	ldr	r6, [r3, #4]
 800a172:	9b02      	ldr	r3, [sp, #8]
 800a174:	111c      	asrs	r4, r3, #4
 800a176:	2302      	movs	r3, #2
 800a178:	9310      	str	r3, [sp, #64]	; 0x40
 800a17a:	9b02      	ldr	r3, [sp, #8]
 800a17c:	05db      	lsls	r3, r3, #23
 800a17e:	d50b      	bpl.n	800a198 <_dtoa_r+0x308>
 800a180:	4b2b      	ldr	r3, [pc, #172]	; (800a230 <_dtoa_r+0x3a0>)
 800a182:	400c      	ands	r4, r1
 800a184:	6a1a      	ldr	r2, [r3, #32]
 800a186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a188:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a18a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a18c:	f7f7 f92e 	bl	80013ec <__aeabi_ddiv>
 800a190:	2303      	movs	r3, #3
 800a192:	9008      	str	r0, [sp, #32]
 800a194:	9109      	str	r1, [sp, #36]	; 0x24
 800a196:	9310      	str	r3, [sp, #64]	; 0x40
 800a198:	4b25      	ldr	r3, [pc, #148]	; (800a230 <_dtoa_r+0x3a0>)
 800a19a:	9314      	str	r3, [sp, #80]	; 0x50
 800a19c:	2c00      	cmp	r4, #0
 800a19e:	d108      	bne.n	800a1b2 <_dtoa_r+0x322>
 800a1a0:	9808      	ldr	r0, [sp, #32]
 800a1a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1a4:	002a      	movs	r2, r5
 800a1a6:	0033      	movs	r3, r6
 800a1a8:	f7f7 f920 	bl	80013ec <__aeabi_ddiv>
 800a1ac:	9008      	str	r0, [sp, #32]
 800a1ae:	9109      	str	r1, [sp, #36]	; 0x24
 800a1b0:	e05c      	b.n	800a26c <_dtoa_r+0x3dc>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	421c      	tst	r4, r3
 800a1b6:	d00b      	beq.n	800a1d0 <_dtoa_r+0x340>
 800a1b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1ba:	0028      	movs	r0, r5
 800a1bc:	3301      	adds	r3, #1
 800a1be:	9310      	str	r3, [sp, #64]	; 0x40
 800a1c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1c2:	0031      	movs	r1, r6
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	f7f7 fd12 	bl	8001bf0 <__aeabi_dmul>
 800a1cc:	0005      	movs	r5, r0
 800a1ce:	000e      	movs	r6, r1
 800a1d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1d2:	1064      	asrs	r4, r4, #1
 800a1d4:	3308      	adds	r3, #8
 800a1d6:	e7e0      	b.n	800a19a <_dtoa_r+0x30a>
 800a1d8:	0800d1b6 	.word	0x0800d1b6
 800a1dc:	0800d1cd 	.word	0x0800d1cd
 800a1e0:	7ff00000 	.word	0x7ff00000
 800a1e4:	0000270f 	.word	0x0000270f
 800a1e8:	0800d1b2 	.word	0x0800d1b2
 800a1ec:	0800d1b5 	.word	0x0800d1b5
 800a1f0:	0800d02c 	.word	0x0800d02c
 800a1f4:	0800d02d 	.word	0x0800d02d
 800a1f8:	3ff00000 	.word	0x3ff00000
 800a1fc:	fffffc01 	.word	0xfffffc01
 800a200:	3ff80000 	.word	0x3ff80000
 800a204:	636f4361 	.word	0x636f4361
 800a208:	3fd287a7 	.word	0x3fd287a7
 800a20c:	8b60c8b3 	.word	0x8b60c8b3
 800a210:	3fc68a28 	.word	0x3fc68a28
 800a214:	509f79fb 	.word	0x509f79fb
 800a218:	3fd34413 	.word	0x3fd34413
 800a21c:	0800d338 	.word	0x0800d338
 800a220:	00000432 	.word	0x00000432
 800a224:	00000412 	.word	0x00000412
 800a228:	fe100000 	.word	0xfe100000
 800a22c:	0800d228 	.word	0x0800d228
 800a230:	0800d310 	.word	0x0800d310
 800a234:	2302      	movs	r3, #2
 800a236:	9310      	str	r3, [sp, #64]	; 0x40
 800a238:	9b02      	ldr	r3, [sp, #8]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d016      	beq.n	800a26c <_dtoa_r+0x3dc>
 800a23e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a240:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a242:	425c      	negs	r4, r3
 800a244:	230f      	movs	r3, #15
 800a246:	4ab6      	ldr	r2, [pc, #728]	; (800a520 <_dtoa_r+0x690>)
 800a248:	4023      	ands	r3, r4
 800a24a:	00db      	lsls	r3, r3, #3
 800a24c:	18d3      	adds	r3, r2, r3
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	f7f7 fccd 	bl	8001bf0 <__aeabi_dmul>
 800a256:	2601      	movs	r6, #1
 800a258:	2300      	movs	r3, #0
 800a25a:	9008      	str	r0, [sp, #32]
 800a25c:	9109      	str	r1, [sp, #36]	; 0x24
 800a25e:	4db1      	ldr	r5, [pc, #708]	; (800a524 <_dtoa_r+0x694>)
 800a260:	1124      	asrs	r4, r4, #4
 800a262:	2c00      	cmp	r4, #0
 800a264:	d000      	beq.n	800a268 <_dtoa_r+0x3d8>
 800a266:	e094      	b.n	800a392 <_dtoa_r+0x502>
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d19f      	bne.n	800a1ac <_dtoa_r+0x31c>
 800a26c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d100      	bne.n	800a274 <_dtoa_r+0x3e4>
 800a272:	e09b      	b.n	800a3ac <_dtoa_r+0x51c>
 800a274:	9c08      	ldr	r4, [sp, #32]
 800a276:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a278:	2200      	movs	r2, #0
 800a27a:	0020      	movs	r0, r4
 800a27c:	0029      	movs	r1, r5
 800a27e:	4baa      	ldr	r3, [pc, #680]	; (800a528 <_dtoa_r+0x698>)
 800a280:	f7f6 f8ea 	bl	8000458 <__aeabi_dcmplt>
 800a284:	2800      	cmp	r0, #0
 800a286:	d100      	bne.n	800a28a <_dtoa_r+0x3fa>
 800a288:	e090      	b.n	800a3ac <_dtoa_r+0x51c>
 800a28a:	9b07      	ldr	r3, [sp, #28]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d100      	bne.n	800a292 <_dtoa_r+0x402>
 800a290:	e08c      	b.n	800a3ac <_dtoa_r+0x51c>
 800a292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a294:	2b00      	cmp	r3, #0
 800a296:	dd46      	ble.n	800a326 <_dtoa_r+0x496>
 800a298:	9b02      	ldr	r3, [sp, #8]
 800a29a:	2200      	movs	r2, #0
 800a29c:	0020      	movs	r0, r4
 800a29e:	0029      	movs	r1, r5
 800a2a0:	1e5e      	subs	r6, r3, #1
 800a2a2:	4ba2      	ldr	r3, [pc, #648]	; (800a52c <_dtoa_r+0x69c>)
 800a2a4:	f7f7 fca4 	bl	8001bf0 <__aeabi_dmul>
 800a2a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2aa:	9008      	str	r0, [sp, #32]
 800a2ac:	9109      	str	r1, [sp, #36]	; 0x24
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	9310      	str	r3, [sp, #64]	; 0x40
 800a2b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a2b6:	9c08      	ldr	r4, [sp, #32]
 800a2b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a2ba:	9314      	str	r3, [sp, #80]	; 0x50
 800a2bc:	f7f8 faea 	bl	8002894 <__aeabi_i2d>
 800a2c0:	0022      	movs	r2, r4
 800a2c2:	002b      	movs	r3, r5
 800a2c4:	f7f7 fc94 	bl	8001bf0 <__aeabi_dmul>
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	4b99      	ldr	r3, [pc, #612]	; (800a530 <_dtoa_r+0x6a0>)
 800a2cc:	f7f6 fd52 	bl	8000d74 <__aeabi_dadd>
 800a2d0:	9010      	str	r0, [sp, #64]	; 0x40
 800a2d2:	9111      	str	r1, [sp, #68]	; 0x44
 800a2d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2d8:	9208      	str	r2, [sp, #32]
 800a2da:	9309      	str	r3, [sp, #36]	; 0x24
 800a2dc:	4a95      	ldr	r2, [pc, #596]	; (800a534 <_dtoa_r+0x6a4>)
 800a2de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2e0:	4694      	mov	ip, r2
 800a2e2:	4463      	add	r3, ip
 800a2e4:	9317      	str	r3, [sp, #92]	; 0x5c
 800a2e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d161      	bne.n	800a3b2 <_dtoa_r+0x522>
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	0020      	movs	r0, r4
 800a2f2:	0029      	movs	r1, r5
 800a2f4:	4b90      	ldr	r3, [pc, #576]	; (800a538 <_dtoa_r+0x6a8>)
 800a2f6:	f7f7 fee7 	bl	80020c8 <__aeabi_dsub>
 800a2fa:	9a08      	ldr	r2, [sp, #32]
 800a2fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2fe:	0004      	movs	r4, r0
 800a300:	000d      	movs	r5, r1
 800a302:	f7f6 f8bd 	bl	8000480 <__aeabi_dcmpgt>
 800a306:	2800      	cmp	r0, #0
 800a308:	d000      	beq.n	800a30c <_dtoa_r+0x47c>
 800a30a:	e2af      	b.n	800a86c <_dtoa_r+0x9dc>
 800a30c:	488b      	ldr	r0, [pc, #556]	; (800a53c <_dtoa_r+0x6ac>)
 800a30e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a310:	4684      	mov	ip, r0
 800a312:	4461      	add	r1, ip
 800a314:	000b      	movs	r3, r1
 800a316:	0020      	movs	r0, r4
 800a318:	0029      	movs	r1, r5
 800a31a:	9a08      	ldr	r2, [sp, #32]
 800a31c:	f7f6 f89c 	bl	8000458 <__aeabi_dcmplt>
 800a320:	2800      	cmp	r0, #0
 800a322:	d000      	beq.n	800a326 <_dtoa_r+0x496>
 800a324:	e29f      	b.n	800a866 <_dtoa_r+0x9d6>
 800a326:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a328:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a32a:	9308      	str	r3, [sp, #32]
 800a32c:	9409      	str	r4, [sp, #36]	; 0x24
 800a32e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a330:	2b00      	cmp	r3, #0
 800a332:	da00      	bge.n	800a336 <_dtoa_r+0x4a6>
 800a334:	e172      	b.n	800a61c <_dtoa_r+0x78c>
 800a336:	9a02      	ldr	r2, [sp, #8]
 800a338:	2a0e      	cmp	r2, #14
 800a33a:	dd00      	ble.n	800a33e <_dtoa_r+0x4ae>
 800a33c:	e16e      	b.n	800a61c <_dtoa_r+0x78c>
 800a33e:	4b78      	ldr	r3, [pc, #480]	; (800a520 <_dtoa_r+0x690>)
 800a340:	00d2      	lsls	r2, r2, #3
 800a342:	189b      	adds	r3, r3, r2
 800a344:	685c      	ldr	r4, [r3, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	930a      	str	r3, [sp, #40]	; 0x28
 800a34a:	940b      	str	r4, [sp, #44]	; 0x2c
 800a34c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	db00      	blt.n	800a354 <_dtoa_r+0x4c4>
 800a352:	e0f7      	b.n	800a544 <_dtoa_r+0x6b4>
 800a354:	9b07      	ldr	r3, [sp, #28]
 800a356:	2b00      	cmp	r3, #0
 800a358:	dd00      	ble.n	800a35c <_dtoa_r+0x4cc>
 800a35a:	e0f3      	b.n	800a544 <_dtoa_r+0x6b4>
 800a35c:	d000      	beq.n	800a360 <_dtoa_r+0x4d0>
 800a35e:	e282      	b.n	800a866 <_dtoa_r+0x9d6>
 800a360:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a362:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a364:	2200      	movs	r2, #0
 800a366:	4b74      	ldr	r3, [pc, #464]	; (800a538 <_dtoa_r+0x6a8>)
 800a368:	f7f7 fc42 	bl	8001bf0 <__aeabi_dmul>
 800a36c:	9a08      	ldr	r2, [sp, #32]
 800a36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a370:	f7f6 f890 	bl	8000494 <__aeabi_dcmpge>
 800a374:	9e07      	ldr	r6, [sp, #28]
 800a376:	0035      	movs	r5, r6
 800a378:	2800      	cmp	r0, #0
 800a37a:	d000      	beq.n	800a37e <_dtoa_r+0x4ee>
 800a37c:	e259      	b.n	800a832 <_dtoa_r+0x9a2>
 800a37e:	9b06      	ldr	r3, [sp, #24]
 800a380:	9a06      	ldr	r2, [sp, #24]
 800a382:	3301      	adds	r3, #1
 800a384:	9308      	str	r3, [sp, #32]
 800a386:	2331      	movs	r3, #49	; 0x31
 800a388:	7013      	strb	r3, [r2, #0]
 800a38a:	9b02      	ldr	r3, [sp, #8]
 800a38c:	3301      	adds	r3, #1
 800a38e:	9302      	str	r3, [sp, #8]
 800a390:	e254      	b.n	800a83c <_dtoa_r+0x9ac>
 800a392:	4234      	tst	r4, r6
 800a394:	d007      	beq.n	800a3a6 <_dtoa_r+0x516>
 800a396:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a398:	3301      	adds	r3, #1
 800a39a:	9310      	str	r3, [sp, #64]	; 0x40
 800a39c:	682a      	ldr	r2, [r5, #0]
 800a39e:	686b      	ldr	r3, [r5, #4]
 800a3a0:	f7f7 fc26 	bl	8001bf0 <__aeabi_dmul>
 800a3a4:	0033      	movs	r3, r6
 800a3a6:	1064      	asrs	r4, r4, #1
 800a3a8:	3508      	adds	r5, #8
 800a3aa:	e75a      	b.n	800a262 <_dtoa_r+0x3d2>
 800a3ac:	9e02      	ldr	r6, [sp, #8]
 800a3ae:	9b07      	ldr	r3, [sp, #28]
 800a3b0:	e780      	b.n	800a2b4 <_dtoa_r+0x424>
 800a3b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a3b6:	1e5a      	subs	r2, r3, #1
 800a3b8:	4b59      	ldr	r3, [pc, #356]	; (800a520 <_dtoa_r+0x690>)
 800a3ba:	00d2      	lsls	r2, r2, #3
 800a3bc:	189b      	adds	r3, r3, r2
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	2900      	cmp	r1, #0
 800a3c4:	d051      	beq.n	800a46a <_dtoa_r+0x5da>
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	495d      	ldr	r1, [pc, #372]	; (800a540 <_dtoa_r+0x6b0>)
 800a3ca:	f7f7 f80f 	bl	80013ec <__aeabi_ddiv>
 800a3ce:	9a08      	ldr	r2, [sp, #32]
 800a3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3d2:	f7f7 fe79 	bl	80020c8 <__aeabi_dsub>
 800a3d6:	9a06      	ldr	r2, [sp, #24]
 800a3d8:	9b06      	ldr	r3, [sp, #24]
 800a3da:	4694      	mov	ip, r2
 800a3dc:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3e0:	9010      	str	r0, [sp, #64]	; 0x40
 800a3e2:	9111      	str	r1, [sp, #68]	; 0x44
 800a3e4:	4463      	add	r3, ip
 800a3e6:	9319      	str	r3, [sp, #100]	; 0x64
 800a3e8:	0029      	movs	r1, r5
 800a3ea:	0020      	movs	r0, r4
 800a3ec:	f7f8 fa1c 	bl	8002828 <__aeabi_d2iz>
 800a3f0:	9014      	str	r0, [sp, #80]	; 0x50
 800a3f2:	f7f8 fa4f 	bl	8002894 <__aeabi_i2d>
 800a3f6:	0002      	movs	r2, r0
 800a3f8:	000b      	movs	r3, r1
 800a3fa:	0020      	movs	r0, r4
 800a3fc:	0029      	movs	r1, r5
 800a3fe:	f7f7 fe63 	bl	80020c8 <__aeabi_dsub>
 800a402:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a404:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a406:	3301      	adds	r3, #1
 800a408:	9308      	str	r3, [sp, #32]
 800a40a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a40c:	0004      	movs	r4, r0
 800a40e:	3330      	adds	r3, #48	; 0x30
 800a410:	7013      	strb	r3, [r2, #0]
 800a412:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a414:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a416:	000d      	movs	r5, r1
 800a418:	f7f6 f81e 	bl	8000458 <__aeabi_dcmplt>
 800a41c:	2800      	cmp	r0, #0
 800a41e:	d175      	bne.n	800a50c <_dtoa_r+0x67c>
 800a420:	0022      	movs	r2, r4
 800a422:	002b      	movs	r3, r5
 800a424:	2000      	movs	r0, #0
 800a426:	4940      	ldr	r1, [pc, #256]	; (800a528 <_dtoa_r+0x698>)
 800a428:	f7f7 fe4e 	bl	80020c8 <__aeabi_dsub>
 800a42c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a42e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a430:	f7f6 f812 	bl	8000458 <__aeabi_dcmplt>
 800a434:	2800      	cmp	r0, #0
 800a436:	d000      	beq.n	800a43a <_dtoa_r+0x5aa>
 800a438:	e0d2      	b.n	800a5e0 <_dtoa_r+0x750>
 800a43a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a43c:	9a08      	ldr	r2, [sp, #32]
 800a43e:	4293      	cmp	r3, r2
 800a440:	d100      	bne.n	800a444 <_dtoa_r+0x5b4>
 800a442:	e770      	b.n	800a326 <_dtoa_r+0x496>
 800a444:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a446:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a448:	2200      	movs	r2, #0
 800a44a:	4b38      	ldr	r3, [pc, #224]	; (800a52c <_dtoa_r+0x69c>)
 800a44c:	f7f7 fbd0 	bl	8001bf0 <__aeabi_dmul>
 800a450:	4b36      	ldr	r3, [pc, #216]	; (800a52c <_dtoa_r+0x69c>)
 800a452:	9010      	str	r0, [sp, #64]	; 0x40
 800a454:	9111      	str	r1, [sp, #68]	; 0x44
 800a456:	2200      	movs	r2, #0
 800a458:	0020      	movs	r0, r4
 800a45a:	0029      	movs	r1, r5
 800a45c:	f7f7 fbc8 	bl	8001bf0 <__aeabi_dmul>
 800a460:	9b08      	ldr	r3, [sp, #32]
 800a462:	0004      	movs	r4, r0
 800a464:	000d      	movs	r5, r1
 800a466:	9317      	str	r3, [sp, #92]	; 0x5c
 800a468:	e7be      	b.n	800a3e8 <_dtoa_r+0x558>
 800a46a:	9808      	ldr	r0, [sp, #32]
 800a46c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a46e:	f7f7 fbbf 	bl	8001bf0 <__aeabi_dmul>
 800a472:	9a06      	ldr	r2, [sp, #24]
 800a474:	9b06      	ldr	r3, [sp, #24]
 800a476:	4694      	mov	ip, r2
 800a478:	9308      	str	r3, [sp, #32]
 800a47a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a47c:	9010      	str	r0, [sp, #64]	; 0x40
 800a47e:	9111      	str	r1, [sp, #68]	; 0x44
 800a480:	4463      	add	r3, ip
 800a482:	9319      	str	r3, [sp, #100]	; 0x64
 800a484:	0029      	movs	r1, r5
 800a486:	0020      	movs	r0, r4
 800a488:	f7f8 f9ce 	bl	8002828 <__aeabi_d2iz>
 800a48c:	9017      	str	r0, [sp, #92]	; 0x5c
 800a48e:	f7f8 fa01 	bl	8002894 <__aeabi_i2d>
 800a492:	0002      	movs	r2, r0
 800a494:	000b      	movs	r3, r1
 800a496:	0020      	movs	r0, r4
 800a498:	0029      	movs	r1, r5
 800a49a:	f7f7 fe15 	bl	80020c8 <__aeabi_dsub>
 800a49e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4a0:	9a08      	ldr	r2, [sp, #32]
 800a4a2:	3330      	adds	r3, #48	; 0x30
 800a4a4:	7013      	strb	r3, [r2, #0]
 800a4a6:	0013      	movs	r3, r2
 800a4a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	0004      	movs	r4, r0
 800a4ae:	000d      	movs	r5, r1
 800a4b0:	9308      	str	r3, [sp, #32]
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d12c      	bne.n	800a510 <_dtoa_r+0x680>
 800a4b6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a4b8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a4ba:	9a06      	ldr	r2, [sp, #24]
 800a4bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4be:	4694      	mov	ip, r2
 800a4c0:	4463      	add	r3, ip
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	9308      	str	r3, [sp, #32]
 800a4c6:	4b1e      	ldr	r3, [pc, #120]	; (800a540 <_dtoa_r+0x6b0>)
 800a4c8:	f7f6 fc54 	bl	8000d74 <__aeabi_dadd>
 800a4cc:	0002      	movs	r2, r0
 800a4ce:	000b      	movs	r3, r1
 800a4d0:	0020      	movs	r0, r4
 800a4d2:	0029      	movs	r1, r5
 800a4d4:	f7f5 ffd4 	bl	8000480 <__aeabi_dcmpgt>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d000      	beq.n	800a4de <_dtoa_r+0x64e>
 800a4dc:	e080      	b.n	800a5e0 <_dtoa_r+0x750>
 800a4de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a4e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	4916      	ldr	r1, [pc, #88]	; (800a540 <_dtoa_r+0x6b0>)
 800a4e6:	f7f7 fdef 	bl	80020c8 <__aeabi_dsub>
 800a4ea:	0002      	movs	r2, r0
 800a4ec:	000b      	movs	r3, r1
 800a4ee:	0020      	movs	r0, r4
 800a4f0:	0029      	movs	r1, r5
 800a4f2:	f7f5 ffb1 	bl	8000458 <__aeabi_dcmplt>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d100      	bne.n	800a4fc <_dtoa_r+0x66c>
 800a4fa:	e714      	b.n	800a326 <_dtoa_r+0x496>
 800a4fc:	9b08      	ldr	r3, [sp, #32]
 800a4fe:	001a      	movs	r2, r3
 800a500:	3a01      	subs	r2, #1
 800a502:	9208      	str	r2, [sp, #32]
 800a504:	7812      	ldrb	r2, [r2, #0]
 800a506:	2a30      	cmp	r2, #48	; 0x30
 800a508:	d0f8      	beq.n	800a4fc <_dtoa_r+0x66c>
 800a50a:	9308      	str	r3, [sp, #32]
 800a50c:	9602      	str	r6, [sp, #8]
 800a50e:	e055      	b.n	800a5bc <_dtoa_r+0x72c>
 800a510:	2200      	movs	r2, #0
 800a512:	4b06      	ldr	r3, [pc, #24]	; (800a52c <_dtoa_r+0x69c>)
 800a514:	f7f7 fb6c 	bl	8001bf0 <__aeabi_dmul>
 800a518:	0004      	movs	r4, r0
 800a51a:	000d      	movs	r5, r1
 800a51c:	e7b2      	b.n	800a484 <_dtoa_r+0x5f4>
 800a51e:	46c0      	nop			; (mov r8, r8)
 800a520:	0800d338 	.word	0x0800d338
 800a524:	0800d310 	.word	0x0800d310
 800a528:	3ff00000 	.word	0x3ff00000
 800a52c:	40240000 	.word	0x40240000
 800a530:	401c0000 	.word	0x401c0000
 800a534:	fcc00000 	.word	0xfcc00000
 800a538:	40140000 	.word	0x40140000
 800a53c:	7cc00000 	.word	0x7cc00000
 800a540:	3fe00000 	.word	0x3fe00000
 800a544:	9b07      	ldr	r3, [sp, #28]
 800a546:	9e06      	ldr	r6, [sp, #24]
 800a548:	3b01      	subs	r3, #1
 800a54a:	199b      	adds	r3, r3, r6
 800a54c:	930c      	str	r3, [sp, #48]	; 0x30
 800a54e:	9c08      	ldr	r4, [sp, #32]
 800a550:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a556:	0020      	movs	r0, r4
 800a558:	0029      	movs	r1, r5
 800a55a:	f7f6 ff47 	bl	80013ec <__aeabi_ddiv>
 800a55e:	f7f8 f963 	bl	8002828 <__aeabi_d2iz>
 800a562:	9007      	str	r0, [sp, #28]
 800a564:	f7f8 f996 	bl	8002894 <__aeabi_i2d>
 800a568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a56a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a56c:	f7f7 fb40 	bl	8001bf0 <__aeabi_dmul>
 800a570:	0002      	movs	r2, r0
 800a572:	000b      	movs	r3, r1
 800a574:	0020      	movs	r0, r4
 800a576:	0029      	movs	r1, r5
 800a578:	f7f7 fda6 	bl	80020c8 <__aeabi_dsub>
 800a57c:	0033      	movs	r3, r6
 800a57e:	9a07      	ldr	r2, [sp, #28]
 800a580:	3601      	adds	r6, #1
 800a582:	3230      	adds	r2, #48	; 0x30
 800a584:	701a      	strb	r2, [r3, #0]
 800a586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a588:	9608      	str	r6, [sp, #32]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d139      	bne.n	800a602 <_dtoa_r+0x772>
 800a58e:	0002      	movs	r2, r0
 800a590:	000b      	movs	r3, r1
 800a592:	f7f6 fbef 	bl	8000d74 <__aeabi_dadd>
 800a596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a59a:	0004      	movs	r4, r0
 800a59c:	000d      	movs	r5, r1
 800a59e:	f7f5 ff6f 	bl	8000480 <__aeabi_dcmpgt>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d11b      	bne.n	800a5de <_dtoa_r+0x74e>
 800a5a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5aa:	0020      	movs	r0, r4
 800a5ac:	0029      	movs	r1, r5
 800a5ae:	f7f5 ff4d 	bl	800044c <__aeabi_dcmpeq>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	d002      	beq.n	800a5bc <_dtoa_r+0x72c>
 800a5b6:	9b07      	ldr	r3, [sp, #28]
 800a5b8:	07db      	lsls	r3, r3, #31
 800a5ba:	d410      	bmi.n	800a5de <_dtoa_r+0x74e>
 800a5bc:	0038      	movs	r0, r7
 800a5be:	9905      	ldr	r1, [sp, #20]
 800a5c0:	f000 fe6c 	bl	800b29c <_Bfree>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	9a08      	ldr	r2, [sp, #32]
 800a5c8:	9802      	ldr	r0, [sp, #8]
 800a5ca:	7013      	strb	r3, [r2, #0]
 800a5cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a5ce:	3001      	adds	r0, #1
 800a5d0:	6018      	str	r0, [r3, #0]
 800a5d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d100      	bne.n	800a5da <_dtoa_r+0x74a>
 800a5d8:	e4a6      	b.n	8009f28 <_dtoa_r+0x98>
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	e4a4      	b.n	8009f28 <_dtoa_r+0x98>
 800a5de:	9e02      	ldr	r6, [sp, #8]
 800a5e0:	9b08      	ldr	r3, [sp, #32]
 800a5e2:	9308      	str	r3, [sp, #32]
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	781a      	ldrb	r2, [r3, #0]
 800a5e8:	2a39      	cmp	r2, #57	; 0x39
 800a5ea:	d106      	bne.n	800a5fa <_dtoa_r+0x76a>
 800a5ec:	9a06      	ldr	r2, [sp, #24]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d1f7      	bne.n	800a5e2 <_dtoa_r+0x752>
 800a5f2:	2230      	movs	r2, #48	; 0x30
 800a5f4:	9906      	ldr	r1, [sp, #24]
 800a5f6:	3601      	adds	r6, #1
 800a5f8:	700a      	strb	r2, [r1, #0]
 800a5fa:	781a      	ldrb	r2, [r3, #0]
 800a5fc:	3201      	adds	r2, #1
 800a5fe:	701a      	strb	r2, [r3, #0]
 800a600:	e784      	b.n	800a50c <_dtoa_r+0x67c>
 800a602:	2200      	movs	r2, #0
 800a604:	4baa      	ldr	r3, [pc, #680]	; (800a8b0 <_dtoa_r+0xa20>)
 800a606:	f7f7 faf3 	bl	8001bf0 <__aeabi_dmul>
 800a60a:	2200      	movs	r2, #0
 800a60c:	2300      	movs	r3, #0
 800a60e:	0004      	movs	r4, r0
 800a610:	000d      	movs	r5, r1
 800a612:	f7f5 ff1b 	bl	800044c <__aeabi_dcmpeq>
 800a616:	2800      	cmp	r0, #0
 800a618:	d09b      	beq.n	800a552 <_dtoa_r+0x6c2>
 800a61a:	e7cf      	b.n	800a5bc <_dtoa_r+0x72c>
 800a61c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a61e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a620:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a622:	2d00      	cmp	r5, #0
 800a624:	d012      	beq.n	800a64c <_dtoa_r+0x7bc>
 800a626:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a628:	2a01      	cmp	r2, #1
 800a62a:	dc66      	bgt.n	800a6fa <_dtoa_r+0x86a>
 800a62c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a62e:	2a00      	cmp	r2, #0
 800a630:	d05d      	beq.n	800a6ee <_dtoa_r+0x85e>
 800a632:	4aa0      	ldr	r2, [pc, #640]	; (800a8b4 <_dtoa_r+0xa24>)
 800a634:	189b      	adds	r3, r3, r2
 800a636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a638:	2101      	movs	r1, #1
 800a63a:	18d2      	adds	r2, r2, r3
 800a63c:	920a      	str	r2, [sp, #40]	; 0x28
 800a63e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a640:	0038      	movs	r0, r7
 800a642:	18d3      	adds	r3, r2, r3
 800a644:	930d      	str	r3, [sp, #52]	; 0x34
 800a646:	f000 ff25 	bl	800b494 <__i2b>
 800a64a:	0005      	movs	r5, r0
 800a64c:	2c00      	cmp	r4, #0
 800a64e:	dd0e      	ble.n	800a66e <_dtoa_r+0x7de>
 800a650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a652:	2b00      	cmp	r3, #0
 800a654:	dd0b      	ble.n	800a66e <_dtoa_r+0x7de>
 800a656:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a658:	0023      	movs	r3, r4
 800a65a:	4294      	cmp	r4, r2
 800a65c:	dd00      	ble.n	800a660 <_dtoa_r+0x7d0>
 800a65e:	0013      	movs	r3, r2
 800a660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a662:	1ae4      	subs	r4, r4, r3
 800a664:	1ad2      	subs	r2, r2, r3
 800a666:	920a      	str	r2, [sp, #40]	; 0x28
 800a668:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	930d      	str	r3, [sp, #52]	; 0x34
 800a66e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a670:	2b00      	cmp	r3, #0
 800a672:	d01f      	beq.n	800a6b4 <_dtoa_r+0x824>
 800a674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a676:	2b00      	cmp	r3, #0
 800a678:	d054      	beq.n	800a724 <_dtoa_r+0x894>
 800a67a:	2e00      	cmp	r6, #0
 800a67c:	dd11      	ble.n	800a6a2 <_dtoa_r+0x812>
 800a67e:	0029      	movs	r1, r5
 800a680:	0032      	movs	r2, r6
 800a682:	0038      	movs	r0, r7
 800a684:	f000 ffcc 	bl	800b620 <__pow5mult>
 800a688:	9a05      	ldr	r2, [sp, #20]
 800a68a:	0001      	movs	r1, r0
 800a68c:	0005      	movs	r5, r0
 800a68e:	0038      	movs	r0, r7
 800a690:	f000 ff16 	bl	800b4c0 <__multiply>
 800a694:	9905      	ldr	r1, [sp, #20]
 800a696:	9014      	str	r0, [sp, #80]	; 0x50
 800a698:	0038      	movs	r0, r7
 800a69a:	f000 fdff 	bl	800b29c <_Bfree>
 800a69e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6a0:	9305      	str	r3, [sp, #20]
 800a6a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6a4:	1b9a      	subs	r2, r3, r6
 800a6a6:	42b3      	cmp	r3, r6
 800a6a8:	d004      	beq.n	800a6b4 <_dtoa_r+0x824>
 800a6aa:	0038      	movs	r0, r7
 800a6ac:	9905      	ldr	r1, [sp, #20]
 800a6ae:	f000 ffb7 	bl	800b620 <__pow5mult>
 800a6b2:	9005      	str	r0, [sp, #20]
 800a6b4:	2101      	movs	r1, #1
 800a6b6:	0038      	movs	r0, r7
 800a6b8:	f000 feec 	bl	800b494 <__i2b>
 800a6bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6be:	0006      	movs	r6, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	dd31      	ble.n	800a728 <_dtoa_r+0x898>
 800a6c4:	001a      	movs	r2, r3
 800a6c6:	0001      	movs	r1, r0
 800a6c8:	0038      	movs	r0, r7
 800a6ca:	f000 ffa9 	bl	800b620 <__pow5mult>
 800a6ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a6d0:	0006      	movs	r6, r0
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	dd2d      	ble.n	800a732 <_dtoa_r+0x8a2>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	930e      	str	r3, [sp, #56]	; 0x38
 800a6da:	6933      	ldr	r3, [r6, #16]
 800a6dc:	3303      	adds	r3, #3
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	18f3      	adds	r3, r6, r3
 800a6e2:	6858      	ldr	r0, [r3, #4]
 800a6e4:	f000 fe8e 	bl	800b404 <__hi0bits>
 800a6e8:	2320      	movs	r3, #32
 800a6ea:	1a18      	subs	r0, r3, r0
 800a6ec:	e039      	b.n	800a762 <_dtoa_r+0x8d2>
 800a6ee:	2336      	movs	r3, #54	; 0x36
 800a6f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a6f2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a6f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a6f6:	1a9b      	subs	r3, r3, r2
 800a6f8:	e79d      	b.n	800a636 <_dtoa_r+0x7a6>
 800a6fa:	9b07      	ldr	r3, [sp, #28]
 800a6fc:	1e5e      	subs	r6, r3, #1
 800a6fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a700:	42b3      	cmp	r3, r6
 800a702:	db07      	blt.n	800a714 <_dtoa_r+0x884>
 800a704:	1b9e      	subs	r6, r3, r6
 800a706:	9b07      	ldr	r3, [sp, #28]
 800a708:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	da93      	bge.n	800a636 <_dtoa_r+0x7a6>
 800a70e:	1ae4      	subs	r4, r4, r3
 800a710:	2300      	movs	r3, #0
 800a712:	e790      	b.n	800a636 <_dtoa_r+0x7a6>
 800a714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a716:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a718:	1af3      	subs	r3, r6, r3
 800a71a:	18d3      	adds	r3, r2, r3
 800a71c:	960e      	str	r6, [sp, #56]	; 0x38
 800a71e:	9315      	str	r3, [sp, #84]	; 0x54
 800a720:	2600      	movs	r6, #0
 800a722:	e7f0      	b.n	800a706 <_dtoa_r+0x876>
 800a724:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a726:	e7c0      	b.n	800a6aa <_dtoa_r+0x81a>
 800a728:	2300      	movs	r3, #0
 800a72a:	930e      	str	r3, [sp, #56]	; 0x38
 800a72c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a72e:	2b01      	cmp	r3, #1
 800a730:	dc13      	bgt.n	800a75a <_dtoa_r+0x8ca>
 800a732:	2300      	movs	r3, #0
 800a734:	930e      	str	r3, [sp, #56]	; 0x38
 800a736:	9b08      	ldr	r3, [sp, #32]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10e      	bne.n	800a75a <_dtoa_r+0x8ca>
 800a73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a73e:	031b      	lsls	r3, r3, #12
 800a740:	d10b      	bne.n	800a75a <_dtoa_r+0x8ca>
 800a742:	4b5d      	ldr	r3, [pc, #372]	; (800a8b8 <_dtoa_r+0xa28>)
 800a744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a746:	4213      	tst	r3, r2
 800a748:	d007      	beq.n	800a75a <_dtoa_r+0x8ca>
 800a74a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a74c:	3301      	adds	r3, #1
 800a74e:	930a      	str	r3, [sp, #40]	; 0x28
 800a750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a752:	3301      	adds	r3, #1
 800a754:	930d      	str	r3, [sp, #52]	; 0x34
 800a756:	2301      	movs	r3, #1
 800a758:	930e      	str	r3, [sp, #56]	; 0x38
 800a75a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a75c:	2001      	movs	r0, #1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1bb      	bne.n	800a6da <_dtoa_r+0x84a>
 800a762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a764:	221f      	movs	r2, #31
 800a766:	1818      	adds	r0, r3, r0
 800a768:	0003      	movs	r3, r0
 800a76a:	4013      	ands	r3, r2
 800a76c:	4210      	tst	r0, r2
 800a76e:	d046      	beq.n	800a7fe <_dtoa_r+0x96e>
 800a770:	3201      	adds	r2, #1
 800a772:	1ad2      	subs	r2, r2, r3
 800a774:	2a04      	cmp	r2, #4
 800a776:	dd3f      	ble.n	800a7f8 <_dtoa_r+0x968>
 800a778:	221c      	movs	r2, #28
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a77e:	18e4      	adds	r4, r4, r3
 800a780:	18d2      	adds	r2, r2, r3
 800a782:	920a      	str	r2, [sp, #40]	; 0x28
 800a784:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a786:	18d3      	adds	r3, r2, r3
 800a788:	930d      	str	r3, [sp, #52]	; 0x34
 800a78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	dd05      	ble.n	800a79c <_dtoa_r+0x90c>
 800a790:	001a      	movs	r2, r3
 800a792:	0038      	movs	r0, r7
 800a794:	9905      	ldr	r1, [sp, #20]
 800a796:	f000 ff9f 	bl	800b6d8 <__lshift>
 800a79a:	9005      	str	r0, [sp, #20]
 800a79c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	dd05      	ble.n	800a7ae <_dtoa_r+0x91e>
 800a7a2:	0031      	movs	r1, r6
 800a7a4:	001a      	movs	r2, r3
 800a7a6:	0038      	movs	r0, r7
 800a7a8:	f000 ff96 	bl	800b6d8 <__lshift>
 800a7ac:	0006      	movs	r6, r0
 800a7ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d026      	beq.n	800a802 <_dtoa_r+0x972>
 800a7b4:	0031      	movs	r1, r6
 800a7b6:	9805      	ldr	r0, [sp, #20]
 800a7b8:	f000 fffc 	bl	800b7b4 <__mcmp>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	da20      	bge.n	800a802 <_dtoa_r+0x972>
 800a7c0:	9b02      	ldr	r3, [sp, #8]
 800a7c2:	220a      	movs	r2, #10
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	9302      	str	r3, [sp, #8]
 800a7c8:	0038      	movs	r0, r7
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	9905      	ldr	r1, [sp, #20]
 800a7ce:	f000 fd89 	bl	800b2e4 <__multadd>
 800a7d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7d4:	9005      	str	r0, [sp, #20]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d100      	bne.n	800a7dc <_dtoa_r+0x94c>
 800a7da:	e166      	b.n	800aaaa <_dtoa_r+0xc1a>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	0029      	movs	r1, r5
 800a7e0:	220a      	movs	r2, #10
 800a7e2:	0038      	movs	r0, r7
 800a7e4:	f000 fd7e 	bl	800b2e4 <__multadd>
 800a7e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7ea:	0005      	movs	r5, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	dc47      	bgt.n	800a880 <_dtoa_r+0x9f0>
 800a7f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	dc0d      	bgt.n	800a812 <_dtoa_r+0x982>
 800a7f6:	e043      	b.n	800a880 <_dtoa_r+0x9f0>
 800a7f8:	2a04      	cmp	r2, #4
 800a7fa:	d0c6      	beq.n	800a78a <_dtoa_r+0x8fa>
 800a7fc:	0013      	movs	r3, r2
 800a7fe:	331c      	adds	r3, #28
 800a800:	e7bc      	b.n	800a77c <_dtoa_r+0x8ec>
 800a802:	9b07      	ldr	r3, [sp, #28]
 800a804:	2b00      	cmp	r3, #0
 800a806:	dc35      	bgt.n	800a874 <_dtoa_r+0x9e4>
 800a808:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	dd32      	ble.n	800a874 <_dtoa_r+0x9e4>
 800a80e:	9b07      	ldr	r3, [sp, #28]
 800a810:	930c      	str	r3, [sp, #48]	; 0x30
 800a812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10c      	bne.n	800a832 <_dtoa_r+0x9a2>
 800a818:	0031      	movs	r1, r6
 800a81a:	2205      	movs	r2, #5
 800a81c:	0038      	movs	r0, r7
 800a81e:	f000 fd61 	bl	800b2e4 <__multadd>
 800a822:	0006      	movs	r6, r0
 800a824:	0001      	movs	r1, r0
 800a826:	9805      	ldr	r0, [sp, #20]
 800a828:	f000 ffc4 	bl	800b7b4 <__mcmp>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	dd00      	ble.n	800a832 <_dtoa_r+0x9a2>
 800a830:	e5a5      	b.n	800a37e <_dtoa_r+0x4ee>
 800a832:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a834:	43db      	mvns	r3, r3
 800a836:	9302      	str	r3, [sp, #8]
 800a838:	9b06      	ldr	r3, [sp, #24]
 800a83a:	9308      	str	r3, [sp, #32]
 800a83c:	2400      	movs	r4, #0
 800a83e:	0031      	movs	r1, r6
 800a840:	0038      	movs	r0, r7
 800a842:	f000 fd2b 	bl	800b29c <_Bfree>
 800a846:	2d00      	cmp	r5, #0
 800a848:	d100      	bne.n	800a84c <_dtoa_r+0x9bc>
 800a84a:	e6b7      	b.n	800a5bc <_dtoa_r+0x72c>
 800a84c:	2c00      	cmp	r4, #0
 800a84e:	d005      	beq.n	800a85c <_dtoa_r+0x9cc>
 800a850:	42ac      	cmp	r4, r5
 800a852:	d003      	beq.n	800a85c <_dtoa_r+0x9cc>
 800a854:	0021      	movs	r1, r4
 800a856:	0038      	movs	r0, r7
 800a858:	f000 fd20 	bl	800b29c <_Bfree>
 800a85c:	0029      	movs	r1, r5
 800a85e:	0038      	movs	r0, r7
 800a860:	f000 fd1c 	bl	800b29c <_Bfree>
 800a864:	e6aa      	b.n	800a5bc <_dtoa_r+0x72c>
 800a866:	2600      	movs	r6, #0
 800a868:	0035      	movs	r5, r6
 800a86a:	e7e2      	b.n	800a832 <_dtoa_r+0x9a2>
 800a86c:	9602      	str	r6, [sp, #8]
 800a86e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800a870:	0035      	movs	r5, r6
 800a872:	e584      	b.n	800a37e <_dtoa_r+0x4ee>
 800a874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a876:	2b00      	cmp	r3, #0
 800a878:	d100      	bne.n	800a87c <_dtoa_r+0x9ec>
 800a87a:	e0ce      	b.n	800aa1a <_dtoa_r+0xb8a>
 800a87c:	9b07      	ldr	r3, [sp, #28]
 800a87e:	930c      	str	r3, [sp, #48]	; 0x30
 800a880:	2c00      	cmp	r4, #0
 800a882:	dd05      	ble.n	800a890 <_dtoa_r+0xa00>
 800a884:	0029      	movs	r1, r5
 800a886:	0022      	movs	r2, r4
 800a888:	0038      	movs	r0, r7
 800a88a:	f000 ff25 	bl	800b6d8 <__lshift>
 800a88e:	0005      	movs	r5, r0
 800a890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a892:	0028      	movs	r0, r5
 800a894:	2b00      	cmp	r3, #0
 800a896:	d022      	beq.n	800a8de <_dtoa_r+0xa4e>
 800a898:	0038      	movs	r0, r7
 800a89a:	6869      	ldr	r1, [r5, #4]
 800a89c:	f000 fcba 	bl	800b214 <_Balloc>
 800a8a0:	1e04      	subs	r4, r0, #0
 800a8a2:	d10f      	bne.n	800a8c4 <_dtoa_r+0xa34>
 800a8a4:	0002      	movs	r2, r0
 800a8a6:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <_dtoa_r+0xa2c>)
 800a8a8:	4905      	ldr	r1, [pc, #20]	; (800a8c0 <_dtoa_r+0xa30>)
 800a8aa:	f7ff fb06 	bl	8009eba <_dtoa_r+0x2a>
 800a8ae:	46c0      	nop			; (mov r8, r8)
 800a8b0:	40240000 	.word	0x40240000
 800a8b4:	00000433 	.word	0x00000433
 800a8b8:	7ff00000 	.word	0x7ff00000
 800a8bc:	0800d228 	.word	0x0800d228
 800a8c0:	000002ea 	.word	0x000002ea
 800a8c4:	0029      	movs	r1, r5
 800a8c6:	692b      	ldr	r3, [r5, #16]
 800a8c8:	310c      	adds	r1, #12
 800a8ca:	1c9a      	adds	r2, r3, #2
 800a8cc:	0092      	lsls	r2, r2, #2
 800a8ce:	300c      	adds	r0, #12
 800a8d0:	f000 fc97 	bl	800b202 <memcpy>
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	0021      	movs	r1, r4
 800a8d8:	0038      	movs	r0, r7
 800a8da:	f000 fefd 	bl	800b6d8 <__lshift>
 800a8de:	9b06      	ldr	r3, [sp, #24]
 800a8e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8e2:	930a      	str	r3, [sp, #40]	; 0x28
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	189b      	adds	r3, r3, r2
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	002c      	movs	r4, r5
 800a8ec:	0005      	movs	r5, r0
 800a8ee:	9314      	str	r3, [sp, #80]	; 0x50
 800a8f0:	9b08      	ldr	r3, [sp, #32]
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8f6:	0031      	movs	r1, r6
 800a8f8:	9805      	ldr	r0, [sp, #20]
 800a8fa:	f7ff fa3d 	bl	8009d78 <quorem>
 800a8fe:	0003      	movs	r3, r0
 800a900:	0021      	movs	r1, r4
 800a902:	3330      	adds	r3, #48	; 0x30
 800a904:	900d      	str	r0, [sp, #52]	; 0x34
 800a906:	9805      	ldr	r0, [sp, #20]
 800a908:	9307      	str	r3, [sp, #28]
 800a90a:	f000 ff53 	bl	800b7b4 <__mcmp>
 800a90e:	002a      	movs	r2, r5
 800a910:	900e      	str	r0, [sp, #56]	; 0x38
 800a912:	0031      	movs	r1, r6
 800a914:	0038      	movs	r0, r7
 800a916:	f000 ff69 	bl	800b7ec <__mdiff>
 800a91a:	68c3      	ldr	r3, [r0, #12]
 800a91c:	9008      	str	r0, [sp, #32]
 800a91e:	9310      	str	r3, [sp, #64]	; 0x40
 800a920:	2301      	movs	r3, #1
 800a922:	930c      	str	r3, [sp, #48]	; 0x30
 800a924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a926:	2b00      	cmp	r3, #0
 800a928:	d104      	bne.n	800a934 <_dtoa_r+0xaa4>
 800a92a:	0001      	movs	r1, r0
 800a92c:	9805      	ldr	r0, [sp, #20]
 800a92e:	f000 ff41 	bl	800b7b4 <__mcmp>
 800a932:	900c      	str	r0, [sp, #48]	; 0x30
 800a934:	0038      	movs	r0, r7
 800a936:	9908      	ldr	r1, [sp, #32]
 800a938:	f000 fcb0 	bl	800b29c <_Bfree>
 800a93c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a93e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a940:	3301      	adds	r3, #1
 800a942:	9308      	str	r3, [sp, #32]
 800a944:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a946:	4313      	orrs	r3, r2
 800a948:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a94a:	4313      	orrs	r3, r2
 800a94c:	d10c      	bne.n	800a968 <_dtoa_r+0xad8>
 800a94e:	9b07      	ldr	r3, [sp, #28]
 800a950:	2b39      	cmp	r3, #57	; 0x39
 800a952:	d026      	beq.n	800a9a2 <_dtoa_r+0xb12>
 800a954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a956:	2b00      	cmp	r3, #0
 800a958:	dd02      	ble.n	800a960 <_dtoa_r+0xad0>
 800a95a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a95c:	3331      	adds	r3, #49	; 0x31
 800a95e:	9307      	str	r3, [sp, #28]
 800a960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a962:	9a07      	ldr	r2, [sp, #28]
 800a964:	701a      	strb	r2, [r3, #0]
 800a966:	e76a      	b.n	800a83e <_dtoa_r+0x9ae>
 800a968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	db04      	blt.n	800a978 <_dtoa_r+0xae8>
 800a96e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a970:	4313      	orrs	r3, r2
 800a972:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a974:	4313      	orrs	r3, r2
 800a976:	d11f      	bne.n	800a9b8 <_dtoa_r+0xb28>
 800a978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	ddf0      	ble.n	800a960 <_dtoa_r+0xad0>
 800a97e:	9905      	ldr	r1, [sp, #20]
 800a980:	2201      	movs	r2, #1
 800a982:	0038      	movs	r0, r7
 800a984:	f000 fea8 	bl	800b6d8 <__lshift>
 800a988:	0031      	movs	r1, r6
 800a98a:	9005      	str	r0, [sp, #20]
 800a98c:	f000 ff12 	bl	800b7b4 <__mcmp>
 800a990:	2800      	cmp	r0, #0
 800a992:	dc03      	bgt.n	800a99c <_dtoa_r+0xb0c>
 800a994:	d1e4      	bne.n	800a960 <_dtoa_r+0xad0>
 800a996:	9b07      	ldr	r3, [sp, #28]
 800a998:	07db      	lsls	r3, r3, #31
 800a99a:	d5e1      	bpl.n	800a960 <_dtoa_r+0xad0>
 800a99c:	9b07      	ldr	r3, [sp, #28]
 800a99e:	2b39      	cmp	r3, #57	; 0x39
 800a9a0:	d1db      	bne.n	800a95a <_dtoa_r+0xaca>
 800a9a2:	2339      	movs	r3, #57	; 0x39
 800a9a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9a6:	7013      	strb	r3, [r2, #0]
 800a9a8:	9b08      	ldr	r3, [sp, #32]
 800a9aa:	9308      	str	r3, [sp, #32]
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	781a      	ldrb	r2, [r3, #0]
 800a9b0:	2a39      	cmp	r2, #57	; 0x39
 800a9b2:	d068      	beq.n	800aa86 <_dtoa_r+0xbf6>
 800a9b4:	3201      	adds	r2, #1
 800a9b6:	e7d5      	b.n	800a964 <_dtoa_r+0xad4>
 800a9b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	dd07      	ble.n	800a9ce <_dtoa_r+0xb3e>
 800a9be:	9b07      	ldr	r3, [sp, #28]
 800a9c0:	2b39      	cmp	r3, #57	; 0x39
 800a9c2:	d0ee      	beq.n	800a9a2 <_dtoa_r+0xb12>
 800a9c4:	9b07      	ldr	r3, [sp, #28]
 800a9c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	7013      	strb	r3, [r2, #0]
 800a9cc:	e737      	b.n	800a83e <_dtoa_r+0x9ae>
 800a9ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d0:	9a07      	ldr	r2, [sp, #28]
 800a9d2:	701a      	strb	r2, [r3, #0]
 800a9d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d03e      	beq.n	800aa5a <_dtoa_r+0xbca>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	220a      	movs	r2, #10
 800a9e0:	9905      	ldr	r1, [sp, #20]
 800a9e2:	0038      	movs	r0, r7
 800a9e4:	f000 fc7e 	bl	800b2e4 <__multadd>
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	9005      	str	r0, [sp, #20]
 800a9ec:	220a      	movs	r2, #10
 800a9ee:	0021      	movs	r1, r4
 800a9f0:	0038      	movs	r0, r7
 800a9f2:	42ac      	cmp	r4, r5
 800a9f4:	d106      	bne.n	800aa04 <_dtoa_r+0xb74>
 800a9f6:	f000 fc75 	bl	800b2e4 <__multadd>
 800a9fa:	0004      	movs	r4, r0
 800a9fc:	0005      	movs	r5, r0
 800a9fe:	9b08      	ldr	r3, [sp, #32]
 800aa00:	930a      	str	r3, [sp, #40]	; 0x28
 800aa02:	e778      	b.n	800a8f6 <_dtoa_r+0xa66>
 800aa04:	f000 fc6e 	bl	800b2e4 <__multadd>
 800aa08:	0029      	movs	r1, r5
 800aa0a:	0004      	movs	r4, r0
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	220a      	movs	r2, #10
 800aa10:	0038      	movs	r0, r7
 800aa12:	f000 fc67 	bl	800b2e4 <__multadd>
 800aa16:	0005      	movs	r5, r0
 800aa18:	e7f1      	b.n	800a9fe <_dtoa_r+0xb6e>
 800aa1a:	9b07      	ldr	r3, [sp, #28]
 800aa1c:	930c      	str	r3, [sp, #48]	; 0x30
 800aa1e:	2400      	movs	r4, #0
 800aa20:	0031      	movs	r1, r6
 800aa22:	9805      	ldr	r0, [sp, #20]
 800aa24:	f7ff f9a8 	bl	8009d78 <quorem>
 800aa28:	9b06      	ldr	r3, [sp, #24]
 800aa2a:	3030      	adds	r0, #48	; 0x30
 800aa2c:	5518      	strb	r0, [r3, r4]
 800aa2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa30:	3401      	adds	r4, #1
 800aa32:	9007      	str	r0, [sp, #28]
 800aa34:	42a3      	cmp	r3, r4
 800aa36:	dd07      	ble.n	800aa48 <_dtoa_r+0xbb8>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	220a      	movs	r2, #10
 800aa3c:	0038      	movs	r0, r7
 800aa3e:	9905      	ldr	r1, [sp, #20]
 800aa40:	f000 fc50 	bl	800b2e4 <__multadd>
 800aa44:	9005      	str	r0, [sp, #20]
 800aa46:	e7eb      	b.n	800aa20 <_dtoa_r+0xb90>
 800aa48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa4a:	2001      	movs	r0, #1
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	dd00      	ble.n	800aa52 <_dtoa_r+0xbc2>
 800aa50:	0018      	movs	r0, r3
 800aa52:	2400      	movs	r4, #0
 800aa54:	9b06      	ldr	r3, [sp, #24]
 800aa56:	181b      	adds	r3, r3, r0
 800aa58:	9308      	str	r3, [sp, #32]
 800aa5a:	9905      	ldr	r1, [sp, #20]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	0038      	movs	r0, r7
 800aa60:	f000 fe3a 	bl	800b6d8 <__lshift>
 800aa64:	0031      	movs	r1, r6
 800aa66:	9005      	str	r0, [sp, #20]
 800aa68:	f000 fea4 	bl	800b7b4 <__mcmp>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	dc9b      	bgt.n	800a9a8 <_dtoa_r+0xb18>
 800aa70:	d102      	bne.n	800aa78 <_dtoa_r+0xbe8>
 800aa72:	9b07      	ldr	r3, [sp, #28]
 800aa74:	07db      	lsls	r3, r3, #31
 800aa76:	d497      	bmi.n	800a9a8 <_dtoa_r+0xb18>
 800aa78:	9b08      	ldr	r3, [sp, #32]
 800aa7a:	9308      	str	r3, [sp, #32]
 800aa7c:	3b01      	subs	r3, #1
 800aa7e:	781a      	ldrb	r2, [r3, #0]
 800aa80:	2a30      	cmp	r2, #48	; 0x30
 800aa82:	d0fa      	beq.n	800aa7a <_dtoa_r+0xbea>
 800aa84:	e6db      	b.n	800a83e <_dtoa_r+0x9ae>
 800aa86:	9a06      	ldr	r2, [sp, #24]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d18e      	bne.n	800a9aa <_dtoa_r+0xb1a>
 800aa8c:	9b02      	ldr	r3, [sp, #8]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	9302      	str	r3, [sp, #8]
 800aa92:	2331      	movs	r3, #49	; 0x31
 800aa94:	e799      	b.n	800a9ca <_dtoa_r+0xb3a>
 800aa96:	4b09      	ldr	r3, [pc, #36]	; (800aabc <_dtoa_r+0xc2c>)
 800aa98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aa9a:	9306      	str	r3, [sp, #24]
 800aa9c:	4b08      	ldr	r3, [pc, #32]	; (800aac0 <_dtoa_r+0xc30>)
 800aa9e:	2a00      	cmp	r2, #0
 800aaa0:	d001      	beq.n	800aaa6 <_dtoa_r+0xc16>
 800aaa2:	f7ff fa3f 	bl	8009f24 <_dtoa_r+0x94>
 800aaa6:	f7ff fa3f 	bl	8009f28 <_dtoa_r+0x98>
 800aaaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	dcb6      	bgt.n	800aa1e <_dtoa_r+0xb8e>
 800aab0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	dd00      	ble.n	800aab8 <_dtoa_r+0xc28>
 800aab6:	e6ac      	b.n	800a812 <_dtoa_r+0x982>
 800aab8:	e7b1      	b.n	800aa1e <_dtoa_r+0xb8e>
 800aaba:	46c0      	nop			; (mov r8, r8)
 800aabc:	0800d1a9 	.word	0x0800d1a9
 800aac0:	0800d1b1 	.word	0x0800d1b1

0800aac4 <rshift>:
 800aac4:	0002      	movs	r2, r0
 800aac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aac8:	6904      	ldr	r4, [r0, #16]
 800aaca:	3214      	adds	r2, #20
 800aacc:	0013      	movs	r3, r2
 800aace:	b085      	sub	sp, #20
 800aad0:	114f      	asrs	r7, r1, #5
 800aad2:	42bc      	cmp	r4, r7
 800aad4:	dd31      	ble.n	800ab3a <rshift+0x76>
 800aad6:	00bb      	lsls	r3, r7, #2
 800aad8:	18d3      	adds	r3, r2, r3
 800aada:	261f      	movs	r6, #31
 800aadc:	9301      	str	r3, [sp, #4]
 800aade:	000b      	movs	r3, r1
 800aae0:	00a5      	lsls	r5, r4, #2
 800aae2:	4033      	ands	r3, r6
 800aae4:	1955      	adds	r5, r2, r5
 800aae6:	9302      	str	r3, [sp, #8]
 800aae8:	4231      	tst	r1, r6
 800aaea:	d10c      	bne.n	800ab06 <rshift+0x42>
 800aaec:	0016      	movs	r6, r2
 800aaee:	9901      	ldr	r1, [sp, #4]
 800aaf0:	428d      	cmp	r5, r1
 800aaf2:	d838      	bhi.n	800ab66 <rshift+0xa2>
 800aaf4:	9901      	ldr	r1, [sp, #4]
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	3903      	subs	r1, #3
 800aafa:	428d      	cmp	r5, r1
 800aafc:	d301      	bcc.n	800ab02 <rshift+0x3e>
 800aafe:	1be3      	subs	r3, r4, r7
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	18d3      	adds	r3, r2, r3
 800ab04:	e019      	b.n	800ab3a <rshift+0x76>
 800ab06:	2120      	movs	r1, #32
 800ab08:	9b02      	ldr	r3, [sp, #8]
 800ab0a:	9e01      	ldr	r6, [sp, #4]
 800ab0c:	1acb      	subs	r3, r1, r3
 800ab0e:	9303      	str	r3, [sp, #12]
 800ab10:	ce02      	ldmia	r6!, {r1}
 800ab12:	9b02      	ldr	r3, [sp, #8]
 800ab14:	4694      	mov	ip, r2
 800ab16:	40d9      	lsrs	r1, r3
 800ab18:	9100      	str	r1, [sp, #0]
 800ab1a:	42b5      	cmp	r5, r6
 800ab1c:	d816      	bhi.n	800ab4c <rshift+0x88>
 800ab1e:	9e01      	ldr	r6, [sp, #4]
 800ab20:	2300      	movs	r3, #0
 800ab22:	3601      	adds	r6, #1
 800ab24:	42b5      	cmp	r5, r6
 800ab26:	d302      	bcc.n	800ab2e <rshift+0x6a>
 800ab28:	1be3      	subs	r3, r4, r7
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	3b04      	subs	r3, #4
 800ab2e:	9900      	ldr	r1, [sp, #0]
 800ab30:	18d3      	adds	r3, r2, r3
 800ab32:	6019      	str	r1, [r3, #0]
 800ab34:	2900      	cmp	r1, #0
 800ab36:	d000      	beq.n	800ab3a <rshift+0x76>
 800ab38:	3304      	adds	r3, #4
 800ab3a:	1a99      	subs	r1, r3, r2
 800ab3c:	1089      	asrs	r1, r1, #2
 800ab3e:	6101      	str	r1, [r0, #16]
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d101      	bne.n	800ab48 <rshift+0x84>
 800ab44:	2300      	movs	r3, #0
 800ab46:	6143      	str	r3, [r0, #20]
 800ab48:	b005      	add	sp, #20
 800ab4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab4c:	6833      	ldr	r3, [r6, #0]
 800ab4e:	9903      	ldr	r1, [sp, #12]
 800ab50:	408b      	lsls	r3, r1
 800ab52:	9900      	ldr	r1, [sp, #0]
 800ab54:	4319      	orrs	r1, r3
 800ab56:	4663      	mov	r3, ip
 800ab58:	c302      	stmia	r3!, {r1}
 800ab5a:	469c      	mov	ip, r3
 800ab5c:	ce02      	ldmia	r6!, {r1}
 800ab5e:	9b02      	ldr	r3, [sp, #8]
 800ab60:	40d9      	lsrs	r1, r3
 800ab62:	9100      	str	r1, [sp, #0]
 800ab64:	e7d9      	b.n	800ab1a <rshift+0x56>
 800ab66:	c908      	ldmia	r1!, {r3}
 800ab68:	c608      	stmia	r6!, {r3}
 800ab6a:	e7c1      	b.n	800aaf0 <rshift+0x2c>

0800ab6c <__hexdig_fun>:
 800ab6c:	0002      	movs	r2, r0
 800ab6e:	3a30      	subs	r2, #48	; 0x30
 800ab70:	0003      	movs	r3, r0
 800ab72:	2a09      	cmp	r2, #9
 800ab74:	d802      	bhi.n	800ab7c <__hexdig_fun+0x10>
 800ab76:	3b20      	subs	r3, #32
 800ab78:	b2d8      	uxtb	r0, r3
 800ab7a:	4770      	bx	lr
 800ab7c:	0002      	movs	r2, r0
 800ab7e:	3a61      	subs	r2, #97	; 0x61
 800ab80:	2a05      	cmp	r2, #5
 800ab82:	d801      	bhi.n	800ab88 <__hexdig_fun+0x1c>
 800ab84:	3b47      	subs	r3, #71	; 0x47
 800ab86:	e7f7      	b.n	800ab78 <__hexdig_fun+0xc>
 800ab88:	001a      	movs	r2, r3
 800ab8a:	3a41      	subs	r2, #65	; 0x41
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	2a05      	cmp	r2, #5
 800ab90:	d8f3      	bhi.n	800ab7a <__hexdig_fun+0xe>
 800ab92:	3b27      	subs	r3, #39	; 0x27
 800ab94:	e7f0      	b.n	800ab78 <__hexdig_fun+0xc>
	...

0800ab98 <__gethex>:
 800ab98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab9a:	b08d      	sub	sp, #52	; 0x34
 800ab9c:	930a      	str	r3, [sp, #40]	; 0x28
 800ab9e:	4bbf      	ldr	r3, [pc, #764]	; (800ae9c <__gethex+0x304>)
 800aba0:	9005      	str	r0, [sp, #20]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	9109      	str	r1, [sp, #36]	; 0x24
 800aba6:	0018      	movs	r0, r3
 800aba8:	9202      	str	r2, [sp, #8]
 800abaa:	9307      	str	r3, [sp, #28]
 800abac:	f7f5 faac 	bl	8000108 <strlen>
 800abb0:	2202      	movs	r2, #2
 800abb2:	9b07      	ldr	r3, [sp, #28]
 800abb4:	4252      	negs	r2, r2
 800abb6:	181b      	adds	r3, r3, r0
 800abb8:	3b01      	subs	r3, #1
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	9003      	str	r0, [sp, #12]
 800abbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800abc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc2:	6819      	ldr	r1, [r3, #0]
 800abc4:	1c8b      	adds	r3, r1, #2
 800abc6:	1a52      	subs	r2, r2, r1
 800abc8:	18d1      	adds	r1, r2, r3
 800abca:	9301      	str	r3, [sp, #4]
 800abcc:	9108      	str	r1, [sp, #32]
 800abce:	9901      	ldr	r1, [sp, #4]
 800abd0:	3301      	adds	r3, #1
 800abd2:	7808      	ldrb	r0, [r1, #0]
 800abd4:	2830      	cmp	r0, #48	; 0x30
 800abd6:	d0f7      	beq.n	800abc8 <__gethex+0x30>
 800abd8:	f7ff ffc8 	bl	800ab6c <__hexdig_fun>
 800abdc:	2300      	movs	r3, #0
 800abde:	001c      	movs	r4, r3
 800abe0:	9304      	str	r3, [sp, #16]
 800abe2:	4298      	cmp	r0, r3
 800abe4:	d11f      	bne.n	800ac26 <__gethex+0x8e>
 800abe6:	9a03      	ldr	r2, [sp, #12]
 800abe8:	9907      	ldr	r1, [sp, #28]
 800abea:	9801      	ldr	r0, [sp, #4]
 800abec:	f001 fa64 	bl	800c0b8 <strncmp>
 800abf0:	0007      	movs	r7, r0
 800abf2:	42a0      	cmp	r0, r4
 800abf4:	d000      	beq.n	800abf8 <__gethex+0x60>
 800abf6:	e06b      	b.n	800acd0 <__gethex+0x138>
 800abf8:	9b01      	ldr	r3, [sp, #4]
 800abfa:	9a03      	ldr	r2, [sp, #12]
 800abfc:	5c98      	ldrb	r0, [r3, r2]
 800abfe:	189d      	adds	r5, r3, r2
 800ac00:	f7ff ffb4 	bl	800ab6c <__hexdig_fun>
 800ac04:	2301      	movs	r3, #1
 800ac06:	9304      	str	r3, [sp, #16]
 800ac08:	42a0      	cmp	r0, r4
 800ac0a:	d030      	beq.n	800ac6e <__gethex+0xd6>
 800ac0c:	9501      	str	r5, [sp, #4]
 800ac0e:	9b01      	ldr	r3, [sp, #4]
 800ac10:	7818      	ldrb	r0, [r3, #0]
 800ac12:	2830      	cmp	r0, #48	; 0x30
 800ac14:	d009      	beq.n	800ac2a <__gethex+0x92>
 800ac16:	f7ff ffa9 	bl	800ab6c <__hexdig_fun>
 800ac1a:	4242      	negs	r2, r0
 800ac1c:	4142      	adcs	r2, r0
 800ac1e:	2301      	movs	r3, #1
 800ac20:	002c      	movs	r4, r5
 800ac22:	9204      	str	r2, [sp, #16]
 800ac24:	9308      	str	r3, [sp, #32]
 800ac26:	9d01      	ldr	r5, [sp, #4]
 800ac28:	e004      	b.n	800ac34 <__gethex+0x9c>
 800ac2a:	9b01      	ldr	r3, [sp, #4]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	9301      	str	r3, [sp, #4]
 800ac30:	e7ed      	b.n	800ac0e <__gethex+0x76>
 800ac32:	3501      	adds	r5, #1
 800ac34:	7828      	ldrb	r0, [r5, #0]
 800ac36:	f7ff ff99 	bl	800ab6c <__hexdig_fun>
 800ac3a:	1e07      	subs	r7, r0, #0
 800ac3c:	d1f9      	bne.n	800ac32 <__gethex+0x9a>
 800ac3e:	0028      	movs	r0, r5
 800ac40:	9a03      	ldr	r2, [sp, #12]
 800ac42:	9907      	ldr	r1, [sp, #28]
 800ac44:	f001 fa38 	bl	800c0b8 <strncmp>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d10e      	bne.n	800ac6a <__gethex+0xd2>
 800ac4c:	2c00      	cmp	r4, #0
 800ac4e:	d107      	bne.n	800ac60 <__gethex+0xc8>
 800ac50:	9b03      	ldr	r3, [sp, #12]
 800ac52:	18ed      	adds	r5, r5, r3
 800ac54:	002c      	movs	r4, r5
 800ac56:	7828      	ldrb	r0, [r5, #0]
 800ac58:	f7ff ff88 	bl	800ab6c <__hexdig_fun>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d102      	bne.n	800ac66 <__gethex+0xce>
 800ac60:	1b64      	subs	r4, r4, r5
 800ac62:	00a7      	lsls	r7, r4, #2
 800ac64:	e003      	b.n	800ac6e <__gethex+0xd6>
 800ac66:	3501      	adds	r5, #1
 800ac68:	e7f5      	b.n	800ac56 <__gethex+0xbe>
 800ac6a:	2c00      	cmp	r4, #0
 800ac6c:	d1f8      	bne.n	800ac60 <__gethex+0xc8>
 800ac6e:	2220      	movs	r2, #32
 800ac70:	782b      	ldrb	r3, [r5, #0]
 800ac72:	002e      	movs	r6, r5
 800ac74:	4393      	bics	r3, r2
 800ac76:	2b50      	cmp	r3, #80	; 0x50
 800ac78:	d11d      	bne.n	800acb6 <__gethex+0x11e>
 800ac7a:	786b      	ldrb	r3, [r5, #1]
 800ac7c:	2b2b      	cmp	r3, #43	; 0x2b
 800ac7e:	d02c      	beq.n	800acda <__gethex+0x142>
 800ac80:	2b2d      	cmp	r3, #45	; 0x2d
 800ac82:	d02e      	beq.n	800ace2 <__gethex+0x14a>
 800ac84:	2300      	movs	r3, #0
 800ac86:	1c6e      	adds	r6, r5, #1
 800ac88:	9306      	str	r3, [sp, #24]
 800ac8a:	7830      	ldrb	r0, [r6, #0]
 800ac8c:	f7ff ff6e 	bl	800ab6c <__hexdig_fun>
 800ac90:	1e43      	subs	r3, r0, #1
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	2b18      	cmp	r3, #24
 800ac96:	d82b      	bhi.n	800acf0 <__gethex+0x158>
 800ac98:	3810      	subs	r0, #16
 800ac9a:	0004      	movs	r4, r0
 800ac9c:	7870      	ldrb	r0, [r6, #1]
 800ac9e:	f7ff ff65 	bl	800ab6c <__hexdig_fun>
 800aca2:	1e43      	subs	r3, r0, #1
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	3601      	adds	r6, #1
 800aca8:	2b18      	cmp	r3, #24
 800acaa:	d91c      	bls.n	800ace6 <__gethex+0x14e>
 800acac:	9b06      	ldr	r3, [sp, #24]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d000      	beq.n	800acb4 <__gethex+0x11c>
 800acb2:	4264      	negs	r4, r4
 800acb4:	193f      	adds	r7, r7, r4
 800acb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acb8:	601e      	str	r6, [r3, #0]
 800acba:	9b04      	ldr	r3, [sp, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d019      	beq.n	800acf4 <__gethex+0x15c>
 800acc0:	2600      	movs	r6, #0
 800acc2:	9b08      	ldr	r3, [sp, #32]
 800acc4:	42b3      	cmp	r3, r6
 800acc6:	d100      	bne.n	800acca <__gethex+0x132>
 800acc8:	3606      	adds	r6, #6
 800acca:	0030      	movs	r0, r6
 800accc:	b00d      	add	sp, #52	; 0x34
 800acce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acd0:	2301      	movs	r3, #1
 800acd2:	2700      	movs	r7, #0
 800acd4:	9d01      	ldr	r5, [sp, #4]
 800acd6:	9304      	str	r3, [sp, #16]
 800acd8:	e7c9      	b.n	800ac6e <__gethex+0xd6>
 800acda:	2300      	movs	r3, #0
 800acdc:	9306      	str	r3, [sp, #24]
 800acde:	1cae      	adds	r6, r5, #2
 800ace0:	e7d3      	b.n	800ac8a <__gethex+0xf2>
 800ace2:	2301      	movs	r3, #1
 800ace4:	e7fa      	b.n	800acdc <__gethex+0x144>
 800ace6:	230a      	movs	r3, #10
 800ace8:	435c      	muls	r4, r3
 800acea:	1824      	adds	r4, r4, r0
 800acec:	3c10      	subs	r4, #16
 800acee:	e7d5      	b.n	800ac9c <__gethex+0x104>
 800acf0:	002e      	movs	r6, r5
 800acf2:	e7e0      	b.n	800acb6 <__gethex+0x11e>
 800acf4:	9b01      	ldr	r3, [sp, #4]
 800acf6:	9904      	ldr	r1, [sp, #16]
 800acf8:	1aeb      	subs	r3, r5, r3
 800acfa:	3b01      	subs	r3, #1
 800acfc:	2b07      	cmp	r3, #7
 800acfe:	dc0a      	bgt.n	800ad16 <__gethex+0x17e>
 800ad00:	9805      	ldr	r0, [sp, #20]
 800ad02:	f000 fa87 	bl	800b214 <_Balloc>
 800ad06:	1e04      	subs	r4, r0, #0
 800ad08:	d108      	bne.n	800ad1c <__gethex+0x184>
 800ad0a:	0002      	movs	r2, r0
 800ad0c:	21de      	movs	r1, #222	; 0xde
 800ad0e:	4b64      	ldr	r3, [pc, #400]	; (800aea0 <__gethex+0x308>)
 800ad10:	4864      	ldr	r0, [pc, #400]	; (800aea4 <__gethex+0x30c>)
 800ad12:	f001 f9f1 	bl	800c0f8 <__assert_func>
 800ad16:	3101      	adds	r1, #1
 800ad18:	105b      	asrs	r3, r3, #1
 800ad1a:	e7ef      	b.n	800acfc <__gethex+0x164>
 800ad1c:	0003      	movs	r3, r0
 800ad1e:	3314      	adds	r3, #20
 800ad20:	9304      	str	r3, [sp, #16]
 800ad22:	9309      	str	r3, [sp, #36]	; 0x24
 800ad24:	2300      	movs	r3, #0
 800ad26:	001e      	movs	r6, r3
 800ad28:	9306      	str	r3, [sp, #24]
 800ad2a:	9b01      	ldr	r3, [sp, #4]
 800ad2c:	42ab      	cmp	r3, r5
 800ad2e:	d340      	bcc.n	800adb2 <__gethex+0x21a>
 800ad30:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ad32:	9b04      	ldr	r3, [sp, #16]
 800ad34:	c540      	stmia	r5!, {r6}
 800ad36:	1aed      	subs	r5, r5, r3
 800ad38:	10ad      	asrs	r5, r5, #2
 800ad3a:	0030      	movs	r0, r6
 800ad3c:	6125      	str	r5, [r4, #16]
 800ad3e:	f000 fb61 	bl	800b404 <__hi0bits>
 800ad42:	9b02      	ldr	r3, [sp, #8]
 800ad44:	016d      	lsls	r5, r5, #5
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	1a2e      	subs	r6, r5, r0
 800ad4a:	9301      	str	r3, [sp, #4]
 800ad4c:	429e      	cmp	r6, r3
 800ad4e:	dd5a      	ble.n	800ae06 <__gethex+0x26e>
 800ad50:	1af6      	subs	r6, r6, r3
 800ad52:	0031      	movs	r1, r6
 800ad54:	0020      	movs	r0, r4
 800ad56:	f000 ff03 	bl	800bb60 <__any_on>
 800ad5a:	1e05      	subs	r5, r0, #0
 800ad5c:	d016      	beq.n	800ad8c <__gethex+0x1f4>
 800ad5e:	2501      	movs	r5, #1
 800ad60:	211f      	movs	r1, #31
 800ad62:	0028      	movs	r0, r5
 800ad64:	1e73      	subs	r3, r6, #1
 800ad66:	4019      	ands	r1, r3
 800ad68:	4088      	lsls	r0, r1
 800ad6a:	0001      	movs	r1, r0
 800ad6c:	115a      	asrs	r2, r3, #5
 800ad6e:	9804      	ldr	r0, [sp, #16]
 800ad70:	0092      	lsls	r2, r2, #2
 800ad72:	5812      	ldr	r2, [r2, r0]
 800ad74:	420a      	tst	r2, r1
 800ad76:	d009      	beq.n	800ad8c <__gethex+0x1f4>
 800ad78:	42ab      	cmp	r3, r5
 800ad7a:	dd06      	ble.n	800ad8a <__gethex+0x1f2>
 800ad7c:	0020      	movs	r0, r4
 800ad7e:	1eb1      	subs	r1, r6, #2
 800ad80:	f000 feee 	bl	800bb60 <__any_on>
 800ad84:	3502      	adds	r5, #2
 800ad86:	2800      	cmp	r0, #0
 800ad88:	d100      	bne.n	800ad8c <__gethex+0x1f4>
 800ad8a:	2502      	movs	r5, #2
 800ad8c:	0031      	movs	r1, r6
 800ad8e:	0020      	movs	r0, r4
 800ad90:	f7ff fe98 	bl	800aac4 <rshift>
 800ad94:	19bf      	adds	r7, r7, r6
 800ad96:	9b02      	ldr	r3, [sp, #8]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	9303      	str	r3, [sp, #12]
 800ad9c:	42bb      	cmp	r3, r7
 800ad9e:	da42      	bge.n	800ae26 <__gethex+0x28e>
 800ada0:	0021      	movs	r1, r4
 800ada2:	9805      	ldr	r0, [sp, #20]
 800ada4:	f000 fa7a 	bl	800b29c <_Bfree>
 800ada8:	2300      	movs	r3, #0
 800adaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800adac:	26a3      	movs	r6, #163	; 0xa3
 800adae:	6013      	str	r3, [r2, #0]
 800adb0:	e78b      	b.n	800acca <__gethex+0x132>
 800adb2:	1e6b      	subs	r3, r5, #1
 800adb4:	9308      	str	r3, [sp, #32]
 800adb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	4293      	cmp	r3, r2
 800adbc:	d014      	beq.n	800ade8 <__gethex+0x250>
 800adbe:	9b06      	ldr	r3, [sp, #24]
 800adc0:	2b20      	cmp	r3, #32
 800adc2:	d104      	bne.n	800adce <__gethex+0x236>
 800adc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adc6:	c340      	stmia	r3!, {r6}
 800adc8:	2600      	movs	r6, #0
 800adca:	9309      	str	r3, [sp, #36]	; 0x24
 800adcc:	9606      	str	r6, [sp, #24]
 800adce:	9b08      	ldr	r3, [sp, #32]
 800add0:	7818      	ldrb	r0, [r3, #0]
 800add2:	f7ff fecb 	bl	800ab6c <__hexdig_fun>
 800add6:	230f      	movs	r3, #15
 800add8:	4018      	ands	r0, r3
 800adda:	9b06      	ldr	r3, [sp, #24]
 800addc:	9d08      	ldr	r5, [sp, #32]
 800adde:	4098      	lsls	r0, r3
 800ade0:	3304      	adds	r3, #4
 800ade2:	4306      	orrs	r6, r0
 800ade4:	9306      	str	r3, [sp, #24]
 800ade6:	e7a0      	b.n	800ad2a <__gethex+0x192>
 800ade8:	2301      	movs	r3, #1
 800adea:	9a03      	ldr	r2, [sp, #12]
 800adec:	1a9d      	subs	r5, r3, r2
 800adee:	9b08      	ldr	r3, [sp, #32]
 800adf0:	195d      	adds	r5, r3, r5
 800adf2:	9b01      	ldr	r3, [sp, #4]
 800adf4:	429d      	cmp	r5, r3
 800adf6:	d3e2      	bcc.n	800adbe <__gethex+0x226>
 800adf8:	0028      	movs	r0, r5
 800adfa:	9907      	ldr	r1, [sp, #28]
 800adfc:	f001 f95c 	bl	800c0b8 <strncmp>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d1dc      	bne.n	800adbe <__gethex+0x226>
 800ae04:	e791      	b.n	800ad2a <__gethex+0x192>
 800ae06:	9b01      	ldr	r3, [sp, #4]
 800ae08:	2500      	movs	r5, #0
 800ae0a:	429e      	cmp	r6, r3
 800ae0c:	dac3      	bge.n	800ad96 <__gethex+0x1fe>
 800ae0e:	1b9e      	subs	r6, r3, r6
 800ae10:	0021      	movs	r1, r4
 800ae12:	0032      	movs	r2, r6
 800ae14:	9805      	ldr	r0, [sp, #20]
 800ae16:	f000 fc5f 	bl	800b6d8 <__lshift>
 800ae1a:	0003      	movs	r3, r0
 800ae1c:	3314      	adds	r3, #20
 800ae1e:	0004      	movs	r4, r0
 800ae20:	1bbf      	subs	r7, r7, r6
 800ae22:	9304      	str	r3, [sp, #16]
 800ae24:	e7b7      	b.n	800ad96 <__gethex+0x1fe>
 800ae26:	9b02      	ldr	r3, [sp, #8]
 800ae28:	685e      	ldr	r6, [r3, #4]
 800ae2a:	42be      	cmp	r6, r7
 800ae2c:	dd71      	ble.n	800af12 <__gethex+0x37a>
 800ae2e:	9b01      	ldr	r3, [sp, #4]
 800ae30:	1bf6      	subs	r6, r6, r7
 800ae32:	42b3      	cmp	r3, r6
 800ae34:	dc38      	bgt.n	800aea8 <__gethex+0x310>
 800ae36:	9b02      	ldr	r3, [sp, #8]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d026      	beq.n	800ae8c <__gethex+0x2f4>
 800ae3e:	2b03      	cmp	r3, #3
 800ae40:	d028      	beq.n	800ae94 <__gethex+0x2fc>
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d119      	bne.n	800ae7a <__gethex+0x2e2>
 800ae46:	9b01      	ldr	r3, [sp, #4]
 800ae48:	42b3      	cmp	r3, r6
 800ae4a:	d116      	bne.n	800ae7a <__gethex+0x2e2>
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d10d      	bne.n	800ae6c <__gethex+0x2d4>
 800ae50:	9b02      	ldr	r3, [sp, #8]
 800ae52:	2662      	movs	r6, #98	; 0x62
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	9301      	str	r3, [sp, #4]
 800ae58:	9a01      	ldr	r2, [sp, #4]
 800ae5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	2301      	movs	r3, #1
 800ae60:	9a04      	ldr	r2, [sp, #16]
 800ae62:	6123      	str	r3, [r4, #16]
 800ae64:	6013      	str	r3, [r2, #0]
 800ae66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae68:	601c      	str	r4, [r3, #0]
 800ae6a:	e72e      	b.n	800acca <__gethex+0x132>
 800ae6c:	9901      	ldr	r1, [sp, #4]
 800ae6e:	0020      	movs	r0, r4
 800ae70:	3901      	subs	r1, #1
 800ae72:	f000 fe75 	bl	800bb60 <__any_on>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d1ea      	bne.n	800ae50 <__gethex+0x2b8>
 800ae7a:	0021      	movs	r1, r4
 800ae7c:	9805      	ldr	r0, [sp, #20]
 800ae7e:	f000 fa0d 	bl	800b29c <_Bfree>
 800ae82:	2300      	movs	r3, #0
 800ae84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae86:	2650      	movs	r6, #80	; 0x50
 800ae88:	6013      	str	r3, [r2, #0]
 800ae8a:	e71e      	b.n	800acca <__gethex+0x132>
 800ae8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d1f3      	bne.n	800ae7a <__gethex+0x2e2>
 800ae92:	e7dd      	b.n	800ae50 <__gethex+0x2b8>
 800ae94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1da      	bne.n	800ae50 <__gethex+0x2b8>
 800ae9a:	e7ee      	b.n	800ae7a <__gethex+0x2e2>
 800ae9c:	0800d2a0 	.word	0x0800d2a0
 800aea0:	0800d228 	.word	0x0800d228
 800aea4:	0800d239 	.word	0x0800d239
 800aea8:	1e77      	subs	r7, r6, #1
 800aeaa:	2d00      	cmp	r5, #0
 800aeac:	d12f      	bne.n	800af0e <__gethex+0x376>
 800aeae:	2f00      	cmp	r7, #0
 800aeb0:	d004      	beq.n	800aebc <__gethex+0x324>
 800aeb2:	0039      	movs	r1, r7
 800aeb4:	0020      	movs	r0, r4
 800aeb6:	f000 fe53 	bl	800bb60 <__any_on>
 800aeba:	0005      	movs	r5, r0
 800aebc:	231f      	movs	r3, #31
 800aebe:	117a      	asrs	r2, r7, #5
 800aec0:	401f      	ands	r7, r3
 800aec2:	3b1e      	subs	r3, #30
 800aec4:	40bb      	lsls	r3, r7
 800aec6:	9904      	ldr	r1, [sp, #16]
 800aec8:	0092      	lsls	r2, r2, #2
 800aeca:	5852      	ldr	r2, [r2, r1]
 800aecc:	421a      	tst	r2, r3
 800aece:	d001      	beq.n	800aed4 <__gethex+0x33c>
 800aed0:	2302      	movs	r3, #2
 800aed2:	431d      	orrs	r5, r3
 800aed4:	9b01      	ldr	r3, [sp, #4]
 800aed6:	0031      	movs	r1, r6
 800aed8:	1b9b      	subs	r3, r3, r6
 800aeda:	2602      	movs	r6, #2
 800aedc:	0020      	movs	r0, r4
 800aede:	9301      	str	r3, [sp, #4]
 800aee0:	f7ff fdf0 	bl	800aac4 <rshift>
 800aee4:	9b02      	ldr	r3, [sp, #8]
 800aee6:	685f      	ldr	r7, [r3, #4]
 800aee8:	2d00      	cmp	r5, #0
 800aeea:	d041      	beq.n	800af70 <__gethex+0x3d8>
 800aeec:	9b02      	ldr	r3, [sp, #8]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d010      	beq.n	800af16 <__gethex+0x37e>
 800aef4:	2b03      	cmp	r3, #3
 800aef6:	d012      	beq.n	800af1e <__gethex+0x386>
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d106      	bne.n	800af0a <__gethex+0x372>
 800aefc:	07aa      	lsls	r2, r5, #30
 800aefe:	d504      	bpl.n	800af0a <__gethex+0x372>
 800af00:	9a04      	ldr	r2, [sp, #16]
 800af02:	6810      	ldr	r0, [r2, #0]
 800af04:	4305      	orrs	r5, r0
 800af06:	421d      	tst	r5, r3
 800af08:	d10c      	bne.n	800af24 <__gethex+0x38c>
 800af0a:	2310      	movs	r3, #16
 800af0c:	e02f      	b.n	800af6e <__gethex+0x3d6>
 800af0e:	2501      	movs	r5, #1
 800af10:	e7d4      	b.n	800aebc <__gethex+0x324>
 800af12:	2601      	movs	r6, #1
 800af14:	e7e8      	b.n	800aee8 <__gethex+0x350>
 800af16:	2301      	movs	r3, #1
 800af18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800af1a:	1a9b      	subs	r3, r3, r2
 800af1c:	9313      	str	r3, [sp, #76]	; 0x4c
 800af1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af20:	2b00      	cmp	r3, #0
 800af22:	d0f2      	beq.n	800af0a <__gethex+0x372>
 800af24:	6923      	ldr	r3, [r4, #16]
 800af26:	2000      	movs	r0, #0
 800af28:	9303      	str	r3, [sp, #12]
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	9304      	str	r3, [sp, #16]
 800af2e:	0023      	movs	r3, r4
 800af30:	9a04      	ldr	r2, [sp, #16]
 800af32:	3314      	adds	r3, #20
 800af34:	1899      	adds	r1, r3, r2
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	1c55      	adds	r5, r2, #1
 800af3a:	d01e      	beq.n	800af7a <__gethex+0x3e2>
 800af3c:	3201      	adds	r2, #1
 800af3e:	601a      	str	r2, [r3, #0]
 800af40:	0023      	movs	r3, r4
 800af42:	3314      	adds	r3, #20
 800af44:	2e02      	cmp	r6, #2
 800af46:	d140      	bne.n	800afca <__gethex+0x432>
 800af48:	9a02      	ldr	r2, [sp, #8]
 800af4a:	9901      	ldr	r1, [sp, #4]
 800af4c:	6812      	ldr	r2, [r2, #0]
 800af4e:	3a01      	subs	r2, #1
 800af50:	428a      	cmp	r2, r1
 800af52:	d10b      	bne.n	800af6c <__gethex+0x3d4>
 800af54:	114a      	asrs	r2, r1, #5
 800af56:	211f      	movs	r1, #31
 800af58:	9801      	ldr	r0, [sp, #4]
 800af5a:	0092      	lsls	r2, r2, #2
 800af5c:	4001      	ands	r1, r0
 800af5e:	2001      	movs	r0, #1
 800af60:	0005      	movs	r5, r0
 800af62:	408d      	lsls	r5, r1
 800af64:	58d3      	ldr	r3, [r2, r3]
 800af66:	422b      	tst	r3, r5
 800af68:	d000      	beq.n	800af6c <__gethex+0x3d4>
 800af6a:	2601      	movs	r6, #1
 800af6c:	2320      	movs	r3, #32
 800af6e:	431e      	orrs	r6, r3
 800af70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af72:	601c      	str	r4, [r3, #0]
 800af74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af76:	601f      	str	r7, [r3, #0]
 800af78:	e6a7      	b.n	800acca <__gethex+0x132>
 800af7a:	c301      	stmia	r3!, {r0}
 800af7c:	4299      	cmp	r1, r3
 800af7e:	d8da      	bhi.n	800af36 <__gethex+0x39e>
 800af80:	9b03      	ldr	r3, [sp, #12]
 800af82:	68a2      	ldr	r2, [r4, #8]
 800af84:	4293      	cmp	r3, r2
 800af86:	db17      	blt.n	800afb8 <__gethex+0x420>
 800af88:	6863      	ldr	r3, [r4, #4]
 800af8a:	9805      	ldr	r0, [sp, #20]
 800af8c:	1c59      	adds	r1, r3, #1
 800af8e:	f000 f941 	bl	800b214 <_Balloc>
 800af92:	1e05      	subs	r5, r0, #0
 800af94:	d103      	bne.n	800af9e <__gethex+0x406>
 800af96:	0002      	movs	r2, r0
 800af98:	2184      	movs	r1, #132	; 0x84
 800af9a:	4b1c      	ldr	r3, [pc, #112]	; (800b00c <__gethex+0x474>)
 800af9c:	e6b8      	b.n	800ad10 <__gethex+0x178>
 800af9e:	0021      	movs	r1, r4
 800afa0:	6923      	ldr	r3, [r4, #16]
 800afa2:	310c      	adds	r1, #12
 800afa4:	1c9a      	adds	r2, r3, #2
 800afa6:	0092      	lsls	r2, r2, #2
 800afa8:	300c      	adds	r0, #12
 800afaa:	f000 f92a 	bl	800b202 <memcpy>
 800afae:	0021      	movs	r1, r4
 800afb0:	9805      	ldr	r0, [sp, #20]
 800afb2:	f000 f973 	bl	800b29c <_Bfree>
 800afb6:	002c      	movs	r4, r5
 800afb8:	6923      	ldr	r3, [r4, #16]
 800afba:	1c5a      	adds	r2, r3, #1
 800afbc:	6122      	str	r2, [r4, #16]
 800afbe:	2201      	movs	r2, #1
 800afc0:	3304      	adds	r3, #4
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	18e3      	adds	r3, r4, r3
 800afc6:	605a      	str	r2, [r3, #4]
 800afc8:	e7ba      	b.n	800af40 <__gethex+0x3a8>
 800afca:	6922      	ldr	r2, [r4, #16]
 800afcc:	9903      	ldr	r1, [sp, #12]
 800afce:	428a      	cmp	r2, r1
 800afd0:	dd09      	ble.n	800afe6 <__gethex+0x44e>
 800afd2:	2101      	movs	r1, #1
 800afd4:	0020      	movs	r0, r4
 800afd6:	f7ff fd75 	bl	800aac4 <rshift>
 800afda:	9b02      	ldr	r3, [sp, #8]
 800afdc:	3701      	adds	r7, #1
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	42bb      	cmp	r3, r7
 800afe2:	dac2      	bge.n	800af6a <__gethex+0x3d2>
 800afe4:	e6dc      	b.n	800ada0 <__gethex+0x208>
 800afe6:	221f      	movs	r2, #31
 800afe8:	9d01      	ldr	r5, [sp, #4]
 800afea:	9901      	ldr	r1, [sp, #4]
 800afec:	2601      	movs	r6, #1
 800afee:	4015      	ands	r5, r2
 800aff0:	4211      	tst	r1, r2
 800aff2:	d0bb      	beq.n	800af6c <__gethex+0x3d4>
 800aff4:	9a04      	ldr	r2, [sp, #16]
 800aff6:	189b      	adds	r3, r3, r2
 800aff8:	3b04      	subs	r3, #4
 800affa:	6818      	ldr	r0, [r3, #0]
 800affc:	f000 fa02 	bl	800b404 <__hi0bits>
 800b000:	2320      	movs	r3, #32
 800b002:	1b5d      	subs	r5, r3, r5
 800b004:	42a8      	cmp	r0, r5
 800b006:	dbe4      	blt.n	800afd2 <__gethex+0x43a>
 800b008:	e7b0      	b.n	800af6c <__gethex+0x3d4>
 800b00a:	46c0      	nop			; (mov r8, r8)
 800b00c:	0800d228 	.word	0x0800d228

0800b010 <L_shift>:
 800b010:	2308      	movs	r3, #8
 800b012:	b570      	push	{r4, r5, r6, lr}
 800b014:	2520      	movs	r5, #32
 800b016:	1a9a      	subs	r2, r3, r2
 800b018:	0092      	lsls	r2, r2, #2
 800b01a:	1aad      	subs	r5, r5, r2
 800b01c:	6843      	ldr	r3, [r0, #4]
 800b01e:	6806      	ldr	r6, [r0, #0]
 800b020:	001c      	movs	r4, r3
 800b022:	40ac      	lsls	r4, r5
 800b024:	40d3      	lsrs	r3, r2
 800b026:	4334      	orrs	r4, r6
 800b028:	6004      	str	r4, [r0, #0]
 800b02a:	6043      	str	r3, [r0, #4]
 800b02c:	3004      	adds	r0, #4
 800b02e:	4288      	cmp	r0, r1
 800b030:	d3f4      	bcc.n	800b01c <L_shift+0xc>
 800b032:	bd70      	pop	{r4, r5, r6, pc}

0800b034 <__match>:
 800b034:	b530      	push	{r4, r5, lr}
 800b036:	6803      	ldr	r3, [r0, #0]
 800b038:	780c      	ldrb	r4, [r1, #0]
 800b03a:	3301      	adds	r3, #1
 800b03c:	2c00      	cmp	r4, #0
 800b03e:	d102      	bne.n	800b046 <__match+0x12>
 800b040:	6003      	str	r3, [r0, #0]
 800b042:	2001      	movs	r0, #1
 800b044:	bd30      	pop	{r4, r5, pc}
 800b046:	781a      	ldrb	r2, [r3, #0]
 800b048:	0015      	movs	r5, r2
 800b04a:	3d41      	subs	r5, #65	; 0x41
 800b04c:	2d19      	cmp	r5, #25
 800b04e:	d800      	bhi.n	800b052 <__match+0x1e>
 800b050:	3220      	adds	r2, #32
 800b052:	3101      	adds	r1, #1
 800b054:	42a2      	cmp	r2, r4
 800b056:	d0ef      	beq.n	800b038 <__match+0x4>
 800b058:	2000      	movs	r0, #0
 800b05a:	e7f3      	b.n	800b044 <__match+0x10>

0800b05c <__hexnan>:
 800b05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b05e:	680b      	ldr	r3, [r1, #0]
 800b060:	b08b      	sub	sp, #44	; 0x2c
 800b062:	9201      	str	r2, [sp, #4]
 800b064:	9901      	ldr	r1, [sp, #4]
 800b066:	115a      	asrs	r2, r3, #5
 800b068:	0092      	lsls	r2, r2, #2
 800b06a:	188a      	adds	r2, r1, r2
 800b06c:	9202      	str	r2, [sp, #8]
 800b06e:	0019      	movs	r1, r3
 800b070:	221f      	movs	r2, #31
 800b072:	4011      	ands	r1, r2
 800b074:	9008      	str	r0, [sp, #32]
 800b076:	9106      	str	r1, [sp, #24]
 800b078:	4213      	tst	r3, r2
 800b07a:	d002      	beq.n	800b082 <__hexnan+0x26>
 800b07c:	9b02      	ldr	r3, [sp, #8]
 800b07e:	3304      	adds	r3, #4
 800b080:	9302      	str	r3, [sp, #8]
 800b082:	9b02      	ldr	r3, [sp, #8]
 800b084:	2500      	movs	r5, #0
 800b086:	1f1e      	subs	r6, r3, #4
 800b088:	0037      	movs	r7, r6
 800b08a:	0034      	movs	r4, r6
 800b08c:	9b08      	ldr	r3, [sp, #32]
 800b08e:	6035      	str	r5, [r6, #0]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	9507      	str	r5, [sp, #28]
 800b094:	9305      	str	r3, [sp, #20]
 800b096:	9503      	str	r5, [sp, #12]
 800b098:	9b05      	ldr	r3, [sp, #20]
 800b09a:	3301      	adds	r3, #1
 800b09c:	9309      	str	r3, [sp, #36]	; 0x24
 800b09e:	9b05      	ldr	r3, [sp, #20]
 800b0a0:	785b      	ldrb	r3, [r3, #1]
 800b0a2:	9304      	str	r3, [sp, #16]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d028      	beq.n	800b0fa <__hexnan+0x9e>
 800b0a8:	9804      	ldr	r0, [sp, #16]
 800b0aa:	f7ff fd5f 	bl	800ab6c <__hexdig_fun>
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	d154      	bne.n	800b15c <__hexnan+0x100>
 800b0b2:	9b04      	ldr	r3, [sp, #16]
 800b0b4:	2b20      	cmp	r3, #32
 800b0b6:	d819      	bhi.n	800b0ec <__hexnan+0x90>
 800b0b8:	9b03      	ldr	r3, [sp, #12]
 800b0ba:	9a07      	ldr	r2, [sp, #28]
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	dd12      	ble.n	800b0e6 <__hexnan+0x8a>
 800b0c0:	42bc      	cmp	r4, r7
 800b0c2:	d206      	bcs.n	800b0d2 <__hexnan+0x76>
 800b0c4:	2d07      	cmp	r5, #7
 800b0c6:	dc04      	bgt.n	800b0d2 <__hexnan+0x76>
 800b0c8:	002a      	movs	r2, r5
 800b0ca:	0039      	movs	r1, r7
 800b0cc:	0020      	movs	r0, r4
 800b0ce:	f7ff ff9f 	bl	800b010 <L_shift>
 800b0d2:	9b01      	ldr	r3, [sp, #4]
 800b0d4:	2508      	movs	r5, #8
 800b0d6:	429c      	cmp	r4, r3
 800b0d8:	d905      	bls.n	800b0e6 <__hexnan+0x8a>
 800b0da:	1f27      	subs	r7, r4, #4
 800b0dc:	2500      	movs	r5, #0
 800b0de:	003c      	movs	r4, r7
 800b0e0:	9b03      	ldr	r3, [sp, #12]
 800b0e2:	603d      	str	r5, [r7, #0]
 800b0e4:	9307      	str	r3, [sp, #28]
 800b0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e8:	9305      	str	r3, [sp, #20]
 800b0ea:	e7d5      	b.n	800b098 <__hexnan+0x3c>
 800b0ec:	9b04      	ldr	r3, [sp, #16]
 800b0ee:	2b29      	cmp	r3, #41	; 0x29
 800b0f0:	d159      	bne.n	800b1a6 <__hexnan+0x14a>
 800b0f2:	9b05      	ldr	r3, [sp, #20]
 800b0f4:	9a08      	ldr	r2, [sp, #32]
 800b0f6:	3302      	adds	r3, #2
 800b0f8:	6013      	str	r3, [r2, #0]
 800b0fa:	9b03      	ldr	r3, [sp, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d052      	beq.n	800b1a6 <__hexnan+0x14a>
 800b100:	42bc      	cmp	r4, r7
 800b102:	d206      	bcs.n	800b112 <__hexnan+0xb6>
 800b104:	2d07      	cmp	r5, #7
 800b106:	dc04      	bgt.n	800b112 <__hexnan+0xb6>
 800b108:	002a      	movs	r2, r5
 800b10a:	0039      	movs	r1, r7
 800b10c:	0020      	movs	r0, r4
 800b10e:	f7ff ff7f 	bl	800b010 <L_shift>
 800b112:	9b01      	ldr	r3, [sp, #4]
 800b114:	429c      	cmp	r4, r3
 800b116:	d935      	bls.n	800b184 <__hexnan+0x128>
 800b118:	001a      	movs	r2, r3
 800b11a:	0023      	movs	r3, r4
 800b11c:	cb02      	ldmia	r3!, {r1}
 800b11e:	c202      	stmia	r2!, {r1}
 800b120:	429e      	cmp	r6, r3
 800b122:	d2fb      	bcs.n	800b11c <__hexnan+0xc0>
 800b124:	9b02      	ldr	r3, [sp, #8]
 800b126:	1c61      	adds	r1, r4, #1
 800b128:	1eda      	subs	r2, r3, #3
 800b12a:	2304      	movs	r3, #4
 800b12c:	4291      	cmp	r1, r2
 800b12e:	d805      	bhi.n	800b13c <__hexnan+0xe0>
 800b130:	9b02      	ldr	r3, [sp, #8]
 800b132:	3b04      	subs	r3, #4
 800b134:	1b1b      	subs	r3, r3, r4
 800b136:	089b      	lsrs	r3, r3, #2
 800b138:	3301      	adds	r3, #1
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	9a01      	ldr	r2, [sp, #4]
 800b13e:	18d3      	adds	r3, r2, r3
 800b140:	2200      	movs	r2, #0
 800b142:	c304      	stmia	r3!, {r2}
 800b144:	429e      	cmp	r6, r3
 800b146:	d2fc      	bcs.n	800b142 <__hexnan+0xe6>
 800b148:	6833      	ldr	r3, [r6, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d104      	bne.n	800b158 <__hexnan+0xfc>
 800b14e:	9b01      	ldr	r3, [sp, #4]
 800b150:	429e      	cmp	r6, r3
 800b152:	d126      	bne.n	800b1a2 <__hexnan+0x146>
 800b154:	2301      	movs	r3, #1
 800b156:	6033      	str	r3, [r6, #0]
 800b158:	2005      	movs	r0, #5
 800b15a:	e025      	b.n	800b1a8 <__hexnan+0x14c>
 800b15c:	9b03      	ldr	r3, [sp, #12]
 800b15e:	3501      	adds	r5, #1
 800b160:	3301      	adds	r3, #1
 800b162:	9303      	str	r3, [sp, #12]
 800b164:	2d08      	cmp	r5, #8
 800b166:	dd06      	ble.n	800b176 <__hexnan+0x11a>
 800b168:	9b01      	ldr	r3, [sp, #4]
 800b16a:	429c      	cmp	r4, r3
 800b16c:	d9bb      	bls.n	800b0e6 <__hexnan+0x8a>
 800b16e:	2300      	movs	r3, #0
 800b170:	2501      	movs	r5, #1
 800b172:	3c04      	subs	r4, #4
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	220f      	movs	r2, #15
 800b178:	6823      	ldr	r3, [r4, #0]
 800b17a:	4010      	ands	r0, r2
 800b17c:	011b      	lsls	r3, r3, #4
 800b17e:	4318      	orrs	r0, r3
 800b180:	6020      	str	r0, [r4, #0]
 800b182:	e7b0      	b.n	800b0e6 <__hexnan+0x8a>
 800b184:	9b06      	ldr	r3, [sp, #24]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0de      	beq.n	800b148 <__hexnan+0xec>
 800b18a:	2120      	movs	r1, #32
 800b18c:	9a06      	ldr	r2, [sp, #24]
 800b18e:	9b02      	ldr	r3, [sp, #8]
 800b190:	1a89      	subs	r1, r1, r2
 800b192:	2201      	movs	r2, #1
 800b194:	4252      	negs	r2, r2
 800b196:	40ca      	lsrs	r2, r1
 800b198:	3b04      	subs	r3, #4
 800b19a:	6819      	ldr	r1, [r3, #0]
 800b19c:	400a      	ands	r2, r1
 800b19e:	601a      	str	r2, [r3, #0]
 800b1a0:	e7d2      	b.n	800b148 <__hexnan+0xec>
 800b1a2:	3e04      	subs	r6, #4
 800b1a4:	e7d0      	b.n	800b148 <__hexnan+0xec>
 800b1a6:	2004      	movs	r0, #4
 800b1a8:	b00b      	add	sp, #44	; 0x2c
 800b1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b1ac <_localeconv_r>:
 800b1ac:	4800      	ldr	r0, [pc, #0]	; (800b1b0 <_localeconv_r+0x4>)
 800b1ae:	4770      	bx	lr
 800b1b0:	20000188 	.word	0x20000188

0800b1b4 <malloc>:
 800b1b4:	b510      	push	{r4, lr}
 800b1b6:	4b03      	ldr	r3, [pc, #12]	; (800b1c4 <malloc+0x10>)
 800b1b8:	0001      	movs	r1, r0
 800b1ba:	6818      	ldr	r0, [r3, #0]
 800b1bc:	f000 fd8c 	bl	800bcd8 <_malloc_r>
 800b1c0:	bd10      	pop	{r4, pc}
 800b1c2:	46c0      	nop			; (mov r8, r8)
 800b1c4:	20000030 	.word	0x20000030

0800b1c8 <__ascii_mbtowc>:
 800b1c8:	b082      	sub	sp, #8
 800b1ca:	2900      	cmp	r1, #0
 800b1cc:	d100      	bne.n	800b1d0 <__ascii_mbtowc+0x8>
 800b1ce:	a901      	add	r1, sp, #4
 800b1d0:	1e10      	subs	r0, r2, #0
 800b1d2:	d006      	beq.n	800b1e2 <__ascii_mbtowc+0x1a>
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d006      	beq.n	800b1e6 <__ascii_mbtowc+0x1e>
 800b1d8:	7813      	ldrb	r3, [r2, #0]
 800b1da:	600b      	str	r3, [r1, #0]
 800b1dc:	7810      	ldrb	r0, [r2, #0]
 800b1de:	1e43      	subs	r3, r0, #1
 800b1e0:	4198      	sbcs	r0, r3
 800b1e2:	b002      	add	sp, #8
 800b1e4:	4770      	bx	lr
 800b1e6:	2002      	movs	r0, #2
 800b1e8:	4240      	negs	r0, r0
 800b1ea:	e7fa      	b.n	800b1e2 <__ascii_mbtowc+0x1a>

0800b1ec <memchr>:
 800b1ec:	b2c9      	uxtb	r1, r1
 800b1ee:	1882      	adds	r2, r0, r2
 800b1f0:	4290      	cmp	r0, r2
 800b1f2:	d101      	bne.n	800b1f8 <memchr+0xc>
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	4770      	bx	lr
 800b1f8:	7803      	ldrb	r3, [r0, #0]
 800b1fa:	428b      	cmp	r3, r1
 800b1fc:	d0fb      	beq.n	800b1f6 <memchr+0xa>
 800b1fe:	3001      	adds	r0, #1
 800b200:	e7f6      	b.n	800b1f0 <memchr+0x4>

0800b202 <memcpy>:
 800b202:	2300      	movs	r3, #0
 800b204:	b510      	push	{r4, lr}
 800b206:	429a      	cmp	r2, r3
 800b208:	d100      	bne.n	800b20c <memcpy+0xa>
 800b20a:	bd10      	pop	{r4, pc}
 800b20c:	5ccc      	ldrb	r4, [r1, r3]
 800b20e:	54c4      	strb	r4, [r0, r3]
 800b210:	3301      	adds	r3, #1
 800b212:	e7f8      	b.n	800b206 <memcpy+0x4>

0800b214 <_Balloc>:
 800b214:	b570      	push	{r4, r5, r6, lr}
 800b216:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b218:	0006      	movs	r6, r0
 800b21a:	000c      	movs	r4, r1
 800b21c:	2d00      	cmp	r5, #0
 800b21e:	d10e      	bne.n	800b23e <_Balloc+0x2a>
 800b220:	2010      	movs	r0, #16
 800b222:	f7ff ffc7 	bl	800b1b4 <malloc>
 800b226:	1e02      	subs	r2, r0, #0
 800b228:	6270      	str	r0, [r6, #36]	; 0x24
 800b22a:	d104      	bne.n	800b236 <_Balloc+0x22>
 800b22c:	2166      	movs	r1, #102	; 0x66
 800b22e:	4b19      	ldr	r3, [pc, #100]	; (800b294 <_Balloc+0x80>)
 800b230:	4819      	ldr	r0, [pc, #100]	; (800b298 <_Balloc+0x84>)
 800b232:	f000 ff61 	bl	800c0f8 <__assert_func>
 800b236:	6045      	str	r5, [r0, #4]
 800b238:	6085      	str	r5, [r0, #8]
 800b23a:	6005      	str	r5, [r0, #0]
 800b23c:	60c5      	str	r5, [r0, #12]
 800b23e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800b240:	68eb      	ldr	r3, [r5, #12]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d013      	beq.n	800b26e <_Balloc+0x5a>
 800b246:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b248:	00a2      	lsls	r2, r4, #2
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	189b      	adds	r3, r3, r2
 800b24e:	6818      	ldr	r0, [r3, #0]
 800b250:	2800      	cmp	r0, #0
 800b252:	d118      	bne.n	800b286 <_Balloc+0x72>
 800b254:	2101      	movs	r1, #1
 800b256:	000d      	movs	r5, r1
 800b258:	40a5      	lsls	r5, r4
 800b25a:	1d6a      	adds	r2, r5, #5
 800b25c:	0030      	movs	r0, r6
 800b25e:	0092      	lsls	r2, r2, #2
 800b260:	f000 fca1 	bl	800bba6 <_calloc_r>
 800b264:	2800      	cmp	r0, #0
 800b266:	d00c      	beq.n	800b282 <_Balloc+0x6e>
 800b268:	6044      	str	r4, [r0, #4]
 800b26a:	6085      	str	r5, [r0, #8]
 800b26c:	e00d      	b.n	800b28a <_Balloc+0x76>
 800b26e:	2221      	movs	r2, #33	; 0x21
 800b270:	2104      	movs	r1, #4
 800b272:	0030      	movs	r0, r6
 800b274:	f000 fc97 	bl	800bba6 <_calloc_r>
 800b278:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b27a:	60e8      	str	r0, [r5, #12]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d1e1      	bne.n	800b246 <_Balloc+0x32>
 800b282:	2000      	movs	r0, #0
 800b284:	bd70      	pop	{r4, r5, r6, pc}
 800b286:	6802      	ldr	r2, [r0, #0]
 800b288:	601a      	str	r2, [r3, #0]
 800b28a:	2300      	movs	r3, #0
 800b28c:	6103      	str	r3, [r0, #16]
 800b28e:	60c3      	str	r3, [r0, #12]
 800b290:	e7f8      	b.n	800b284 <_Balloc+0x70>
 800b292:	46c0      	nop			; (mov r8, r8)
 800b294:	0800d1b6 	.word	0x0800d1b6
 800b298:	0800d2b4 	.word	0x0800d2b4

0800b29c <_Bfree>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2a0:	0005      	movs	r5, r0
 800b2a2:	000c      	movs	r4, r1
 800b2a4:	2e00      	cmp	r6, #0
 800b2a6:	d10e      	bne.n	800b2c6 <_Bfree+0x2a>
 800b2a8:	2010      	movs	r0, #16
 800b2aa:	f7ff ff83 	bl	800b1b4 <malloc>
 800b2ae:	1e02      	subs	r2, r0, #0
 800b2b0:	6268      	str	r0, [r5, #36]	; 0x24
 800b2b2:	d104      	bne.n	800b2be <_Bfree+0x22>
 800b2b4:	218a      	movs	r1, #138	; 0x8a
 800b2b6:	4b09      	ldr	r3, [pc, #36]	; (800b2dc <_Bfree+0x40>)
 800b2b8:	4809      	ldr	r0, [pc, #36]	; (800b2e0 <_Bfree+0x44>)
 800b2ba:	f000 ff1d 	bl	800c0f8 <__assert_func>
 800b2be:	6046      	str	r6, [r0, #4]
 800b2c0:	6086      	str	r6, [r0, #8]
 800b2c2:	6006      	str	r6, [r0, #0]
 800b2c4:	60c6      	str	r6, [r0, #12]
 800b2c6:	2c00      	cmp	r4, #0
 800b2c8:	d007      	beq.n	800b2da <_Bfree+0x3e>
 800b2ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b2cc:	6862      	ldr	r2, [r4, #4]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	0092      	lsls	r2, r2, #2
 800b2d2:	189b      	adds	r3, r3, r2
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	6022      	str	r2, [r4, #0]
 800b2d8:	601c      	str	r4, [r3, #0]
 800b2da:	bd70      	pop	{r4, r5, r6, pc}
 800b2dc:	0800d1b6 	.word	0x0800d1b6
 800b2e0:	0800d2b4 	.word	0x0800d2b4

0800b2e4 <__multadd>:
 800b2e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2e6:	000e      	movs	r6, r1
 800b2e8:	9001      	str	r0, [sp, #4]
 800b2ea:	000c      	movs	r4, r1
 800b2ec:	001d      	movs	r5, r3
 800b2ee:	2000      	movs	r0, #0
 800b2f0:	690f      	ldr	r7, [r1, #16]
 800b2f2:	3614      	adds	r6, #20
 800b2f4:	6833      	ldr	r3, [r6, #0]
 800b2f6:	3001      	adds	r0, #1
 800b2f8:	b299      	uxth	r1, r3
 800b2fa:	4351      	muls	r1, r2
 800b2fc:	0c1b      	lsrs	r3, r3, #16
 800b2fe:	4353      	muls	r3, r2
 800b300:	1949      	adds	r1, r1, r5
 800b302:	0c0d      	lsrs	r5, r1, #16
 800b304:	195b      	adds	r3, r3, r5
 800b306:	0c1d      	lsrs	r5, r3, #16
 800b308:	b289      	uxth	r1, r1
 800b30a:	041b      	lsls	r3, r3, #16
 800b30c:	185b      	adds	r3, r3, r1
 800b30e:	c608      	stmia	r6!, {r3}
 800b310:	4287      	cmp	r7, r0
 800b312:	dcef      	bgt.n	800b2f4 <__multadd+0x10>
 800b314:	2d00      	cmp	r5, #0
 800b316:	d022      	beq.n	800b35e <__multadd+0x7a>
 800b318:	68a3      	ldr	r3, [r4, #8]
 800b31a:	42bb      	cmp	r3, r7
 800b31c:	dc19      	bgt.n	800b352 <__multadd+0x6e>
 800b31e:	6863      	ldr	r3, [r4, #4]
 800b320:	9801      	ldr	r0, [sp, #4]
 800b322:	1c59      	adds	r1, r3, #1
 800b324:	f7ff ff76 	bl	800b214 <_Balloc>
 800b328:	1e06      	subs	r6, r0, #0
 800b32a:	d105      	bne.n	800b338 <__multadd+0x54>
 800b32c:	0002      	movs	r2, r0
 800b32e:	21b5      	movs	r1, #181	; 0xb5
 800b330:	4b0c      	ldr	r3, [pc, #48]	; (800b364 <__multadd+0x80>)
 800b332:	480d      	ldr	r0, [pc, #52]	; (800b368 <__multadd+0x84>)
 800b334:	f000 fee0 	bl	800c0f8 <__assert_func>
 800b338:	0021      	movs	r1, r4
 800b33a:	6923      	ldr	r3, [r4, #16]
 800b33c:	310c      	adds	r1, #12
 800b33e:	1c9a      	adds	r2, r3, #2
 800b340:	0092      	lsls	r2, r2, #2
 800b342:	300c      	adds	r0, #12
 800b344:	f7ff ff5d 	bl	800b202 <memcpy>
 800b348:	0021      	movs	r1, r4
 800b34a:	9801      	ldr	r0, [sp, #4]
 800b34c:	f7ff ffa6 	bl	800b29c <_Bfree>
 800b350:	0034      	movs	r4, r6
 800b352:	1d3b      	adds	r3, r7, #4
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	18e3      	adds	r3, r4, r3
 800b358:	605d      	str	r5, [r3, #4]
 800b35a:	1c7b      	adds	r3, r7, #1
 800b35c:	6123      	str	r3, [r4, #16]
 800b35e:	0020      	movs	r0, r4
 800b360:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b362:	46c0      	nop			; (mov r8, r8)
 800b364:	0800d228 	.word	0x0800d228
 800b368:	0800d2b4 	.word	0x0800d2b4

0800b36c <__s2b>:
 800b36c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b36e:	0006      	movs	r6, r0
 800b370:	0018      	movs	r0, r3
 800b372:	000c      	movs	r4, r1
 800b374:	3008      	adds	r0, #8
 800b376:	2109      	movs	r1, #9
 800b378:	9301      	str	r3, [sp, #4]
 800b37a:	0015      	movs	r5, r2
 800b37c:	f7f4 ff6a 	bl	8000254 <__divsi3>
 800b380:	2301      	movs	r3, #1
 800b382:	2100      	movs	r1, #0
 800b384:	4283      	cmp	r3, r0
 800b386:	db0a      	blt.n	800b39e <__s2b+0x32>
 800b388:	0030      	movs	r0, r6
 800b38a:	f7ff ff43 	bl	800b214 <_Balloc>
 800b38e:	1e01      	subs	r1, r0, #0
 800b390:	d108      	bne.n	800b3a4 <__s2b+0x38>
 800b392:	0002      	movs	r2, r0
 800b394:	4b19      	ldr	r3, [pc, #100]	; (800b3fc <__s2b+0x90>)
 800b396:	481a      	ldr	r0, [pc, #104]	; (800b400 <__s2b+0x94>)
 800b398:	31ce      	adds	r1, #206	; 0xce
 800b39a:	f000 fead 	bl	800c0f8 <__assert_func>
 800b39e:	005b      	lsls	r3, r3, #1
 800b3a0:	3101      	adds	r1, #1
 800b3a2:	e7ef      	b.n	800b384 <__s2b+0x18>
 800b3a4:	9b08      	ldr	r3, [sp, #32]
 800b3a6:	6143      	str	r3, [r0, #20]
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	6103      	str	r3, [r0, #16]
 800b3ac:	2d09      	cmp	r5, #9
 800b3ae:	dd18      	ble.n	800b3e2 <__s2b+0x76>
 800b3b0:	0023      	movs	r3, r4
 800b3b2:	3309      	adds	r3, #9
 800b3b4:	001f      	movs	r7, r3
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	1964      	adds	r4, r4, r5
 800b3ba:	783b      	ldrb	r3, [r7, #0]
 800b3bc:	220a      	movs	r2, #10
 800b3be:	0030      	movs	r0, r6
 800b3c0:	3b30      	subs	r3, #48	; 0x30
 800b3c2:	f7ff ff8f 	bl	800b2e4 <__multadd>
 800b3c6:	3701      	adds	r7, #1
 800b3c8:	0001      	movs	r1, r0
 800b3ca:	42a7      	cmp	r7, r4
 800b3cc:	d1f5      	bne.n	800b3ba <__s2b+0x4e>
 800b3ce:	002c      	movs	r4, r5
 800b3d0:	9b00      	ldr	r3, [sp, #0]
 800b3d2:	3c08      	subs	r4, #8
 800b3d4:	191c      	adds	r4, r3, r4
 800b3d6:	002f      	movs	r7, r5
 800b3d8:	9b01      	ldr	r3, [sp, #4]
 800b3da:	429f      	cmp	r7, r3
 800b3dc:	db04      	blt.n	800b3e8 <__s2b+0x7c>
 800b3de:	0008      	movs	r0, r1
 800b3e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b3e2:	2509      	movs	r5, #9
 800b3e4:	340a      	adds	r4, #10
 800b3e6:	e7f6      	b.n	800b3d6 <__s2b+0x6a>
 800b3e8:	1b63      	subs	r3, r4, r5
 800b3ea:	5ddb      	ldrb	r3, [r3, r7]
 800b3ec:	220a      	movs	r2, #10
 800b3ee:	0030      	movs	r0, r6
 800b3f0:	3b30      	subs	r3, #48	; 0x30
 800b3f2:	f7ff ff77 	bl	800b2e4 <__multadd>
 800b3f6:	3701      	adds	r7, #1
 800b3f8:	0001      	movs	r1, r0
 800b3fa:	e7ed      	b.n	800b3d8 <__s2b+0x6c>
 800b3fc:	0800d228 	.word	0x0800d228
 800b400:	0800d2b4 	.word	0x0800d2b4

0800b404 <__hi0bits>:
 800b404:	0003      	movs	r3, r0
 800b406:	0c02      	lsrs	r2, r0, #16
 800b408:	2000      	movs	r0, #0
 800b40a:	4282      	cmp	r2, r0
 800b40c:	d101      	bne.n	800b412 <__hi0bits+0xe>
 800b40e:	041b      	lsls	r3, r3, #16
 800b410:	3010      	adds	r0, #16
 800b412:	0e1a      	lsrs	r2, r3, #24
 800b414:	d101      	bne.n	800b41a <__hi0bits+0x16>
 800b416:	3008      	adds	r0, #8
 800b418:	021b      	lsls	r3, r3, #8
 800b41a:	0f1a      	lsrs	r2, r3, #28
 800b41c:	d101      	bne.n	800b422 <__hi0bits+0x1e>
 800b41e:	3004      	adds	r0, #4
 800b420:	011b      	lsls	r3, r3, #4
 800b422:	0f9a      	lsrs	r2, r3, #30
 800b424:	d101      	bne.n	800b42a <__hi0bits+0x26>
 800b426:	3002      	adds	r0, #2
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	db03      	blt.n	800b436 <__hi0bits+0x32>
 800b42e:	3001      	adds	r0, #1
 800b430:	005b      	lsls	r3, r3, #1
 800b432:	d400      	bmi.n	800b436 <__hi0bits+0x32>
 800b434:	2020      	movs	r0, #32
 800b436:	4770      	bx	lr

0800b438 <__lo0bits>:
 800b438:	6803      	ldr	r3, [r0, #0]
 800b43a:	0002      	movs	r2, r0
 800b43c:	2107      	movs	r1, #7
 800b43e:	0018      	movs	r0, r3
 800b440:	4008      	ands	r0, r1
 800b442:	420b      	tst	r3, r1
 800b444:	d00d      	beq.n	800b462 <__lo0bits+0x2a>
 800b446:	3906      	subs	r1, #6
 800b448:	2000      	movs	r0, #0
 800b44a:	420b      	tst	r3, r1
 800b44c:	d105      	bne.n	800b45a <__lo0bits+0x22>
 800b44e:	3002      	adds	r0, #2
 800b450:	4203      	tst	r3, r0
 800b452:	d003      	beq.n	800b45c <__lo0bits+0x24>
 800b454:	40cb      	lsrs	r3, r1
 800b456:	0008      	movs	r0, r1
 800b458:	6013      	str	r3, [r2, #0]
 800b45a:	4770      	bx	lr
 800b45c:	089b      	lsrs	r3, r3, #2
 800b45e:	6013      	str	r3, [r2, #0]
 800b460:	e7fb      	b.n	800b45a <__lo0bits+0x22>
 800b462:	b299      	uxth	r1, r3
 800b464:	2900      	cmp	r1, #0
 800b466:	d101      	bne.n	800b46c <__lo0bits+0x34>
 800b468:	2010      	movs	r0, #16
 800b46a:	0c1b      	lsrs	r3, r3, #16
 800b46c:	b2d9      	uxtb	r1, r3
 800b46e:	2900      	cmp	r1, #0
 800b470:	d101      	bne.n	800b476 <__lo0bits+0x3e>
 800b472:	3008      	adds	r0, #8
 800b474:	0a1b      	lsrs	r3, r3, #8
 800b476:	0719      	lsls	r1, r3, #28
 800b478:	d101      	bne.n	800b47e <__lo0bits+0x46>
 800b47a:	3004      	adds	r0, #4
 800b47c:	091b      	lsrs	r3, r3, #4
 800b47e:	0799      	lsls	r1, r3, #30
 800b480:	d101      	bne.n	800b486 <__lo0bits+0x4e>
 800b482:	3002      	adds	r0, #2
 800b484:	089b      	lsrs	r3, r3, #2
 800b486:	07d9      	lsls	r1, r3, #31
 800b488:	d4e9      	bmi.n	800b45e <__lo0bits+0x26>
 800b48a:	3001      	adds	r0, #1
 800b48c:	085b      	lsrs	r3, r3, #1
 800b48e:	d1e6      	bne.n	800b45e <__lo0bits+0x26>
 800b490:	2020      	movs	r0, #32
 800b492:	e7e2      	b.n	800b45a <__lo0bits+0x22>

0800b494 <__i2b>:
 800b494:	b510      	push	{r4, lr}
 800b496:	000c      	movs	r4, r1
 800b498:	2101      	movs	r1, #1
 800b49a:	f7ff febb 	bl	800b214 <_Balloc>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d106      	bne.n	800b4b0 <__i2b+0x1c>
 800b4a2:	21a0      	movs	r1, #160	; 0xa0
 800b4a4:	0002      	movs	r2, r0
 800b4a6:	4b04      	ldr	r3, [pc, #16]	; (800b4b8 <__i2b+0x24>)
 800b4a8:	4804      	ldr	r0, [pc, #16]	; (800b4bc <__i2b+0x28>)
 800b4aa:	0049      	lsls	r1, r1, #1
 800b4ac:	f000 fe24 	bl	800c0f8 <__assert_func>
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	6144      	str	r4, [r0, #20]
 800b4b4:	6103      	str	r3, [r0, #16]
 800b4b6:	bd10      	pop	{r4, pc}
 800b4b8:	0800d228 	.word	0x0800d228
 800b4bc:	0800d2b4 	.word	0x0800d2b4

0800b4c0 <__multiply>:
 800b4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4c2:	690b      	ldr	r3, [r1, #16]
 800b4c4:	0014      	movs	r4, r2
 800b4c6:	6912      	ldr	r2, [r2, #16]
 800b4c8:	000d      	movs	r5, r1
 800b4ca:	b089      	sub	sp, #36	; 0x24
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	da01      	bge.n	800b4d4 <__multiply+0x14>
 800b4d0:	0025      	movs	r5, r4
 800b4d2:	000c      	movs	r4, r1
 800b4d4:	692f      	ldr	r7, [r5, #16]
 800b4d6:	6926      	ldr	r6, [r4, #16]
 800b4d8:	6869      	ldr	r1, [r5, #4]
 800b4da:	19bb      	adds	r3, r7, r6
 800b4dc:	9302      	str	r3, [sp, #8]
 800b4de:	68ab      	ldr	r3, [r5, #8]
 800b4e0:	19ba      	adds	r2, r7, r6
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	da00      	bge.n	800b4e8 <__multiply+0x28>
 800b4e6:	3101      	adds	r1, #1
 800b4e8:	f7ff fe94 	bl	800b214 <_Balloc>
 800b4ec:	9001      	str	r0, [sp, #4]
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	d106      	bne.n	800b500 <__multiply+0x40>
 800b4f2:	215e      	movs	r1, #94	; 0x5e
 800b4f4:	0002      	movs	r2, r0
 800b4f6:	4b48      	ldr	r3, [pc, #288]	; (800b618 <__multiply+0x158>)
 800b4f8:	4848      	ldr	r0, [pc, #288]	; (800b61c <__multiply+0x15c>)
 800b4fa:	31ff      	adds	r1, #255	; 0xff
 800b4fc:	f000 fdfc 	bl	800c0f8 <__assert_func>
 800b500:	9b01      	ldr	r3, [sp, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	3314      	adds	r3, #20
 800b506:	469c      	mov	ip, r3
 800b508:	19bb      	adds	r3, r7, r6
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	4463      	add	r3, ip
 800b50e:	9303      	str	r3, [sp, #12]
 800b510:	4663      	mov	r3, ip
 800b512:	9903      	ldr	r1, [sp, #12]
 800b514:	428b      	cmp	r3, r1
 800b516:	d32c      	bcc.n	800b572 <__multiply+0xb2>
 800b518:	002b      	movs	r3, r5
 800b51a:	0022      	movs	r2, r4
 800b51c:	3314      	adds	r3, #20
 800b51e:	00bf      	lsls	r7, r7, #2
 800b520:	3214      	adds	r2, #20
 800b522:	9306      	str	r3, [sp, #24]
 800b524:	00b6      	lsls	r6, r6, #2
 800b526:	19db      	adds	r3, r3, r7
 800b528:	9304      	str	r3, [sp, #16]
 800b52a:	1993      	adds	r3, r2, r6
 800b52c:	9307      	str	r3, [sp, #28]
 800b52e:	2304      	movs	r3, #4
 800b530:	9305      	str	r3, [sp, #20]
 800b532:	002b      	movs	r3, r5
 800b534:	9904      	ldr	r1, [sp, #16]
 800b536:	3315      	adds	r3, #21
 800b538:	9200      	str	r2, [sp, #0]
 800b53a:	4299      	cmp	r1, r3
 800b53c:	d305      	bcc.n	800b54a <__multiply+0x8a>
 800b53e:	1b4b      	subs	r3, r1, r5
 800b540:	3b15      	subs	r3, #21
 800b542:	089b      	lsrs	r3, r3, #2
 800b544:	3301      	adds	r3, #1
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	9305      	str	r3, [sp, #20]
 800b54a:	9b07      	ldr	r3, [sp, #28]
 800b54c:	9a00      	ldr	r2, [sp, #0]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d311      	bcc.n	800b576 <__multiply+0xb6>
 800b552:	9b02      	ldr	r3, [sp, #8]
 800b554:	2b00      	cmp	r3, #0
 800b556:	dd06      	ble.n	800b566 <__multiply+0xa6>
 800b558:	9b03      	ldr	r3, [sp, #12]
 800b55a:	3b04      	subs	r3, #4
 800b55c:	9303      	str	r3, [sp, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d053      	beq.n	800b60e <__multiply+0x14e>
 800b566:	9b01      	ldr	r3, [sp, #4]
 800b568:	9a02      	ldr	r2, [sp, #8]
 800b56a:	0018      	movs	r0, r3
 800b56c:	611a      	str	r2, [r3, #16]
 800b56e:	b009      	add	sp, #36	; 0x24
 800b570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b572:	c304      	stmia	r3!, {r2}
 800b574:	e7cd      	b.n	800b512 <__multiply+0x52>
 800b576:	9b00      	ldr	r3, [sp, #0]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	b298      	uxth	r0, r3
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d01b      	beq.n	800b5b8 <__multiply+0xf8>
 800b580:	4667      	mov	r7, ip
 800b582:	2400      	movs	r4, #0
 800b584:	9e06      	ldr	r6, [sp, #24]
 800b586:	ce02      	ldmia	r6!, {r1}
 800b588:	683a      	ldr	r2, [r7, #0]
 800b58a:	b28b      	uxth	r3, r1
 800b58c:	4343      	muls	r3, r0
 800b58e:	b292      	uxth	r2, r2
 800b590:	189b      	adds	r3, r3, r2
 800b592:	191b      	adds	r3, r3, r4
 800b594:	0c0c      	lsrs	r4, r1, #16
 800b596:	4344      	muls	r4, r0
 800b598:	683a      	ldr	r2, [r7, #0]
 800b59a:	0c11      	lsrs	r1, r2, #16
 800b59c:	1861      	adds	r1, r4, r1
 800b59e:	0c1c      	lsrs	r4, r3, #16
 800b5a0:	1909      	adds	r1, r1, r4
 800b5a2:	0c0c      	lsrs	r4, r1, #16
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	0409      	lsls	r1, r1, #16
 800b5a8:	430b      	orrs	r3, r1
 800b5aa:	c708      	stmia	r7!, {r3}
 800b5ac:	9b04      	ldr	r3, [sp, #16]
 800b5ae:	42b3      	cmp	r3, r6
 800b5b0:	d8e9      	bhi.n	800b586 <__multiply+0xc6>
 800b5b2:	4663      	mov	r3, ip
 800b5b4:	9a05      	ldr	r2, [sp, #20]
 800b5b6:	509c      	str	r4, [r3, r2]
 800b5b8:	9b00      	ldr	r3, [sp, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	0c1e      	lsrs	r6, r3, #16
 800b5be:	d020      	beq.n	800b602 <__multiply+0x142>
 800b5c0:	4663      	mov	r3, ip
 800b5c2:	002c      	movs	r4, r5
 800b5c4:	4660      	mov	r0, ip
 800b5c6:	2700      	movs	r7, #0
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	3414      	adds	r4, #20
 800b5cc:	6822      	ldr	r2, [r4, #0]
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	b291      	uxth	r1, r2
 800b5d2:	4371      	muls	r1, r6
 800b5d4:	6802      	ldr	r2, [r0, #0]
 800b5d6:	0c12      	lsrs	r2, r2, #16
 800b5d8:	1889      	adds	r1, r1, r2
 800b5da:	19cf      	adds	r7, r1, r7
 800b5dc:	0439      	lsls	r1, r7, #16
 800b5de:	430b      	orrs	r3, r1
 800b5e0:	6003      	str	r3, [r0, #0]
 800b5e2:	cc02      	ldmia	r4!, {r1}
 800b5e4:	6843      	ldr	r3, [r0, #4]
 800b5e6:	0c09      	lsrs	r1, r1, #16
 800b5e8:	4371      	muls	r1, r6
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	0c3f      	lsrs	r7, r7, #16
 800b5ee:	18cb      	adds	r3, r1, r3
 800b5f0:	9a04      	ldr	r2, [sp, #16]
 800b5f2:	19db      	adds	r3, r3, r7
 800b5f4:	0c1f      	lsrs	r7, r3, #16
 800b5f6:	3004      	adds	r0, #4
 800b5f8:	42a2      	cmp	r2, r4
 800b5fa:	d8e7      	bhi.n	800b5cc <__multiply+0x10c>
 800b5fc:	4662      	mov	r2, ip
 800b5fe:	9905      	ldr	r1, [sp, #20]
 800b600:	5053      	str	r3, [r2, r1]
 800b602:	9b00      	ldr	r3, [sp, #0]
 800b604:	3304      	adds	r3, #4
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	2304      	movs	r3, #4
 800b60a:	449c      	add	ip, r3
 800b60c:	e79d      	b.n	800b54a <__multiply+0x8a>
 800b60e:	9b02      	ldr	r3, [sp, #8]
 800b610:	3b01      	subs	r3, #1
 800b612:	9302      	str	r3, [sp, #8]
 800b614:	e79d      	b.n	800b552 <__multiply+0x92>
 800b616:	46c0      	nop			; (mov r8, r8)
 800b618:	0800d228 	.word	0x0800d228
 800b61c:	0800d2b4 	.word	0x0800d2b4

0800b620 <__pow5mult>:
 800b620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b622:	2303      	movs	r3, #3
 800b624:	0015      	movs	r5, r2
 800b626:	0007      	movs	r7, r0
 800b628:	000e      	movs	r6, r1
 800b62a:	401a      	ands	r2, r3
 800b62c:	421d      	tst	r5, r3
 800b62e:	d008      	beq.n	800b642 <__pow5mult+0x22>
 800b630:	4925      	ldr	r1, [pc, #148]	; (800b6c8 <__pow5mult+0xa8>)
 800b632:	3a01      	subs	r2, #1
 800b634:	0092      	lsls	r2, r2, #2
 800b636:	5852      	ldr	r2, [r2, r1]
 800b638:	2300      	movs	r3, #0
 800b63a:	0031      	movs	r1, r6
 800b63c:	f7ff fe52 	bl	800b2e4 <__multadd>
 800b640:	0006      	movs	r6, r0
 800b642:	10ad      	asrs	r5, r5, #2
 800b644:	d03d      	beq.n	800b6c2 <__pow5mult+0xa2>
 800b646:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b648:	2c00      	cmp	r4, #0
 800b64a:	d10f      	bne.n	800b66c <__pow5mult+0x4c>
 800b64c:	2010      	movs	r0, #16
 800b64e:	f7ff fdb1 	bl	800b1b4 <malloc>
 800b652:	1e02      	subs	r2, r0, #0
 800b654:	6278      	str	r0, [r7, #36]	; 0x24
 800b656:	d105      	bne.n	800b664 <__pow5mult+0x44>
 800b658:	21d7      	movs	r1, #215	; 0xd7
 800b65a:	4b1c      	ldr	r3, [pc, #112]	; (800b6cc <__pow5mult+0xac>)
 800b65c:	481c      	ldr	r0, [pc, #112]	; (800b6d0 <__pow5mult+0xb0>)
 800b65e:	0049      	lsls	r1, r1, #1
 800b660:	f000 fd4a 	bl	800c0f8 <__assert_func>
 800b664:	6044      	str	r4, [r0, #4]
 800b666:	6084      	str	r4, [r0, #8]
 800b668:	6004      	str	r4, [r0, #0]
 800b66a:	60c4      	str	r4, [r0, #12]
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	689c      	ldr	r4, [r3, #8]
 800b670:	9301      	str	r3, [sp, #4]
 800b672:	2c00      	cmp	r4, #0
 800b674:	d108      	bne.n	800b688 <__pow5mult+0x68>
 800b676:	0038      	movs	r0, r7
 800b678:	4916      	ldr	r1, [pc, #88]	; (800b6d4 <__pow5mult+0xb4>)
 800b67a:	f7ff ff0b 	bl	800b494 <__i2b>
 800b67e:	9b01      	ldr	r3, [sp, #4]
 800b680:	0004      	movs	r4, r0
 800b682:	6098      	str	r0, [r3, #8]
 800b684:	2300      	movs	r3, #0
 800b686:	6003      	str	r3, [r0, #0]
 800b688:	2301      	movs	r3, #1
 800b68a:	421d      	tst	r5, r3
 800b68c:	d00a      	beq.n	800b6a4 <__pow5mult+0x84>
 800b68e:	0031      	movs	r1, r6
 800b690:	0022      	movs	r2, r4
 800b692:	0038      	movs	r0, r7
 800b694:	f7ff ff14 	bl	800b4c0 <__multiply>
 800b698:	0031      	movs	r1, r6
 800b69a:	9001      	str	r0, [sp, #4]
 800b69c:	0038      	movs	r0, r7
 800b69e:	f7ff fdfd 	bl	800b29c <_Bfree>
 800b6a2:	9e01      	ldr	r6, [sp, #4]
 800b6a4:	106d      	asrs	r5, r5, #1
 800b6a6:	d00c      	beq.n	800b6c2 <__pow5mult+0xa2>
 800b6a8:	6820      	ldr	r0, [r4, #0]
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	d107      	bne.n	800b6be <__pow5mult+0x9e>
 800b6ae:	0022      	movs	r2, r4
 800b6b0:	0021      	movs	r1, r4
 800b6b2:	0038      	movs	r0, r7
 800b6b4:	f7ff ff04 	bl	800b4c0 <__multiply>
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	6020      	str	r0, [r4, #0]
 800b6bc:	6003      	str	r3, [r0, #0]
 800b6be:	0004      	movs	r4, r0
 800b6c0:	e7e2      	b.n	800b688 <__pow5mult+0x68>
 800b6c2:	0030      	movs	r0, r6
 800b6c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b6c6:	46c0      	nop			; (mov r8, r8)
 800b6c8:	0800d400 	.word	0x0800d400
 800b6cc:	0800d1b6 	.word	0x0800d1b6
 800b6d0:	0800d2b4 	.word	0x0800d2b4
 800b6d4:	00000271 	.word	0x00000271

0800b6d8 <__lshift>:
 800b6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6da:	000c      	movs	r4, r1
 800b6dc:	0017      	movs	r7, r2
 800b6de:	6923      	ldr	r3, [r4, #16]
 800b6e0:	1155      	asrs	r5, r2, #5
 800b6e2:	b087      	sub	sp, #28
 800b6e4:	18eb      	adds	r3, r5, r3
 800b6e6:	9302      	str	r3, [sp, #8]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	9301      	str	r3, [sp, #4]
 800b6ec:	6849      	ldr	r1, [r1, #4]
 800b6ee:	68a3      	ldr	r3, [r4, #8]
 800b6f0:	9004      	str	r0, [sp, #16]
 800b6f2:	9a01      	ldr	r2, [sp, #4]
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	db10      	blt.n	800b71a <__lshift+0x42>
 800b6f8:	9804      	ldr	r0, [sp, #16]
 800b6fa:	f7ff fd8b 	bl	800b214 <_Balloc>
 800b6fe:	2300      	movs	r3, #0
 800b700:	0002      	movs	r2, r0
 800b702:	0006      	movs	r6, r0
 800b704:	0019      	movs	r1, r3
 800b706:	3214      	adds	r2, #20
 800b708:	4298      	cmp	r0, r3
 800b70a:	d10c      	bne.n	800b726 <__lshift+0x4e>
 800b70c:	21da      	movs	r1, #218	; 0xda
 800b70e:	0002      	movs	r2, r0
 800b710:	4b26      	ldr	r3, [pc, #152]	; (800b7ac <__lshift+0xd4>)
 800b712:	4827      	ldr	r0, [pc, #156]	; (800b7b0 <__lshift+0xd8>)
 800b714:	31ff      	adds	r1, #255	; 0xff
 800b716:	f000 fcef 	bl	800c0f8 <__assert_func>
 800b71a:	3101      	adds	r1, #1
 800b71c:	005b      	lsls	r3, r3, #1
 800b71e:	e7e8      	b.n	800b6f2 <__lshift+0x1a>
 800b720:	0098      	lsls	r0, r3, #2
 800b722:	5011      	str	r1, [r2, r0]
 800b724:	3301      	adds	r3, #1
 800b726:	42ab      	cmp	r3, r5
 800b728:	dbfa      	blt.n	800b720 <__lshift+0x48>
 800b72a:	43eb      	mvns	r3, r5
 800b72c:	17db      	asrs	r3, r3, #31
 800b72e:	401d      	ands	r5, r3
 800b730:	211f      	movs	r1, #31
 800b732:	0023      	movs	r3, r4
 800b734:	0038      	movs	r0, r7
 800b736:	00ad      	lsls	r5, r5, #2
 800b738:	1955      	adds	r5, r2, r5
 800b73a:	6922      	ldr	r2, [r4, #16]
 800b73c:	3314      	adds	r3, #20
 800b73e:	0092      	lsls	r2, r2, #2
 800b740:	4008      	ands	r0, r1
 800b742:	4684      	mov	ip, r0
 800b744:	189a      	adds	r2, r3, r2
 800b746:	420f      	tst	r7, r1
 800b748:	d02a      	beq.n	800b7a0 <__lshift+0xc8>
 800b74a:	3101      	adds	r1, #1
 800b74c:	1a09      	subs	r1, r1, r0
 800b74e:	9105      	str	r1, [sp, #20]
 800b750:	2100      	movs	r1, #0
 800b752:	9503      	str	r5, [sp, #12]
 800b754:	4667      	mov	r7, ip
 800b756:	6818      	ldr	r0, [r3, #0]
 800b758:	40b8      	lsls	r0, r7
 800b75a:	4301      	orrs	r1, r0
 800b75c:	9803      	ldr	r0, [sp, #12]
 800b75e:	c002      	stmia	r0!, {r1}
 800b760:	cb02      	ldmia	r3!, {r1}
 800b762:	9003      	str	r0, [sp, #12]
 800b764:	9805      	ldr	r0, [sp, #20]
 800b766:	40c1      	lsrs	r1, r0
 800b768:	429a      	cmp	r2, r3
 800b76a:	d8f3      	bhi.n	800b754 <__lshift+0x7c>
 800b76c:	0020      	movs	r0, r4
 800b76e:	3015      	adds	r0, #21
 800b770:	2304      	movs	r3, #4
 800b772:	4282      	cmp	r2, r0
 800b774:	d304      	bcc.n	800b780 <__lshift+0xa8>
 800b776:	1b13      	subs	r3, r2, r4
 800b778:	3b15      	subs	r3, #21
 800b77a:	089b      	lsrs	r3, r3, #2
 800b77c:	3301      	adds	r3, #1
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	50e9      	str	r1, [r5, r3]
 800b782:	2900      	cmp	r1, #0
 800b784:	d002      	beq.n	800b78c <__lshift+0xb4>
 800b786:	9b02      	ldr	r3, [sp, #8]
 800b788:	3302      	adds	r3, #2
 800b78a:	9301      	str	r3, [sp, #4]
 800b78c:	9b01      	ldr	r3, [sp, #4]
 800b78e:	9804      	ldr	r0, [sp, #16]
 800b790:	3b01      	subs	r3, #1
 800b792:	0021      	movs	r1, r4
 800b794:	6133      	str	r3, [r6, #16]
 800b796:	f7ff fd81 	bl	800b29c <_Bfree>
 800b79a:	0030      	movs	r0, r6
 800b79c:	b007      	add	sp, #28
 800b79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7a0:	cb02      	ldmia	r3!, {r1}
 800b7a2:	c502      	stmia	r5!, {r1}
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d8fb      	bhi.n	800b7a0 <__lshift+0xc8>
 800b7a8:	e7f0      	b.n	800b78c <__lshift+0xb4>
 800b7aa:	46c0      	nop			; (mov r8, r8)
 800b7ac:	0800d228 	.word	0x0800d228
 800b7b0:	0800d2b4 	.word	0x0800d2b4

0800b7b4 <__mcmp>:
 800b7b4:	6902      	ldr	r2, [r0, #16]
 800b7b6:	690b      	ldr	r3, [r1, #16]
 800b7b8:	b530      	push	{r4, r5, lr}
 800b7ba:	0004      	movs	r4, r0
 800b7bc:	1ad0      	subs	r0, r2, r3
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d10d      	bne.n	800b7de <__mcmp+0x2a>
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	3414      	adds	r4, #20
 800b7c6:	3114      	adds	r1, #20
 800b7c8:	18e2      	adds	r2, r4, r3
 800b7ca:	18c9      	adds	r1, r1, r3
 800b7cc:	3a04      	subs	r2, #4
 800b7ce:	3904      	subs	r1, #4
 800b7d0:	6815      	ldr	r5, [r2, #0]
 800b7d2:	680b      	ldr	r3, [r1, #0]
 800b7d4:	429d      	cmp	r5, r3
 800b7d6:	d003      	beq.n	800b7e0 <__mcmp+0x2c>
 800b7d8:	2001      	movs	r0, #1
 800b7da:	429d      	cmp	r5, r3
 800b7dc:	d303      	bcc.n	800b7e6 <__mcmp+0x32>
 800b7de:	bd30      	pop	{r4, r5, pc}
 800b7e0:	4294      	cmp	r4, r2
 800b7e2:	d3f3      	bcc.n	800b7cc <__mcmp+0x18>
 800b7e4:	e7fb      	b.n	800b7de <__mcmp+0x2a>
 800b7e6:	4240      	negs	r0, r0
 800b7e8:	e7f9      	b.n	800b7de <__mcmp+0x2a>
	...

0800b7ec <__mdiff>:
 800b7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7ee:	000e      	movs	r6, r1
 800b7f0:	0007      	movs	r7, r0
 800b7f2:	0011      	movs	r1, r2
 800b7f4:	0030      	movs	r0, r6
 800b7f6:	b087      	sub	sp, #28
 800b7f8:	0014      	movs	r4, r2
 800b7fa:	f7ff ffdb 	bl	800b7b4 <__mcmp>
 800b7fe:	1e05      	subs	r5, r0, #0
 800b800:	d110      	bne.n	800b824 <__mdiff+0x38>
 800b802:	0001      	movs	r1, r0
 800b804:	0038      	movs	r0, r7
 800b806:	f7ff fd05 	bl	800b214 <_Balloc>
 800b80a:	1e02      	subs	r2, r0, #0
 800b80c:	d104      	bne.n	800b818 <__mdiff+0x2c>
 800b80e:	4b40      	ldr	r3, [pc, #256]	; (800b910 <__mdiff+0x124>)
 800b810:	4940      	ldr	r1, [pc, #256]	; (800b914 <__mdiff+0x128>)
 800b812:	4841      	ldr	r0, [pc, #260]	; (800b918 <__mdiff+0x12c>)
 800b814:	f000 fc70 	bl	800c0f8 <__assert_func>
 800b818:	2301      	movs	r3, #1
 800b81a:	6145      	str	r5, [r0, #20]
 800b81c:	6103      	str	r3, [r0, #16]
 800b81e:	0010      	movs	r0, r2
 800b820:	b007      	add	sp, #28
 800b822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b824:	2301      	movs	r3, #1
 800b826:	9301      	str	r3, [sp, #4]
 800b828:	2800      	cmp	r0, #0
 800b82a:	db04      	blt.n	800b836 <__mdiff+0x4a>
 800b82c:	0023      	movs	r3, r4
 800b82e:	0034      	movs	r4, r6
 800b830:	001e      	movs	r6, r3
 800b832:	2300      	movs	r3, #0
 800b834:	9301      	str	r3, [sp, #4]
 800b836:	0038      	movs	r0, r7
 800b838:	6861      	ldr	r1, [r4, #4]
 800b83a:	f7ff fceb 	bl	800b214 <_Balloc>
 800b83e:	1e02      	subs	r2, r0, #0
 800b840:	d103      	bne.n	800b84a <__mdiff+0x5e>
 800b842:	2190      	movs	r1, #144	; 0x90
 800b844:	4b32      	ldr	r3, [pc, #200]	; (800b910 <__mdiff+0x124>)
 800b846:	0089      	lsls	r1, r1, #2
 800b848:	e7e3      	b.n	800b812 <__mdiff+0x26>
 800b84a:	9b01      	ldr	r3, [sp, #4]
 800b84c:	2700      	movs	r7, #0
 800b84e:	60c3      	str	r3, [r0, #12]
 800b850:	6920      	ldr	r0, [r4, #16]
 800b852:	3414      	adds	r4, #20
 800b854:	9401      	str	r4, [sp, #4]
 800b856:	9b01      	ldr	r3, [sp, #4]
 800b858:	0084      	lsls	r4, r0, #2
 800b85a:	191b      	adds	r3, r3, r4
 800b85c:	0034      	movs	r4, r6
 800b85e:	9302      	str	r3, [sp, #8]
 800b860:	6933      	ldr	r3, [r6, #16]
 800b862:	3414      	adds	r4, #20
 800b864:	0099      	lsls	r1, r3, #2
 800b866:	1863      	adds	r3, r4, r1
 800b868:	9303      	str	r3, [sp, #12]
 800b86a:	0013      	movs	r3, r2
 800b86c:	3314      	adds	r3, #20
 800b86e:	469c      	mov	ip, r3
 800b870:	9305      	str	r3, [sp, #20]
 800b872:	9b01      	ldr	r3, [sp, #4]
 800b874:	9304      	str	r3, [sp, #16]
 800b876:	9b04      	ldr	r3, [sp, #16]
 800b878:	cc02      	ldmia	r4!, {r1}
 800b87a:	cb20      	ldmia	r3!, {r5}
 800b87c:	9304      	str	r3, [sp, #16]
 800b87e:	b2ab      	uxth	r3, r5
 800b880:	19df      	adds	r7, r3, r7
 800b882:	b28b      	uxth	r3, r1
 800b884:	1afb      	subs	r3, r7, r3
 800b886:	0c09      	lsrs	r1, r1, #16
 800b888:	0c2d      	lsrs	r5, r5, #16
 800b88a:	1a6d      	subs	r5, r5, r1
 800b88c:	1419      	asrs	r1, r3, #16
 800b88e:	186d      	adds	r5, r5, r1
 800b890:	4661      	mov	r1, ip
 800b892:	142f      	asrs	r7, r5, #16
 800b894:	b29b      	uxth	r3, r3
 800b896:	042d      	lsls	r5, r5, #16
 800b898:	432b      	orrs	r3, r5
 800b89a:	c108      	stmia	r1!, {r3}
 800b89c:	9b03      	ldr	r3, [sp, #12]
 800b89e:	468c      	mov	ip, r1
 800b8a0:	42a3      	cmp	r3, r4
 800b8a2:	d8e8      	bhi.n	800b876 <__mdiff+0x8a>
 800b8a4:	0031      	movs	r1, r6
 800b8a6:	9c03      	ldr	r4, [sp, #12]
 800b8a8:	3115      	adds	r1, #21
 800b8aa:	2304      	movs	r3, #4
 800b8ac:	428c      	cmp	r4, r1
 800b8ae:	d304      	bcc.n	800b8ba <__mdiff+0xce>
 800b8b0:	1ba3      	subs	r3, r4, r6
 800b8b2:	3b15      	subs	r3, #21
 800b8b4:	089b      	lsrs	r3, r3, #2
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	9901      	ldr	r1, [sp, #4]
 800b8bc:	18cc      	adds	r4, r1, r3
 800b8be:	9905      	ldr	r1, [sp, #20]
 800b8c0:	0026      	movs	r6, r4
 800b8c2:	18cb      	adds	r3, r1, r3
 800b8c4:	469c      	mov	ip, r3
 800b8c6:	9902      	ldr	r1, [sp, #8]
 800b8c8:	428e      	cmp	r6, r1
 800b8ca:	d310      	bcc.n	800b8ee <__mdiff+0x102>
 800b8cc:	9e02      	ldr	r6, [sp, #8]
 800b8ce:	1ee1      	subs	r1, r4, #3
 800b8d0:	2500      	movs	r5, #0
 800b8d2:	428e      	cmp	r6, r1
 800b8d4:	d304      	bcc.n	800b8e0 <__mdiff+0xf4>
 800b8d6:	0031      	movs	r1, r6
 800b8d8:	3103      	adds	r1, #3
 800b8da:	1b0c      	subs	r4, r1, r4
 800b8dc:	08a4      	lsrs	r4, r4, #2
 800b8de:	00a5      	lsls	r5, r4, #2
 800b8e0:	195b      	adds	r3, r3, r5
 800b8e2:	3b04      	subs	r3, #4
 800b8e4:	6819      	ldr	r1, [r3, #0]
 800b8e6:	2900      	cmp	r1, #0
 800b8e8:	d00f      	beq.n	800b90a <__mdiff+0x11e>
 800b8ea:	6110      	str	r0, [r2, #16]
 800b8ec:	e797      	b.n	800b81e <__mdiff+0x32>
 800b8ee:	ce02      	ldmia	r6!, {r1}
 800b8f0:	b28d      	uxth	r5, r1
 800b8f2:	19ed      	adds	r5, r5, r7
 800b8f4:	0c0f      	lsrs	r7, r1, #16
 800b8f6:	1429      	asrs	r1, r5, #16
 800b8f8:	1879      	adds	r1, r7, r1
 800b8fa:	140f      	asrs	r7, r1, #16
 800b8fc:	b2ad      	uxth	r5, r5
 800b8fe:	0409      	lsls	r1, r1, #16
 800b900:	430d      	orrs	r5, r1
 800b902:	4661      	mov	r1, ip
 800b904:	c120      	stmia	r1!, {r5}
 800b906:	468c      	mov	ip, r1
 800b908:	e7dd      	b.n	800b8c6 <__mdiff+0xda>
 800b90a:	3801      	subs	r0, #1
 800b90c:	e7e9      	b.n	800b8e2 <__mdiff+0xf6>
 800b90e:	46c0      	nop			; (mov r8, r8)
 800b910:	0800d228 	.word	0x0800d228
 800b914:	00000232 	.word	0x00000232
 800b918:	0800d2b4 	.word	0x0800d2b4

0800b91c <__ulp>:
 800b91c:	4b0f      	ldr	r3, [pc, #60]	; (800b95c <__ulp+0x40>)
 800b91e:	4019      	ands	r1, r3
 800b920:	4b0f      	ldr	r3, [pc, #60]	; (800b960 <__ulp+0x44>)
 800b922:	18c9      	adds	r1, r1, r3
 800b924:	2900      	cmp	r1, #0
 800b926:	dd04      	ble.n	800b932 <__ulp+0x16>
 800b928:	2200      	movs	r2, #0
 800b92a:	000b      	movs	r3, r1
 800b92c:	0010      	movs	r0, r2
 800b92e:	0019      	movs	r1, r3
 800b930:	4770      	bx	lr
 800b932:	4249      	negs	r1, r1
 800b934:	2200      	movs	r2, #0
 800b936:	2300      	movs	r3, #0
 800b938:	1509      	asrs	r1, r1, #20
 800b93a:	2913      	cmp	r1, #19
 800b93c:	dc04      	bgt.n	800b948 <__ulp+0x2c>
 800b93e:	2080      	movs	r0, #128	; 0x80
 800b940:	0300      	lsls	r0, r0, #12
 800b942:	4108      	asrs	r0, r1
 800b944:	0003      	movs	r3, r0
 800b946:	e7f1      	b.n	800b92c <__ulp+0x10>
 800b948:	3914      	subs	r1, #20
 800b94a:	2001      	movs	r0, #1
 800b94c:	291e      	cmp	r1, #30
 800b94e:	dc02      	bgt.n	800b956 <__ulp+0x3a>
 800b950:	2080      	movs	r0, #128	; 0x80
 800b952:	0600      	lsls	r0, r0, #24
 800b954:	40c8      	lsrs	r0, r1
 800b956:	0002      	movs	r2, r0
 800b958:	e7e8      	b.n	800b92c <__ulp+0x10>
 800b95a:	46c0      	nop			; (mov r8, r8)
 800b95c:	7ff00000 	.word	0x7ff00000
 800b960:	fcc00000 	.word	0xfcc00000

0800b964 <__b2d>:
 800b964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b966:	0006      	movs	r6, r0
 800b968:	6903      	ldr	r3, [r0, #16]
 800b96a:	3614      	adds	r6, #20
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	18f3      	adds	r3, r6, r3
 800b970:	1f1d      	subs	r5, r3, #4
 800b972:	682c      	ldr	r4, [r5, #0]
 800b974:	000f      	movs	r7, r1
 800b976:	0020      	movs	r0, r4
 800b978:	9301      	str	r3, [sp, #4]
 800b97a:	f7ff fd43 	bl	800b404 <__hi0bits>
 800b97e:	2320      	movs	r3, #32
 800b980:	1a1b      	subs	r3, r3, r0
 800b982:	491f      	ldr	r1, [pc, #124]	; (800ba00 <__b2d+0x9c>)
 800b984:	603b      	str	r3, [r7, #0]
 800b986:	280a      	cmp	r0, #10
 800b988:	dc16      	bgt.n	800b9b8 <__b2d+0x54>
 800b98a:	230b      	movs	r3, #11
 800b98c:	0027      	movs	r7, r4
 800b98e:	1a1b      	subs	r3, r3, r0
 800b990:	40df      	lsrs	r7, r3
 800b992:	4339      	orrs	r1, r7
 800b994:	469c      	mov	ip, r3
 800b996:	000b      	movs	r3, r1
 800b998:	2100      	movs	r1, #0
 800b99a:	42ae      	cmp	r6, r5
 800b99c:	d202      	bcs.n	800b9a4 <__b2d+0x40>
 800b99e:	9901      	ldr	r1, [sp, #4]
 800b9a0:	3908      	subs	r1, #8
 800b9a2:	6809      	ldr	r1, [r1, #0]
 800b9a4:	3015      	adds	r0, #21
 800b9a6:	4084      	lsls	r4, r0
 800b9a8:	4660      	mov	r0, ip
 800b9aa:	40c1      	lsrs	r1, r0
 800b9ac:	430c      	orrs	r4, r1
 800b9ae:	0022      	movs	r2, r4
 800b9b0:	0010      	movs	r0, r2
 800b9b2:	0019      	movs	r1, r3
 800b9b4:	b003      	add	sp, #12
 800b9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9b8:	2700      	movs	r7, #0
 800b9ba:	42ae      	cmp	r6, r5
 800b9bc:	d202      	bcs.n	800b9c4 <__b2d+0x60>
 800b9be:	9d01      	ldr	r5, [sp, #4]
 800b9c0:	3d08      	subs	r5, #8
 800b9c2:	682f      	ldr	r7, [r5, #0]
 800b9c4:	230b      	movs	r3, #11
 800b9c6:	425b      	negs	r3, r3
 800b9c8:	469c      	mov	ip, r3
 800b9ca:	4484      	add	ip, r0
 800b9cc:	280b      	cmp	r0, #11
 800b9ce:	d013      	beq.n	800b9f8 <__b2d+0x94>
 800b9d0:	4663      	mov	r3, ip
 800b9d2:	2020      	movs	r0, #32
 800b9d4:	409c      	lsls	r4, r3
 800b9d6:	1ac0      	subs	r0, r0, r3
 800b9d8:	003b      	movs	r3, r7
 800b9da:	40c3      	lsrs	r3, r0
 800b9dc:	431c      	orrs	r4, r3
 800b9de:	4321      	orrs	r1, r4
 800b9e0:	000b      	movs	r3, r1
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	42b5      	cmp	r5, r6
 800b9e6:	d901      	bls.n	800b9ec <__b2d+0x88>
 800b9e8:	3d04      	subs	r5, #4
 800b9ea:	6829      	ldr	r1, [r5, #0]
 800b9ec:	4664      	mov	r4, ip
 800b9ee:	40c1      	lsrs	r1, r0
 800b9f0:	40a7      	lsls	r7, r4
 800b9f2:	430f      	orrs	r7, r1
 800b9f4:	003a      	movs	r2, r7
 800b9f6:	e7db      	b.n	800b9b0 <__b2d+0x4c>
 800b9f8:	4321      	orrs	r1, r4
 800b9fa:	000b      	movs	r3, r1
 800b9fc:	e7fa      	b.n	800b9f4 <__b2d+0x90>
 800b9fe:	46c0      	nop			; (mov r8, r8)
 800ba00:	3ff00000 	.word	0x3ff00000

0800ba04 <__d2b>:
 800ba04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba06:	2101      	movs	r1, #1
 800ba08:	0014      	movs	r4, r2
 800ba0a:	001e      	movs	r6, r3
 800ba0c:	9f08      	ldr	r7, [sp, #32]
 800ba0e:	f7ff fc01 	bl	800b214 <_Balloc>
 800ba12:	1e05      	subs	r5, r0, #0
 800ba14:	d105      	bne.n	800ba22 <__d2b+0x1e>
 800ba16:	0002      	movs	r2, r0
 800ba18:	4b26      	ldr	r3, [pc, #152]	; (800bab4 <__d2b+0xb0>)
 800ba1a:	4927      	ldr	r1, [pc, #156]	; (800bab8 <__d2b+0xb4>)
 800ba1c:	4827      	ldr	r0, [pc, #156]	; (800babc <__d2b+0xb8>)
 800ba1e:	f000 fb6b 	bl	800c0f8 <__assert_func>
 800ba22:	0333      	lsls	r3, r6, #12
 800ba24:	0076      	lsls	r6, r6, #1
 800ba26:	0b1b      	lsrs	r3, r3, #12
 800ba28:	0d76      	lsrs	r6, r6, #21
 800ba2a:	d124      	bne.n	800ba76 <__d2b+0x72>
 800ba2c:	9301      	str	r3, [sp, #4]
 800ba2e:	2c00      	cmp	r4, #0
 800ba30:	d027      	beq.n	800ba82 <__d2b+0x7e>
 800ba32:	4668      	mov	r0, sp
 800ba34:	9400      	str	r4, [sp, #0]
 800ba36:	f7ff fcff 	bl	800b438 <__lo0bits>
 800ba3a:	9c00      	ldr	r4, [sp, #0]
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	d01e      	beq.n	800ba7e <__d2b+0x7a>
 800ba40:	9b01      	ldr	r3, [sp, #4]
 800ba42:	2120      	movs	r1, #32
 800ba44:	001a      	movs	r2, r3
 800ba46:	1a09      	subs	r1, r1, r0
 800ba48:	408a      	lsls	r2, r1
 800ba4a:	40c3      	lsrs	r3, r0
 800ba4c:	4322      	orrs	r2, r4
 800ba4e:	616a      	str	r2, [r5, #20]
 800ba50:	9301      	str	r3, [sp, #4]
 800ba52:	9c01      	ldr	r4, [sp, #4]
 800ba54:	61ac      	str	r4, [r5, #24]
 800ba56:	1e63      	subs	r3, r4, #1
 800ba58:	419c      	sbcs	r4, r3
 800ba5a:	3401      	adds	r4, #1
 800ba5c:	612c      	str	r4, [r5, #16]
 800ba5e:	2e00      	cmp	r6, #0
 800ba60:	d018      	beq.n	800ba94 <__d2b+0x90>
 800ba62:	4b17      	ldr	r3, [pc, #92]	; (800bac0 <__d2b+0xbc>)
 800ba64:	18f6      	adds	r6, r6, r3
 800ba66:	2335      	movs	r3, #53	; 0x35
 800ba68:	1836      	adds	r6, r6, r0
 800ba6a:	1a18      	subs	r0, r3, r0
 800ba6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba6e:	603e      	str	r6, [r7, #0]
 800ba70:	6018      	str	r0, [r3, #0]
 800ba72:	0028      	movs	r0, r5
 800ba74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ba76:	2280      	movs	r2, #128	; 0x80
 800ba78:	0352      	lsls	r2, r2, #13
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	e7d6      	b.n	800ba2c <__d2b+0x28>
 800ba7e:	616c      	str	r4, [r5, #20]
 800ba80:	e7e7      	b.n	800ba52 <__d2b+0x4e>
 800ba82:	a801      	add	r0, sp, #4
 800ba84:	f7ff fcd8 	bl	800b438 <__lo0bits>
 800ba88:	2401      	movs	r4, #1
 800ba8a:	9b01      	ldr	r3, [sp, #4]
 800ba8c:	612c      	str	r4, [r5, #16]
 800ba8e:	616b      	str	r3, [r5, #20]
 800ba90:	3020      	adds	r0, #32
 800ba92:	e7e4      	b.n	800ba5e <__d2b+0x5a>
 800ba94:	4b0b      	ldr	r3, [pc, #44]	; (800bac4 <__d2b+0xc0>)
 800ba96:	18c0      	adds	r0, r0, r3
 800ba98:	4b0b      	ldr	r3, [pc, #44]	; (800bac8 <__d2b+0xc4>)
 800ba9a:	6038      	str	r0, [r7, #0]
 800ba9c:	18e3      	adds	r3, r4, r3
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	18eb      	adds	r3, r5, r3
 800baa2:	6958      	ldr	r0, [r3, #20]
 800baa4:	f7ff fcae 	bl	800b404 <__hi0bits>
 800baa8:	0164      	lsls	r4, r4, #5
 800baaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baac:	1a24      	subs	r4, r4, r0
 800baae:	601c      	str	r4, [r3, #0]
 800bab0:	e7df      	b.n	800ba72 <__d2b+0x6e>
 800bab2:	46c0      	nop			; (mov r8, r8)
 800bab4:	0800d228 	.word	0x0800d228
 800bab8:	0000030a 	.word	0x0000030a
 800babc:	0800d2b4 	.word	0x0800d2b4
 800bac0:	fffffbcd 	.word	0xfffffbcd
 800bac4:	fffffbce 	.word	0xfffffbce
 800bac8:	3fffffff 	.word	0x3fffffff

0800bacc <__ratio>:
 800bacc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bace:	b087      	sub	sp, #28
 800bad0:	000f      	movs	r7, r1
 800bad2:	a904      	add	r1, sp, #16
 800bad4:	0006      	movs	r6, r0
 800bad6:	f7ff ff45 	bl	800b964 <__b2d>
 800bada:	9000      	str	r0, [sp, #0]
 800badc:	9101      	str	r1, [sp, #4]
 800bade:	9c00      	ldr	r4, [sp, #0]
 800bae0:	9d01      	ldr	r5, [sp, #4]
 800bae2:	0038      	movs	r0, r7
 800bae4:	a905      	add	r1, sp, #20
 800bae6:	f7ff ff3d 	bl	800b964 <__b2d>
 800baea:	9002      	str	r0, [sp, #8]
 800baec:	9103      	str	r1, [sp, #12]
 800baee:	9a02      	ldr	r2, [sp, #8]
 800baf0:	9b03      	ldr	r3, [sp, #12]
 800baf2:	6931      	ldr	r1, [r6, #16]
 800baf4:	6938      	ldr	r0, [r7, #16]
 800baf6:	9e05      	ldr	r6, [sp, #20]
 800baf8:	1a08      	subs	r0, r1, r0
 800bafa:	9904      	ldr	r1, [sp, #16]
 800bafc:	0140      	lsls	r0, r0, #5
 800bafe:	1b89      	subs	r1, r1, r6
 800bb00:	1841      	adds	r1, r0, r1
 800bb02:	0508      	lsls	r0, r1, #20
 800bb04:	2900      	cmp	r1, #0
 800bb06:	dd07      	ble.n	800bb18 <__ratio+0x4c>
 800bb08:	9901      	ldr	r1, [sp, #4]
 800bb0a:	1845      	adds	r5, r0, r1
 800bb0c:	0020      	movs	r0, r4
 800bb0e:	0029      	movs	r1, r5
 800bb10:	f7f5 fc6c 	bl	80013ec <__aeabi_ddiv>
 800bb14:	b007      	add	sp, #28
 800bb16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb18:	9903      	ldr	r1, [sp, #12]
 800bb1a:	1a0b      	subs	r3, r1, r0
 800bb1c:	e7f6      	b.n	800bb0c <__ratio+0x40>

0800bb1e <__copybits>:
 800bb1e:	b570      	push	{r4, r5, r6, lr}
 800bb20:	0014      	movs	r4, r2
 800bb22:	0005      	movs	r5, r0
 800bb24:	3901      	subs	r1, #1
 800bb26:	6913      	ldr	r3, [r2, #16]
 800bb28:	1149      	asrs	r1, r1, #5
 800bb2a:	3101      	adds	r1, #1
 800bb2c:	0089      	lsls	r1, r1, #2
 800bb2e:	3414      	adds	r4, #20
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	1841      	adds	r1, r0, r1
 800bb34:	18e3      	adds	r3, r4, r3
 800bb36:	42a3      	cmp	r3, r4
 800bb38:	d80d      	bhi.n	800bb56 <__copybits+0x38>
 800bb3a:	0014      	movs	r4, r2
 800bb3c:	3411      	adds	r4, #17
 800bb3e:	2500      	movs	r5, #0
 800bb40:	429c      	cmp	r4, r3
 800bb42:	d803      	bhi.n	800bb4c <__copybits+0x2e>
 800bb44:	1a9b      	subs	r3, r3, r2
 800bb46:	3b11      	subs	r3, #17
 800bb48:	089b      	lsrs	r3, r3, #2
 800bb4a:	009d      	lsls	r5, r3, #2
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	1940      	adds	r0, r0, r5
 800bb50:	4281      	cmp	r1, r0
 800bb52:	d803      	bhi.n	800bb5c <__copybits+0x3e>
 800bb54:	bd70      	pop	{r4, r5, r6, pc}
 800bb56:	cc40      	ldmia	r4!, {r6}
 800bb58:	c540      	stmia	r5!, {r6}
 800bb5a:	e7ec      	b.n	800bb36 <__copybits+0x18>
 800bb5c:	c008      	stmia	r0!, {r3}
 800bb5e:	e7f7      	b.n	800bb50 <__copybits+0x32>

0800bb60 <__any_on>:
 800bb60:	0002      	movs	r2, r0
 800bb62:	6900      	ldr	r0, [r0, #16]
 800bb64:	b510      	push	{r4, lr}
 800bb66:	3214      	adds	r2, #20
 800bb68:	114b      	asrs	r3, r1, #5
 800bb6a:	4298      	cmp	r0, r3
 800bb6c:	db13      	blt.n	800bb96 <__any_on+0x36>
 800bb6e:	dd0c      	ble.n	800bb8a <__any_on+0x2a>
 800bb70:	241f      	movs	r4, #31
 800bb72:	0008      	movs	r0, r1
 800bb74:	4020      	ands	r0, r4
 800bb76:	4221      	tst	r1, r4
 800bb78:	d007      	beq.n	800bb8a <__any_on+0x2a>
 800bb7a:	0099      	lsls	r1, r3, #2
 800bb7c:	588c      	ldr	r4, [r1, r2]
 800bb7e:	0021      	movs	r1, r4
 800bb80:	40c1      	lsrs	r1, r0
 800bb82:	4081      	lsls	r1, r0
 800bb84:	2001      	movs	r0, #1
 800bb86:	428c      	cmp	r4, r1
 800bb88:	d104      	bne.n	800bb94 <__any_on+0x34>
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	18d3      	adds	r3, r2, r3
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d803      	bhi.n	800bb9a <__any_on+0x3a>
 800bb92:	2000      	movs	r0, #0
 800bb94:	bd10      	pop	{r4, pc}
 800bb96:	0003      	movs	r3, r0
 800bb98:	e7f7      	b.n	800bb8a <__any_on+0x2a>
 800bb9a:	3b04      	subs	r3, #4
 800bb9c:	6819      	ldr	r1, [r3, #0]
 800bb9e:	2900      	cmp	r1, #0
 800bba0:	d0f5      	beq.n	800bb8e <__any_on+0x2e>
 800bba2:	2001      	movs	r0, #1
 800bba4:	e7f6      	b.n	800bb94 <__any_on+0x34>

0800bba6 <_calloc_r>:
 800bba6:	b570      	push	{r4, r5, r6, lr}
 800bba8:	0c13      	lsrs	r3, r2, #16
 800bbaa:	0c0d      	lsrs	r5, r1, #16
 800bbac:	d11e      	bne.n	800bbec <_calloc_r+0x46>
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10c      	bne.n	800bbcc <_calloc_r+0x26>
 800bbb2:	b289      	uxth	r1, r1
 800bbb4:	b294      	uxth	r4, r2
 800bbb6:	434c      	muls	r4, r1
 800bbb8:	0021      	movs	r1, r4
 800bbba:	f000 f88d 	bl	800bcd8 <_malloc_r>
 800bbbe:	1e05      	subs	r5, r0, #0
 800bbc0:	d01b      	beq.n	800bbfa <_calloc_r+0x54>
 800bbc2:	0022      	movs	r2, r4
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	f7fc fb6f 	bl	80082a8 <memset>
 800bbca:	e016      	b.n	800bbfa <_calloc_r+0x54>
 800bbcc:	1c1d      	adds	r5, r3, #0
 800bbce:	1c0b      	adds	r3, r1, #0
 800bbd0:	b292      	uxth	r2, r2
 800bbd2:	b289      	uxth	r1, r1
 800bbd4:	b29c      	uxth	r4, r3
 800bbd6:	4351      	muls	r1, r2
 800bbd8:	b2ab      	uxth	r3, r5
 800bbda:	4363      	muls	r3, r4
 800bbdc:	0c0c      	lsrs	r4, r1, #16
 800bbde:	191c      	adds	r4, r3, r4
 800bbe0:	0c22      	lsrs	r2, r4, #16
 800bbe2:	d107      	bne.n	800bbf4 <_calloc_r+0x4e>
 800bbe4:	0424      	lsls	r4, r4, #16
 800bbe6:	b289      	uxth	r1, r1
 800bbe8:	430c      	orrs	r4, r1
 800bbea:	e7e5      	b.n	800bbb8 <_calloc_r+0x12>
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d101      	bne.n	800bbf4 <_calloc_r+0x4e>
 800bbf0:	1c13      	adds	r3, r2, #0
 800bbf2:	e7ed      	b.n	800bbd0 <_calloc_r+0x2a>
 800bbf4:	230c      	movs	r3, #12
 800bbf6:	2500      	movs	r5, #0
 800bbf8:	6003      	str	r3, [r0, #0]
 800bbfa:	0028      	movs	r0, r5
 800bbfc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bc00 <_free_r>:
 800bc00:	b570      	push	{r4, r5, r6, lr}
 800bc02:	0005      	movs	r5, r0
 800bc04:	2900      	cmp	r1, #0
 800bc06:	d010      	beq.n	800bc2a <_free_r+0x2a>
 800bc08:	1f0c      	subs	r4, r1, #4
 800bc0a:	6823      	ldr	r3, [r4, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	da00      	bge.n	800bc12 <_free_r+0x12>
 800bc10:	18e4      	adds	r4, r4, r3
 800bc12:	0028      	movs	r0, r5
 800bc14:	f000 fab2 	bl	800c17c <__malloc_lock>
 800bc18:	4a1d      	ldr	r2, [pc, #116]	; (800bc90 <_free_r+0x90>)
 800bc1a:	6813      	ldr	r3, [r2, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d105      	bne.n	800bc2c <_free_r+0x2c>
 800bc20:	6063      	str	r3, [r4, #4]
 800bc22:	6014      	str	r4, [r2, #0]
 800bc24:	0028      	movs	r0, r5
 800bc26:	f000 fab1 	bl	800c18c <__malloc_unlock>
 800bc2a:	bd70      	pop	{r4, r5, r6, pc}
 800bc2c:	42a3      	cmp	r3, r4
 800bc2e:	d908      	bls.n	800bc42 <_free_r+0x42>
 800bc30:	6821      	ldr	r1, [r4, #0]
 800bc32:	1860      	adds	r0, r4, r1
 800bc34:	4283      	cmp	r3, r0
 800bc36:	d1f3      	bne.n	800bc20 <_free_r+0x20>
 800bc38:	6818      	ldr	r0, [r3, #0]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	1841      	adds	r1, r0, r1
 800bc3e:	6021      	str	r1, [r4, #0]
 800bc40:	e7ee      	b.n	800bc20 <_free_r+0x20>
 800bc42:	001a      	movs	r2, r3
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d001      	beq.n	800bc4e <_free_r+0x4e>
 800bc4a:	42a3      	cmp	r3, r4
 800bc4c:	d9f9      	bls.n	800bc42 <_free_r+0x42>
 800bc4e:	6811      	ldr	r1, [r2, #0]
 800bc50:	1850      	adds	r0, r2, r1
 800bc52:	42a0      	cmp	r0, r4
 800bc54:	d10b      	bne.n	800bc6e <_free_r+0x6e>
 800bc56:	6820      	ldr	r0, [r4, #0]
 800bc58:	1809      	adds	r1, r1, r0
 800bc5a:	1850      	adds	r0, r2, r1
 800bc5c:	6011      	str	r1, [r2, #0]
 800bc5e:	4283      	cmp	r3, r0
 800bc60:	d1e0      	bne.n	800bc24 <_free_r+0x24>
 800bc62:	6818      	ldr	r0, [r3, #0]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	1841      	adds	r1, r0, r1
 800bc68:	6011      	str	r1, [r2, #0]
 800bc6a:	6053      	str	r3, [r2, #4]
 800bc6c:	e7da      	b.n	800bc24 <_free_r+0x24>
 800bc6e:	42a0      	cmp	r0, r4
 800bc70:	d902      	bls.n	800bc78 <_free_r+0x78>
 800bc72:	230c      	movs	r3, #12
 800bc74:	602b      	str	r3, [r5, #0]
 800bc76:	e7d5      	b.n	800bc24 <_free_r+0x24>
 800bc78:	6821      	ldr	r1, [r4, #0]
 800bc7a:	1860      	adds	r0, r4, r1
 800bc7c:	4283      	cmp	r3, r0
 800bc7e:	d103      	bne.n	800bc88 <_free_r+0x88>
 800bc80:	6818      	ldr	r0, [r3, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	1841      	adds	r1, r0, r1
 800bc86:	6021      	str	r1, [r4, #0]
 800bc88:	6063      	str	r3, [r4, #4]
 800bc8a:	6054      	str	r4, [r2, #4]
 800bc8c:	e7ca      	b.n	800bc24 <_free_r+0x24>
 800bc8e:	46c0      	nop			; (mov r8, r8)
 800bc90:	20000474 	.word	0x20000474

0800bc94 <sbrk_aligned>:
 800bc94:	b570      	push	{r4, r5, r6, lr}
 800bc96:	4e0f      	ldr	r6, [pc, #60]	; (800bcd4 <sbrk_aligned+0x40>)
 800bc98:	000d      	movs	r5, r1
 800bc9a:	6831      	ldr	r1, [r6, #0]
 800bc9c:	0004      	movs	r4, r0
 800bc9e:	2900      	cmp	r1, #0
 800bca0:	d102      	bne.n	800bca8 <sbrk_aligned+0x14>
 800bca2:	f000 f9f7 	bl	800c094 <_sbrk_r>
 800bca6:	6030      	str	r0, [r6, #0]
 800bca8:	0029      	movs	r1, r5
 800bcaa:	0020      	movs	r0, r4
 800bcac:	f000 f9f2 	bl	800c094 <_sbrk_r>
 800bcb0:	1c43      	adds	r3, r0, #1
 800bcb2:	d00a      	beq.n	800bcca <sbrk_aligned+0x36>
 800bcb4:	2303      	movs	r3, #3
 800bcb6:	1cc5      	adds	r5, r0, #3
 800bcb8:	439d      	bics	r5, r3
 800bcba:	42a8      	cmp	r0, r5
 800bcbc:	d007      	beq.n	800bcce <sbrk_aligned+0x3a>
 800bcbe:	1a29      	subs	r1, r5, r0
 800bcc0:	0020      	movs	r0, r4
 800bcc2:	f000 f9e7 	bl	800c094 <_sbrk_r>
 800bcc6:	1c43      	adds	r3, r0, #1
 800bcc8:	d101      	bne.n	800bcce <sbrk_aligned+0x3a>
 800bcca:	2501      	movs	r5, #1
 800bccc:	426d      	negs	r5, r5
 800bcce:	0028      	movs	r0, r5
 800bcd0:	bd70      	pop	{r4, r5, r6, pc}
 800bcd2:	46c0      	nop			; (mov r8, r8)
 800bcd4:	20000478 	.word	0x20000478

0800bcd8 <_malloc_r>:
 800bcd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcda:	2203      	movs	r2, #3
 800bcdc:	1ccb      	adds	r3, r1, #3
 800bcde:	4393      	bics	r3, r2
 800bce0:	3308      	adds	r3, #8
 800bce2:	0006      	movs	r6, r0
 800bce4:	001f      	movs	r7, r3
 800bce6:	2b0c      	cmp	r3, #12
 800bce8:	d232      	bcs.n	800bd50 <_malloc_r+0x78>
 800bcea:	270c      	movs	r7, #12
 800bcec:	42b9      	cmp	r1, r7
 800bcee:	d831      	bhi.n	800bd54 <_malloc_r+0x7c>
 800bcf0:	0030      	movs	r0, r6
 800bcf2:	f000 fa43 	bl	800c17c <__malloc_lock>
 800bcf6:	4d32      	ldr	r5, [pc, #200]	; (800bdc0 <_malloc_r+0xe8>)
 800bcf8:	682b      	ldr	r3, [r5, #0]
 800bcfa:	001c      	movs	r4, r3
 800bcfc:	2c00      	cmp	r4, #0
 800bcfe:	d12e      	bne.n	800bd5e <_malloc_r+0x86>
 800bd00:	0039      	movs	r1, r7
 800bd02:	0030      	movs	r0, r6
 800bd04:	f7ff ffc6 	bl	800bc94 <sbrk_aligned>
 800bd08:	0004      	movs	r4, r0
 800bd0a:	1c43      	adds	r3, r0, #1
 800bd0c:	d11e      	bne.n	800bd4c <_malloc_r+0x74>
 800bd0e:	682c      	ldr	r4, [r5, #0]
 800bd10:	0025      	movs	r5, r4
 800bd12:	2d00      	cmp	r5, #0
 800bd14:	d14a      	bne.n	800bdac <_malloc_r+0xd4>
 800bd16:	6823      	ldr	r3, [r4, #0]
 800bd18:	0029      	movs	r1, r5
 800bd1a:	18e3      	adds	r3, r4, r3
 800bd1c:	0030      	movs	r0, r6
 800bd1e:	9301      	str	r3, [sp, #4]
 800bd20:	f000 f9b8 	bl	800c094 <_sbrk_r>
 800bd24:	9b01      	ldr	r3, [sp, #4]
 800bd26:	4283      	cmp	r3, r0
 800bd28:	d143      	bne.n	800bdb2 <_malloc_r+0xda>
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	3703      	adds	r7, #3
 800bd2e:	1aff      	subs	r7, r7, r3
 800bd30:	2303      	movs	r3, #3
 800bd32:	439f      	bics	r7, r3
 800bd34:	3708      	adds	r7, #8
 800bd36:	2f0c      	cmp	r7, #12
 800bd38:	d200      	bcs.n	800bd3c <_malloc_r+0x64>
 800bd3a:	270c      	movs	r7, #12
 800bd3c:	0039      	movs	r1, r7
 800bd3e:	0030      	movs	r0, r6
 800bd40:	f7ff ffa8 	bl	800bc94 <sbrk_aligned>
 800bd44:	1c43      	adds	r3, r0, #1
 800bd46:	d034      	beq.n	800bdb2 <_malloc_r+0xda>
 800bd48:	6823      	ldr	r3, [r4, #0]
 800bd4a:	19df      	adds	r7, r3, r7
 800bd4c:	6027      	str	r7, [r4, #0]
 800bd4e:	e013      	b.n	800bd78 <_malloc_r+0xa0>
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	dacb      	bge.n	800bcec <_malloc_r+0x14>
 800bd54:	230c      	movs	r3, #12
 800bd56:	2500      	movs	r5, #0
 800bd58:	6033      	str	r3, [r6, #0]
 800bd5a:	0028      	movs	r0, r5
 800bd5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd5e:	6822      	ldr	r2, [r4, #0]
 800bd60:	1bd1      	subs	r1, r2, r7
 800bd62:	d420      	bmi.n	800bda6 <_malloc_r+0xce>
 800bd64:	290b      	cmp	r1, #11
 800bd66:	d917      	bls.n	800bd98 <_malloc_r+0xc0>
 800bd68:	19e2      	adds	r2, r4, r7
 800bd6a:	6027      	str	r7, [r4, #0]
 800bd6c:	42a3      	cmp	r3, r4
 800bd6e:	d111      	bne.n	800bd94 <_malloc_r+0xbc>
 800bd70:	602a      	str	r2, [r5, #0]
 800bd72:	6863      	ldr	r3, [r4, #4]
 800bd74:	6011      	str	r1, [r2, #0]
 800bd76:	6053      	str	r3, [r2, #4]
 800bd78:	0030      	movs	r0, r6
 800bd7a:	0025      	movs	r5, r4
 800bd7c:	f000 fa06 	bl	800c18c <__malloc_unlock>
 800bd80:	2207      	movs	r2, #7
 800bd82:	350b      	adds	r5, #11
 800bd84:	1d23      	adds	r3, r4, #4
 800bd86:	4395      	bics	r5, r2
 800bd88:	1aea      	subs	r2, r5, r3
 800bd8a:	429d      	cmp	r5, r3
 800bd8c:	d0e5      	beq.n	800bd5a <_malloc_r+0x82>
 800bd8e:	1b5b      	subs	r3, r3, r5
 800bd90:	50a3      	str	r3, [r4, r2]
 800bd92:	e7e2      	b.n	800bd5a <_malloc_r+0x82>
 800bd94:	605a      	str	r2, [r3, #4]
 800bd96:	e7ec      	b.n	800bd72 <_malloc_r+0x9a>
 800bd98:	6862      	ldr	r2, [r4, #4]
 800bd9a:	42a3      	cmp	r3, r4
 800bd9c:	d101      	bne.n	800bda2 <_malloc_r+0xca>
 800bd9e:	602a      	str	r2, [r5, #0]
 800bda0:	e7ea      	b.n	800bd78 <_malloc_r+0xa0>
 800bda2:	605a      	str	r2, [r3, #4]
 800bda4:	e7e8      	b.n	800bd78 <_malloc_r+0xa0>
 800bda6:	0023      	movs	r3, r4
 800bda8:	6864      	ldr	r4, [r4, #4]
 800bdaa:	e7a7      	b.n	800bcfc <_malloc_r+0x24>
 800bdac:	002c      	movs	r4, r5
 800bdae:	686d      	ldr	r5, [r5, #4]
 800bdb0:	e7af      	b.n	800bd12 <_malloc_r+0x3a>
 800bdb2:	230c      	movs	r3, #12
 800bdb4:	0030      	movs	r0, r6
 800bdb6:	6033      	str	r3, [r6, #0]
 800bdb8:	f000 f9e8 	bl	800c18c <__malloc_unlock>
 800bdbc:	e7cd      	b.n	800bd5a <_malloc_r+0x82>
 800bdbe:	46c0      	nop			; (mov r8, r8)
 800bdc0:	20000474 	.word	0x20000474

0800bdc4 <__ssputs_r>:
 800bdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdc6:	688e      	ldr	r6, [r1, #8]
 800bdc8:	b085      	sub	sp, #20
 800bdca:	0007      	movs	r7, r0
 800bdcc:	000c      	movs	r4, r1
 800bdce:	9203      	str	r2, [sp, #12]
 800bdd0:	9301      	str	r3, [sp, #4]
 800bdd2:	429e      	cmp	r6, r3
 800bdd4:	d83c      	bhi.n	800be50 <__ssputs_r+0x8c>
 800bdd6:	2390      	movs	r3, #144	; 0x90
 800bdd8:	898a      	ldrh	r2, [r1, #12]
 800bdda:	00db      	lsls	r3, r3, #3
 800bddc:	421a      	tst	r2, r3
 800bdde:	d034      	beq.n	800be4a <__ssputs_r+0x86>
 800bde0:	6909      	ldr	r1, [r1, #16]
 800bde2:	6823      	ldr	r3, [r4, #0]
 800bde4:	6960      	ldr	r0, [r4, #20]
 800bde6:	1a5b      	subs	r3, r3, r1
 800bde8:	9302      	str	r3, [sp, #8]
 800bdea:	2303      	movs	r3, #3
 800bdec:	4343      	muls	r3, r0
 800bdee:	0fdd      	lsrs	r5, r3, #31
 800bdf0:	18ed      	adds	r5, r5, r3
 800bdf2:	9b01      	ldr	r3, [sp, #4]
 800bdf4:	9802      	ldr	r0, [sp, #8]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	181b      	adds	r3, r3, r0
 800bdfa:	106d      	asrs	r5, r5, #1
 800bdfc:	42ab      	cmp	r3, r5
 800bdfe:	d900      	bls.n	800be02 <__ssputs_r+0x3e>
 800be00:	001d      	movs	r5, r3
 800be02:	0553      	lsls	r3, r2, #21
 800be04:	d532      	bpl.n	800be6c <__ssputs_r+0xa8>
 800be06:	0029      	movs	r1, r5
 800be08:	0038      	movs	r0, r7
 800be0a:	f7ff ff65 	bl	800bcd8 <_malloc_r>
 800be0e:	1e06      	subs	r6, r0, #0
 800be10:	d109      	bne.n	800be26 <__ssputs_r+0x62>
 800be12:	230c      	movs	r3, #12
 800be14:	603b      	str	r3, [r7, #0]
 800be16:	2340      	movs	r3, #64	; 0x40
 800be18:	2001      	movs	r0, #1
 800be1a:	89a2      	ldrh	r2, [r4, #12]
 800be1c:	4240      	negs	r0, r0
 800be1e:	4313      	orrs	r3, r2
 800be20:	81a3      	strh	r3, [r4, #12]
 800be22:	b005      	add	sp, #20
 800be24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be26:	9a02      	ldr	r2, [sp, #8]
 800be28:	6921      	ldr	r1, [r4, #16]
 800be2a:	f7ff f9ea 	bl	800b202 <memcpy>
 800be2e:	89a3      	ldrh	r3, [r4, #12]
 800be30:	4a14      	ldr	r2, [pc, #80]	; (800be84 <__ssputs_r+0xc0>)
 800be32:	401a      	ands	r2, r3
 800be34:	2380      	movs	r3, #128	; 0x80
 800be36:	4313      	orrs	r3, r2
 800be38:	81a3      	strh	r3, [r4, #12]
 800be3a:	9b02      	ldr	r3, [sp, #8]
 800be3c:	6126      	str	r6, [r4, #16]
 800be3e:	18f6      	adds	r6, r6, r3
 800be40:	6026      	str	r6, [r4, #0]
 800be42:	6165      	str	r5, [r4, #20]
 800be44:	9e01      	ldr	r6, [sp, #4]
 800be46:	1aed      	subs	r5, r5, r3
 800be48:	60a5      	str	r5, [r4, #8]
 800be4a:	9b01      	ldr	r3, [sp, #4]
 800be4c:	429e      	cmp	r6, r3
 800be4e:	d900      	bls.n	800be52 <__ssputs_r+0x8e>
 800be50:	9e01      	ldr	r6, [sp, #4]
 800be52:	0032      	movs	r2, r6
 800be54:	9903      	ldr	r1, [sp, #12]
 800be56:	6820      	ldr	r0, [r4, #0]
 800be58:	f000 f97c 	bl	800c154 <memmove>
 800be5c:	68a3      	ldr	r3, [r4, #8]
 800be5e:	2000      	movs	r0, #0
 800be60:	1b9b      	subs	r3, r3, r6
 800be62:	60a3      	str	r3, [r4, #8]
 800be64:	6823      	ldr	r3, [r4, #0]
 800be66:	199e      	adds	r6, r3, r6
 800be68:	6026      	str	r6, [r4, #0]
 800be6a:	e7da      	b.n	800be22 <__ssputs_r+0x5e>
 800be6c:	002a      	movs	r2, r5
 800be6e:	0038      	movs	r0, r7
 800be70:	f000 f994 	bl	800c19c <_realloc_r>
 800be74:	1e06      	subs	r6, r0, #0
 800be76:	d1e0      	bne.n	800be3a <__ssputs_r+0x76>
 800be78:	0038      	movs	r0, r7
 800be7a:	6921      	ldr	r1, [r4, #16]
 800be7c:	f7ff fec0 	bl	800bc00 <_free_r>
 800be80:	e7c7      	b.n	800be12 <__ssputs_r+0x4e>
 800be82:	46c0      	nop			; (mov r8, r8)
 800be84:	fffffb7f 	.word	0xfffffb7f

0800be88 <_svfiprintf_r>:
 800be88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be8a:	b0a1      	sub	sp, #132	; 0x84
 800be8c:	9003      	str	r0, [sp, #12]
 800be8e:	001d      	movs	r5, r3
 800be90:	898b      	ldrh	r3, [r1, #12]
 800be92:	000f      	movs	r7, r1
 800be94:	0016      	movs	r6, r2
 800be96:	061b      	lsls	r3, r3, #24
 800be98:	d511      	bpl.n	800bebe <_svfiprintf_r+0x36>
 800be9a:	690b      	ldr	r3, [r1, #16]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d10e      	bne.n	800bebe <_svfiprintf_r+0x36>
 800bea0:	2140      	movs	r1, #64	; 0x40
 800bea2:	f7ff ff19 	bl	800bcd8 <_malloc_r>
 800bea6:	6038      	str	r0, [r7, #0]
 800bea8:	6138      	str	r0, [r7, #16]
 800beaa:	2800      	cmp	r0, #0
 800beac:	d105      	bne.n	800beba <_svfiprintf_r+0x32>
 800beae:	230c      	movs	r3, #12
 800beb0:	9a03      	ldr	r2, [sp, #12]
 800beb2:	3801      	subs	r0, #1
 800beb4:	6013      	str	r3, [r2, #0]
 800beb6:	b021      	add	sp, #132	; 0x84
 800beb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beba:	2340      	movs	r3, #64	; 0x40
 800bebc:	617b      	str	r3, [r7, #20]
 800bebe:	2300      	movs	r3, #0
 800bec0:	ac08      	add	r4, sp, #32
 800bec2:	6163      	str	r3, [r4, #20]
 800bec4:	3320      	adds	r3, #32
 800bec6:	7663      	strb	r3, [r4, #25]
 800bec8:	3310      	adds	r3, #16
 800beca:	76a3      	strb	r3, [r4, #26]
 800becc:	9507      	str	r5, [sp, #28]
 800bece:	0035      	movs	r5, r6
 800bed0:	782b      	ldrb	r3, [r5, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d001      	beq.n	800beda <_svfiprintf_r+0x52>
 800bed6:	2b25      	cmp	r3, #37	; 0x25
 800bed8:	d147      	bne.n	800bf6a <_svfiprintf_r+0xe2>
 800beda:	1bab      	subs	r3, r5, r6
 800bedc:	9305      	str	r3, [sp, #20]
 800bede:	42b5      	cmp	r5, r6
 800bee0:	d00c      	beq.n	800befc <_svfiprintf_r+0x74>
 800bee2:	0032      	movs	r2, r6
 800bee4:	0039      	movs	r1, r7
 800bee6:	9803      	ldr	r0, [sp, #12]
 800bee8:	f7ff ff6c 	bl	800bdc4 <__ssputs_r>
 800beec:	1c43      	adds	r3, r0, #1
 800beee:	d100      	bne.n	800bef2 <_svfiprintf_r+0x6a>
 800bef0:	e0ae      	b.n	800c050 <_svfiprintf_r+0x1c8>
 800bef2:	6962      	ldr	r2, [r4, #20]
 800bef4:	9b05      	ldr	r3, [sp, #20]
 800bef6:	4694      	mov	ip, r2
 800bef8:	4463      	add	r3, ip
 800befa:	6163      	str	r3, [r4, #20]
 800befc:	782b      	ldrb	r3, [r5, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d100      	bne.n	800bf04 <_svfiprintf_r+0x7c>
 800bf02:	e0a5      	b.n	800c050 <_svfiprintf_r+0x1c8>
 800bf04:	2201      	movs	r2, #1
 800bf06:	2300      	movs	r3, #0
 800bf08:	4252      	negs	r2, r2
 800bf0a:	6062      	str	r2, [r4, #4]
 800bf0c:	a904      	add	r1, sp, #16
 800bf0e:	3254      	adds	r2, #84	; 0x54
 800bf10:	1852      	adds	r2, r2, r1
 800bf12:	1c6e      	adds	r6, r5, #1
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	60e3      	str	r3, [r4, #12]
 800bf18:	60a3      	str	r3, [r4, #8]
 800bf1a:	7013      	strb	r3, [r2, #0]
 800bf1c:	65a3      	str	r3, [r4, #88]	; 0x58
 800bf1e:	2205      	movs	r2, #5
 800bf20:	7831      	ldrb	r1, [r6, #0]
 800bf22:	4854      	ldr	r0, [pc, #336]	; (800c074 <_svfiprintf_r+0x1ec>)
 800bf24:	f7ff f962 	bl	800b1ec <memchr>
 800bf28:	1c75      	adds	r5, r6, #1
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	d11f      	bne.n	800bf6e <_svfiprintf_r+0xe6>
 800bf2e:	6822      	ldr	r2, [r4, #0]
 800bf30:	06d3      	lsls	r3, r2, #27
 800bf32:	d504      	bpl.n	800bf3e <_svfiprintf_r+0xb6>
 800bf34:	2353      	movs	r3, #83	; 0x53
 800bf36:	a904      	add	r1, sp, #16
 800bf38:	185b      	adds	r3, r3, r1
 800bf3a:	2120      	movs	r1, #32
 800bf3c:	7019      	strb	r1, [r3, #0]
 800bf3e:	0713      	lsls	r3, r2, #28
 800bf40:	d504      	bpl.n	800bf4c <_svfiprintf_r+0xc4>
 800bf42:	2353      	movs	r3, #83	; 0x53
 800bf44:	a904      	add	r1, sp, #16
 800bf46:	185b      	adds	r3, r3, r1
 800bf48:	212b      	movs	r1, #43	; 0x2b
 800bf4a:	7019      	strb	r1, [r3, #0]
 800bf4c:	7833      	ldrb	r3, [r6, #0]
 800bf4e:	2b2a      	cmp	r3, #42	; 0x2a
 800bf50:	d016      	beq.n	800bf80 <_svfiprintf_r+0xf8>
 800bf52:	0035      	movs	r5, r6
 800bf54:	2100      	movs	r1, #0
 800bf56:	200a      	movs	r0, #10
 800bf58:	68e3      	ldr	r3, [r4, #12]
 800bf5a:	782a      	ldrb	r2, [r5, #0]
 800bf5c:	1c6e      	adds	r6, r5, #1
 800bf5e:	3a30      	subs	r2, #48	; 0x30
 800bf60:	2a09      	cmp	r2, #9
 800bf62:	d94e      	bls.n	800c002 <_svfiprintf_r+0x17a>
 800bf64:	2900      	cmp	r1, #0
 800bf66:	d111      	bne.n	800bf8c <_svfiprintf_r+0x104>
 800bf68:	e017      	b.n	800bf9a <_svfiprintf_r+0x112>
 800bf6a:	3501      	adds	r5, #1
 800bf6c:	e7b0      	b.n	800bed0 <_svfiprintf_r+0x48>
 800bf6e:	4b41      	ldr	r3, [pc, #260]	; (800c074 <_svfiprintf_r+0x1ec>)
 800bf70:	6822      	ldr	r2, [r4, #0]
 800bf72:	1ac0      	subs	r0, r0, r3
 800bf74:	2301      	movs	r3, #1
 800bf76:	4083      	lsls	r3, r0
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	002e      	movs	r6, r5
 800bf7c:	6023      	str	r3, [r4, #0]
 800bf7e:	e7ce      	b.n	800bf1e <_svfiprintf_r+0x96>
 800bf80:	9b07      	ldr	r3, [sp, #28]
 800bf82:	1d19      	adds	r1, r3, #4
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	9107      	str	r1, [sp, #28]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	db01      	blt.n	800bf90 <_svfiprintf_r+0x108>
 800bf8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf8e:	e004      	b.n	800bf9a <_svfiprintf_r+0x112>
 800bf90:	425b      	negs	r3, r3
 800bf92:	60e3      	str	r3, [r4, #12]
 800bf94:	2302      	movs	r3, #2
 800bf96:	4313      	orrs	r3, r2
 800bf98:	6023      	str	r3, [r4, #0]
 800bf9a:	782b      	ldrb	r3, [r5, #0]
 800bf9c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf9e:	d10a      	bne.n	800bfb6 <_svfiprintf_r+0x12e>
 800bfa0:	786b      	ldrb	r3, [r5, #1]
 800bfa2:	2b2a      	cmp	r3, #42	; 0x2a
 800bfa4:	d135      	bne.n	800c012 <_svfiprintf_r+0x18a>
 800bfa6:	9b07      	ldr	r3, [sp, #28]
 800bfa8:	3502      	adds	r5, #2
 800bfaa:	1d1a      	adds	r2, r3, #4
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	9207      	str	r2, [sp, #28]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	db2b      	blt.n	800c00c <_svfiprintf_r+0x184>
 800bfb4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfb6:	4e30      	ldr	r6, [pc, #192]	; (800c078 <_svfiprintf_r+0x1f0>)
 800bfb8:	2203      	movs	r2, #3
 800bfba:	0030      	movs	r0, r6
 800bfbc:	7829      	ldrb	r1, [r5, #0]
 800bfbe:	f7ff f915 	bl	800b1ec <memchr>
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	d006      	beq.n	800bfd4 <_svfiprintf_r+0x14c>
 800bfc6:	2340      	movs	r3, #64	; 0x40
 800bfc8:	1b80      	subs	r0, r0, r6
 800bfca:	4083      	lsls	r3, r0
 800bfcc:	6822      	ldr	r2, [r4, #0]
 800bfce:	3501      	adds	r5, #1
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	6023      	str	r3, [r4, #0]
 800bfd4:	7829      	ldrb	r1, [r5, #0]
 800bfd6:	2206      	movs	r2, #6
 800bfd8:	4828      	ldr	r0, [pc, #160]	; (800c07c <_svfiprintf_r+0x1f4>)
 800bfda:	1c6e      	adds	r6, r5, #1
 800bfdc:	7621      	strb	r1, [r4, #24]
 800bfde:	f7ff f905 	bl	800b1ec <memchr>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d03c      	beq.n	800c060 <_svfiprintf_r+0x1d8>
 800bfe6:	4b26      	ldr	r3, [pc, #152]	; (800c080 <_svfiprintf_r+0x1f8>)
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d125      	bne.n	800c038 <_svfiprintf_r+0x1b0>
 800bfec:	2207      	movs	r2, #7
 800bfee:	9b07      	ldr	r3, [sp, #28]
 800bff0:	3307      	adds	r3, #7
 800bff2:	4393      	bics	r3, r2
 800bff4:	3308      	adds	r3, #8
 800bff6:	9307      	str	r3, [sp, #28]
 800bff8:	6963      	ldr	r3, [r4, #20]
 800bffa:	9a04      	ldr	r2, [sp, #16]
 800bffc:	189b      	adds	r3, r3, r2
 800bffe:	6163      	str	r3, [r4, #20]
 800c000:	e765      	b.n	800bece <_svfiprintf_r+0x46>
 800c002:	4343      	muls	r3, r0
 800c004:	0035      	movs	r5, r6
 800c006:	2101      	movs	r1, #1
 800c008:	189b      	adds	r3, r3, r2
 800c00a:	e7a6      	b.n	800bf5a <_svfiprintf_r+0xd2>
 800c00c:	2301      	movs	r3, #1
 800c00e:	425b      	negs	r3, r3
 800c010:	e7d0      	b.n	800bfb4 <_svfiprintf_r+0x12c>
 800c012:	2300      	movs	r3, #0
 800c014:	200a      	movs	r0, #10
 800c016:	001a      	movs	r2, r3
 800c018:	3501      	adds	r5, #1
 800c01a:	6063      	str	r3, [r4, #4]
 800c01c:	7829      	ldrb	r1, [r5, #0]
 800c01e:	1c6e      	adds	r6, r5, #1
 800c020:	3930      	subs	r1, #48	; 0x30
 800c022:	2909      	cmp	r1, #9
 800c024:	d903      	bls.n	800c02e <_svfiprintf_r+0x1a6>
 800c026:	2b00      	cmp	r3, #0
 800c028:	d0c5      	beq.n	800bfb6 <_svfiprintf_r+0x12e>
 800c02a:	9209      	str	r2, [sp, #36]	; 0x24
 800c02c:	e7c3      	b.n	800bfb6 <_svfiprintf_r+0x12e>
 800c02e:	4342      	muls	r2, r0
 800c030:	0035      	movs	r5, r6
 800c032:	2301      	movs	r3, #1
 800c034:	1852      	adds	r2, r2, r1
 800c036:	e7f1      	b.n	800c01c <_svfiprintf_r+0x194>
 800c038:	ab07      	add	r3, sp, #28
 800c03a:	9300      	str	r3, [sp, #0]
 800c03c:	003a      	movs	r2, r7
 800c03e:	0021      	movs	r1, r4
 800c040:	4b10      	ldr	r3, [pc, #64]	; (800c084 <_svfiprintf_r+0x1fc>)
 800c042:	9803      	ldr	r0, [sp, #12]
 800c044:	f7fc f9e2 	bl	800840c <_printf_float>
 800c048:	9004      	str	r0, [sp, #16]
 800c04a:	9b04      	ldr	r3, [sp, #16]
 800c04c:	3301      	adds	r3, #1
 800c04e:	d1d3      	bne.n	800bff8 <_svfiprintf_r+0x170>
 800c050:	89bb      	ldrh	r3, [r7, #12]
 800c052:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c054:	065b      	lsls	r3, r3, #25
 800c056:	d400      	bmi.n	800c05a <_svfiprintf_r+0x1d2>
 800c058:	e72d      	b.n	800beb6 <_svfiprintf_r+0x2e>
 800c05a:	2001      	movs	r0, #1
 800c05c:	4240      	negs	r0, r0
 800c05e:	e72a      	b.n	800beb6 <_svfiprintf_r+0x2e>
 800c060:	ab07      	add	r3, sp, #28
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	003a      	movs	r2, r7
 800c066:	0021      	movs	r1, r4
 800c068:	4b06      	ldr	r3, [pc, #24]	; (800c084 <_svfiprintf_r+0x1fc>)
 800c06a:	9803      	ldr	r0, [sp, #12]
 800c06c:	f7fc fc80 	bl	8008970 <_printf_i>
 800c070:	e7ea      	b.n	800c048 <_svfiprintf_r+0x1c0>
 800c072:	46c0      	nop			; (mov r8, r8)
 800c074:	0800d40c 	.word	0x0800d40c
 800c078:	0800d412 	.word	0x0800d412
 800c07c:	0800d416 	.word	0x0800d416
 800c080:	0800840d 	.word	0x0800840d
 800c084:	0800bdc5 	.word	0x0800bdc5

0800c088 <nan>:
 800c088:	2000      	movs	r0, #0
 800c08a:	4901      	ldr	r1, [pc, #4]	; (800c090 <nan+0x8>)
 800c08c:	4770      	bx	lr
 800c08e:	46c0      	nop			; (mov r8, r8)
 800c090:	7ff80000 	.word	0x7ff80000

0800c094 <_sbrk_r>:
 800c094:	2300      	movs	r3, #0
 800c096:	b570      	push	{r4, r5, r6, lr}
 800c098:	4d06      	ldr	r5, [pc, #24]	; (800c0b4 <_sbrk_r+0x20>)
 800c09a:	0004      	movs	r4, r0
 800c09c:	0008      	movs	r0, r1
 800c09e:	602b      	str	r3, [r5, #0]
 800c0a0:	f7f8 fae2 	bl	8004668 <_sbrk>
 800c0a4:	1c43      	adds	r3, r0, #1
 800c0a6:	d103      	bne.n	800c0b0 <_sbrk_r+0x1c>
 800c0a8:	682b      	ldr	r3, [r5, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d000      	beq.n	800c0b0 <_sbrk_r+0x1c>
 800c0ae:	6023      	str	r3, [r4, #0]
 800c0b0:	bd70      	pop	{r4, r5, r6, pc}
 800c0b2:	46c0      	nop			; (mov r8, r8)
 800c0b4:	2000047c 	.word	0x2000047c

0800c0b8 <strncmp>:
 800c0b8:	b530      	push	{r4, r5, lr}
 800c0ba:	0005      	movs	r5, r0
 800c0bc:	1e10      	subs	r0, r2, #0
 800c0be:	d008      	beq.n	800c0d2 <strncmp+0x1a>
 800c0c0:	2400      	movs	r4, #0
 800c0c2:	3a01      	subs	r2, #1
 800c0c4:	5d2b      	ldrb	r3, [r5, r4]
 800c0c6:	5d08      	ldrb	r0, [r1, r4]
 800c0c8:	4283      	cmp	r3, r0
 800c0ca:	d101      	bne.n	800c0d0 <strncmp+0x18>
 800c0cc:	4294      	cmp	r4, r2
 800c0ce:	d101      	bne.n	800c0d4 <strncmp+0x1c>
 800c0d0:	1a18      	subs	r0, r3, r0
 800c0d2:	bd30      	pop	{r4, r5, pc}
 800c0d4:	3401      	adds	r4, #1
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1f4      	bne.n	800c0c4 <strncmp+0xc>
 800c0da:	e7f9      	b.n	800c0d0 <strncmp+0x18>

0800c0dc <__ascii_wctomb>:
 800c0dc:	0003      	movs	r3, r0
 800c0de:	1e08      	subs	r0, r1, #0
 800c0e0:	d005      	beq.n	800c0ee <__ascii_wctomb+0x12>
 800c0e2:	2aff      	cmp	r2, #255	; 0xff
 800c0e4:	d904      	bls.n	800c0f0 <__ascii_wctomb+0x14>
 800c0e6:	228a      	movs	r2, #138	; 0x8a
 800c0e8:	2001      	movs	r0, #1
 800c0ea:	601a      	str	r2, [r3, #0]
 800c0ec:	4240      	negs	r0, r0
 800c0ee:	4770      	bx	lr
 800c0f0:	2001      	movs	r0, #1
 800c0f2:	700a      	strb	r2, [r1, #0]
 800c0f4:	e7fb      	b.n	800c0ee <__ascii_wctomb+0x12>
	...

0800c0f8 <__assert_func>:
 800c0f8:	b530      	push	{r4, r5, lr}
 800c0fa:	0014      	movs	r4, r2
 800c0fc:	001a      	movs	r2, r3
 800c0fe:	4b09      	ldr	r3, [pc, #36]	; (800c124 <__assert_func+0x2c>)
 800c100:	0005      	movs	r5, r0
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	b085      	sub	sp, #20
 800c106:	68d8      	ldr	r0, [r3, #12]
 800c108:	4b07      	ldr	r3, [pc, #28]	; (800c128 <__assert_func+0x30>)
 800c10a:	2c00      	cmp	r4, #0
 800c10c:	d101      	bne.n	800c112 <__assert_func+0x1a>
 800c10e:	4b07      	ldr	r3, [pc, #28]	; (800c12c <__assert_func+0x34>)
 800c110:	001c      	movs	r4, r3
 800c112:	9301      	str	r3, [sp, #4]
 800c114:	9100      	str	r1, [sp, #0]
 800c116:	002b      	movs	r3, r5
 800c118:	4905      	ldr	r1, [pc, #20]	; (800c130 <__assert_func+0x38>)
 800c11a:	9402      	str	r4, [sp, #8]
 800c11c:	f000 f80a 	bl	800c134 <fiprintf>
 800c120:	f000 fa9a 	bl	800c658 <abort>
 800c124:	20000030 	.word	0x20000030
 800c128:	0800d41d 	.word	0x0800d41d
 800c12c:	0800d458 	.word	0x0800d458
 800c130:	0800d42a 	.word	0x0800d42a

0800c134 <fiprintf>:
 800c134:	b40e      	push	{r1, r2, r3}
 800c136:	b503      	push	{r0, r1, lr}
 800c138:	0001      	movs	r1, r0
 800c13a:	ab03      	add	r3, sp, #12
 800c13c:	4804      	ldr	r0, [pc, #16]	; (800c150 <fiprintf+0x1c>)
 800c13e:	cb04      	ldmia	r3!, {r2}
 800c140:	6800      	ldr	r0, [r0, #0]
 800c142:	9301      	str	r3, [sp, #4]
 800c144:	f000 f880 	bl	800c248 <_vfiprintf_r>
 800c148:	b002      	add	sp, #8
 800c14a:	bc08      	pop	{r3}
 800c14c:	b003      	add	sp, #12
 800c14e:	4718      	bx	r3
 800c150:	20000030 	.word	0x20000030

0800c154 <memmove>:
 800c154:	b510      	push	{r4, lr}
 800c156:	4288      	cmp	r0, r1
 800c158:	d902      	bls.n	800c160 <memmove+0xc>
 800c15a:	188b      	adds	r3, r1, r2
 800c15c:	4298      	cmp	r0, r3
 800c15e:	d303      	bcc.n	800c168 <memmove+0x14>
 800c160:	2300      	movs	r3, #0
 800c162:	e007      	b.n	800c174 <memmove+0x20>
 800c164:	5c8b      	ldrb	r3, [r1, r2]
 800c166:	5483      	strb	r3, [r0, r2]
 800c168:	3a01      	subs	r2, #1
 800c16a:	d2fb      	bcs.n	800c164 <memmove+0x10>
 800c16c:	bd10      	pop	{r4, pc}
 800c16e:	5ccc      	ldrb	r4, [r1, r3]
 800c170:	54c4      	strb	r4, [r0, r3]
 800c172:	3301      	adds	r3, #1
 800c174:	429a      	cmp	r2, r3
 800c176:	d1fa      	bne.n	800c16e <memmove+0x1a>
 800c178:	e7f8      	b.n	800c16c <memmove+0x18>
	...

0800c17c <__malloc_lock>:
 800c17c:	b510      	push	{r4, lr}
 800c17e:	4802      	ldr	r0, [pc, #8]	; (800c188 <__malloc_lock+0xc>)
 800c180:	f000 fc41 	bl	800ca06 <__retarget_lock_acquire_recursive>
 800c184:	bd10      	pop	{r4, pc}
 800c186:	46c0      	nop			; (mov r8, r8)
 800c188:	20000480 	.word	0x20000480

0800c18c <__malloc_unlock>:
 800c18c:	b510      	push	{r4, lr}
 800c18e:	4802      	ldr	r0, [pc, #8]	; (800c198 <__malloc_unlock+0xc>)
 800c190:	f000 fc3a 	bl	800ca08 <__retarget_lock_release_recursive>
 800c194:	bd10      	pop	{r4, pc}
 800c196:	46c0      	nop			; (mov r8, r8)
 800c198:	20000480 	.word	0x20000480

0800c19c <_realloc_r>:
 800c19c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c19e:	0007      	movs	r7, r0
 800c1a0:	000e      	movs	r6, r1
 800c1a2:	0014      	movs	r4, r2
 800c1a4:	2900      	cmp	r1, #0
 800c1a6:	d105      	bne.n	800c1b4 <_realloc_r+0x18>
 800c1a8:	0011      	movs	r1, r2
 800c1aa:	f7ff fd95 	bl	800bcd8 <_malloc_r>
 800c1ae:	0005      	movs	r5, r0
 800c1b0:	0028      	movs	r0, r5
 800c1b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c1b4:	2a00      	cmp	r2, #0
 800c1b6:	d103      	bne.n	800c1c0 <_realloc_r+0x24>
 800c1b8:	f7ff fd22 	bl	800bc00 <_free_r>
 800c1bc:	0025      	movs	r5, r4
 800c1be:	e7f7      	b.n	800c1b0 <_realloc_r+0x14>
 800c1c0:	f000 fc90 	bl	800cae4 <_malloc_usable_size_r>
 800c1c4:	9001      	str	r0, [sp, #4]
 800c1c6:	4284      	cmp	r4, r0
 800c1c8:	d803      	bhi.n	800c1d2 <_realloc_r+0x36>
 800c1ca:	0035      	movs	r5, r6
 800c1cc:	0843      	lsrs	r3, r0, #1
 800c1ce:	42a3      	cmp	r3, r4
 800c1d0:	d3ee      	bcc.n	800c1b0 <_realloc_r+0x14>
 800c1d2:	0021      	movs	r1, r4
 800c1d4:	0038      	movs	r0, r7
 800c1d6:	f7ff fd7f 	bl	800bcd8 <_malloc_r>
 800c1da:	1e05      	subs	r5, r0, #0
 800c1dc:	d0e8      	beq.n	800c1b0 <_realloc_r+0x14>
 800c1de:	9b01      	ldr	r3, [sp, #4]
 800c1e0:	0022      	movs	r2, r4
 800c1e2:	429c      	cmp	r4, r3
 800c1e4:	d900      	bls.n	800c1e8 <_realloc_r+0x4c>
 800c1e6:	001a      	movs	r2, r3
 800c1e8:	0031      	movs	r1, r6
 800c1ea:	0028      	movs	r0, r5
 800c1ec:	f7ff f809 	bl	800b202 <memcpy>
 800c1f0:	0031      	movs	r1, r6
 800c1f2:	0038      	movs	r0, r7
 800c1f4:	f7ff fd04 	bl	800bc00 <_free_r>
 800c1f8:	e7da      	b.n	800c1b0 <_realloc_r+0x14>

0800c1fa <__sfputc_r>:
 800c1fa:	6893      	ldr	r3, [r2, #8]
 800c1fc:	b510      	push	{r4, lr}
 800c1fe:	3b01      	subs	r3, #1
 800c200:	6093      	str	r3, [r2, #8]
 800c202:	2b00      	cmp	r3, #0
 800c204:	da04      	bge.n	800c210 <__sfputc_r+0x16>
 800c206:	6994      	ldr	r4, [r2, #24]
 800c208:	42a3      	cmp	r3, r4
 800c20a:	db07      	blt.n	800c21c <__sfputc_r+0x22>
 800c20c:	290a      	cmp	r1, #10
 800c20e:	d005      	beq.n	800c21c <__sfputc_r+0x22>
 800c210:	6813      	ldr	r3, [r2, #0]
 800c212:	1c58      	adds	r0, r3, #1
 800c214:	6010      	str	r0, [r2, #0]
 800c216:	7019      	strb	r1, [r3, #0]
 800c218:	0008      	movs	r0, r1
 800c21a:	bd10      	pop	{r4, pc}
 800c21c:	f000 f94e 	bl	800c4bc <__swbuf_r>
 800c220:	0001      	movs	r1, r0
 800c222:	e7f9      	b.n	800c218 <__sfputc_r+0x1e>

0800c224 <__sfputs_r>:
 800c224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c226:	0006      	movs	r6, r0
 800c228:	000f      	movs	r7, r1
 800c22a:	0014      	movs	r4, r2
 800c22c:	18d5      	adds	r5, r2, r3
 800c22e:	42ac      	cmp	r4, r5
 800c230:	d101      	bne.n	800c236 <__sfputs_r+0x12>
 800c232:	2000      	movs	r0, #0
 800c234:	e007      	b.n	800c246 <__sfputs_r+0x22>
 800c236:	7821      	ldrb	r1, [r4, #0]
 800c238:	003a      	movs	r2, r7
 800c23a:	0030      	movs	r0, r6
 800c23c:	f7ff ffdd 	bl	800c1fa <__sfputc_r>
 800c240:	3401      	adds	r4, #1
 800c242:	1c43      	adds	r3, r0, #1
 800c244:	d1f3      	bne.n	800c22e <__sfputs_r+0xa>
 800c246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c248 <_vfiprintf_r>:
 800c248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c24a:	b0a1      	sub	sp, #132	; 0x84
 800c24c:	0006      	movs	r6, r0
 800c24e:	000c      	movs	r4, r1
 800c250:	001f      	movs	r7, r3
 800c252:	9203      	str	r2, [sp, #12]
 800c254:	2800      	cmp	r0, #0
 800c256:	d004      	beq.n	800c262 <_vfiprintf_r+0x1a>
 800c258:	6983      	ldr	r3, [r0, #24]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d101      	bne.n	800c262 <_vfiprintf_r+0x1a>
 800c25e:	f000 fb31 	bl	800c8c4 <__sinit>
 800c262:	4b8e      	ldr	r3, [pc, #568]	; (800c49c <_vfiprintf_r+0x254>)
 800c264:	429c      	cmp	r4, r3
 800c266:	d11c      	bne.n	800c2a2 <_vfiprintf_r+0x5a>
 800c268:	6874      	ldr	r4, [r6, #4]
 800c26a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c26c:	07db      	lsls	r3, r3, #31
 800c26e:	d405      	bmi.n	800c27c <_vfiprintf_r+0x34>
 800c270:	89a3      	ldrh	r3, [r4, #12]
 800c272:	059b      	lsls	r3, r3, #22
 800c274:	d402      	bmi.n	800c27c <_vfiprintf_r+0x34>
 800c276:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c278:	f000 fbc5 	bl	800ca06 <__retarget_lock_acquire_recursive>
 800c27c:	89a3      	ldrh	r3, [r4, #12]
 800c27e:	071b      	lsls	r3, r3, #28
 800c280:	d502      	bpl.n	800c288 <_vfiprintf_r+0x40>
 800c282:	6923      	ldr	r3, [r4, #16]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d11d      	bne.n	800c2c4 <_vfiprintf_r+0x7c>
 800c288:	0021      	movs	r1, r4
 800c28a:	0030      	movs	r0, r6
 800c28c:	f000 f96c 	bl	800c568 <__swsetup_r>
 800c290:	2800      	cmp	r0, #0
 800c292:	d017      	beq.n	800c2c4 <_vfiprintf_r+0x7c>
 800c294:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c296:	07db      	lsls	r3, r3, #31
 800c298:	d50d      	bpl.n	800c2b6 <_vfiprintf_r+0x6e>
 800c29a:	2001      	movs	r0, #1
 800c29c:	4240      	negs	r0, r0
 800c29e:	b021      	add	sp, #132	; 0x84
 800c2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2a2:	4b7f      	ldr	r3, [pc, #508]	; (800c4a0 <_vfiprintf_r+0x258>)
 800c2a4:	429c      	cmp	r4, r3
 800c2a6:	d101      	bne.n	800c2ac <_vfiprintf_r+0x64>
 800c2a8:	68b4      	ldr	r4, [r6, #8]
 800c2aa:	e7de      	b.n	800c26a <_vfiprintf_r+0x22>
 800c2ac:	4b7d      	ldr	r3, [pc, #500]	; (800c4a4 <_vfiprintf_r+0x25c>)
 800c2ae:	429c      	cmp	r4, r3
 800c2b0:	d1db      	bne.n	800c26a <_vfiprintf_r+0x22>
 800c2b2:	68f4      	ldr	r4, [r6, #12]
 800c2b4:	e7d9      	b.n	800c26a <_vfiprintf_r+0x22>
 800c2b6:	89a3      	ldrh	r3, [r4, #12]
 800c2b8:	059b      	lsls	r3, r3, #22
 800c2ba:	d4ee      	bmi.n	800c29a <_vfiprintf_r+0x52>
 800c2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2be:	f000 fba3 	bl	800ca08 <__retarget_lock_release_recursive>
 800c2c2:	e7ea      	b.n	800c29a <_vfiprintf_r+0x52>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	ad08      	add	r5, sp, #32
 800c2c8:	616b      	str	r3, [r5, #20]
 800c2ca:	3320      	adds	r3, #32
 800c2cc:	766b      	strb	r3, [r5, #25]
 800c2ce:	3310      	adds	r3, #16
 800c2d0:	76ab      	strb	r3, [r5, #26]
 800c2d2:	9707      	str	r7, [sp, #28]
 800c2d4:	9f03      	ldr	r7, [sp, #12]
 800c2d6:	783b      	ldrb	r3, [r7, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d001      	beq.n	800c2e0 <_vfiprintf_r+0x98>
 800c2dc:	2b25      	cmp	r3, #37	; 0x25
 800c2de:	d14e      	bne.n	800c37e <_vfiprintf_r+0x136>
 800c2e0:	9b03      	ldr	r3, [sp, #12]
 800c2e2:	1afb      	subs	r3, r7, r3
 800c2e4:	9305      	str	r3, [sp, #20]
 800c2e6:	9b03      	ldr	r3, [sp, #12]
 800c2e8:	429f      	cmp	r7, r3
 800c2ea:	d00d      	beq.n	800c308 <_vfiprintf_r+0xc0>
 800c2ec:	9b05      	ldr	r3, [sp, #20]
 800c2ee:	0021      	movs	r1, r4
 800c2f0:	0030      	movs	r0, r6
 800c2f2:	9a03      	ldr	r2, [sp, #12]
 800c2f4:	f7ff ff96 	bl	800c224 <__sfputs_r>
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d100      	bne.n	800c2fe <_vfiprintf_r+0xb6>
 800c2fc:	e0b5      	b.n	800c46a <_vfiprintf_r+0x222>
 800c2fe:	696a      	ldr	r2, [r5, #20]
 800c300:	9b05      	ldr	r3, [sp, #20]
 800c302:	4694      	mov	ip, r2
 800c304:	4463      	add	r3, ip
 800c306:	616b      	str	r3, [r5, #20]
 800c308:	783b      	ldrb	r3, [r7, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d100      	bne.n	800c310 <_vfiprintf_r+0xc8>
 800c30e:	e0ac      	b.n	800c46a <_vfiprintf_r+0x222>
 800c310:	2201      	movs	r2, #1
 800c312:	1c7b      	adds	r3, r7, #1
 800c314:	9303      	str	r3, [sp, #12]
 800c316:	2300      	movs	r3, #0
 800c318:	4252      	negs	r2, r2
 800c31a:	606a      	str	r2, [r5, #4]
 800c31c:	a904      	add	r1, sp, #16
 800c31e:	3254      	adds	r2, #84	; 0x54
 800c320:	1852      	adds	r2, r2, r1
 800c322:	602b      	str	r3, [r5, #0]
 800c324:	60eb      	str	r3, [r5, #12]
 800c326:	60ab      	str	r3, [r5, #8]
 800c328:	7013      	strb	r3, [r2, #0]
 800c32a:	65ab      	str	r3, [r5, #88]	; 0x58
 800c32c:	9b03      	ldr	r3, [sp, #12]
 800c32e:	2205      	movs	r2, #5
 800c330:	7819      	ldrb	r1, [r3, #0]
 800c332:	485d      	ldr	r0, [pc, #372]	; (800c4a8 <_vfiprintf_r+0x260>)
 800c334:	f7fe ff5a 	bl	800b1ec <memchr>
 800c338:	9b03      	ldr	r3, [sp, #12]
 800c33a:	1c5f      	adds	r7, r3, #1
 800c33c:	2800      	cmp	r0, #0
 800c33e:	d120      	bne.n	800c382 <_vfiprintf_r+0x13a>
 800c340:	682a      	ldr	r2, [r5, #0]
 800c342:	06d3      	lsls	r3, r2, #27
 800c344:	d504      	bpl.n	800c350 <_vfiprintf_r+0x108>
 800c346:	2353      	movs	r3, #83	; 0x53
 800c348:	a904      	add	r1, sp, #16
 800c34a:	185b      	adds	r3, r3, r1
 800c34c:	2120      	movs	r1, #32
 800c34e:	7019      	strb	r1, [r3, #0]
 800c350:	0713      	lsls	r3, r2, #28
 800c352:	d504      	bpl.n	800c35e <_vfiprintf_r+0x116>
 800c354:	2353      	movs	r3, #83	; 0x53
 800c356:	a904      	add	r1, sp, #16
 800c358:	185b      	adds	r3, r3, r1
 800c35a:	212b      	movs	r1, #43	; 0x2b
 800c35c:	7019      	strb	r1, [r3, #0]
 800c35e:	9b03      	ldr	r3, [sp, #12]
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	2b2a      	cmp	r3, #42	; 0x2a
 800c364:	d016      	beq.n	800c394 <_vfiprintf_r+0x14c>
 800c366:	2100      	movs	r1, #0
 800c368:	68eb      	ldr	r3, [r5, #12]
 800c36a:	9f03      	ldr	r7, [sp, #12]
 800c36c:	783a      	ldrb	r2, [r7, #0]
 800c36e:	1c78      	adds	r0, r7, #1
 800c370:	3a30      	subs	r2, #48	; 0x30
 800c372:	4684      	mov	ip, r0
 800c374:	2a09      	cmp	r2, #9
 800c376:	d94f      	bls.n	800c418 <_vfiprintf_r+0x1d0>
 800c378:	2900      	cmp	r1, #0
 800c37a:	d111      	bne.n	800c3a0 <_vfiprintf_r+0x158>
 800c37c:	e017      	b.n	800c3ae <_vfiprintf_r+0x166>
 800c37e:	3701      	adds	r7, #1
 800c380:	e7a9      	b.n	800c2d6 <_vfiprintf_r+0x8e>
 800c382:	4b49      	ldr	r3, [pc, #292]	; (800c4a8 <_vfiprintf_r+0x260>)
 800c384:	682a      	ldr	r2, [r5, #0]
 800c386:	1ac0      	subs	r0, r0, r3
 800c388:	2301      	movs	r3, #1
 800c38a:	4083      	lsls	r3, r0
 800c38c:	4313      	orrs	r3, r2
 800c38e:	602b      	str	r3, [r5, #0]
 800c390:	9703      	str	r7, [sp, #12]
 800c392:	e7cb      	b.n	800c32c <_vfiprintf_r+0xe4>
 800c394:	9b07      	ldr	r3, [sp, #28]
 800c396:	1d19      	adds	r1, r3, #4
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	9107      	str	r1, [sp, #28]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	db01      	blt.n	800c3a4 <_vfiprintf_r+0x15c>
 800c3a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3a2:	e004      	b.n	800c3ae <_vfiprintf_r+0x166>
 800c3a4:	425b      	negs	r3, r3
 800c3a6:	60eb      	str	r3, [r5, #12]
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	602b      	str	r3, [r5, #0]
 800c3ae:	783b      	ldrb	r3, [r7, #0]
 800c3b0:	2b2e      	cmp	r3, #46	; 0x2e
 800c3b2:	d10a      	bne.n	800c3ca <_vfiprintf_r+0x182>
 800c3b4:	787b      	ldrb	r3, [r7, #1]
 800c3b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c3b8:	d137      	bne.n	800c42a <_vfiprintf_r+0x1e2>
 800c3ba:	9b07      	ldr	r3, [sp, #28]
 800c3bc:	3702      	adds	r7, #2
 800c3be:	1d1a      	adds	r2, r3, #4
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	9207      	str	r2, [sp, #28]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	db2d      	blt.n	800c424 <_vfiprintf_r+0x1dc>
 800c3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ca:	2203      	movs	r2, #3
 800c3cc:	7839      	ldrb	r1, [r7, #0]
 800c3ce:	4837      	ldr	r0, [pc, #220]	; (800c4ac <_vfiprintf_r+0x264>)
 800c3d0:	f7fe ff0c 	bl	800b1ec <memchr>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d007      	beq.n	800c3e8 <_vfiprintf_r+0x1a0>
 800c3d8:	4b34      	ldr	r3, [pc, #208]	; (800c4ac <_vfiprintf_r+0x264>)
 800c3da:	682a      	ldr	r2, [r5, #0]
 800c3dc:	1ac0      	subs	r0, r0, r3
 800c3de:	2340      	movs	r3, #64	; 0x40
 800c3e0:	4083      	lsls	r3, r0
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	3701      	adds	r7, #1
 800c3e6:	602b      	str	r3, [r5, #0]
 800c3e8:	7839      	ldrb	r1, [r7, #0]
 800c3ea:	1c7b      	adds	r3, r7, #1
 800c3ec:	2206      	movs	r2, #6
 800c3ee:	4830      	ldr	r0, [pc, #192]	; (800c4b0 <_vfiprintf_r+0x268>)
 800c3f0:	9303      	str	r3, [sp, #12]
 800c3f2:	7629      	strb	r1, [r5, #24]
 800c3f4:	f7fe fefa 	bl	800b1ec <memchr>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	d045      	beq.n	800c488 <_vfiprintf_r+0x240>
 800c3fc:	4b2d      	ldr	r3, [pc, #180]	; (800c4b4 <_vfiprintf_r+0x26c>)
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d127      	bne.n	800c452 <_vfiprintf_r+0x20a>
 800c402:	2207      	movs	r2, #7
 800c404:	9b07      	ldr	r3, [sp, #28]
 800c406:	3307      	adds	r3, #7
 800c408:	4393      	bics	r3, r2
 800c40a:	3308      	adds	r3, #8
 800c40c:	9307      	str	r3, [sp, #28]
 800c40e:	696b      	ldr	r3, [r5, #20]
 800c410:	9a04      	ldr	r2, [sp, #16]
 800c412:	189b      	adds	r3, r3, r2
 800c414:	616b      	str	r3, [r5, #20]
 800c416:	e75d      	b.n	800c2d4 <_vfiprintf_r+0x8c>
 800c418:	210a      	movs	r1, #10
 800c41a:	434b      	muls	r3, r1
 800c41c:	4667      	mov	r7, ip
 800c41e:	189b      	adds	r3, r3, r2
 800c420:	3909      	subs	r1, #9
 800c422:	e7a3      	b.n	800c36c <_vfiprintf_r+0x124>
 800c424:	2301      	movs	r3, #1
 800c426:	425b      	negs	r3, r3
 800c428:	e7ce      	b.n	800c3c8 <_vfiprintf_r+0x180>
 800c42a:	2300      	movs	r3, #0
 800c42c:	001a      	movs	r2, r3
 800c42e:	3701      	adds	r7, #1
 800c430:	606b      	str	r3, [r5, #4]
 800c432:	7839      	ldrb	r1, [r7, #0]
 800c434:	1c78      	adds	r0, r7, #1
 800c436:	3930      	subs	r1, #48	; 0x30
 800c438:	4684      	mov	ip, r0
 800c43a:	2909      	cmp	r1, #9
 800c43c:	d903      	bls.n	800c446 <_vfiprintf_r+0x1fe>
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d0c3      	beq.n	800c3ca <_vfiprintf_r+0x182>
 800c442:	9209      	str	r2, [sp, #36]	; 0x24
 800c444:	e7c1      	b.n	800c3ca <_vfiprintf_r+0x182>
 800c446:	230a      	movs	r3, #10
 800c448:	435a      	muls	r2, r3
 800c44a:	4667      	mov	r7, ip
 800c44c:	1852      	adds	r2, r2, r1
 800c44e:	3b09      	subs	r3, #9
 800c450:	e7ef      	b.n	800c432 <_vfiprintf_r+0x1ea>
 800c452:	ab07      	add	r3, sp, #28
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	0022      	movs	r2, r4
 800c458:	0029      	movs	r1, r5
 800c45a:	0030      	movs	r0, r6
 800c45c:	4b16      	ldr	r3, [pc, #88]	; (800c4b8 <_vfiprintf_r+0x270>)
 800c45e:	f7fb ffd5 	bl	800840c <_printf_float>
 800c462:	9004      	str	r0, [sp, #16]
 800c464:	9b04      	ldr	r3, [sp, #16]
 800c466:	3301      	adds	r3, #1
 800c468:	d1d1      	bne.n	800c40e <_vfiprintf_r+0x1c6>
 800c46a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c46c:	07db      	lsls	r3, r3, #31
 800c46e:	d405      	bmi.n	800c47c <_vfiprintf_r+0x234>
 800c470:	89a3      	ldrh	r3, [r4, #12]
 800c472:	059b      	lsls	r3, r3, #22
 800c474:	d402      	bmi.n	800c47c <_vfiprintf_r+0x234>
 800c476:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c478:	f000 fac6 	bl	800ca08 <__retarget_lock_release_recursive>
 800c47c:	89a3      	ldrh	r3, [r4, #12]
 800c47e:	065b      	lsls	r3, r3, #25
 800c480:	d500      	bpl.n	800c484 <_vfiprintf_r+0x23c>
 800c482:	e70a      	b.n	800c29a <_vfiprintf_r+0x52>
 800c484:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c486:	e70a      	b.n	800c29e <_vfiprintf_r+0x56>
 800c488:	ab07      	add	r3, sp, #28
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	0022      	movs	r2, r4
 800c48e:	0029      	movs	r1, r5
 800c490:	0030      	movs	r0, r6
 800c492:	4b09      	ldr	r3, [pc, #36]	; (800c4b8 <_vfiprintf_r+0x270>)
 800c494:	f7fc fa6c 	bl	8008970 <_printf_i>
 800c498:	e7e3      	b.n	800c462 <_vfiprintf_r+0x21a>
 800c49a:	46c0      	nop			; (mov r8, r8)
 800c49c:	0800d47c 	.word	0x0800d47c
 800c4a0:	0800d49c 	.word	0x0800d49c
 800c4a4:	0800d45c 	.word	0x0800d45c
 800c4a8:	0800d40c 	.word	0x0800d40c
 800c4ac:	0800d412 	.word	0x0800d412
 800c4b0:	0800d416 	.word	0x0800d416
 800c4b4:	0800840d 	.word	0x0800840d
 800c4b8:	0800c225 	.word	0x0800c225

0800c4bc <__swbuf_r>:
 800c4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4be:	0005      	movs	r5, r0
 800c4c0:	000e      	movs	r6, r1
 800c4c2:	0014      	movs	r4, r2
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d004      	beq.n	800c4d2 <__swbuf_r+0x16>
 800c4c8:	6983      	ldr	r3, [r0, #24]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d101      	bne.n	800c4d2 <__swbuf_r+0x16>
 800c4ce:	f000 f9f9 	bl	800c8c4 <__sinit>
 800c4d2:	4b22      	ldr	r3, [pc, #136]	; (800c55c <__swbuf_r+0xa0>)
 800c4d4:	429c      	cmp	r4, r3
 800c4d6:	d12e      	bne.n	800c536 <__swbuf_r+0x7a>
 800c4d8:	686c      	ldr	r4, [r5, #4]
 800c4da:	69a3      	ldr	r3, [r4, #24]
 800c4dc:	60a3      	str	r3, [r4, #8]
 800c4de:	89a3      	ldrh	r3, [r4, #12]
 800c4e0:	071b      	lsls	r3, r3, #28
 800c4e2:	d532      	bpl.n	800c54a <__swbuf_r+0x8e>
 800c4e4:	6923      	ldr	r3, [r4, #16]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d02f      	beq.n	800c54a <__swbuf_r+0x8e>
 800c4ea:	6823      	ldr	r3, [r4, #0]
 800c4ec:	6922      	ldr	r2, [r4, #16]
 800c4ee:	b2f7      	uxtb	r7, r6
 800c4f0:	1a98      	subs	r0, r3, r2
 800c4f2:	6963      	ldr	r3, [r4, #20]
 800c4f4:	b2f6      	uxtb	r6, r6
 800c4f6:	4283      	cmp	r3, r0
 800c4f8:	dc05      	bgt.n	800c506 <__swbuf_r+0x4a>
 800c4fa:	0021      	movs	r1, r4
 800c4fc:	0028      	movs	r0, r5
 800c4fe:	f000 f93f 	bl	800c780 <_fflush_r>
 800c502:	2800      	cmp	r0, #0
 800c504:	d127      	bne.n	800c556 <__swbuf_r+0x9a>
 800c506:	68a3      	ldr	r3, [r4, #8]
 800c508:	3001      	adds	r0, #1
 800c50a:	3b01      	subs	r3, #1
 800c50c:	60a3      	str	r3, [r4, #8]
 800c50e:	6823      	ldr	r3, [r4, #0]
 800c510:	1c5a      	adds	r2, r3, #1
 800c512:	6022      	str	r2, [r4, #0]
 800c514:	701f      	strb	r7, [r3, #0]
 800c516:	6963      	ldr	r3, [r4, #20]
 800c518:	4283      	cmp	r3, r0
 800c51a:	d004      	beq.n	800c526 <__swbuf_r+0x6a>
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	07db      	lsls	r3, r3, #31
 800c520:	d507      	bpl.n	800c532 <__swbuf_r+0x76>
 800c522:	2e0a      	cmp	r6, #10
 800c524:	d105      	bne.n	800c532 <__swbuf_r+0x76>
 800c526:	0021      	movs	r1, r4
 800c528:	0028      	movs	r0, r5
 800c52a:	f000 f929 	bl	800c780 <_fflush_r>
 800c52e:	2800      	cmp	r0, #0
 800c530:	d111      	bne.n	800c556 <__swbuf_r+0x9a>
 800c532:	0030      	movs	r0, r6
 800c534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c536:	4b0a      	ldr	r3, [pc, #40]	; (800c560 <__swbuf_r+0xa4>)
 800c538:	429c      	cmp	r4, r3
 800c53a:	d101      	bne.n	800c540 <__swbuf_r+0x84>
 800c53c:	68ac      	ldr	r4, [r5, #8]
 800c53e:	e7cc      	b.n	800c4da <__swbuf_r+0x1e>
 800c540:	4b08      	ldr	r3, [pc, #32]	; (800c564 <__swbuf_r+0xa8>)
 800c542:	429c      	cmp	r4, r3
 800c544:	d1c9      	bne.n	800c4da <__swbuf_r+0x1e>
 800c546:	68ec      	ldr	r4, [r5, #12]
 800c548:	e7c7      	b.n	800c4da <__swbuf_r+0x1e>
 800c54a:	0021      	movs	r1, r4
 800c54c:	0028      	movs	r0, r5
 800c54e:	f000 f80b 	bl	800c568 <__swsetup_r>
 800c552:	2800      	cmp	r0, #0
 800c554:	d0c9      	beq.n	800c4ea <__swbuf_r+0x2e>
 800c556:	2601      	movs	r6, #1
 800c558:	4276      	negs	r6, r6
 800c55a:	e7ea      	b.n	800c532 <__swbuf_r+0x76>
 800c55c:	0800d47c 	.word	0x0800d47c
 800c560:	0800d49c 	.word	0x0800d49c
 800c564:	0800d45c 	.word	0x0800d45c

0800c568 <__swsetup_r>:
 800c568:	4b37      	ldr	r3, [pc, #220]	; (800c648 <__swsetup_r+0xe0>)
 800c56a:	b570      	push	{r4, r5, r6, lr}
 800c56c:	681d      	ldr	r5, [r3, #0]
 800c56e:	0006      	movs	r6, r0
 800c570:	000c      	movs	r4, r1
 800c572:	2d00      	cmp	r5, #0
 800c574:	d005      	beq.n	800c582 <__swsetup_r+0x1a>
 800c576:	69ab      	ldr	r3, [r5, #24]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d102      	bne.n	800c582 <__swsetup_r+0x1a>
 800c57c:	0028      	movs	r0, r5
 800c57e:	f000 f9a1 	bl	800c8c4 <__sinit>
 800c582:	4b32      	ldr	r3, [pc, #200]	; (800c64c <__swsetup_r+0xe4>)
 800c584:	429c      	cmp	r4, r3
 800c586:	d10f      	bne.n	800c5a8 <__swsetup_r+0x40>
 800c588:	686c      	ldr	r4, [r5, #4]
 800c58a:	230c      	movs	r3, #12
 800c58c:	5ee2      	ldrsh	r2, [r4, r3]
 800c58e:	b293      	uxth	r3, r2
 800c590:	0711      	lsls	r1, r2, #28
 800c592:	d42d      	bmi.n	800c5f0 <__swsetup_r+0x88>
 800c594:	06d9      	lsls	r1, r3, #27
 800c596:	d411      	bmi.n	800c5bc <__swsetup_r+0x54>
 800c598:	2309      	movs	r3, #9
 800c59a:	2001      	movs	r0, #1
 800c59c:	6033      	str	r3, [r6, #0]
 800c59e:	3337      	adds	r3, #55	; 0x37
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	81a3      	strh	r3, [r4, #12]
 800c5a4:	4240      	negs	r0, r0
 800c5a6:	bd70      	pop	{r4, r5, r6, pc}
 800c5a8:	4b29      	ldr	r3, [pc, #164]	; (800c650 <__swsetup_r+0xe8>)
 800c5aa:	429c      	cmp	r4, r3
 800c5ac:	d101      	bne.n	800c5b2 <__swsetup_r+0x4a>
 800c5ae:	68ac      	ldr	r4, [r5, #8]
 800c5b0:	e7eb      	b.n	800c58a <__swsetup_r+0x22>
 800c5b2:	4b28      	ldr	r3, [pc, #160]	; (800c654 <__swsetup_r+0xec>)
 800c5b4:	429c      	cmp	r4, r3
 800c5b6:	d1e8      	bne.n	800c58a <__swsetup_r+0x22>
 800c5b8:	68ec      	ldr	r4, [r5, #12]
 800c5ba:	e7e6      	b.n	800c58a <__swsetup_r+0x22>
 800c5bc:	075b      	lsls	r3, r3, #29
 800c5be:	d513      	bpl.n	800c5e8 <__swsetup_r+0x80>
 800c5c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5c2:	2900      	cmp	r1, #0
 800c5c4:	d008      	beq.n	800c5d8 <__swsetup_r+0x70>
 800c5c6:	0023      	movs	r3, r4
 800c5c8:	3344      	adds	r3, #68	; 0x44
 800c5ca:	4299      	cmp	r1, r3
 800c5cc:	d002      	beq.n	800c5d4 <__swsetup_r+0x6c>
 800c5ce:	0030      	movs	r0, r6
 800c5d0:	f7ff fb16 	bl	800bc00 <_free_r>
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	6363      	str	r3, [r4, #52]	; 0x34
 800c5d8:	2224      	movs	r2, #36	; 0x24
 800c5da:	89a3      	ldrh	r3, [r4, #12]
 800c5dc:	4393      	bics	r3, r2
 800c5de:	81a3      	strh	r3, [r4, #12]
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	6063      	str	r3, [r4, #4]
 800c5e4:	6923      	ldr	r3, [r4, #16]
 800c5e6:	6023      	str	r3, [r4, #0]
 800c5e8:	2308      	movs	r3, #8
 800c5ea:	89a2      	ldrh	r2, [r4, #12]
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	81a3      	strh	r3, [r4, #12]
 800c5f0:	6923      	ldr	r3, [r4, #16]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d10b      	bne.n	800c60e <__swsetup_r+0xa6>
 800c5f6:	21a0      	movs	r1, #160	; 0xa0
 800c5f8:	2280      	movs	r2, #128	; 0x80
 800c5fa:	89a3      	ldrh	r3, [r4, #12]
 800c5fc:	0089      	lsls	r1, r1, #2
 800c5fe:	0092      	lsls	r2, r2, #2
 800c600:	400b      	ands	r3, r1
 800c602:	4293      	cmp	r3, r2
 800c604:	d003      	beq.n	800c60e <__swsetup_r+0xa6>
 800c606:	0021      	movs	r1, r4
 800c608:	0030      	movs	r0, r6
 800c60a:	f000 fa27 	bl	800ca5c <__smakebuf_r>
 800c60e:	220c      	movs	r2, #12
 800c610:	5ea3      	ldrsh	r3, [r4, r2]
 800c612:	2001      	movs	r0, #1
 800c614:	001a      	movs	r2, r3
 800c616:	b299      	uxth	r1, r3
 800c618:	4002      	ands	r2, r0
 800c61a:	4203      	tst	r3, r0
 800c61c:	d00f      	beq.n	800c63e <__swsetup_r+0xd6>
 800c61e:	2200      	movs	r2, #0
 800c620:	60a2      	str	r2, [r4, #8]
 800c622:	6962      	ldr	r2, [r4, #20]
 800c624:	4252      	negs	r2, r2
 800c626:	61a2      	str	r2, [r4, #24]
 800c628:	2000      	movs	r0, #0
 800c62a:	6922      	ldr	r2, [r4, #16]
 800c62c:	4282      	cmp	r2, r0
 800c62e:	d1ba      	bne.n	800c5a6 <__swsetup_r+0x3e>
 800c630:	060a      	lsls	r2, r1, #24
 800c632:	d5b8      	bpl.n	800c5a6 <__swsetup_r+0x3e>
 800c634:	2240      	movs	r2, #64	; 0x40
 800c636:	4313      	orrs	r3, r2
 800c638:	81a3      	strh	r3, [r4, #12]
 800c63a:	3801      	subs	r0, #1
 800c63c:	e7b3      	b.n	800c5a6 <__swsetup_r+0x3e>
 800c63e:	0788      	lsls	r0, r1, #30
 800c640:	d400      	bmi.n	800c644 <__swsetup_r+0xdc>
 800c642:	6962      	ldr	r2, [r4, #20]
 800c644:	60a2      	str	r2, [r4, #8]
 800c646:	e7ef      	b.n	800c628 <__swsetup_r+0xc0>
 800c648:	20000030 	.word	0x20000030
 800c64c:	0800d47c 	.word	0x0800d47c
 800c650:	0800d49c 	.word	0x0800d49c
 800c654:	0800d45c 	.word	0x0800d45c

0800c658 <abort>:
 800c658:	2006      	movs	r0, #6
 800c65a:	b510      	push	{r4, lr}
 800c65c:	f000 fa74 	bl	800cb48 <raise>
 800c660:	2001      	movs	r0, #1
 800c662:	f7f7 ff8f 	bl	8004584 <_exit>
	...

0800c668 <__sflush_r>:
 800c668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c66a:	898b      	ldrh	r3, [r1, #12]
 800c66c:	0005      	movs	r5, r0
 800c66e:	000c      	movs	r4, r1
 800c670:	071a      	lsls	r2, r3, #28
 800c672:	d45f      	bmi.n	800c734 <__sflush_r+0xcc>
 800c674:	684a      	ldr	r2, [r1, #4]
 800c676:	2a00      	cmp	r2, #0
 800c678:	dc04      	bgt.n	800c684 <__sflush_r+0x1c>
 800c67a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c67c:	2a00      	cmp	r2, #0
 800c67e:	dc01      	bgt.n	800c684 <__sflush_r+0x1c>
 800c680:	2000      	movs	r0, #0
 800c682:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c684:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c686:	2f00      	cmp	r7, #0
 800c688:	d0fa      	beq.n	800c680 <__sflush_r+0x18>
 800c68a:	2200      	movs	r2, #0
 800c68c:	2180      	movs	r1, #128	; 0x80
 800c68e:	682e      	ldr	r6, [r5, #0]
 800c690:	602a      	str	r2, [r5, #0]
 800c692:	001a      	movs	r2, r3
 800c694:	0149      	lsls	r1, r1, #5
 800c696:	400a      	ands	r2, r1
 800c698:	420b      	tst	r3, r1
 800c69a:	d034      	beq.n	800c706 <__sflush_r+0x9e>
 800c69c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c69e:	89a3      	ldrh	r3, [r4, #12]
 800c6a0:	075b      	lsls	r3, r3, #29
 800c6a2:	d506      	bpl.n	800c6b2 <__sflush_r+0x4a>
 800c6a4:	6863      	ldr	r3, [r4, #4]
 800c6a6:	1ac0      	subs	r0, r0, r3
 800c6a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d001      	beq.n	800c6b2 <__sflush_r+0x4a>
 800c6ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6b0:	1ac0      	subs	r0, r0, r3
 800c6b2:	0002      	movs	r2, r0
 800c6b4:	6a21      	ldr	r1, [r4, #32]
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	0028      	movs	r0, r5
 800c6ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c6bc:	47b8      	blx	r7
 800c6be:	89a1      	ldrh	r1, [r4, #12]
 800c6c0:	1c43      	adds	r3, r0, #1
 800c6c2:	d106      	bne.n	800c6d2 <__sflush_r+0x6a>
 800c6c4:	682b      	ldr	r3, [r5, #0]
 800c6c6:	2b1d      	cmp	r3, #29
 800c6c8:	d831      	bhi.n	800c72e <__sflush_r+0xc6>
 800c6ca:	4a2c      	ldr	r2, [pc, #176]	; (800c77c <__sflush_r+0x114>)
 800c6cc:	40da      	lsrs	r2, r3
 800c6ce:	07d3      	lsls	r3, r2, #31
 800c6d0:	d52d      	bpl.n	800c72e <__sflush_r+0xc6>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	6063      	str	r3, [r4, #4]
 800c6d6:	6923      	ldr	r3, [r4, #16]
 800c6d8:	6023      	str	r3, [r4, #0]
 800c6da:	04cb      	lsls	r3, r1, #19
 800c6dc:	d505      	bpl.n	800c6ea <__sflush_r+0x82>
 800c6de:	1c43      	adds	r3, r0, #1
 800c6e0:	d102      	bne.n	800c6e8 <__sflush_r+0x80>
 800c6e2:	682b      	ldr	r3, [r5, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d100      	bne.n	800c6ea <__sflush_r+0x82>
 800c6e8:	6560      	str	r0, [r4, #84]	; 0x54
 800c6ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6ec:	602e      	str	r6, [r5, #0]
 800c6ee:	2900      	cmp	r1, #0
 800c6f0:	d0c6      	beq.n	800c680 <__sflush_r+0x18>
 800c6f2:	0023      	movs	r3, r4
 800c6f4:	3344      	adds	r3, #68	; 0x44
 800c6f6:	4299      	cmp	r1, r3
 800c6f8:	d002      	beq.n	800c700 <__sflush_r+0x98>
 800c6fa:	0028      	movs	r0, r5
 800c6fc:	f7ff fa80 	bl	800bc00 <_free_r>
 800c700:	2000      	movs	r0, #0
 800c702:	6360      	str	r0, [r4, #52]	; 0x34
 800c704:	e7bd      	b.n	800c682 <__sflush_r+0x1a>
 800c706:	2301      	movs	r3, #1
 800c708:	0028      	movs	r0, r5
 800c70a:	6a21      	ldr	r1, [r4, #32]
 800c70c:	47b8      	blx	r7
 800c70e:	1c43      	adds	r3, r0, #1
 800c710:	d1c5      	bne.n	800c69e <__sflush_r+0x36>
 800c712:	682b      	ldr	r3, [r5, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d0c2      	beq.n	800c69e <__sflush_r+0x36>
 800c718:	2b1d      	cmp	r3, #29
 800c71a:	d001      	beq.n	800c720 <__sflush_r+0xb8>
 800c71c:	2b16      	cmp	r3, #22
 800c71e:	d101      	bne.n	800c724 <__sflush_r+0xbc>
 800c720:	602e      	str	r6, [r5, #0]
 800c722:	e7ad      	b.n	800c680 <__sflush_r+0x18>
 800c724:	2340      	movs	r3, #64	; 0x40
 800c726:	89a2      	ldrh	r2, [r4, #12]
 800c728:	4313      	orrs	r3, r2
 800c72a:	81a3      	strh	r3, [r4, #12]
 800c72c:	e7a9      	b.n	800c682 <__sflush_r+0x1a>
 800c72e:	2340      	movs	r3, #64	; 0x40
 800c730:	430b      	orrs	r3, r1
 800c732:	e7fa      	b.n	800c72a <__sflush_r+0xc2>
 800c734:	690f      	ldr	r7, [r1, #16]
 800c736:	2f00      	cmp	r7, #0
 800c738:	d0a2      	beq.n	800c680 <__sflush_r+0x18>
 800c73a:	680a      	ldr	r2, [r1, #0]
 800c73c:	600f      	str	r7, [r1, #0]
 800c73e:	1bd2      	subs	r2, r2, r7
 800c740:	9201      	str	r2, [sp, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	079b      	lsls	r3, r3, #30
 800c746:	d100      	bne.n	800c74a <__sflush_r+0xe2>
 800c748:	694a      	ldr	r2, [r1, #20]
 800c74a:	60a2      	str	r2, [r4, #8]
 800c74c:	9b01      	ldr	r3, [sp, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	dc00      	bgt.n	800c754 <__sflush_r+0xec>
 800c752:	e795      	b.n	800c680 <__sflush_r+0x18>
 800c754:	003a      	movs	r2, r7
 800c756:	0028      	movs	r0, r5
 800c758:	9b01      	ldr	r3, [sp, #4]
 800c75a:	6a21      	ldr	r1, [r4, #32]
 800c75c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c75e:	47b0      	blx	r6
 800c760:	2800      	cmp	r0, #0
 800c762:	dc06      	bgt.n	800c772 <__sflush_r+0x10a>
 800c764:	2340      	movs	r3, #64	; 0x40
 800c766:	2001      	movs	r0, #1
 800c768:	89a2      	ldrh	r2, [r4, #12]
 800c76a:	4240      	negs	r0, r0
 800c76c:	4313      	orrs	r3, r2
 800c76e:	81a3      	strh	r3, [r4, #12]
 800c770:	e787      	b.n	800c682 <__sflush_r+0x1a>
 800c772:	9b01      	ldr	r3, [sp, #4]
 800c774:	183f      	adds	r7, r7, r0
 800c776:	1a1b      	subs	r3, r3, r0
 800c778:	9301      	str	r3, [sp, #4]
 800c77a:	e7e7      	b.n	800c74c <__sflush_r+0xe4>
 800c77c:	20400001 	.word	0x20400001

0800c780 <_fflush_r>:
 800c780:	690b      	ldr	r3, [r1, #16]
 800c782:	b570      	push	{r4, r5, r6, lr}
 800c784:	0005      	movs	r5, r0
 800c786:	000c      	movs	r4, r1
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d102      	bne.n	800c792 <_fflush_r+0x12>
 800c78c:	2500      	movs	r5, #0
 800c78e:	0028      	movs	r0, r5
 800c790:	bd70      	pop	{r4, r5, r6, pc}
 800c792:	2800      	cmp	r0, #0
 800c794:	d004      	beq.n	800c7a0 <_fflush_r+0x20>
 800c796:	6983      	ldr	r3, [r0, #24]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d101      	bne.n	800c7a0 <_fflush_r+0x20>
 800c79c:	f000 f892 	bl	800c8c4 <__sinit>
 800c7a0:	4b14      	ldr	r3, [pc, #80]	; (800c7f4 <_fflush_r+0x74>)
 800c7a2:	429c      	cmp	r4, r3
 800c7a4:	d11b      	bne.n	800c7de <_fflush_r+0x5e>
 800c7a6:	686c      	ldr	r4, [r5, #4]
 800c7a8:	220c      	movs	r2, #12
 800c7aa:	5ea3      	ldrsh	r3, [r4, r2]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d0ed      	beq.n	800c78c <_fflush_r+0xc>
 800c7b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7b2:	07d2      	lsls	r2, r2, #31
 800c7b4:	d404      	bmi.n	800c7c0 <_fflush_r+0x40>
 800c7b6:	059b      	lsls	r3, r3, #22
 800c7b8:	d402      	bmi.n	800c7c0 <_fflush_r+0x40>
 800c7ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7bc:	f000 f923 	bl	800ca06 <__retarget_lock_acquire_recursive>
 800c7c0:	0028      	movs	r0, r5
 800c7c2:	0021      	movs	r1, r4
 800c7c4:	f7ff ff50 	bl	800c668 <__sflush_r>
 800c7c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7ca:	0005      	movs	r5, r0
 800c7cc:	07db      	lsls	r3, r3, #31
 800c7ce:	d4de      	bmi.n	800c78e <_fflush_r+0xe>
 800c7d0:	89a3      	ldrh	r3, [r4, #12]
 800c7d2:	059b      	lsls	r3, r3, #22
 800c7d4:	d4db      	bmi.n	800c78e <_fflush_r+0xe>
 800c7d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7d8:	f000 f916 	bl	800ca08 <__retarget_lock_release_recursive>
 800c7dc:	e7d7      	b.n	800c78e <_fflush_r+0xe>
 800c7de:	4b06      	ldr	r3, [pc, #24]	; (800c7f8 <_fflush_r+0x78>)
 800c7e0:	429c      	cmp	r4, r3
 800c7e2:	d101      	bne.n	800c7e8 <_fflush_r+0x68>
 800c7e4:	68ac      	ldr	r4, [r5, #8]
 800c7e6:	e7df      	b.n	800c7a8 <_fflush_r+0x28>
 800c7e8:	4b04      	ldr	r3, [pc, #16]	; (800c7fc <_fflush_r+0x7c>)
 800c7ea:	429c      	cmp	r4, r3
 800c7ec:	d1dc      	bne.n	800c7a8 <_fflush_r+0x28>
 800c7ee:	68ec      	ldr	r4, [r5, #12]
 800c7f0:	e7da      	b.n	800c7a8 <_fflush_r+0x28>
 800c7f2:	46c0      	nop			; (mov r8, r8)
 800c7f4:	0800d47c 	.word	0x0800d47c
 800c7f8:	0800d49c 	.word	0x0800d49c
 800c7fc:	0800d45c 	.word	0x0800d45c

0800c800 <std>:
 800c800:	2300      	movs	r3, #0
 800c802:	b510      	push	{r4, lr}
 800c804:	0004      	movs	r4, r0
 800c806:	6003      	str	r3, [r0, #0]
 800c808:	6043      	str	r3, [r0, #4]
 800c80a:	6083      	str	r3, [r0, #8]
 800c80c:	8181      	strh	r1, [r0, #12]
 800c80e:	6643      	str	r3, [r0, #100]	; 0x64
 800c810:	0019      	movs	r1, r3
 800c812:	81c2      	strh	r2, [r0, #14]
 800c814:	6103      	str	r3, [r0, #16]
 800c816:	6143      	str	r3, [r0, #20]
 800c818:	6183      	str	r3, [r0, #24]
 800c81a:	2208      	movs	r2, #8
 800c81c:	305c      	adds	r0, #92	; 0x5c
 800c81e:	f7fb fd43 	bl	80082a8 <memset>
 800c822:	4b05      	ldr	r3, [pc, #20]	; (800c838 <std+0x38>)
 800c824:	6224      	str	r4, [r4, #32]
 800c826:	6263      	str	r3, [r4, #36]	; 0x24
 800c828:	4b04      	ldr	r3, [pc, #16]	; (800c83c <std+0x3c>)
 800c82a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c82c:	4b04      	ldr	r3, [pc, #16]	; (800c840 <std+0x40>)
 800c82e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c830:	4b04      	ldr	r3, [pc, #16]	; (800c844 <std+0x44>)
 800c832:	6323      	str	r3, [r4, #48]	; 0x30
 800c834:	bd10      	pop	{r4, pc}
 800c836:	46c0      	nop			; (mov r8, r8)
 800c838:	0800cb89 	.word	0x0800cb89
 800c83c:	0800cbb1 	.word	0x0800cbb1
 800c840:	0800cbe9 	.word	0x0800cbe9
 800c844:	0800cc15 	.word	0x0800cc15

0800c848 <_cleanup_r>:
 800c848:	b510      	push	{r4, lr}
 800c84a:	4902      	ldr	r1, [pc, #8]	; (800c854 <_cleanup_r+0xc>)
 800c84c:	f000 f8ba 	bl	800c9c4 <_fwalk_reent>
 800c850:	bd10      	pop	{r4, pc}
 800c852:	46c0      	nop			; (mov r8, r8)
 800c854:	0800c781 	.word	0x0800c781

0800c858 <__sfmoreglue>:
 800c858:	b570      	push	{r4, r5, r6, lr}
 800c85a:	2568      	movs	r5, #104	; 0x68
 800c85c:	1e4a      	subs	r2, r1, #1
 800c85e:	4355      	muls	r5, r2
 800c860:	000e      	movs	r6, r1
 800c862:	0029      	movs	r1, r5
 800c864:	3174      	adds	r1, #116	; 0x74
 800c866:	f7ff fa37 	bl	800bcd8 <_malloc_r>
 800c86a:	1e04      	subs	r4, r0, #0
 800c86c:	d008      	beq.n	800c880 <__sfmoreglue+0x28>
 800c86e:	2100      	movs	r1, #0
 800c870:	002a      	movs	r2, r5
 800c872:	6001      	str	r1, [r0, #0]
 800c874:	6046      	str	r6, [r0, #4]
 800c876:	300c      	adds	r0, #12
 800c878:	60a0      	str	r0, [r4, #8]
 800c87a:	3268      	adds	r2, #104	; 0x68
 800c87c:	f7fb fd14 	bl	80082a8 <memset>
 800c880:	0020      	movs	r0, r4
 800c882:	bd70      	pop	{r4, r5, r6, pc}

0800c884 <__sfp_lock_acquire>:
 800c884:	b510      	push	{r4, lr}
 800c886:	4802      	ldr	r0, [pc, #8]	; (800c890 <__sfp_lock_acquire+0xc>)
 800c888:	f000 f8bd 	bl	800ca06 <__retarget_lock_acquire_recursive>
 800c88c:	bd10      	pop	{r4, pc}
 800c88e:	46c0      	nop			; (mov r8, r8)
 800c890:	20000481 	.word	0x20000481

0800c894 <__sfp_lock_release>:
 800c894:	b510      	push	{r4, lr}
 800c896:	4802      	ldr	r0, [pc, #8]	; (800c8a0 <__sfp_lock_release+0xc>)
 800c898:	f000 f8b6 	bl	800ca08 <__retarget_lock_release_recursive>
 800c89c:	bd10      	pop	{r4, pc}
 800c89e:	46c0      	nop			; (mov r8, r8)
 800c8a0:	20000481 	.word	0x20000481

0800c8a4 <__sinit_lock_acquire>:
 800c8a4:	b510      	push	{r4, lr}
 800c8a6:	4802      	ldr	r0, [pc, #8]	; (800c8b0 <__sinit_lock_acquire+0xc>)
 800c8a8:	f000 f8ad 	bl	800ca06 <__retarget_lock_acquire_recursive>
 800c8ac:	bd10      	pop	{r4, pc}
 800c8ae:	46c0      	nop			; (mov r8, r8)
 800c8b0:	20000482 	.word	0x20000482

0800c8b4 <__sinit_lock_release>:
 800c8b4:	b510      	push	{r4, lr}
 800c8b6:	4802      	ldr	r0, [pc, #8]	; (800c8c0 <__sinit_lock_release+0xc>)
 800c8b8:	f000 f8a6 	bl	800ca08 <__retarget_lock_release_recursive>
 800c8bc:	bd10      	pop	{r4, pc}
 800c8be:	46c0      	nop			; (mov r8, r8)
 800c8c0:	20000482 	.word	0x20000482

0800c8c4 <__sinit>:
 800c8c4:	b513      	push	{r0, r1, r4, lr}
 800c8c6:	0004      	movs	r4, r0
 800c8c8:	f7ff ffec 	bl	800c8a4 <__sinit_lock_acquire>
 800c8cc:	69a3      	ldr	r3, [r4, #24]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d002      	beq.n	800c8d8 <__sinit+0x14>
 800c8d2:	f7ff ffef 	bl	800c8b4 <__sinit_lock_release>
 800c8d6:	bd13      	pop	{r0, r1, r4, pc}
 800c8d8:	64a3      	str	r3, [r4, #72]	; 0x48
 800c8da:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c8dc:	6523      	str	r3, [r4, #80]	; 0x50
 800c8de:	4b13      	ldr	r3, [pc, #76]	; (800c92c <__sinit+0x68>)
 800c8e0:	4a13      	ldr	r2, [pc, #76]	; (800c930 <__sinit+0x6c>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c8e6:	9301      	str	r3, [sp, #4]
 800c8e8:	42a3      	cmp	r3, r4
 800c8ea:	d101      	bne.n	800c8f0 <__sinit+0x2c>
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	61a3      	str	r3, [r4, #24]
 800c8f0:	0020      	movs	r0, r4
 800c8f2:	f000 f81f 	bl	800c934 <__sfp>
 800c8f6:	6060      	str	r0, [r4, #4]
 800c8f8:	0020      	movs	r0, r4
 800c8fa:	f000 f81b 	bl	800c934 <__sfp>
 800c8fe:	60a0      	str	r0, [r4, #8]
 800c900:	0020      	movs	r0, r4
 800c902:	f000 f817 	bl	800c934 <__sfp>
 800c906:	2200      	movs	r2, #0
 800c908:	2104      	movs	r1, #4
 800c90a:	60e0      	str	r0, [r4, #12]
 800c90c:	6860      	ldr	r0, [r4, #4]
 800c90e:	f7ff ff77 	bl	800c800 <std>
 800c912:	2201      	movs	r2, #1
 800c914:	2109      	movs	r1, #9
 800c916:	68a0      	ldr	r0, [r4, #8]
 800c918:	f7ff ff72 	bl	800c800 <std>
 800c91c:	2202      	movs	r2, #2
 800c91e:	2112      	movs	r1, #18
 800c920:	68e0      	ldr	r0, [r4, #12]
 800c922:	f7ff ff6d 	bl	800c800 <std>
 800c926:	2301      	movs	r3, #1
 800c928:	61a3      	str	r3, [r4, #24]
 800c92a:	e7d2      	b.n	800c8d2 <__sinit+0xe>
 800c92c:	0800d018 	.word	0x0800d018
 800c930:	0800c849 	.word	0x0800c849

0800c934 <__sfp>:
 800c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c936:	0007      	movs	r7, r0
 800c938:	f7ff ffa4 	bl	800c884 <__sfp_lock_acquire>
 800c93c:	4b1f      	ldr	r3, [pc, #124]	; (800c9bc <__sfp+0x88>)
 800c93e:	681e      	ldr	r6, [r3, #0]
 800c940:	69b3      	ldr	r3, [r6, #24]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d102      	bne.n	800c94c <__sfp+0x18>
 800c946:	0030      	movs	r0, r6
 800c948:	f7ff ffbc 	bl	800c8c4 <__sinit>
 800c94c:	3648      	adds	r6, #72	; 0x48
 800c94e:	68b4      	ldr	r4, [r6, #8]
 800c950:	6873      	ldr	r3, [r6, #4]
 800c952:	3b01      	subs	r3, #1
 800c954:	d504      	bpl.n	800c960 <__sfp+0x2c>
 800c956:	6833      	ldr	r3, [r6, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d022      	beq.n	800c9a2 <__sfp+0x6e>
 800c95c:	6836      	ldr	r6, [r6, #0]
 800c95e:	e7f6      	b.n	800c94e <__sfp+0x1a>
 800c960:	220c      	movs	r2, #12
 800c962:	5ea5      	ldrsh	r5, [r4, r2]
 800c964:	2d00      	cmp	r5, #0
 800c966:	d11a      	bne.n	800c99e <__sfp+0x6a>
 800c968:	0020      	movs	r0, r4
 800c96a:	4b15      	ldr	r3, [pc, #84]	; (800c9c0 <__sfp+0x8c>)
 800c96c:	3058      	adds	r0, #88	; 0x58
 800c96e:	60e3      	str	r3, [r4, #12]
 800c970:	6665      	str	r5, [r4, #100]	; 0x64
 800c972:	f000 f847 	bl	800ca04 <__retarget_lock_init_recursive>
 800c976:	f7ff ff8d 	bl	800c894 <__sfp_lock_release>
 800c97a:	0020      	movs	r0, r4
 800c97c:	2208      	movs	r2, #8
 800c97e:	0029      	movs	r1, r5
 800c980:	6025      	str	r5, [r4, #0]
 800c982:	60a5      	str	r5, [r4, #8]
 800c984:	6065      	str	r5, [r4, #4]
 800c986:	6125      	str	r5, [r4, #16]
 800c988:	6165      	str	r5, [r4, #20]
 800c98a:	61a5      	str	r5, [r4, #24]
 800c98c:	305c      	adds	r0, #92	; 0x5c
 800c98e:	f7fb fc8b 	bl	80082a8 <memset>
 800c992:	6365      	str	r5, [r4, #52]	; 0x34
 800c994:	63a5      	str	r5, [r4, #56]	; 0x38
 800c996:	64a5      	str	r5, [r4, #72]	; 0x48
 800c998:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c99a:	0020      	movs	r0, r4
 800c99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c99e:	3468      	adds	r4, #104	; 0x68
 800c9a0:	e7d7      	b.n	800c952 <__sfp+0x1e>
 800c9a2:	2104      	movs	r1, #4
 800c9a4:	0038      	movs	r0, r7
 800c9a6:	f7ff ff57 	bl	800c858 <__sfmoreglue>
 800c9aa:	1e04      	subs	r4, r0, #0
 800c9ac:	6030      	str	r0, [r6, #0]
 800c9ae:	d1d5      	bne.n	800c95c <__sfp+0x28>
 800c9b0:	f7ff ff70 	bl	800c894 <__sfp_lock_release>
 800c9b4:	230c      	movs	r3, #12
 800c9b6:	603b      	str	r3, [r7, #0]
 800c9b8:	e7ef      	b.n	800c99a <__sfp+0x66>
 800c9ba:	46c0      	nop			; (mov r8, r8)
 800c9bc:	0800d018 	.word	0x0800d018
 800c9c0:	ffff0001 	.word	0xffff0001

0800c9c4 <_fwalk_reent>:
 800c9c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9c6:	0004      	movs	r4, r0
 800c9c8:	0006      	movs	r6, r0
 800c9ca:	2700      	movs	r7, #0
 800c9cc:	9101      	str	r1, [sp, #4]
 800c9ce:	3448      	adds	r4, #72	; 0x48
 800c9d0:	6863      	ldr	r3, [r4, #4]
 800c9d2:	68a5      	ldr	r5, [r4, #8]
 800c9d4:	9300      	str	r3, [sp, #0]
 800c9d6:	9b00      	ldr	r3, [sp, #0]
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	9300      	str	r3, [sp, #0]
 800c9dc:	d504      	bpl.n	800c9e8 <_fwalk_reent+0x24>
 800c9de:	6824      	ldr	r4, [r4, #0]
 800c9e0:	2c00      	cmp	r4, #0
 800c9e2:	d1f5      	bne.n	800c9d0 <_fwalk_reent+0xc>
 800c9e4:	0038      	movs	r0, r7
 800c9e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c9e8:	89ab      	ldrh	r3, [r5, #12]
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d908      	bls.n	800ca00 <_fwalk_reent+0x3c>
 800c9ee:	220e      	movs	r2, #14
 800c9f0:	5eab      	ldrsh	r3, [r5, r2]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	d004      	beq.n	800ca00 <_fwalk_reent+0x3c>
 800c9f6:	0029      	movs	r1, r5
 800c9f8:	0030      	movs	r0, r6
 800c9fa:	9b01      	ldr	r3, [sp, #4]
 800c9fc:	4798      	blx	r3
 800c9fe:	4307      	orrs	r7, r0
 800ca00:	3568      	adds	r5, #104	; 0x68
 800ca02:	e7e8      	b.n	800c9d6 <_fwalk_reent+0x12>

0800ca04 <__retarget_lock_init_recursive>:
 800ca04:	4770      	bx	lr

0800ca06 <__retarget_lock_acquire_recursive>:
 800ca06:	4770      	bx	lr

0800ca08 <__retarget_lock_release_recursive>:
 800ca08:	4770      	bx	lr
	...

0800ca0c <__swhatbuf_r>:
 800ca0c:	b570      	push	{r4, r5, r6, lr}
 800ca0e:	000e      	movs	r6, r1
 800ca10:	001d      	movs	r5, r3
 800ca12:	230e      	movs	r3, #14
 800ca14:	5ec9      	ldrsh	r1, [r1, r3]
 800ca16:	0014      	movs	r4, r2
 800ca18:	b096      	sub	sp, #88	; 0x58
 800ca1a:	2900      	cmp	r1, #0
 800ca1c:	da08      	bge.n	800ca30 <__swhatbuf_r+0x24>
 800ca1e:	220c      	movs	r2, #12
 800ca20:	5eb3      	ldrsh	r3, [r6, r2]
 800ca22:	2200      	movs	r2, #0
 800ca24:	602a      	str	r2, [r5, #0]
 800ca26:	061b      	lsls	r3, r3, #24
 800ca28:	d411      	bmi.n	800ca4e <__swhatbuf_r+0x42>
 800ca2a:	2380      	movs	r3, #128	; 0x80
 800ca2c:	00db      	lsls	r3, r3, #3
 800ca2e:	e00f      	b.n	800ca50 <__swhatbuf_r+0x44>
 800ca30:	466a      	mov	r2, sp
 800ca32:	f000 f91b 	bl	800cc6c <_fstat_r>
 800ca36:	2800      	cmp	r0, #0
 800ca38:	dbf1      	blt.n	800ca1e <__swhatbuf_r+0x12>
 800ca3a:	23f0      	movs	r3, #240	; 0xf0
 800ca3c:	9901      	ldr	r1, [sp, #4]
 800ca3e:	021b      	lsls	r3, r3, #8
 800ca40:	4019      	ands	r1, r3
 800ca42:	4b05      	ldr	r3, [pc, #20]	; (800ca58 <__swhatbuf_r+0x4c>)
 800ca44:	18c9      	adds	r1, r1, r3
 800ca46:	424b      	negs	r3, r1
 800ca48:	4159      	adcs	r1, r3
 800ca4a:	6029      	str	r1, [r5, #0]
 800ca4c:	e7ed      	b.n	800ca2a <__swhatbuf_r+0x1e>
 800ca4e:	2340      	movs	r3, #64	; 0x40
 800ca50:	2000      	movs	r0, #0
 800ca52:	6023      	str	r3, [r4, #0]
 800ca54:	b016      	add	sp, #88	; 0x58
 800ca56:	bd70      	pop	{r4, r5, r6, pc}
 800ca58:	ffffe000 	.word	0xffffe000

0800ca5c <__smakebuf_r>:
 800ca5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca5e:	2602      	movs	r6, #2
 800ca60:	898b      	ldrh	r3, [r1, #12]
 800ca62:	0005      	movs	r5, r0
 800ca64:	000c      	movs	r4, r1
 800ca66:	4233      	tst	r3, r6
 800ca68:	d006      	beq.n	800ca78 <__smakebuf_r+0x1c>
 800ca6a:	0023      	movs	r3, r4
 800ca6c:	3347      	adds	r3, #71	; 0x47
 800ca6e:	6023      	str	r3, [r4, #0]
 800ca70:	6123      	str	r3, [r4, #16]
 800ca72:	2301      	movs	r3, #1
 800ca74:	6163      	str	r3, [r4, #20]
 800ca76:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ca78:	466a      	mov	r2, sp
 800ca7a:	ab01      	add	r3, sp, #4
 800ca7c:	f7ff ffc6 	bl	800ca0c <__swhatbuf_r>
 800ca80:	9900      	ldr	r1, [sp, #0]
 800ca82:	0007      	movs	r7, r0
 800ca84:	0028      	movs	r0, r5
 800ca86:	f7ff f927 	bl	800bcd8 <_malloc_r>
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	d108      	bne.n	800caa0 <__smakebuf_r+0x44>
 800ca8e:	220c      	movs	r2, #12
 800ca90:	5ea3      	ldrsh	r3, [r4, r2]
 800ca92:	059a      	lsls	r2, r3, #22
 800ca94:	d4ef      	bmi.n	800ca76 <__smakebuf_r+0x1a>
 800ca96:	2203      	movs	r2, #3
 800ca98:	4393      	bics	r3, r2
 800ca9a:	431e      	orrs	r6, r3
 800ca9c:	81a6      	strh	r6, [r4, #12]
 800ca9e:	e7e4      	b.n	800ca6a <__smakebuf_r+0xe>
 800caa0:	4b0f      	ldr	r3, [pc, #60]	; (800cae0 <__smakebuf_r+0x84>)
 800caa2:	62ab      	str	r3, [r5, #40]	; 0x28
 800caa4:	2380      	movs	r3, #128	; 0x80
 800caa6:	89a2      	ldrh	r2, [r4, #12]
 800caa8:	6020      	str	r0, [r4, #0]
 800caaa:	4313      	orrs	r3, r2
 800caac:	81a3      	strh	r3, [r4, #12]
 800caae:	9b00      	ldr	r3, [sp, #0]
 800cab0:	6120      	str	r0, [r4, #16]
 800cab2:	6163      	str	r3, [r4, #20]
 800cab4:	9b01      	ldr	r3, [sp, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d00d      	beq.n	800cad6 <__smakebuf_r+0x7a>
 800caba:	0028      	movs	r0, r5
 800cabc:	230e      	movs	r3, #14
 800cabe:	5ee1      	ldrsh	r1, [r4, r3]
 800cac0:	f000 f8e6 	bl	800cc90 <_isatty_r>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	d006      	beq.n	800cad6 <__smakebuf_r+0x7a>
 800cac8:	2203      	movs	r2, #3
 800caca:	89a3      	ldrh	r3, [r4, #12]
 800cacc:	4393      	bics	r3, r2
 800cace:	001a      	movs	r2, r3
 800cad0:	2301      	movs	r3, #1
 800cad2:	4313      	orrs	r3, r2
 800cad4:	81a3      	strh	r3, [r4, #12]
 800cad6:	89a0      	ldrh	r0, [r4, #12]
 800cad8:	4307      	orrs	r7, r0
 800cada:	81a7      	strh	r7, [r4, #12]
 800cadc:	e7cb      	b.n	800ca76 <__smakebuf_r+0x1a>
 800cade:	46c0      	nop			; (mov r8, r8)
 800cae0:	0800c849 	.word	0x0800c849

0800cae4 <_malloc_usable_size_r>:
 800cae4:	1f0b      	subs	r3, r1, #4
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	1f18      	subs	r0, r3, #4
 800caea:	2b00      	cmp	r3, #0
 800caec:	da01      	bge.n	800caf2 <_malloc_usable_size_r+0xe>
 800caee:	580b      	ldr	r3, [r1, r0]
 800caf0:	18c0      	adds	r0, r0, r3
 800caf2:	4770      	bx	lr

0800caf4 <_raise_r>:
 800caf4:	b570      	push	{r4, r5, r6, lr}
 800caf6:	0004      	movs	r4, r0
 800caf8:	000d      	movs	r5, r1
 800cafa:	291f      	cmp	r1, #31
 800cafc:	d904      	bls.n	800cb08 <_raise_r+0x14>
 800cafe:	2316      	movs	r3, #22
 800cb00:	6003      	str	r3, [r0, #0]
 800cb02:	2001      	movs	r0, #1
 800cb04:	4240      	negs	r0, r0
 800cb06:	bd70      	pop	{r4, r5, r6, pc}
 800cb08:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d004      	beq.n	800cb18 <_raise_r+0x24>
 800cb0e:	008a      	lsls	r2, r1, #2
 800cb10:	189b      	adds	r3, r3, r2
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	2a00      	cmp	r2, #0
 800cb16:	d108      	bne.n	800cb2a <_raise_r+0x36>
 800cb18:	0020      	movs	r0, r4
 800cb1a:	f000 f831 	bl	800cb80 <_getpid_r>
 800cb1e:	002a      	movs	r2, r5
 800cb20:	0001      	movs	r1, r0
 800cb22:	0020      	movs	r0, r4
 800cb24:	f000 f81a 	bl	800cb5c <_kill_r>
 800cb28:	e7ed      	b.n	800cb06 <_raise_r+0x12>
 800cb2a:	2000      	movs	r0, #0
 800cb2c:	2a01      	cmp	r2, #1
 800cb2e:	d0ea      	beq.n	800cb06 <_raise_r+0x12>
 800cb30:	1c51      	adds	r1, r2, #1
 800cb32:	d103      	bne.n	800cb3c <_raise_r+0x48>
 800cb34:	2316      	movs	r3, #22
 800cb36:	3001      	adds	r0, #1
 800cb38:	6023      	str	r3, [r4, #0]
 800cb3a:	e7e4      	b.n	800cb06 <_raise_r+0x12>
 800cb3c:	2400      	movs	r4, #0
 800cb3e:	0028      	movs	r0, r5
 800cb40:	601c      	str	r4, [r3, #0]
 800cb42:	4790      	blx	r2
 800cb44:	0020      	movs	r0, r4
 800cb46:	e7de      	b.n	800cb06 <_raise_r+0x12>

0800cb48 <raise>:
 800cb48:	b510      	push	{r4, lr}
 800cb4a:	4b03      	ldr	r3, [pc, #12]	; (800cb58 <raise+0x10>)
 800cb4c:	0001      	movs	r1, r0
 800cb4e:	6818      	ldr	r0, [r3, #0]
 800cb50:	f7ff ffd0 	bl	800caf4 <_raise_r>
 800cb54:	bd10      	pop	{r4, pc}
 800cb56:	46c0      	nop			; (mov r8, r8)
 800cb58:	20000030 	.word	0x20000030

0800cb5c <_kill_r>:
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	b570      	push	{r4, r5, r6, lr}
 800cb60:	4d06      	ldr	r5, [pc, #24]	; (800cb7c <_kill_r+0x20>)
 800cb62:	0004      	movs	r4, r0
 800cb64:	0008      	movs	r0, r1
 800cb66:	0011      	movs	r1, r2
 800cb68:	602b      	str	r3, [r5, #0]
 800cb6a:	f7f7 fcfb 	bl	8004564 <_kill>
 800cb6e:	1c43      	adds	r3, r0, #1
 800cb70:	d103      	bne.n	800cb7a <_kill_r+0x1e>
 800cb72:	682b      	ldr	r3, [r5, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d000      	beq.n	800cb7a <_kill_r+0x1e>
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}
 800cb7c:	2000047c 	.word	0x2000047c

0800cb80 <_getpid_r>:
 800cb80:	b510      	push	{r4, lr}
 800cb82:	f7f7 fce9 	bl	8004558 <_getpid>
 800cb86:	bd10      	pop	{r4, pc}

0800cb88 <__sread>:
 800cb88:	b570      	push	{r4, r5, r6, lr}
 800cb8a:	000c      	movs	r4, r1
 800cb8c:	250e      	movs	r5, #14
 800cb8e:	5f49      	ldrsh	r1, [r1, r5]
 800cb90:	f000 f8a4 	bl	800ccdc <_read_r>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	db03      	blt.n	800cba0 <__sread+0x18>
 800cb98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cb9a:	181b      	adds	r3, r3, r0
 800cb9c:	6563      	str	r3, [r4, #84]	; 0x54
 800cb9e:	bd70      	pop	{r4, r5, r6, pc}
 800cba0:	89a3      	ldrh	r3, [r4, #12]
 800cba2:	4a02      	ldr	r2, [pc, #8]	; (800cbac <__sread+0x24>)
 800cba4:	4013      	ands	r3, r2
 800cba6:	81a3      	strh	r3, [r4, #12]
 800cba8:	e7f9      	b.n	800cb9e <__sread+0x16>
 800cbaa:	46c0      	nop			; (mov r8, r8)
 800cbac:	ffffefff 	.word	0xffffefff

0800cbb0 <__swrite>:
 800cbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb2:	001f      	movs	r7, r3
 800cbb4:	898b      	ldrh	r3, [r1, #12]
 800cbb6:	0005      	movs	r5, r0
 800cbb8:	000c      	movs	r4, r1
 800cbba:	0016      	movs	r6, r2
 800cbbc:	05db      	lsls	r3, r3, #23
 800cbbe:	d505      	bpl.n	800cbcc <__swrite+0x1c>
 800cbc0:	230e      	movs	r3, #14
 800cbc2:	5ec9      	ldrsh	r1, [r1, r3]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	2302      	movs	r3, #2
 800cbc8:	f000 f874 	bl	800ccb4 <_lseek_r>
 800cbcc:	89a3      	ldrh	r3, [r4, #12]
 800cbce:	4a05      	ldr	r2, [pc, #20]	; (800cbe4 <__swrite+0x34>)
 800cbd0:	0028      	movs	r0, r5
 800cbd2:	4013      	ands	r3, r2
 800cbd4:	81a3      	strh	r3, [r4, #12]
 800cbd6:	0032      	movs	r2, r6
 800cbd8:	230e      	movs	r3, #14
 800cbda:	5ee1      	ldrsh	r1, [r4, r3]
 800cbdc:	003b      	movs	r3, r7
 800cbde:	f000 f81f 	bl	800cc20 <_write_r>
 800cbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbe4:	ffffefff 	.word	0xffffefff

0800cbe8 <__sseek>:
 800cbe8:	b570      	push	{r4, r5, r6, lr}
 800cbea:	000c      	movs	r4, r1
 800cbec:	250e      	movs	r5, #14
 800cbee:	5f49      	ldrsh	r1, [r1, r5]
 800cbf0:	f000 f860 	bl	800ccb4 <_lseek_r>
 800cbf4:	89a3      	ldrh	r3, [r4, #12]
 800cbf6:	1c42      	adds	r2, r0, #1
 800cbf8:	d103      	bne.n	800cc02 <__sseek+0x1a>
 800cbfa:	4a05      	ldr	r2, [pc, #20]	; (800cc10 <__sseek+0x28>)
 800cbfc:	4013      	ands	r3, r2
 800cbfe:	81a3      	strh	r3, [r4, #12]
 800cc00:	bd70      	pop	{r4, r5, r6, pc}
 800cc02:	2280      	movs	r2, #128	; 0x80
 800cc04:	0152      	lsls	r2, r2, #5
 800cc06:	4313      	orrs	r3, r2
 800cc08:	81a3      	strh	r3, [r4, #12]
 800cc0a:	6560      	str	r0, [r4, #84]	; 0x54
 800cc0c:	e7f8      	b.n	800cc00 <__sseek+0x18>
 800cc0e:	46c0      	nop			; (mov r8, r8)
 800cc10:	ffffefff 	.word	0xffffefff

0800cc14 <__sclose>:
 800cc14:	b510      	push	{r4, lr}
 800cc16:	230e      	movs	r3, #14
 800cc18:	5ec9      	ldrsh	r1, [r1, r3]
 800cc1a:	f000 f815 	bl	800cc48 <_close_r>
 800cc1e:	bd10      	pop	{r4, pc}

0800cc20 <_write_r>:
 800cc20:	b570      	push	{r4, r5, r6, lr}
 800cc22:	0004      	movs	r4, r0
 800cc24:	0008      	movs	r0, r1
 800cc26:	0011      	movs	r1, r2
 800cc28:	001a      	movs	r2, r3
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	4d05      	ldr	r5, [pc, #20]	; (800cc44 <_write_r+0x24>)
 800cc2e:	602b      	str	r3, [r5, #0]
 800cc30:	f7f7 fcd1 	bl	80045d6 <_write>
 800cc34:	1c43      	adds	r3, r0, #1
 800cc36:	d103      	bne.n	800cc40 <_write_r+0x20>
 800cc38:	682b      	ldr	r3, [r5, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d000      	beq.n	800cc40 <_write_r+0x20>
 800cc3e:	6023      	str	r3, [r4, #0]
 800cc40:	bd70      	pop	{r4, r5, r6, pc}
 800cc42:	46c0      	nop			; (mov r8, r8)
 800cc44:	2000047c 	.word	0x2000047c

0800cc48 <_close_r>:
 800cc48:	2300      	movs	r3, #0
 800cc4a:	b570      	push	{r4, r5, r6, lr}
 800cc4c:	4d06      	ldr	r5, [pc, #24]	; (800cc68 <_close_r+0x20>)
 800cc4e:	0004      	movs	r4, r0
 800cc50:	0008      	movs	r0, r1
 800cc52:	602b      	str	r3, [r5, #0]
 800cc54:	f7f7 fcdb 	bl	800460e <_close>
 800cc58:	1c43      	adds	r3, r0, #1
 800cc5a:	d103      	bne.n	800cc64 <_close_r+0x1c>
 800cc5c:	682b      	ldr	r3, [r5, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d000      	beq.n	800cc64 <_close_r+0x1c>
 800cc62:	6023      	str	r3, [r4, #0]
 800cc64:	bd70      	pop	{r4, r5, r6, pc}
 800cc66:	46c0      	nop			; (mov r8, r8)
 800cc68:	2000047c 	.word	0x2000047c

0800cc6c <_fstat_r>:
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	b570      	push	{r4, r5, r6, lr}
 800cc70:	4d06      	ldr	r5, [pc, #24]	; (800cc8c <_fstat_r+0x20>)
 800cc72:	0004      	movs	r4, r0
 800cc74:	0008      	movs	r0, r1
 800cc76:	0011      	movs	r1, r2
 800cc78:	602b      	str	r3, [r5, #0]
 800cc7a:	f7f7 fcd2 	bl	8004622 <_fstat>
 800cc7e:	1c43      	adds	r3, r0, #1
 800cc80:	d103      	bne.n	800cc8a <_fstat_r+0x1e>
 800cc82:	682b      	ldr	r3, [r5, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d000      	beq.n	800cc8a <_fstat_r+0x1e>
 800cc88:	6023      	str	r3, [r4, #0]
 800cc8a:	bd70      	pop	{r4, r5, r6, pc}
 800cc8c:	2000047c 	.word	0x2000047c

0800cc90 <_isatty_r>:
 800cc90:	2300      	movs	r3, #0
 800cc92:	b570      	push	{r4, r5, r6, lr}
 800cc94:	4d06      	ldr	r5, [pc, #24]	; (800ccb0 <_isatty_r+0x20>)
 800cc96:	0004      	movs	r4, r0
 800cc98:	0008      	movs	r0, r1
 800cc9a:	602b      	str	r3, [r5, #0]
 800cc9c:	f7f7 fccf 	bl	800463e <_isatty>
 800cca0:	1c43      	adds	r3, r0, #1
 800cca2:	d103      	bne.n	800ccac <_isatty_r+0x1c>
 800cca4:	682b      	ldr	r3, [r5, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d000      	beq.n	800ccac <_isatty_r+0x1c>
 800ccaa:	6023      	str	r3, [r4, #0]
 800ccac:	bd70      	pop	{r4, r5, r6, pc}
 800ccae:	46c0      	nop			; (mov r8, r8)
 800ccb0:	2000047c 	.word	0x2000047c

0800ccb4 <_lseek_r>:
 800ccb4:	b570      	push	{r4, r5, r6, lr}
 800ccb6:	0004      	movs	r4, r0
 800ccb8:	0008      	movs	r0, r1
 800ccba:	0011      	movs	r1, r2
 800ccbc:	001a      	movs	r2, r3
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	4d05      	ldr	r5, [pc, #20]	; (800ccd8 <_lseek_r+0x24>)
 800ccc2:	602b      	str	r3, [r5, #0]
 800ccc4:	f7f7 fcc4 	bl	8004650 <_lseek>
 800ccc8:	1c43      	adds	r3, r0, #1
 800ccca:	d103      	bne.n	800ccd4 <_lseek_r+0x20>
 800cccc:	682b      	ldr	r3, [r5, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d000      	beq.n	800ccd4 <_lseek_r+0x20>
 800ccd2:	6023      	str	r3, [r4, #0]
 800ccd4:	bd70      	pop	{r4, r5, r6, pc}
 800ccd6:	46c0      	nop			; (mov r8, r8)
 800ccd8:	2000047c 	.word	0x2000047c

0800ccdc <_read_r>:
 800ccdc:	b570      	push	{r4, r5, r6, lr}
 800ccde:	0004      	movs	r4, r0
 800cce0:	0008      	movs	r0, r1
 800cce2:	0011      	movs	r1, r2
 800cce4:	001a      	movs	r2, r3
 800cce6:	2300      	movs	r3, #0
 800cce8:	4d05      	ldr	r5, [pc, #20]	; (800cd00 <_read_r+0x24>)
 800ccea:	602b      	str	r3, [r5, #0]
 800ccec:	f7f7 fc56 	bl	800459c <_read>
 800ccf0:	1c43      	adds	r3, r0, #1
 800ccf2:	d103      	bne.n	800ccfc <_read_r+0x20>
 800ccf4:	682b      	ldr	r3, [r5, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d000      	beq.n	800ccfc <_read_r+0x20>
 800ccfa:	6023      	str	r3, [r4, #0]
 800ccfc:	bd70      	pop	{r4, r5, r6, pc}
 800ccfe:	46c0      	nop			; (mov r8, r8)
 800cd00:	2000047c 	.word	0x2000047c

0800cd04 <_init>:
 800cd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd06:	46c0      	nop			; (mov r8, r8)
 800cd08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd0a:	bc08      	pop	{r3}
 800cd0c:	469e      	mov	lr, r3
 800cd0e:	4770      	bx	lr

0800cd10 <_fini>:
 800cd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd12:	46c0      	nop			; (mov r8, r8)
 800cd14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd16:	bc08      	pop	{r3}
 800cd18:	469e      	mov	lr, r3
 800cd1a:	4770      	bx	lr
