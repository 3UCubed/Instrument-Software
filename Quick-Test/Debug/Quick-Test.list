
Quick-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c978  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  0800ca38  0800ca38  0001ca38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d104  0800d104  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800d104  0800d104  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d104  0800d104  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d104  0800d104  0001d104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d108  0800d108  0001d108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800d10c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000204  0800d310  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  0800d310  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e377  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220a  00000000  00000000  0002e5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  000307b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  00031348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013280  00000000  00000000  00031df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc8a  00000000  00000000  00045078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e2a7  00000000  00000000  00054d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2fa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f38  00000000  00000000  000c2ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000204 	.word	0x20000204
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ca20 	.word	0x0800ca20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000208 	.word	0x20000208
 8000104:	0800ca20 	.word	0x0800ca20

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fb73 	bl	8001b28 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fac3 	bl	80019d8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb65 	bl	8001b28 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb5b 	bl	8001b28 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 faeb 	bl	8001a5c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fae1 	bl	8001a5c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 f927 	bl	8000704 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 f8b3 	bl	800062c <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f919 	bl	8000704 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f90f 	bl	8000704 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f8bf 	bl	8000678 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f8b5 	bl	8000678 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_f2uiz>:
 800051c:	219e      	movs	r1, #158	; 0x9e
 800051e:	b510      	push	{r4, lr}
 8000520:	05c9      	lsls	r1, r1, #23
 8000522:	1c04      	adds	r4, r0, #0
 8000524:	f7ff fff0 	bl	8000508 <__aeabi_fcmpge>
 8000528:	2800      	cmp	r0, #0
 800052a:	d103      	bne.n	8000534 <__aeabi_f2uiz+0x18>
 800052c:	1c20      	adds	r0, r4, #0
 800052e:	f000 fc01 	bl	8000d34 <__aeabi_f2iz>
 8000532:	bd10      	pop	{r4, pc}
 8000534:	219e      	movs	r1, #158	; 0x9e
 8000536:	1c20      	adds	r0, r4, #0
 8000538:	05c9      	lsls	r1, r1, #23
 800053a:	f000 fa4d 	bl	80009d8 <__aeabi_fsub>
 800053e:	f000 fbf9 	bl	8000d34 <__aeabi_f2iz>
 8000542:	2380      	movs	r3, #128	; 0x80
 8000544:	061b      	lsls	r3, r3, #24
 8000546:	469c      	mov	ip, r3
 8000548:	4460      	add	r0, ip
 800054a:	e7f2      	b.n	8000532 <__aeabi_f2uiz+0x16>

0800054c <__aeabi_d2uiz>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	2200      	movs	r2, #0
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <__aeabi_d2uiz+0x38>)
 8000552:	0004      	movs	r4, r0
 8000554:	000d      	movs	r5, r1
 8000556:	f7ff ff9d 	bl	8000494 <__aeabi_dcmpge>
 800055a:	2800      	cmp	r0, #0
 800055c:	d104      	bne.n	8000568 <__aeabi_d2uiz+0x1c>
 800055e:	0020      	movs	r0, r4
 8000560:	0029      	movs	r1, r5
 8000562:	f002 f961 	bl	8002828 <__aeabi_d2iz>
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_d2uiz+0x38>)
 800056a:	2200      	movs	r2, #0
 800056c:	0020      	movs	r0, r4
 800056e:	0029      	movs	r1, r5
 8000570:	f001 fdaa 	bl	80020c8 <__aeabi_dsub>
 8000574:	f002 f958 	bl	8002828 <__aeabi_d2iz>
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	061b      	lsls	r3, r3, #24
 800057c:	469c      	mov	ip, r3
 800057e:	4460      	add	r0, ip
 8000580:	e7f1      	b.n	8000566 <__aeabi_d2uiz+0x1a>
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41e00000 	.word	0x41e00000

08000588 <__aeabi_d2lz>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	0005      	movs	r5, r0
 800058c:	000c      	movs	r4, r1
 800058e:	2200      	movs	r2, #0
 8000590:	2300      	movs	r3, #0
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f7ff ff5f 	bl	8000458 <__aeabi_dcmplt>
 800059a:	2800      	cmp	r0, #0
 800059c:	d108      	bne.n	80005b0 <__aeabi_d2lz+0x28>
 800059e:	0028      	movs	r0, r5
 80005a0:	0021      	movs	r1, r4
 80005a2:	f000 f80f 	bl	80005c4 <__aeabi_d2ulz>
 80005a6:	0002      	movs	r2, r0
 80005a8:	000b      	movs	r3, r1
 80005aa:	0010      	movs	r0, r2
 80005ac:	0019      	movs	r1, r3
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	061b      	lsls	r3, r3, #24
 80005b4:	18e1      	adds	r1, r4, r3
 80005b6:	0028      	movs	r0, r5
 80005b8:	f000 f804 	bl	80005c4 <__aeabi_d2ulz>
 80005bc:	2300      	movs	r3, #0
 80005be:	4242      	negs	r2, r0
 80005c0:	418b      	sbcs	r3, r1
 80005c2:	e7f2      	b.n	80005aa <__aeabi_d2lz+0x22>

080005c4 <__aeabi_d2ulz>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	2200      	movs	r2, #0
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <__aeabi_d2ulz+0x34>)
 80005ca:	000d      	movs	r5, r1
 80005cc:	0004      	movs	r4, r0
 80005ce:	f001 fb0f 	bl	8001bf0 <__aeabi_dmul>
 80005d2:	f7ff ffbb 	bl	800054c <__aeabi_d2uiz>
 80005d6:	0006      	movs	r6, r0
 80005d8:	f002 f98c 	bl	80028f4 <__aeabi_ui2d>
 80005dc:	2200      	movs	r2, #0
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <__aeabi_d2ulz+0x38>)
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dmul>
 80005e4:	0002      	movs	r2, r0
 80005e6:	000b      	movs	r3, r1
 80005e8:	0020      	movs	r0, r4
 80005ea:	0029      	movs	r1, r5
 80005ec:	f001 fd6c 	bl	80020c8 <__aeabi_dsub>
 80005f0:	f7ff ffac 	bl	800054c <__aeabi_d2uiz>
 80005f4:	0031      	movs	r1, r6
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	3df00000 	.word	0x3df00000
 80005fc:	41f00000 	.word	0x41f00000

08000600 <__aeabi_l2d>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	0006      	movs	r6, r0
 8000604:	0008      	movs	r0, r1
 8000606:	f002 f945 	bl	8002894 <__aeabi_i2d>
 800060a:	2200      	movs	r2, #0
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_l2d+0x28>)
 800060e:	f001 faef 	bl	8001bf0 <__aeabi_dmul>
 8000612:	000d      	movs	r5, r1
 8000614:	0004      	movs	r4, r0
 8000616:	0030      	movs	r0, r6
 8000618:	f002 f96c 	bl	80028f4 <__aeabi_ui2d>
 800061c:	002b      	movs	r3, r5
 800061e:	0022      	movs	r2, r4
 8000620:	f000 fba8 	bl	8000d74 <__aeabi_dadd>
 8000624:	bd70      	pop	{r4, r5, r6, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41f00000 	.word	0x41f00000

0800062c <__eqsf2>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	0042      	lsls	r2, r0, #1
 8000630:	0245      	lsls	r5, r0, #9
 8000632:	024e      	lsls	r6, r1, #9
 8000634:	004c      	lsls	r4, r1, #1
 8000636:	0fc3      	lsrs	r3, r0, #31
 8000638:	0a6d      	lsrs	r5, r5, #9
 800063a:	2001      	movs	r0, #1
 800063c:	0e12      	lsrs	r2, r2, #24
 800063e:	0a76      	lsrs	r6, r6, #9
 8000640:	0e24      	lsrs	r4, r4, #24
 8000642:	0fc9      	lsrs	r1, r1, #31
 8000644:	2aff      	cmp	r2, #255	; 0xff
 8000646:	d006      	beq.n	8000656 <__eqsf2+0x2a>
 8000648:	2cff      	cmp	r4, #255	; 0xff
 800064a:	d003      	beq.n	8000654 <__eqsf2+0x28>
 800064c:	42a2      	cmp	r2, r4
 800064e:	d101      	bne.n	8000654 <__eqsf2+0x28>
 8000650:	42b5      	cmp	r5, r6
 8000652:	d006      	beq.n	8000662 <__eqsf2+0x36>
 8000654:	bd70      	pop	{r4, r5, r6, pc}
 8000656:	2d00      	cmp	r5, #0
 8000658:	d1fc      	bne.n	8000654 <__eqsf2+0x28>
 800065a:	2cff      	cmp	r4, #255	; 0xff
 800065c:	d1fa      	bne.n	8000654 <__eqsf2+0x28>
 800065e:	2e00      	cmp	r6, #0
 8000660:	d1f8      	bne.n	8000654 <__eqsf2+0x28>
 8000662:	428b      	cmp	r3, r1
 8000664:	d006      	beq.n	8000674 <__eqsf2+0x48>
 8000666:	2001      	movs	r0, #1
 8000668:	2a00      	cmp	r2, #0
 800066a:	d1f3      	bne.n	8000654 <__eqsf2+0x28>
 800066c:	0028      	movs	r0, r5
 800066e:	1e43      	subs	r3, r0, #1
 8000670:	4198      	sbcs	r0, r3
 8000672:	e7ef      	b.n	8000654 <__eqsf2+0x28>
 8000674:	2000      	movs	r0, #0
 8000676:	e7ed      	b.n	8000654 <__eqsf2+0x28>

08000678 <__gesf2>:
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	0042      	lsls	r2, r0, #1
 800067c:	0245      	lsls	r5, r0, #9
 800067e:	024e      	lsls	r6, r1, #9
 8000680:	004c      	lsls	r4, r1, #1
 8000682:	0fc3      	lsrs	r3, r0, #31
 8000684:	0a6d      	lsrs	r5, r5, #9
 8000686:	0e12      	lsrs	r2, r2, #24
 8000688:	0a76      	lsrs	r6, r6, #9
 800068a:	0e24      	lsrs	r4, r4, #24
 800068c:	0fc8      	lsrs	r0, r1, #31
 800068e:	2aff      	cmp	r2, #255	; 0xff
 8000690:	d01b      	beq.n	80006ca <__gesf2+0x52>
 8000692:	2cff      	cmp	r4, #255	; 0xff
 8000694:	d00e      	beq.n	80006b4 <__gesf2+0x3c>
 8000696:	2a00      	cmp	r2, #0
 8000698:	d11b      	bne.n	80006d2 <__gesf2+0x5a>
 800069a:	2c00      	cmp	r4, #0
 800069c:	d101      	bne.n	80006a2 <__gesf2+0x2a>
 800069e:	2e00      	cmp	r6, #0
 80006a0:	d01c      	beq.n	80006dc <__gesf2+0x64>
 80006a2:	2d00      	cmp	r5, #0
 80006a4:	d00c      	beq.n	80006c0 <__gesf2+0x48>
 80006a6:	4283      	cmp	r3, r0
 80006a8:	d01c      	beq.n	80006e4 <__gesf2+0x6c>
 80006aa:	2102      	movs	r1, #2
 80006ac:	1e58      	subs	r0, r3, #1
 80006ae:	4008      	ands	r0, r1
 80006b0:	3801      	subs	r0, #1
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	2e00      	cmp	r6, #0
 80006b6:	d122      	bne.n	80006fe <__gesf2+0x86>
 80006b8:	2a00      	cmp	r2, #0
 80006ba:	d1f4      	bne.n	80006a6 <__gesf2+0x2e>
 80006bc:	2d00      	cmp	r5, #0
 80006be:	d1f2      	bne.n	80006a6 <__gesf2+0x2e>
 80006c0:	2800      	cmp	r0, #0
 80006c2:	d1f6      	bne.n	80006b2 <__gesf2+0x3a>
 80006c4:	2001      	movs	r0, #1
 80006c6:	4240      	negs	r0, r0
 80006c8:	e7f3      	b.n	80006b2 <__gesf2+0x3a>
 80006ca:	2d00      	cmp	r5, #0
 80006cc:	d117      	bne.n	80006fe <__gesf2+0x86>
 80006ce:	2cff      	cmp	r4, #255	; 0xff
 80006d0:	d0f0      	beq.n	80006b4 <__gesf2+0x3c>
 80006d2:	2c00      	cmp	r4, #0
 80006d4:	d1e7      	bne.n	80006a6 <__gesf2+0x2e>
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d1e5      	bne.n	80006a6 <__gesf2+0x2e>
 80006da:	e7e6      	b.n	80006aa <__gesf2+0x32>
 80006dc:	2000      	movs	r0, #0
 80006de:	2d00      	cmp	r5, #0
 80006e0:	d0e7      	beq.n	80006b2 <__gesf2+0x3a>
 80006e2:	e7e2      	b.n	80006aa <__gesf2+0x32>
 80006e4:	42a2      	cmp	r2, r4
 80006e6:	dc05      	bgt.n	80006f4 <__gesf2+0x7c>
 80006e8:	dbea      	blt.n	80006c0 <__gesf2+0x48>
 80006ea:	42b5      	cmp	r5, r6
 80006ec:	d802      	bhi.n	80006f4 <__gesf2+0x7c>
 80006ee:	d3e7      	bcc.n	80006c0 <__gesf2+0x48>
 80006f0:	2000      	movs	r0, #0
 80006f2:	e7de      	b.n	80006b2 <__gesf2+0x3a>
 80006f4:	4243      	negs	r3, r0
 80006f6:	4158      	adcs	r0, r3
 80006f8:	0040      	lsls	r0, r0, #1
 80006fa:	3801      	subs	r0, #1
 80006fc:	e7d9      	b.n	80006b2 <__gesf2+0x3a>
 80006fe:	2002      	movs	r0, #2
 8000700:	4240      	negs	r0, r0
 8000702:	e7d6      	b.n	80006b2 <__gesf2+0x3a>

08000704 <__lesf2>:
 8000704:	b570      	push	{r4, r5, r6, lr}
 8000706:	0042      	lsls	r2, r0, #1
 8000708:	0245      	lsls	r5, r0, #9
 800070a:	024e      	lsls	r6, r1, #9
 800070c:	004c      	lsls	r4, r1, #1
 800070e:	0fc3      	lsrs	r3, r0, #31
 8000710:	0a6d      	lsrs	r5, r5, #9
 8000712:	0e12      	lsrs	r2, r2, #24
 8000714:	0a76      	lsrs	r6, r6, #9
 8000716:	0e24      	lsrs	r4, r4, #24
 8000718:	0fc8      	lsrs	r0, r1, #31
 800071a:	2aff      	cmp	r2, #255	; 0xff
 800071c:	d00b      	beq.n	8000736 <__lesf2+0x32>
 800071e:	2cff      	cmp	r4, #255	; 0xff
 8000720:	d00d      	beq.n	800073e <__lesf2+0x3a>
 8000722:	2a00      	cmp	r2, #0
 8000724:	d11f      	bne.n	8000766 <__lesf2+0x62>
 8000726:	2c00      	cmp	r4, #0
 8000728:	d116      	bne.n	8000758 <__lesf2+0x54>
 800072a:	2e00      	cmp	r6, #0
 800072c:	d114      	bne.n	8000758 <__lesf2+0x54>
 800072e:	2000      	movs	r0, #0
 8000730:	2d00      	cmp	r5, #0
 8000732:	d010      	beq.n	8000756 <__lesf2+0x52>
 8000734:	e009      	b.n	800074a <__lesf2+0x46>
 8000736:	2d00      	cmp	r5, #0
 8000738:	d10c      	bne.n	8000754 <__lesf2+0x50>
 800073a:	2cff      	cmp	r4, #255	; 0xff
 800073c:	d113      	bne.n	8000766 <__lesf2+0x62>
 800073e:	2e00      	cmp	r6, #0
 8000740:	d108      	bne.n	8000754 <__lesf2+0x50>
 8000742:	2a00      	cmp	r2, #0
 8000744:	d008      	beq.n	8000758 <__lesf2+0x54>
 8000746:	4283      	cmp	r3, r0
 8000748:	d012      	beq.n	8000770 <__lesf2+0x6c>
 800074a:	2102      	movs	r1, #2
 800074c:	1e58      	subs	r0, r3, #1
 800074e:	4008      	ands	r0, r1
 8000750:	3801      	subs	r0, #1
 8000752:	e000      	b.n	8000756 <__lesf2+0x52>
 8000754:	2002      	movs	r0, #2
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	2d00      	cmp	r5, #0
 800075a:	d1f4      	bne.n	8000746 <__lesf2+0x42>
 800075c:	2800      	cmp	r0, #0
 800075e:	d1fa      	bne.n	8000756 <__lesf2+0x52>
 8000760:	2001      	movs	r0, #1
 8000762:	4240      	negs	r0, r0
 8000764:	e7f7      	b.n	8000756 <__lesf2+0x52>
 8000766:	2c00      	cmp	r4, #0
 8000768:	d1ed      	bne.n	8000746 <__lesf2+0x42>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d1eb      	bne.n	8000746 <__lesf2+0x42>
 800076e:	e7ec      	b.n	800074a <__lesf2+0x46>
 8000770:	42a2      	cmp	r2, r4
 8000772:	dc05      	bgt.n	8000780 <__lesf2+0x7c>
 8000774:	dbf2      	blt.n	800075c <__lesf2+0x58>
 8000776:	42b5      	cmp	r5, r6
 8000778:	d802      	bhi.n	8000780 <__lesf2+0x7c>
 800077a:	d3ef      	bcc.n	800075c <__lesf2+0x58>
 800077c:	2000      	movs	r0, #0
 800077e:	e7ea      	b.n	8000756 <__lesf2+0x52>
 8000780:	4243      	negs	r3, r0
 8000782:	4158      	adcs	r0, r3
 8000784:	0040      	lsls	r0, r0, #1
 8000786:	3801      	subs	r0, #1
 8000788:	e7e5      	b.n	8000756 <__lesf2+0x52>
 800078a:	46c0      	nop			; (mov r8, r8)

0800078c <__aeabi_fmul>:
 800078c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078e:	464f      	mov	r7, r9
 8000790:	4646      	mov	r6, r8
 8000792:	46d6      	mov	lr, sl
 8000794:	0244      	lsls	r4, r0, #9
 8000796:	0045      	lsls	r5, r0, #1
 8000798:	b5c0      	push	{r6, r7, lr}
 800079a:	0a64      	lsrs	r4, r4, #9
 800079c:	1c0f      	adds	r7, r1, #0
 800079e:	0e2d      	lsrs	r5, r5, #24
 80007a0:	0fc6      	lsrs	r6, r0, #31
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fmul+0x1c>
 80007a6:	e08d      	b.n	80008c4 <__aeabi_fmul+0x138>
 80007a8:	2dff      	cmp	r5, #255	; 0xff
 80007aa:	d100      	bne.n	80007ae <__aeabi_fmul+0x22>
 80007ac:	e092      	b.n	80008d4 <__aeabi_fmul+0x148>
 80007ae:	2300      	movs	r3, #0
 80007b0:	2080      	movs	r0, #128	; 0x80
 80007b2:	4699      	mov	r9, r3
 80007b4:	469a      	mov	sl, r3
 80007b6:	00e4      	lsls	r4, r4, #3
 80007b8:	04c0      	lsls	r0, r0, #19
 80007ba:	4304      	orrs	r4, r0
 80007bc:	3d7f      	subs	r5, #127	; 0x7f
 80007be:	0278      	lsls	r0, r7, #9
 80007c0:	0a43      	lsrs	r3, r0, #9
 80007c2:	4698      	mov	r8, r3
 80007c4:	007b      	lsls	r3, r7, #1
 80007c6:	0e1b      	lsrs	r3, r3, #24
 80007c8:	0fff      	lsrs	r7, r7, #31
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fmul+0x44>
 80007ce:	e070      	b.n	80008b2 <__aeabi_fmul+0x126>
 80007d0:	2bff      	cmp	r3, #255	; 0xff
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fmul+0x4a>
 80007d4:	e086      	b.n	80008e4 <__aeabi_fmul+0x158>
 80007d6:	4642      	mov	r2, r8
 80007d8:	00d0      	lsls	r0, r2, #3
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	3b7f      	subs	r3, #127	; 0x7f
 80007de:	18ed      	adds	r5, r5, r3
 80007e0:	2300      	movs	r3, #0
 80007e2:	04d2      	lsls	r2, r2, #19
 80007e4:	4302      	orrs	r2, r0
 80007e6:	4690      	mov	r8, r2
 80007e8:	469c      	mov	ip, r3
 80007ea:	0031      	movs	r1, r6
 80007ec:	464b      	mov	r3, r9
 80007ee:	4079      	eors	r1, r7
 80007f0:	1c68      	adds	r0, r5, #1
 80007f2:	2b0f      	cmp	r3, #15
 80007f4:	d81c      	bhi.n	8000830 <__aeabi_fmul+0xa4>
 80007f6:	4a76      	ldr	r2, [pc, #472]	; (80009d0 <__aeabi_fmul+0x244>)
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	58d3      	ldr	r3, [r2, r3]
 80007fc:	469f      	mov	pc, r3
 80007fe:	0039      	movs	r1, r7
 8000800:	4644      	mov	r4, r8
 8000802:	46e2      	mov	sl, ip
 8000804:	4653      	mov	r3, sl
 8000806:	2b02      	cmp	r3, #2
 8000808:	d00f      	beq.n	800082a <__aeabi_fmul+0x9e>
 800080a:	2b03      	cmp	r3, #3
 800080c:	d100      	bne.n	8000810 <__aeabi_fmul+0x84>
 800080e:	e0d7      	b.n	80009c0 <__aeabi_fmul+0x234>
 8000810:	2b01      	cmp	r3, #1
 8000812:	d137      	bne.n	8000884 <__aeabi_fmul+0xf8>
 8000814:	2000      	movs	r0, #0
 8000816:	2400      	movs	r4, #0
 8000818:	05c0      	lsls	r0, r0, #23
 800081a:	4320      	orrs	r0, r4
 800081c:	07c9      	lsls	r1, r1, #31
 800081e:	4308      	orrs	r0, r1
 8000820:	bce0      	pop	{r5, r6, r7}
 8000822:	46ba      	mov	sl, r7
 8000824:	46b1      	mov	r9, r6
 8000826:	46a8      	mov	r8, r5
 8000828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082a:	20ff      	movs	r0, #255	; 0xff
 800082c:	2400      	movs	r4, #0
 800082e:	e7f3      	b.n	8000818 <__aeabi_fmul+0x8c>
 8000830:	0c26      	lsrs	r6, r4, #16
 8000832:	0424      	lsls	r4, r4, #16
 8000834:	0c22      	lsrs	r2, r4, #16
 8000836:	4644      	mov	r4, r8
 8000838:	0424      	lsls	r4, r4, #16
 800083a:	0c24      	lsrs	r4, r4, #16
 800083c:	4643      	mov	r3, r8
 800083e:	0027      	movs	r7, r4
 8000840:	0c1b      	lsrs	r3, r3, #16
 8000842:	4357      	muls	r7, r2
 8000844:	4374      	muls	r4, r6
 8000846:	435a      	muls	r2, r3
 8000848:	435e      	muls	r6, r3
 800084a:	1912      	adds	r2, r2, r4
 800084c:	0c3b      	lsrs	r3, r7, #16
 800084e:	189b      	adds	r3, r3, r2
 8000850:	429c      	cmp	r4, r3
 8000852:	d903      	bls.n	800085c <__aeabi_fmul+0xd0>
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	0252      	lsls	r2, r2, #9
 8000858:	4694      	mov	ip, r2
 800085a:	4466      	add	r6, ip
 800085c:	043f      	lsls	r7, r7, #16
 800085e:	041a      	lsls	r2, r3, #16
 8000860:	0c3f      	lsrs	r7, r7, #16
 8000862:	19d2      	adds	r2, r2, r7
 8000864:	0194      	lsls	r4, r2, #6
 8000866:	1e67      	subs	r7, r4, #1
 8000868:	41bc      	sbcs	r4, r7
 800086a:	0c1b      	lsrs	r3, r3, #16
 800086c:	0e92      	lsrs	r2, r2, #26
 800086e:	199b      	adds	r3, r3, r6
 8000870:	4314      	orrs	r4, r2
 8000872:	019b      	lsls	r3, r3, #6
 8000874:	431c      	orrs	r4, r3
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	d400      	bmi.n	800087c <__aeabi_fmul+0xf0>
 800087a:	e09b      	b.n	80009b4 <__aeabi_fmul+0x228>
 800087c:	2301      	movs	r3, #1
 800087e:	0862      	lsrs	r2, r4, #1
 8000880:	401c      	ands	r4, r3
 8000882:	4314      	orrs	r4, r2
 8000884:	0002      	movs	r2, r0
 8000886:	327f      	adds	r2, #127	; 0x7f
 8000888:	2a00      	cmp	r2, #0
 800088a:	dd64      	ble.n	8000956 <__aeabi_fmul+0x1ca>
 800088c:	0763      	lsls	r3, r4, #29
 800088e:	d004      	beq.n	800089a <__aeabi_fmul+0x10e>
 8000890:	230f      	movs	r3, #15
 8000892:	4023      	ands	r3, r4
 8000894:	2b04      	cmp	r3, #4
 8000896:	d000      	beq.n	800089a <__aeabi_fmul+0x10e>
 8000898:	3404      	adds	r4, #4
 800089a:	0123      	lsls	r3, r4, #4
 800089c:	d503      	bpl.n	80008a6 <__aeabi_fmul+0x11a>
 800089e:	0002      	movs	r2, r0
 80008a0:	4b4c      	ldr	r3, [pc, #304]	; (80009d4 <__aeabi_fmul+0x248>)
 80008a2:	3280      	adds	r2, #128	; 0x80
 80008a4:	401c      	ands	r4, r3
 80008a6:	2afe      	cmp	r2, #254	; 0xfe
 80008a8:	dcbf      	bgt.n	800082a <__aeabi_fmul+0x9e>
 80008aa:	01a4      	lsls	r4, r4, #6
 80008ac:	0a64      	lsrs	r4, r4, #9
 80008ae:	b2d0      	uxtb	r0, r2
 80008b0:	e7b2      	b.n	8000818 <__aeabi_fmul+0x8c>
 80008b2:	4643      	mov	r3, r8
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d13d      	bne.n	8000934 <__aeabi_fmul+0x1a8>
 80008b8:	464a      	mov	r2, r9
 80008ba:	3301      	adds	r3, #1
 80008bc:	431a      	orrs	r2, r3
 80008be:	4691      	mov	r9, r2
 80008c0:	469c      	mov	ip, r3
 80008c2:	e792      	b.n	80007ea <__aeabi_fmul+0x5e>
 80008c4:	2c00      	cmp	r4, #0
 80008c6:	d129      	bne.n	800091c <__aeabi_fmul+0x190>
 80008c8:	2304      	movs	r3, #4
 80008ca:	4699      	mov	r9, r3
 80008cc:	3b03      	subs	r3, #3
 80008ce:	2500      	movs	r5, #0
 80008d0:	469a      	mov	sl, r3
 80008d2:	e774      	b.n	80007be <__aeabi_fmul+0x32>
 80008d4:	2c00      	cmp	r4, #0
 80008d6:	d11b      	bne.n	8000910 <__aeabi_fmul+0x184>
 80008d8:	2308      	movs	r3, #8
 80008da:	4699      	mov	r9, r3
 80008dc:	3b06      	subs	r3, #6
 80008de:	25ff      	movs	r5, #255	; 0xff
 80008e0:	469a      	mov	sl, r3
 80008e2:	e76c      	b.n	80007be <__aeabi_fmul+0x32>
 80008e4:	4643      	mov	r3, r8
 80008e6:	35ff      	adds	r5, #255	; 0xff
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10b      	bne.n	8000904 <__aeabi_fmul+0x178>
 80008ec:	2302      	movs	r3, #2
 80008ee:	464a      	mov	r2, r9
 80008f0:	431a      	orrs	r2, r3
 80008f2:	4691      	mov	r9, r2
 80008f4:	469c      	mov	ip, r3
 80008f6:	e778      	b.n	80007ea <__aeabi_fmul+0x5e>
 80008f8:	4653      	mov	r3, sl
 80008fa:	0031      	movs	r1, r6
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d000      	beq.n	8000902 <__aeabi_fmul+0x176>
 8000900:	e783      	b.n	800080a <__aeabi_fmul+0x7e>
 8000902:	e792      	b.n	800082a <__aeabi_fmul+0x9e>
 8000904:	2303      	movs	r3, #3
 8000906:	464a      	mov	r2, r9
 8000908:	431a      	orrs	r2, r3
 800090a:	4691      	mov	r9, r2
 800090c:	469c      	mov	ip, r3
 800090e:	e76c      	b.n	80007ea <__aeabi_fmul+0x5e>
 8000910:	230c      	movs	r3, #12
 8000912:	4699      	mov	r9, r3
 8000914:	3b09      	subs	r3, #9
 8000916:	25ff      	movs	r5, #255	; 0xff
 8000918:	469a      	mov	sl, r3
 800091a:	e750      	b.n	80007be <__aeabi_fmul+0x32>
 800091c:	0020      	movs	r0, r4
 800091e:	f002 f8df 	bl	8002ae0 <__clzsi2>
 8000922:	2576      	movs	r5, #118	; 0x76
 8000924:	1f43      	subs	r3, r0, #5
 8000926:	409c      	lsls	r4, r3
 8000928:	2300      	movs	r3, #0
 800092a:	426d      	negs	r5, r5
 800092c:	4699      	mov	r9, r3
 800092e:	469a      	mov	sl, r3
 8000930:	1a2d      	subs	r5, r5, r0
 8000932:	e744      	b.n	80007be <__aeabi_fmul+0x32>
 8000934:	4640      	mov	r0, r8
 8000936:	f002 f8d3 	bl	8002ae0 <__clzsi2>
 800093a:	4642      	mov	r2, r8
 800093c:	1f43      	subs	r3, r0, #5
 800093e:	409a      	lsls	r2, r3
 8000940:	2300      	movs	r3, #0
 8000942:	1a2d      	subs	r5, r5, r0
 8000944:	4690      	mov	r8, r2
 8000946:	469c      	mov	ip, r3
 8000948:	3d76      	subs	r5, #118	; 0x76
 800094a:	e74e      	b.n	80007ea <__aeabi_fmul+0x5e>
 800094c:	2480      	movs	r4, #128	; 0x80
 800094e:	2100      	movs	r1, #0
 8000950:	20ff      	movs	r0, #255	; 0xff
 8000952:	03e4      	lsls	r4, r4, #15
 8000954:	e760      	b.n	8000818 <__aeabi_fmul+0x8c>
 8000956:	2301      	movs	r3, #1
 8000958:	1a9b      	subs	r3, r3, r2
 800095a:	2b1b      	cmp	r3, #27
 800095c:	dd00      	ble.n	8000960 <__aeabi_fmul+0x1d4>
 800095e:	e759      	b.n	8000814 <__aeabi_fmul+0x88>
 8000960:	0022      	movs	r2, r4
 8000962:	309e      	adds	r0, #158	; 0x9e
 8000964:	40da      	lsrs	r2, r3
 8000966:	4084      	lsls	r4, r0
 8000968:	0013      	movs	r3, r2
 800096a:	1e62      	subs	r2, r4, #1
 800096c:	4194      	sbcs	r4, r2
 800096e:	431c      	orrs	r4, r3
 8000970:	0763      	lsls	r3, r4, #29
 8000972:	d004      	beq.n	800097e <__aeabi_fmul+0x1f2>
 8000974:	230f      	movs	r3, #15
 8000976:	4023      	ands	r3, r4
 8000978:	2b04      	cmp	r3, #4
 800097a:	d000      	beq.n	800097e <__aeabi_fmul+0x1f2>
 800097c:	3404      	adds	r4, #4
 800097e:	0163      	lsls	r3, r4, #5
 8000980:	d51a      	bpl.n	80009b8 <__aeabi_fmul+0x22c>
 8000982:	2001      	movs	r0, #1
 8000984:	2400      	movs	r4, #0
 8000986:	e747      	b.n	8000818 <__aeabi_fmul+0x8c>
 8000988:	2080      	movs	r0, #128	; 0x80
 800098a:	03c0      	lsls	r0, r0, #15
 800098c:	4204      	tst	r4, r0
 800098e:	d009      	beq.n	80009a4 <__aeabi_fmul+0x218>
 8000990:	4643      	mov	r3, r8
 8000992:	4203      	tst	r3, r0
 8000994:	d106      	bne.n	80009a4 <__aeabi_fmul+0x218>
 8000996:	4644      	mov	r4, r8
 8000998:	4304      	orrs	r4, r0
 800099a:	0264      	lsls	r4, r4, #9
 800099c:	0039      	movs	r1, r7
 800099e:	20ff      	movs	r0, #255	; 0xff
 80009a0:	0a64      	lsrs	r4, r4, #9
 80009a2:	e739      	b.n	8000818 <__aeabi_fmul+0x8c>
 80009a4:	2080      	movs	r0, #128	; 0x80
 80009a6:	03c0      	lsls	r0, r0, #15
 80009a8:	4304      	orrs	r4, r0
 80009aa:	0264      	lsls	r4, r4, #9
 80009ac:	0031      	movs	r1, r6
 80009ae:	20ff      	movs	r0, #255	; 0xff
 80009b0:	0a64      	lsrs	r4, r4, #9
 80009b2:	e731      	b.n	8000818 <__aeabi_fmul+0x8c>
 80009b4:	0028      	movs	r0, r5
 80009b6:	e765      	b.n	8000884 <__aeabi_fmul+0xf8>
 80009b8:	01a4      	lsls	r4, r4, #6
 80009ba:	2000      	movs	r0, #0
 80009bc:	0a64      	lsrs	r4, r4, #9
 80009be:	e72b      	b.n	8000818 <__aeabi_fmul+0x8c>
 80009c0:	2080      	movs	r0, #128	; 0x80
 80009c2:	03c0      	lsls	r0, r0, #15
 80009c4:	4304      	orrs	r4, r0
 80009c6:	0264      	lsls	r4, r4, #9
 80009c8:	20ff      	movs	r0, #255	; 0xff
 80009ca:	0a64      	lsrs	r4, r4, #9
 80009cc:	e724      	b.n	8000818 <__aeabi_fmul+0x8c>
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	0800cb48 	.word	0x0800cb48
 80009d4:	f7ffffff 	.word	0xf7ffffff

080009d8 <__aeabi_fsub>:
 80009d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009da:	46ce      	mov	lr, r9
 80009dc:	4647      	mov	r7, r8
 80009de:	0243      	lsls	r3, r0, #9
 80009e0:	0a5b      	lsrs	r3, r3, #9
 80009e2:	024e      	lsls	r6, r1, #9
 80009e4:	00da      	lsls	r2, r3, #3
 80009e6:	4694      	mov	ip, r2
 80009e8:	0a72      	lsrs	r2, r6, #9
 80009ea:	4691      	mov	r9, r2
 80009ec:	0045      	lsls	r5, r0, #1
 80009ee:	004a      	lsls	r2, r1, #1
 80009f0:	b580      	push	{r7, lr}
 80009f2:	0e2d      	lsrs	r5, r5, #24
 80009f4:	001f      	movs	r7, r3
 80009f6:	0fc4      	lsrs	r4, r0, #31
 80009f8:	0e12      	lsrs	r2, r2, #24
 80009fa:	0fc9      	lsrs	r1, r1, #31
 80009fc:	09b6      	lsrs	r6, r6, #6
 80009fe:	2aff      	cmp	r2, #255	; 0xff
 8000a00:	d05b      	beq.n	8000aba <__aeabi_fsub+0xe2>
 8000a02:	2001      	movs	r0, #1
 8000a04:	4041      	eors	r1, r0
 8000a06:	428c      	cmp	r4, r1
 8000a08:	d039      	beq.n	8000a7e <__aeabi_fsub+0xa6>
 8000a0a:	1aa8      	subs	r0, r5, r2
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	dd5a      	ble.n	8000ac6 <__aeabi_fsub+0xee>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d06a      	beq.n	8000aea <__aeabi_fsub+0x112>
 8000a14:	2dff      	cmp	r5, #255	; 0xff
 8000a16:	d100      	bne.n	8000a1a <__aeabi_fsub+0x42>
 8000a18:	e0d9      	b.n	8000bce <__aeabi_fsub+0x1f6>
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	04d2      	lsls	r2, r2, #19
 8000a1e:	4316      	orrs	r6, r2
 8000a20:	281b      	cmp	r0, #27
 8000a22:	dc00      	bgt.n	8000a26 <__aeabi_fsub+0x4e>
 8000a24:	e0e9      	b.n	8000bfa <__aeabi_fsub+0x222>
 8000a26:	2001      	movs	r0, #1
 8000a28:	4663      	mov	r3, ip
 8000a2a:	1a18      	subs	r0, r3, r0
 8000a2c:	0143      	lsls	r3, r0, #5
 8000a2e:	d400      	bmi.n	8000a32 <__aeabi_fsub+0x5a>
 8000a30:	e0b4      	b.n	8000b9c <__aeabi_fsub+0x1c4>
 8000a32:	0180      	lsls	r0, r0, #6
 8000a34:	0987      	lsrs	r7, r0, #6
 8000a36:	0038      	movs	r0, r7
 8000a38:	f002 f852 	bl	8002ae0 <__clzsi2>
 8000a3c:	3805      	subs	r0, #5
 8000a3e:	4087      	lsls	r7, r0
 8000a40:	4285      	cmp	r5, r0
 8000a42:	dc00      	bgt.n	8000a46 <__aeabi_fsub+0x6e>
 8000a44:	e0cc      	b.n	8000be0 <__aeabi_fsub+0x208>
 8000a46:	1a2d      	subs	r5, r5, r0
 8000a48:	48b5      	ldr	r0, [pc, #724]	; (8000d20 <__aeabi_fsub+0x348>)
 8000a4a:	4038      	ands	r0, r7
 8000a4c:	0743      	lsls	r3, r0, #29
 8000a4e:	d004      	beq.n	8000a5a <__aeabi_fsub+0x82>
 8000a50:	230f      	movs	r3, #15
 8000a52:	4003      	ands	r3, r0
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d000      	beq.n	8000a5a <__aeabi_fsub+0x82>
 8000a58:	3004      	adds	r0, #4
 8000a5a:	0143      	lsls	r3, r0, #5
 8000a5c:	d400      	bmi.n	8000a60 <__aeabi_fsub+0x88>
 8000a5e:	e0a0      	b.n	8000ba2 <__aeabi_fsub+0x1ca>
 8000a60:	1c6a      	adds	r2, r5, #1
 8000a62:	2dfe      	cmp	r5, #254	; 0xfe
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fsub+0x90>
 8000a66:	e08d      	b.n	8000b84 <__aeabi_fsub+0x1ac>
 8000a68:	0180      	lsls	r0, r0, #6
 8000a6a:	0a47      	lsrs	r7, r0, #9
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	05d0      	lsls	r0, r2, #23
 8000a70:	4338      	orrs	r0, r7
 8000a72:	07e4      	lsls	r4, r4, #31
 8000a74:	4320      	orrs	r0, r4
 8000a76:	bcc0      	pop	{r6, r7}
 8000a78:	46b9      	mov	r9, r7
 8000a7a:	46b0      	mov	r8, r6
 8000a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a7e:	1aa8      	subs	r0, r5, r2
 8000a80:	4680      	mov	r8, r0
 8000a82:	2800      	cmp	r0, #0
 8000a84:	dd45      	ble.n	8000b12 <__aeabi_fsub+0x13a>
 8000a86:	2a00      	cmp	r2, #0
 8000a88:	d070      	beq.n	8000b6c <__aeabi_fsub+0x194>
 8000a8a:	2dff      	cmp	r5, #255	; 0xff
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fsub+0xb8>
 8000a8e:	e09e      	b.n	8000bce <__aeabi_fsub+0x1f6>
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	04db      	lsls	r3, r3, #19
 8000a94:	431e      	orrs	r6, r3
 8000a96:	4643      	mov	r3, r8
 8000a98:	2b1b      	cmp	r3, #27
 8000a9a:	dc00      	bgt.n	8000a9e <__aeabi_fsub+0xc6>
 8000a9c:	e0d2      	b.n	8000c44 <__aeabi_fsub+0x26c>
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	4460      	add	r0, ip
 8000aa2:	0143      	lsls	r3, r0, #5
 8000aa4:	d57a      	bpl.n	8000b9c <__aeabi_fsub+0x1c4>
 8000aa6:	3501      	adds	r5, #1
 8000aa8:	2dff      	cmp	r5, #255	; 0xff
 8000aaa:	d06b      	beq.n	8000b84 <__aeabi_fsub+0x1ac>
 8000aac:	2301      	movs	r3, #1
 8000aae:	4a9d      	ldr	r2, [pc, #628]	; (8000d24 <__aeabi_fsub+0x34c>)
 8000ab0:	4003      	ands	r3, r0
 8000ab2:	0840      	lsrs	r0, r0, #1
 8000ab4:	4010      	ands	r0, r2
 8000ab6:	4318      	orrs	r0, r3
 8000ab8:	e7c8      	b.n	8000a4c <__aeabi_fsub+0x74>
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	d020      	beq.n	8000b00 <__aeabi_fsub+0x128>
 8000abe:	428c      	cmp	r4, r1
 8000ac0:	d023      	beq.n	8000b0a <__aeabi_fsub+0x132>
 8000ac2:	0028      	movs	r0, r5
 8000ac4:	38ff      	subs	r0, #255	; 0xff
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	d039      	beq.n	8000b3e <__aeabi_fsub+0x166>
 8000aca:	1b57      	subs	r7, r2, r5
 8000acc:	2d00      	cmp	r5, #0
 8000ace:	d000      	beq.n	8000ad2 <__aeabi_fsub+0xfa>
 8000ad0:	e09d      	b.n	8000c0e <__aeabi_fsub+0x236>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d100      	bne.n	8000ada <__aeabi_fsub+0x102>
 8000ad8:	e0db      	b.n	8000c92 <__aeabi_fsub+0x2ba>
 8000ada:	1e7b      	subs	r3, r7, #1
 8000adc:	2f01      	cmp	r7, #1
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fsub+0x10a>
 8000ae0:	e10d      	b.n	8000cfe <__aeabi_fsub+0x326>
 8000ae2:	2fff      	cmp	r7, #255	; 0xff
 8000ae4:	d071      	beq.n	8000bca <__aeabi_fsub+0x1f2>
 8000ae6:	001f      	movs	r7, r3
 8000ae8:	e098      	b.n	8000c1c <__aeabi_fsub+0x244>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d100      	bne.n	8000af0 <__aeabi_fsub+0x118>
 8000aee:	e0a7      	b.n	8000c40 <__aeabi_fsub+0x268>
 8000af0:	1e42      	subs	r2, r0, #1
 8000af2:	2801      	cmp	r0, #1
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fsub+0x120>
 8000af6:	e0e6      	b.n	8000cc6 <__aeabi_fsub+0x2ee>
 8000af8:	28ff      	cmp	r0, #255	; 0xff
 8000afa:	d068      	beq.n	8000bce <__aeabi_fsub+0x1f6>
 8000afc:	0010      	movs	r0, r2
 8000afe:	e78f      	b.n	8000a20 <__aeabi_fsub+0x48>
 8000b00:	2001      	movs	r0, #1
 8000b02:	4041      	eors	r1, r0
 8000b04:	42a1      	cmp	r1, r4
 8000b06:	d000      	beq.n	8000b0a <__aeabi_fsub+0x132>
 8000b08:	e77f      	b.n	8000a0a <__aeabi_fsub+0x32>
 8000b0a:	20ff      	movs	r0, #255	; 0xff
 8000b0c:	4240      	negs	r0, r0
 8000b0e:	4680      	mov	r8, r0
 8000b10:	44a8      	add	r8, r5
 8000b12:	4640      	mov	r0, r8
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d038      	beq.n	8000b8a <__aeabi_fsub+0x1b2>
 8000b18:	1b51      	subs	r1, r2, r5
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fsub+0x148>
 8000b1e:	e0ae      	b.n	8000c7e <__aeabi_fsub+0x2a6>
 8000b20:	2aff      	cmp	r2, #255	; 0xff
 8000b22:	d100      	bne.n	8000b26 <__aeabi_fsub+0x14e>
 8000b24:	e0df      	b.n	8000ce6 <__aeabi_fsub+0x30e>
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	4660      	mov	r0, ip
 8000b2a:	04db      	lsls	r3, r3, #19
 8000b2c:	4318      	orrs	r0, r3
 8000b2e:	4684      	mov	ip, r0
 8000b30:	291b      	cmp	r1, #27
 8000b32:	dc00      	bgt.n	8000b36 <__aeabi_fsub+0x15e>
 8000b34:	e0d9      	b.n	8000cea <__aeabi_fsub+0x312>
 8000b36:	2001      	movs	r0, #1
 8000b38:	0015      	movs	r5, r2
 8000b3a:	1980      	adds	r0, r0, r6
 8000b3c:	e7b1      	b.n	8000aa2 <__aeabi_fsub+0xca>
 8000b3e:	20fe      	movs	r0, #254	; 0xfe
 8000b40:	1c6a      	adds	r2, r5, #1
 8000b42:	4210      	tst	r0, r2
 8000b44:	d171      	bne.n	8000c2a <__aeabi_fsub+0x252>
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d000      	beq.n	8000b4c <__aeabi_fsub+0x174>
 8000b4a:	e0a6      	b.n	8000c9a <__aeabi_fsub+0x2c2>
 8000b4c:	4663      	mov	r3, ip
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d100      	bne.n	8000b54 <__aeabi_fsub+0x17c>
 8000b52:	e0d9      	b.n	8000d08 <__aeabi_fsub+0x330>
 8000b54:	2200      	movs	r2, #0
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fsub+0x184>
 8000b5a:	e788      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000b5c:	1b98      	subs	r0, r3, r6
 8000b5e:	0143      	lsls	r3, r0, #5
 8000b60:	d400      	bmi.n	8000b64 <__aeabi_fsub+0x18c>
 8000b62:	e0e1      	b.n	8000d28 <__aeabi_fsub+0x350>
 8000b64:	4663      	mov	r3, ip
 8000b66:	000c      	movs	r4, r1
 8000b68:	1af0      	subs	r0, r6, r3
 8000b6a:	e76f      	b.n	8000a4c <__aeabi_fsub+0x74>
 8000b6c:	2e00      	cmp	r6, #0
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_fsub+0x19a>
 8000b70:	e0b7      	b.n	8000ce2 <__aeabi_fsub+0x30a>
 8000b72:	0002      	movs	r2, r0
 8000b74:	3a01      	subs	r2, #1
 8000b76:	2801      	cmp	r0, #1
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fsub+0x1a4>
 8000b7a:	e09c      	b.n	8000cb6 <__aeabi_fsub+0x2de>
 8000b7c:	28ff      	cmp	r0, #255	; 0xff
 8000b7e:	d026      	beq.n	8000bce <__aeabi_fsub+0x1f6>
 8000b80:	4690      	mov	r8, r2
 8000b82:	e788      	b.n	8000a96 <__aeabi_fsub+0xbe>
 8000b84:	22ff      	movs	r2, #255	; 0xff
 8000b86:	2700      	movs	r7, #0
 8000b88:	e771      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000b8a:	20fe      	movs	r0, #254	; 0xfe
 8000b8c:	1c6a      	adds	r2, r5, #1
 8000b8e:	4210      	tst	r0, r2
 8000b90:	d064      	beq.n	8000c5c <__aeabi_fsub+0x284>
 8000b92:	2aff      	cmp	r2, #255	; 0xff
 8000b94:	d0f6      	beq.n	8000b84 <__aeabi_fsub+0x1ac>
 8000b96:	0015      	movs	r5, r2
 8000b98:	4466      	add	r6, ip
 8000b9a:	0870      	lsrs	r0, r6, #1
 8000b9c:	0743      	lsls	r3, r0, #29
 8000b9e:	d000      	beq.n	8000ba2 <__aeabi_fsub+0x1ca>
 8000ba0:	e756      	b.n	8000a50 <__aeabi_fsub+0x78>
 8000ba2:	08c3      	lsrs	r3, r0, #3
 8000ba4:	2dff      	cmp	r5, #255	; 0xff
 8000ba6:	d012      	beq.n	8000bce <__aeabi_fsub+0x1f6>
 8000ba8:	025b      	lsls	r3, r3, #9
 8000baa:	0a5f      	lsrs	r7, r3, #9
 8000bac:	b2ea      	uxtb	r2, r5
 8000bae:	e75e      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000bb0:	4662      	mov	r2, ip
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fsub+0x1e0>
 8000bb6:	e096      	b.n	8000ce6 <__aeabi_fsub+0x30e>
 8000bb8:	2e00      	cmp	r6, #0
 8000bba:	d008      	beq.n	8000bce <__aeabi_fsub+0x1f6>
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	03d2      	lsls	r2, r2, #15
 8000bc0:	4213      	tst	r3, r2
 8000bc2:	d004      	beq.n	8000bce <__aeabi_fsub+0x1f6>
 8000bc4:	4648      	mov	r0, r9
 8000bc6:	4210      	tst	r0, r2
 8000bc8:	d101      	bne.n	8000bce <__aeabi_fsub+0x1f6>
 8000bca:	000c      	movs	r4, r1
 8000bcc:	464b      	mov	r3, r9
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0d8      	beq.n	8000b84 <__aeabi_fsub+0x1ac>
 8000bd2:	2780      	movs	r7, #128	; 0x80
 8000bd4:	03ff      	lsls	r7, r7, #15
 8000bd6:	431f      	orrs	r7, r3
 8000bd8:	027f      	lsls	r7, r7, #9
 8000bda:	22ff      	movs	r2, #255	; 0xff
 8000bdc:	0a7f      	lsrs	r7, r7, #9
 8000bde:	e746      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000be0:	2320      	movs	r3, #32
 8000be2:	003a      	movs	r2, r7
 8000be4:	1b45      	subs	r5, r0, r5
 8000be6:	0038      	movs	r0, r7
 8000be8:	3501      	adds	r5, #1
 8000bea:	40ea      	lsrs	r2, r5
 8000bec:	1b5d      	subs	r5, r3, r5
 8000bee:	40a8      	lsls	r0, r5
 8000bf0:	1e43      	subs	r3, r0, #1
 8000bf2:	4198      	sbcs	r0, r3
 8000bf4:	2500      	movs	r5, #0
 8000bf6:	4310      	orrs	r0, r2
 8000bf8:	e728      	b.n	8000a4c <__aeabi_fsub+0x74>
 8000bfa:	2320      	movs	r3, #32
 8000bfc:	1a1b      	subs	r3, r3, r0
 8000bfe:	0032      	movs	r2, r6
 8000c00:	409e      	lsls	r6, r3
 8000c02:	40c2      	lsrs	r2, r0
 8000c04:	0030      	movs	r0, r6
 8000c06:	1e43      	subs	r3, r0, #1
 8000c08:	4198      	sbcs	r0, r3
 8000c0a:	4310      	orrs	r0, r2
 8000c0c:	e70c      	b.n	8000a28 <__aeabi_fsub+0x50>
 8000c0e:	2aff      	cmp	r2, #255	; 0xff
 8000c10:	d0db      	beq.n	8000bca <__aeabi_fsub+0x1f2>
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	4660      	mov	r0, ip
 8000c16:	04db      	lsls	r3, r3, #19
 8000c18:	4318      	orrs	r0, r3
 8000c1a:	4684      	mov	ip, r0
 8000c1c:	2f1b      	cmp	r7, #27
 8000c1e:	dd56      	ble.n	8000cce <__aeabi_fsub+0x2f6>
 8000c20:	2001      	movs	r0, #1
 8000c22:	000c      	movs	r4, r1
 8000c24:	0015      	movs	r5, r2
 8000c26:	1a30      	subs	r0, r6, r0
 8000c28:	e700      	b.n	8000a2c <__aeabi_fsub+0x54>
 8000c2a:	4663      	mov	r3, ip
 8000c2c:	1b9f      	subs	r7, r3, r6
 8000c2e:	017b      	lsls	r3, r7, #5
 8000c30:	d43d      	bmi.n	8000cae <__aeabi_fsub+0x2d6>
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d000      	beq.n	8000c38 <__aeabi_fsub+0x260>
 8000c36:	e6fe      	b.n	8000a36 <__aeabi_fsub+0x5e>
 8000c38:	2400      	movs	r4, #0
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	e716      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000c40:	0005      	movs	r5, r0
 8000c42:	e7af      	b.n	8000ba4 <__aeabi_fsub+0x1cc>
 8000c44:	0032      	movs	r2, r6
 8000c46:	4643      	mov	r3, r8
 8000c48:	4641      	mov	r1, r8
 8000c4a:	40da      	lsrs	r2, r3
 8000c4c:	2320      	movs	r3, #32
 8000c4e:	1a5b      	subs	r3, r3, r1
 8000c50:	409e      	lsls	r6, r3
 8000c52:	0030      	movs	r0, r6
 8000c54:	1e43      	subs	r3, r0, #1
 8000c56:	4198      	sbcs	r0, r3
 8000c58:	4310      	orrs	r0, r2
 8000c5a:	e721      	b.n	8000aa0 <__aeabi_fsub+0xc8>
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d1a7      	bne.n	8000bb0 <__aeabi_fsub+0x1d8>
 8000c60:	4663      	mov	r3, ip
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d059      	beq.n	8000d1a <__aeabi_fsub+0x342>
 8000c66:	2200      	movs	r2, #0
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_fsub+0x296>
 8000c6c:	e6ff      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000c6e:	0030      	movs	r0, r6
 8000c70:	4460      	add	r0, ip
 8000c72:	0143      	lsls	r3, r0, #5
 8000c74:	d592      	bpl.n	8000b9c <__aeabi_fsub+0x1c4>
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <__aeabi_fsub+0x348>)
 8000c78:	3501      	adds	r5, #1
 8000c7a:	4018      	ands	r0, r3
 8000c7c:	e78e      	b.n	8000b9c <__aeabi_fsub+0x1c4>
 8000c7e:	4663      	mov	r3, ip
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d047      	beq.n	8000d14 <__aeabi_fsub+0x33c>
 8000c84:	1e4b      	subs	r3, r1, #1
 8000c86:	2901      	cmp	r1, #1
 8000c88:	d015      	beq.n	8000cb6 <__aeabi_fsub+0x2de>
 8000c8a:	29ff      	cmp	r1, #255	; 0xff
 8000c8c:	d02b      	beq.n	8000ce6 <__aeabi_fsub+0x30e>
 8000c8e:	0019      	movs	r1, r3
 8000c90:	e74e      	b.n	8000b30 <__aeabi_fsub+0x158>
 8000c92:	000c      	movs	r4, r1
 8000c94:	464b      	mov	r3, r9
 8000c96:	003d      	movs	r5, r7
 8000c98:	e784      	b.n	8000ba4 <__aeabi_fsub+0x1cc>
 8000c9a:	4662      	mov	r2, ip
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	d18b      	bne.n	8000bb8 <__aeabi_fsub+0x1e0>
 8000ca0:	2e00      	cmp	r6, #0
 8000ca2:	d192      	bne.n	8000bca <__aeabi_fsub+0x1f2>
 8000ca4:	2780      	movs	r7, #128	; 0x80
 8000ca6:	2400      	movs	r4, #0
 8000ca8:	22ff      	movs	r2, #255	; 0xff
 8000caa:	03ff      	lsls	r7, r7, #15
 8000cac:	e6df      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000cae:	4663      	mov	r3, ip
 8000cb0:	000c      	movs	r4, r1
 8000cb2:	1af7      	subs	r7, r6, r3
 8000cb4:	e6bf      	b.n	8000a36 <__aeabi_fsub+0x5e>
 8000cb6:	0030      	movs	r0, r6
 8000cb8:	4460      	add	r0, ip
 8000cba:	2501      	movs	r5, #1
 8000cbc:	0143      	lsls	r3, r0, #5
 8000cbe:	d400      	bmi.n	8000cc2 <__aeabi_fsub+0x2ea>
 8000cc0:	e76c      	b.n	8000b9c <__aeabi_fsub+0x1c4>
 8000cc2:	2502      	movs	r5, #2
 8000cc4:	e6f2      	b.n	8000aac <__aeabi_fsub+0xd4>
 8000cc6:	4663      	mov	r3, ip
 8000cc8:	2501      	movs	r5, #1
 8000cca:	1b98      	subs	r0, r3, r6
 8000ccc:	e6ae      	b.n	8000a2c <__aeabi_fsub+0x54>
 8000cce:	2320      	movs	r3, #32
 8000cd0:	4664      	mov	r4, ip
 8000cd2:	4660      	mov	r0, ip
 8000cd4:	40fc      	lsrs	r4, r7
 8000cd6:	1bdf      	subs	r7, r3, r7
 8000cd8:	40b8      	lsls	r0, r7
 8000cda:	1e43      	subs	r3, r0, #1
 8000cdc:	4198      	sbcs	r0, r3
 8000cde:	4320      	orrs	r0, r4
 8000ce0:	e79f      	b.n	8000c22 <__aeabi_fsub+0x24a>
 8000ce2:	0005      	movs	r5, r0
 8000ce4:	e75e      	b.n	8000ba4 <__aeabi_fsub+0x1cc>
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	e771      	b.n	8000bce <__aeabi_fsub+0x1f6>
 8000cea:	2320      	movs	r3, #32
 8000cec:	4665      	mov	r5, ip
 8000cee:	4660      	mov	r0, ip
 8000cf0:	40cd      	lsrs	r5, r1
 8000cf2:	1a59      	subs	r1, r3, r1
 8000cf4:	4088      	lsls	r0, r1
 8000cf6:	1e43      	subs	r3, r0, #1
 8000cf8:	4198      	sbcs	r0, r3
 8000cfa:	4328      	orrs	r0, r5
 8000cfc:	e71c      	b.n	8000b38 <__aeabi_fsub+0x160>
 8000cfe:	4663      	mov	r3, ip
 8000d00:	000c      	movs	r4, r1
 8000d02:	2501      	movs	r5, #1
 8000d04:	1af0      	subs	r0, r6, r3
 8000d06:	e691      	b.n	8000a2c <__aeabi_fsub+0x54>
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d095      	beq.n	8000c38 <__aeabi_fsub+0x260>
 8000d0c:	000c      	movs	r4, r1
 8000d0e:	464f      	mov	r7, r9
 8000d10:	2200      	movs	r2, #0
 8000d12:	e6ac      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000d14:	464b      	mov	r3, r9
 8000d16:	000d      	movs	r5, r1
 8000d18:	e744      	b.n	8000ba4 <__aeabi_fsub+0x1cc>
 8000d1a:	464f      	mov	r7, r9
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	e6a6      	b.n	8000a6e <__aeabi_fsub+0x96>
 8000d20:	fbffffff 	.word	0xfbffffff
 8000d24:	7dffffff 	.word	0x7dffffff
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	d000      	beq.n	8000d2e <__aeabi_fsub+0x356>
 8000d2c:	e736      	b.n	8000b9c <__aeabi_fsub+0x1c4>
 8000d2e:	2400      	movs	r4, #0
 8000d30:	2700      	movs	r7, #0
 8000d32:	e69c      	b.n	8000a6e <__aeabi_fsub+0x96>

08000d34 <__aeabi_f2iz>:
 8000d34:	0241      	lsls	r1, r0, #9
 8000d36:	0042      	lsls	r2, r0, #1
 8000d38:	0fc3      	lsrs	r3, r0, #31
 8000d3a:	0a49      	lsrs	r1, r1, #9
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	0e12      	lsrs	r2, r2, #24
 8000d40:	2a7e      	cmp	r2, #126	; 0x7e
 8000d42:	dd03      	ble.n	8000d4c <__aeabi_f2iz+0x18>
 8000d44:	2a9d      	cmp	r2, #157	; 0x9d
 8000d46:	dd02      	ble.n	8000d4e <__aeabi_f2iz+0x1a>
 8000d48:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <__aeabi_f2iz+0x3c>)
 8000d4a:	1898      	adds	r0, r3, r2
 8000d4c:	4770      	bx	lr
 8000d4e:	2080      	movs	r0, #128	; 0x80
 8000d50:	0400      	lsls	r0, r0, #16
 8000d52:	4301      	orrs	r1, r0
 8000d54:	2a95      	cmp	r2, #149	; 0x95
 8000d56:	dc07      	bgt.n	8000d68 <__aeabi_f2iz+0x34>
 8000d58:	2096      	movs	r0, #150	; 0x96
 8000d5a:	1a82      	subs	r2, r0, r2
 8000d5c:	40d1      	lsrs	r1, r2
 8000d5e:	4248      	negs	r0, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1f3      	bne.n	8000d4c <__aeabi_f2iz+0x18>
 8000d64:	0008      	movs	r0, r1
 8000d66:	e7f1      	b.n	8000d4c <__aeabi_f2iz+0x18>
 8000d68:	3a96      	subs	r2, #150	; 0x96
 8000d6a:	4091      	lsls	r1, r2
 8000d6c:	e7f7      	b.n	8000d5e <__aeabi_f2iz+0x2a>
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	7fffffff 	.word	0x7fffffff

08000d74 <__aeabi_dadd>:
 8000d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d76:	464f      	mov	r7, r9
 8000d78:	4646      	mov	r6, r8
 8000d7a:	46d6      	mov	lr, sl
 8000d7c:	000d      	movs	r5, r1
 8000d7e:	0004      	movs	r4, r0
 8000d80:	b5c0      	push	{r6, r7, lr}
 8000d82:	001f      	movs	r7, r3
 8000d84:	0011      	movs	r1, r2
 8000d86:	0328      	lsls	r0, r5, #12
 8000d88:	0f62      	lsrs	r2, r4, #29
 8000d8a:	0a40      	lsrs	r0, r0, #9
 8000d8c:	4310      	orrs	r0, r2
 8000d8e:	007a      	lsls	r2, r7, #1
 8000d90:	0d52      	lsrs	r2, r2, #21
 8000d92:	00e3      	lsls	r3, r4, #3
 8000d94:	033c      	lsls	r4, r7, #12
 8000d96:	4691      	mov	r9, r2
 8000d98:	0a64      	lsrs	r4, r4, #9
 8000d9a:	0ffa      	lsrs	r2, r7, #31
 8000d9c:	0f4f      	lsrs	r7, r1, #29
 8000d9e:	006e      	lsls	r6, r5, #1
 8000da0:	4327      	orrs	r7, r4
 8000da2:	4692      	mov	sl, r2
 8000da4:	46b8      	mov	r8, r7
 8000da6:	0d76      	lsrs	r6, r6, #21
 8000da8:	0fed      	lsrs	r5, r5, #31
 8000daa:	00c9      	lsls	r1, r1, #3
 8000dac:	4295      	cmp	r5, r2
 8000dae:	d100      	bne.n	8000db2 <__aeabi_dadd+0x3e>
 8000db0:	e099      	b.n	8000ee6 <__aeabi_dadd+0x172>
 8000db2:	464c      	mov	r4, r9
 8000db4:	1b34      	subs	r4, r6, r4
 8000db6:	46a4      	mov	ip, r4
 8000db8:	2c00      	cmp	r4, #0
 8000dba:	dc00      	bgt.n	8000dbe <__aeabi_dadd+0x4a>
 8000dbc:	e07c      	b.n	8000eb8 <__aeabi_dadd+0x144>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	2a00      	cmp	r2, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_dadd+0x52>
 8000dc4:	e0b8      	b.n	8000f38 <__aeabi_dadd+0x1c4>
 8000dc6:	4ac5      	ldr	r2, [pc, #788]	; (80010dc <__aeabi_dadd+0x368>)
 8000dc8:	4296      	cmp	r6, r2
 8000dca:	d100      	bne.n	8000dce <__aeabi_dadd+0x5a>
 8000dcc:	e11c      	b.n	8001008 <__aeabi_dadd+0x294>
 8000dce:	2280      	movs	r2, #128	; 0x80
 8000dd0:	003c      	movs	r4, r7
 8000dd2:	0412      	lsls	r2, r2, #16
 8000dd4:	4314      	orrs	r4, r2
 8000dd6:	46a0      	mov	r8, r4
 8000dd8:	4662      	mov	r2, ip
 8000dda:	2a38      	cmp	r2, #56	; 0x38
 8000ddc:	dd00      	ble.n	8000de0 <__aeabi_dadd+0x6c>
 8000dde:	e161      	b.n	80010a4 <__aeabi_dadd+0x330>
 8000de0:	2a1f      	cmp	r2, #31
 8000de2:	dd00      	ble.n	8000de6 <__aeabi_dadd+0x72>
 8000de4:	e1cc      	b.n	8001180 <__aeabi_dadd+0x40c>
 8000de6:	4664      	mov	r4, ip
 8000de8:	2220      	movs	r2, #32
 8000dea:	1b12      	subs	r2, r2, r4
 8000dec:	4644      	mov	r4, r8
 8000dee:	4094      	lsls	r4, r2
 8000df0:	000f      	movs	r7, r1
 8000df2:	46a1      	mov	r9, r4
 8000df4:	4664      	mov	r4, ip
 8000df6:	4091      	lsls	r1, r2
 8000df8:	40e7      	lsrs	r7, r4
 8000dfa:	464c      	mov	r4, r9
 8000dfc:	1e4a      	subs	r2, r1, #1
 8000dfe:	4191      	sbcs	r1, r2
 8000e00:	433c      	orrs	r4, r7
 8000e02:	4642      	mov	r2, r8
 8000e04:	4321      	orrs	r1, r4
 8000e06:	4664      	mov	r4, ip
 8000e08:	40e2      	lsrs	r2, r4
 8000e0a:	1a80      	subs	r0, r0, r2
 8000e0c:	1a5c      	subs	r4, r3, r1
 8000e0e:	42a3      	cmp	r3, r4
 8000e10:	419b      	sbcs	r3, r3
 8000e12:	425f      	negs	r7, r3
 8000e14:	1bc7      	subs	r7, r0, r7
 8000e16:	023b      	lsls	r3, r7, #8
 8000e18:	d400      	bmi.n	8000e1c <__aeabi_dadd+0xa8>
 8000e1a:	e0d0      	b.n	8000fbe <__aeabi_dadd+0x24a>
 8000e1c:	027f      	lsls	r7, r7, #9
 8000e1e:	0a7f      	lsrs	r7, r7, #9
 8000e20:	2f00      	cmp	r7, #0
 8000e22:	d100      	bne.n	8000e26 <__aeabi_dadd+0xb2>
 8000e24:	e0ff      	b.n	8001026 <__aeabi_dadd+0x2b2>
 8000e26:	0038      	movs	r0, r7
 8000e28:	f001 fe5a 	bl	8002ae0 <__clzsi2>
 8000e2c:	0001      	movs	r1, r0
 8000e2e:	3908      	subs	r1, #8
 8000e30:	2320      	movs	r3, #32
 8000e32:	0022      	movs	r2, r4
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	408f      	lsls	r7, r1
 8000e38:	40da      	lsrs	r2, r3
 8000e3a:	408c      	lsls	r4, r1
 8000e3c:	4317      	orrs	r7, r2
 8000e3e:	42b1      	cmp	r1, r6
 8000e40:	da00      	bge.n	8000e44 <__aeabi_dadd+0xd0>
 8000e42:	e0ff      	b.n	8001044 <__aeabi_dadd+0x2d0>
 8000e44:	1b89      	subs	r1, r1, r6
 8000e46:	1c4b      	adds	r3, r1, #1
 8000e48:	2b1f      	cmp	r3, #31
 8000e4a:	dd00      	ble.n	8000e4e <__aeabi_dadd+0xda>
 8000e4c:	e0a8      	b.n	8000fa0 <__aeabi_dadd+0x22c>
 8000e4e:	2220      	movs	r2, #32
 8000e50:	0039      	movs	r1, r7
 8000e52:	1ad2      	subs	r2, r2, r3
 8000e54:	0020      	movs	r0, r4
 8000e56:	4094      	lsls	r4, r2
 8000e58:	4091      	lsls	r1, r2
 8000e5a:	40d8      	lsrs	r0, r3
 8000e5c:	1e62      	subs	r2, r4, #1
 8000e5e:	4194      	sbcs	r4, r2
 8000e60:	40df      	lsrs	r7, r3
 8000e62:	2600      	movs	r6, #0
 8000e64:	4301      	orrs	r1, r0
 8000e66:	430c      	orrs	r4, r1
 8000e68:	0763      	lsls	r3, r4, #29
 8000e6a:	d009      	beq.n	8000e80 <__aeabi_dadd+0x10c>
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	4023      	ands	r3, r4
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d005      	beq.n	8000e80 <__aeabi_dadd+0x10c>
 8000e74:	1d23      	adds	r3, r4, #4
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	41a4      	sbcs	r4, r4
 8000e7a:	4264      	negs	r4, r4
 8000e7c:	193f      	adds	r7, r7, r4
 8000e7e:	001c      	movs	r4, r3
 8000e80:	023b      	lsls	r3, r7, #8
 8000e82:	d400      	bmi.n	8000e86 <__aeabi_dadd+0x112>
 8000e84:	e09e      	b.n	8000fc4 <__aeabi_dadd+0x250>
 8000e86:	4b95      	ldr	r3, [pc, #596]	; (80010dc <__aeabi_dadd+0x368>)
 8000e88:	3601      	adds	r6, #1
 8000e8a:	429e      	cmp	r6, r3
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_dadd+0x11c>
 8000e8e:	e0b7      	b.n	8001000 <__aeabi_dadd+0x28c>
 8000e90:	4a93      	ldr	r2, [pc, #588]	; (80010e0 <__aeabi_dadd+0x36c>)
 8000e92:	08e4      	lsrs	r4, r4, #3
 8000e94:	4017      	ands	r7, r2
 8000e96:	077b      	lsls	r3, r7, #29
 8000e98:	0571      	lsls	r1, r6, #21
 8000e9a:	027f      	lsls	r7, r7, #9
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	0b3f      	lsrs	r7, r7, #12
 8000ea0:	0d4a      	lsrs	r2, r1, #21
 8000ea2:	0512      	lsls	r2, r2, #20
 8000ea4:	433a      	orrs	r2, r7
 8000ea6:	07ed      	lsls	r5, r5, #31
 8000ea8:	432a      	orrs	r2, r5
 8000eaa:	0018      	movs	r0, r3
 8000eac:	0011      	movs	r1, r2
 8000eae:	bce0      	pop	{r5, r6, r7}
 8000eb0:	46ba      	mov	sl, r7
 8000eb2:	46b1      	mov	r9, r6
 8000eb4:	46a8      	mov	r8, r5
 8000eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb8:	2c00      	cmp	r4, #0
 8000eba:	d04b      	beq.n	8000f54 <__aeabi_dadd+0x1e0>
 8000ebc:	464c      	mov	r4, r9
 8000ebe:	1ba4      	subs	r4, r4, r6
 8000ec0:	46a4      	mov	ip, r4
 8000ec2:	2e00      	cmp	r6, #0
 8000ec4:	d000      	beq.n	8000ec8 <__aeabi_dadd+0x154>
 8000ec6:	e123      	b.n	8001110 <__aeabi_dadd+0x39c>
 8000ec8:	0004      	movs	r4, r0
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_dadd+0x15c>
 8000ece:	e1af      	b.n	8001230 <__aeabi_dadd+0x4bc>
 8000ed0:	4662      	mov	r2, ip
 8000ed2:	1e54      	subs	r4, r2, #1
 8000ed4:	2a01      	cmp	r2, #1
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dadd+0x166>
 8000ed8:	e215      	b.n	8001306 <__aeabi_dadd+0x592>
 8000eda:	4d80      	ldr	r5, [pc, #512]	; (80010dc <__aeabi_dadd+0x368>)
 8000edc:	45ac      	cmp	ip, r5
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dadd+0x16e>
 8000ee0:	e1c8      	b.n	8001274 <__aeabi_dadd+0x500>
 8000ee2:	46a4      	mov	ip, r4
 8000ee4:	e11b      	b.n	800111e <__aeabi_dadd+0x3aa>
 8000ee6:	464a      	mov	r2, r9
 8000ee8:	1ab2      	subs	r2, r6, r2
 8000eea:	4694      	mov	ip, r2
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	dc00      	bgt.n	8000ef2 <__aeabi_dadd+0x17e>
 8000ef0:	e0ac      	b.n	800104c <__aeabi_dadd+0x2d8>
 8000ef2:	464a      	mov	r2, r9
 8000ef4:	2a00      	cmp	r2, #0
 8000ef6:	d043      	beq.n	8000f80 <__aeabi_dadd+0x20c>
 8000ef8:	4a78      	ldr	r2, [pc, #480]	; (80010dc <__aeabi_dadd+0x368>)
 8000efa:	4296      	cmp	r6, r2
 8000efc:	d100      	bne.n	8000f00 <__aeabi_dadd+0x18c>
 8000efe:	e1af      	b.n	8001260 <__aeabi_dadd+0x4ec>
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	003c      	movs	r4, r7
 8000f04:	0412      	lsls	r2, r2, #16
 8000f06:	4314      	orrs	r4, r2
 8000f08:	46a0      	mov	r8, r4
 8000f0a:	4662      	mov	r2, ip
 8000f0c:	2a38      	cmp	r2, #56	; 0x38
 8000f0e:	dc67      	bgt.n	8000fe0 <__aeabi_dadd+0x26c>
 8000f10:	2a1f      	cmp	r2, #31
 8000f12:	dc00      	bgt.n	8000f16 <__aeabi_dadd+0x1a2>
 8000f14:	e15f      	b.n	80011d6 <__aeabi_dadd+0x462>
 8000f16:	4647      	mov	r7, r8
 8000f18:	3a20      	subs	r2, #32
 8000f1a:	40d7      	lsrs	r7, r2
 8000f1c:	4662      	mov	r2, ip
 8000f1e:	2a20      	cmp	r2, #32
 8000f20:	d005      	beq.n	8000f2e <__aeabi_dadd+0x1ba>
 8000f22:	4664      	mov	r4, ip
 8000f24:	2240      	movs	r2, #64	; 0x40
 8000f26:	1b12      	subs	r2, r2, r4
 8000f28:	4644      	mov	r4, r8
 8000f2a:	4094      	lsls	r4, r2
 8000f2c:	4321      	orrs	r1, r4
 8000f2e:	1e4a      	subs	r2, r1, #1
 8000f30:	4191      	sbcs	r1, r2
 8000f32:	000c      	movs	r4, r1
 8000f34:	433c      	orrs	r4, r7
 8000f36:	e057      	b.n	8000fe8 <__aeabi_dadd+0x274>
 8000f38:	003a      	movs	r2, r7
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_dadd+0x1cc>
 8000f3e:	e105      	b.n	800114c <__aeabi_dadd+0x3d8>
 8000f40:	0022      	movs	r2, r4
 8000f42:	3a01      	subs	r2, #1
 8000f44:	2c01      	cmp	r4, #1
 8000f46:	d100      	bne.n	8000f4a <__aeabi_dadd+0x1d6>
 8000f48:	e182      	b.n	8001250 <__aeabi_dadd+0x4dc>
 8000f4a:	4c64      	ldr	r4, [pc, #400]	; (80010dc <__aeabi_dadd+0x368>)
 8000f4c:	45a4      	cmp	ip, r4
 8000f4e:	d05b      	beq.n	8001008 <__aeabi_dadd+0x294>
 8000f50:	4694      	mov	ip, r2
 8000f52:	e741      	b.n	8000dd8 <__aeabi_dadd+0x64>
 8000f54:	4c63      	ldr	r4, [pc, #396]	; (80010e4 <__aeabi_dadd+0x370>)
 8000f56:	1c77      	adds	r7, r6, #1
 8000f58:	4227      	tst	r7, r4
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_dadd+0x1ea>
 8000f5c:	e0c4      	b.n	80010e8 <__aeabi_dadd+0x374>
 8000f5e:	0004      	movs	r4, r0
 8000f60:	431c      	orrs	r4, r3
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	d000      	beq.n	8000f68 <__aeabi_dadd+0x1f4>
 8000f66:	e169      	b.n	800123c <__aeabi_dadd+0x4c8>
 8000f68:	2c00      	cmp	r4, #0
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_dadd+0x1fa>
 8000f6c:	e1bf      	b.n	80012ee <__aeabi_dadd+0x57a>
 8000f6e:	4644      	mov	r4, r8
 8000f70:	430c      	orrs	r4, r1
 8000f72:	d000      	beq.n	8000f76 <__aeabi_dadd+0x202>
 8000f74:	e1d0      	b.n	8001318 <__aeabi_dadd+0x5a4>
 8000f76:	0742      	lsls	r2, r0, #29
 8000f78:	08db      	lsrs	r3, r3, #3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	08c0      	lsrs	r0, r0, #3
 8000f7e:	e029      	b.n	8000fd4 <__aeabi_dadd+0x260>
 8000f80:	003a      	movs	r2, r7
 8000f82:	430a      	orrs	r2, r1
 8000f84:	d100      	bne.n	8000f88 <__aeabi_dadd+0x214>
 8000f86:	e170      	b.n	800126a <__aeabi_dadd+0x4f6>
 8000f88:	4662      	mov	r2, ip
 8000f8a:	4664      	mov	r4, ip
 8000f8c:	3a01      	subs	r2, #1
 8000f8e:	2c01      	cmp	r4, #1
 8000f90:	d100      	bne.n	8000f94 <__aeabi_dadd+0x220>
 8000f92:	e0e0      	b.n	8001156 <__aeabi_dadd+0x3e2>
 8000f94:	4c51      	ldr	r4, [pc, #324]	; (80010dc <__aeabi_dadd+0x368>)
 8000f96:	45a4      	cmp	ip, r4
 8000f98:	d100      	bne.n	8000f9c <__aeabi_dadd+0x228>
 8000f9a:	e161      	b.n	8001260 <__aeabi_dadd+0x4ec>
 8000f9c:	4694      	mov	ip, r2
 8000f9e:	e7b4      	b.n	8000f0a <__aeabi_dadd+0x196>
 8000fa0:	003a      	movs	r2, r7
 8000fa2:	391f      	subs	r1, #31
 8000fa4:	40ca      	lsrs	r2, r1
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	2b20      	cmp	r3, #32
 8000faa:	d003      	beq.n	8000fb4 <__aeabi_dadd+0x240>
 8000fac:	2240      	movs	r2, #64	; 0x40
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	409f      	lsls	r7, r3
 8000fb2:	433c      	orrs	r4, r7
 8000fb4:	1e63      	subs	r3, r4, #1
 8000fb6:	419c      	sbcs	r4, r3
 8000fb8:	2700      	movs	r7, #0
 8000fba:	2600      	movs	r6, #0
 8000fbc:	430c      	orrs	r4, r1
 8000fbe:	0763      	lsls	r3, r4, #29
 8000fc0:	d000      	beq.n	8000fc4 <__aeabi_dadd+0x250>
 8000fc2:	e753      	b.n	8000e6c <__aeabi_dadd+0xf8>
 8000fc4:	46b4      	mov	ip, r6
 8000fc6:	08e4      	lsrs	r4, r4, #3
 8000fc8:	077b      	lsls	r3, r7, #29
 8000fca:	4323      	orrs	r3, r4
 8000fcc:	08f8      	lsrs	r0, r7, #3
 8000fce:	4a43      	ldr	r2, [pc, #268]	; (80010dc <__aeabi_dadd+0x368>)
 8000fd0:	4594      	cmp	ip, r2
 8000fd2:	d01d      	beq.n	8001010 <__aeabi_dadd+0x29c>
 8000fd4:	4662      	mov	r2, ip
 8000fd6:	0307      	lsls	r7, r0, #12
 8000fd8:	0552      	lsls	r2, r2, #21
 8000fda:	0b3f      	lsrs	r7, r7, #12
 8000fdc:	0d52      	lsrs	r2, r2, #21
 8000fde:	e760      	b.n	8000ea2 <__aeabi_dadd+0x12e>
 8000fe0:	4644      	mov	r4, r8
 8000fe2:	430c      	orrs	r4, r1
 8000fe4:	1e62      	subs	r2, r4, #1
 8000fe6:	4194      	sbcs	r4, r2
 8000fe8:	18e4      	adds	r4, r4, r3
 8000fea:	429c      	cmp	r4, r3
 8000fec:	419b      	sbcs	r3, r3
 8000fee:	425f      	negs	r7, r3
 8000ff0:	183f      	adds	r7, r7, r0
 8000ff2:	023b      	lsls	r3, r7, #8
 8000ff4:	d5e3      	bpl.n	8000fbe <__aeabi_dadd+0x24a>
 8000ff6:	4b39      	ldr	r3, [pc, #228]	; (80010dc <__aeabi_dadd+0x368>)
 8000ff8:	3601      	adds	r6, #1
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d000      	beq.n	8001000 <__aeabi_dadd+0x28c>
 8000ffe:	e0b5      	b.n	800116c <__aeabi_dadd+0x3f8>
 8001000:	0032      	movs	r2, r6
 8001002:	2700      	movs	r7, #0
 8001004:	2300      	movs	r3, #0
 8001006:	e74c      	b.n	8000ea2 <__aeabi_dadd+0x12e>
 8001008:	0742      	lsls	r2, r0, #29
 800100a:	08db      	lsrs	r3, r3, #3
 800100c:	4313      	orrs	r3, r2
 800100e:	08c0      	lsrs	r0, r0, #3
 8001010:	001a      	movs	r2, r3
 8001012:	4302      	orrs	r2, r0
 8001014:	d100      	bne.n	8001018 <__aeabi_dadd+0x2a4>
 8001016:	e1e1      	b.n	80013dc <__aeabi_dadd+0x668>
 8001018:	2780      	movs	r7, #128	; 0x80
 800101a:	033f      	lsls	r7, r7, #12
 800101c:	4307      	orrs	r7, r0
 800101e:	033f      	lsls	r7, r7, #12
 8001020:	4a2e      	ldr	r2, [pc, #184]	; (80010dc <__aeabi_dadd+0x368>)
 8001022:	0b3f      	lsrs	r7, r7, #12
 8001024:	e73d      	b.n	8000ea2 <__aeabi_dadd+0x12e>
 8001026:	0020      	movs	r0, r4
 8001028:	f001 fd5a 	bl	8002ae0 <__clzsi2>
 800102c:	0001      	movs	r1, r0
 800102e:	3118      	adds	r1, #24
 8001030:	291f      	cmp	r1, #31
 8001032:	dc00      	bgt.n	8001036 <__aeabi_dadd+0x2c2>
 8001034:	e6fc      	b.n	8000e30 <__aeabi_dadd+0xbc>
 8001036:	3808      	subs	r0, #8
 8001038:	4084      	lsls	r4, r0
 800103a:	0027      	movs	r7, r4
 800103c:	2400      	movs	r4, #0
 800103e:	42b1      	cmp	r1, r6
 8001040:	db00      	blt.n	8001044 <__aeabi_dadd+0x2d0>
 8001042:	e6ff      	b.n	8000e44 <__aeabi_dadd+0xd0>
 8001044:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <__aeabi_dadd+0x36c>)
 8001046:	1a76      	subs	r6, r6, r1
 8001048:	4017      	ands	r7, r2
 800104a:	e70d      	b.n	8000e68 <__aeabi_dadd+0xf4>
 800104c:	2a00      	cmp	r2, #0
 800104e:	d02f      	beq.n	80010b0 <__aeabi_dadd+0x33c>
 8001050:	464a      	mov	r2, r9
 8001052:	1b92      	subs	r2, r2, r6
 8001054:	4694      	mov	ip, r2
 8001056:	2e00      	cmp	r6, #0
 8001058:	d100      	bne.n	800105c <__aeabi_dadd+0x2e8>
 800105a:	e0ad      	b.n	80011b8 <__aeabi_dadd+0x444>
 800105c:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <__aeabi_dadd+0x368>)
 800105e:	4591      	cmp	r9, r2
 8001060:	d100      	bne.n	8001064 <__aeabi_dadd+0x2f0>
 8001062:	e10f      	b.n	8001284 <__aeabi_dadd+0x510>
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	0412      	lsls	r2, r2, #16
 8001068:	4310      	orrs	r0, r2
 800106a:	4662      	mov	r2, ip
 800106c:	2a38      	cmp	r2, #56	; 0x38
 800106e:	dd00      	ble.n	8001072 <__aeabi_dadd+0x2fe>
 8001070:	e10f      	b.n	8001292 <__aeabi_dadd+0x51e>
 8001072:	2a1f      	cmp	r2, #31
 8001074:	dd00      	ble.n	8001078 <__aeabi_dadd+0x304>
 8001076:	e180      	b.n	800137a <__aeabi_dadd+0x606>
 8001078:	4664      	mov	r4, ip
 800107a:	2220      	movs	r2, #32
 800107c:	001e      	movs	r6, r3
 800107e:	1b12      	subs	r2, r2, r4
 8001080:	4667      	mov	r7, ip
 8001082:	0004      	movs	r4, r0
 8001084:	4093      	lsls	r3, r2
 8001086:	4094      	lsls	r4, r2
 8001088:	40fe      	lsrs	r6, r7
 800108a:	1e5a      	subs	r2, r3, #1
 800108c:	4193      	sbcs	r3, r2
 800108e:	40f8      	lsrs	r0, r7
 8001090:	4334      	orrs	r4, r6
 8001092:	431c      	orrs	r4, r3
 8001094:	4480      	add	r8, r0
 8001096:	1864      	adds	r4, r4, r1
 8001098:	428c      	cmp	r4, r1
 800109a:	41bf      	sbcs	r7, r7
 800109c:	427f      	negs	r7, r7
 800109e:	464e      	mov	r6, r9
 80010a0:	4447      	add	r7, r8
 80010a2:	e7a6      	b.n	8000ff2 <__aeabi_dadd+0x27e>
 80010a4:	4642      	mov	r2, r8
 80010a6:	430a      	orrs	r2, r1
 80010a8:	0011      	movs	r1, r2
 80010aa:	1e4a      	subs	r2, r1, #1
 80010ac:	4191      	sbcs	r1, r2
 80010ae:	e6ad      	b.n	8000e0c <__aeabi_dadd+0x98>
 80010b0:	4c0c      	ldr	r4, [pc, #48]	; (80010e4 <__aeabi_dadd+0x370>)
 80010b2:	1c72      	adds	r2, r6, #1
 80010b4:	4222      	tst	r2, r4
 80010b6:	d000      	beq.n	80010ba <__aeabi_dadd+0x346>
 80010b8:	e0a1      	b.n	80011fe <__aeabi_dadd+0x48a>
 80010ba:	0002      	movs	r2, r0
 80010bc:	431a      	orrs	r2, r3
 80010be:	2e00      	cmp	r6, #0
 80010c0:	d000      	beq.n	80010c4 <__aeabi_dadd+0x350>
 80010c2:	e0fa      	b.n	80012ba <__aeabi_dadd+0x546>
 80010c4:	2a00      	cmp	r2, #0
 80010c6:	d100      	bne.n	80010ca <__aeabi_dadd+0x356>
 80010c8:	e145      	b.n	8001356 <__aeabi_dadd+0x5e2>
 80010ca:	003a      	movs	r2, r7
 80010cc:	430a      	orrs	r2, r1
 80010ce:	d000      	beq.n	80010d2 <__aeabi_dadd+0x35e>
 80010d0:	e146      	b.n	8001360 <__aeabi_dadd+0x5ec>
 80010d2:	0742      	lsls	r2, r0, #29
 80010d4:	08db      	lsrs	r3, r3, #3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	08c0      	lsrs	r0, r0, #3
 80010da:	e77b      	b.n	8000fd4 <__aeabi_dadd+0x260>
 80010dc:	000007ff 	.word	0x000007ff
 80010e0:	ff7fffff 	.word	0xff7fffff
 80010e4:	000007fe 	.word	0x000007fe
 80010e8:	4647      	mov	r7, r8
 80010ea:	1a5c      	subs	r4, r3, r1
 80010ec:	1bc2      	subs	r2, r0, r7
 80010ee:	42a3      	cmp	r3, r4
 80010f0:	41bf      	sbcs	r7, r7
 80010f2:	427f      	negs	r7, r7
 80010f4:	46b9      	mov	r9, r7
 80010f6:	0017      	movs	r7, r2
 80010f8:	464a      	mov	r2, r9
 80010fa:	1abf      	subs	r7, r7, r2
 80010fc:	023a      	lsls	r2, r7, #8
 80010fe:	d500      	bpl.n	8001102 <__aeabi_dadd+0x38e>
 8001100:	e08d      	b.n	800121e <__aeabi_dadd+0x4aa>
 8001102:	0023      	movs	r3, r4
 8001104:	433b      	orrs	r3, r7
 8001106:	d000      	beq.n	800110a <__aeabi_dadd+0x396>
 8001108:	e68a      	b.n	8000e20 <__aeabi_dadd+0xac>
 800110a:	2000      	movs	r0, #0
 800110c:	2500      	movs	r5, #0
 800110e:	e761      	b.n	8000fd4 <__aeabi_dadd+0x260>
 8001110:	4cb4      	ldr	r4, [pc, #720]	; (80013e4 <__aeabi_dadd+0x670>)
 8001112:	45a1      	cmp	r9, r4
 8001114:	d100      	bne.n	8001118 <__aeabi_dadd+0x3a4>
 8001116:	e0ad      	b.n	8001274 <__aeabi_dadd+0x500>
 8001118:	2480      	movs	r4, #128	; 0x80
 800111a:	0424      	lsls	r4, r4, #16
 800111c:	4320      	orrs	r0, r4
 800111e:	4664      	mov	r4, ip
 8001120:	2c38      	cmp	r4, #56	; 0x38
 8001122:	dc3d      	bgt.n	80011a0 <__aeabi_dadd+0x42c>
 8001124:	4662      	mov	r2, ip
 8001126:	2c1f      	cmp	r4, #31
 8001128:	dd00      	ble.n	800112c <__aeabi_dadd+0x3b8>
 800112a:	e0b7      	b.n	800129c <__aeabi_dadd+0x528>
 800112c:	2520      	movs	r5, #32
 800112e:	001e      	movs	r6, r3
 8001130:	1b2d      	subs	r5, r5, r4
 8001132:	0004      	movs	r4, r0
 8001134:	40ab      	lsls	r3, r5
 8001136:	40ac      	lsls	r4, r5
 8001138:	40d6      	lsrs	r6, r2
 800113a:	40d0      	lsrs	r0, r2
 800113c:	4642      	mov	r2, r8
 800113e:	1e5d      	subs	r5, r3, #1
 8001140:	41ab      	sbcs	r3, r5
 8001142:	4334      	orrs	r4, r6
 8001144:	1a12      	subs	r2, r2, r0
 8001146:	4690      	mov	r8, r2
 8001148:	4323      	orrs	r3, r4
 800114a:	e02c      	b.n	80011a6 <__aeabi_dadd+0x432>
 800114c:	0742      	lsls	r2, r0, #29
 800114e:	08db      	lsrs	r3, r3, #3
 8001150:	4313      	orrs	r3, r2
 8001152:	08c0      	lsrs	r0, r0, #3
 8001154:	e73b      	b.n	8000fce <__aeabi_dadd+0x25a>
 8001156:	185c      	adds	r4, r3, r1
 8001158:	429c      	cmp	r4, r3
 800115a:	419b      	sbcs	r3, r3
 800115c:	4440      	add	r0, r8
 800115e:	425b      	negs	r3, r3
 8001160:	18c7      	adds	r7, r0, r3
 8001162:	2601      	movs	r6, #1
 8001164:	023b      	lsls	r3, r7, #8
 8001166:	d400      	bmi.n	800116a <__aeabi_dadd+0x3f6>
 8001168:	e729      	b.n	8000fbe <__aeabi_dadd+0x24a>
 800116a:	2602      	movs	r6, #2
 800116c:	4a9e      	ldr	r2, [pc, #632]	; (80013e8 <__aeabi_dadd+0x674>)
 800116e:	0863      	lsrs	r3, r4, #1
 8001170:	4017      	ands	r7, r2
 8001172:	2201      	movs	r2, #1
 8001174:	4014      	ands	r4, r2
 8001176:	431c      	orrs	r4, r3
 8001178:	07fb      	lsls	r3, r7, #31
 800117a:	431c      	orrs	r4, r3
 800117c:	087f      	lsrs	r7, r7, #1
 800117e:	e673      	b.n	8000e68 <__aeabi_dadd+0xf4>
 8001180:	4644      	mov	r4, r8
 8001182:	3a20      	subs	r2, #32
 8001184:	40d4      	lsrs	r4, r2
 8001186:	4662      	mov	r2, ip
 8001188:	2a20      	cmp	r2, #32
 800118a:	d005      	beq.n	8001198 <__aeabi_dadd+0x424>
 800118c:	4667      	mov	r7, ip
 800118e:	2240      	movs	r2, #64	; 0x40
 8001190:	1bd2      	subs	r2, r2, r7
 8001192:	4647      	mov	r7, r8
 8001194:	4097      	lsls	r7, r2
 8001196:	4339      	orrs	r1, r7
 8001198:	1e4a      	subs	r2, r1, #1
 800119a:	4191      	sbcs	r1, r2
 800119c:	4321      	orrs	r1, r4
 800119e:	e635      	b.n	8000e0c <__aeabi_dadd+0x98>
 80011a0:	4303      	orrs	r3, r0
 80011a2:	1e58      	subs	r0, r3, #1
 80011a4:	4183      	sbcs	r3, r0
 80011a6:	1acc      	subs	r4, r1, r3
 80011a8:	42a1      	cmp	r1, r4
 80011aa:	41bf      	sbcs	r7, r7
 80011ac:	4643      	mov	r3, r8
 80011ae:	427f      	negs	r7, r7
 80011b0:	4655      	mov	r5, sl
 80011b2:	464e      	mov	r6, r9
 80011b4:	1bdf      	subs	r7, r3, r7
 80011b6:	e62e      	b.n	8000e16 <__aeabi_dadd+0xa2>
 80011b8:	0002      	movs	r2, r0
 80011ba:	431a      	orrs	r2, r3
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x44c>
 80011be:	e0bd      	b.n	800133c <__aeabi_dadd+0x5c8>
 80011c0:	4662      	mov	r2, ip
 80011c2:	4664      	mov	r4, ip
 80011c4:	3a01      	subs	r2, #1
 80011c6:	2c01      	cmp	r4, #1
 80011c8:	d100      	bne.n	80011cc <__aeabi_dadd+0x458>
 80011ca:	e0e5      	b.n	8001398 <__aeabi_dadd+0x624>
 80011cc:	4c85      	ldr	r4, [pc, #532]	; (80013e4 <__aeabi_dadd+0x670>)
 80011ce:	45a4      	cmp	ip, r4
 80011d0:	d058      	beq.n	8001284 <__aeabi_dadd+0x510>
 80011d2:	4694      	mov	ip, r2
 80011d4:	e749      	b.n	800106a <__aeabi_dadd+0x2f6>
 80011d6:	4664      	mov	r4, ip
 80011d8:	2220      	movs	r2, #32
 80011da:	1b12      	subs	r2, r2, r4
 80011dc:	4644      	mov	r4, r8
 80011de:	4094      	lsls	r4, r2
 80011e0:	000f      	movs	r7, r1
 80011e2:	46a1      	mov	r9, r4
 80011e4:	4664      	mov	r4, ip
 80011e6:	4091      	lsls	r1, r2
 80011e8:	40e7      	lsrs	r7, r4
 80011ea:	464c      	mov	r4, r9
 80011ec:	1e4a      	subs	r2, r1, #1
 80011ee:	4191      	sbcs	r1, r2
 80011f0:	433c      	orrs	r4, r7
 80011f2:	4642      	mov	r2, r8
 80011f4:	430c      	orrs	r4, r1
 80011f6:	4661      	mov	r1, ip
 80011f8:	40ca      	lsrs	r2, r1
 80011fa:	1880      	adds	r0, r0, r2
 80011fc:	e6f4      	b.n	8000fe8 <__aeabi_dadd+0x274>
 80011fe:	4c79      	ldr	r4, [pc, #484]	; (80013e4 <__aeabi_dadd+0x670>)
 8001200:	42a2      	cmp	r2, r4
 8001202:	d100      	bne.n	8001206 <__aeabi_dadd+0x492>
 8001204:	e6fd      	b.n	8001002 <__aeabi_dadd+0x28e>
 8001206:	1859      	adds	r1, r3, r1
 8001208:	4299      	cmp	r1, r3
 800120a:	419b      	sbcs	r3, r3
 800120c:	4440      	add	r0, r8
 800120e:	425f      	negs	r7, r3
 8001210:	19c7      	adds	r7, r0, r7
 8001212:	07fc      	lsls	r4, r7, #31
 8001214:	0849      	lsrs	r1, r1, #1
 8001216:	0016      	movs	r6, r2
 8001218:	430c      	orrs	r4, r1
 800121a:	087f      	lsrs	r7, r7, #1
 800121c:	e6cf      	b.n	8000fbe <__aeabi_dadd+0x24a>
 800121e:	1acc      	subs	r4, r1, r3
 8001220:	42a1      	cmp	r1, r4
 8001222:	41bf      	sbcs	r7, r7
 8001224:	4643      	mov	r3, r8
 8001226:	427f      	negs	r7, r7
 8001228:	1a18      	subs	r0, r3, r0
 800122a:	4655      	mov	r5, sl
 800122c:	1bc7      	subs	r7, r0, r7
 800122e:	e5f7      	b.n	8000e20 <__aeabi_dadd+0xac>
 8001230:	08c9      	lsrs	r1, r1, #3
 8001232:	077b      	lsls	r3, r7, #29
 8001234:	4655      	mov	r5, sl
 8001236:	430b      	orrs	r3, r1
 8001238:	08f8      	lsrs	r0, r7, #3
 800123a:	e6c8      	b.n	8000fce <__aeabi_dadd+0x25a>
 800123c:	2c00      	cmp	r4, #0
 800123e:	d000      	beq.n	8001242 <__aeabi_dadd+0x4ce>
 8001240:	e081      	b.n	8001346 <__aeabi_dadd+0x5d2>
 8001242:	4643      	mov	r3, r8
 8001244:	430b      	orrs	r3, r1
 8001246:	d115      	bne.n	8001274 <__aeabi_dadd+0x500>
 8001248:	2080      	movs	r0, #128	; 0x80
 800124a:	2500      	movs	r5, #0
 800124c:	0300      	lsls	r0, r0, #12
 800124e:	e6e3      	b.n	8001018 <__aeabi_dadd+0x2a4>
 8001250:	1a5c      	subs	r4, r3, r1
 8001252:	42a3      	cmp	r3, r4
 8001254:	419b      	sbcs	r3, r3
 8001256:	1bc7      	subs	r7, r0, r7
 8001258:	425b      	negs	r3, r3
 800125a:	2601      	movs	r6, #1
 800125c:	1aff      	subs	r7, r7, r3
 800125e:	e5da      	b.n	8000e16 <__aeabi_dadd+0xa2>
 8001260:	0742      	lsls	r2, r0, #29
 8001262:	08db      	lsrs	r3, r3, #3
 8001264:	4313      	orrs	r3, r2
 8001266:	08c0      	lsrs	r0, r0, #3
 8001268:	e6d2      	b.n	8001010 <__aeabi_dadd+0x29c>
 800126a:	0742      	lsls	r2, r0, #29
 800126c:	08db      	lsrs	r3, r3, #3
 800126e:	4313      	orrs	r3, r2
 8001270:	08c0      	lsrs	r0, r0, #3
 8001272:	e6ac      	b.n	8000fce <__aeabi_dadd+0x25a>
 8001274:	4643      	mov	r3, r8
 8001276:	4642      	mov	r2, r8
 8001278:	08c9      	lsrs	r1, r1, #3
 800127a:	075b      	lsls	r3, r3, #29
 800127c:	4655      	mov	r5, sl
 800127e:	430b      	orrs	r3, r1
 8001280:	08d0      	lsrs	r0, r2, #3
 8001282:	e6c5      	b.n	8001010 <__aeabi_dadd+0x29c>
 8001284:	4643      	mov	r3, r8
 8001286:	4642      	mov	r2, r8
 8001288:	075b      	lsls	r3, r3, #29
 800128a:	08c9      	lsrs	r1, r1, #3
 800128c:	430b      	orrs	r3, r1
 800128e:	08d0      	lsrs	r0, r2, #3
 8001290:	e6be      	b.n	8001010 <__aeabi_dadd+0x29c>
 8001292:	4303      	orrs	r3, r0
 8001294:	001c      	movs	r4, r3
 8001296:	1e63      	subs	r3, r4, #1
 8001298:	419c      	sbcs	r4, r3
 800129a:	e6fc      	b.n	8001096 <__aeabi_dadd+0x322>
 800129c:	0002      	movs	r2, r0
 800129e:	3c20      	subs	r4, #32
 80012a0:	40e2      	lsrs	r2, r4
 80012a2:	0014      	movs	r4, r2
 80012a4:	4662      	mov	r2, ip
 80012a6:	2a20      	cmp	r2, #32
 80012a8:	d003      	beq.n	80012b2 <__aeabi_dadd+0x53e>
 80012aa:	2540      	movs	r5, #64	; 0x40
 80012ac:	1aad      	subs	r5, r5, r2
 80012ae:	40a8      	lsls	r0, r5
 80012b0:	4303      	orrs	r3, r0
 80012b2:	1e58      	subs	r0, r3, #1
 80012b4:	4183      	sbcs	r3, r0
 80012b6:	4323      	orrs	r3, r4
 80012b8:	e775      	b.n	80011a6 <__aeabi_dadd+0x432>
 80012ba:	2a00      	cmp	r2, #0
 80012bc:	d0e2      	beq.n	8001284 <__aeabi_dadd+0x510>
 80012be:	003a      	movs	r2, r7
 80012c0:	430a      	orrs	r2, r1
 80012c2:	d0cd      	beq.n	8001260 <__aeabi_dadd+0x4ec>
 80012c4:	0742      	lsls	r2, r0, #29
 80012c6:	08db      	lsrs	r3, r3, #3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	08c0      	lsrs	r0, r0, #3
 80012ce:	0312      	lsls	r2, r2, #12
 80012d0:	4210      	tst	r0, r2
 80012d2:	d006      	beq.n	80012e2 <__aeabi_dadd+0x56e>
 80012d4:	08fc      	lsrs	r4, r7, #3
 80012d6:	4214      	tst	r4, r2
 80012d8:	d103      	bne.n	80012e2 <__aeabi_dadd+0x56e>
 80012da:	0020      	movs	r0, r4
 80012dc:	08cb      	lsrs	r3, r1, #3
 80012de:	077a      	lsls	r2, r7, #29
 80012e0:	4313      	orrs	r3, r2
 80012e2:	0f5a      	lsrs	r2, r3, #29
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	0752      	lsls	r2, r2, #29
 80012e8:	08db      	lsrs	r3, r3, #3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	e690      	b.n	8001010 <__aeabi_dadd+0x29c>
 80012ee:	4643      	mov	r3, r8
 80012f0:	430b      	orrs	r3, r1
 80012f2:	d100      	bne.n	80012f6 <__aeabi_dadd+0x582>
 80012f4:	e709      	b.n	800110a <__aeabi_dadd+0x396>
 80012f6:	4643      	mov	r3, r8
 80012f8:	4642      	mov	r2, r8
 80012fa:	08c9      	lsrs	r1, r1, #3
 80012fc:	075b      	lsls	r3, r3, #29
 80012fe:	4655      	mov	r5, sl
 8001300:	430b      	orrs	r3, r1
 8001302:	08d0      	lsrs	r0, r2, #3
 8001304:	e666      	b.n	8000fd4 <__aeabi_dadd+0x260>
 8001306:	1acc      	subs	r4, r1, r3
 8001308:	42a1      	cmp	r1, r4
 800130a:	4189      	sbcs	r1, r1
 800130c:	1a3f      	subs	r7, r7, r0
 800130e:	4249      	negs	r1, r1
 8001310:	4655      	mov	r5, sl
 8001312:	2601      	movs	r6, #1
 8001314:	1a7f      	subs	r7, r7, r1
 8001316:	e57e      	b.n	8000e16 <__aeabi_dadd+0xa2>
 8001318:	4642      	mov	r2, r8
 800131a:	1a5c      	subs	r4, r3, r1
 800131c:	1a87      	subs	r7, r0, r2
 800131e:	42a3      	cmp	r3, r4
 8001320:	4192      	sbcs	r2, r2
 8001322:	4252      	negs	r2, r2
 8001324:	1abf      	subs	r7, r7, r2
 8001326:	023a      	lsls	r2, r7, #8
 8001328:	d53d      	bpl.n	80013a6 <__aeabi_dadd+0x632>
 800132a:	1acc      	subs	r4, r1, r3
 800132c:	42a1      	cmp	r1, r4
 800132e:	4189      	sbcs	r1, r1
 8001330:	4643      	mov	r3, r8
 8001332:	4249      	negs	r1, r1
 8001334:	1a1f      	subs	r7, r3, r0
 8001336:	4655      	mov	r5, sl
 8001338:	1a7f      	subs	r7, r7, r1
 800133a:	e595      	b.n	8000e68 <__aeabi_dadd+0xf4>
 800133c:	077b      	lsls	r3, r7, #29
 800133e:	08c9      	lsrs	r1, r1, #3
 8001340:	430b      	orrs	r3, r1
 8001342:	08f8      	lsrs	r0, r7, #3
 8001344:	e643      	b.n	8000fce <__aeabi_dadd+0x25a>
 8001346:	4644      	mov	r4, r8
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	430c      	orrs	r4, r1
 800134c:	d130      	bne.n	80013b0 <__aeabi_dadd+0x63c>
 800134e:	0742      	lsls	r2, r0, #29
 8001350:	4313      	orrs	r3, r2
 8001352:	08c0      	lsrs	r0, r0, #3
 8001354:	e65c      	b.n	8001010 <__aeabi_dadd+0x29c>
 8001356:	077b      	lsls	r3, r7, #29
 8001358:	08c9      	lsrs	r1, r1, #3
 800135a:	430b      	orrs	r3, r1
 800135c:	08f8      	lsrs	r0, r7, #3
 800135e:	e639      	b.n	8000fd4 <__aeabi_dadd+0x260>
 8001360:	185c      	adds	r4, r3, r1
 8001362:	429c      	cmp	r4, r3
 8001364:	419b      	sbcs	r3, r3
 8001366:	4440      	add	r0, r8
 8001368:	425b      	negs	r3, r3
 800136a:	18c7      	adds	r7, r0, r3
 800136c:	023b      	lsls	r3, r7, #8
 800136e:	d400      	bmi.n	8001372 <__aeabi_dadd+0x5fe>
 8001370:	e625      	b.n	8000fbe <__aeabi_dadd+0x24a>
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <__aeabi_dadd+0x674>)
 8001374:	2601      	movs	r6, #1
 8001376:	401f      	ands	r7, r3
 8001378:	e621      	b.n	8000fbe <__aeabi_dadd+0x24a>
 800137a:	0004      	movs	r4, r0
 800137c:	3a20      	subs	r2, #32
 800137e:	40d4      	lsrs	r4, r2
 8001380:	4662      	mov	r2, ip
 8001382:	2a20      	cmp	r2, #32
 8001384:	d004      	beq.n	8001390 <__aeabi_dadd+0x61c>
 8001386:	2240      	movs	r2, #64	; 0x40
 8001388:	4666      	mov	r6, ip
 800138a:	1b92      	subs	r2, r2, r6
 800138c:	4090      	lsls	r0, r2
 800138e:	4303      	orrs	r3, r0
 8001390:	1e5a      	subs	r2, r3, #1
 8001392:	4193      	sbcs	r3, r2
 8001394:	431c      	orrs	r4, r3
 8001396:	e67e      	b.n	8001096 <__aeabi_dadd+0x322>
 8001398:	185c      	adds	r4, r3, r1
 800139a:	428c      	cmp	r4, r1
 800139c:	4189      	sbcs	r1, r1
 800139e:	4440      	add	r0, r8
 80013a0:	4249      	negs	r1, r1
 80013a2:	1847      	adds	r7, r0, r1
 80013a4:	e6dd      	b.n	8001162 <__aeabi_dadd+0x3ee>
 80013a6:	0023      	movs	r3, r4
 80013a8:	433b      	orrs	r3, r7
 80013aa:	d100      	bne.n	80013ae <__aeabi_dadd+0x63a>
 80013ac:	e6ad      	b.n	800110a <__aeabi_dadd+0x396>
 80013ae:	e606      	b.n	8000fbe <__aeabi_dadd+0x24a>
 80013b0:	0744      	lsls	r4, r0, #29
 80013b2:	4323      	orrs	r3, r4
 80013b4:	2480      	movs	r4, #128	; 0x80
 80013b6:	08c0      	lsrs	r0, r0, #3
 80013b8:	0324      	lsls	r4, r4, #12
 80013ba:	4220      	tst	r0, r4
 80013bc:	d008      	beq.n	80013d0 <__aeabi_dadd+0x65c>
 80013be:	4642      	mov	r2, r8
 80013c0:	08d6      	lsrs	r6, r2, #3
 80013c2:	4226      	tst	r6, r4
 80013c4:	d104      	bne.n	80013d0 <__aeabi_dadd+0x65c>
 80013c6:	4655      	mov	r5, sl
 80013c8:	0030      	movs	r0, r6
 80013ca:	08cb      	lsrs	r3, r1, #3
 80013cc:	0751      	lsls	r1, r2, #29
 80013ce:	430b      	orrs	r3, r1
 80013d0:	0f5a      	lsrs	r2, r3, #29
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	08db      	lsrs	r3, r3, #3
 80013d6:	0752      	lsls	r2, r2, #29
 80013d8:	4313      	orrs	r3, r2
 80013da:	e619      	b.n	8001010 <__aeabi_dadd+0x29c>
 80013dc:	2300      	movs	r3, #0
 80013de:	4a01      	ldr	r2, [pc, #4]	; (80013e4 <__aeabi_dadd+0x670>)
 80013e0:	001f      	movs	r7, r3
 80013e2:	e55e      	b.n	8000ea2 <__aeabi_dadd+0x12e>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff

080013ec <__aeabi_ddiv>:
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ee:	4657      	mov	r7, sl
 80013f0:	464e      	mov	r6, r9
 80013f2:	4645      	mov	r5, r8
 80013f4:	46de      	mov	lr, fp
 80013f6:	b5e0      	push	{r5, r6, r7, lr}
 80013f8:	4681      	mov	r9, r0
 80013fa:	0005      	movs	r5, r0
 80013fc:	030c      	lsls	r4, r1, #12
 80013fe:	0048      	lsls	r0, r1, #1
 8001400:	4692      	mov	sl, r2
 8001402:	001f      	movs	r7, r3
 8001404:	b085      	sub	sp, #20
 8001406:	0b24      	lsrs	r4, r4, #12
 8001408:	0d40      	lsrs	r0, r0, #21
 800140a:	0fce      	lsrs	r6, r1, #31
 800140c:	2800      	cmp	r0, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_ddiv+0x26>
 8001410:	e156      	b.n	80016c0 <__aeabi_ddiv+0x2d4>
 8001412:	4bd4      	ldr	r3, [pc, #848]	; (8001764 <__aeabi_ddiv+0x378>)
 8001414:	4298      	cmp	r0, r3
 8001416:	d100      	bne.n	800141a <__aeabi_ddiv+0x2e>
 8001418:	e172      	b.n	8001700 <__aeabi_ddiv+0x314>
 800141a:	0f6b      	lsrs	r3, r5, #29
 800141c:	00e4      	lsls	r4, r4, #3
 800141e:	431c      	orrs	r4, r3
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	041b      	lsls	r3, r3, #16
 8001424:	4323      	orrs	r3, r4
 8001426:	4698      	mov	r8, r3
 8001428:	4bcf      	ldr	r3, [pc, #828]	; (8001768 <__aeabi_ddiv+0x37c>)
 800142a:	00ed      	lsls	r5, r5, #3
 800142c:	469b      	mov	fp, r3
 800142e:	2300      	movs	r3, #0
 8001430:	4699      	mov	r9, r3
 8001432:	4483      	add	fp, r0
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	033c      	lsls	r4, r7, #12
 8001438:	007b      	lsls	r3, r7, #1
 800143a:	4650      	mov	r0, sl
 800143c:	0b24      	lsrs	r4, r4, #12
 800143e:	0d5b      	lsrs	r3, r3, #21
 8001440:	0fff      	lsrs	r7, r7, #31
 8001442:	2b00      	cmp	r3, #0
 8001444:	d100      	bne.n	8001448 <__aeabi_ddiv+0x5c>
 8001446:	e11f      	b.n	8001688 <__aeabi_ddiv+0x29c>
 8001448:	4ac6      	ldr	r2, [pc, #792]	; (8001764 <__aeabi_ddiv+0x378>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d100      	bne.n	8001450 <__aeabi_ddiv+0x64>
 800144e:	e162      	b.n	8001716 <__aeabi_ddiv+0x32a>
 8001450:	49c5      	ldr	r1, [pc, #788]	; (8001768 <__aeabi_ddiv+0x37c>)
 8001452:	0f42      	lsrs	r2, r0, #29
 8001454:	468c      	mov	ip, r1
 8001456:	00e4      	lsls	r4, r4, #3
 8001458:	4659      	mov	r1, fp
 800145a:	4314      	orrs	r4, r2
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	4463      	add	r3, ip
 8001460:	0412      	lsls	r2, r2, #16
 8001462:	1acb      	subs	r3, r1, r3
 8001464:	4314      	orrs	r4, r2
 8001466:	469b      	mov	fp, r3
 8001468:	00c2      	lsls	r2, r0, #3
 800146a:	2000      	movs	r0, #0
 800146c:	0033      	movs	r3, r6
 800146e:	407b      	eors	r3, r7
 8001470:	469a      	mov	sl, r3
 8001472:	464b      	mov	r3, r9
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d827      	bhi.n	80014c8 <__aeabi_ddiv+0xdc>
 8001478:	49bc      	ldr	r1, [pc, #752]	; (800176c <__aeabi_ddiv+0x380>)
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	58cb      	ldr	r3, [r1, r3]
 800147e:	469f      	mov	pc, r3
 8001480:	46b2      	mov	sl, r6
 8001482:	9b00      	ldr	r3, [sp, #0]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d016      	beq.n	80014b6 <__aeabi_ddiv+0xca>
 8001488:	2b03      	cmp	r3, #3
 800148a:	d100      	bne.n	800148e <__aeabi_ddiv+0xa2>
 800148c:	e28e      	b.n	80019ac <__aeabi_ddiv+0x5c0>
 800148e:	2b01      	cmp	r3, #1
 8001490:	d000      	beq.n	8001494 <__aeabi_ddiv+0xa8>
 8001492:	e0d9      	b.n	8001648 <__aeabi_ddiv+0x25c>
 8001494:	2300      	movs	r3, #0
 8001496:	2400      	movs	r4, #0
 8001498:	2500      	movs	r5, #0
 800149a:	4652      	mov	r2, sl
 800149c:	051b      	lsls	r3, r3, #20
 800149e:	4323      	orrs	r3, r4
 80014a0:	07d2      	lsls	r2, r2, #31
 80014a2:	4313      	orrs	r3, r2
 80014a4:	0028      	movs	r0, r5
 80014a6:	0019      	movs	r1, r3
 80014a8:	b005      	add	sp, #20
 80014aa:	bcf0      	pop	{r4, r5, r6, r7}
 80014ac:	46bb      	mov	fp, r7
 80014ae:	46b2      	mov	sl, r6
 80014b0:	46a9      	mov	r9, r5
 80014b2:	46a0      	mov	r8, r4
 80014b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b6:	2400      	movs	r4, #0
 80014b8:	2500      	movs	r5, #0
 80014ba:	4baa      	ldr	r3, [pc, #680]	; (8001764 <__aeabi_ddiv+0x378>)
 80014bc:	e7ed      	b.n	800149a <__aeabi_ddiv+0xae>
 80014be:	46ba      	mov	sl, r7
 80014c0:	46a0      	mov	r8, r4
 80014c2:	0015      	movs	r5, r2
 80014c4:	9000      	str	r0, [sp, #0]
 80014c6:	e7dc      	b.n	8001482 <__aeabi_ddiv+0x96>
 80014c8:	4544      	cmp	r4, r8
 80014ca:	d200      	bcs.n	80014ce <__aeabi_ddiv+0xe2>
 80014cc:	e1c7      	b.n	800185e <__aeabi_ddiv+0x472>
 80014ce:	d100      	bne.n	80014d2 <__aeabi_ddiv+0xe6>
 80014d0:	e1c2      	b.n	8001858 <__aeabi_ddiv+0x46c>
 80014d2:	2301      	movs	r3, #1
 80014d4:	425b      	negs	r3, r3
 80014d6:	469c      	mov	ip, r3
 80014d8:	002e      	movs	r6, r5
 80014da:	4640      	mov	r0, r8
 80014dc:	2500      	movs	r5, #0
 80014de:	44e3      	add	fp, ip
 80014e0:	0223      	lsls	r3, r4, #8
 80014e2:	0e14      	lsrs	r4, r2, #24
 80014e4:	431c      	orrs	r4, r3
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	4699      	mov	r9, r3
 80014ea:	0423      	lsls	r3, r4, #16
 80014ec:	0c1f      	lsrs	r7, r3, #16
 80014ee:	0212      	lsls	r2, r2, #8
 80014f0:	4649      	mov	r1, r9
 80014f2:	9200      	str	r2, [sp, #0]
 80014f4:	9701      	str	r7, [sp, #4]
 80014f6:	f7fe fea9 	bl	800024c <__aeabi_uidivmod>
 80014fa:	0002      	movs	r2, r0
 80014fc:	437a      	muls	r2, r7
 80014fe:	040b      	lsls	r3, r1, #16
 8001500:	0c31      	lsrs	r1, r6, #16
 8001502:	4680      	mov	r8, r0
 8001504:	4319      	orrs	r1, r3
 8001506:	428a      	cmp	r2, r1
 8001508:	d907      	bls.n	800151a <__aeabi_ddiv+0x12e>
 800150a:	2301      	movs	r3, #1
 800150c:	425b      	negs	r3, r3
 800150e:	469c      	mov	ip, r3
 8001510:	1909      	adds	r1, r1, r4
 8001512:	44e0      	add	r8, ip
 8001514:	428c      	cmp	r4, r1
 8001516:	d800      	bhi.n	800151a <__aeabi_ddiv+0x12e>
 8001518:	e207      	b.n	800192a <__aeabi_ddiv+0x53e>
 800151a:	1a88      	subs	r0, r1, r2
 800151c:	4649      	mov	r1, r9
 800151e:	f7fe fe95 	bl	800024c <__aeabi_uidivmod>
 8001522:	0409      	lsls	r1, r1, #16
 8001524:	468c      	mov	ip, r1
 8001526:	0431      	lsls	r1, r6, #16
 8001528:	4666      	mov	r6, ip
 800152a:	9a01      	ldr	r2, [sp, #4]
 800152c:	0c09      	lsrs	r1, r1, #16
 800152e:	4342      	muls	r2, r0
 8001530:	0003      	movs	r3, r0
 8001532:	4331      	orrs	r1, r6
 8001534:	428a      	cmp	r2, r1
 8001536:	d904      	bls.n	8001542 <__aeabi_ddiv+0x156>
 8001538:	1909      	adds	r1, r1, r4
 800153a:	3b01      	subs	r3, #1
 800153c:	428c      	cmp	r4, r1
 800153e:	d800      	bhi.n	8001542 <__aeabi_ddiv+0x156>
 8001540:	e1ed      	b.n	800191e <__aeabi_ddiv+0x532>
 8001542:	1a88      	subs	r0, r1, r2
 8001544:	4642      	mov	r2, r8
 8001546:	0412      	lsls	r2, r2, #16
 8001548:	431a      	orrs	r2, r3
 800154a:	4690      	mov	r8, r2
 800154c:	4641      	mov	r1, r8
 800154e:	9b00      	ldr	r3, [sp, #0]
 8001550:	040e      	lsls	r6, r1, #16
 8001552:	0c1b      	lsrs	r3, r3, #16
 8001554:	001f      	movs	r7, r3
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	9b00      	ldr	r3, [sp, #0]
 800155a:	0c36      	lsrs	r6, r6, #16
 800155c:	041b      	lsls	r3, r3, #16
 800155e:	0c19      	lsrs	r1, r3, #16
 8001560:	000b      	movs	r3, r1
 8001562:	4373      	muls	r3, r6
 8001564:	0c12      	lsrs	r2, r2, #16
 8001566:	437e      	muls	r6, r7
 8001568:	9103      	str	r1, [sp, #12]
 800156a:	4351      	muls	r1, r2
 800156c:	437a      	muls	r2, r7
 800156e:	0c1f      	lsrs	r7, r3, #16
 8001570:	46bc      	mov	ip, r7
 8001572:	1876      	adds	r6, r6, r1
 8001574:	4466      	add	r6, ip
 8001576:	42b1      	cmp	r1, r6
 8001578:	d903      	bls.n	8001582 <__aeabi_ddiv+0x196>
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	0249      	lsls	r1, r1, #9
 800157e:	468c      	mov	ip, r1
 8001580:	4462      	add	r2, ip
 8001582:	0c31      	lsrs	r1, r6, #16
 8001584:	188a      	adds	r2, r1, r2
 8001586:	0431      	lsls	r1, r6, #16
 8001588:	041e      	lsls	r6, r3, #16
 800158a:	0c36      	lsrs	r6, r6, #16
 800158c:	198e      	adds	r6, r1, r6
 800158e:	4290      	cmp	r0, r2
 8001590:	d302      	bcc.n	8001598 <__aeabi_ddiv+0x1ac>
 8001592:	d112      	bne.n	80015ba <__aeabi_ddiv+0x1ce>
 8001594:	42b5      	cmp	r5, r6
 8001596:	d210      	bcs.n	80015ba <__aeabi_ddiv+0x1ce>
 8001598:	4643      	mov	r3, r8
 800159a:	1e59      	subs	r1, r3, #1
 800159c:	9b00      	ldr	r3, [sp, #0]
 800159e:	469c      	mov	ip, r3
 80015a0:	4465      	add	r5, ip
 80015a2:	001f      	movs	r7, r3
 80015a4:	429d      	cmp	r5, r3
 80015a6:	419b      	sbcs	r3, r3
 80015a8:	425b      	negs	r3, r3
 80015aa:	191b      	adds	r3, r3, r4
 80015ac:	18c0      	adds	r0, r0, r3
 80015ae:	4284      	cmp	r4, r0
 80015b0:	d200      	bcs.n	80015b4 <__aeabi_ddiv+0x1c8>
 80015b2:	e1a0      	b.n	80018f6 <__aeabi_ddiv+0x50a>
 80015b4:	d100      	bne.n	80015b8 <__aeabi_ddiv+0x1cc>
 80015b6:	e19b      	b.n	80018f0 <__aeabi_ddiv+0x504>
 80015b8:	4688      	mov	r8, r1
 80015ba:	1bae      	subs	r6, r5, r6
 80015bc:	42b5      	cmp	r5, r6
 80015be:	41ad      	sbcs	r5, r5
 80015c0:	1a80      	subs	r0, r0, r2
 80015c2:	426d      	negs	r5, r5
 80015c4:	1b40      	subs	r0, r0, r5
 80015c6:	4284      	cmp	r4, r0
 80015c8:	d100      	bne.n	80015cc <__aeabi_ddiv+0x1e0>
 80015ca:	e1d5      	b.n	8001978 <__aeabi_ddiv+0x58c>
 80015cc:	4649      	mov	r1, r9
 80015ce:	f7fe fe3d 	bl	800024c <__aeabi_uidivmod>
 80015d2:	9a01      	ldr	r2, [sp, #4]
 80015d4:	040b      	lsls	r3, r1, #16
 80015d6:	4342      	muls	r2, r0
 80015d8:	0c31      	lsrs	r1, r6, #16
 80015da:	0005      	movs	r5, r0
 80015dc:	4319      	orrs	r1, r3
 80015de:	428a      	cmp	r2, r1
 80015e0:	d900      	bls.n	80015e4 <__aeabi_ddiv+0x1f8>
 80015e2:	e16c      	b.n	80018be <__aeabi_ddiv+0x4d2>
 80015e4:	1a88      	subs	r0, r1, r2
 80015e6:	4649      	mov	r1, r9
 80015e8:	f7fe fe30 	bl	800024c <__aeabi_uidivmod>
 80015ec:	9a01      	ldr	r2, [sp, #4]
 80015ee:	0436      	lsls	r6, r6, #16
 80015f0:	4342      	muls	r2, r0
 80015f2:	0409      	lsls	r1, r1, #16
 80015f4:	0c36      	lsrs	r6, r6, #16
 80015f6:	0003      	movs	r3, r0
 80015f8:	430e      	orrs	r6, r1
 80015fa:	42b2      	cmp	r2, r6
 80015fc:	d900      	bls.n	8001600 <__aeabi_ddiv+0x214>
 80015fe:	e153      	b.n	80018a8 <__aeabi_ddiv+0x4bc>
 8001600:	9803      	ldr	r0, [sp, #12]
 8001602:	1ab6      	subs	r6, r6, r2
 8001604:	0002      	movs	r2, r0
 8001606:	042d      	lsls	r5, r5, #16
 8001608:	431d      	orrs	r5, r3
 800160a:	9f02      	ldr	r7, [sp, #8]
 800160c:	042b      	lsls	r3, r5, #16
 800160e:	0c1b      	lsrs	r3, r3, #16
 8001610:	435a      	muls	r2, r3
 8001612:	437b      	muls	r3, r7
 8001614:	469c      	mov	ip, r3
 8001616:	0c29      	lsrs	r1, r5, #16
 8001618:	4348      	muls	r0, r1
 800161a:	0c13      	lsrs	r3, r2, #16
 800161c:	4484      	add	ip, r0
 800161e:	4463      	add	r3, ip
 8001620:	4379      	muls	r1, r7
 8001622:	4298      	cmp	r0, r3
 8001624:	d903      	bls.n	800162e <__aeabi_ddiv+0x242>
 8001626:	2080      	movs	r0, #128	; 0x80
 8001628:	0240      	lsls	r0, r0, #9
 800162a:	4684      	mov	ip, r0
 800162c:	4461      	add	r1, ip
 800162e:	0c18      	lsrs	r0, r3, #16
 8001630:	0412      	lsls	r2, r2, #16
 8001632:	041b      	lsls	r3, r3, #16
 8001634:	0c12      	lsrs	r2, r2, #16
 8001636:	1841      	adds	r1, r0, r1
 8001638:	189b      	adds	r3, r3, r2
 800163a:	428e      	cmp	r6, r1
 800163c:	d200      	bcs.n	8001640 <__aeabi_ddiv+0x254>
 800163e:	e0ff      	b.n	8001840 <__aeabi_ddiv+0x454>
 8001640:	d100      	bne.n	8001644 <__aeabi_ddiv+0x258>
 8001642:	e0fa      	b.n	800183a <__aeabi_ddiv+0x44e>
 8001644:	2301      	movs	r3, #1
 8001646:	431d      	orrs	r5, r3
 8001648:	4a49      	ldr	r2, [pc, #292]	; (8001770 <__aeabi_ddiv+0x384>)
 800164a:	445a      	add	r2, fp
 800164c:	2a00      	cmp	r2, #0
 800164e:	dc00      	bgt.n	8001652 <__aeabi_ddiv+0x266>
 8001650:	e0aa      	b.n	80017a8 <__aeabi_ddiv+0x3bc>
 8001652:	076b      	lsls	r3, r5, #29
 8001654:	d000      	beq.n	8001658 <__aeabi_ddiv+0x26c>
 8001656:	e13d      	b.n	80018d4 <__aeabi_ddiv+0x4e8>
 8001658:	08ed      	lsrs	r5, r5, #3
 800165a:	4643      	mov	r3, r8
 800165c:	01db      	lsls	r3, r3, #7
 800165e:	d506      	bpl.n	800166e <__aeabi_ddiv+0x282>
 8001660:	4642      	mov	r2, r8
 8001662:	4b44      	ldr	r3, [pc, #272]	; (8001774 <__aeabi_ddiv+0x388>)
 8001664:	401a      	ands	r2, r3
 8001666:	4690      	mov	r8, r2
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	00d2      	lsls	r2, r2, #3
 800166c:	445a      	add	r2, fp
 800166e:	4b42      	ldr	r3, [pc, #264]	; (8001778 <__aeabi_ddiv+0x38c>)
 8001670:	429a      	cmp	r2, r3
 8001672:	dd00      	ble.n	8001676 <__aeabi_ddiv+0x28a>
 8001674:	e71f      	b.n	80014b6 <__aeabi_ddiv+0xca>
 8001676:	4643      	mov	r3, r8
 8001678:	075b      	lsls	r3, r3, #29
 800167a:	431d      	orrs	r5, r3
 800167c:	4643      	mov	r3, r8
 800167e:	0552      	lsls	r2, r2, #21
 8001680:	025c      	lsls	r4, r3, #9
 8001682:	0b24      	lsrs	r4, r4, #12
 8001684:	0d53      	lsrs	r3, r2, #21
 8001686:	e708      	b.n	800149a <__aeabi_ddiv+0xae>
 8001688:	4652      	mov	r2, sl
 800168a:	4322      	orrs	r2, r4
 800168c:	d100      	bne.n	8001690 <__aeabi_ddiv+0x2a4>
 800168e:	e07b      	b.n	8001788 <__aeabi_ddiv+0x39c>
 8001690:	2c00      	cmp	r4, #0
 8001692:	d100      	bne.n	8001696 <__aeabi_ddiv+0x2aa>
 8001694:	e0fa      	b.n	800188c <__aeabi_ddiv+0x4a0>
 8001696:	0020      	movs	r0, r4
 8001698:	f001 fa22 	bl	8002ae0 <__clzsi2>
 800169c:	0002      	movs	r2, r0
 800169e:	3a0b      	subs	r2, #11
 80016a0:	231d      	movs	r3, #29
 80016a2:	0001      	movs	r1, r0
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	4652      	mov	r2, sl
 80016a8:	3908      	subs	r1, #8
 80016aa:	40da      	lsrs	r2, r3
 80016ac:	408c      	lsls	r4, r1
 80016ae:	4314      	orrs	r4, r2
 80016b0:	4652      	mov	r2, sl
 80016b2:	408a      	lsls	r2, r1
 80016b4:	4b31      	ldr	r3, [pc, #196]	; (800177c <__aeabi_ddiv+0x390>)
 80016b6:	4458      	add	r0, fp
 80016b8:	469b      	mov	fp, r3
 80016ba:	4483      	add	fp, r0
 80016bc:	2000      	movs	r0, #0
 80016be:	e6d5      	b.n	800146c <__aeabi_ddiv+0x80>
 80016c0:	464b      	mov	r3, r9
 80016c2:	4323      	orrs	r3, r4
 80016c4:	4698      	mov	r8, r3
 80016c6:	d044      	beq.n	8001752 <__aeabi_ddiv+0x366>
 80016c8:	2c00      	cmp	r4, #0
 80016ca:	d100      	bne.n	80016ce <__aeabi_ddiv+0x2e2>
 80016cc:	e0ce      	b.n	800186c <__aeabi_ddiv+0x480>
 80016ce:	0020      	movs	r0, r4
 80016d0:	f001 fa06 	bl	8002ae0 <__clzsi2>
 80016d4:	0001      	movs	r1, r0
 80016d6:	0002      	movs	r2, r0
 80016d8:	390b      	subs	r1, #11
 80016da:	231d      	movs	r3, #29
 80016dc:	1a5b      	subs	r3, r3, r1
 80016de:	4649      	mov	r1, r9
 80016e0:	0010      	movs	r0, r2
 80016e2:	40d9      	lsrs	r1, r3
 80016e4:	3808      	subs	r0, #8
 80016e6:	4084      	lsls	r4, r0
 80016e8:	000b      	movs	r3, r1
 80016ea:	464d      	mov	r5, r9
 80016ec:	4323      	orrs	r3, r4
 80016ee:	4698      	mov	r8, r3
 80016f0:	4085      	lsls	r5, r0
 80016f2:	4823      	ldr	r0, [pc, #140]	; (8001780 <__aeabi_ddiv+0x394>)
 80016f4:	1a83      	subs	r3, r0, r2
 80016f6:	469b      	mov	fp, r3
 80016f8:	2300      	movs	r3, #0
 80016fa:	4699      	mov	r9, r3
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	e69a      	b.n	8001436 <__aeabi_ddiv+0x4a>
 8001700:	464b      	mov	r3, r9
 8001702:	4323      	orrs	r3, r4
 8001704:	4698      	mov	r8, r3
 8001706:	d11d      	bne.n	8001744 <__aeabi_ddiv+0x358>
 8001708:	2308      	movs	r3, #8
 800170a:	4699      	mov	r9, r3
 800170c:	3b06      	subs	r3, #6
 800170e:	2500      	movs	r5, #0
 8001710:	4683      	mov	fp, r0
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	e68f      	b.n	8001436 <__aeabi_ddiv+0x4a>
 8001716:	4652      	mov	r2, sl
 8001718:	4322      	orrs	r2, r4
 800171a:	d109      	bne.n	8001730 <__aeabi_ddiv+0x344>
 800171c:	2302      	movs	r3, #2
 800171e:	4649      	mov	r1, r9
 8001720:	4319      	orrs	r1, r3
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <__aeabi_ddiv+0x398>)
 8001724:	4689      	mov	r9, r1
 8001726:	469c      	mov	ip, r3
 8001728:	2400      	movs	r4, #0
 800172a:	2002      	movs	r0, #2
 800172c:	44e3      	add	fp, ip
 800172e:	e69d      	b.n	800146c <__aeabi_ddiv+0x80>
 8001730:	2303      	movs	r3, #3
 8001732:	464a      	mov	r2, r9
 8001734:	431a      	orrs	r2, r3
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <__aeabi_ddiv+0x398>)
 8001738:	4691      	mov	r9, r2
 800173a:	469c      	mov	ip, r3
 800173c:	4652      	mov	r2, sl
 800173e:	2003      	movs	r0, #3
 8001740:	44e3      	add	fp, ip
 8001742:	e693      	b.n	800146c <__aeabi_ddiv+0x80>
 8001744:	230c      	movs	r3, #12
 8001746:	4699      	mov	r9, r3
 8001748:	3b09      	subs	r3, #9
 800174a:	46a0      	mov	r8, r4
 800174c:	4683      	mov	fp, r0
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	e671      	b.n	8001436 <__aeabi_ddiv+0x4a>
 8001752:	2304      	movs	r3, #4
 8001754:	4699      	mov	r9, r3
 8001756:	2300      	movs	r3, #0
 8001758:	469b      	mov	fp, r3
 800175a:	3301      	adds	r3, #1
 800175c:	2500      	movs	r5, #0
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	e669      	b.n	8001436 <__aeabi_ddiv+0x4a>
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	000007ff 	.word	0x000007ff
 8001768:	fffffc01 	.word	0xfffffc01
 800176c:	0800cb88 	.word	0x0800cb88
 8001770:	000003ff 	.word	0x000003ff
 8001774:	feffffff 	.word	0xfeffffff
 8001778:	000007fe 	.word	0x000007fe
 800177c:	000003f3 	.word	0x000003f3
 8001780:	fffffc0d 	.word	0xfffffc0d
 8001784:	fffff801 	.word	0xfffff801
 8001788:	4649      	mov	r1, r9
 800178a:	2301      	movs	r3, #1
 800178c:	4319      	orrs	r1, r3
 800178e:	4689      	mov	r9, r1
 8001790:	2400      	movs	r4, #0
 8001792:	2001      	movs	r0, #1
 8001794:	e66a      	b.n	800146c <__aeabi_ddiv+0x80>
 8001796:	2300      	movs	r3, #0
 8001798:	2480      	movs	r4, #128	; 0x80
 800179a:	469a      	mov	sl, r3
 800179c:	2500      	movs	r5, #0
 800179e:	4b8a      	ldr	r3, [pc, #552]	; (80019c8 <__aeabi_ddiv+0x5dc>)
 80017a0:	0324      	lsls	r4, r4, #12
 80017a2:	e67a      	b.n	800149a <__aeabi_ddiv+0xae>
 80017a4:	2501      	movs	r5, #1
 80017a6:	426d      	negs	r5, r5
 80017a8:	2301      	movs	r3, #1
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	2b38      	cmp	r3, #56	; 0x38
 80017ae:	dd00      	ble.n	80017b2 <__aeabi_ddiv+0x3c6>
 80017b0:	e670      	b.n	8001494 <__aeabi_ddiv+0xa8>
 80017b2:	2b1f      	cmp	r3, #31
 80017b4:	dc00      	bgt.n	80017b8 <__aeabi_ddiv+0x3cc>
 80017b6:	e0bf      	b.n	8001938 <__aeabi_ddiv+0x54c>
 80017b8:	211f      	movs	r1, #31
 80017ba:	4249      	negs	r1, r1
 80017bc:	1a8a      	subs	r2, r1, r2
 80017be:	4641      	mov	r1, r8
 80017c0:	40d1      	lsrs	r1, r2
 80017c2:	000a      	movs	r2, r1
 80017c4:	2b20      	cmp	r3, #32
 80017c6:	d004      	beq.n	80017d2 <__aeabi_ddiv+0x3e6>
 80017c8:	4641      	mov	r1, r8
 80017ca:	4b80      	ldr	r3, [pc, #512]	; (80019cc <__aeabi_ddiv+0x5e0>)
 80017cc:	445b      	add	r3, fp
 80017ce:	4099      	lsls	r1, r3
 80017d0:	430d      	orrs	r5, r1
 80017d2:	1e6b      	subs	r3, r5, #1
 80017d4:	419d      	sbcs	r5, r3
 80017d6:	2307      	movs	r3, #7
 80017d8:	432a      	orrs	r2, r5
 80017da:	001d      	movs	r5, r3
 80017dc:	2400      	movs	r4, #0
 80017de:	4015      	ands	r5, r2
 80017e0:	4213      	tst	r3, r2
 80017e2:	d100      	bne.n	80017e6 <__aeabi_ddiv+0x3fa>
 80017e4:	e0d4      	b.n	8001990 <__aeabi_ddiv+0x5a4>
 80017e6:	210f      	movs	r1, #15
 80017e8:	2300      	movs	r3, #0
 80017ea:	4011      	ands	r1, r2
 80017ec:	2904      	cmp	r1, #4
 80017ee:	d100      	bne.n	80017f2 <__aeabi_ddiv+0x406>
 80017f0:	e0cb      	b.n	800198a <__aeabi_ddiv+0x59e>
 80017f2:	1d11      	adds	r1, r2, #4
 80017f4:	4291      	cmp	r1, r2
 80017f6:	4192      	sbcs	r2, r2
 80017f8:	4252      	negs	r2, r2
 80017fa:	189b      	adds	r3, r3, r2
 80017fc:	000a      	movs	r2, r1
 80017fe:	0219      	lsls	r1, r3, #8
 8001800:	d400      	bmi.n	8001804 <__aeabi_ddiv+0x418>
 8001802:	e0c2      	b.n	800198a <__aeabi_ddiv+0x59e>
 8001804:	2301      	movs	r3, #1
 8001806:	2400      	movs	r4, #0
 8001808:	2500      	movs	r5, #0
 800180a:	e646      	b.n	800149a <__aeabi_ddiv+0xae>
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	4641      	mov	r1, r8
 8001810:	031b      	lsls	r3, r3, #12
 8001812:	4219      	tst	r1, r3
 8001814:	d008      	beq.n	8001828 <__aeabi_ddiv+0x43c>
 8001816:	421c      	tst	r4, r3
 8001818:	d106      	bne.n	8001828 <__aeabi_ddiv+0x43c>
 800181a:	431c      	orrs	r4, r3
 800181c:	0324      	lsls	r4, r4, #12
 800181e:	46ba      	mov	sl, r7
 8001820:	0015      	movs	r5, r2
 8001822:	4b69      	ldr	r3, [pc, #420]	; (80019c8 <__aeabi_ddiv+0x5dc>)
 8001824:	0b24      	lsrs	r4, r4, #12
 8001826:	e638      	b.n	800149a <__aeabi_ddiv+0xae>
 8001828:	2480      	movs	r4, #128	; 0x80
 800182a:	4643      	mov	r3, r8
 800182c:	0324      	lsls	r4, r4, #12
 800182e:	431c      	orrs	r4, r3
 8001830:	0324      	lsls	r4, r4, #12
 8001832:	46b2      	mov	sl, r6
 8001834:	4b64      	ldr	r3, [pc, #400]	; (80019c8 <__aeabi_ddiv+0x5dc>)
 8001836:	0b24      	lsrs	r4, r4, #12
 8001838:	e62f      	b.n	800149a <__aeabi_ddiv+0xae>
 800183a:	2b00      	cmp	r3, #0
 800183c:	d100      	bne.n	8001840 <__aeabi_ddiv+0x454>
 800183e:	e703      	b.n	8001648 <__aeabi_ddiv+0x25c>
 8001840:	19a6      	adds	r6, r4, r6
 8001842:	1e68      	subs	r0, r5, #1
 8001844:	42a6      	cmp	r6, r4
 8001846:	d200      	bcs.n	800184a <__aeabi_ddiv+0x45e>
 8001848:	e08d      	b.n	8001966 <__aeabi_ddiv+0x57a>
 800184a:	428e      	cmp	r6, r1
 800184c:	d200      	bcs.n	8001850 <__aeabi_ddiv+0x464>
 800184e:	e0a3      	b.n	8001998 <__aeabi_ddiv+0x5ac>
 8001850:	d100      	bne.n	8001854 <__aeabi_ddiv+0x468>
 8001852:	e0b3      	b.n	80019bc <__aeabi_ddiv+0x5d0>
 8001854:	0005      	movs	r5, r0
 8001856:	e6f5      	b.n	8001644 <__aeabi_ddiv+0x258>
 8001858:	42aa      	cmp	r2, r5
 800185a:	d900      	bls.n	800185e <__aeabi_ddiv+0x472>
 800185c:	e639      	b.n	80014d2 <__aeabi_ddiv+0xe6>
 800185e:	4643      	mov	r3, r8
 8001860:	07de      	lsls	r6, r3, #31
 8001862:	0858      	lsrs	r0, r3, #1
 8001864:	086b      	lsrs	r3, r5, #1
 8001866:	431e      	orrs	r6, r3
 8001868:	07ed      	lsls	r5, r5, #31
 800186a:	e639      	b.n	80014e0 <__aeabi_ddiv+0xf4>
 800186c:	4648      	mov	r0, r9
 800186e:	f001 f937 	bl	8002ae0 <__clzsi2>
 8001872:	0001      	movs	r1, r0
 8001874:	0002      	movs	r2, r0
 8001876:	3115      	adds	r1, #21
 8001878:	3220      	adds	r2, #32
 800187a:	291c      	cmp	r1, #28
 800187c:	dc00      	bgt.n	8001880 <__aeabi_ddiv+0x494>
 800187e:	e72c      	b.n	80016da <__aeabi_ddiv+0x2ee>
 8001880:	464b      	mov	r3, r9
 8001882:	3808      	subs	r0, #8
 8001884:	4083      	lsls	r3, r0
 8001886:	2500      	movs	r5, #0
 8001888:	4698      	mov	r8, r3
 800188a:	e732      	b.n	80016f2 <__aeabi_ddiv+0x306>
 800188c:	f001 f928 	bl	8002ae0 <__clzsi2>
 8001890:	0003      	movs	r3, r0
 8001892:	001a      	movs	r2, r3
 8001894:	3215      	adds	r2, #21
 8001896:	3020      	adds	r0, #32
 8001898:	2a1c      	cmp	r2, #28
 800189a:	dc00      	bgt.n	800189e <__aeabi_ddiv+0x4b2>
 800189c:	e700      	b.n	80016a0 <__aeabi_ddiv+0x2b4>
 800189e:	4654      	mov	r4, sl
 80018a0:	3b08      	subs	r3, #8
 80018a2:	2200      	movs	r2, #0
 80018a4:	409c      	lsls	r4, r3
 80018a6:	e705      	b.n	80016b4 <__aeabi_ddiv+0x2c8>
 80018a8:	1936      	adds	r6, r6, r4
 80018aa:	3b01      	subs	r3, #1
 80018ac:	42b4      	cmp	r4, r6
 80018ae:	d900      	bls.n	80018b2 <__aeabi_ddiv+0x4c6>
 80018b0:	e6a6      	b.n	8001600 <__aeabi_ddiv+0x214>
 80018b2:	42b2      	cmp	r2, r6
 80018b4:	d800      	bhi.n	80018b8 <__aeabi_ddiv+0x4cc>
 80018b6:	e6a3      	b.n	8001600 <__aeabi_ddiv+0x214>
 80018b8:	1e83      	subs	r3, r0, #2
 80018ba:	1936      	adds	r6, r6, r4
 80018bc:	e6a0      	b.n	8001600 <__aeabi_ddiv+0x214>
 80018be:	1909      	adds	r1, r1, r4
 80018c0:	3d01      	subs	r5, #1
 80018c2:	428c      	cmp	r4, r1
 80018c4:	d900      	bls.n	80018c8 <__aeabi_ddiv+0x4dc>
 80018c6:	e68d      	b.n	80015e4 <__aeabi_ddiv+0x1f8>
 80018c8:	428a      	cmp	r2, r1
 80018ca:	d800      	bhi.n	80018ce <__aeabi_ddiv+0x4e2>
 80018cc:	e68a      	b.n	80015e4 <__aeabi_ddiv+0x1f8>
 80018ce:	1e85      	subs	r5, r0, #2
 80018d0:	1909      	adds	r1, r1, r4
 80018d2:	e687      	b.n	80015e4 <__aeabi_ddiv+0x1f8>
 80018d4:	230f      	movs	r3, #15
 80018d6:	402b      	ands	r3, r5
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d100      	bne.n	80018de <__aeabi_ddiv+0x4f2>
 80018dc:	e6bc      	b.n	8001658 <__aeabi_ddiv+0x26c>
 80018de:	2305      	movs	r3, #5
 80018e0:	425b      	negs	r3, r3
 80018e2:	42ab      	cmp	r3, r5
 80018e4:	419b      	sbcs	r3, r3
 80018e6:	3504      	adds	r5, #4
 80018e8:	425b      	negs	r3, r3
 80018ea:	08ed      	lsrs	r5, r5, #3
 80018ec:	4498      	add	r8, r3
 80018ee:	e6b4      	b.n	800165a <__aeabi_ddiv+0x26e>
 80018f0:	42af      	cmp	r7, r5
 80018f2:	d900      	bls.n	80018f6 <__aeabi_ddiv+0x50a>
 80018f4:	e660      	b.n	80015b8 <__aeabi_ddiv+0x1cc>
 80018f6:	4282      	cmp	r2, r0
 80018f8:	d804      	bhi.n	8001904 <__aeabi_ddiv+0x518>
 80018fa:	d000      	beq.n	80018fe <__aeabi_ddiv+0x512>
 80018fc:	e65c      	b.n	80015b8 <__aeabi_ddiv+0x1cc>
 80018fe:	42ae      	cmp	r6, r5
 8001900:	d800      	bhi.n	8001904 <__aeabi_ddiv+0x518>
 8001902:	e659      	b.n	80015b8 <__aeabi_ddiv+0x1cc>
 8001904:	2302      	movs	r3, #2
 8001906:	425b      	negs	r3, r3
 8001908:	469c      	mov	ip, r3
 800190a:	9b00      	ldr	r3, [sp, #0]
 800190c:	44e0      	add	r8, ip
 800190e:	469c      	mov	ip, r3
 8001910:	4465      	add	r5, ip
 8001912:	429d      	cmp	r5, r3
 8001914:	419b      	sbcs	r3, r3
 8001916:	425b      	negs	r3, r3
 8001918:	191b      	adds	r3, r3, r4
 800191a:	18c0      	adds	r0, r0, r3
 800191c:	e64d      	b.n	80015ba <__aeabi_ddiv+0x1ce>
 800191e:	428a      	cmp	r2, r1
 8001920:	d800      	bhi.n	8001924 <__aeabi_ddiv+0x538>
 8001922:	e60e      	b.n	8001542 <__aeabi_ddiv+0x156>
 8001924:	1e83      	subs	r3, r0, #2
 8001926:	1909      	adds	r1, r1, r4
 8001928:	e60b      	b.n	8001542 <__aeabi_ddiv+0x156>
 800192a:	428a      	cmp	r2, r1
 800192c:	d800      	bhi.n	8001930 <__aeabi_ddiv+0x544>
 800192e:	e5f4      	b.n	800151a <__aeabi_ddiv+0x12e>
 8001930:	1e83      	subs	r3, r0, #2
 8001932:	4698      	mov	r8, r3
 8001934:	1909      	adds	r1, r1, r4
 8001936:	e5f0      	b.n	800151a <__aeabi_ddiv+0x12e>
 8001938:	4925      	ldr	r1, [pc, #148]	; (80019d0 <__aeabi_ddiv+0x5e4>)
 800193a:	0028      	movs	r0, r5
 800193c:	4459      	add	r1, fp
 800193e:	408d      	lsls	r5, r1
 8001940:	4642      	mov	r2, r8
 8001942:	408a      	lsls	r2, r1
 8001944:	1e69      	subs	r1, r5, #1
 8001946:	418d      	sbcs	r5, r1
 8001948:	4641      	mov	r1, r8
 800194a:	40d8      	lsrs	r0, r3
 800194c:	40d9      	lsrs	r1, r3
 800194e:	4302      	orrs	r2, r0
 8001950:	432a      	orrs	r2, r5
 8001952:	000b      	movs	r3, r1
 8001954:	0751      	lsls	r1, r2, #29
 8001956:	d100      	bne.n	800195a <__aeabi_ddiv+0x56e>
 8001958:	e751      	b.n	80017fe <__aeabi_ddiv+0x412>
 800195a:	210f      	movs	r1, #15
 800195c:	4011      	ands	r1, r2
 800195e:	2904      	cmp	r1, #4
 8001960:	d000      	beq.n	8001964 <__aeabi_ddiv+0x578>
 8001962:	e746      	b.n	80017f2 <__aeabi_ddiv+0x406>
 8001964:	e74b      	b.n	80017fe <__aeabi_ddiv+0x412>
 8001966:	0005      	movs	r5, r0
 8001968:	428e      	cmp	r6, r1
 800196a:	d000      	beq.n	800196e <__aeabi_ddiv+0x582>
 800196c:	e66a      	b.n	8001644 <__aeabi_ddiv+0x258>
 800196e:	9a00      	ldr	r2, [sp, #0]
 8001970:	4293      	cmp	r3, r2
 8001972:	d000      	beq.n	8001976 <__aeabi_ddiv+0x58a>
 8001974:	e666      	b.n	8001644 <__aeabi_ddiv+0x258>
 8001976:	e667      	b.n	8001648 <__aeabi_ddiv+0x25c>
 8001978:	4a16      	ldr	r2, [pc, #88]	; (80019d4 <__aeabi_ddiv+0x5e8>)
 800197a:	445a      	add	r2, fp
 800197c:	2a00      	cmp	r2, #0
 800197e:	dc00      	bgt.n	8001982 <__aeabi_ddiv+0x596>
 8001980:	e710      	b.n	80017a4 <__aeabi_ddiv+0x3b8>
 8001982:	2301      	movs	r3, #1
 8001984:	2500      	movs	r5, #0
 8001986:	4498      	add	r8, r3
 8001988:	e667      	b.n	800165a <__aeabi_ddiv+0x26e>
 800198a:	075d      	lsls	r5, r3, #29
 800198c:	025b      	lsls	r3, r3, #9
 800198e:	0b1c      	lsrs	r4, r3, #12
 8001990:	08d2      	lsrs	r2, r2, #3
 8001992:	2300      	movs	r3, #0
 8001994:	4315      	orrs	r5, r2
 8001996:	e580      	b.n	800149a <__aeabi_ddiv+0xae>
 8001998:	9800      	ldr	r0, [sp, #0]
 800199a:	3d02      	subs	r5, #2
 800199c:	0042      	lsls	r2, r0, #1
 800199e:	4282      	cmp	r2, r0
 80019a0:	41bf      	sbcs	r7, r7
 80019a2:	427f      	negs	r7, r7
 80019a4:	193c      	adds	r4, r7, r4
 80019a6:	1936      	adds	r6, r6, r4
 80019a8:	9200      	str	r2, [sp, #0]
 80019aa:	e7dd      	b.n	8001968 <__aeabi_ddiv+0x57c>
 80019ac:	2480      	movs	r4, #128	; 0x80
 80019ae:	4643      	mov	r3, r8
 80019b0:	0324      	lsls	r4, r4, #12
 80019b2:	431c      	orrs	r4, r3
 80019b4:	0324      	lsls	r4, r4, #12
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__aeabi_ddiv+0x5dc>)
 80019b8:	0b24      	lsrs	r4, r4, #12
 80019ba:	e56e      	b.n	800149a <__aeabi_ddiv+0xae>
 80019bc:	9a00      	ldr	r2, [sp, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d3ea      	bcc.n	8001998 <__aeabi_ddiv+0x5ac>
 80019c2:	0005      	movs	r5, r0
 80019c4:	e7d3      	b.n	800196e <__aeabi_ddiv+0x582>
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	000007ff 	.word	0x000007ff
 80019cc:	0000043e 	.word	0x0000043e
 80019d0:	0000041e 	.word	0x0000041e
 80019d4:	000003ff 	.word	0x000003ff

080019d8 <__eqdf2>:
 80019d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019da:	464e      	mov	r6, r9
 80019dc:	4645      	mov	r5, r8
 80019de:	46de      	mov	lr, fp
 80019e0:	4657      	mov	r7, sl
 80019e2:	4690      	mov	r8, r2
 80019e4:	b5e0      	push	{r5, r6, r7, lr}
 80019e6:	0017      	movs	r7, r2
 80019e8:	031a      	lsls	r2, r3, #12
 80019ea:	0b12      	lsrs	r2, r2, #12
 80019ec:	0005      	movs	r5, r0
 80019ee:	4684      	mov	ip, r0
 80019f0:	4819      	ldr	r0, [pc, #100]	; (8001a58 <__eqdf2+0x80>)
 80019f2:	030e      	lsls	r6, r1, #12
 80019f4:	004c      	lsls	r4, r1, #1
 80019f6:	4691      	mov	r9, r2
 80019f8:	005a      	lsls	r2, r3, #1
 80019fa:	0fdb      	lsrs	r3, r3, #31
 80019fc:	469b      	mov	fp, r3
 80019fe:	0b36      	lsrs	r6, r6, #12
 8001a00:	0d64      	lsrs	r4, r4, #21
 8001a02:	0fc9      	lsrs	r1, r1, #31
 8001a04:	0d52      	lsrs	r2, r2, #21
 8001a06:	4284      	cmp	r4, r0
 8001a08:	d019      	beq.n	8001a3e <__eqdf2+0x66>
 8001a0a:	4282      	cmp	r2, r0
 8001a0c:	d010      	beq.n	8001a30 <__eqdf2+0x58>
 8001a0e:	2001      	movs	r0, #1
 8001a10:	4294      	cmp	r4, r2
 8001a12:	d10e      	bne.n	8001a32 <__eqdf2+0x5a>
 8001a14:	454e      	cmp	r6, r9
 8001a16:	d10c      	bne.n	8001a32 <__eqdf2+0x5a>
 8001a18:	2001      	movs	r0, #1
 8001a1a:	45c4      	cmp	ip, r8
 8001a1c:	d109      	bne.n	8001a32 <__eqdf2+0x5a>
 8001a1e:	4559      	cmp	r1, fp
 8001a20:	d017      	beq.n	8001a52 <__eqdf2+0x7a>
 8001a22:	2c00      	cmp	r4, #0
 8001a24:	d105      	bne.n	8001a32 <__eqdf2+0x5a>
 8001a26:	0030      	movs	r0, r6
 8001a28:	4328      	orrs	r0, r5
 8001a2a:	1e43      	subs	r3, r0, #1
 8001a2c:	4198      	sbcs	r0, r3
 8001a2e:	e000      	b.n	8001a32 <__eqdf2+0x5a>
 8001a30:	2001      	movs	r0, #1
 8001a32:	bcf0      	pop	{r4, r5, r6, r7}
 8001a34:	46bb      	mov	fp, r7
 8001a36:	46b2      	mov	sl, r6
 8001a38:	46a9      	mov	r9, r5
 8001a3a:	46a0      	mov	r8, r4
 8001a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a3e:	0033      	movs	r3, r6
 8001a40:	2001      	movs	r0, #1
 8001a42:	432b      	orrs	r3, r5
 8001a44:	d1f5      	bne.n	8001a32 <__eqdf2+0x5a>
 8001a46:	42a2      	cmp	r2, r4
 8001a48:	d1f3      	bne.n	8001a32 <__eqdf2+0x5a>
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	433b      	orrs	r3, r7
 8001a4e:	d1f0      	bne.n	8001a32 <__eqdf2+0x5a>
 8001a50:	e7e2      	b.n	8001a18 <__eqdf2+0x40>
 8001a52:	2000      	movs	r0, #0
 8001a54:	e7ed      	b.n	8001a32 <__eqdf2+0x5a>
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	000007ff 	.word	0x000007ff

08001a5c <__gedf2>:
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	4647      	mov	r7, r8
 8001a60:	46ce      	mov	lr, r9
 8001a62:	0004      	movs	r4, r0
 8001a64:	0018      	movs	r0, r3
 8001a66:	0016      	movs	r6, r2
 8001a68:	031b      	lsls	r3, r3, #12
 8001a6a:	0b1b      	lsrs	r3, r3, #12
 8001a6c:	4d2d      	ldr	r5, [pc, #180]	; (8001b24 <__gedf2+0xc8>)
 8001a6e:	004a      	lsls	r2, r1, #1
 8001a70:	4699      	mov	r9, r3
 8001a72:	b580      	push	{r7, lr}
 8001a74:	0043      	lsls	r3, r0, #1
 8001a76:	030f      	lsls	r7, r1, #12
 8001a78:	46a4      	mov	ip, r4
 8001a7a:	46b0      	mov	r8, r6
 8001a7c:	0b3f      	lsrs	r7, r7, #12
 8001a7e:	0d52      	lsrs	r2, r2, #21
 8001a80:	0fc9      	lsrs	r1, r1, #31
 8001a82:	0d5b      	lsrs	r3, r3, #21
 8001a84:	0fc0      	lsrs	r0, r0, #31
 8001a86:	42aa      	cmp	r2, r5
 8001a88:	d021      	beq.n	8001ace <__gedf2+0x72>
 8001a8a:	42ab      	cmp	r3, r5
 8001a8c:	d013      	beq.n	8001ab6 <__gedf2+0x5a>
 8001a8e:	2a00      	cmp	r2, #0
 8001a90:	d122      	bne.n	8001ad8 <__gedf2+0x7c>
 8001a92:	433c      	orrs	r4, r7
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d102      	bne.n	8001a9e <__gedf2+0x42>
 8001a98:	464d      	mov	r5, r9
 8001a9a:	432e      	orrs	r6, r5
 8001a9c:	d022      	beq.n	8001ae4 <__gedf2+0x88>
 8001a9e:	2c00      	cmp	r4, #0
 8001aa0:	d010      	beq.n	8001ac4 <__gedf2+0x68>
 8001aa2:	4281      	cmp	r1, r0
 8001aa4:	d022      	beq.n	8001aec <__gedf2+0x90>
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	3901      	subs	r1, #1
 8001aaa:	4008      	ands	r0, r1
 8001aac:	3801      	subs	r0, #1
 8001aae:	bcc0      	pop	{r6, r7}
 8001ab0:	46b9      	mov	r9, r7
 8001ab2:	46b0      	mov	r8, r6
 8001ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab6:	464d      	mov	r5, r9
 8001ab8:	432e      	orrs	r6, r5
 8001aba:	d129      	bne.n	8001b10 <__gedf2+0xb4>
 8001abc:	2a00      	cmp	r2, #0
 8001abe:	d1f0      	bne.n	8001aa2 <__gedf2+0x46>
 8001ac0:	433c      	orrs	r4, r7
 8001ac2:	d1ee      	bne.n	8001aa2 <__gedf2+0x46>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d1f2      	bne.n	8001aae <__gedf2+0x52>
 8001ac8:	2001      	movs	r0, #1
 8001aca:	4240      	negs	r0, r0
 8001acc:	e7ef      	b.n	8001aae <__gedf2+0x52>
 8001ace:	003d      	movs	r5, r7
 8001ad0:	4325      	orrs	r5, r4
 8001ad2:	d11d      	bne.n	8001b10 <__gedf2+0xb4>
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d0ee      	beq.n	8001ab6 <__gedf2+0x5a>
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e2      	bne.n	8001aa2 <__gedf2+0x46>
 8001adc:	464c      	mov	r4, r9
 8001ade:	4326      	orrs	r6, r4
 8001ae0:	d1df      	bne.n	8001aa2 <__gedf2+0x46>
 8001ae2:	e7e0      	b.n	8001aa6 <__gedf2+0x4a>
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	2c00      	cmp	r4, #0
 8001ae8:	d0e1      	beq.n	8001aae <__gedf2+0x52>
 8001aea:	e7dc      	b.n	8001aa6 <__gedf2+0x4a>
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dc0a      	bgt.n	8001b06 <__gedf2+0xaa>
 8001af0:	dbe8      	blt.n	8001ac4 <__gedf2+0x68>
 8001af2:	454f      	cmp	r7, r9
 8001af4:	d8d7      	bhi.n	8001aa6 <__gedf2+0x4a>
 8001af6:	d00e      	beq.n	8001b16 <__gedf2+0xba>
 8001af8:	2000      	movs	r0, #0
 8001afa:	454f      	cmp	r7, r9
 8001afc:	d2d7      	bcs.n	8001aae <__gedf2+0x52>
 8001afe:	2900      	cmp	r1, #0
 8001b00:	d0e2      	beq.n	8001ac8 <__gedf2+0x6c>
 8001b02:	0008      	movs	r0, r1
 8001b04:	e7d3      	b.n	8001aae <__gedf2+0x52>
 8001b06:	4243      	negs	r3, r0
 8001b08:	4158      	adcs	r0, r3
 8001b0a:	0040      	lsls	r0, r0, #1
 8001b0c:	3801      	subs	r0, #1
 8001b0e:	e7ce      	b.n	8001aae <__gedf2+0x52>
 8001b10:	2002      	movs	r0, #2
 8001b12:	4240      	negs	r0, r0
 8001b14:	e7cb      	b.n	8001aae <__gedf2+0x52>
 8001b16:	45c4      	cmp	ip, r8
 8001b18:	d8c5      	bhi.n	8001aa6 <__gedf2+0x4a>
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	45c4      	cmp	ip, r8
 8001b1e:	d2c6      	bcs.n	8001aae <__gedf2+0x52>
 8001b20:	e7ed      	b.n	8001afe <__gedf2+0xa2>
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	000007ff 	.word	0x000007ff

08001b28 <__ledf2>:
 8001b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b2a:	4647      	mov	r7, r8
 8001b2c:	46ce      	mov	lr, r9
 8001b2e:	0004      	movs	r4, r0
 8001b30:	0018      	movs	r0, r3
 8001b32:	0016      	movs	r6, r2
 8001b34:	031b      	lsls	r3, r3, #12
 8001b36:	0b1b      	lsrs	r3, r3, #12
 8001b38:	4d2c      	ldr	r5, [pc, #176]	; (8001bec <__ledf2+0xc4>)
 8001b3a:	004a      	lsls	r2, r1, #1
 8001b3c:	4699      	mov	r9, r3
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	0043      	lsls	r3, r0, #1
 8001b42:	030f      	lsls	r7, r1, #12
 8001b44:	46a4      	mov	ip, r4
 8001b46:	46b0      	mov	r8, r6
 8001b48:	0b3f      	lsrs	r7, r7, #12
 8001b4a:	0d52      	lsrs	r2, r2, #21
 8001b4c:	0fc9      	lsrs	r1, r1, #31
 8001b4e:	0d5b      	lsrs	r3, r3, #21
 8001b50:	0fc0      	lsrs	r0, r0, #31
 8001b52:	42aa      	cmp	r2, r5
 8001b54:	d00d      	beq.n	8001b72 <__ledf2+0x4a>
 8001b56:	42ab      	cmp	r3, r5
 8001b58:	d010      	beq.n	8001b7c <__ledf2+0x54>
 8001b5a:	2a00      	cmp	r2, #0
 8001b5c:	d127      	bne.n	8001bae <__ledf2+0x86>
 8001b5e:	433c      	orrs	r4, r7
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d111      	bne.n	8001b88 <__ledf2+0x60>
 8001b64:	464d      	mov	r5, r9
 8001b66:	432e      	orrs	r6, r5
 8001b68:	d10e      	bne.n	8001b88 <__ledf2+0x60>
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	2c00      	cmp	r4, #0
 8001b6e:	d015      	beq.n	8001b9c <__ledf2+0x74>
 8001b70:	e00e      	b.n	8001b90 <__ledf2+0x68>
 8001b72:	003d      	movs	r5, r7
 8001b74:	4325      	orrs	r5, r4
 8001b76:	d110      	bne.n	8001b9a <__ledf2+0x72>
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d118      	bne.n	8001bae <__ledf2+0x86>
 8001b7c:	464d      	mov	r5, r9
 8001b7e:	432e      	orrs	r6, r5
 8001b80:	d10b      	bne.n	8001b9a <__ledf2+0x72>
 8001b82:	2a00      	cmp	r2, #0
 8001b84:	d102      	bne.n	8001b8c <__ledf2+0x64>
 8001b86:	433c      	orrs	r4, r7
 8001b88:	2c00      	cmp	r4, #0
 8001b8a:	d00b      	beq.n	8001ba4 <__ledf2+0x7c>
 8001b8c:	4281      	cmp	r1, r0
 8001b8e:	d014      	beq.n	8001bba <__ledf2+0x92>
 8001b90:	2002      	movs	r0, #2
 8001b92:	3901      	subs	r1, #1
 8001b94:	4008      	ands	r0, r1
 8001b96:	3801      	subs	r0, #1
 8001b98:	e000      	b.n	8001b9c <__ledf2+0x74>
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	bcc0      	pop	{r6, r7}
 8001b9e:	46b9      	mov	r9, r7
 8001ba0:	46b0      	mov	r8, r6
 8001ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	d1f9      	bne.n	8001b9c <__ledf2+0x74>
 8001ba8:	2001      	movs	r0, #1
 8001baa:	4240      	negs	r0, r0
 8001bac:	e7f6      	b.n	8001b9c <__ledf2+0x74>
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ec      	bne.n	8001b8c <__ledf2+0x64>
 8001bb2:	464c      	mov	r4, r9
 8001bb4:	4326      	orrs	r6, r4
 8001bb6:	d1e9      	bne.n	8001b8c <__ledf2+0x64>
 8001bb8:	e7ea      	b.n	8001b90 <__ledf2+0x68>
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	dd04      	ble.n	8001bc8 <__ledf2+0xa0>
 8001bbe:	4243      	negs	r3, r0
 8001bc0:	4158      	adcs	r0, r3
 8001bc2:	0040      	lsls	r0, r0, #1
 8001bc4:	3801      	subs	r0, #1
 8001bc6:	e7e9      	b.n	8001b9c <__ledf2+0x74>
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbeb      	blt.n	8001ba4 <__ledf2+0x7c>
 8001bcc:	454f      	cmp	r7, r9
 8001bce:	d8df      	bhi.n	8001b90 <__ledf2+0x68>
 8001bd0:	d006      	beq.n	8001be0 <__ledf2+0xb8>
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	454f      	cmp	r7, r9
 8001bd6:	d2e1      	bcs.n	8001b9c <__ledf2+0x74>
 8001bd8:	2900      	cmp	r1, #0
 8001bda:	d0e5      	beq.n	8001ba8 <__ledf2+0x80>
 8001bdc:	0008      	movs	r0, r1
 8001bde:	e7dd      	b.n	8001b9c <__ledf2+0x74>
 8001be0:	45c4      	cmp	ip, r8
 8001be2:	d8d5      	bhi.n	8001b90 <__ledf2+0x68>
 8001be4:	2000      	movs	r0, #0
 8001be6:	45c4      	cmp	ip, r8
 8001be8:	d2d8      	bcs.n	8001b9c <__ledf2+0x74>
 8001bea:	e7f5      	b.n	8001bd8 <__ledf2+0xb0>
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dmul>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	4698      	mov	r8, r3
 8001bfe:	030c      	lsls	r4, r1, #12
 8001c00:	004b      	lsls	r3, r1, #1
 8001c02:	0006      	movs	r6, r0
 8001c04:	4692      	mov	sl, r2
 8001c06:	b087      	sub	sp, #28
 8001c08:	0b24      	lsrs	r4, r4, #12
 8001c0a:	0d5b      	lsrs	r3, r3, #21
 8001c0c:	0fcf      	lsrs	r7, r1, #31
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dmul+0x24>
 8001c12:	e15c      	b.n	8001ece <__aeabi_dmul+0x2de>
 8001c14:	4ad9      	ldr	r2, [pc, #868]	; (8001f7c <__aeabi_dmul+0x38c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dmul+0x2c>
 8001c1a:	e175      	b.n	8001f08 <__aeabi_dmul+0x318>
 8001c1c:	0f42      	lsrs	r2, r0, #29
 8001c1e:	00e4      	lsls	r4, r4, #3
 8001c20:	4314      	orrs	r4, r2
 8001c22:	2280      	movs	r2, #128	; 0x80
 8001c24:	0412      	lsls	r2, r2, #16
 8001c26:	4314      	orrs	r4, r2
 8001c28:	4ad5      	ldr	r2, [pc, #852]	; (8001f80 <__aeabi_dmul+0x390>)
 8001c2a:	00c5      	lsls	r5, r0, #3
 8001c2c:	4694      	mov	ip, r2
 8001c2e:	4463      	add	r3, ip
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2300      	movs	r3, #0
 8001c34:	4699      	mov	r9, r3
 8001c36:	469b      	mov	fp, r3
 8001c38:	4643      	mov	r3, r8
 8001c3a:	4642      	mov	r2, r8
 8001c3c:	031e      	lsls	r6, r3, #12
 8001c3e:	0fd2      	lsrs	r2, r2, #31
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4650      	mov	r0, sl
 8001c44:	4690      	mov	r8, r2
 8001c46:	0b36      	lsrs	r6, r6, #12
 8001c48:	0d5b      	lsrs	r3, r3, #21
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dmul+0x5e>
 8001c4c:	e120      	b.n	8001e90 <__aeabi_dmul+0x2a0>
 8001c4e:	4acb      	ldr	r2, [pc, #812]	; (8001f7c <__aeabi_dmul+0x38c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dmul+0x66>
 8001c54:	e162      	b.n	8001f1c <__aeabi_dmul+0x32c>
 8001c56:	49ca      	ldr	r1, [pc, #808]	; (8001f80 <__aeabi_dmul+0x390>)
 8001c58:	0f42      	lsrs	r2, r0, #29
 8001c5a:	468c      	mov	ip, r1
 8001c5c:	9900      	ldr	r1, [sp, #0]
 8001c5e:	4463      	add	r3, ip
 8001c60:	00f6      	lsls	r6, r6, #3
 8001c62:	468c      	mov	ip, r1
 8001c64:	4316      	orrs	r6, r2
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	449c      	add	ip, r3
 8001c6a:	0412      	lsls	r2, r2, #16
 8001c6c:	4663      	mov	r3, ip
 8001c6e:	4316      	orrs	r6, r2
 8001c70:	00c2      	lsls	r2, r0, #3
 8001c72:	2000      	movs	r0, #0
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	9900      	ldr	r1, [sp, #0]
 8001c78:	4643      	mov	r3, r8
 8001c7a:	3101      	adds	r1, #1
 8001c7c:	468c      	mov	ip, r1
 8001c7e:	4649      	mov	r1, r9
 8001c80:	407b      	eors	r3, r7
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	290f      	cmp	r1, #15
 8001c86:	d826      	bhi.n	8001cd6 <__aeabi_dmul+0xe6>
 8001c88:	4bbe      	ldr	r3, [pc, #760]	; (8001f84 <__aeabi_dmul+0x394>)
 8001c8a:	0089      	lsls	r1, r1, #2
 8001c8c:	5859      	ldr	r1, [r3, r1]
 8001c8e:	468f      	mov	pc, r1
 8001c90:	4643      	mov	r3, r8
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	0034      	movs	r4, r6
 8001c96:	0015      	movs	r5, r2
 8001c98:	4683      	mov	fp, r0
 8001c9a:	465b      	mov	r3, fp
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d016      	beq.n	8001cce <__aeabi_dmul+0xde>
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_dmul+0xb6>
 8001ca4:	e203      	b.n	80020ae <__aeabi_dmul+0x4be>
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d000      	beq.n	8001cac <__aeabi_dmul+0xbc>
 8001caa:	e0cd      	b.n	8001e48 <__aeabi_dmul+0x258>
 8001cac:	2200      	movs	r2, #0
 8001cae:	2400      	movs	r4, #0
 8001cb0:	2500      	movs	r5, #0
 8001cb2:	9b01      	ldr	r3, [sp, #4]
 8001cb4:	0512      	lsls	r2, r2, #20
 8001cb6:	4322      	orrs	r2, r4
 8001cb8:	07db      	lsls	r3, r3, #31
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	0028      	movs	r0, r5
 8001cbe:	0011      	movs	r1, r2
 8001cc0:	b007      	add	sp, #28
 8001cc2:	bcf0      	pop	{r4, r5, r6, r7}
 8001cc4:	46bb      	mov	fp, r7
 8001cc6:	46b2      	mov	sl, r6
 8001cc8:	46a9      	mov	r9, r5
 8001cca:	46a0      	mov	r8, r4
 8001ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cce:	2400      	movs	r4, #0
 8001cd0:	2500      	movs	r5, #0
 8001cd2:	4aaa      	ldr	r2, [pc, #680]	; (8001f7c <__aeabi_dmul+0x38c>)
 8001cd4:	e7ed      	b.n	8001cb2 <__aeabi_dmul+0xc2>
 8001cd6:	0c28      	lsrs	r0, r5, #16
 8001cd8:	042d      	lsls	r5, r5, #16
 8001cda:	0c2d      	lsrs	r5, r5, #16
 8001cdc:	002b      	movs	r3, r5
 8001cde:	0c11      	lsrs	r1, r2, #16
 8001ce0:	0412      	lsls	r2, r2, #16
 8001ce2:	0c12      	lsrs	r2, r2, #16
 8001ce4:	4353      	muls	r3, r2
 8001ce6:	4698      	mov	r8, r3
 8001ce8:	0013      	movs	r3, r2
 8001cea:	002f      	movs	r7, r5
 8001cec:	4343      	muls	r3, r0
 8001cee:	4699      	mov	r9, r3
 8001cf0:	434f      	muls	r7, r1
 8001cf2:	444f      	add	r7, r9
 8001cf4:	46bb      	mov	fp, r7
 8001cf6:	4647      	mov	r7, r8
 8001cf8:	000b      	movs	r3, r1
 8001cfa:	0c3f      	lsrs	r7, r7, #16
 8001cfc:	46ba      	mov	sl, r7
 8001cfe:	4343      	muls	r3, r0
 8001d00:	44da      	add	sl, fp
 8001d02:	9302      	str	r3, [sp, #8]
 8001d04:	45d1      	cmp	r9, sl
 8001d06:	d904      	bls.n	8001d12 <__aeabi_dmul+0x122>
 8001d08:	2780      	movs	r7, #128	; 0x80
 8001d0a:	027f      	lsls	r7, r7, #9
 8001d0c:	46b9      	mov	r9, r7
 8001d0e:	444b      	add	r3, r9
 8001d10:	9302      	str	r3, [sp, #8]
 8001d12:	4653      	mov	r3, sl
 8001d14:	0c1b      	lsrs	r3, r3, #16
 8001d16:	469b      	mov	fp, r3
 8001d18:	4653      	mov	r3, sl
 8001d1a:	041f      	lsls	r7, r3, #16
 8001d1c:	4643      	mov	r3, r8
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	0c1b      	lsrs	r3, r3, #16
 8001d22:	4698      	mov	r8, r3
 8001d24:	003b      	movs	r3, r7
 8001d26:	4443      	add	r3, r8
 8001d28:	9304      	str	r3, [sp, #16]
 8001d2a:	0c33      	lsrs	r3, r6, #16
 8001d2c:	0436      	lsls	r6, r6, #16
 8001d2e:	0c36      	lsrs	r6, r6, #16
 8001d30:	4698      	mov	r8, r3
 8001d32:	0033      	movs	r3, r6
 8001d34:	4343      	muls	r3, r0
 8001d36:	4699      	mov	r9, r3
 8001d38:	4643      	mov	r3, r8
 8001d3a:	4343      	muls	r3, r0
 8001d3c:	002f      	movs	r7, r5
 8001d3e:	469a      	mov	sl, r3
 8001d40:	4643      	mov	r3, r8
 8001d42:	4377      	muls	r7, r6
 8001d44:	435d      	muls	r5, r3
 8001d46:	0c38      	lsrs	r0, r7, #16
 8001d48:	444d      	add	r5, r9
 8001d4a:	1945      	adds	r5, r0, r5
 8001d4c:	45a9      	cmp	r9, r5
 8001d4e:	d903      	bls.n	8001d58 <__aeabi_dmul+0x168>
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	025b      	lsls	r3, r3, #9
 8001d54:	4699      	mov	r9, r3
 8001d56:	44ca      	add	sl, r9
 8001d58:	043f      	lsls	r7, r7, #16
 8001d5a:	0c28      	lsrs	r0, r5, #16
 8001d5c:	0c3f      	lsrs	r7, r7, #16
 8001d5e:	042d      	lsls	r5, r5, #16
 8001d60:	19ed      	adds	r5, r5, r7
 8001d62:	0c27      	lsrs	r7, r4, #16
 8001d64:	0424      	lsls	r4, r4, #16
 8001d66:	0c24      	lsrs	r4, r4, #16
 8001d68:	0003      	movs	r3, r0
 8001d6a:	0020      	movs	r0, r4
 8001d6c:	4350      	muls	r0, r2
 8001d6e:	437a      	muls	r2, r7
 8001d70:	4691      	mov	r9, r2
 8001d72:	003a      	movs	r2, r7
 8001d74:	4453      	add	r3, sl
 8001d76:	9305      	str	r3, [sp, #20]
 8001d78:	0c03      	lsrs	r3, r0, #16
 8001d7a:	469a      	mov	sl, r3
 8001d7c:	434a      	muls	r2, r1
 8001d7e:	4361      	muls	r1, r4
 8001d80:	4449      	add	r1, r9
 8001d82:	4451      	add	r1, sl
 8001d84:	44ab      	add	fp, r5
 8001d86:	4589      	cmp	r9, r1
 8001d88:	d903      	bls.n	8001d92 <__aeabi_dmul+0x1a2>
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	025b      	lsls	r3, r3, #9
 8001d8e:	4699      	mov	r9, r3
 8001d90:	444a      	add	r2, r9
 8001d92:	0400      	lsls	r0, r0, #16
 8001d94:	0c0b      	lsrs	r3, r1, #16
 8001d96:	0c00      	lsrs	r0, r0, #16
 8001d98:	0409      	lsls	r1, r1, #16
 8001d9a:	1809      	adds	r1, r1, r0
 8001d9c:	0020      	movs	r0, r4
 8001d9e:	4699      	mov	r9, r3
 8001da0:	4643      	mov	r3, r8
 8001da2:	4370      	muls	r0, r6
 8001da4:	435c      	muls	r4, r3
 8001da6:	437e      	muls	r6, r7
 8001da8:	435f      	muls	r7, r3
 8001daa:	0c03      	lsrs	r3, r0, #16
 8001dac:	4698      	mov	r8, r3
 8001dae:	19a4      	adds	r4, r4, r6
 8001db0:	4444      	add	r4, r8
 8001db2:	444a      	add	r2, r9
 8001db4:	9703      	str	r7, [sp, #12]
 8001db6:	42a6      	cmp	r6, r4
 8001db8:	d904      	bls.n	8001dc4 <__aeabi_dmul+0x1d4>
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	025b      	lsls	r3, r3, #9
 8001dbe:	4698      	mov	r8, r3
 8001dc0:	4447      	add	r7, r8
 8001dc2:	9703      	str	r7, [sp, #12]
 8001dc4:	0423      	lsls	r3, r4, #16
 8001dc6:	9e02      	ldr	r6, [sp, #8]
 8001dc8:	469a      	mov	sl, r3
 8001dca:	9b05      	ldr	r3, [sp, #20]
 8001dcc:	445e      	add	r6, fp
 8001dce:	4698      	mov	r8, r3
 8001dd0:	42ae      	cmp	r6, r5
 8001dd2:	41ad      	sbcs	r5, r5
 8001dd4:	1876      	adds	r6, r6, r1
 8001dd6:	428e      	cmp	r6, r1
 8001dd8:	4189      	sbcs	r1, r1
 8001dda:	0400      	lsls	r0, r0, #16
 8001ddc:	0c00      	lsrs	r0, r0, #16
 8001dde:	4450      	add	r0, sl
 8001de0:	4440      	add	r0, r8
 8001de2:	426d      	negs	r5, r5
 8001de4:	1947      	adds	r7, r0, r5
 8001de6:	46b8      	mov	r8, r7
 8001de8:	4693      	mov	fp, r2
 8001dea:	4249      	negs	r1, r1
 8001dec:	4689      	mov	r9, r1
 8001dee:	44c3      	add	fp, r8
 8001df0:	44d9      	add	r9, fp
 8001df2:	4298      	cmp	r0, r3
 8001df4:	4180      	sbcs	r0, r0
 8001df6:	45a8      	cmp	r8, r5
 8001df8:	41ad      	sbcs	r5, r5
 8001dfa:	4593      	cmp	fp, r2
 8001dfc:	4192      	sbcs	r2, r2
 8001dfe:	4589      	cmp	r9, r1
 8001e00:	4189      	sbcs	r1, r1
 8001e02:	426d      	negs	r5, r5
 8001e04:	4240      	negs	r0, r0
 8001e06:	4328      	orrs	r0, r5
 8001e08:	0c24      	lsrs	r4, r4, #16
 8001e0a:	4252      	negs	r2, r2
 8001e0c:	4249      	negs	r1, r1
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	9b03      	ldr	r3, [sp, #12]
 8001e12:	1900      	adds	r0, r0, r4
 8001e14:	1880      	adds	r0, r0, r2
 8001e16:	18c7      	adds	r7, r0, r3
 8001e18:	464b      	mov	r3, r9
 8001e1a:	0ddc      	lsrs	r4, r3, #23
 8001e1c:	9b04      	ldr	r3, [sp, #16]
 8001e1e:	0275      	lsls	r5, r6, #9
 8001e20:	431d      	orrs	r5, r3
 8001e22:	1e6a      	subs	r2, r5, #1
 8001e24:	4195      	sbcs	r5, r2
 8001e26:	464b      	mov	r3, r9
 8001e28:	0df6      	lsrs	r6, r6, #23
 8001e2a:	027f      	lsls	r7, r7, #9
 8001e2c:	4335      	orrs	r5, r6
 8001e2e:	025a      	lsls	r2, r3, #9
 8001e30:	433c      	orrs	r4, r7
 8001e32:	4315      	orrs	r5, r2
 8001e34:	01fb      	lsls	r3, r7, #7
 8001e36:	d400      	bmi.n	8001e3a <__aeabi_dmul+0x24a>
 8001e38:	e11c      	b.n	8002074 <__aeabi_dmul+0x484>
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	086a      	lsrs	r2, r5, #1
 8001e3e:	400d      	ands	r5, r1
 8001e40:	4315      	orrs	r5, r2
 8001e42:	07e2      	lsls	r2, r4, #31
 8001e44:	4315      	orrs	r5, r2
 8001e46:	0864      	lsrs	r4, r4, #1
 8001e48:	494f      	ldr	r1, [pc, #316]	; (8001f88 <__aeabi_dmul+0x398>)
 8001e4a:	4461      	add	r1, ip
 8001e4c:	2900      	cmp	r1, #0
 8001e4e:	dc00      	bgt.n	8001e52 <__aeabi_dmul+0x262>
 8001e50:	e0b0      	b.n	8001fb4 <__aeabi_dmul+0x3c4>
 8001e52:	076b      	lsls	r3, r5, #29
 8001e54:	d009      	beq.n	8001e6a <__aeabi_dmul+0x27a>
 8001e56:	220f      	movs	r2, #15
 8001e58:	402a      	ands	r2, r5
 8001e5a:	2a04      	cmp	r2, #4
 8001e5c:	d005      	beq.n	8001e6a <__aeabi_dmul+0x27a>
 8001e5e:	1d2a      	adds	r2, r5, #4
 8001e60:	42aa      	cmp	r2, r5
 8001e62:	41ad      	sbcs	r5, r5
 8001e64:	426d      	negs	r5, r5
 8001e66:	1964      	adds	r4, r4, r5
 8001e68:	0015      	movs	r5, r2
 8001e6a:	01e3      	lsls	r3, r4, #7
 8001e6c:	d504      	bpl.n	8001e78 <__aeabi_dmul+0x288>
 8001e6e:	2180      	movs	r1, #128	; 0x80
 8001e70:	4a46      	ldr	r2, [pc, #280]	; (8001f8c <__aeabi_dmul+0x39c>)
 8001e72:	00c9      	lsls	r1, r1, #3
 8001e74:	4014      	ands	r4, r2
 8001e76:	4461      	add	r1, ip
 8001e78:	4a45      	ldr	r2, [pc, #276]	; (8001f90 <__aeabi_dmul+0x3a0>)
 8001e7a:	4291      	cmp	r1, r2
 8001e7c:	dd00      	ble.n	8001e80 <__aeabi_dmul+0x290>
 8001e7e:	e726      	b.n	8001cce <__aeabi_dmul+0xde>
 8001e80:	0762      	lsls	r2, r4, #29
 8001e82:	08ed      	lsrs	r5, r5, #3
 8001e84:	0264      	lsls	r4, r4, #9
 8001e86:	0549      	lsls	r1, r1, #21
 8001e88:	4315      	orrs	r5, r2
 8001e8a:	0b24      	lsrs	r4, r4, #12
 8001e8c:	0d4a      	lsrs	r2, r1, #21
 8001e8e:	e710      	b.n	8001cb2 <__aeabi_dmul+0xc2>
 8001e90:	4652      	mov	r2, sl
 8001e92:	4332      	orrs	r2, r6
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x2a8>
 8001e96:	e07f      	b.n	8001f98 <__aeabi_dmul+0x3a8>
 8001e98:	2e00      	cmp	r6, #0
 8001e9a:	d100      	bne.n	8001e9e <__aeabi_dmul+0x2ae>
 8001e9c:	e0dc      	b.n	8002058 <__aeabi_dmul+0x468>
 8001e9e:	0030      	movs	r0, r6
 8001ea0:	f000 fe1e 	bl	8002ae0 <__clzsi2>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	3a0b      	subs	r2, #11
 8001ea8:	231d      	movs	r3, #29
 8001eaa:	0001      	movs	r1, r0
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	4652      	mov	r2, sl
 8001eb0:	3908      	subs	r1, #8
 8001eb2:	40da      	lsrs	r2, r3
 8001eb4:	408e      	lsls	r6, r1
 8001eb6:	4316      	orrs	r6, r2
 8001eb8:	4652      	mov	r2, sl
 8001eba:	408a      	lsls	r2, r1
 8001ebc:	9b00      	ldr	r3, [sp, #0]
 8001ebe:	4935      	ldr	r1, [pc, #212]	; (8001f94 <__aeabi_dmul+0x3a4>)
 8001ec0:	1a18      	subs	r0, r3, r0
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	468c      	mov	ip, r1
 8001ec6:	4463      	add	r3, ip
 8001ec8:	2000      	movs	r0, #0
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	e6d3      	b.n	8001c76 <__aeabi_dmul+0x86>
 8001ece:	0025      	movs	r5, r4
 8001ed0:	4305      	orrs	r5, r0
 8001ed2:	d04a      	beq.n	8001f6a <__aeabi_dmul+0x37a>
 8001ed4:	2c00      	cmp	r4, #0
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dmul+0x2ea>
 8001ed8:	e0b0      	b.n	800203c <__aeabi_dmul+0x44c>
 8001eda:	0020      	movs	r0, r4
 8001edc:	f000 fe00 	bl	8002ae0 <__clzsi2>
 8001ee0:	0001      	movs	r1, r0
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	390b      	subs	r1, #11
 8001ee6:	231d      	movs	r3, #29
 8001ee8:	0010      	movs	r0, r2
 8001eea:	1a5b      	subs	r3, r3, r1
 8001eec:	0031      	movs	r1, r6
 8001eee:	0035      	movs	r5, r6
 8001ef0:	3808      	subs	r0, #8
 8001ef2:	4084      	lsls	r4, r0
 8001ef4:	40d9      	lsrs	r1, r3
 8001ef6:	4085      	lsls	r5, r0
 8001ef8:	430c      	orrs	r4, r1
 8001efa:	4826      	ldr	r0, [pc, #152]	; (8001f94 <__aeabi_dmul+0x3a4>)
 8001efc:	1a83      	subs	r3, r0, r2
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	2300      	movs	r3, #0
 8001f02:	4699      	mov	r9, r3
 8001f04:	469b      	mov	fp, r3
 8001f06:	e697      	b.n	8001c38 <__aeabi_dmul+0x48>
 8001f08:	0005      	movs	r5, r0
 8001f0a:	4325      	orrs	r5, r4
 8001f0c:	d126      	bne.n	8001f5c <__aeabi_dmul+0x36c>
 8001f0e:	2208      	movs	r2, #8
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2302      	movs	r3, #2
 8001f14:	2400      	movs	r4, #0
 8001f16:	4691      	mov	r9, r2
 8001f18:	469b      	mov	fp, r3
 8001f1a:	e68d      	b.n	8001c38 <__aeabi_dmul+0x48>
 8001f1c:	4652      	mov	r2, sl
 8001f1e:	9b00      	ldr	r3, [sp, #0]
 8001f20:	4332      	orrs	r2, r6
 8001f22:	d110      	bne.n	8001f46 <__aeabi_dmul+0x356>
 8001f24:	4915      	ldr	r1, [pc, #84]	; (8001f7c <__aeabi_dmul+0x38c>)
 8001f26:	2600      	movs	r6, #0
 8001f28:	468c      	mov	ip, r1
 8001f2a:	4463      	add	r3, ip
 8001f2c:	4649      	mov	r1, r9
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2302      	movs	r3, #2
 8001f32:	4319      	orrs	r1, r3
 8001f34:	4689      	mov	r9, r1
 8001f36:	2002      	movs	r0, #2
 8001f38:	e69d      	b.n	8001c76 <__aeabi_dmul+0x86>
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	9701      	str	r7, [sp, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d000      	beq.n	8001f44 <__aeabi_dmul+0x354>
 8001f42:	e6ad      	b.n	8001ca0 <__aeabi_dmul+0xb0>
 8001f44:	e6c3      	b.n	8001cce <__aeabi_dmul+0xde>
 8001f46:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <__aeabi_dmul+0x38c>)
 8001f48:	2003      	movs	r0, #3
 8001f4a:	4694      	mov	ip, r2
 8001f4c:	4463      	add	r3, ip
 8001f4e:	464a      	mov	r2, r9
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2303      	movs	r3, #3
 8001f54:	431a      	orrs	r2, r3
 8001f56:	4691      	mov	r9, r2
 8001f58:	4652      	mov	r2, sl
 8001f5a:	e68c      	b.n	8001c76 <__aeabi_dmul+0x86>
 8001f5c:	220c      	movs	r2, #12
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2303      	movs	r3, #3
 8001f62:	0005      	movs	r5, r0
 8001f64:	4691      	mov	r9, r2
 8001f66:	469b      	mov	fp, r3
 8001f68:	e666      	b.n	8001c38 <__aeabi_dmul+0x48>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	4699      	mov	r9, r3
 8001f6e:	2300      	movs	r3, #0
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	3301      	adds	r3, #1
 8001f74:	2400      	movs	r4, #0
 8001f76:	469b      	mov	fp, r3
 8001f78:	e65e      	b.n	8001c38 <__aeabi_dmul+0x48>
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	000007ff 	.word	0x000007ff
 8001f80:	fffffc01 	.word	0xfffffc01
 8001f84:	0800cbc8 	.word	0x0800cbc8
 8001f88:	000003ff 	.word	0x000003ff
 8001f8c:	feffffff 	.word	0xfeffffff
 8001f90:	000007fe 	.word	0x000007fe
 8001f94:	fffffc0d 	.word	0xfffffc0d
 8001f98:	4649      	mov	r1, r9
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	4319      	orrs	r1, r3
 8001f9e:	4689      	mov	r9, r1
 8001fa0:	2600      	movs	r6, #0
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	e667      	b.n	8001c76 <__aeabi_dmul+0x86>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2480      	movs	r4, #128	; 0x80
 8001faa:	2500      	movs	r5, #0
 8001fac:	4a43      	ldr	r2, [pc, #268]	; (80020bc <__aeabi_dmul+0x4cc>)
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	0324      	lsls	r4, r4, #12
 8001fb2:	e67e      	b.n	8001cb2 <__aeabi_dmul+0xc2>
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	1a40      	subs	r0, r0, r1
 8001fb8:	2838      	cmp	r0, #56	; 0x38
 8001fba:	dd00      	ble.n	8001fbe <__aeabi_dmul+0x3ce>
 8001fbc:	e676      	b.n	8001cac <__aeabi_dmul+0xbc>
 8001fbe:	281f      	cmp	r0, #31
 8001fc0:	dd5b      	ble.n	800207a <__aeabi_dmul+0x48a>
 8001fc2:	221f      	movs	r2, #31
 8001fc4:	0023      	movs	r3, r4
 8001fc6:	4252      	negs	r2, r2
 8001fc8:	1a51      	subs	r1, r2, r1
 8001fca:	40cb      	lsrs	r3, r1
 8001fcc:	0019      	movs	r1, r3
 8001fce:	2820      	cmp	r0, #32
 8001fd0:	d003      	beq.n	8001fda <__aeabi_dmul+0x3ea>
 8001fd2:	4a3b      	ldr	r2, [pc, #236]	; (80020c0 <__aeabi_dmul+0x4d0>)
 8001fd4:	4462      	add	r2, ip
 8001fd6:	4094      	lsls	r4, r2
 8001fd8:	4325      	orrs	r5, r4
 8001fda:	1e6a      	subs	r2, r5, #1
 8001fdc:	4195      	sbcs	r5, r2
 8001fde:	002a      	movs	r2, r5
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	2107      	movs	r1, #7
 8001fe4:	000d      	movs	r5, r1
 8001fe6:	2400      	movs	r4, #0
 8001fe8:	4015      	ands	r5, r2
 8001fea:	4211      	tst	r1, r2
 8001fec:	d05b      	beq.n	80020a6 <__aeabi_dmul+0x4b6>
 8001fee:	210f      	movs	r1, #15
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	4011      	ands	r1, r2
 8001ff4:	2904      	cmp	r1, #4
 8001ff6:	d053      	beq.n	80020a0 <__aeabi_dmul+0x4b0>
 8001ff8:	1d11      	adds	r1, r2, #4
 8001ffa:	4291      	cmp	r1, r2
 8001ffc:	4192      	sbcs	r2, r2
 8001ffe:	4252      	negs	r2, r2
 8002000:	18a4      	adds	r4, r4, r2
 8002002:	000a      	movs	r2, r1
 8002004:	0223      	lsls	r3, r4, #8
 8002006:	d54b      	bpl.n	80020a0 <__aeabi_dmul+0x4b0>
 8002008:	2201      	movs	r2, #1
 800200a:	2400      	movs	r4, #0
 800200c:	2500      	movs	r5, #0
 800200e:	e650      	b.n	8001cb2 <__aeabi_dmul+0xc2>
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	031b      	lsls	r3, r3, #12
 8002014:	421c      	tst	r4, r3
 8002016:	d009      	beq.n	800202c <__aeabi_dmul+0x43c>
 8002018:	421e      	tst	r6, r3
 800201a:	d107      	bne.n	800202c <__aeabi_dmul+0x43c>
 800201c:	4333      	orrs	r3, r6
 800201e:	031c      	lsls	r4, r3, #12
 8002020:	4643      	mov	r3, r8
 8002022:	0015      	movs	r5, r2
 8002024:	0b24      	lsrs	r4, r4, #12
 8002026:	4a25      	ldr	r2, [pc, #148]	; (80020bc <__aeabi_dmul+0x4cc>)
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	e642      	b.n	8001cb2 <__aeabi_dmul+0xc2>
 800202c:	2280      	movs	r2, #128	; 0x80
 800202e:	0312      	lsls	r2, r2, #12
 8002030:	4314      	orrs	r4, r2
 8002032:	0324      	lsls	r4, r4, #12
 8002034:	4a21      	ldr	r2, [pc, #132]	; (80020bc <__aeabi_dmul+0x4cc>)
 8002036:	0b24      	lsrs	r4, r4, #12
 8002038:	9701      	str	r7, [sp, #4]
 800203a:	e63a      	b.n	8001cb2 <__aeabi_dmul+0xc2>
 800203c:	f000 fd50 	bl	8002ae0 <__clzsi2>
 8002040:	0001      	movs	r1, r0
 8002042:	0002      	movs	r2, r0
 8002044:	3115      	adds	r1, #21
 8002046:	3220      	adds	r2, #32
 8002048:	291c      	cmp	r1, #28
 800204a:	dc00      	bgt.n	800204e <__aeabi_dmul+0x45e>
 800204c:	e74b      	b.n	8001ee6 <__aeabi_dmul+0x2f6>
 800204e:	0034      	movs	r4, r6
 8002050:	3808      	subs	r0, #8
 8002052:	2500      	movs	r5, #0
 8002054:	4084      	lsls	r4, r0
 8002056:	e750      	b.n	8001efa <__aeabi_dmul+0x30a>
 8002058:	f000 fd42 	bl	8002ae0 <__clzsi2>
 800205c:	0003      	movs	r3, r0
 800205e:	001a      	movs	r2, r3
 8002060:	3215      	adds	r2, #21
 8002062:	3020      	adds	r0, #32
 8002064:	2a1c      	cmp	r2, #28
 8002066:	dc00      	bgt.n	800206a <__aeabi_dmul+0x47a>
 8002068:	e71e      	b.n	8001ea8 <__aeabi_dmul+0x2b8>
 800206a:	4656      	mov	r6, sl
 800206c:	3b08      	subs	r3, #8
 800206e:	2200      	movs	r2, #0
 8002070:	409e      	lsls	r6, r3
 8002072:	e723      	b.n	8001ebc <__aeabi_dmul+0x2cc>
 8002074:	9b00      	ldr	r3, [sp, #0]
 8002076:	469c      	mov	ip, r3
 8002078:	e6e6      	b.n	8001e48 <__aeabi_dmul+0x258>
 800207a:	4912      	ldr	r1, [pc, #72]	; (80020c4 <__aeabi_dmul+0x4d4>)
 800207c:	0022      	movs	r2, r4
 800207e:	4461      	add	r1, ip
 8002080:	002e      	movs	r6, r5
 8002082:	408d      	lsls	r5, r1
 8002084:	408a      	lsls	r2, r1
 8002086:	40c6      	lsrs	r6, r0
 8002088:	1e69      	subs	r1, r5, #1
 800208a:	418d      	sbcs	r5, r1
 800208c:	4332      	orrs	r2, r6
 800208e:	432a      	orrs	r2, r5
 8002090:	40c4      	lsrs	r4, r0
 8002092:	0753      	lsls	r3, r2, #29
 8002094:	d0b6      	beq.n	8002004 <__aeabi_dmul+0x414>
 8002096:	210f      	movs	r1, #15
 8002098:	4011      	ands	r1, r2
 800209a:	2904      	cmp	r1, #4
 800209c:	d1ac      	bne.n	8001ff8 <__aeabi_dmul+0x408>
 800209e:	e7b1      	b.n	8002004 <__aeabi_dmul+0x414>
 80020a0:	0765      	lsls	r5, r4, #29
 80020a2:	0264      	lsls	r4, r4, #9
 80020a4:	0b24      	lsrs	r4, r4, #12
 80020a6:	08d2      	lsrs	r2, r2, #3
 80020a8:	4315      	orrs	r5, r2
 80020aa:	2200      	movs	r2, #0
 80020ac:	e601      	b.n	8001cb2 <__aeabi_dmul+0xc2>
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	0312      	lsls	r2, r2, #12
 80020b2:	4314      	orrs	r4, r2
 80020b4:	0324      	lsls	r4, r4, #12
 80020b6:	4a01      	ldr	r2, [pc, #4]	; (80020bc <__aeabi_dmul+0x4cc>)
 80020b8:	0b24      	lsrs	r4, r4, #12
 80020ba:	e5fa      	b.n	8001cb2 <__aeabi_dmul+0xc2>
 80020bc:	000007ff 	.word	0x000007ff
 80020c0:	0000043e 	.word	0x0000043e
 80020c4:	0000041e 	.word	0x0000041e

080020c8 <__aeabi_dsub>:
 80020c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ca:	4657      	mov	r7, sl
 80020cc:	464e      	mov	r6, r9
 80020ce:	4645      	mov	r5, r8
 80020d0:	46de      	mov	lr, fp
 80020d2:	b5e0      	push	{r5, r6, r7, lr}
 80020d4:	001e      	movs	r6, r3
 80020d6:	0017      	movs	r7, r2
 80020d8:	004a      	lsls	r2, r1, #1
 80020da:	030b      	lsls	r3, r1, #12
 80020dc:	0d52      	lsrs	r2, r2, #21
 80020de:	0a5b      	lsrs	r3, r3, #9
 80020e0:	4690      	mov	r8, r2
 80020e2:	0f42      	lsrs	r2, r0, #29
 80020e4:	431a      	orrs	r2, r3
 80020e6:	0fcd      	lsrs	r5, r1, #31
 80020e8:	4ccd      	ldr	r4, [pc, #820]	; (8002420 <__aeabi_dsub+0x358>)
 80020ea:	0331      	lsls	r1, r6, #12
 80020ec:	00c3      	lsls	r3, r0, #3
 80020ee:	4694      	mov	ip, r2
 80020f0:	0070      	lsls	r0, r6, #1
 80020f2:	0f7a      	lsrs	r2, r7, #29
 80020f4:	0a49      	lsrs	r1, r1, #9
 80020f6:	00ff      	lsls	r7, r7, #3
 80020f8:	469a      	mov	sl, r3
 80020fa:	46b9      	mov	r9, r7
 80020fc:	0d40      	lsrs	r0, r0, #21
 80020fe:	0ff6      	lsrs	r6, r6, #31
 8002100:	4311      	orrs	r1, r2
 8002102:	42a0      	cmp	r0, r4
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x40>
 8002106:	e0b1      	b.n	800226c <__aeabi_dsub+0x1a4>
 8002108:	2201      	movs	r2, #1
 800210a:	4056      	eors	r6, r2
 800210c:	46b3      	mov	fp, r6
 800210e:	42b5      	cmp	r5, r6
 8002110:	d100      	bne.n	8002114 <__aeabi_dsub+0x4c>
 8002112:	e088      	b.n	8002226 <__aeabi_dsub+0x15e>
 8002114:	4642      	mov	r2, r8
 8002116:	1a12      	subs	r2, r2, r0
 8002118:	2a00      	cmp	r2, #0
 800211a:	dc00      	bgt.n	800211e <__aeabi_dsub+0x56>
 800211c:	e0ae      	b.n	800227c <__aeabi_dsub+0x1b4>
 800211e:	2800      	cmp	r0, #0
 8002120:	d100      	bne.n	8002124 <__aeabi_dsub+0x5c>
 8002122:	e0c1      	b.n	80022a8 <__aeabi_dsub+0x1e0>
 8002124:	48be      	ldr	r0, [pc, #760]	; (8002420 <__aeabi_dsub+0x358>)
 8002126:	4580      	cmp	r8, r0
 8002128:	d100      	bne.n	800212c <__aeabi_dsub+0x64>
 800212a:	e151      	b.n	80023d0 <__aeabi_dsub+0x308>
 800212c:	2080      	movs	r0, #128	; 0x80
 800212e:	0400      	lsls	r0, r0, #16
 8002130:	4301      	orrs	r1, r0
 8002132:	2a38      	cmp	r2, #56	; 0x38
 8002134:	dd00      	ble.n	8002138 <__aeabi_dsub+0x70>
 8002136:	e17b      	b.n	8002430 <__aeabi_dsub+0x368>
 8002138:	2a1f      	cmp	r2, #31
 800213a:	dd00      	ble.n	800213e <__aeabi_dsub+0x76>
 800213c:	e1ee      	b.n	800251c <__aeabi_dsub+0x454>
 800213e:	2020      	movs	r0, #32
 8002140:	003e      	movs	r6, r7
 8002142:	1a80      	subs	r0, r0, r2
 8002144:	000c      	movs	r4, r1
 8002146:	40d6      	lsrs	r6, r2
 8002148:	40d1      	lsrs	r1, r2
 800214a:	4087      	lsls	r7, r0
 800214c:	4662      	mov	r2, ip
 800214e:	4084      	lsls	r4, r0
 8002150:	1a52      	subs	r2, r2, r1
 8002152:	1e78      	subs	r0, r7, #1
 8002154:	4187      	sbcs	r7, r0
 8002156:	4694      	mov	ip, r2
 8002158:	4334      	orrs	r4, r6
 800215a:	4327      	orrs	r7, r4
 800215c:	1bdc      	subs	r4, r3, r7
 800215e:	42a3      	cmp	r3, r4
 8002160:	419b      	sbcs	r3, r3
 8002162:	4662      	mov	r2, ip
 8002164:	425b      	negs	r3, r3
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	4699      	mov	r9, r3
 800216a:	464b      	mov	r3, r9
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	d400      	bmi.n	8002172 <__aeabi_dsub+0xaa>
 8002170:	e118      	b.n	80023a4 <__aeabi_dsub+0x2dc>
 8002172:	464b      	mov	r3, r9
 8002174:	0258      	lsls	r0, r3, #9
 8002176:	0a43      	lsrs	r3, r0, #9
 8002178:	4699      	mov	r9, r3
 800217a:	464b      	mov	r3, r9
 800217c:	2b00      	cmp	r3, #0
 800217e:	d100      	bne.n	8002182 <__aeabi_dsub+0xba>
 8002180:	e137      	b.n	80023f2 <__aeabi_dsub+0x32a>
 8002182:	4648      	mov	r0, r9
 8002184:	f000 fcac 	bl	8002ae0 <__clzsi2>
 8002188:	0001      	movs	r1, r0
 800218a:	3908      	subs	r1, #8
 800218c:	2320      	movs	r3, #32
 800218e:	0022      	movs	r2, r4
 8002190:	4648      	mov	r0, r9
 8002192:	1a5b      	subs	r3, r3, r1
 8002194:	40da      	lsrs	r2, r3
 8002196:	4088      	lsls	r0, r1
 8002198:	408c      	lsls	r4, r1
 800219a:	4643      	mov	r3, r8
 800219c:	4310      	orrs	r0, r2
 800219e:	4588      	cmp	r8, r1
 80021a0:	dd00      	ble.n	80021a4 <__aeabi_dsub+0xdc>
 80021a2:	e136      	b.n	8002412 <__aeabi_dsub+0x34a>
 80021a4:	1ac9      	subs	r1, r1, r3
 80021a6:	1c4b      	adds	r3, r1, #1
 80021a8:	2b1f      	cmp	r3, #31
 80021aa:	dd00      	ble.n	80021ae <__aeabi_dsub+0xe6>
 80021ac:	e0ea      	b.n	8002384 <__aeabi_dsub+0x2bc>
 80021ae:	2220      	movs	r2, #32
 80021b0:	0026      	movs	r6, r4
 80021b2:	1ad2      	subs	r2, r2, r3
 80021b4:	0001      	movs	r1, r0
 80021b6:	4094      	lsls	r4, r2
 80021b8:	40de      	lsrs	r6, r3
 80021ba:	40d8      	lsrs	r0, r3
 80021bc:	2300      	movs	r3, #0
 80021be:	4091      	lsls	r1, r2
 80021c0:	1e62      	subs	r2, r4, #1
 80021c2:	4194      	sbcs	r4, r2
 80021c4:	4681      	mov	r9, r0
 80021c6:	4698      	mov	r8, r3
 80021c8:	4331      	orrs	r1, r6
 80021ca:	430c      	orrs	r4, r1
 80021cc:	0763      	lsls	r3, r4, #29
 80021ce:	d009      	beq.n	80021e4 <__aeabi_dsub+0x11c>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4023      	ands	r3, r4
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d005      	beq.n	80021e4 <__aeabi_dsub+0x11c>
 80021d8:	1d23      	adds	r3, r4, #4
 80021da:	42a3      	cmp	r3, r4
 80021dc:	41a4      	sbcs	r4, r4
 80021de:	4264      	negs	r4, r4
 80021e0:	44a1      	add	r9, r4
 80021e2:	001c      	movs	r4, r3
 80021e4:	464b      	mov	r3, r9
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	d400      	bmi.n	80021ec <__aeabi_dsub+0x124>
 80021ea:	e0de      	b.n	80023aa <__aeabi_dsub+0x2e2>
 80021ec:	4641      	mov	r1, r8
 80021ee:	4b8c      	ldr	r3, [pc, #560]	; (8002420 <__aeabi_dsub+0x358>)
 80021f0:	3101      	adds	r1, #1
 80021f2:	4299      	cmp	r1, r3
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x130>
 80021f6:	e0e7      	b.n	80023c8 <__aeabi_dsub+0x300>
 80021f8:	464b      	mov	r3, r9
 80021fa:	488a      	ldr	r0, [pc, #552]	; (8002424 <__aeabi_dsub+0x35c>)
 80021fc:	08e4      	lsrs	r4, r4, #3
 80021fe:	4003      	ands	r3, r0
 8002200:	0018      	movs	r0, r3
 8002202:	0549      	lsls	r1, r1, #21
 8002204:	075b      	lsls	r3, r3, #29
 8002206:	0240      	lsls	r0, r0, #9
 8002208:	4323      	orrs	r3, r4
 800220a:	0d4a      	lsrs	r2, r1, #21
 800220c:	0b04      	lsrs	r4, r0, #12
 800220e:	0512      	lsls	r2, r2, #20
 8002210:	07ed      	lsls	r5, r5, #31
 8002212:	4322      	orrs	r2, r4
 8002214:	432a      	orrs	r2, r5
 8002216:	0018      	movs	r0, r3
 8002218:	0011      	movs	r1, r2
 800221a:	bcf0      	pop	{r4, r5, r6, r7}
 800221c:	46bb      	mov	fp, r7
 800221e:	46b2      	mov	sl, r6
 8002220:	46a9      	mov	r9, r5
 8002222:	46a0      	mov	r8, r4
 8002224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002226:	4642      	mov	r2, r8
 8002228:	1a12      	subs	r2, r2, r0
 800222a:	2a00      	cmp	r2, #0
 800222c:	dd52      	ble.n	80022d4 <__aeabi_dsub+0x20c>
 800222e:	2800      	cmp	r0, #0
 8002230:	d100      	bne.n	8002234 <__aeabi_dsub+0x16c>
 8002232:	e09c      	b.n	800236e <__aeabi_dsub+0x2a6>
 8002234:	45a0      	cmp	r8, r4
 8002236:	d100      	bne.n	800223a <__aeabi_dsub+0x172>
 8002238:	e0ca      	b.n	80023d0 <__aeabi_dsub+0x308>
 800223a:	2080      	movs	r0, #128	; 0x80
 800223c:	0400      	lsls	r0, r0, #16
 800223e:	4301      	orrs	r1, r0
 8002240:	2a38      	cmp	r2, #56	; 0x38
 8002242:	dd00      	ble.n	8002246 <__aeabi_dsub+0x17e>
 8002244:	e149      	b.n	80024da <__aeabi_dsub+0x412>
 8002246:	2a1f      	cmp	r2, #31
 8002248:	dc00      	bgt.n	800224c <__aeabi_dsub+0x184>
 800224a:	e197      	b.n	800257c <__aeabi_dsub+0x4b4>
 800224c:	0010      	movs	r0, r2
 800224e:	000e      	movs	r6, r1
 8002250:	3820      	subs	r0, #32
 8002252:	40c6      	lsrs	r6, r0
 8002254:	2a20      	cmp	r2, #32
 8002256:	d004      	beq.n	8002262 <__aeabi_dsub+0x19a>
 8002258:	2040      	movs	r0, #64	; 0x40
 800225a:	1a82      	subs	r2, r0, r2
 800225c:	4091      	lsls	r1, r2
 800225e:	430f      	orrs	r7, r1
 8002260:	46b9      	mov	r9, r7
 8002262:	464c      	mov	r4, r9
 8002264:	1e62      	subs	r2, r4, #1
 8002266:	4194      	sbcs	r4, r2
 8002268:	4334      	orrs	r4, r6
 800226a:	e13a      	b.n	80024e2 <__aeabi_dsub+0x41a>
 800226c:	000a      	movs	r2, r1
 800226e:	433a      	orrs	r2, r7
 8002270:	d028      	beq.n	80022c4 <__aeabi_dsub+0x1fc>
 8002272:	46b3      	mov	fp, r6
 8002274:	42b5      	cmp	r5, r6
 8002276:	d02b      	beq.n	80022d0 <__aeabi_dsub+0x208>
 8002278:	4a6b      	ldr	r2, [pc, #428]	; (8002428 <__aeabi_dsub+0x360>)
 800227a:	4442      	add	r2, r8
 800227c:	2a00      	cmp	r2, #0
 800227e:	d05d      	beq.n	800233c <__aeabi_dsub+0x274>
 8002280:	4642      	mov	r2, r8
 8002282:	4644      	mov	r4, r8
 8002284:	1a82      	subs	r2, r0, r2
 8002286:	2c00      	cmp	r4, #0
 8002288:	d000      	beq.n	800228c <__aeabi_dsub+0x1c4>
 800228a:	e0f5      	b.n	8002478 <__aeabi_dsub+0x3b0>
 800228c:	4665      	mov	r5, ip
 800228e:	431d      	orrs	r5, r3
 8002290:	d100      	bne.n	8002294 <__aeabi_dsub+0x1cc>
 8002292:	e19c      	b.n	80025ce <__aeabi_dsub+0x506>
 8002294:	1e55      	subs	r5, r2, #1
 8002296:	2a01      	cmp	r2, #1
 8002298:	d100      	bne.n	800229c <__aeabi_dsub+0x1d4>
 800229a:	e1fb      	b.n	8002694 <__aeabi_dsub+0x5cc>
 800229c:	4c60      	ldr	r4, [pc, #384]	; (8002420 <__aeabi_dsub+0x358>)
 800229e:	42a2      	cmp	r2, r4
 80022a0:	d100      	bne.n	80022a4 <__aeabi_dsub+0x1dc>
 80022a2:	e1bd      	b.n	8002620 <__aeabi_dsub+0x558>
 80022a4:	002a      	movs	r2, r5
 80022a6:	e0f0      	b.n	800248a <__aeabi_dsub+0x3c2>
 80022a8:	0008      	movs	r0, r1
 80022aa:	4338      	orrs	r0, r7
 80022ac:	d100      	bne.n	80022b0 <__aeabi_dsub+0x1e8>
 80022ae:	e0c3      	b.n	8002438 <__aeabi_dsub+0x370>
 80022b0:	1e50      	subs	r0, r2, #1
 80022b2:	2a01      	cmp	r2, #1
 80022b4:	d100      	bne.n	80022b8 <__aeabi_dsub+0x1f0>
 80022b6:	e1a8      	b.n	800260a <__aeabi_dsub+0x542>
 80022b8:	4c59      	ldr	r4, [pc, #356]	; (8002420 <__aeabi_dsub+0x358>)
 80022ba:	42a2      	cmp	r2, r4
 80022bc:	d100      	bne.n	80022c0 <__aeabi_dsub+0x1f8>
 80022be:	e087      	b.n	80023d0 <__aeabi_dsub+0x308>
 80022c0:	0002      	movs	r2, r0
 80022c2:	e736      	b.n	8002132 <__aeabi_dsub+0x6a>
 80022c4:	2201      	movs	r2, #1
 80022c6:	4056      	eors	r6, r2
 80022c8:	46b3      	mov	fp, r6
 80022ca:	42b5      	cmp	r5, r6
 80022cc:	d000      	beq.n	80022d0 <__aeabi_dsub+0x208>
 80022ce:	e721      	b.n	8002114 <__aeabi_dsub+0x4c>
 80022d0:	4a55      	ldr	r2, [pc, #340]	; (8002428 <__aeabi_dsub+0x360>)
 80022d2:	4442      	add	r2, r8
 80022d4:	2a00      	cmp	r2, #0
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x212>
 80022d8:	e0b5      	b.n	8002446 <__aeabi_dsub+0x37e>
 80022da:	4642      	mov	r2, r8
 80022dc:	4644      	mov	r4, r8
 80022de:	1a82      	subs	r2, r0, r2
 80022e0:	2c00      	cmp	r4, #0
 80022e2:	d100      	bne.n	80022e6 <__aeabi_dsub+0x21e>
 80022e4:	e138      	b.n	8002558 <__aeabi_dsub+0x490>
 80022e6:	4e4e      	ldr	r6, [pc, #312]	; (8002420 <__aeabi_dsub+0x358>)
 80022e8:	42b0      	cmp	r0, r6
 80022ea:	d100      	bne.n	80022ee <__aeabi_dsub+0x226>
 80022ec:	e1de      	b.n	80026ac <__aeabi_dsub+0x5e4>
 80022ee:	2680      	movs	r6, #128	; 0x80
 80022f0:	4664      	mov	r4, ip
 80022f2:	0436      	lsls	r6, r6, #16
 80022f4:	4334      	orrs	r4, r6
 80022f6:	46a4      	mov	ip, r4
 80022f8:	2a38      	cmp	r2, #56	; 0x38
 80022fa:	dd00      	ble.n	80022fe <__aeabi_dsub+0x236>
 80022fc:	e196      	b.n	800262c <__aeabi_dsub+0x564>
 80022fe:	2a1f      	cmp	r2, #31
 8002300:	dd00      	ble.n	8002304 <__aeabi_dsub+0x23c>
 8002302:	e224      	b.n	800274e <__aeabi_dsub+0x686>
 8002304:	2620      	movs	r6, #32
 8002306:	1ab4      	subs	r4, r6, r2
 8002308:	46a2      	mov	sl, r4
 800230a:	4664      	mov	r4, ip
 800230c:	4656      	mov	r6, sl
 800230e:	40b4      	lsls	r4, r6
 8002310:	46a1      	mov	r9, r4
 8002312:	001c      	movs	r4, r3
 8002314:	464e      	mov	r6, r9
 8002316:	40d4      	lsrs	r4, r2
 8002318:	4326      	orrs	r6, r4
 800231a:	0034      	movs	r4, r6
 800231c:	4656      	mov	r6, sl
 800231e:	40b3      	lsls	r3, r6
 8002320:	1e5e      	subs	r6, r3, #1
 8002322:	41b3      	sbcs	r3, r6
 8002324:	431c      	orrs	r4, r3
 8002326:	4663      	mov	r3, ip
 8002328:	40d3      	lsrs	r3, r2
 800232a:	18c9      	adds	r1, r1, r3
 800232c:	19e4      	adds	r4, r4, r7
 800232e:	42bc      	cmp	r4, r7
 8002330:	41bf      	sbcs	r7, r7
 8002332:	427f      	negs	r7, r7
 8002334:	46b9      	mov	r9, r7
 8002336:	4680      	mov	r8, r0
 8002338:	4489      	add	r9, r1
 800233a:	e0d8      	b.n	80024ee <__aeabi_dsub+0x426>
 800233c:	4640      	mov	r0, r8
 800233e:	4c3b      	ldr	r4, [pc, #236]	; (800242c <__aeabi_dsub+0x364>)
 8002340:	3001      	adds	r0, #1
 8002342:	4220      	tst	r0, r4
 8002344:	d000      	beq.n	8002348 <__aeabi_dsub+0x280>
 8002346:	e0b4      	b.n	80024b2 <__aeabi_dsub+0x3ea>
 8002348:	4640      	mov	r0, r8
 800234a:	2800      	cmp	r0, #0
 800234c:	d000      	beq.n	8002350 <__aeabi_dsub+0x288>
 800234e:	e144      	b.n	80025da <__aeabi_dsub+0x512>
 8002350:	4660      	mov	r0, ip
 8002352:	4318      	orrs	r0, r3
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x290>
 8002356:	e190      	b.n	800267a <__aeabi_dsub+0x5b2>
 8002358:	0008      	movs	r0, r1
 800235a:	4338      	orrs	r0, r7
 800235c:	d000      	beq.n	8002360 <__aeabi_dsub+0x298>
 800235e:	e1aa      	b.n	80026b6 <__aeabi_dsub+0x5ee>
 8002360:	4661      	mov	r1, ip
 8002362:	08db      	lsrs	r3, r3, #3
 8002364:	0749      	lsls	r1, r1, #29
 8002366:	430b      	orrs	r3, r1
 8002368:	4661      	mov	r1, ip
 800236a:	08cc      	lsrs	r4, r1, #3
 800236c:	e027      	b.n	80023be <__aeabi_dsub+0x2f6>
 800236e:	0008      	movs	r0, r1
 8002370:	4338      	orrs	r0, r7
 8002372:	d061      	beq.n	8002438 <__aeabi_dsub+0x370>
 8002374:	1e50      	subs	r0, r2, #1
 8002376:	2a01      	cmp	r2, #1
 8002378:	d100      	bne.n	800237c <__aeabi_dsub+0x2b4>
 800237a:	e139      	b.n	80025f0 <__aeabi_dsub+0x528>
 800237c:	42a2      	cmp	r2, r4
 800237e:	d027      	beq.n	80023d0 <__aeabi_dsub+0x308>
 8002380:	0002      	movs	r2, r0
 8002382:	e75d      	b.n	8002240 <__aeabi_dsub+0x178>
 8002384:	0002      	movs	r2, r0
 8002386:	391f      	subs	r1, #31
 8002388:	40ca      	lsrs	r2, r1
 800238a:	0011      	movs	r1, r2
 800238c:	2b20      	cmp	r3, #32
 800238e:	d003      	beq.n	8002398 <__aeabi_dsub+0x2d0>
 8002390:	2240      	movs	r2, #64	; 0x40
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	4098      	lsls	r0, r3
 8002396:	4304      	orrs	r4, r0
 8002398:	1e63      	subs	r3, r4, #1
 800239a:	419c      	sbcs	r4, r3
 800239c:	2300      	movs	r3, #0
 800239e:	4699      	mov	r9, r3
 80023a0:	4698      	mov	r8, r3
 80023a2:	430c      	orrs	r4, r1
 80023a4:	0763      	lsls	r3, r4, #29
 80023a6:	d000      	beq.n	80023aa <__aeabi_dsub+0x2e2>
 80023a8:	e712      	b.n	80021d0 <__aeabi_dsub+0x108>
 80023aa:	464b      	mov	r3, r9
 80023ac:	464a      	mov	r2, r9
 80023ae:	08e4      	lsrs	r4, r4, #3
 80023b0:	075b      	lsls	r3, r3, #29
 80023b2:	4323      	orrs	r3, r4
 80023b4:	08d4      	lsrs	r4, r2, #3
 80023b6:	4642      	mov	r2, r8
 80023b8:	4919      	ldr	r1, [pc, #100]	; (8002420 <__aeabi_dsub+0x358>)
 80023ba:	428a      	cmp	r2, r1
 80023bc:	d00e      	beq.n	80023dc <__aeabi_dsub+0x314>
 80023be:	0324      	lsls	r4, r4, #12
 80023c0:	0552      	lsls	r2, r2, #21
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	0d52      	lsrs	r2, r2, #21
 80023c6:	e722      	b.n	800220e <__aeabi_dsub+0x146>
 80023c8:	000a      	movs	r2, r1
 80023ca:	2400      	movs	r4, #0
 80023cc:	2300      	movs	r3, #0
 80023ce:	e71e      	b.n	800220e <__aeabi_dsub+0x146>
 80023d0:	08db      	lsrs	r3, r3, #3
 80023d2:	4662      	mov	r2, ip
 80023d4:	0752      	lsls	r2, r2, #29
 80023d6:	4313      	orrs	r3, r2
 80023d8:	4662      	mov	r2, ip
 80023da:	08d4      	lsrs	r4, r2, #3
 80023dc:	001a      	movs	r2, r3
 80023de:	4322      	orrs	r2, r4
 80023e0:	d100      	bne.n	80023e4 <__aeabi_dsub+0x31c>
 80023e2:	e1fc      	b.n	80027de <__aeabi_dsub+0x716>
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	0312      	lsls	r2, r2, #12
 80023e8:	4314      	orrs	r4, r2
 80023ea:	0324      	lsls	r4, r4, #12
 80023ec:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <__aeabi_dsub+0x358>)
 80023ee:	0b24      	lsrs	r4, r4, #12
 80023f0:	e70d      	b.n	800220e <__aeabi_dsub+0x146>
 80023f2:	0020      	movs	r0, r4
 80023f4:	f000 fb74 	bl	8002ae0 <__clzsi2>
 80023f8:	0001      	movs	r1, r0
 80023fa:	3118      	adds	r1, #24
 80023fc:	291f      	cmp	r1, #31
 80023fe:	dc00      	bgt.n	8002402 <__aeabi_dsub+0x33a>
 8002400:	e6c4      	b.n	800218c <__aeabi_dsub+0xc4>
 8002402:	3808      	subs	r0, #8
 8002404:	4084      	lsls	r4, r0
 8002406:	4643      	mov	r3, r8
 8002408:	0020      	movs	r0, r4
 800240a:	2400      	movs	r4, #0
 800240c:	4588      	cmp	r8, r1
 800240e:	dc00      	bgt.n	8002412 <__aeabi_dsub+0x34a>
 8002410:	e6c8      	b.n	80021a4 <__aeabi_dsub+0xdc>
 8002412:	4a04      	ldr	r2, [pc, #16]	; (8002424 <__aeabi_dsub+0x35c>)
 8002414:	1a5b      	subs	r3, r3, r1
 8002416:	4010      	ands	r0, r2
 8002418:	4698      	mov	r8, r3
 800241a:	4681      	mov	r9, r0
 800241c:	e6d6      	b.n	80021cc <__aeabi_dsub+0x104>
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	000007ff 	.word	0x000007ff
 8002424:	ff7fffff 	.word	0xff7fffff
 8002428:	fffff801 	.word	0xfffff801
 800242c:	000007fe 	.word	0x000007fe
 8002430:	430f      	orrs	r7, r1
 8002432:	1e7a      	subs	r2, r7, #1
 8002434:	4197      	sbcs	r7, r2
 8002436:	e691      	b.n	800215c <__aeabi_dsub+0x94>
 8002438:	4661      	mov	r1, ip
 800243a:	08db      	lsrs	r3, r3, #3
 800243c:	0749      	lsls	r1, r1, #29
 800243e:	430b      	orrs	r3, r1
 8002440:	4661      	mov	r1, ip
 8002442:	08cc      	lsrs	r4, r1, #3
 8002444:	e7b8      	b.n	80023b8 <__aeabi_dsub+0x2f0>
 8002446:	4640      	mov	r0, r8
 8002448:	4cd3      	ldr	r4, [pc, #844]	; (8002798 <__aeabi_dsub+0x6d0>)
 800244a:	3001      	adds	r0, #1
 800244c:	4220      	tst	r0, r4
 800244e:	d000      	beq.n	8002452 <__aeabi_dsub+0x38a>
 8002450:	e0a2      	b.n	8002598 <__aeabi_dsub+0x4d0>
 8002452:	4640      	mov	r0, r8
 8002454:	2800      	cmp	r0, #0
 8002456:	d000      	beq.n	800245a <__aeabi_dsub+0x392>
 8002458:	e101      	b.n	800265e <__aeabi_dsub+0x596>
 800245a:	4660      	mov	r0, ip
 800245c:	4318      	orrs	r0, r3
 800245e:	d100      	bne.n	8002462 <__aeabi_dsub+0x39a>
 8002460:	e15e      	b.n	8002720 <__aeabi_dsub+0x658>
 8002462:	0008      	movs	r0, r1
 8002464:	4338      	orrs	r0, r7
 8002466:	d000      	beq.n	800246a <__aeabi_dsub+0x3a2>
 8002468:	e15f      	b.n	800272a <__aeabi_dsub+0x662>
 800246a:	4661      	mov	r1, ip
 800246c:	08db      	lsrs	r3, r3, #3
 800246e:	0749      	lsls	r1, r1, #29
 8002470:	430b      	orrs	r3, r1
 8002472:	4661      	mov	r1, ip
 8002474:	08cc      	lsrs	r4, r1, #3
 8002476:	e7a2      	b.n	80023be <__aeabi_dsub+0x2f6>
 8002478:	4dc8      	ldr	r5, [pc, #800]	; (800279c <__aeabi_dsub+0x6d4>)
 800247a:	42a8      	cmp	r0, r5
 800247c:	d100      	bne.n	8002480 <__aeabi_dsub+0x3b8>
 800247e:	e0cf      	b.n	8002620 <__aeabi_dsub+0x558>
 8002480:	2580      	movs	r5, #128	; 0x80
 8002482:	4664      	mov	r4, ip
 8002484:	042d      	lsls	r5, r5, #16
 8002486:	432c      	orrs	r4, r5
 8002488:	46a4      	mov	ip, r4
 800248a:	2a38      	cmp	r2, #56	; 0x38
 800248c:	dc56      	bgt.n	800253c <__aeabi_dsub+0x474>
 800248e:	2a1f      	cmp	r2, #31
 8002490:	dd00      	ble.n	8002494 <__aeabi_dsub+0x3cc>
 8002492:	e0d1      	b.n	8002638 <__aeabi_dsub+0x570>
 8002494:	2520      	movs	r5, #32
 8002496:	001e      	movs	r6, r3
 8002498:	1aad      	subs	r5, r5, r2
 800249a:	4664      	mov	r4, ip
 800249c:	40ab      	lsls	r3, r5
 800249e:	40ac      	lsls	r4, r5
 80024a0:	40d6      	lsrs	r6, r2
 80024a2:	1e5d      	subs	r5, r3, #1
 80024a4:	41ab      	sbcs	r3, r5
 80024a6:	4334      	orrs	r4, r6
 80024a8:	4323      	orrs	r3, r4
 80024aa:	4664      	mov	r4, ip
 80024ac:	40d4      	lsrs	r4, r2
 80024ae:	1b09      	subs	r1, r1, r4
 80024b0:	e049      	b.n	8002546 <__aeabi_dsub+0x47e>
 80024b2:	4660      	mov	r0, ip
 80024b4:	1bdc      	subs	r4, r3, r7
 80024b6:	1a46      	subs	r6, r0, r1
 80024b8:	42a3      	cmp	r3, r4
 80024ba:	4180      	sbcs	r0, r0
 80024bc:	4240      	negs	r0, r0
 80024be:	4681      	mov	r9, r0
 80024c0:	0030      	movs	r0, r6
 80024c2:	464e      	mov	r6, r9
 80024c4:	1b80      	subs	r0, r0, r6
 80024c6:	4681      	mov	r9, r0
 80024c8:	0200      	lsls	r0, r0, #8
 80024ca:	d476      	bmi.n	80025ba <__aeabi_dsub+0x4f2>
 80024cc:	464b      	mov	r3, r9
 80024ce:	4323      	orrs	r3, r4
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x40c>
 80024d2:	e652      	b.n	800217a <__aeabi_dsub+0xb2>
 80024d4:	2400      	movs	r4, #0
 80024d6:	2500      	movs	r5, #0
 80024d8:	e771      	b.n	80023be <__aeabi_dsub+0x2f6>
 80024da:	4339      	orrs	r1, r7
 80024dc:	000c      	movs	r4, r1
 80024de:	1e62      	subs	r2, r4, #1
 80024e0:	4194      	sbcs	r4, r2
 80024e2:	18e4      	adds	r4, r4, r3
 80024e4:	429c      	cmp	r4, r3
 80024e6:	419b      	sbcs	r3, r3
 80024e8:	425b      	negs	r3, r3
 80024ea:	4463      	add	r3, ip
 80024ec:	4699      	mov	r9, r3
 80024ee:	464b      	mov	r3, r9
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	d400      	bmi.n	80024f6 <__aeabi_dsub+0x42e>
 80024f4:	e756      	b.n	80023a4 <__aeabi_dsub+0x2dc>
 80024f6:	2301      	movs	r3, #1
 80024f8:	469c      	mov	ip, r3
 80024fa:	4ba8      	ldr	r3, [pc, #672]	; (800279c <__aeabi_dsub+0x6d4>)
 80024fc:	44e0      	add	r8, ip
 80024fe:	4598      	cmp	r8, r3
 8002500:	d038      	beq.n	8002574 <__aeabi_dsub+0x4ac>
 8002502:	464b      	mov	r3, r9
 8002504:	48a6      	ldr	r0, [pc, #664]	; (80027a0 <__aeabi_dsub+0x6d8>)
 8002506:	2201      	movs	r2, #1
 8002508:	4003      	ands	r3, r0
 800250a:	0018      	movs	r0, r3
 800250c:	0863      	lsrs	r3, r4, #1
 800250e:	4014      	ands	r4, r2
 8002510:	431c      	orrs	r4, r3
 8002512:	07c3      	lsls	r3, r0, #31
 8002514:	431c      	orrs	r4, r3
 8002516:	0843      	lsrs	r3, r0, #1
 8002518:	4699      	mov	r9, r3
 800251a:	e657      	b.n	80021cc <__aeabi_dsub+0x104>
 800251c:	0010      	movs	r0, r2
 800251e:	000e      	movs	r6, r1
 8002520:	3820      	subs	r0, #32
 8002522:	40c6      	lsrs	r6, r0
 8002524:	2a20      	cmp	r2, #32
 8002526:	d004      	beq.n	8002532 <__aeabi_dsub+0x46a>
 8002528:	2040      	movs	r0, #64	; 0x40
 800252a:	1a82      	subs	r2, r0, r2
 800252c:	4091      	lsls	r1, r2
 800252e:	430f      	orrs	r7, r1
 8002530:	46b9      	mov	r9, r7
 8002532:	464f      	mov	r7, r9
 8002534:	1e7a      	subs	r2, r7, #1
 8002536:	4197      	sbcs	r7, r2
 8002538:	4337      	orrs	r7, r6
 800253a:	e60f      	b.n	800215c <__aeabi_dsub+0x94>
 800253c:	4662      	mov	r2, ip
 800253e:	431a      	orrs	r2, r3
 8002540:	0013      	movs	r3, r2
 8002542:	1e5a      	subs	r2, r3, #1
 8002544:	4193      	sbcs	r3, r2
 8002546:	1afc      	subs	r4, r7, r3
 8002548:	42a7      	cmp	r7, r4
 800254a:	41bf      	sbcs	r7, r7
 800254c:	427f      	negs	r7, r7
 800254e:	1bcb      	subs	r3, r1, r7
 8002550:	4699      	mov	r9, r3
 8002552:	465d      	mov	r5, fp
 8002554:	4680      	mov	r8, r0
 8002556:	e608      	b.n	800216a <__aeabi_dsub+0xa2>
 8002558:	4666      	mov	r6, ip
 800255a:	431e      	orrs	r6, r3
 800255c:	d100      	bne.n	8002560 <__aeabi_dsub+0x498>
 800255e:	e0be      	b.n	80026de <__aeabi_dsub+0x616>
 8002560:	1e56      	subs	r6, r2, #1
 8002562:	2a01      	cmp	r2, #1
 8002564:	d100      	bne.n	8002568 <__aeabi_dsub+0x4a0>
 8002566:	e109      	b.n	800277c <__aeabi_dsub+0x6b4>
 8002568:	4c8c      	ldr	r4, [pc, #560]	; (800279c <__aeabi_dsub+0x6d4>)
 800256a:	42a2      	cmp	r2, r4
 800256c:	d100      	bne.n	8002570 <__aeabi_dsub+0x4a8>
 800256e:	e119      	b.n	80027a4 <__aeabi_dsub+0x6dc>
 8002570:	0032      	movs	r2, r6
 8002572:	e6c1      	b.n	80022f8 <__aeabi_dsub+0x230>
 8002574:	4642      	mov	r2, r8
 8002576:	2400      	movs	r4, #0
 8002578:	2300      	movs	r3, #0
 800257a:	e648      	b.n	800220e <__aeabi_dsub+0x146>
 800257c:	2020      	movs	r0, #32
 800257e:	000c      	movs	r4, r1
 8002580:	1a80      	subs	r0, r0, r2
 8002582:	003e      	movs	r6, r7
 8002584:	4087      	lsls	r7, r0
 8002586:	4084      	lsls	r4, r0
 8002588:	40d6      	lsrs	r6, r2
 800258a:	1e78      	subs	r0, r7, #1
 800258c:	4187      	sbcs	r7, r0
 800258e:	40d1      	lsrs	r1, r2
 8002590:	4334      	orrs	r4, r6
 8002592:	433c      	orrs	r4, r7
 8002594:	448c      	add	ip, r1
 8002596:	e7a4      	b.n	80024e2 <__aeabi_dsub+0x41a>
 8002598:	4a80      	ldr	r2, [pc, #512]	; (800279c <__aeabi_dsub+0x6d4>)
 800259a:	4290      	cmp	r0, r2
 800259c:	d100      	bne.n	80025a0 <__aeabi_dsub+0x4d8>
 800259e:	e0e9      	b.n	8002774 <__aeabi_dsub+0x6ac>
 80025a0:	19df      	adds	r7, r3, r7
 80025a2:	429f      	cmp	r7, r3
 80025a4:	419b      	sbcs	r3, r3
 80025a6:	4461      	add	r1, ip
 80025a8:	425b      	negs	r3, r3
 80025aa:	18c9      	adds	r1, r1, r3
 80025ac:	07cc      	lsls	r4, r1, #31
 80025ae:	087f      	lsrs	r7, r7, #1
 80025b0:	084b      	lsrs	r3, r1, #1
 80025b2:	4699      	mov	r9, r3
 80025b4:	4680      	mov	r8, r0
 80025b6:	433c      	orrs	r4, r7
 80025b8:	e6f4      	b.n	80023a4 <__aeabi_dsub+0x2dc>
 80025ba:	1afc      	subs	r4, r7, r3
 80025bc:	42a7      	cmp	r7, r4
 80025be:	41bf      	sbcs	r7, r7
 80025c0:	4663      	mov	r3, ip
 80025c2:	427f      	negs	r7, r7
 80025c4:	1ac9      	subs	r1, r1, r3
 80025c6:	1bcb      	subs	r3, r1, r7
 80025c8:	4699      	mov	r9, r3
 80025ca:	465d      	mov	r5, fp
 80025cc:	e5d5      	b.n	800217a <__aeabi_dsub+0xb2>
 80025ce:	08ff      	lsrs	r7, r7, #3
 80025d0:	074b      	lsls	r3, r1, #29
 80025d2:	465d      	mov	r5, fp
 80025d4:	433b      	orrs	r3, r7
 80025d6:	08cc      	lsrs	r4, r1, #3
 80025d8:	e6ee      	b.n	80023b8 <__aeabi_dsub+0x2f0>
 80025da:	4662      	mov	r2, ip
 80025dc:	431a      	orrs	r2, r3
 80025de:	d000      	beq.n	80025e2 <__aeabi_dsub+0x51a>
 80025e0:	e082      	b.n	80026e8 <__aeabi_dsub+0x620>
 80025e2:	000b      	movs	r3, r1
 80025e4:	433b      	orrs	r3, r7
 80025e6:	d11b      	bne.n	8002620 <__aeabi_dsub+0x558>
 80025e8:	2480      	movs	r4, #128	; 0x80
 80025ea:	2500      	movs	r5, #0
 80025ec:	0324      	lsls	r4, r4, #12
 80025ee:	e6f9      	b.n	80023e4 <__aeabi_dsub+0x31c>
 80025f0:	19dc      	adds	r4, r3, r7
 80025f2:	429c      	cmp	r4, r3
 80025f4:	419b      	sbcs	r3, r3
 80025f6:	4461      	add	r1, ip
 80025f8:	4689      	mov	r9, r1
 80025fa:	425b      	negs	r3, r3
 80025fc:	4499      	add	r9, r3
 80025fe:	464b      	mov	r3, r9
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	d444      	bmi.n	800268e <__aeabi_dsub+0x5c6>
 8002604:	2301      	movs	r3, #1
 8002606:	4698      	mov	r8, r3
 8002608:	e6cc      	b.n	80023a4 <__aeabi_dsub+0x2dc>
 800260a:	1bdc      	subs	r4, r3, r7
 800260c:	4662      	mov	r2, ip
 800260e:	42a3      	cmp	r3, r4
 8002610:	419b      	sbcs	r3, r3
 8002612:	1a51      	subs	r1, r2, r1
 8002614:	425b      	negs	r3, r3
 8002616:	1acb      	subs	r3, r1, r3
 8002618:	4699      	mov	r9, r3
 800261a:	2301      	movs	r3, #1
 800261c:	4698      	mov	r8, r3
 800261e:	e5a4      	b.n	800216a <__aeabi_dsub+0xa2>
 8002620:	08ff      	lsrs	r7, r7, #3
 8002622:	074b      	lsls	r3, r1, #29
 8002624:	465d      	mov	r5, fp
 8002626:	433b      	orrs	r3, r7
 8002628:	08cc      	lsrs	r4, r1, #3
 800262a:	e6d7      	b.n	80023dc <__aeabi_dsub+0x314>
 800262c:	4662      	mov	r2, ip
 800262e:	431a      	orrs	r2, r3
 8002630:	0014      	movs	r4, r2
 8002632:	1e63      	subs	r3, r4, #1
 8002634:	419c      	sbcs	r4, r3
 8002636:	e679      	b.n	800232c <__aeabi_dsub+0x264>
 8002638:	0015      	movs	r5, r2
 800263a:	4664      	mov	r4, ip
 800263c:	3d20      	subs	r5, #32
 800263e:	40ec      	lsrs	r4, r5
 8002640:	46a0      	mov	r8, r4
 8002642:	2a20      	cmp	r2, #32
 8002644:	d005      	beq.n	8002652 <__aeabi_dsub+0x58a>
 8002646:	2540      	movs	r5, #64	; 0x40
 8002648:	4664      	mov	r4, ip
 800264a:	1aaa      	subs	r2, r5, r2
 800264c:	4094      	lsls	r4, r2
 800264e:	4323      	orrs	r3, r4
 8002650:	469a      	mov	sl, r3
 8002652:	4654      	mov	r4, sl
 8002654:	1e63      	subs	r3, r4, #1
 8002656:	419c      	sbcs	r4, r3
 8002658:	4643      	mov	r3, r8
 800265a:	4323      	orrs	r3, r4
 800265c:	e773      	b.n	8002546 <__aeabi_dsub+0x47e>
 800265e:	4662      	mov	r2, ip
 8002660:	431a      	orrs	r2, r3
 8002662:	d023      	beq.n	80026ac <__aeabi_dsub+0x5e4>
 8002664:	000a      	movs	r2, r1
 8002666:	433a      	orrs	r2, r7
 8002668:	d000      	beq.n	800266c <__aeabi_dsub+0x5a4>
 800266a:	e0a0      	b.n	80027ae <__aeabi_dsub+0x6e6>
 800266c:	4662      	mov	r2, ip
 800266e:	08db      	lsrs	r3, r3, #3
 8002670:	0752      	lsls	r2, r2, #29
 8002672:	4313      	orrs	r3, r2
 8002674:	4662      	mov	r2, ip
 8002676:	08d4      	lsrs	r4, r2, #3
 8002678:	e6b0      	b.n	80023dc <__aeabi_dsub+0x314>
 800267a:	000b      	movs	r3, r1
 800267c:	433b      	orrs	r3, r7
 800267e:	d100      	bne.n	8002682 <__aeabi_dsub+0x5ba>
 8002680:	e728      	b.n	80024d4 <__aeabi_dsub+0x40c>
 8002682:	08ff      	lsrs	r7, r7, #3
 8002684:	074b      	lsls	r3, r1, #29
 8002686:	465d      	mov	r5, fp
 8002688:	433b      	orrs	r3, r7
 800268a:	08cc      	lsrs	r4, r1, #3
 800268c:	e697      	b.n	80023be <__aeabi_dsub+0x2f6>
 800268e:	2302      	movs	r3, #2
 8002690:	4698      	mov	r8, r3
 8002692:	e736      	b.n	8002502 <__aeabi_dsub+0x43a>
 8002694:	1afc      	subs	r4, r7, r3
 8002696:	42a7      	cmp	r7, r4
 8002698:	41bf      	sbcs	r7, r7
 800269a:	4663      	mov	r3, ip
 800269c:	427f      	negs	r7, r7
 800269e:	1ac9      	subs	r1, r1, r3
 80026a0:	1bcb      	subs	r3, r1, r7
 80026a2:	4699      	mov	r9, r3
 80026a4:	2301      	movs	r3, #1
 80026a6:	465d      	mov	r5, fp
 80026a8:	4698      	mov	r8, r3
 80026aa:	e55e      	b.n	800216a <__aeabi_dsub+0xa2>
 80026ac:	074b      	lsls	r3, r1, #29
 80026ae:	08ff      	lsrs	r7, r7, #3
 80026b0:	433b      	orrs	r3, r7
 80026b2:	08cc      	lsrs	r4, r1, #3
 80026b4:	e692      	b.n	80023dc <__aeabi_dsub+0x314>
 80026b6:	1bdc      	subs	r4, r3, r7
 80026b8:	4660      	mov	r0, ip
 80026ba:	42a3      	cmp	r3, r4
 80026bc:	41b6      	sbcs	r6, r6
 80026be:	1a40      	subs	r0, r0, r1
 80026c0:	4276      	negs	r6, r6
 80026c2:	1b80      	subs	r0, r0, r6
 80026c4:	4681      	mov	r9, r0
 80026c6:	0200      	lsls	r0, r0, #8
 80026c8:	d560      	bpl.n	800278c <__aeabi_dsub+0x6c4>
 80026ca:	1afc      	subs	r4, r7, r3
 80026cc:	42a7      	cmp	r7, r4
 80026ce:	41bf      	sbcs	r7, r7
 80026d0:	4663      	mov	r3, ip
 80026d2:	427f      	negs	r7, r7
 80026d4:	1ac9      	subs	r1, r1, r3
 80026d6:	1bcb      	subs	r3, r1, r7
 80026d8:	4699      	mov	r9, r3
 80026da:	465d      	mov	r5, fp
 80026dc:	e576      	b.n	80021cc <__aeabi_dsub+0x104>
 80026de:	08ff      	lsrs	r7, r7, #3
 80026e0:	074b      	lsls	r3, r1, #29
 80026e2:	433b      	orrs	r3, r7
 80026e4:	08cc      	lsrs	r4, r1, #3
 80026e6:	e667      	b.n	80023b8 <__aeabi_dsub+0x2f0>
 80026e8:	000a      	movs	r2, r1
 80026ea:	08db      	lsrs	r3, r3, #3
 80026ec:	433a      	orrs	r2, r7
 80026ee:	d100      	bne.n	80026f2 <__aeabi_dsub+0x62a>
 80026f0:	e66f      	b.n	80023d2 <__aeabi_dsub+0x30a>
 80026f2:	4662      	mov	r2, ip
 80026f4:	0752      	lsls	r2, r2, #29
 80026f6:	4313      	orrs	r3, r2
 80026f8:	4662      	mov	r2, ip
 80026fa:	08d4      	lsrs	r4, r2, #3
 80026fc:	2280      	movs	r2, #128	; 0x80
 80026fe:	0312      	lsls	r2, r2, #12
 8002700:	4214      	tst	r4, r2
 8002702:	d007      	beq.n	8002714 <__aeabi_dsub+0x64c>
 8002704:	08c8      	lsrs	r0, r1, #3
 8002706:	4210      	tst	r0, r2
 8002708:	d104      	bne.n	8002714 <__aeabi_dsub+0x64c>
 800270a:	465d      	mov	r5, fp
 800270c:	0004      	movs	r4, r0
 800270e:	08fb      	lsrs	r3, r7, #3
 8002710:	0749      	lsls	r1, r1, #29
 8002712:	430b      	orrs	r3, r1
 8002714:	0f5a      	lsrs	r2, r3, #29
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	08db      	lsrs	r3, r3, #3
 800271a:	0752      	lsls	r2, r2, #29
 800271c:	4313      	orrs	r3, r2
 800271e:	e65d      	b.n	80023dc <__aeabi_dsub+0x314>
 8002720:	074b      	lsls	r3, r1, #29
 8002722:	08ff      	lsrs	r7, r7, #3
 8002724:	433b      	orrs	r3, r7
 8002726:	08cc      	lsrs	r4, r1, #3
 8002728:	e649      	b.n	80023be <__aeabi_dsub+0x2f6>
 800272a:	19dc      	adds	r4, r3, r7
 800272c:	429c      	cmp	r4, r3
 800272e:	419b      	sbcs	r3, r3
 8002730:	4461      	add	r1, ip
 8002732:	4689      	mov	r9, r1
 8002734:	425b      	negs	r3, r3
 8002736:	4499      	add	r9, r3
 8002738:	464b      	mov	r3, r9
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	d400      	bmi.n	8002740 <__aeabi_dsub+0x678>
 800273e:	e631      	b.n	80023a4 <__aeabi_dsub+0x2dc>
 8002740:	464a      	mov	r2, r9
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <__aeabi_dsub+0x6d8>)
 8002744:	401a      	ands	r2, r3
 8002746:	2301      	movs	r3, #1
 8002748:	4691      	mov	r9, r2
 800274a:	4698      	mov	r8, r3
 800274c:	e62a      	b.n	80023a4 <__aeabi_dsub+0x2dc>
 800274e:	0016      	movs	r6, r2
 8002750:	4664      	mov	r4, ip
 8002752:	3e20      	subs	r6, #32
 8002754:	40f4      	lsrs	r4, r6
 8002756:	46a0      	mov	r8, r4
 8002758:	2a20      	cmp	r2, #32
 800275a:	d005      	beq.n	8002768 <__aeabi_dsub+0x6a0>
 800275c:	2640      	movs	r6, #64	; 0x40
 800275e:	4664      	mov	r4, ip
 8002760:	1ab2      	subs	r2, r6, r2
 8002762:	4094      	lsls	r4, r2
 8002764:	4323      	orrs	r3, r4
 8002766:	469a      	mov	sl, r3
 8002768:	4654      	mov	r4, sl
 800276a:	1e63      	subs	r3, r4, #1
 800276c:	419c      	sbcs	r4, r3
 800276e:	4643      	mov	r3, r8
 8002770:	431c      	orrs	r4, r3
 8002772:	e5db      	b.n	800232c <__aeabi_dsub+0x264>
 8002774:	0002      	movs	r2, r0
 8002776:	2400      	movs	r4, #0
 8002778:	2300      	movs	r3, #0
 800277a:	e548      	b.n	800220e <__aeabi_dsub+0x146>
 800277c:	19dc      	adds	r4, r3, r7
 800277e:	42bc      	cmp	r4, r7
 8002780:	41bf      	sbcs	r7, r7
 8002782:	4461      	add	r1, ip
 8002784:	4689      	mov	r9, r1
 8002786:	427f      	negs	r7, r7
 8002788:	44b9      	add	r9, r7
 800278a:	e738      	b.n	80025fe <__aeabi_dsub+0x536>
 800278c:	464b      	mov	r3, r9
 800278e:	4323      	orrs	r3, r4
 8002790:	d100      	bne.n	8002794 <__aeabi_dsub+0x6cc>
 8002792:	e69f      	b.n	80024d4 <__aeabi_dsub+0x40c>
 8002794:	e606      	b.n	80023a4 <__aeabi_dsub+0x2dc>
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	000007fe 	.word	0x000007fe
 800279c:	000007ff 	.word	0x000007ff
 80027a0:	ff7fffff 	.word	0xff7fffff
 80027a4:	08ff      	lsrs	r7, r7, #3
 80027a6:	074b      	lsls	r3, r1, #29
 80027a8:	433b      	orrs	r3, r7
 80027aa:	08cc      	lsrs	r4, r1, #3
 80027ac:	e616      	b.n	80023dc <__aeabi_dsub+0x314>
 80027ae:	4662      	mov	r2, ip
 80027b0:	08db      	lsrs	r3, r3, #3
 80027b2:	0752      	lsls	r2, r2, #29
 80027b4:	4313      	orrs	r3, r2
 80027b6:	4662      	mov	r2, ip
 80027b8:	08d4      	lsrs	r4, r2, #3
 80027ba:	2280      	movs	r2, #128	; 0x80
 80027bc:	0312      	lsls	r2, r2, #12
 80027be:	4214      	tst	r4, r2
 80027c0:	d007      	beq.n	80027d2 <__aeabi_dsub+0x70a>
 80027c2:	08c8      	lsrs	r0, r1, #3
 80027c4:	4210      	tst	r0, r2
 80027c6:	d104      	bne.n	80027d2 <__aeabi_dsub+0x70a>
 80027c8:	465d      	mov	r5, fp
 80027ca:	0004      	movs	r4, r0
 80027cc:	08fb      	lsrs	r3, r7, #3
 80027ce:	0749      	lsls	r1, r1, #29
 80027d0:	430b      	orrs	r3, r1
 80027d2:	0f5a      	lsrs	r2, r3, #29
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	0752      	lsls	r2, r2, #29
 80027d8:	08db      	lsrs	r3, r3, #3
 80027da:	4313      	orrs	r3, r2
 80027dc:	e5fe      	b.n	80023dc <__aeabi_dsub+0x314>
 80027de:	2300      	movs	r3, #0
 80027e0:	4a01      	ldr	r2, [pc, #4]	; (80027e8 <__aeabi_dsub+0x720>)
 80027e2:	001c      	movs	r4, r3
 80027e4:	e513      	b.n	800220e <__aeabi_dsub+0x146>
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	000007ff 	.word	0x000007ff

080027ec <__aeabi_dcmpun>:
 80027ec:	b570      	push	{r4, r5, r6, lr}
 80027ee:	0005      	movs	r5, r0
 80027f0:	480c      	ldr	r0, [pc, #48]	; (8002824 <__aeabi_dcmpun+0x38>)
 80027f2:	031c      	lsls	r4, r3, #12
 80027f4:	0016      	movs	r6, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	030a      	lsls	r2, r1, #12
 80027fa:	0049      	lsls	r1, r1, #1
 80027fc:	0b12      	lsrs	r2, r2, #12
 80027fe:	0d49      	lsrs	r1, r1, #21
 8002800:	0b24      	lsrs	r4, r4, #12
 8002802:	0d5b      	lsrs	r3, r3, #21
 8002804:	4281      	cmp	r1, r0
 8002806:	d008      	beq.n	800281a <__aeabi_dcmpun+0x2e>
 8002808:	4a06      	ldr	r2, [pc, #24]	; (8002824 <__aeabi_dcmpun+0x38>)
 800280a:	2000      	movs	r0, #0
 800280c:	4293      	cmp	r3, r2
 800280e:	d103      	bne.n	8002818 <__aeabi_dcmpun+0x2c>
 8002810:	0020      	movs	r0, r4
 8002812:	4330      	orrs	r0, r6
 8002814:	1e43      	subs	r3, r0, #1
 8002816:	4198      	sbcs	r0, r3
 8002818:	bd70      	pop	{r4, r5, r6, pc}
 800281a:	2001      	movs	r0, #1
 800281c:	432a      	orrs	r2, r5
 800281e:	d1fb      	bne.n	8002818 <__aeabi_dcmpun+0x2c>
 8002820:	e7f2      	b.n	8002808 <__aeabi_dcmpun+0x1c>
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	000007ff 	.word	0x000007ff

08002828 <__aeabi_d2iz>:
 8002828:	000a      	movs	r2, r1
 800282a:	b530      	push	{r4, r5, lr}
 800282c:	4c13      	ldr	r4, [pc, #76]	; (800287c <__aeabi_d2iz+0x54>)
 800282e:	0053      	lsls	r3, r2, #1
 8002830:	0309      	lsls	r1, r1, #12
 8002832:	0005      	movs	r5, r0
 8002834:	0b09      	lsrs	r1, r1, #12
 8002836:	2000      	movs	r0, #0
 8002838:	0d5b      	lsrs	r3, r3, #21
 800283a:	0fd2      	lsrs	r2, r2, #31
 800283c:	42a3      	cmp	r3, r4
 800283e:	dd04      	ble.n	800284a <__aeabi_d2iz+0x22>
 8002840:	480f      	ldr	r0, [pc, #60]	; (8002880 <__aeabi_d2iz+0x58>)
 8002842:	4283      	cmp	r3, r0
 8002844:	dd02      	ble.n	800284c <__aeabi_d2iz+0x24>
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <__aeabi_d2iz+0x5c>)
 8002848:	18d0      	adds	r0, r2, r3
 800284a:	bd30      	pop	{r4, r5, pc}
 800284c:	2080      	movs	r0, #128	; 0x80
 800284e:	0340      	lsls	r0, r0, #13
 8002850:	4301      	orrs	r1, r0
 8002852:	480d      	ldr	r0, [pc, #52]	; (8002888 <__aeabi_d2iz+0x60>)
 8002854:	1ac0      	subs	r0, r0, r3
 8002856:	281f      	cmp	r0, #31
 8002858:	dd08      	ble.n	800286c <__aeabi_d2iz+0x44>
 800285a:	480c      	ldr	r0, [pc, #48]	; (800288c <__aeabi_d2iz+0x64>)
 800285c:	1ac3      	subs	r3, r0, r3
 800285e:	40d9      	lsrs	r1, r3
 8002860:	000b      	movs	r3, r1
 8002862:	4258      	negs	r0, r3
 8002864:	2a00      	cmp	r2, #0
 8002866:	d1f0      	bne.n	800284a <__aeabi_d2iz+0x22>
 8002868:	0018      	movs	r0, r3
 800286a:	e7ee      	b.n	800284a <__aeabi_d2iz+0x22>
 800286c:	4c08      	ldr	r4, [pc, #32]	; (8002890 <__aeabi_d2iz+0x68>)
 800286e:	40c5      	lsrs	r5, r0
 8002870:	46a4      	mov	ip, r4
 8002872:	4463      	add	r3, ip
 8002874:	4099      	lsls	r1, r3
 8002876:	000b      	movs	r3, r1
 8002878:	432b      	orrs	r3, r5
 800287a:	e7f2      	b.n	8002862 <__aeabi_d2iz+0x3a>
 800287c:	000003fe 	.word	0x000003fe
 8002880:	0000041d 	.word	0x0000041d
 8002884:	7fffffff 	.word	0x7fffffff
 8002888:	00000433 	.word	0x00000433
 800288c:	00000413 	.word	0x00000413
 8002890:	fffffbed 	.word	0xfffffbed

08002894 <__aeabi_i2d>:
 8002894:	b570      	push	{r4, r5, r6, lr}
 8002896:	2800      	cmp	r0, #0
 8002898:	d016      	beq.n	80028c8 <__aeabi_i2d+0x34>
 800289a:	17c3      	asrs	r3, r0, #31
 800289c:	18c5      	adds	r5, r0, r3
 800289e:	405d      	eors	r5, r3
 80028a0:	0fc4      	lsrs	r4, r0, #31
 80028a2:	0028      	movs	r0, r5
 80028a4:	f000 f91c 	bl	8002ae0 <__clzsi2>
 80028a8:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <__aeabi_i2d+0x5c>)
 80028aa:	1a12      	subs	r2, r2, r0
 80028ac:	280a      	cmp	r0, #10
 80028ae:	dc16      	bgt.n	80028de <__aeabi_i2d+0x4a>
 80028b0:	0003      	movs	r3, r0
 80028b2:	002e      	movs	r6, r5
 80028b4:	3315      	adds	r3, #21
 80028b6:	409e      	lsls	r6, r3
 80028b8:	230b      	movs	r3, #11
 80028ba:	1a18      	subs	r0, r3, r0
 80028bc:	40c5      	lsrs	r5, r0
 80028be:	0552      	lsls	r2, r2, #21
 80028c0:	032d      	lsls	r5, r5, #12
 80028c2:	0b2d      	lsrs	r5, r5, #12
 80028c4:	0d53      	lsrs	r3, r2, #21
 80028c6:	e003      	b.n	80028d0 <__aeabi_i2d+0x3c>
 80028c8:	2400      	movs	r4, #0
 80028ca:	2300      	movs	r3, #0
 80028cc:	2500      	movs	r5, #0
 80028ce:	2600      	movs	r6, #0
 80028d0:	051b      	lsls	r3, r3, #20
 80028d2:	432b      	orrs	r3, r5
 80028d4:	07e4      	lsls	r4, r4, #31
 80028d6:	4323      	orrs	r3, r4
 80028d8:	0030      	movs	r0, r6
 80028da:	0019      	movs	r1, r3
 80028dc:	bd70      	pop	{r4, r5, r6, pc}
 80028de:	380b      	subs	r0, #11
 80028e0:	4085      	lsls	r5, r0
 80028e2:	0552      	lsls	r2, r2, #21
 80028e4:	032d      	lsls	r5, r5, #12
 80028e6:	2600      	movs	r6, #0
 80028e8:	0b2d      	lsrs	r5, r5, #12
 80028ea:	0d53      	lsrs	r3, r2, #21
 80028ec:	e7f0      	b.n	80028d0 <__aeabi_i2d+0x3c>
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	0000041e 	.word	0x0000041e

080028f4 <__aeabi_ui2d>:
 80028f4:	b510      	push	{r4, lr}
 80028f6:	1e04      	subs	r4, r0, #0
 80028f8:	d010      	beq.n	800291c <__aeabi_ui2d+0x28>
 80028fa:	f000 f8f1 	bl	8002ae0 <__clzsi2>
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <__aeabi_ui2d+0x48>)
 8002900:	1a1b      	subs	r3, r3, r0
 8002902:	280a      	cmp	r0, #10
 8002904:	dc11      	bgt.n	800292a <__aeabi_ui2d+0x36>
 8002906:	220b      	movs	r2, #11
 8002908:	0021      	movs	r1, r4
 800290a:	1a12      	subs	r2, r2, r0
 800290c:	40d1      	lsrs	r1, r2
 800290e:	3015      	adds	r0, #21
 8002910:	030a      	lsls	r2, r1, #12
 8002912:	055b      	lsls	r3, r3, #21
 8002914:	4084      	lsls	r4, r0
 8002916:	0b12      	lsrs	r2, r2, #12
 8002918:	0d5b      	lsrs	r3, r3, #21
 800291a:	e001      	b.n	8002920 <__aeabi_ui2d+0x2c>
 800291c:	2300      	movs	r3, #0
 800291e:	2200      	movs	r2, #0
 8002920:	051b      	lsls	r3, r3, #20
 8002922:	4313      	orrs	r3, r2
 8002924:	0020      	movs	r0, r4
 8002926:	0019      	movs	r1, r3
 8002928:	bd10      	pop	{r4, pc}
 800292a:	0022      	movs	r2, r4
 800292c:	380b      	subs	r0, #11
 800292e:	4082      	lsls	r2, r0
 8002930:	055b      	lsls	r3, r3, #21
 8002932:	0312      	lsls	r2, r2, #12
 8002934:	2400      	movs	r4, #0
 8002936:	0b12      	lsrs	r2, r2, #12
 8002938:	0d5b      	lsrs	r3, r3, #21
 800293a:	e7f1      	b.n	8002920 <__aeabi_ui2d+0x2c>
 800293c:	0000041e 	.word	0x0000041e

08002940 <__aeabi_f2d>:
 8002940:	b570      	push	{r4, r5, r6, lr}
 8002942:	0043      	lsls	r3, r0, #1
 8002944:	0246      	lsls	r6, r0, #9
 8002946:	0fc4      	lsrs	r4, r0, #31
 8002948:	20fe      	movs	r0, #254	; 0xfe
 800294a:	0e1b      	lsrs	r3, r3, #24
 800294c:	1c59      	adds	r1, r3, #1
 800294e:	0a75      	lsrs	r5, r6, #9
 8002950:	4208      	tst	r0, r1
 8002952:	d00c      	beq.n	800296e <__aeabi_f2d+0x2e>
 8002954:	22e0      	movs	r2, #224	; 0xe0
 8002956:	0092      	lsls	r2, r2, #2
 8002958:	4694      	mov	ip, r2
 800295a:	076d      	lsls	r5, r5, #29
 800295c:	0b36      	lsrs	r6, r6, #12
 800295e:	4463      	add	r3, ip
 8002960:	051b      	lsls	r3, r3, #20
 8002962:	4333      	orrs	r3, r6
 8002964:	07e4      	lsls	r4, r4, #31
 8002966:	4323      	orrs	r3, r4
 8002968:	0028      	movs	r0, r5
 800296a:	0019      	movs	r1, r3
 800296c:	bd70      	pop	{r4, r5, r6, pc}
 800296e:	2b00      	cmp	r3, #0
 8002970:	d114      	bne.n	800299c <__aeabi_f2d+0x5c>
 8002972:	2d00      	cmp	r5, #0
 8002974:	d01b      	beq.n	80029ae <__aeabi_f2d+0x6e>
 8002976:	0028      	movs	r0, r5
 8002978:	f000 f8b2 	bl	8002ae0 <__clzsi2>
 800297c:	280a      	cmp	r0, #10
 800297e:	dc1c      	bgt.n	80029ba <__aeabi_f2d+0x7a>
 8002980:	230b      	movs	r3, #11
 8002982:	002e      	movs	r6, r5
 8002984:	1a1b      	subs	r3, r3, r0
 8002986:	40de      	lsrs	r6, r3
 8002988:	0003      	movs	r3, r0
 800298a:	3315      	adds	r3, #21
 800298c:	409d      	lsls	r5, r3
 800298e:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <__aeabi_f2d+0x88>)
 8002990:	0336      	lsls	r6, r6, #12
 8002992:	1a12      	subs	r2, r2, r0
 8002994:	0552      	lsls	r2, r2, #21
 8002996:	0b36      	lsrs	r6, r6, #12
 8002998:	0d53      	lsrs	r3, r2, #21
 800299a:	e7e1      	b.n	8002960 <__aeabi_f2d+0x20>
 800299c:	2d00      	cmp	r5, #0
 800299e:	d009      	beq.n	80029b4 <__aeabi_f2d+0x74>
 80029a0:	2280      	movs	r2, #128	; 0x80
 80029a2:	0b36      	lsrs	r6, r6, #12
 80029a4:	0312      	lsls	r2, r2, #12
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <__aeabi_f2d+0x8c>)
 80029a8:	076d      	lsls	r5, r5, #29
 80029aa:	4316      	orrs	r6, r2
 80029ac:	e7d8      	b.n	8002960 <__aeabi_f2d+0x20>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2600      	movs	r6, #0
 80029b2:	e7d5      	b.n	8002960 <__aeabi_f2d+0x20>
 80029b4:	2600      	movs	r6, #0
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <__aeabi_f2d+0x8c>)
 80029b8:	e7d2      	b.n	8002960 <__aeabi_f2d+0x20>
 80029ba:	0003      	movs	r3, r0
 80029bc:	3b0b      	subs	r3, #11
 80029be:	409d      	lsls	r5, r3
 80029c0:	002e      	movs	r6, r5
 80029c2:	2500      	movs	r5, #0
 80029c4:	e7e3      	b.n	800298e <__aeabi_f2d+0x4e>
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	00000389 	.word	0x00000389
 80029cc:	000007ff 	.word	0x000007ff

080029d0 <__aeabi_d2f>:
 80029d0:	0002      	movs	r2, r0
 80029d2:	004b      	lsls	r3, r1, #1
 80029d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d6:	0d5b      	lsrs	r3, r3, #21
 80029d8:	030c      	lsls	r4, r1, #12
 80029da:	4e3d      	ldr	r6, [pc, #244]	; (8002ad0 <__aeabi_d2f+0x100>)
 80029dc:	0a64      	lsrs	r4, r4, #9
 80029de:	0f40      	lsrs	r0, r0, #29
 80029e0:	1c5f      	adds	r7, r3, #1
 80029e2:	0fc9      	lsrs	r1, r1, #31
 80029e4:	4304      	orrs	r4, r0
 80029e6:	00d5      	lsls	r5, r2, #3
 80029e8:	4237      	tst	r7, r6
 80029ea:	d00a      	beq.n	8002a02 <__aeabi_d2f+0x32>
 80029ec:	4839      	ldr	r0, [pc, #228]	; (8002ad4 <__aeabi_d2f+0x104>)
 80029ee:	181e      	adds	r6, r3, r0
 80029f0:	2efe      	cmp	r6, #254	; 0xfe
 80029f2:	dd16      	ble.n	8002a22 <__aeabi_d2f+0x52>
 80029f4:	20ff      	movs	r0, #255	; 0xff
 80029f6:	2400      	movs	r4, #0
 80029f8:	05c0      	lsls	r0, r0, #23
 80029fa:	4320      	orrs	r0, r4
 80029fc:	07c9      	lsls	r1, r1, #31
 80029fe:	4308      	orrs	r0, r1
 8002a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <__aeabi_d2f+0x44>
 8002a06:	432c      	orrs	r4, r5
 8002a08:	d026      	beq.n	8002a58 <__aeabi_d2f+0x88>
 8002a0a:	2205      	movs	r2, #5
 8002a0c:	0192      	lsls	r2, r2, #6
 8002a0e:	0a54      	lsrs	r4, r2, #9
 8002a10:	b2d8      	uxtb	r0, r3
 8002a12:	e7f1      	b.n	80029f8 <__aeabi_d2f+0x28>
 8002a14:	4325      	orrs	r5, r4
 8002a16:	d0ed      	beq.n	80029f4 <__aeabi_d2f+0x24>
 8002a18:	2080      	movs	r0, #128	; 0x80
 8002a1a:	03c0      	lsls	r0, r0, #15
 8002a1c:	4304      	orrs	r4, r0
 8002a1e:	20ff      	movs	r0, #255	; 0xff
 8002a20:	e7ea      	b.n	80029f8 <__aeabi_d2f+0x28>
 8002a22:	2e00      	cmp	r6, #0
 8002a24:	dd1b      	ble.n	8002a5e <__aeabi_d2f+0x8e>
 8002a26:	0192      	lsls	r2, r2, #6
 8002a28:	1e53      	subs	r3, r2, #1
 8002a2a:	419a      	sbcs	r2, r3
 8002a2c:	00e4      	lsls	r4, r4, #3
 8002a2e:	0f6d      	lsrs	r5, r5, #29
 8002a30:	4322      	orrs	r2, r4
 8002a32:	432a      	orrs	r2, r5
 8002a34:	0753      	lsls	r3, r2, #29
 8002a36:	d048      	beq.n	8002aca <__aeabi_d2f+0xfa>
 8002a38:	230f      	movs	r3, #15
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d000      	beq.n	8002a42 <__aeabi_d2f+0x72>
 8002a40:	3204      	adds	r2, #4
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	04db      	lsls	r3, r3, #19
 8002a46:	4013      	ands	r3, r2
 8002a48:	d03f      	beq.n	8002aca <__aeabi_d2f+0xfa>
 8002a4a:	1c70      	adds	r0, r6, #1
 8002a4c:	2efe      	cmp	r6, #254	; 0xfe
 8002a4e:	d0d1      	beq.n	80029f4 <__aeabi_d2f+0x24>
 8002a50:	0192      	lsls	r2, r2, #6
 8002a52:	0a54      	lsrs	r4, r2, #9
 8002a54:	b2c0      	uxtb	r0, r0
 8002a56:	e7cf      	b.n	80029f8 <__aeabi_d2f+0x28>
 8002a58:	2000      	movs	r0, #0
 8002a5a:	2400      	movs	r4, #0
 8002a5c:	e7cc      	b.n	80029f8 <__aeabi_d2f+0x28>
 8002a5e:	0032      	movs	r2, r6
 8002a60:	3217      	adds	r2, #23
 8002a62:	db22      	blt.n	8002aaa <__aeabi_d2f+0xda>
 8002a64:	2080      	movs	r0, #128	; 0x80
 8002a66:	0400      	lsls	r0, r0, #16
 8002a68:	4320      	orrs	r0, r4
 8002a6a:	241e      	movs	r4, #30
 8002a6c:	1ba4      	subs	r4, r4, r6
 8002a6e:	2c1f      	cmp	r4, #31
 8002a70:	dd1d      	ble.n	8002aae <__aeabi_d2f+0xde>
 8002a72:	2202      	movs	r2, #2
 8002a74:	4252      	negs	r2, r2
 8002a76:	1b96      	subs	r6, r2, r6
 8002a78:	0002      	movs	r2, r0
 8002a7a:	40f2      	lsrs	r2, r6
 8002a7c:	0016      	movs	r6, r2
 8002a7e:	2c20      	cmp	r4, #32
 8002a80:	d004      	beq.n	8002a8c <__aeabi_d2f+0xbc>
 8002a82:	4a15      	ldr	r2, [pc, #84]	; (8002ad8 <__aeabi_d2f+0x108>)
 8002a84:	4694      	mov	ip, r2
 8002a86:	4463      	add	r3, ip
 8002a88:	4098      	lsls	r0, r3
 8002a8a:	4305      	orrs	r5, r0
 8002a8c:	002a      	movs	r2, r5
 8002a8e:	1e53      	subs	r3, r2, #1
 8002a90:	419a      	sbcs	r2, r3
 8002a92:	4332      	orrs	r2, r6
 8002a94:	2600      	movs	r6, #0
 8002a96:	0753      	lsls	r3, r2, #29
 8002a98:	d1ce      	bne.n	8002a38 <__aeabi_d2f+0x68>
 8002a9a:	2480      	movs	r4, #128	; 0x80
 8002a9c:	0013      	movs	r3, r2
 8002a9e:	04e4      	lsls	r4, r4, #19
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	4023      	ands	r3, r4
 8002aa4:	4222      	tst	r2, r4
 8002aa6:	d1d3      	bne.n	8002a50 <__aeabi_d2f+0x80>
 8002aa8:	e7b0      	b.n	8002a0c <__aeabi_d2f+0x3c>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e7ad      	b.n	8002a0a <__aeabi_d2f+0x3a>
 8002aae:	4a0b      	ldr	r2, [pc, #44]	; (8002adc <__aeabi_d2f+0x10c>)
 8002ab0:	4694      	mov	ip, r2
 8002ab2:	002a      	movs	r2, r5
 8002ab4:	40e2      	lsrs	r2, r4
 8002ab6:	0014      	movs	r4, r2
 8002ab8:	002a      	movs	r2, r5
 8002aba:	4463      	add	r3, ip
 8002abc:	409a      	lsls	r2, r3
 8002abe:	4098      	lsls	r0, r3
 8002ac0:	1e55      	subs	r5, r2, #1
 8002ac2:	41aa      	sbcs	r2, r5
 8002ac4:	4302      	orrs	r2, r0
 8002ac6:	4322      	orrs	r2, r4
 8002ac8:	e7e4      	b.n	8002a94 <__aeabi_d2f+0xc4>
 8002aca:	0033      	movs	r3, r6
 8002acc:	e79e      	b.n	8002a0c <__aeabi_d2f+0x3c>
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	000007fe 	.word	0x000007fe
 8002ad4:	fffffc80 	.word	0xfffffc80
 8002ad8:	fffffca2 	.word	0xfffffca2
 8002adc:	fffffc82 	.word	0xfffffc82

08002ae0 <__clzsi2>:
 8002ae0:	211c      	movs	r1, #28
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	041b      	lsls	r3, r3, #16
 8002ae6:	4298      	cmp	r0, r3
 8002ae8:	d301      	bcc.n	8002aee <__clzsi2+0xe>
 8002aea:	0c00      	lsrs	r0, r0, #16
 8002aec:	3910      	subs	r1, #16
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	4298      	cmp	r0, r3
 8002af2:	d301      	bcc.n	8002af8 <__clzsi2+0x18>
 8002af4:	0a00      	lsrs	r0, r0, #8
 8002af6:	3908      	subs	r1, #8
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	4298      	cmp	r0, r3
 8002afc:	d301      	bcc.n	8002b02 <__clzsi2+0x22>
 8002afe:	0900      	lsrs	r0, r0, #4
 8002b00:	3904      	subs	r1, #4
 8002b02:	a202      	add	r2, pc, #8	; (adr r2, 8002b0c <__clzsi2+0x2c>)
 8002b04:	5c10      	ldrb	r0, [r2, r0]
 8002b06:	1840      	adds	r0, r0, r1
 8002b08:	4770      	bx	lr
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	02020304 	.word	0x02020304
 8002b10:	01010101 	.word	0x01010101
	...

08002b1c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b09b      	sub	sp, #108	; 0x6c
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4ad0      	ldr	r2, [pc, #832]	; (8002e6c <HAL_UART_RxCpltCallback+0x350>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d001      	beq.n	8002b32 <HAL_UART_RxCpltCallback+0x16>
 8002b2e:	f000 fefa 	bl	8003926 <HAL_UART_RxCpltCallback+0xe0a>
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8002b32:	49cf      	ldr	r1, [pc, #828]	; (8002e70 <HAL_UART_RxCpltCallback+0x354>)
 8002b34:	4bcf      	ldr	r3, [pc, #828]	; (8002e74 <HAL_UART_RxCpltCallback+0x358>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f004 f914 	bl	8006d66 <HAL_UART_Receive_IT>
		if (rx_buf[0] == 'k') {
 8002b3e:	4bcc      	ldr	r3, [pc, #816]	; (8002e70 <HAL_UART_RxCpltCallback+0x354>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b6b      	cmp	r3, #107	; 0x6b
 8002b44:	d001      	beq.n	8002b4a <HAL_UART_RxCpltCallback+0x2e>
 8002b46:	f000 feee 	bl	8003926 <HAL_UART_RxCpltCallback+0xe0a>
//			HAL_UART_Transmit(&huart1, "\x5B" , 1, 100);
//			HAL_UART_Transmit(&huart1, "\x32" , 1, 100);
//			HAL_UART_Transmit(&huart1, "\x4A" , 1, 100);

			// Read all the ADCs (adcResultsDMA needs to be uint32_t!!!)
			HAL_ADC_Start_DMA(&hadc, (uint32_t*) adcResultsDMA,
 8002b4a:	230f      	movs	r3, #15
 8002b4c:	001a      	movs	r2, r3
 8002b4e:	49ca      	ldr	r1, [pc, #808]	; (8002e78 <HAL_UART_RxCpltCallback+0x35c>)
 8002b50:	4bca      	ldr	r3, [pc, #808]	; (8002e7c <HAL_UART_RxCpltCallback+0x360>)
 8002b52:	0018      	movs	r0, r3
 8002b54:	f001 fe20 	bl	8004798 <HAL_ADC_Start_DMA>
					adcChannelCount);
			for (int i = 0; i < num_gpios; i++) {
 8002b58:	2300      	movs	r3, #0
 8002b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b5c:	e02e      	b.n	8002bbc <HAL_UART_RxCpltCallback+0xa0>
				HAL_UART_Transmit(&huart1, gpio_names[i], 4, 100);
 8002b5e:	4bc8      	ldr	r3, [pc, #800]	; (8002e80 <HAL_UART_RxCpltCallback+0x364>)
 8002b60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b62:	0092      	lsls	r2, r2, #2
 8002b64:	58d1      	ldr	r1, [r2, r3]
 8002b66:	48c3      	ldr	r0, [pc, #780]	; (8002e74 <HAL_UART_RxCpltCallback+0x358>)
 8002b68:	2364      	movs	r3, #100	; 0x64
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	f004 f852 	bl	8006c14 <HAL_UART_Transmit>
				if (HAL_GPIO_ReadPin(gpios[i].gpio, gpios[i].pin)
 8002b70:	4bc4      	ldr	r3, [pc, #784]	; (8002e84 <HAL_UART_RxCpltCallback+0x368>)
 8002b72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b74:	00d2      	lsls	r2, r2, #3
 8002b76:	58d0      	ldr	r0, [r2, r3]
 8002b78:	4ac2      	ldr	r2, [pc, #776]	; (8002e84 <HAL_UART_RxCpltCallback+0x368>)
 8002b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	18d3      	adds	r3, r2, r3
 8002b80:	3304      	adds	r3, #4
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	0019      	movs	r1, r3
 8002b86:	f002 fd1b 	bl	80055c0 <HAL_GPIO_ReadPin>
 8002b8a:	0003      	movs	r3, r0
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d106      	bne.n	8002b9e <HAL_UART_RxCpltCallback+0x82>
						== GPIO_PIN_SET) {
					HAL_UART_Transmit(&huart1, ": H", 3, 100);
 8002b90:	49bd      	ldr	r1, [pc, #756]	; (8002e88 <HAL_UART_RxCpltCallback+0x36c>)
 8002b92:	48b8      	ldr	r0, [pc, #736]	; (8002e74 <HAL_UART_RxCpltCallback+0x358>)
 8002b94:	2364      	movs	r3, #100	; 0x64
 8002b96:	2203      	movs	r2, #3
 8002b98:	f004 f83c 	bl	8006c14 <HAL_UART_Transmit>
 8002b9c:	e005      	b.n	8002baa <HAL_UART_RxCpltCallback+0x8e>
				} else {
					HAL_UART_Transmit(&huart1, ": L", 3, 100);
 8002b9e:	49bb      	ldr	r1, [pc, #748]	; (8002e8c <HAL_UART_RxCpltCallback+0x370>)
 8002ba0:	48b4      	ldr	r0, [pc, #720]	; (8002e74 <HAL_UART_RxCpltCallback+0x358>)
 8002ba2:	2364      	movs	r3, #100	; 0x64
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	f004 f835 	bl	8006c14 <HAL_UART_Transmit>
				}
				HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8002baa:	49b9      	ldr	r1, [pc, #740]	; (8002e90 <HAL_UART_RxCpltCallback+0x374>)
 8002bac:	48b1      	ldr	r0, [pc, #708]	; (8002e74 <HAL_UART_RxCpltCallback+0x358>)
 8002bae:	2364      	movs	r3, #100	; 0x64
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	f004 f82f 	bl	8006c14 <HAL_UART_Transmit>
			for (int i = 0; i < num_gpios; i++) {
 8002bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb8:	3301      	adds	r3, #1
 8002bba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bbc:	4bb5      	ldr	r3, [pc, #724]	; (8002e94 <HAL_UART_RxCpltCallback+0x378>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	dbcb      	blt.n	8002b5e <HAL_UART_RxCpltCallback+0x42>
			}


			HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8002bc6:	49b2      	ldr	r1, [pc, #712]	; (8002e90 <HAL_UART_RxCpltCallback+0x374>)
 8002bc8:	48aa      	ldr	r0, [pc, #680]	; (8002e74 <HAL_UART_RxCpltCallback+0x358>)
 8002bca:	2364      	movs	r3, #100	; 0x64
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f004 f821 	bl	8006c14 <HAL_UART_Transmit>

			// For each ADC get its voltage
			for (int i = 0; i < adcChannelCount; i++) {
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bd6:	f000 fd18 	bl	800360a <HAL_UART_RxCpltCallback+0xaee>

				// Parsing ADCs value based on gpio_count
				uint16_t adc = adcResultsDMA[i];
 8002bda:	4ba7      	ldr	r3, [pc, #668]	; (8002e78 <HAL_UART_RxCpltCallback+0x35c>)
 8002bdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bde:	0092      	lsls	r2, r2, #2
 8002be0:	58d2      	ldr	r2, [r2, r3]
 8002be2:	2156      	movs	r1, #86	; 0x56
 8002be4:	187b      	adds	r3, r7, r1
 8002be6:	801a      	strh	r2, [r3, #0]
				uint8_t adcval[2];
				adcval[0] = ((adc & 0xFF00) >> 8); // ADC reading MSB
 8002be8:	187b      	adds	r3, r7, r1
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	0a1b      	lsrs	r3, r3, #8
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	2014      	movs	r0, #20
 8002bf4:	183b      	adds	r3, r7, r0
 8002bf6:	701a      	strb	r2, [r3, #0]
				adcval[1] = (adc & 0xFF); // ADC reading LSB
 8002bf8:	187b      	adds	r3, r7, r1
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	183b      	adds	r3, r7, r0
 8002c00:	705a      	strb	r2, [r3, #1]

				// Processing results for UART Transmission

				char value[8];
				if (i == 0) { // When i is < 8 you read from one of the ADC channels
 8002c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d148      	bne.n	8002c9a <HAL_UART_RxCpltCallback+0x17e>
					float voltage = adc * (3.3 / 4095);
 8002c08:	187b      	adds	r3, r7, r1
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f7ff fe41 	bl	8002894 <__aeabi_i2d>
 8002c12:	4aa1      	ldr	r2, [pc, #644]	; (8002e98 <HAL_UART_RxCpltCallback+0x37c>)
 8002c14:	4ba1      	ldr	r3, [pc, #644]	; (8002e9c <HAL_UART_RxCpltCallback+0x380>)
 8002c16:	f7fe ffeb 	bl	8001bf0 <__aeabi_dmul>
 8002c1a:	0002      	movs	r2, r0
 8002c1c:	000b      	movs	r3, r1
 8002c1e:	0010      	movs	r0, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	f7ff fed5 	bl	80029d0 <__aeabi_d2f>
 8002c26:	1c03      	adds	r3, r0, #0
 8002c28:	61bb      	str	r3, [r7, #24]
					sprintf(value, "%f", voltage);
 8002c2a:	69b8      	ldr	r0, [r7, #24]
 8002c2c:	f7ff fe88 	bl	8002940 <__aeabi_f2d>
 8002c30:	0002      	movs	r2, r0
 8002c32:	000b      	movs	r3, r1
 8002c34:	499a      	ldr	r1, [pc, #616]	; (8002ea0 <HAL_UART_RxCpltCallback+0x384>)
 8002c36:	200c      	movs	r0, #12
 8002c38:	1838      	adds	r0, r7, r0
 8002c3a:	f006 f845 	bl	8008cc8 <siprintf>
					HAL_UART_Transmit(&huart1, "800HVON", 7, 100);
 8002c3e:	4999      	ldr	r1, [pc, #612]	; (8002ea4 <HAL_UART_RxCpltCallback+0x388>)
 8002c40:	488c      	ldr	r0, [pc, #560]	; (8002e74 <HAL_UART_RxCpltCallback+0x358>)
 8002c42:	2364      	movs	r3, #100	; 0x64
 8002c44:	2207      	movs	r2, #7
 8002c46:	f003 ffe5 	bl	8006c14 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8002c4a:	69b8      	ldr	r0, [r7, #24]
 8002c4c:	f7ff fe78 	bl	8002940 <__aeabi_f2d>
 8002c50:	4a95      	ldr	r2, [pc, #596]	; (8002ea8 <HAL_UART_RxCpltCallback+0x38c>)
 8002c52:	4b96      	ldr	r3, [pc, #600]	; (8002eac <HAL_UART_RxCpltCallback+0x390>)
 8002c54:	f7fd fc00 	bl	8000458 <__aeabi_dcmplt>
 8002c58:	1e03      	subs	r3, r0, #0
 8002c5a:	d00f      	beq.n	8002c7c <HAL_UART_RxCpltCallback+0x160>
 8002c5c:	69b8      	ldr	r0, [r7, #24]
 8002c5e:	f7ff fe6f 	bl	8002940 <__aeabi_f2d>
 8002c62:	4a93      	ldr	r2, [pc, #588]	; (8002eb0 <HAL_UART_RxCpltCallback+0x394>)
 8002c64:	4b93      	ldr	r3, [pc, #588]	; (8002eb4 <HAL_UART_RxCpltCallback+0x398>)
 8002c66:	f7fd fc0b 	bl	8000480 <__aeabi_dcmpgt>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d006      	beq.n	8002c7c <HAL_UART_RxCpltCallback+0x160>
						gpio_flags[i] = 1;
 8002c6e:	4b92      	ldr	r3, [pc, #584]	; (8002eb8 <HAL_UART_RxCpltCallback+0x39c>)
 8002c70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c72:	0092      	lsls	r2, r2, #2
 8002c74:	2101      	movs	r1, #1
 8002c76:	50d1      	str	r1, [r2, r3]
 8002c78:	f000 fcb1 	bl	80035de <HAL_UART_RxCpltCallback+0xac2>
					} else if (voltage != 0) {
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	69b8      	ldr	r0, [r7, #24]
 8002c80:	f7fd fc1e 	bl	80004c0 <__aeabi_fcmpeq>
 8002c84:	1e03      	subs	r3, r0, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_UART_RxCpltCallback+0x170>
 8002c88:	f000 fca9 	bl	80035de <HAL_UART_RxCpltCallback+0xac2>
						gpio_flags[i] = 0;
 8002c8c:	4b8a      	ldr	r3, [pc, #552]	; (8002eb8 <HAL_UART_RxCpltCallback+0x39c>)
 8002c8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c90:	0092      	lsls	r2, r2, #2
 8002c92:	2100      	movs	r1, #0
 8002c94:	50d1      	str	r1, [r2, r3]
 8002c96:	f000 fca2 	bl	80035de <HAL_UART_RxCpltCallback+0xac2>
					}

				} else if (i == 1) {
 8002c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d149      	bne.n	8002d34 <HAL_UART_RxCpltCallback+0x218>
					float voltage = adc * (3.3 / 4095);
 8002ca0:	2356      	movs	r3, #86	; 0x56
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f7ff fdf4 	bl	8002894 <__aeabi_i2d>
 8002cac:	4a7a      	ldr	r2, [pc, #488]	; (8002e98 <HAL_UART_RxCpltCallback+0x37c>)
 8002cae:	4b7b      	ldr	r3, [pc, #492]	; (8002e9c <HAL_UART_RxCpltCallback+0x380>)
 8002cb0:	f7fe ff9e 	bl	8001bf0 <__aeabi_dmul>
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	000b      	movs	r3, r1
 8002cb8:	0010      	movs	r0, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	f7ff fe88 	bl	80029d0 <__aeabi_d2f>
 8002cc0:	1c03      	adds	r3, r0, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
					sprintf(value, "%f", voltage);
 8002cc4:	69f8      	ldr	r0, [r7, #28]
 8002cc6:	f7ff fe3b 	bl	8002940 <__aeabi_f2d>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	000b      	movs	r3, r1
 8002cce:	4974      	ldr	r1, [pc, #464]	; (8002ea0 <HAL_UART_RxCpltCallback+0x384>)
 8002cd0:	200c      	movs	r0, #12
 8002cd2:	1838      	adds	r0, r7, r0
 8002cd4:	f005 fff8 	bl	8008cc8 <siprintf>
					HAL_UART_Transmit(&huart1, "SYS_ON", 6, 100);
 8002cd8:	4978      	ldr	r1, [pc, #480]	; (8002ebc <HAL_UART_RxCpltCallback+0x3a0>)
 8002cda:	4866      	ldr	r0, [pc, #408]	; (8002e74 <HAL_UART_RxCpltCallback+0x358>)
 8002cdc:	2364      	movs	r3, #100	; 0x64
 8002cde:	2206      	movs	r2, #6
 8002ce0:	f003 ff98 	bl	8006c14 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8002ce4:	69f8      	ldr	r0, [r7, #28]
 8002ce6:	f7ff fe2b 	bl	8002940 <__aeabi_f2d>
 8002cea:	4a6f      	ldr	r2, [pc, #444]	; (8002ea8 <HAL_UART_RxCpltCallback+0x38c>)
 8002cec:	4b6f      	ldr	r3, [pc, #444]	; (8002eac <HAL_UART_RxCpltCallback+0x390>)
 8002cee:	f7fd fbb3 	bl	8000458 <__aeabi_dcmplt>
 8002cf2:	1e03      	subs	r3, r0, #0
 8002cf4:	d00f      	beq.n	8002d16 <HAL_UART_RxCpltCallback+0x1fa>
 8002cf6:	69f8      	ldr	r0, [r7, #28]
 8002cf8:	f7ff fe22 	bl	8002940 <__aeabi_f2d>
 8002cfc:	4a6c      	ldr	r2, [pc, #432]	; (8002eb0 <HAL_UART_RxCpltCallback+0x394>)
 8002cfe:	4b6d      	ldr	r3, [pc, #436]	; (8002eb4 <HAL_UART_RxCpltCallback+0x398>)
 8002d00:	f7fd fbbe 	bl	8000480 <__aeabi_dcmpgt>
 8002d04:	1e03      	subs	r3, r0, #0
 8002d06:	d006      	beq.n	8002d16 <HAL_UART_RxCpltCallback+0x1fa>
						gpio_flags[i] = 1;
 8002d08:	4b6b      	ldr	r3, [pc, #428]	; (8002eb8 <HAL_UART_RxCpltCallback+0x39c>)
 8002d0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d0c:	0092      	lsls	r2, r2, #2
 8002d0e:	2101      	movs	r1, #1
 8002d10:	50d1      	str	r1, [r2, r3]
 8002d12:	f000 fc64 	bl	80035de <HAL_UART_RxCpltCallback+0xac2>
					} else if (voltage != 0) {
 8002d16:	2100      	movs	r1, #0
 8002d18:	69f8      	ldr	r0, [r7, #28]
 8002d1a:	f7fd fbd1 	bl	80004c0 <__aeabi_fcmpeq>
 8002d1e:	1e03      	subs	r3, r0, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_UART_RxCpltCallback+0x20a>
 8002d22:	f000 fc5c 	bl	80035de <HAL_UART_RxCpltCallback+0xac2>
						gpio_flags[i] = 0;
 8002d26:	4b64      	ldr	r3, [pc, #400]	; (8002eb8 <HAL_UART_RxCpltCallback+0x39c>)
 8002d28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	50d1      	str	r1, [r2, r3]
 8002d30:	f000 fc55 	bl	80035de <HAL_UART_RxCpltCallback+0xac2>
					}

				} else if (i == 2) {
 8002d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d149      	bne.n	8002dce <HAL_UART_RxCpltCallback+0x2b2>
					float voltage = adc * (3.3 / 4095);
 8002d3a:	2356      	movs	r3, #86	; 0x56
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f7ff fda7 	bl	8002894 <__aeabi_i2d>
 8002d46:	4a54      	ldr	r2, [pc, #336]	; (8002e98 <HAL_UART_RxCpltCallback+0x37c>)
 8002d48:	4b54      	ldr	r3, [pc, #336]	; (8002e9c <HAL_UART_RxCpltCallback+0x380>)
 8002d4a:	f7fe ff51 	bl	8001bf0 <__aeabi_dmul>
 8002d4e:	0002      	movs	r2, r0
 8002d50:	000b      	movs	r3, r1
 8002d52:	0010      	movs	r0, r2
 8002d54:	0019      	movs	r1, r3
 8002d56:	f7ff fe3b 	bl	80029d0 <__aeabi_d2f>
 8002d5a:	1c03      	adds	r3, r0, #0
 8002d5c:	623b      	str	r3, [r7, #32]
					sprintf(value, "%f", voltage);
 8002d5e:	6a38      	ldr	r0, [r7, #32]
 8002d60:	f7ff fdee 	bl	8002940 <__aeabi_f2d>
 8002d64:	0002      	movs	r2, r0
 8002d66:	000b      	movs	r3, r1
 8002d68:	494d      	ldr	r1, [pc, #308]	; (8002ea0 <HAL_UART_RxCpltCallback+0x384>)
 8002d6a:	200c      	movs	r0, #12
 8002d6c:	1838      	adds	r0, r7, r0
 8002d6e:	f005 ffab 	bl	8008cc8 <siprintf>
					HAL_UART_Transmit(&huart1, "SYS_ON", 6, 100);
 8002d72:	4952      	ldr	r1, [pc, #328]	; (8002ebc <HAL_UART_RxCpltCallback+0x3a0>)
 8002d74:	483f      	ldr	r0, [pc, #252]	; (8002e74 <HAL_UART_RxCpltCallback+0x358>)
 8002d76:	2364      	movs	r3, #100	; 0x64
 8002d78:	2206      	movs	r2, #6
 8002d7a:	f003 ff4b 	bl	8006c14 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8002d7e:	6a38      	ldr	r0, [r7, #32]
 8002d80:	f7ff fdde 	bl	8002940 <__aeabi_f2d>
 8002d84:	4a48      	ldr	r2, [pc, #288]	; (8002ea8 <HAL_UART_RxCpltCallback+0x38c>)
 8002d86:	4b49      	ldr	r3, [pc, #292]	; (8002eac <HAL_UART_RxCpltCallback+0x390>)
 8002d88:	f7fd fb66 	bl	8000458 <__aeabi_dcmplt>
 8002d8c:	1e03      	subs	r3, r0, #0
 8002d8e:	d00f      	beq.n	8002db0 <HAL_UART_RxCpltCallback+0x294>
 8002d90:	6a38      	ldr	r0, [r7, #32]
 8002d92:	f7ff fdd5 	bl	8002940 <__aeabi_f2d>
 8002d96:	4a46      	ldr	r2, [pc, #280]	; (8002eb0 <HAL_UART_RxCpltCallback+0x394>)
 8002d98:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_UART_RxCpltCallback+0x398>)
 8002d9a:	f7fd fb71 	bl	8000480 <__aeabi_dcmpgt>
 8002d9e:	1e03      	subs	r3, r0, #0
 8002da0:	d006      	beq.n	8002db0 <HAL_UART_RxCpltCallback+0x294>
						gpio_flags[i] = 1;
 8002da2:	4b45      	ldr	r3, [pc, #276]	; (8002eb8 <HAL_UART_RxCpltCallback+0x39c>)
 8002da4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002da6:	0092      	lsls	r2, r2, #2
 8002da8:	2101      	movs	r1, #1
 8002daa:	50d1      	str	r1, [r2, r3]
 8002dac:	f000 fc17 	bl	80035de <HAL_UART_RxCpltCallback+0xac2>
					} else if (voltage != 0) {
 8002db0:	2100      	movs	r1, #0
 8002db2:	6a38      	ldr	r0, [r7, #32]
 8002db4:	f7fd fb84 	bl	80004c0 <__aeabi_fcmpeq>
 8002db8:	1e03      	subs	r3, r0, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_UART_RxCpltCallback+0x2a4>
 8002dbc:	f000 fc0f 	bl	80035de <HAL_UART_RxCpltCallback+0xac2>
						gpio_flags[i] = 0;
 8002dc0:	4b3d      	ldr	r3, [pc, #244]	; (8002eb8 <HAL_UART_RxCpltCallback+0x39c>)
 8002dc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dc4:	0092      	lsls	r2, r2, #2
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	50d1      	str	r1, [r2, r3]
 8002dca:	f000 fc08 	bl	80035de <HAL_UART_RxCpltCallback+0xac2>
					}

				} else if (i == 3) {
 8002dce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d000      	beq.n	8002dd6 <HAL_UART_RxCpltCallback+0x2ba>
 8002dd4:	e076      	b.n	8002ec4 <HAL_UART_RxCpltCallback+0x3a8>
					float voltage = adc * (3.3 / 4095);
 8002dd6:	2356      	movs	r3, #86	; 0x56
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f7ff fd59 	bl	8002894 <__aeabi_i2d>
 8002de2:	4a2d      	ldr	r2, [pc, #180]	; (8002e98 <HAL_UART_RxCpltCallback+0x37c>)
 8002de4:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <HAL_UART_RxCpltCallback+0x380>)
 8002de6:	f7fe ff03 	bl	8001bf0 <__aeabi_dmul>
 8002dea:	0002      	movs	r2, r0
 8002dec:	000b      	movs	r3, r1
 8002dee:	0010      	movs	r0, r2
 8002df0:	0019      	movs	r1, r3
 8002df2:	f7ff fded 	bl	80029d0 <__aeabi_d2f>
 8002df6:	1c03      	adds	r3, r0, #0
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
					// Need to multiply by 2
					sprintf(value, "%f", voltage);
 8002dfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dfc:	f7ff fda0 	bl	8002940 <__aeabi_f2d>
 8002e00:	0002      	movs	r2, r0
 8002e02:	000b      	movs	r3, r1
 8002e04:	4926      	ldr	r1, [pc, #152]	; (8002ea0 <HAL_UART_RxCpltCallback+0x384>)
 8002e06:	200c      	movs	r0, #12
 8002e08:	1838      	adds	r0, r7, r0
 8002e0a:	f005 ff5d 	bl	8008cc8 <siprintf>
					HAL_UART_Transmit(&huart1, "3v3_MON", 7, 100);
 8002e0e:	492c      	ldr	r1, [pc, #176]	; (8002ec0 <HAL_UART_RxCpltCallback+0x3a4>)
 8002e10:	4818      	ldr	r0, [pc, #96]	; (8002e74 <HAL_UART_RxCpltCallback+0x358>)
 8002e12:	2364      	movs	r3, #100	; 0x64
 8002e14:	2207      	movs	r2, #7
 8002e16:	f003 fefd 	bl	8006c14 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8002e1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e1c:	f7ff fd90 	bl	8002940 <__aeabi_f2d>
 8002e20:	4a21      	ldr	r2, [pc, #132]	; (8002ea8 <HAL_UART_RxCpltCallback+0x38c>)
 8002e22:	4b22      	ldr	r3, [pc, #136]	; (8002eac <HAL_UART_RxCpltCallback+0x390>)
 8002e24:	f7fd fb18 	bl	8000458 <__aeabi_dcmplt>
 8002e28:	1e03      	subs	r3, r0, #0
 8002e2a:	d00f      	beq.n	8002e4c <HAL_UART_RxCpltCallback+0x330>
 8002e2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e2e:	f7ff fd87 	bl	8002940 <__aeabi_f2d>
 8002e32:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <HAL_UART_RxCpltCallback+0x394>)
 8002e34:	4b1f      	ldr	r3, [pc, #124]	; (8002eb4 <HAL_UART_RxCpltCallback+0x398>)
 8002e36:	f7fd fb23 	bl	8000480 <__aeabi_dcmpgt>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d006      	beq.n	8002e4c <HAL_UART_RxCpltCallback+0x330>
						gpio_flags[i] = 1;
 8002e3e:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <HAL_UART_RxCpltCallback+0x39c>)
 8002e40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e42:	0092      	lsls	r2, r2, #2
 8002e44:	2101      	movs	r1, #1
 8002e46:	50d1      	str	r1, [r2, r3]
 8002e48:	f000 fbc9 	bl	80035de <HAL_UART_RxCpltCallback+0xac2>
					} else if (voltage != 0) {
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e50:	f7fd fb36 	bl	80004c0 <__aeabi_fcmpeq>
 8002e54:	1e03      	subs	r3, r0, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_UART_RxCpltCallback+0x340>
 8002e58:	f000 fbc1 	bl	80035de <HAL_UART_RxCpltCallback+0xac2>
						gpio_flags[i] = 0;
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <HAL_UART_RxCpltCallback+0x39c>)
 8002e5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e60:	0092      	lsls	r2, r2, #2
 8002e62:	2100      	movs	r1, #0
 8002e64:	50d1      	str	r1, [r2, r3]
 8002e66:	f000 fbba 	bl	80035de <HAL_UART_RxCpltCallback+0xac2>
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	40013800 	.word	0x40013800
 8002e70:	20000380 	.word	0x20000380
 8002e74:	200002f0 	.word	0x200002f0
 8002e78:	200003e8 	.word	0x200003e8
 8002e7c:	20000220 	.word	0x20000220
 8002e80:	20000000 	.word	0x20000000
 8002e84:	0800cc08 	.word	0x0800cc08
 8002e88:	0800ca60 	.word	0x0800ca60
 8002e8c:	0800ca64 	.word	0x0800ca64
 8002e90:	0800ca68 	.word	0x0800ca68
 8002e94:	20000020 	.word	0x20000020
 8002e98:	e734d9b4 	.word	0xe734d9b4
 8002e9c:	3f4a680c 	.word	0x3f4a680c
 8002ea0:	0800ca6c 	.word	0x0800ca6c
 8002ea4:	0800ca70 	.word	0x0800ca70
 8002ea8:	33333333 	.word	0x33333333
 8002eac:	400b3333 	.word	0x400b3333
 8002eb0:	9999999a 	.word	0x9999999a
 8002eb4:	40099999 	.word	0x40099999
 8002eb8:	20000424 	.word	0x20000424
 8002ebc:	0800ca78 	.word	0x0800ca78
 8002ec0:	0800ca80 	.word	0x0800ca80
					}

				} else if (i == 4) {
 8002ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d14e      	bne.n	8002f68 <HAL_UART_RxCpltCallback+0x44c>
					float voltage = adc * (3.3 / 4095) * -50;
 8002eca:	2356      	movs	r3, #86	; 0x56
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7ff fcdf 	bl	8002894 <__aeabi_i2d>
 8002ed6:	4ad7      	ldr	r2, [pc, #860]	; (8003234 <HAL_UART_RxCpltCallback+0x718>)
 8002ed8:	4bd7      	ldr	r3, [pc, #860]	; (8003238 <HAL_UART_RxCpltCallback+0x71c>)
 8002eda:	f7fe fe89 	bl	8001bf0 <__aeabi_dmul>
 8002ede:	0002      	movs	r2, r0
 8002ee0:	000b      	movs	r3, r1
 8002ee2:	0010      	movs	r0, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	4bd4      	ldr	r3, [pc, #848]	; (800323c <HAL_UART_RxCpltCallback+0x720>)
 8002eea:	f7fe fe81 	bl	8001bf0 <__aeabi_dmul>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	000b      	movs	r3, r1
 8002ef2:	0010      	movs	r0, r2
 8002ef4:	0019      	movs	r1, r3
 8002ef6:	f7ff fd6b 	bl	80029d0 <__aeabi_d2f>
 8002efa:	1c03      	adds	r3, r0, #0
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
					sprintf(value, "%f", voltage);
 8002efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f00:	f7ff fd1e 	bl	8002940 <__aeabi_f2d>
 8002f04:	0002      	movs	r2, r0
 8002f06:	000b      	movs	r3, r1
 8002f08:	49cd      	ldr	r1, [pc, #820]	; (8003240 <HAL_UART_RxCpltCallback+0x724>)
 8002f0a:	200c      	movs	r0, #12
 8002f0c:	1838      	adds	r0, r7, r0
 8002f0e:	f005 fedb 	bl	8008cc8 <siprintf>
					HAL_UART_Transmit(&huart1, "n150v_MON", 9, 100);
 8002f12:	49cc      	ldr	r1, [pc, #816]	; (8003244 <HAL_UART_RxCpltCallback+0x728>)
 8002f14:	48cc      	ldr	r0, [pc, #816]	; (8003248 <HAL_UART_RxCpltCallback+0x72c>)
 8002f16:	2364      	movs	r3, #100	; 0x64
 8002f18:	2209      	movs	r2, #9
 8002f1a:	f003 fe7b 	bl	8006c14 <HAL_UART_Transmit>
					if (voltage > -150.1 && voltage < -149.9) {
 8002f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f20:	f7ff fd0e 	bl	8002940 <__aeabi_f2d>
 8002f24:	4ac9      	ldr	r2, [pc, #804]	; (800324c <HAL_UART_RxCpltCallback+0x730>)
 8002f26:	4bca      	ldr	r3, [pc, #808]	; (8003250 <HAL_UART_RxCpltCallback+0x734>)
 8002f28:	f7fd faaa 	bl	8000480 <__aeabi_dcmpgt>
 8002f2c:	1e03      	subs	r3, r0, #0
 8002f2e:	d00e      	beq.n	8002f4e <HAL_UART_RxCpltCallback+0x432>
 8002f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f32:	f7ff fd05 	bl	8002940 <__aeabi_f2d>
 8002f36:	4ac7      	ldr	r2, [pc, #796]	; (8003254 <HAL_UART_RxCpltCallback+0x738>)
 8002f38:	4bc7      	ldr	r3, [pc, #796]	; (8003258 <HAL_UART_RxCpltCallback+0x73c>)
 8002f3a:	f7fd fa8d 	bl	8000458 <__aeabi_dcmplt>
 8002f3e:	1e03      	subs	r3, r0, #0
 8002f40:	d005      	beq.n	8002f4e <HAL_UART_RxCpltCallback+0x432>
						gpio_flags[i] = 1;
 8002f42:	4bc6      	ldr	r3, [pc, #792]	; (800325c <HAL_UART_RxCpltCallback+0x740>)
 8002f44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f46:	0092      	lsls	r2, r2, #2
 8002f48:	2101      	movs	r1, #1
 8002f4a:	50d1      	str	r1, [r2, r3]
 8002f4c:	e347      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					} else if (voltage != 0) {
 8002f4e:	2100      	movs	r1, #0
 8002f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f52:	f7fd fab5 	bl	80004c0 <__aeabi_fcmpeq>
 8002f56:	1e03      	subs	r3, r0, #0
 8002f58:	d000      	beq.n	8002f5c <HAL_UART_RxCpltCallback+0x440>
 8002f5a:	e340      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
						gpio_flags[i] = 0;
 8002f5c:	4bbf      	ldr	r3, [pc, #764]	; (800325c <HAL_UART_RxCpltCallback+0x740>)
 8002f5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f60:	0092      	lsls	r2, r2, #2
 8002f62:	2100      	movs	r1, #0
 8002f64:	50d1      	str	r1, [r2, r3]
 8002f66:	e33a      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					}

				} else if (i == 5) {
 8002f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f6a:	2b05      	cmp	r3, #5
 8002f6c:	d146      	bne.n	8002ffc <HAL_UART_RxCpltCallback+0x4e0>
					float voltage = adc * (3.3 / 4095);
 8002f6e:	2356      	movs	r3, #86	; 0x56
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	0018      	movs	r0, r3
 8002f76:	f7ff fc8d 	bl	8002894 <__aeabi_i2d>
 8002f7a:	4aae      	ldr	r2, [pc, #696]	; (8003234 <HAL_UART_RxCpltCallback+0x718>)
 8002f7c:	4bae      	ldr	r3, [pc, #696]	; (8003238 <HAL_UART_RxCpltCallback+0x71c>)
 8002f7e:	f7fe fe37 	bl	8001bf0 <__aeabi_dmul>
 8002f82:	0002      	movs	r2, r0
 8002f84:	000b      	movs	r3, r1
 8002f86:	0010      	movs	r0, r2
 8002f88:	0019      	movs	r1, r3
 8002f8a:	f7ff fd21 	bl	80029d0 <__aeabi_d2f>
 8002f8e:	1c03      	adds	r3, r0, #0
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
					sprintf(value, "%f", voltage);
 8002f92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f94:	f7ff fcd4 	bl	8002940 <__aeabi_f2d>
 8002f98:	0002      	movs	r2, r0
 8002f9a:	000b      	movs	r3, r1
 8002f9c:	49a8      	ldr	r1, [pc, #672]	; (8003240 <HAL_UART_RxCpltCallback+0x724>)
 8002f9e:	200c      	movs	r0, #12
 8002fa0:	1838      	adds	r0, r7, r0
 8002fa2:	f005 fe91 	bl	8008cc8 <siprintf>
					HAL_UART_Transmit(&huart1, "TMP1", 4, 100);
 8002fa6:	49ae      	ldr	r1, [pc, #696]	; (8003260 <HAL_UART_RxCpltCallback+0x744>)
 8002fa8:	48a7      	ldr	r0, [pc, #668]	; (8003248 <HAL_UART_RxCpltCallback+0x72c>)
 8002faa:	2364      	movs	r3, #100	; 0x64
 8002fac:	2204      	movs	r2, #4
 8002fae:	f003 fe31 	bl	8006c14 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8002fb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fb4:	f7ff fcc4 	bl	8002940 <__aeabi_f2d>
 8002fb8:	4aa4      	ldr	r2, [pc, #656]	; (800324c <HAL_UART_RxCpltCallback+0x730>)
 8002fba:	4baa      	ldr	r3, [pc, #680]	; (8003264 <HAL_UART_RxCpltCallback+0x748>)
 8002fbc:	f7fd fa4c 	bl	8000458 <__aeabi_dcmplt>
 8002fc0:	1e03      	subs	r3, r0, #0
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_UART_RxCpltCallback+0x4c6>
 8002fc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fc6:	f7ff fcbb 	bl	8002940 <__aeabi_f2d>
 8002fca:	4aa7      	ldr	r2, [pc, #668]	; (8003268 <HAL_UART_RxCpltCallback+0x74c>)
 8002fcc:	4ba7      	ldr	r3, [pc, #668]	; (800326c <HAL_UART_RxCpltCallback+0x750>)
 8002fce:	f7fd fa57 	bl	8000480 <__aeabi_dcmpgt>
 8002fd2:	1e03      	subs	r3, r0, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_UART_RxCpltCallback+0x4c6>
						gpio_flags[i] = 1;
 8002fd6:	4ba1      	ldr	r3, [pc, #644]	; (800325c <HAL_UART_RxCpltCallback+0x740>)
 8002fd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fda:	0092      	lsls	r2, r2, #2
 8002fdc:	2101      	movs	r1, #1
 8002fde:	50d1      	str	r1, [r2, r3]
 8002fe0:	e2fd      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					} else if (voltage != 0) {
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fe6:	f7fd fa6b 	bl	80004c0 <__aeabi_fcmpeq>
 8002fea:	1e03      	subs	r3, r0, #0
 8002fec:	d000      	beq.n	8002ff0 <HAL_UART_RxCpltCallback+0x4d4>
 8002fee:	e2f6      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
						gpio_flags[i] = 0;
 8002ff0:	4b9a      	ldr	r3, [pc, #616]	; (800325c <HAL_UART_RxCpltCallback+0x740>)
 8002ff2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ff4:	0092      	lsls	r2, r2, #2
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	50d1      	str	r1, [r2, r3]
 8002ffa:	e2f0      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					}

				} else if (i == 6) {
 8002ffc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d146      	bne.n	8003090 <HAL_UART_RxCpltCallback+0x574>
					float voltage = adc * (3.3 / 4095);
 8003002:	2356      	movs	r3, #86	; 0x56
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	0018      	movs	r0, r3
 800300a:	f7ff fc43 	bl	8002894 <__aeabi_i2d>
 800300e:	4a89      	ldr	r2, [pc, #548]	; (8003234 <HAL_UART_RxCpltCallback+0x718>)
 8003010:	4b89      	ldr	r3, [pc, #548]	; (8003238 <HAL_UART_RxCpltCallback+0x71c>)
 8003012:	f7fe fded 	bl	8001bf0 <__aeabi_dmul>
 8003016:	0002      	movs	r2, r0
 8003018:	000b      	movs	r3, r1
 800301a:	0010      	movs	r0, r2
 800301c:	0019      	movs	r1, r3
 800301e:	f7ff fcd7 	bl	80029d0 <__aeabi_d2f>
 8003022:	1c03      	adds	r3, r0, #0
 8003024:	633b      	str	r3, [r7, #48]	; 0x30
					sprintf(value, "%f", voltage);
 8003026:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003028:	f7ff fc8a 	bl	8002940 <__aeabi_f2d>
 800302c:	0002      	movs	r2, r0
 800302e:	000b      	movs	r3, r1
 8003030:	4983      	ldr	r1, [pc, #524]	; (8003240 <HAL_UART_RxCpltCallback+0x724>)
 8003032:	200c      	movs	r0, #12
 8003034:	1838      	adds	r0, r7, r0
 8003036:	f005 fe47 	bl	8008cc8 <siprintf>
					HAL_UART_Transmit(&huart1, "TMP2", 5, 100);
 800303a:	498d      	ldr	r1, [pc, #564]	; (8003270 <HAL_UART_RxCpltCallback+0x754>)
 800303c:	4882      	ldr	r0, [pc, #520]	; (8003248 <HAL_UART_RxCpltCallback+0x72c>)
 800303e:	2364      	movs	r3, #100	; 0x64
 8003040:	2205      	movs	r2, #5
 8003042:	f003 fde7 	bl	8006c14 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8003046:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003048:	f7ff fc7a 	bl	8002940 <__aeabi_f2d>
 800304c:	4a7f      	ldr	r2, [pc, #508]	; (800324c <HAL_UART_RxCpltCallback+0x730>)
 800304e:	4b85      	ldr	r3, [pc, #532]	; (8003264 <HAL_UART_RxCpltCallback+0x748>)
 8003050:	f7fd fa02 	bl	8000458 <__aeabi_dcmplt>
 8003054:	1e03      	subs	r3, r0, #0
 8003056:	d00e      	beq.n	8003076 <HAL_UART_RxCpltCallback+0x55a>
 8003058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800305a:	f7ff fc71 	bl	8002940 <__aeabi_f2d>
 800305e:	4a82      	ldr	r2, [pc, #520]	; (8003268 <HAL_UART_RxCpltCallback+0x74c>)
 8003060:	4b82      	ldr	r3, [pc, #520]	; (800326c <HAL_UART_RxCpltCallback+0x750>)
 8003062:	f7fd fa0d 	bl	8000480 <__aeabi_dcmpgt>
 8003066:	1e03      	subs	r3, r0, #0
 8003068:	d005      	beq.n	8003076 <HAL_UART_RxCpltCallback+0x55a>
						gpio_flags[i] = 1;
 800306a:	4b7c      	ldr	r3, [pc, #496]	; (800325c <HAL_UART_RxCpltCallback+0x740>)
 800306c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	2101      	movs	r1, #1
 8003072:	50d1      	str	r1, [r2, r3]
 8003074:	e2b3      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					} else if (voltage != 0) {
 8003076:	2100      	movs	r1, #0
 8003078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800307a:	f7fd fa21 	bl	80004c0 <__aeabi_fcmpeq>
 800307e:	1e03      	subs	r3, r0, #0
 8003080:	d000      	beq.n	8003084 <HAL_UART_RxCpltCallback+0x568>
 8003082:	e2ac      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
						gpio_flags[i] = 0;
 8003084:	4b75      	ldr	r3, [pc, #468]	; (800325c <HAL_UART_RxCpltCallback+0x740>)
 8003086:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003088:	0092      	lsls	r2, r2, #2
 800308a:	2100      	movs	r1, #0
 800308c:	50d1      	str	r1, [r2, r3]
 800308e:	e2a6      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					}

				} else if (i == 7) {
 8003090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003092:	2b07      	cmp	r3, #7
 8003094:	d146      	bne.n	8003124 <HAL_UART_RxCpltCallback+0x608>
					float voltage = adc * (3.3 / 4095);
 8003096:	2356      	movs	r3, #86	; 0x56
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	0018      	movs	r0, r3
 800309e:	f7ff fbf9 	bl	8002894 <__aeabi_i2d>
 80030a2:	4a64      	ldr	r2, [pc, #400]	; (8003234 <HAL_UART_RxCpltCallback+0x718>)
 80030a4:	4b64      	ldr	r3, [pc, #400]	; (8003238 <HAL_UART_RxCpltCallback+0x71c>)
 80030a6:	f7fe fda3 	bl	8001bf0 <__aeabi_dmul>
 80030aa:	0002      	movs	r2, r0
 80030ac:	000b      	movs	r3, r1
 80030ae:	0010      	movs	r0, r2
 80030b0:	0019      	movs	r1, r3
 80030b2:	f7ff fc8d 	bl	80029d0 <__aeabi_d2f>
 80030b6:	1c03      	adds	r3, r0, #0
 80030b8:	637b      	str	r3, [r7, #52]	; 0x34
//					 voltage *= -2;
					sprintf(value, "%f", voltage);
 80030ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030bc:	f7ff fc40 	bl	8002940 <__aeabi_f2d>
 80030c0:	0002      	movs	r2, r0
 80030c2:	000b      	movs	r3, r1
 80030c4:	495e      	ldr	r1, [pc, #376]	; (8003240 <HAL_UART_RxCpltCallback+0x724>)
 80030c6:	200c      	movs	r0, #12
 80030c8:	1838      	adds	r0, r7, r0
 80030ca:	f005 fdfd 	bl	8008cc8 <siprintf>
					HAL_UART_Transmit(&huart1, "n5v_MON", 7, 100);
 80030ce:	4969      	ldr	r1, [pc, #420]	; (8003274 <HAL_UART_RxCpltCallback+0x758>)
 80030d0:	485d      	ldr	r0, [pc, #372]	; (8003248 <HAL_UART_RxCpltCallback+0x72c>)
 80030d2:	2364      	movs	r3, #100	; 0x64
 80030d4:	2207      	movs	r2, #7
 80030d6:	f003 fd9d 	bl	8006c14 <HAL_UART_Transmit>
					if (voltage > -5.1 && voltage < -4.9) {
 80030da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030dc:	f7ff fc30 	bl	8002940 <__aeabi_f2d>
 80030e0:	4a65      	ldr	r2, [pc, #404]	; (8003278 <HAL_UART_RxCpltCallback+0x75c>)
 80030e2:	4b66      	ldr	r3, [pc, #408]	; (800327c <HAL_UART_RxCpltCallback+0x760>)
 80030e4:	f7fd f9cc 	bl	8000480 <__aeabi_dcmpgt>
 80030e8:	1e03      	subs	r3, r0, #0
 80030ea:	d00e      	beq.n	800310a <HAL_UART_RxCpltCallback+0x5ee>
 80030ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030ee:	f7ff fc27 	bl	8002940 <__aeabi_f2d>
 80030f2:	4a5d      	ldr	r2, [pc, #372]	; (8003268 <HAL_UART_RxCpltCallback+0x74c>)
 80030f4:	4b62      	ldr	r3, [pc, #392]	; (8003280 <HAL_UART_RxCpltCallback+0x764>)
 80030f6:	f7fd f9af 	bl	8000458 <__aeabi_dcmplt>
 80030fa:	1e03      	subs	r3, r0, #0
 80030fc:	d005      	beq.n	800310a <HAL_UART_RxCpltCallback+0x5ee>
						gpio_flags[i] = 1;
 80030fe:	4b57      	ldr	r3, [pc, #348]	; (800325c <HAL_UART_RxCpltCallback+0x740>)
 8003100:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003102:	0092      	lsls	r2, r2, #2
 8003104:	2101      	movs	r1, #1
 8003106:	50d1      	str	r1, [r2, r3]
 8003108:	e269      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					} else if (voltage != 0) {
 800310a:	2100      	movs	r1, #0
 800310c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800310e:	f7fd f9d7 	bl	80004c0 <__aeabi_fcmpeq>
 8003112:	1e03      	subs	r3, r0, #0
 8003114:	d000      	beq.n	8003118 <HAL_UART_RxCpltCallback+0x5fc>
 8003116:	e262      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
						gpio_flags[i] = 0;
 8003118:	4b50      	ldr	r3, [pc, #320]	; (800325c <HAL_UART_RxCpltCallback+0x740>)
 800311a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800311c:	0092      	lsls	r2, r2, #2
 800311e:	2100      	movs	r1, #0
 8003120:	50d1      	str	r1, [r2, r3]
 8003122:	e25c      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					}

				} else if (i == 8) {
 8003124:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003126:	2b08      	cmp	r3, #8
 8003128:	d146      	bne.n	80031b8 <HAL_UART_RxCpltCallback+0x69c>
					float voltage = adc * (3.3 / 4095);
 800312a:	2356      	movs	r3, #86	; 0x56
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	0018      	movs	r0, r3
 8003132:	f7ff fbaf 	bl	8002894 <__aeabi_i2d>
 8003136:	4a3f      	ldr	r2, [pc, #252]	; (8003234 <HAL_UART_RxCpltCallback+0x718>)
 8003138:	4b3f      	ldr	r3, [pc, #252]	; (8003238 <HAL_UART_RxCpltCallback+0x71c>)
 800313a:	f7fe fd59 	bl	8001bf0 <__aeabi_dmul>
 800313e:	0002      	movs	r2, r0
 8003140:	000b      	movs	r3, r1
 8003142:	0010      	movs	r0, r2
 8003144:	0019      	movs	r1, r3
 8003146:	f7ff fc43 	bl	80029d0 <__aeabi_d2f>
 800314a:	1c03      	adds	r3, r0, #0
 800314c:	63bb      	str	r3, [r7, #56]	; 0x38
//					 voltage *= 2;
					sprintf(value, "%f", voltage);
 800314e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003150:	f7ff fbf6 	bl	8002940 <__aeabi_f2d>
 8003154:	0002      	movs	r2, r0
 8003156:	000b      	movs	r3, r1
 8003158:	4939      	ldr	r1, [pc, #228]	; (8003240 <HAL_UART_RxCpltCallback+0x724>)
 800315a:	200c      	movs	r0, #12
 800315c:	1838      	adds	r0, r7, r0
 800315e:	f005 fdb3 	bl	8008cc8 <siprintf>
					HAL_UART_Transmit(&huart1, "n5v_MON", 7, 100);
 8003162:	4944      	ldr	r1, [pc, #272]	; (8003274 <HAL_UART_RxCpltCallback+0x758>)
 8003164:	4838      	ldr	r0, [pc, #224]	; (8003248 <HAL_UART_RxCpltCallback+0x72c>)
 8003166:	2364      	movs	r3, #100	; 0x64
 8003168:	2207      	movs	r2, #7
 800316a:	f003 fd53 	bl	8006c14 <HAL_UART_Transmit>
					if (voltage > -5.1 && voltage < -4.9) {
 800316e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003170:	f7ff fbe6 	bl	8002940 <__aeabi_f2d>
 8003174:	4a40      	ldr	r2, [pc, #256]	; (8003278 <HAL_UART_RxCpltCallback+0x75c>)
 8003176:	4b41      	ldr	r3, [pc, #260]	; (800327c <HAL_UART_RxCpltCallback+0x760>)
 8003178:	f7fd f982 	bl	8000480 <__aeabi_dcmpgt>
 800317c:	1e03      	subs	r3, r0, #0
 800317e:	d00e      	beq.n	800319e <HAL_UART_RxCpltCallback+0x682>
 8003180:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003182:	f7ff fbdd 	bl	8002940 <__aeabi_f2d>
 8003186:	4a38      	ldr	r2, [pc, #224]	; (8003268 <HAL_UART_RxCpltCallback+0x74c>)
 8003188:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <HAL_UART_RxCpltCallback+0x764>)
 800318a:	f7fd f965 	bl	8000458 <__aeabi_dcmplt>
 800318e:	1e03      	subs	r3, r0, #0
 8003190:	d005      	beq.n	800319e <HAL_UART_RxCpltCallback+0x682>
						gpio_flags[i] = 1;
 8003192:	4b32      	ldr	r3, [pc, #200]	; (800325c <HAL_UART_RxCpltCallback+0x740>)
 8003194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003196:	0092      	lsls	r2, r2, #2
 8003198:	2101      	movs	r1, #1
 800319a:	50d1      	str	r1, [r2, r3]
 800319c:	e21f      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					} else if (voltage != 0) {
 800319e:	2100      	movs	r1, #0
 80031a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80031a2:	f7fd f98d 	bl	80004c0 <__aeabi_fcmpeq>
 80031a6:	1e03      	subs	r3, r0, #0
 80031a8:	d000      	beq.n	80031ac <HAL_UART_RxCpltCallback+0x690>
 80031aa:	e218      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
						gpio_flags[i] = 0;
 80031ac:	4b2b      	ldr	r3, [pc, #172]	; (800325c <HAL_UART_RxCpltCallback+0x740>)
 80031ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031b0:	0092      	lsls	r2, r2, #2
 80031b2:	2100      	movs	r1, #0
 80031b4:	50d1      	str	r1, [r2, r3]
 80031b6:	e212      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					}

				} else if (i == 9) {
 80031b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ba:	2b09      	cmp	r3, #9
 80031bc:	d000      	beq.n	80031c0 <HAL_UART_RxCpltCallback+0x6a4>
 80031be:	e074      	b.n	80032aa <HAL_UART_RxCpltCallback+0x78e>
					float voltage = adc * (3.3 / 4095);
 80031c0:	2356      	movs	r3, #86	; 0x56
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	0018      	movs	r0, r3
 80031c8:	f7ff fb64 	bl	8002894 <__aeabi_i2d>
 80031cc:	4a19      	ldr	r2, [pc, #100]	; (8003234 <HAL_UART_RxCpltCallback+0x718>)
 80031ce:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <HAL_UART_RxCpltCallback+0x71c>)
 80031d0:	f7fe fd0e 	bl	8001bf0 <__aeabi_dmul>
 80031d4:	0002      	movs	r2, r0
 80031d6:	000b      	movs	r3, r1
 80031d8:	0010      	movs	r0, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	f7ff fbf8 	bl	80029d0 <__aeabi_d2f>
 80031e0:	1c03      	adds	r3, r0, #0
 80031e2:	63fb      	str	r3, [r7, #60]	; 0x3c
//					 voltage *= 2;
					sprintf(value, "%f", voltage);
 80031e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80031e6:	f7ff fbab 	bl	8002940 <__aeabi_f2d>
 80031ea:	0002      	movs	r2, r0
 80031ec:	000b      	movs	r3, r1
 80031ee:	4914      	ldr	r1, [pc, #80]	; (8003240 <HAL_UART_RxCpltCallback+0x724>)
 80031f0:	200c      	movs	r0, #12
 80031f2:	1838      	adds	r0, r7, r0
 80031f4:	f005 fd68 	bl	8008cc8 <siprintf>
					HAL_UART_Transmit(&huart1, "5v_MON", 6, 100);
 80031f8:	4922      	ldr	r1, [pc, #136]	; (8003284 <HAL_UART_RxCpltCallback+0x768>)
 80031fa:	4813      	ldr	r0, [pc, #76]	; (8003248 <HAL_UART_RxCpltCallback+0x72c>)
 80031fc:	2364      	movs	r3, #100	; 0x64
 80031fe:	2206      	movs	r2, #6
 8003200:	f003 fd08 	bl	8006c14 <HAL_UART_Transmit>
					if (voltage < 5.1 && voltage > 4.9) {
 8003204:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003206:	f7ff fb9b 	bl	8002940 <__aeabi_f2d>
 800320a:	4a1b      	ldr	r2, [pc, #108]	; (8003278 <HAL_UART_RxCpltCallback+0x75c>)
 800320c:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <HAL_UART_RxCpltCallback+0x76c>)
 800320e:	f7fd f923 	bl	8000458 <__aeabi_dcmplt>
 8003212:	1e03      	subs	r3, r0, #0
 8003214:	d03c      	beq.n	8003290 <HAL_UART_RxCpltCallback+0x774>
 8003216:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003218:	f7ff fb92 	bl	8002940 <__aeabi_f2d>
 800321c:	4a12      	ldr	r2, [pc, #72]	; (8003268 <HAL_UART_RxCpltCallback+0x74c>)
 800321e:	4b1b      	ldr	r3, [pc, #108]	; (800328c <HAL_UART_RxCpltCallback+0x770>)
 8003220:	f7fd f92e 	bl	8000480 <__aeabi_dcmpgt>
 8003224:	1e03      	subs	r3, r0, #0
 8003226:	d033      	beq.n	8003290 <HAL_UART_RxCpltCallback+0x774>
						gpio_flags[i] = 1;
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <HAL_UART_RxCpltCallback+0x740>)
 800322a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800322c:	0092      	lsls	r2, r2, #2
 800322e:	2101      	movs	r1, #1
 8003230:	50d1      	str	r1, [r2, r3]
 8003232:	e1d4      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
 8003234:	e734d9b4 	.word	0xe734d9b4
 8003238:	3f4a680c 	.word	0x3f4a680c
 800323c:	c0490000 	.word	0xc0490000
 8003240:	0800ca6c 	.word	0x0800ca6c
 8003244:	0800ca88 	.word	0x0800ca88
 8003248:	200002f0 	.word	0x200002f0
 800324c:	33333333 	.word	0x33333333
 8003250:	c062c333 	.word	0xc062c333
 8003254:	cccccccd 	.word	0xcccccccd
 8003258:	c062bccc 	.word	0xc062bccc
 800325c:	20000424 	.word	0x20000424
 8003260:	0800ca94 	.word	0x0800ca94
 8003264:	400b3333 	.word	0x400b3333
 8003268:	9999999a 	.word	0x9999999a
 800326c:	40099999 	.word	0x40099999
 8003270:	0800ca9c 	.word	0x0800ca9c
 8003274:	0800caa4 	.word	0x0800caa4
 8003278:	66666666 	.word	0x66666666
 800327c:	c0146666 	.word	0xc0146666
 8003280:	c0139999 	.word	0xc0139999
 8003284:	0800caac 	.word	0x0800caac
 8003288:	40146666 	.word	0x40146666
 800328c:	40139999 	.word	0x40139999
					} else if (voltage != 0) {
 8003290:	2100      	movs	r1, #0
 8003292:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003294:	f7fd f914 	bl	80004c0 <__aeabi_fcmpeq>
 8003298:	1e03      	subs	r3, r0, #0
 800329a:	d000      	beq.n	800329e <HAL_UART_RxCpltCallback+0x782>
 800329c:	e19f      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
						gpio_flags[i] = 0;
 800329e:	4bb5      	ldr	r3, [pc, #724]	; (8003574 <HAL_UART_RxCpltCallback+0xa58>)
 80032a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032a2:	0092      	lsls	r2, r2, #2
 80032a4:	2100      	movs	r1, #0
 80032a6:	50d1      	str	r1, [r2, r3]
 80032a8:	e199      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					}

				} else if (i == 10) {
 80032aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ac:	2b0a      	cmp	r3, #10
 80032ae:	d146      	bne.n	800333e <HAL_UART_RxCpltCallback+0x822>
					float voltage = adc * (3.3 / 4095);
 80032b0:	2356      	movs	r3, #86	; 0x56
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7ff faec 	bl	8002894 <__aeabi_i2d>
 80032bc:	4aae      	ldr	r2, [pc, #696]	; (8003578 <HAL_UART_RxCpltCallback+0xa5c>)
 80032be:	4baf      	ldr	r3, [pc, #700]	; (800357c <HAL_UART_RxCpltCallback+0xa60>)
 80032c0:	f7fe fc96 	bl	8001bf0 <__aeabi_dmul>
 80032c4:	0002      	movs	r2, r0
 80032c6:	000b      	movs	r3, r1
 80032c8:	0010      	movs	r0, r2
 80032ca:	0019      	movs	r1, r3
 80032cc:	f7ff fb80 	bl	80029d0 <__aeabi_d2f>
 80032d0:	1c03      	adds	r3, r0, #0
 80032d2:	643b      	str	r3, [r7, #64]	; 0x40
//					 voltage *= -1;
					sprintf(value, "%f", voltage);
 80032d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80032d6:	f7ff fb33 	bl	8002940 <__aeabi_f2d>
 80032da:	0002      	movs	r2, r0
 80032dc:	000b      	movs	r3, r1
 80032de:	49a8      	ldr	r1, [pc, #672]	; (8003580 <HAL_UART_RxCpltCallback+0xa64>)
 80032e0:	200c      	movs	r0, #12
 80032e2:	1838      	adds	r0, r7, r0
 80032e4:	f005 fcf0 	bl	8008cc8 <siprintf>
					HAL_UART_Transmit(&huart1, "n3v3_MON", 8, 100);
 80032e8:	49a6      	ldr	r1, [pc, #664]	; (8003584 <HAL_UART_RxCpltCallback+0xa68>)
 80032ea:	48a7      	ldr	r0, [pc, #668]	; (8003588 <HAL_UART_RxCpltCallback+0xa6c>)
 80032ec:	2364      	movs	r3, #100	; 0x64
 80032ee:	2208      	movs	r2, #8
 80032f0:	f003 fc90 	bl	8006c14 <HAL_UART_Transmit>
					if (voltage > -3.4 && voltage < -3.2) {
 80032f4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80032f6:	f7ff fb23 	bl	8002940 <__aeabi_f2d>
 80032fa:	4aa4      	ldr	r2, [pc, #656]	; (800358c <HAL_UART_RxCpltCallback+0xa70>)
 80032fc:	4ba4      	ldr	r3, [pc, #656]	; (8003590 <HAL_UART_RxCpltCallback+0xa74>)
 80032fe:	f7fd f8bf 	bl	8000480 <__aeabi_dcmpgt>
 8003302:	1e03      	subs	r3, r0, #0
 8003304:	d00e      	beq.n	8003324 <HAL_UART_RxCpltCallback+0x808>
 8003306:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003308:	f7ff fb1a 	bl	8002940 <__aeabi_f2d>
 800330c:	4aa1      	ldr	r2, [pc, #644]	; (8003594 <HAL_UART_RxCpltCallback+0xa78>)
 800330e:	4ba2      	ldr	r3, [pc, #648]	; (8003598 <HAL_UART_RxCpltCallback+0xa7c>)
 8003310:	f7fd f8a2 	bl	8000458 <__aeabi_dcmplt>
 8003314:	1e03      	subs	r3, r0, #0
 8003316:	d005      	beq.n	8003324 <HAL_UART_RxCpltCallback+0x808>
						gpio_flags[i] = 1;
 8003318:	4b96      	ldr	r3, [pc, #600]	; (8003574 <HAL_UART_RxCpltCallback+0xa58>)
 800331a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800331c:	0092      	lsls	r2, r2, #2
 800331e:	2101      	movs	r1, #1
 8003320:	50d1      	str	r1, [r2, r3]
 8003322:	e15c      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					} else if (voltage != 0) {
 8003324:	2100      	movs	r1, #0
 8003326:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003328:	f7fd f8ca 	bl	80004c0 <__aeabi_fcmpeq>
 800332c:	1e03      	subs	r3, r0, #0
 800332e:	d000      	beq.n	8003332 <HAL_UART_RxCpltCallback+0x816>
 8003330:	e155      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
						gpio_flags[i] = 0;
 8003332:	4b90      	ldr	r3, [pc, #576]	; (8003574 <HAL_UART_RxCpltCallback+0xa58>)
 8003334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003336:	0092      	lsls	r2, r2, #2
 8003338:	2100      	movs	r1, #0
 800333a:	50d1      	str	r1, [r2, r3]
 800333c:	e14f      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					}
				} else if (i == 11) {
 800333e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003340:	2b0b      	cmp	r3, #11
 8003342:	d146      	bne.n	80033d2 <HAL_UART_RxCpltCallback+0x8b6>
					float voltage = adc * (3.3 / 4095);
 8003344:	2356      	movs	r3, #86	; 0x56
 8003346:	18fb      	adds	r3, r7, r3
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	0018      	movs	r0, r3
 800334c:	f7ff faa2 	bl	8002894 <__aeabi_i2d>
 8003350:	4a89      	ldr	r2, [pc, #548]	; (8003578 <HAL_UART_RxCpltCallback+0xa5c>)
 8003352:	4b8a      	ldr	r3, [pc, #552]	; (800357c <HAL_UART_RxCpltCallback+0xa60>)
 8003354:	f7fe fc4c 	bl	8001bf0 <__aeabi_dmul>
 8003358:	0002      	movs	r2, r0
 800335a:	000b      	movs	r3, r1
 800335c:	0010      	movs	r0, r2
 800335e:	0019      	movs	r1, r3
 8003360:	f7ff fb36 	bl	80029d0 <__aeabi_d2f>
 8003364:	1c03      	adds	r3, r0, #0
 8003366:	647b      	str	r3, [r7, #68]	; 0x44
//					 voltage *= -50;
					sprintf(value, "%f", voltage);
 8003368:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800336a:	f7ff fae9 	bl	8002940 <__aeabi_f2d>
 800336e:	0002      	movs	r2, r0
 8003370:	000b      	movs	r3, r1
 8003372:	4983      	ldr	r1, [pc, #524]	; (8003580 <HAL_UART_RxCpltCallback+0xa64>)
 8003374:	200c      	movs	r0, #12
 8003376:	1838      	adds	r0, r7, r0
 8003378:	f005 fca6 	bl	8008cc8 <siprintf>
					HAL_UART_Transmit(&huart1, "n150v_MON", 9, 100);
 800337c:	4987      	ldr	r1, [pc, #540]	; (800359c <HAL_UART_RxCpltCallback+0xa80>)
 800337e:	4882      	ldr	r0, [pc, #520]	; (8003588 <HAL_UART_RxCpltCallback+0xa6c>)
 8003380:	2364      	movs	r3, #100	; 0x64
 8003382:	2209      	movs	r2, #9
 8003384:	f003 fc46 	bl	8006c14 <HAL_UART_Transmit>
					if (voltage > -150.1 && voltage < -149.9) {
 8003388:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800338a:	f7ff fad9 	bl	8002940 <__aeabi_f2d>
 800338e:	4a7f      	ldr	r2, [pc, #508]	; (800358c <HAL_UART_RxCpltCallback+0xa70>)
 8003390:	4b83      	ldr	r3, [pc, #524]	; (80035a0 <HAL_UART_RxCpltCallback+0xa84>)
 8003392:	f7fd f875 	bl	8000480 <__aeabi_dcmpgt>
 8003396:	1e03      	subs	r3, r0, #0
 8003398:	d00e      	beq.n	80033b8 <HAL_UART_RxCpltCallback+0x89c>
 800339a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800339c:	f7ff fad0 	bl	8002940 <__aeabi_f2d>
 80033a0:	4a80      	ldr	r2, [pc, #512]	; (80035a4 <HAL_UART_RxCpltCallback+0xa88>)
 80033a2:	4b81      	ldr	r3, [pc, #516]	; (80035a8 <HAL_UART_RxCpltCallback+0xa8c>)
 80033a4:	f7fd f858 	bl	8000458 <__aeabi_dcmplt>
 80033a8:	1e03      	subs	r3, r0, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_UART_RxCpltCallback+0x89c>
						gpio_flags[i] = 1;
 80033ac:	4b71      	ldr	r3, [pc, #452]	; (8003574 <HAL_UART_RxCpltCallback+0xa58>)
 80033ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033b0:	0092      	lsls	r2, r2, #2
 80033b2:	2101      	movs	r1, #1
 80033b4:	50d1      	str	r1, [r2, r3]
 80033b6:	e112      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					} else if (voltage != 0) {
 80033b8:	2100      	movs	r1, #0
 80033ba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80033bc:	f7fd f880 	bl	80004c0 <__aeabi_fcmpeq>
 80033c0:	1e03      	subs	r3, r0, #0
 80033c2:	d000      	beq.n	80033c6 <HAL_UART_RxCpltCallback+0x8aa>
 80033c4:	e10b      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
						gpio_flags[i] = 0;
 80033c6:	4b6b      	ldr	r3, [pc, #428]	; (8003574 <HAL_UART_RxCpltCallback+0xa58>)
 80033c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033ca:	0092      	lsls	r2, r2, #2
 80033cc:	2100      	movs	r1, #0
 80033ce:	50d1      	str	r1, [r2, r3]
 80033d0:	e105      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					}

				} else if (i == 12) {
 80033d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033d4:	2b0c      	cmp	r3, #12
 80033d6:	d146      	bne.n	8003466 <HAL_UART_RxCpltCallback+0x94a>
					float voltage = adc * (3.3 / 4095);
 80033d8:	2356      	movs	r3, #86	; 0x56
 80033da:	18fb      	adds	r3, r7, r3
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	0018      	movs	r0, r3
 80033e0:	f7ff fa58 	bl	8002894 <__aeabi_i2d>
 80033e4:	4a64      	ldr	r2, [pc, #400]	; (8003578 <HAL_UART_RxCpltCallback+0xa5c>)
 80033e6:	4b65      	ldr	r3, [pc, #404]	; (800357c <HAL_UART_RxCpltCallback+0xa60>)
 80033e8:	f7fe fc02 	bl	8001bf0 <__aeabi_dmul>
 80033ec:	0002      	movs	r2, r0
 80033ee:	000b      	movs	r3, r1
 80033f0:	0010      	movs	r0, r2
 80033f2:	0019      	movs	r1, r3
 80033f4:	f7ff faec 	bl	80029d0 <__aeabi_d2f>
 80033f8:	1c03      	adds	r3, r0, #0
 80033fa:	64bb      	str	r3, [r7, #72]	; 0x48
//					 voltage *= 5;
					sprintf(value, "%f", voltage);
 80033fc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80033fe:	f7ff fa9f 	bl	8002940 <__aeabi_f2d>
 8003402:	0002      	movs	r2, r0
 8003404:	000b      	movs	r3, r1
 8003406:	495e      	ldr	r1, [pc, #376]	; (8003580 <HAL_UART_RxCpltCallback+0xa64>)
 8003408:	200c      	movs	r0, #12
 800340a:	1838      	adds	r0, r7, r0
 800340c:	f005 fc5c 	bl	8008cc8 <siprintf>
					HAL_UART_Transmit(&huart1, "15v_MON", 7, 100);
 8003410:	4966      	ldr	r1, [pc, #408]	; (80035ac <HAL_UART_RxCpltCallback+0xa90>)
 8003412:	485d      	ldr	r0, [pc, #372]	; (8003588 <HAL_UART_RxCpltCallback+0xa6c>)
 8003414:	2364      	movs	r3, #100	; 0x64
 8003416:	2207      	movs	r2, #7
 8003418:	f003 fbfc 	bl	8006c14 <HAL_UART_Transmit>
					if (voltage < 15.1 && voltage > 14.9) {
 800341c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800341e:	f7ff fa8f 	bl	8002940 <__aeabi_f2d>
 8003422:	4a5a      	ldr	r2, [pc, #360]	; (800358c <HAL_UART_RxCpltCallback+0xa70>)
 8003424:	4b62      	ldr	r3, [pc, #392]	; (80035b0 <HAL_UART_RxCpltCallback+0xa94>)
 8003426:	f7fd f817 	bl	8000458 <__aeabi_dcmplt>
 800342a:	1e03      	subs	r3, r0, #0
 800342c:	d00e      	beq.n	800344c <HAL_UART_RxCpltCallback+0x930>
 800342e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003430:	f7ff fa86 	bl	8002940 <__aeabi_f2d>
 8003434:	4a5b      	ldr	r2, [pc, #364]	; (80035a4 <HAL_UART_RxCpltCallback+0xa88>)
 8003436:	4b5f      	ldr	r3, [pc, #380]	; (80035b4 <HAL_UART_RxCpltCallback+0xa98>)
 8003438:	f7fd f822 	bl	8000480 <__aeabi_dcmpgt>
 800343c:	1e03      	subs	r3, r0, #0
 800343e:	d005      	beq.n	800344c <HAL_UART_RxCpltCallback+0x930>
						gpio_flags[i] = 1;
 8003440:	4b4c      	ldr	r3, [pc, #304]	; (8003574 <HAL_UART_RxCpltCallback+0xa58>)
 8003442:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003444:	0092      	lsls	r2, r2, #2
 8003446:	2101      	movs	r1, #1
 8003448:	50d1      	str	r1, [r2, r3]
 800344a:	e0c8      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					} else if (voltage != 0) {
 800344c:	2100      	movs	r1, #0
 800344e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003450:	f7fd f836 	bl	80004c0 <__aeabi_fcmpeq>
 8003454:	1e03      	subs	r3, r0, #0
 8003456:	d000      	beq.n	800345a <HAL_UART_RxCpltCallback+0x93e>
 8003458:	e0c1      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
						gpio_flags[i] = 0;
 800345a:	4b46      	ldr	r3, [pc, #280]	; (8003574 <HAL_UART_RxCpltCallback+0xa58>)
 800345c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800345e:	0092      	lsls	r2, r2, #2
 8003460:	2100      	movs	r1, #0
 8003462:	50d1      	str	r1, [r2, r3]
 8003464:	e0bb      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					}

				} else if (i == 13) { // for i = 13 you read the internal temperature
 8003466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003468:	2b0d      	cmp	r3, #13
 800346a:	d146      	bne.n	80034fa <HAL_UART_RxCpltCallback+0x9de>
					// Should be 1.5ish for our actual Signal Board
					float voltage = adc * (3.3 / 4095);
 800346c:	2356      	movs	r3, #86	; 0x56
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	0018      	movs	r0, r3
 8003474:	f7ff fa0e 	bl	8002894 <__aeabi_i2d>
 8003478:	4a3f      	ldr	r2, [pc, #252]	; (8003578 <HAL_UART_RxCpltCallback+0xa5c>)
 800347a:	4b40      	ldr	r3, [pc, #256]	; (800357c <HAL_UART_RxCpltCallback+0xa60>)
 800347c:	f7fe fbb8 	bl	8001bf0 <__aeabi_dmul>
 8003480:	0002      	movs	r2, r0
 8003482:	000b      	movs	r3, r1
 8003484:	0010      	movs	r0, r2
 8003486:	0019      	movs	r1, r3
 8003488:	f7ff faa2 	bl	80029d0 <__aeabi_d2f>
 800348c:	1c03      	adds	r3, r0, #0
 800348e:	64fb      	str	r3, [r7, #76]	; 0x4c
					sprintf(value, "%f", voltage);
 8003490:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003492:	f7ff fa55 	bl	8002940 <__aeabi_f2d>
 8003496:	0002      	movs	r2, r0
 8003498:	000b      	movs	r3, r1
 800349a:	4939      	ldr	r1, [pc, #228]	; (8003580 <HAL_UART_RxCpltCallback+0xa64>)
 800349c:	200c      	movs	r0, #12
 800349e:	1838      	adds	r0, r7, r0
 80034a0:	f005 fc12 	bl	8008cc8 <siprintf>
					HAL_UART_Transmit(&huart1, "TMPSENSE", 8, 100);
 80034a4:	4944      	ldr	r1, [pc, #272]	; (80035b8 <HAL_UART_RxCpltCallback+0xa9c>)
 80034a6:	4838      	ldr	r0, [pc, #224]	; (8003588 <HAL_UART_RxCpltCallback+0xa6c>)
 80034a8:	2364      	movs	r3, #100	; 0x64
 80034aa:	2208      	movs	r2, #8
 80034ac:	f003 fbb2 	bl	8006c14 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 80034b0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80034b2:	f7ff fa45 	bl	8002940 <__aeabi_f2d>
 80034b6:	4a35      	ldr	r2, [pc, #212]	; (800358c <HAL_UART_RxCpltCallback+0xa70>)
 80034b8:	4b40      	ldr	r3, [pc, #256]	; (80035bc <HAL_UART_RxCpltCallback+0xaa0>)
 80034ba:	f7fc ffcd 	bl	8000458 <__aeabi_dcmplt>
 80034be:	1e03      	subs	r3, r0, #0
 80034c0:	d00e      	beq.n	80034e0 <HAL_UART_RxCpltCallback+0x9c4>
 80034c2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80034c4:	f7ff fa3c 	bl	8002940 <__aeabi_f2d>
 80034c8:	4a32      	ldr	r2, [pc, #200]	; (8003594 <HAL_UART_RxCpltCallback+0xa78>)
 80034ca:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <HAL_UART_RxCpltCallback+0xaa4>)
 80034cc:	f7fc ffd8 	bl	8000480 <__aeabi_dcmpgt>
 80034d0:	1e03      	subs	r3, r0, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_UART_RxCpltCallback+0x9c4>
						gpio_flags[i] = 1;
 80034d4:	4b27      	ldr	r3, [pc, #156]	; (8003574 <HAL_UART_RxCpltCallback+0xa58>)
 80034d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034d8:	0092      	lsls	r2, r2, #2
 80034da:	2101      	movs	r1, #1
 80034dc:	50d1      	str	r1, [r2, r3]
 80034de:	e07e      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					} else if (voltage != 0) {
 80034e0:	2100      	movs	r1, #0
 80034e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80034e4:	f7fc ffec 	bl	80004c0 <__aeabi_fcmpeq>
 80034e8:	1e03      	subs	r3, r0, #0
 80034ea:	d000      	beq.n	80034ee <HAL_UART_RxCpltCallback+0x9d2>
 80034ec:	e077      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
						gpio_flags[i] = 0;
 80034ee:	4b21      	ldr	r3, [pc, #132]	; (8003574 <HAL_UART_RxCpltCallback+0xa58>)
 80034f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034f2:	0092      	lsls	r2, r2, #2
 80034f4:	2100      	movs	r1, #0
 80034f6:	50d1      	str	r1, [r2, r3]
 80034f8:	e071      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					}

				} else if (i == 14) { // for i = 14 you read the internal voltage
 80034fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034fc:	2b0e      	cmp	r3, #14
 80034fe:	d16e      	bne.n	80035de <HAL_UART_RxCpltCallback+0xac2>
					// Should be 3.3 for our actual Signal Board
					float voltage = adc * (3.3 / 4095);
 8003500:	2356      	movs	r3, #86	; 0x56
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	0018      	movs	r0, r3
 8003508:	f7ff f9c4 	bl	8002894 <__aeabi_i2d>
 800350c:	4a1a      	ldr	r2, [pc, #104]	; (8003578 <HAL_UART_RxCpltCallback+0xa5c>)
 800350e:	4b1b      	ldr	r3, [pc, #108]	; (800357c <HAL_UART_RxCpltCallback+0xa60>)
 8003510:	f7fe fb6e 	bl	8001bf0 <__aeabi_dmul>
 8003514:	0002      	movs	r2, r0
 8003516:	000b      	movs	r3, r1
 8003518:	0010      	movs	r0, r2
 800351a:	0019      	movs	r1, r3
 800351c:	f7ff fa58 	bl	80029d0 <__aeabi_d2f>
 8003520:	1c03      	adds	r3, r0, #0
 8003522:	653b      	str	r3, [r7, #80]	; 0x50
					sprintf(value, "%f", voltage);
 8003524:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003526:	f7ff fa0b 	bl	8002940 <__aeabi_f2d>
 800352a:	0002      	movs	r2, r0
 800352c:	000b      	movs	r3, r1
 800352e:	4914      	ldr	r1, [pc, #80]	; (8003580 <HAL_UART_RxCpltCallback+0xa64>)
 8003530:	200c      	movs	r0, #12
 8003532:	1838      	adds	r0, r7, r0
 8003534:	f005 fbc8 	bl	8008cc8 <siprintf>
					HAL_UART_Transmit(&huart1, "VREFINT", 7, 100);
 8003538:	4922      	ldr	r1, [pc, #136]	; (80035c4 <HAL_UART_RxCpltCallback+0xaa8>)
 800353a:	4813      	ldr	r0, [pc, #76]	; (8003588 <HAL_UART_RxCpltCallback+0xa6c>)
 800353c:	2364      	movs	r3, #100	; 0x64
 800353e:	2207      	movs	r2, #7
 8003540:	f003 fb68 	bl	8006c14 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8003544:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003546:	f7ff f9fb 	bl	8002940 <__aeabi_f2d>
 800354a:	4a10      	ldr	r2, [pc, #64]	; (800358c <HAL_UART_RxCpltCallback+0xa70>)
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <HAL_UART_RxCpltCallback+0xaa0>)
 800354e:	f7fc ff83 	bl	8000458 <__aeabi_dcmplt>
 8003552:	1e03      	subs	r3, r0, #0
 8003554:	d038      	beq.n	80035c8 <HAL_UART_RxCpltCallback+0xaac>
 8003556:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003558:	f7ff f9f2 	bl	8002940 <__aeabi_f2d>
 800355c:	4a0d      	ldr	r2, [pc, #52]	; (8003594 <HAL_UART_RxCpltCallback+0xa78>)
 800355e:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <HAL_UART_RxCpltCallback+0xaa4>)
 8003560:	f7fc ff8e 	bl	8000480 <__aeabi_dcmpgt>
 8003564:	1e03      	subs	r3, r0, #0
 8003566:	d02f      	beq.n	80035c8 <HAL_UART_RxCpltCallback+0xaac>
						gpio_flags[i] = 1;
 8003568:	4b02      	ldr	r3, [pc, #8]	; (8003574 <HAL_UART_RxCpltCallback+0xa58>)
 800356a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800356c:	0092      	lsls	r2, r2, #2
 800356e:	2101      	movs	r1, #1
 8003570:	50d1      	str	r1, [r2, r3]
 8003572:	e034      	b.n	80035de <HAL_UART_RxCpltCallback+0xac2>
 8003574:	20000424 	.word	0x20000424
 8003578:	e734d9b4 	.word	0xe734d9b4
 800357c:	3f4a680c 	.word	0x3f4a680c
 8003580:	0800ca6c 	.word	0x0800ca6c
 8003584:	0800cab4 	.word	0x0800cab4
 8003588:	200002f0 	.word	0x200002f0
 800358c:	33333333 	.word	0x33333333
 8003590:	c00b3333 	.word	0xc00b3333
 8003594:	9999999a 	.word	0x9999999a
 8003598:	c0099999 	.word	0xc0099999
 800359c:	0800ca88 	.word	0x0800ca88
 80035a0:	c062c333 	.word	0xc062c333
 80035a4:	cccccccd 	.word	0xcccccccd
 80035a8:	c062bccc 	.word	0xc062bccc
 80035ac:	0800cac0 	.word	0x0800cac0
 80035b0:	402e3333 	.word	0x402e3333
 80035b4:	402dcccc 	.word	0x402dcccc
 80035b8:	0800cac8 	.word	0x0800cac8
 80035bc:	400b3333 	.word	0x400b3333
 80035c0:	40099999 	.word	0x40099999
 80035c4:	0800cad4 	.word	0x0800cad4
					} else if (voltage != 0) {
 80035c8:	2100      	movs	r1, #0
 80035ca:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80035cc:	f7fc ff78 	bl	80004c0 <__aeabi_fcmpeq>
 80035d0:	1e03      	subs	r3, r0, #0
 80035d2:	d104      	bne.n	80035de <HAL_UART_RxCpltCallback+0xac2>
						gpio_flags[i] = 0;
 80035d4:	4bd6      	ldr	r3, [pc, #856]	; (8003930 <HAL_UART_RxCpltCallback+0xe14>)
 80035d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035d8:	0092      	lsls	r2, r2, #2
 80035da:	2100      	movs	r1, #0
 80035dc:	50d1      	str	r1, [r2, r3]
					}

				}

				HAL_UART_Transmit(&huart1, ": ", 2, 100);
 80035de:	49d5      	ldr	r1, [pc, #852]	; (8003934 <HAL_UART_RxCpltCallback+0xe18>)
 80035e0:	48d5      	ldr	r0, [pc, #852]	; (8003938 <HAL_UART_RxCpltCallback+0xe1c>)
 80035e2:	2364      	movs	r3, #100	; 0x64
 80035e4:	2202      	movs	r2, #2
 80035e6:	f003 fb15 	bl	8006c14 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, value, 8, 100);
 80035ea:	230c      	movs	r3, #12
 80035ec:	18f9      	adds	r1, r7, r3
 80035ee:	48d2      	ldr	r0, [pc, #840]	; (8003938 <HAL_UART_RxCpltCallback+0xe1c>)
 80035f0:	2364      	movs	r3, #100	; 0x64
 80035f2:	2208      	movs	r2, #8
 80035f4:	f003 fb0e 	bl	8006c14 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 80035f8:	49d0      	ldr	r1, [pc, #832]	; (800393c <HAL_UART_RxCpltCallback+0xe20>)
 80035fa:	48cf      	ldr	r0, [pc, #828]	; (8003938 <HAL_UART_RxCpltCallback+0xe1c>)
 80035fc:	2364      	movs	r3, #100	; 0x64
 80035fe:	2202      	movs	r2, #2
 8003600:	f003 fb08 	bl	8006c14 <HAL_UART_Transmit>
			for (int i = 0; i < adcChannelCount; i++) {
 8003604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003606:	3301      	adds	r3, #1
 8003608:	65bb      	str	r3, [r7, #88]	; 0x58
 800360a:	220f      	movs	r2, #15
 800360c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800360e:	4293      	cmp	r3, r2
 8003610:	da01      	bge.n	8003616 <HAL_UART_RxCpltCallback+0xafa>
 8003612:	f7ff fae2 	bl	8002bda <HAL_UART_RxCpltCallback+0xbe>

			}


			HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8003616:	49c9      	ldr	r1, [pc, #804]	; (800393c <HAL_UART_RxCpltCallback+0xe20>)
 8003618:	48c7      	ldr	r0, [pc, #796]	; (8003938 <HAL_UART_RxCpltCallback+0xe1c>)
 800361a:	2364      	movs	r3, #100	; 0x64
 800361c:	2202      	movs	r2, #2
 800361e:	f003 faf9 	bl	8006c14 <HAL_UART_Transmit>

			// Changing to the next GPIO
			if (HAL_GPIO_ReadPin(gpios[gpio_count].gpio, gpios[gpio_count].pin)
 8003622:	4bc7      	ldr	r3, [pc, #796]	; (8003940 <HAL_UART_RxCpltCallback+0xe24>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	4bc7      	ldr	r3, [pc, #796]	; (8003944 <HAL_UART_RxCpltCallback+0xe28>)
 8003628:	00d2      	lsls	r2, r2, #3
 800362a:	58d0      	ldr	r0, [r2, r3]
 800362c:	4bc4      	ldr	r3, [pc, #784]	; (8003940 <HAL_UART_RxCpltCallback+0xe24>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4ac4      	ldr	r2, [pc, #784]	; (8003944 <HAL_UART_RxCpltCallback+0xe28>)
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	18d3      	adds	r3, r2, r3
 8003636:	3304      	adds	r3, #4
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	0019      	movs	r1, r3
 800363c:	f001 ffc0 	bl	80055c0 <HAL_GPIO_ReadPin>
 8003640:	0003      	movs	r3, r0
 8003642:	2b01      	cmp	r3, #1
 8003644:	d10f      	bne.n	8003666 <HAL_UART_RxCpltCallback+0xb4a>
					== GPIO_PIN_SET) {
				HAL_GPIO_WritePin(gpios[gpio_count].gpio, gpios[gpio_count].pin,
 8003646:	4bbe      	ldr	r3, [pc, #760]	; (8003940 <HAL_UART_RxCpltCallback+0xe24>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4bbe      	ldr	r3, [pc, #760]	; (8003944 <HAL_UART_RxCpltCallback+0xe28>)
 800364c:	00d2      	lsls	r2, r2, #3
 800364e:	58d0      	ldr	r0, [r2, r3]
 8003650:	4bbb      	ldr	r3, [pc, #748]	; (8003940 <HAL_UART_RxCpltCallback+0xe24>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4abb      	ldr	r2, [pc, #748]	; (8003944 <HAL_UART_RxCpltCallback+0xe28>)
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	18d3      	adds	r3, r2, r3
 800365a:	3304      	adds	r3, #4
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	2200      	movs	r2, #0
 8003660:	0019      	movs	r1, r3
 8003662:	f001 ffca 	bl	80055fa <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
			}

			gpio_count == num_gpios ? gpio_count = 0 : gpio_count++;
 8003666:	4bb6      	ldr	r3, [pc, #728]	; (8003940 <HAL_UART_RxCpltCallback+0xe24>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4bb7      	ldr	r3, [pc, #732]	; (8003948 <HAL_UART_RxCpltCallback+0xe2c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d103      	bne.n	800367a <HAL_UART_RxCpltCallback+0xb5e>
 8003672:	4bb3      	ldr	r3, [pc, #716]	; (8003940 <HAL_UART_RxCpltCallback+0xe24>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	e004      	b.n	8003684 <HAL_UART_RxCpltCallback+0xb68>
 800367a:	4bb1      	ldr	r3, [pc, #708]	; (8003940 <HAL_UART_RxCpltCallback+0xe24>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	4baf      	ldr	r3, [pc, #700]	; (8003940 <HAL_UART_RxCpltCallback+0xe24>)
 8003682:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(gpios[gpio_count].gpio, gpios[gpio_count].pin);
 8003684:	4bae      	ldr	r3, [pc, #696]	; (8003940 <HAL_UART_RxCpltCallback+0xe24>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4bae      	ldr	r3, [pc, #696]	; (8003944 <HAL_UART_RxCpltCallback+0xe28>)
 800368a:	00d2      	lsls	r2, r2, #3
 800368c:	58d0      	ldr	r0, [r2, r3]
 800368e:	4bac      	ldr	r3, [pc, #688]	; (8003940 <HAL_UART_RxCpltCallback+0xe24>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4aac      	ldr	r2, [pc, #688]	; (8003944 <HAL_UART_RxCpltCallback+0xe28>)
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	18d3      	adds	r3, r2, r3
 8003698:	3304      	adds	r3, #4
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	0019      	movs	r1, r3
 800369e:	f001 ffc9 	bl	8005634 <HAL_GPIO_TogglePin>
			if (gpio_flags[gpio_count] == 1) {
			}

			// Tell ADT7410_1 that we want to read from the temperature register
			buf[0] = REG_TEMP;
 80036a2:	2200      	movs	r2, #0
 80036a4:	4ba9      	ldr	r3, [pc, #676]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 80036a6:	701a      	strb	r2, [r3, #0]
			ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1, 1000);
 80036a8:	2394      	movs	r3, #148	; 0x94
 80036aa:	b299      	uxth	r1, r3
 80036ac:	4aa7      	ldr	r2, [pc, #668]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 80036ae:	48a8      	ldr	r0, [pc, #672]	; (8003950 <HAL_UART_RxCpltCallback+0xe34>)
 80036b0:	23fa      	movs	r3, #250	; 0xfa
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	2301      	movs	r3, #1
 80036b8:	f002 f86e 	bl	8005798 <HAL_I2C_Master_Transmit>
 80036bc:	0003      	movs	r3, r0
 80036be:	001a      	movs	r2, r3
 80036c0:	4ba4      	ldr	r3, [pc, #656]	; (8003954 <HAL_UART_RxCpltCallback+0xe38>)
 80036c2:	701a      	strb	r2, [r3, #0]
			//I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
			if (ret != HAL_OK) {
 80036c4:	4ba3      	ldr	r3, [pc, #652]	; (8003954 <HAL_UART_RxCpltCallback+0xe38>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_UART_RxCpltCallback+0xbc2>
				strcpy((char*) buf, "Error Tx\r\n");
 80036cc:	4b9f      	ldr	r3, [pc, #636]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 80036ce:	4aa2      	ldr	r2, [pc, #648]	; (8003958 <HAL_UART_RxCpltCallback+0xe3c>)
 80036d0:	ca03      	ldmia	r2!, {r0, r1}
 80036d2:	c303      	stmia	r3!, {r0, r1}
 80036d4:	8811      	ldrh	r1, [r2, #0]
 80036d6:	8019      	strh	r1, [r3, #0]
 80036d8:	7892      	ldrb	r2, [r2, #2]
 80036da:	709a      	strb	r2, [r3, #2]
 80036dc:	e073      	b.n	80037c6 <HAL_UART_RxCpltCallback+0xcaa>
			} else {

				// Read 2 bytes from the temperature register
				ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2, 1000);
 80036de:	2394      	movs	r3, #148	; 0x94
 80036e0:	b299      	uxth	r1, r3
 80036e2:	4a9a      	ldr	r2, [pc, #616]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 80036e4:	489a      	ldr	r0, [pc, #616]	; (8003950 <HAL_UART_RxCpltCallback+0xe34>)
 80036e6:	23fa      	movs	r3, #250	; 0xfa
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2302      	movs	r3, #2
 80036ee:	f002 f95b 	bl	80059a8 <HAL_I2C_Master_Receive>
 80036f2:	0003      	movs	r3, r0
 80036f4:	001a      	movs	r2, r3
 80036f6:	4b97      	ldr	r3, [pc, #604]	; (8003954 <HAL_UART_RxCpltCallback+0xe38>)
 80036f8:	701a      	strb	r2, [r3, #0]
				if (ret != HAL_OK) {
 80036fa:	4b96      	ldr	r3, [pc, #600]	; (8003954 <HAL_UART_RxCpltCallback+0xe38>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <HAL_UART_RxCpltCallback+0xbf8>
					strcpy((char*) buf, "Error Rx\r\n");
 8003702:	4b92      	ldr	r3, [pc, #584]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 8003704:	4a95      	ldr	r2, [pc, #596]	; (800395c <HAL_UART_RxCpltCallback+0xe40>)
 8003706:	ca03      	ldmia	r2!, {r0, r1}
 8003708:	c303      	stmia	r3!, {r0, r1}
 800370a:	8811      	ldrh	r1, [r2, #0]
 800370c:	8019      	strh	r1, [r3, #0]
 800370e:	7892      	ldrb	r2, [r2, #2]
 8003710:	709a      	strb	r2, [r3, #2]
 8003712:	e058      	b.n	80037c6 <HAL_UART_RxCpltCallback+0xcaa>
				} else {

					val = (int16_t) (buf[0] << 8);
 8003714:	4b8d      	ldr	r3, [pc, #564]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	b21a      	sxth	r2, r3
 800371c:	4b90      	ldr	r3, [pc, #576]	; (8003960 <HAL_UART_RxCpltCallback+0xe44>)
 800371e:	801a      	strh	r2, [r3, #0]
					val = (val | buf[1]) >> 3;
 8003720:	4b8f      	ldr	r3, [pc, #572]	; (8003960 <HAL_UART_RxCpltCallback+0xe44>)
 8003722:	2200      	movs	r2, #0
 8003724:	5e9b      	ldrsh	r3, [r3, r2]
 8003726:	001a      	movs	r2, r3
 8003728:	4b88      	ldr	r3, [pc, #544]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 800372a:	785b      	ldrb	r3, [r3, #1]
 800372c:	4313      	orrs	r3, r2
 800372e:	10db      	asrs	r3, r3, #3
 8003730:	b21a      	sxth	r2, r3
 8003732:	4b8b      	ldr	r3, [pc, #556]	; (8003960 <HAL_UART_RxCpltCallback+0xe44>)
 8003734:	801a      	strh	r2, [r3, #0]

					// Convert to 2's complement, since temperature can be negative
					if (val > 0x7FF) {
 8003736:	4b8a      	ldr	r3, [pc, #552]	; (8003960 <HAL_UART_RxCpltCallback+0xe44>)
 8003738:	2200      	movs	r2, #0
 800373a:	5e9a      	ldrsh	r2, [r3, r2]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	429a      	cmp	r2, r3
 8003742:	db07      	blt.n	8003754 <HAL_UART_RxCpltCallback+0xc38>
						val |= 0xF000;
 8003744:	4b86      	ldr	r3, [pc, #536]	; (8003960 <HAL_UART_RxCpltCallback+0xe44>)
 8003746:	2200      	movs	r2, #0
 8003748:	5e9b      	ldrsh	r3, [r3, r2]
 800374a:	4a86      	ldr	r2, [pc, #536]	; (8003964 <HAL_UART_RxCpltCallback+0xe48>)
 800374c:	4313      	orrs	r3, r2
 800374e:	b21a      	sxth	r2, r3
 8003750:	4b83      	ldr	r3, [pc, #524]	; (8003960 <HAL_UART_RxCpltCallback+0xe44>)
 8003752:	801a      	strh	r2, [r3, #0]
					}

					// Convert to float temperature value (Celsius)
					temp_c = val * 0.0625;
 8003754:	4b82      	ldr	r3, [pc, #520]	; (8003960 <HAL_UART_RxCpltCallback+0xe44>)
 8003756:	2200      	movs	r2, #0
 8003758:	5e9b      	ldrsh	r3, [r3, r2]
 800375a:	0018      	movs	r0, r3
 800375c:	f7ff f89a 	bl	8002894 <__aeabi_i2d>
 8003760:	2200      	movs	r2, #0
 8003762:	4b81      	ldr	r3, [pc, #516]	; (8003968 <HAL_UART_RxCpltCallback+0xe4c>)
 8003764:	f7fe fa44 	bl	8001bf0 <__aeabi_dmul>
 8003768:	0002      	movs	r2, r0
 800376a:	000b      	movs	r3, r1
 800376c:	0010      	movs	r0, r2
 800376e:	0019      	movs	r1, r3
 8003770:	f7ff f92e 	bl	80029d0 <__aeabi_d2f>
 8003774:	1c02      	adds	r2, r0, #0
 8003776:	4b7d      	ldr	r3, [pc, #500]	; (800396c <HAL_UART_RxCpltCallback+0xe50>)
 8003778:	601a      	str	r2, [r3, #0]

					// Convert temperature to decimal value
					temp_c *= 100;
 800377a:	4b7c      	ldr	r3, [pc, #496]	; (800396c <HAL_UART_RxCpltCallback+0xe50>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	497c      	ldr	r1, [pc, #496]	; (8003970 <HAL_UART_RxCpltCallback+0xe54>)
 8003780:	1c18      	adds	r0, r3, #0
 8003782:	f7fd f803 	bl	800078c <__aeabi_fmul>
 8003786:	1c03      	adds	r3, r0, #0
 8003788:	1c1a      	adds	r2, r3, #0
 800378a:	4b78      	ldr	r3, [pc, #480]	; (800396c <HAL_UART_RxCpltCallback+0xe50>)
 800378c:	601a      	str	r2, [r3, #0]

					sprintf((char*) buf, "ADT7410_1: %u.%u C\r\n",
							((unsigned int) temp_c / 100),
 800378e:	4b77      	ldr	r3, [pc, #476]	; (800396c <HAL_UART_RxCpltCallback+0xe50>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	1c18      	adds	r0, r3, #0
 8003794:	f7fc fec2 	bl	800051c <__aeabi_f2uiz>
 8003798:	0003      	movs	r3, r0
					sprintf((char*) buf, "ADT7410_1: %u.%u C\r\n",
 800379a:	2164      	movs	r1, #100	; 0x64
 800379c:	0018      	movs	r0, r3
 800379e:	f7fc fccf 	bl	8000140 <__udivsi3>
 80037a2:	0003      	movs	r3, r0
 80037a4:	001c      	movs	r4, r3
							((unsigned int) temp_c % 100));
 80037a6:	4b71      	ldr	r3, [pc, #452]	; (800396c <HAL_UART_RxCpltCallback+0xe50>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	1c18      	adds	r0, r3, #0
 80037ac:	f7fc feb6 	bl	800051c <__aeabi_f2uiz>
 80037b0:	0003      	movs	r3, r0
					sprintf((char*) buf, "ADT7410_1: %u.%u C\r\n",
 80037b2:	2164      	movs	r1, #100	; 0x64
 80037b4:	0018      	movs	r0, r3
 80037b6:	f7fc fd49 	bl	800024c <__aeabi_uidivmod>
 80037ba:	000b      	movs	r3, r1
 80037bc:	496d      	ldr	r1, [pc, #436]	; (8003974 <HAL_UART_RxCpltCallback+0xe58>)
 80037be:	4863      	ldr	r0, [pc, #396]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 80037c0:	0022      	movs	r2, r4
 80037c2:	f005 fa81 	bl	8008cc8 <siprintf>
				}
			}

			HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), HAL_MAX_DELAY);
 80037c6:	4b61      	ldr	r3, [pc, #388]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7fc fc9d 	bl	8000108 <strlen>
 80037ce:	0003      	movs	r3, r0
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	2301      	movs	r3, #1
 80037d4:	425b      	negs	r3, r3
 80037d6:	495d      	ldr	r1, [pc, #372]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 80037d8:	4857      	ldr	r0, [pc, #348]	; (8003938 <HAL_UART_RxCpltCallback+0xe1c>)
 80037da:	f003 fa1b 	bl	8006c14 <HAL_UART_Transmit>

			// Tell ADT7410_2 that we want to read from the temperature register
			buf[0] = REG_TEMP;
 80037de:	2200      	movs	r2, #0
 80037e0:	4b5a      	ldr	r3, [pc, #360]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 80037e2:	701a      	strb	r2, [r3, #0]
			ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1, 1000);
 80037e4:	2396      	movs	r3, #150	; 0x96
 80037e6:	b299      	uxth	r1, r3
 80037e8:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 80037ea:	4859      	ldr	r0, [pc, #356]	; (8003950 <HAL_UART_RxCpltCallback+0xe34>)
 80037ec:	23fa      	movs	r3, #250	; 0xfa
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	2301      	movs	r3, #1
 80037f4:	f001 ffd0 	bl	8005798 <HAL_I2C_Master_Transmit>
 80037f8:	0003      	movs	r3, r0
 80037fa:	001a      	movs	r2, r3
 80037fc:	4b55      	ldr	r3, [pc, #340]	; (8003954 <HAL_UART_RxCpltCallback+0xe38>)
 80037fe:	701a      	strb	r2, [r3, #0]
			//I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
			if (ret != HAL_OK) {
 8003800:	4b54      	ldr	r3, [pc, #336]	; (8003954 <HAL_UART_RxCpltCallback+0xe38>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_UART_RxCpltCallback+0xcfe>
				strcpy((char*) buf, "Error Tx\r\n");
 8003808:	4b50      	ldr	r3, [pc, #320]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 800380a:	4a53      	ldr	r2, [pc, #332]	; (8003958 <HAL_UART_RxCpltCallback+0xe3c>)
 800380c:	ca03      	ldmia	r2!, {r0, r1}
 800380e:	c303      	stmia	r3!, {r0, r1}
 8003810:	8811      	ldrh	r1, [r2, #0]
 8003812:	8019      	strh	r1, [r3, #0]
 8003814:	7892      	ldrb	r2, [r2, #2]
 8003816:	709a      	strb	r2, [r3, #2]
 8003818:	e073      	b.n	8003902 <HAL_UART_RxCpltCallback+0xde6>
			} else {

				// Read 2 bytes from the temperature register
				ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2, 1000);
 800381a:	2396      	movs	r3, #150	; 0x96
 800381c:	b299      	uxth	r1, r3
 800381e:	4a4b      	ldr	r2, [pc, #300]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 8003820:	484b      	ldr	r0, [pc, #300]	; (8003950 <HAL_UART_RxCpltCallback+0xe34>)
 8003822:	23fa      	movs	r3, #250	; 0xfa
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	2302      	movs	r3, #2
 800382a:	f002 f8bd 	bl	80059a8 <HAL_I2C_Master_Receive>
 800382e:	0003      	movs	r3, r0
 8003830:	001a      	movs	r2, r3
 8003832:	4b48      	ldr	r3, [pc, #288]	; (8003954 <HAL_UART_RxCpltCallback+0xe38>)
 8003834:	701a      	strb	r2, [r3, #0]
				if (ret != HAL_OK) {
 8003836:	4b47      	ldr	r3, [pc, #284]	; (8003954 <HAL_UART_RxCpltCallback+0xe38>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d008      	beq.n	8003850 <HAL_UART_RxCpltCallback+0xd34>
					strcpy((char*) buf, "Error Rx\r\n");
 800383e:	4b43      	ldr	r3, [pc, #268]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 8003840:	4a46      	ldr	r2, [pc, #280]	; (800395c <HAL_UART_RxCpltCallback+0xe40>)
 8003842:	ca03      	ldmia	r2!, {r0, r1}
 8003844:	c303      	stmia	r3!, {r0, r1}
 8003846:	8811      	ldrh	r1, [r2, #0]
 8003848:	8019      	strh	r1, [r3, #0]
 800384a:	7892      	ldrb	r2, [r2, #2]
 800384c:	709a      	strb	r2, [r3, #2]
 800384e:	e058      	b.n	8003902 <HAL_UART_RxCpltCallback+0xde6>
				} else {

					val = (int16_t) (buf[0] << 8);
 8003850:	4b3e      	ldr	r3, [pc, #248]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	b21a      	sxth	r2, r3
 8003858:	4b41      	ldr	r3, [pc, #260]	; (8003960 <HAL_UART_RxCpltCallback+0xe44>)
 800385a:	801a      	strh	r2, [r3, #0]
					val = (val | buf[1]) >> 3;
 800385c:	4b40      	ldr	r3, [pc, #256]	; (8003960 <HAL_UART_RxCpltCallback+0xe44>)
 800385e:	2200      	movs	r2, #0
 8003860:	5e9b      	ldrsh	r3, [r3, r2]
 8003862:	001a      	movs	r2, r3
 8003864:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 8003866:	785b      	ldrb	r3, [r3, #1]
 8003868:	4313      	orrs	r3, r2
 800386a:	10db      	asrs	r3, r3, #3
 800386c:	b21a      	sxth	r2, r3
 800386e:	4b3c      	ldr	r3, [pc, #240]	; (8003960 <HAL_UART_RxCpltCallback+0xe44>)
 8003870:	801a      	strh	r2, [r3, #0]

					// Convert to 2's complement, since temperature can be negative
					if (val > 0x7FF) {
 8003872:	4b3b      	ldr	r3, [pc, #236]	; (8003960 <HAL_UART_RxCpltCallback+0xe44>)
 8003874:	2200      	movs	r2, #0
 8003876:	5e9a      	ldrsh	r2, [r3, r2]
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	429a      	cmp	r2, r3
 800387e:	db07      	blt.n	8003890 <HAL_UART_RxCpltCallback+0xd74>
						val |= 0xF000;
 8003880:	4b37      	ldr	r3, [pc, #220]	; (8003960 <HAL_UART_RxCpltCallback+0xe44>)
 8003882:	2200      	movs	r2, #0
 8003884:	5e9b      	ldrsh	r3, [r3, r2]
 8003886:	4a37      	ldr	r2, [pc, #220]	; (8003964 <HAL_UART_RxCpltCallback+0xe48>)
 8003888:	4313      	orrs	r3, r2
 800388a:	b21a      	sxth	r2, r3
 800388c:	4b34      	ldr	r3, [pc, #208]	; (8003960 <HAL_UART_RxCpltCallback+0xe44>)
 800388e:	801a      	strh	r2, [r3, #0]
					}

					// Convert to float temperature value (Celsius)
					temp_c = val * 0.0625;
 8003890:	4b33      	ldr	r3, [pc, #204]	; (8003960 <HAL_UART_RxCpltCallback+0xe44>)
 8003892:	2200      	movs	r2, #0
 8003894:	5e9b      	ldrsh	r3, [r3, r2]
 8003896:	0018      	movs	r0, r3
 8003898:	f7fe fffc 	bl	8002894 <__aeabi_i2d>
 800389c:	2200      	movs	r2, #0
 800389e:	4b32      	ldr	r3, [pc, #200]	; (8003968 <HAL_UART_RxCpltCallback+0xe4c>)
 80038a0:	f7fe f9a6 	bl	8001bf0 <__aeabi_dmul>
 80038a4:	0002      	movs	r2, r0
 80038a6:	000b      	movs	r3, r1
 80038a8:	0010      	movs	r0, r2
 80038aa:	0019      	movs	r1, r3
 80038ac:	f7ff f890 	bl	80029d0 <__aeabi_d2f>
 80038b0:	1c02      	adds	r2, r0, #0
 80038b2:	4b2e      	ldr	r3, [pc, #184]	; (800396c <HAL_UART_RxCpltCallback+0xe50>)
 80038b4:	601a      	str	r2, [r3, #0]

					// Convert temperature to decimal value
					temp_c *= 100;
 80038b6:	4b2d      	ldr	r3, [pc, #180]	; (800396c <HAL_UART_RxCpltCallback+0xe50>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	492d      	ldr	r1, [pc, #180]	; (8003970 <HAL_UART_RxCpltCallback+0xe54>)
 80038bc:	1c18      	adds	r0, r3, #0
 80038be:	f7fc ff65 	bl	800078c <__aeabi_fmul>
 80038c2:	1c03      	adds	r3, r0, #0
 80038c4:	1c1a      	adds	r2, r3, #0
 80038c6:	4b29      	ldr	r3, [pc, #164]	; (800396c <HAL_UART_RxCpltCallback+0xe50>)
 80038c8:	601a      	str	r2, [r3, #0]

					sprintf((char*) buf, "ADT7410 2: %u.%u C\r\n",
							((unsigned int) temp_c / 100),
 80038ca:	4b28      	ldr	r3, [pc, #160]	; (800396c <HAL_UART_RxCpltCallback+0xe50>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	1c18      	adds	r0, r3, #0
 80038d0:	f7fc fe24 	bl	800051c <__aeabi_f2uiz>
 80038d4:	0003      	movs	r3, r0
					sprintf((char*) buf, "ADT7410 2: %u.%u C\r\n",
 80038d6:	2164      	movs	r1, #100	; 0x64
 80038d8:	0018      	movs	r0, r3
 80038da:	f7fc fc31 	bl	8000140 <__udivsi3>
 80038de:	0003      	movs	r3, r0
 80038e0:	001c      	movs	r4, r3
							((unsigned int) temp_c % 100));
 80038e2:	4b22      	ldr	r3, [pc, #136]	; (800396c <HAL_UART_RxCpltCallback+0xe50>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	1c18      	adds	r0, r3, #0
 80038e8:	f7fc fe18 	bl	800051c <__aeabi_f2uiz>
 80038ec:	0003      	movs	r3, r0
					sprintf((char*) buf, "ADT7410 2: %u.%u C\r\n",
 80038ee:	2164      	movs	r1, #100	; 0x64
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7fc fcab 	bl	800024c <__aeabi_uidivmod>
 80038f6:	000b      	movs	r3, r1
 80038f8:	491f      	ldr	r1, [pc, #124]	; (8003978 <HAL_UART_RxCpltCallback+0xe5c>)
 80038fa:	4814      	ldr	r0, [pc, #80]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 80038fc:	0022      	movs	r2, r4
 80038fe:	f005 f9e3 	bl	8008cc8 <siprintf>
				}
			}

			HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), HAL_MAX_DELAY);
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 8003904:	0018      	movs	r0, r3
 8003906:	f7fc fbff 	bl	8000108 <strlen>
 800390a:	0003      	movs	r3, r0
 800390c:	b29a      	uxth	r2, r3
 800390e:	2301      	movs	r3, #1
 8003910:	425b      	negs	r3, r3
 8003912:	490e      	ldr	r1, [pc, #56]	; (800394c <HAL_UART_RxCpltCallback+0xe30>)
 8003914:	4808      	ldr	r0, [pc, #32]	; (8003938 <HAL_UART_RxCpltCallback+0xe1c>)
 8003916:	f003 f97d 	bl	8006c14 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 800391a:	4908      	ldr	r1, [pc, #32]	; (800393c <HAL_UART_RxCpltCallback+0xe20>)
 800391c:	4806      	ldr	r0, [pc, #24]	; (8003938 <HAL_UART_RxCpltCallback+0xe1c>)
 800391e:	2364      	movs	r3, #100	; 0x64
 8003920:	2202      	movs	r2, #2
 8003922:	f003 f977 	bl	8006c14 <HAL_UART_Transmit>


		}
	}
}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b019      	add	sp, #100	; 0x64
 800392c:	bd90      	pop	{r4, r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	20000424 	.word	0x20000424
 8003934:	0800cadc 	.word	0x0800cadc
 8003938:	200002f0 	.word	0x200002f0
 800393c:	0800ca68 	.word	0x0800ca68
 8003940:	200003e4 	.word	0x200003e4
 8003944:	0800cc08 	.word	0x0800cc08
 8003948:	20000020 	.word	0x20000020
 800394c:	20000378 	.word	0x20000378
 8003950:	200002a4 	.word	0x200002a4
 8003954:	20000374 	.word	0x20000374
 8003958:	0800cae0 	.word	0x0800cae0
 800395c:	0800caec 	.word	0x0800caec
 8003960:	2000037a 	.word	0x2000037a
 8003964:	fffff000 	.word	0xfffff000
 8003968:	3fb00000 	.word	0x3fb00000
 800396c:	2000037c 	.word	0x2000037c
 8003970:	42c80000 	.word	0x42c80000
 8003974:	0800caf8 	.word	0x0800caf8
 8003978:	0800cb10 	.word	0x0800cb10

0800397c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003982:	f000 fd65 	bl	8004450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003986:	f000 f82d 	bl	80039e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800398a:	f000 fa2b 	bl	8003de4 <MX_GPIO_Init>
  MX_DMA_Init();
 800398e:	f000 fa0b 	bl	8003da8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003992:	f000 f9d9 	bl	8003d48 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8003996:	f000 f885 	bl	8003aa4 <MX_ADC_Init>
  MX_I2C1_Init();
 800399a:	f000 f995 	bl	8003cc8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	for (int i = 0; i < 15; i++) {
 800399e:	2300      	movs	r3, #0
 80039a0:	607b      	str	r3, [r7, #4]
 80039a2:	e007      	b.n	80039b4 <main+0x38>
		gpio_flags[i] = 1;
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <main+0x58>)
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	0092      	lsls	r2, r2, #2
 80039aa:	2101      	movs	r1, #1
 80039ac:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < 15; i++) {
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3301      	adds	r3, #1
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b0e      	cmp	r3, #14
 80039b8:	ddf4      	ble.n	80039a4 <main+0x28>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80039ba:	4907      	ldr	r1, [pc, #28]	; (80039d8 <main+0x5c>)
 80039bc:	4b07      	ldr	r3, [pc, #28]	; (80039dc <main+0x60>)
 80039be:	2201      	movs	r2, #1
 80039c0:	0018      	movs	r0, r3
 80039c2:	f003 f9d0 	bl	8006d66 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <main+0x64>)
 80039c8:	2140      	movs	r1, #64	; 0x40
 80039ca:	2201      	movs	r2, #1
 80039cc:	0018      	movs	r0, r3
 80039ce:	f001 fe14 	bl	80055fa <HAL_GPIO_WritePin>

	/* USER CODE BEGIN WHILE */
	while (1) {
 80039d2:	e7fe      	b.n	80039d2 <main+0x56>
 80039d4:	20000424 	.word	0x20000424
 80039d8:	20000380 	.word	0x20000380
 80039dc:	200002f0 	.word	0x200002f0
 80039e0:	48000400 	.word	0x48000400

080039e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b097      	sub	sp, #92	; 0x5c
 80039e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039ea:	2428      	movs	r4, #40	; 0x28
 80039ec:	193b      	adds	r3, r7, r4
 80039ee:	0018      	movs	r0, r3
 80039f0:	2330      	movs	r3, #48	; 0x30
 80039f2:	001a      	movs	r2, r3
 80039f4:	2100      	movs	r1, #0
 80039f6:	f004 fae5 	bl	8007fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039fa:	2318      	movs	r3, #24
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	0018      	movs	r0, r3
 8003a00:	2310      	movs	r3, #16
 8003a02:	001a      	movs	r2, r3
 8003a04:	2100      	movs	r1, #0
 8003a06:	f004 fadd 	bl	8007fc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	2314      	movs	r3, #20
 8003a10:	001a      	movs	r2, r3
 8003a12:	2100      	movs	r1, #0
 8003a14:	f004 fad6 	bl	8007fc4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8003a18:	0021      	movs	r1, r4
 8003a1a:	187b      	adds	r3, r7, r1
 8003a1c:	2212      	movs	r2, #18
 8003a1e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a20:	187b      	adds	r3, r7, r1
 8003a22:	2201      	movs	r2, #1
 8003a24:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003a26:	187b      	adds	r3, r7, r1
 8003a28:	2201      	movs	r2, #1
 8003a2a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a2c:	187b      	adds	r3, r7, r1
 8003a2e:	2210      	movs	r2, #16
 8003a30:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003a32:	187b      	adds	r3, r7, r1
 8003a34:	2210      	movs	r2, #16
 8003a36:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003a38:	187b      	adds	r3, r7, r1
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a3e:	187b      	adds	r3, r7, r1
 8003a40:	0018      	movs	r0, r3
 8003a42:	f002 fb49 	bl	80060d8 <HAL_RCC_OscConfig>
 8003a46:	1e03      	subs	r3, r0, #0
 8003a48:	d001      	beq.n	8003a4e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003a4a:	f000 fa65 	bl	8003f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a4e:	2118      	movs	r1, #24
 8003a50:	187b      	adds	r3, r7, r1
 8003a52:	2207      	movs	r2, #7
 8003a54:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003a56:	187b      	adds	r3, r7, r1
 8003a58:	2200      	movs	r2, #0
 8003a5a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a5c:	187b      	adds	r3, r7, r1
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a62:	187b      	adds	r3, r7, r1
 8003a64:	2200      	movs	r2, #0
 8003a66:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003a68:	187b      	adds	r3, r7, r1
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f002 fe4d 	bl	800670c <HAL_RCC_ClockConfig>
 8003a72:	1e03      	subs	r3, r0, #0
 8003a74:	d001      	beq.n	8003a7a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003a76:	f000 fa4f 	bl	8003f18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003a7a:	1d3b      	adds	r3, r7, #4
 8003a7c:	2221      	movs	r2, #33	; 0x21
 8003a7e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003a80:	1d3b      	adds	r3, r7, #4
 8003a82:	2200      	movs	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	2200      	movs	r2, #0
 8003a8a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f002 ff8e 	bl	80069b0 <HAL_RCCEx_PeriphCLKConfig>
 8003a94:	1e03      	subs	r3, r0, #0
 8003a96:	d001      	beq.n	8003a9c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003a98:	f000 fa3e 	bl	8003f18 <Error_Handler>
  }
}
 8003a9c:	46c0      	nop			; (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b017      	add	sp, #92	; 0x5c
 8003aa2:	bd90      	pop	{r4, r7, pc}

08003aa4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	0018      	movs	r0, r3
 8003aae:	230c      	movs	r3, #12
 8003ab0:	001a      	movs	r2, r3
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	f004 fa86 	bl	8007fc4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003ab8:	4b81      	ldr	r3, [pc, #516]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003aba:	4a82      	ldr	r2, [pc, #520]	; (8003cc4 <MX_ADC_Init+0x220>)
 8003abc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003abe:	4b80      	ldr	r3, [pc, #512]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003ac4:	4b7e      	ldr	r3, [pc, #504]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003aca:	4b7d      	ldr	r3, [pc, #500]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003ad0:	4b7b      	ldr	r3, [pc, #492]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003ad6:	4b7a      	ldr	r3, [pc, #488]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003ad8:	2204      	movs	r2, #4
 8003ada:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003adc:	4b78      	ldr	r3, [pc, #480]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003ae2:	4b77      	ldr	r3, [pc, #476]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003ae8:	4b75      	ldr	r3, [pc, #468]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003aee:	4b74      	ldr	r3, [pc, #464]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003af4:	4b72      	ldr	r3, [pc, #456]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003af6:	22c2      	movs	r2, #194	; 0xc2
 8003af8:	32ff      	adds	r2, #255	; 0xff
 8003afa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003afc:	4b70      	ldr	r3, [pc, #448]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003b02:	4b6f      	ldr	r3, [pc, #444]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003b04:	2224      	movs	r2, #36	; 0x24
 8003b06:	2100      	movs	r1, #0
 8003b08:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003b0a:	4b6d      	ldr	r3, [pc, #436]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003b10:	4b6b      	ldr	r3, [pc, #428]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003b12:	0018      	movs	r0, r3
 8003b14:	f000 fd00 	bl	8004518 <HAL_ADC_Init>
 8003b18:	1e03      	subs	r3, r0, #0
 8003b1a:	d001      	beq.n	8003b20 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003b1c:	f000 f9fc 	bl	8003f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003b20:	1d3b      	adds	r3, r7, #4
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003b26:	1d3b      	adds	r3, r7, #4
 8003b28:	2280      	movs	r2, #128	; 0x80
 8003b2a:	0152      	lsls	r2, r2, #5
 8003b2c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003b2e:	1d3b      	adds	r3, r7, #4
 8003b30:	2280      	movs	r2, #128	; 0x80
 8003b32:	0552      	lsls	r2, r2, #21
 8003b34:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003b36:	1d3a      	adds	r2, r7, #4
 8003b38:	4b61      	ldr	r3, [pc, #388]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003b3a:	0011      	movs	r1, r2
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f000 fec5 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003b42:	1e03      	subs	r3, r0, #0
 8003b44:	d001      	beq.n	8003b4a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8003b46:	f000 f9e7 	bl	8003f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003b4a:	1d3b      	adds	r3, r7, #4
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003b50:	1d3a      	adds	r2, r7, #4
 8003b52:	4b5b      	ldr	r3, [pc, #364]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003b54:	0011      	movs	r1, r2
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 feb8 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003b5c:	1e03      	subs	r3, r0, #0
 8003b5e:	d001      	beq.n	8003b64 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8003b60:	f000 f9da 	bl	8003f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003b64:	1d3b      	adds	r3, r7, #4
 8003b66:	2202      	movs	r2, #2
 8003b68:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003b6a:	1d3a      	adds	r2, r7, #4
 8003b6c:	4b54      	ldr	r3, [pc, #336]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003b6e:	0011      	movs	r1, r2
 8003b70:	0018      	movs	r0, r3
 8003b72:	f000 feab 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003b76:	1e03      	subs	r3, r0, #0
 8003b78:	d001      	beq.n	8003b7e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8003b7a:	f000 f9cd 	bl	8003f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003b7e:	1d3b      	adds	r3, r7, #4
 8003b80:	2203      	movs	r2, #3
 8003b82:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003b84:	1d3a      	adds	r2, r7, #4
 8003b86:	4b4e      	ldr	r3, [pc, #312]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003b88:	0011      	movs	r1, r2
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f000 fe9e 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003b90:	1e03      	subs	r3, r0, #0
 8003b92:	d001      	beq.n	8003b98 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8003b94:	f000 f9c0 	bl	8003f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	2207      	movs	r2, #7
 8003b9c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003b9e:	1d3a      	adds	r2, r7, #4
 8003ba0:	4b47      	ldr	r3, [pc, #284]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003ba2:	0011      	movs	r1, r2
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f000 fe91 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003baa:	1e03      	subs	r3, r0, #0
 8003bac:	d001      	beq.n	8003bb2 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8003bae:	f000 f9b3 	bl	8003f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003bb2:	1d3b      	adds	r3, r7, #4
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003bb8:	1d3a      	adds	r2, r7, #4
 8003bba:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003bbc:	0011      	movs	r1, r2
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f000 fe84 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003bc4:	1e03      	subs	r3, r0, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8003bc8:	f000 f9a6 	bl	8003f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003bcc:	1d3b      	adds	r3, r7, #4
 8003bce:	2209      	movs	r2, #9
 8003bd0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003bd2:	1d3a      	adds	r2, r7, #4
 8003bd4:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003bd6:	0011      	movs	r1, r2
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f000 fe77 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003bde:	1e03      	subs	r3, r0, #0
 8003be0:	d001      	beq.n	8003be6 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8003be2:	f000 f999 	bl	8003f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003be6:	1d3b      	adds	r3, r7, #4
 8003be8:	220a      	movs	r2, #10
 8003bea:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003bec:	1d3a      	adds	r2, r7, #4
 8003bee:	4b34      	ldr	r3, [pc, #208]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003bf0:	0011      	movs	r1, r2
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f000 fe6a 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003bf8:	1e03      	subs	r3, r0, #0
 8003bfa:	d001      	beq.n	8003c00 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8003bfc:	f000 f98c 	bl	8003f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003c00:	1d3b      	adds	r3, r7, #4
 8003c02:	220b      	movs	r2, #11
 8003c04:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c06:	1d3a      	adds	r2, r7, #4
 8003c08:	4b2d      	ldr	r3, [pc, #180]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003c0a:	0011      	movs	r1, r2
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f000 fe5d 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003c12:	1e03      	subs	r3, r0, #0
 8003c14:	d001      	beq.n	8003c1a <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8003c16:	f000 f97f 	bl	8003f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003c1a:	1d3b      	adds	r3, r7, #4
 8003c1c:	220c      	movs	r2, #12
 8003c1e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c20:	1d3a      	adds	r2, r7, #4
 8003c22:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003c24:	0011      	movs	r1, r2
 8003c26:	0018      	movs	r0, r3
 8003c28:	f000 fe50 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003c2c:	1e03      	subs	r3, r0, #0
 8003c2e:	d001      	beq.n	8003c34 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8003c30:	f000 f972 	bl	8003f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003c34:	1d3b      	adds	r3, r7, #4
 8003c36:	220d      	movs	r2, #13
 8003c38:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c3a:	1d3a      	adds	r2, r7, #4
 8003c3c:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003c3e:	0011      	movs	r1, r2
 8003c40:	0018      	movs	r0, r3
 8003c42:	f000 fe43 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003c46:	1e03      	subs	r3, r0, #0
 8003c48:	d001      	beq.n	8003c4e <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8003c4a:	f000 f965 	bl	8003f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003c4e:	1d3b      	adds	r3, r7, #4
 8003c50:	220e      	movs	r2, #14
 8003c52:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c54:	1d3a      	adds	r2, r7, #4
 8003c56:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003c58:	0011      	movs	r1, r2
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f000 fe36 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003c60:	1e03      	subs	r3, r0, #0
 8003c62:	d001      	beq.n	8003c68 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8003c64:	f000 f958 	bl	8003f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003c68:	1d3b      	adds	r3, r7, #4
 8003c6a:	220f      	movs	r2, #15
 8003c6c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c6e:	1d3a      	adds	r2, r7, #4
 8003c70:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003c72:	0011      	movs	r1, r2
 8003c74:	0018      	movs	r0, r3
 8003c76:	f000 fe29 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003c7a:	1e03      	subs	r3, r0, #0
 8003c7c:	d001      	beq.n	8003c82 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8003c7e:	f000 f94b 	bl	8003f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003c82:	1d3b      	adds	r3, r7, #4
 8003c84:	2210      	movs	r2, #16
 8003c86:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c88:	1d3a      	adds	r2, r7, #4
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003c8c:	0011      	movs	r1, r2
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f000 fe1c 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003c94:	1e03      	subs	r3, r0, #0
 8003c96:	d001      	beq.n	8003c9c <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8003c98:	f000 f93e 	bl	8003f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003c9c:	1d3b      	adds	r3, r7, #4
 8003c9e:	2211      	movs	r2, #17
 8003ca0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003ca2:	1d3a      	adds	r2, r7, #4
 8003ca4:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <MX_ADC_Init+0x21c>)
 8003ca6:	0011      	movs	r1, r2
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f000 fe0f 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003cae:	1e03      	subs	r3, r0, #0
 8003cb0:	d001      	beq.n	8003cb6 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8003cb2:	f000 f931 	bl	8003f18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b004      	add	sp, #16
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	20000220 	.word	0x20000220
 8003cc4:	40012400 	.word	0x40012400

08003cc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <MX_I2C1_Init+0x74>)
 8003cce:	4a1c      	ldr	r2, [pc, #112]	; (8003d40 <MX_I2C1_Init+0x78>)
 8003cd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003cd2:	4b1a      	ldr	r3, [pc, #104]	; (8003d3c <MX_I2C1_Init+0x74>)
 8003cd4:	4a1b      	ldr	r2, [pc, #108]	; (8003d44 <MX_I2C1_Init+0x7c>)
 8003cd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003cd8:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <MX_I2C1_Init+0x74>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cde:	4b17      	ldr	r3, [pc, #92]	; (8003d3c <MX_I2C1_Init+0x74>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ce4:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <MX_I2C1_Init+0x74>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003cea:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <MX_I2C1_Init+0x74>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003cf0:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <MX_I2C1_Init+0x74>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cf6:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <MX_I2C1_Init+0x74>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cfc:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <MX_I2C1_Init+0x74>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d02:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <MX_I2C1_Init+0x74>)
 8003d04:	0018      	movs	r0, r3
 8003d06:	f001 fcb1 	bl	800566c <HAL_I2C_Init>
 8003d0a:	1e03      	subs	r3, r0, #0
 8003d0c:	d001      	beq.n	8003d12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003d0e:	f000 f903 	bl	8003f18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d12:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <MX_I2C1_Init+0x74>)
 8003d14:	2100      	movs	r1, #0
 8003d16:	0018      	movs	r0, r3
 8003d18:	f002 f946 	bl	8005fa8 <HAL_I2CEx_ConfigAnalogFilter>
 8003d1c:	1e03      	subs	r3, r0, #0
 8003d1e:	d001      	beq.n	8003d24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003d20:	f000 f8fa 	bl	8003f18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <MX_I2C1_Init+0x74>)
 8003d26:	2100      	movs	r1, #0
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f002 f989 	bl	8006040 <HAL_I2CEx_ConfigDigitalFilter>
 8003d2e:	1e03      	subs	r3, r0, #0
 8003d30:	d001      	beq.n	8003d36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003d32:	f000 f8f1 	bl	8003f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	200002a4 	.word	0x200002a4
 8003d40:	40005400 	.word	0x40005400
 8003d44:	2000090e 	.word	0x2000090e

08003d48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d4c:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <MX_USART1_UART_Init+0x58>)
 8003d4e:	4a15      	ldr	r2, [pc, #84]	; (8003da4 <MX_USART1_UART_Init+0x5c>)
 8003d50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d52:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <MX_USART1_UART_Init+0x58>)
 8003d54:	22e1      	movs	r2, #225	; 0xe1
 8003d56:	0252      	lsls	r2, r2, #9
 8003d58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <MX_USART1_UART_Init+0x58>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <MX_USART1_UART_Init+0x58>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <MX_USART1_UART_Init+0x58>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <MX_USART1_UART_Init+0x58>)
 8003d6e:	220c      	movs	r2, #12
 8003d70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <MX_USART1_UART_Init+0x58>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <MX_USART1_UART_Init+0x58>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <MX_USART1_UART_Init+0x58>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <MX_USART1_UART_Init+0x58>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <MX_USART1_UART_Init+0x58>)
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f002 feed 	bl	8006b6c <HAL_UART_Init>
 8003d92:	1e03      	subs	r3, r0, #0
 8003d94:	d001      	beq.n	8003d9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003d96:	f000 f8bf 	bl	8003f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	200002f0 	.word	0x200002f0
 8003da4:	40013800 	.word	0x40013800

08003da8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003dae:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <MX_DMA_Init+0x38>)
 8003db0:	695a      	ldr	r2, [r3, #20]
 8003db2:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <MX_DMA_Init+0x38>)
 8003db4:	2101      	movs	r1, #1
 8003db6:	430a      	orrs	r2, r1
 8003db8:	615a      	str	r2, [r3, #20]
 8003dba:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <MX_DMA_Init+0x38>)
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	607b      	str	r3, [r7, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2100      	movs	r1, #0
 8003dca:	2009      	movs	r0, #9
 8003dcc:	f001 f840 	bl	8004e50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003dd0:	2009      	movs	r0, #9
 8003dd2:	f001 f852 	bl	8004e7a <HAL_NVIC_EnableIRQ>

}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b002      	add	sp, #8
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	40021000 	.word	0x40021000

08003de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003de4:	b590      	push	{r4, r7, lr}
 8003de6:	b08b      	sub	sp, #44	; 0x2c
 8003de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dea:	2414      	movs	r4, #20
 8003dec:	193b      	adds	r3, r7, r4
 8003dee:	0018      	movs	r0, r3
 8003df0:	2314      	movs	r3, #20
 8003df2:	001a      	movs	r2, r3
 8003df4:	2100      	movs	r1, #0
 8003df6:	f004 f8e5 	bl	8007fc4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dfa:	4b43      	ldr	r3, [pc, #268]	; (8003f08 <MX_GPIO_Init+0x124>)
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	4b42      	ldr	r3, [pc, #264]	; (8003f08 <MX_GPIO_Init+0x124>)
 8003e00:	2180      	movs	r1, #128	; 0x80
 8003e02:	0309      	lsls	r1, r1, #12
 8003e04:	430a      	orrs	r2, r1
 8003e06:	615a      	str	r2, [r3, #20]
 8003e08:	4b3f      	ldr	r3, [pc, #252]	; (8003f08 <MX_GPIO_Init+0x124>)
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	031b      	lsls	r3, r3, #12
 8003e10:	4013      	ands	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e16:	4b3c      	ldr	r3, [pc, #240]	; (8003f08 <MX_GPIO_Init+0x124>)
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	4b3b      	ldr	r3, [pc, #236]	; (8003f08 <MX_GPIO_Init+0x124>)
 8003e1c:	2180      	movs	r1, #128	; 0x80
 8003e1e:	0289      	lsls	r1, r1, #10
 8003e20:	430a      	orrs	r2, r1
 8003e22:	615a      	str	r2, [r3, #20]
 8003e24:	4b38      	ldr	r3, [pc, #224]	; (8003f08 <MX_GPIO_Init+0x124>)
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	029b      	lsls	r3, r3, #10
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e32:	4b35      	ldr	r3, [pc, #212]	; (8003f08 <MX_GPIO_Init+0x124>)
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	4b34      	ldr	r3, [pc, #208]	; (8003f08 <MX_GPIO_Init+0x124>)
 8003e38:	2180      	movs	r1, #128	; 0x80
 8003e3a:	02c9      	lsls	r1, r1, #11
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	615a      	str	r2, [r3, #20]
 8003e40:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <MX_GPIO_Init+0x124>)
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	02db      	lsls	r3, r3, #11
 8003e48:	4013      	ands	r3, r2
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e4e:	4b2e      	ldr	r3, [pc, #184]	; (8003f08 <MX_GPIO_Init+0x124>)
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	4b2d      	ldr	r3, [pc, #180]	; (8003f08 <MX_GPIO_Init+0x124>)
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	03c9      	lsls	r1, r1, #15
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	615a      	str	r2, [r3, #20]
 8003e5c:	4b2a      	ldr	r3, [pc, #168]	; (8003f08 <MX_GPIO_Init+0x124>)
 8003e5e:	695a      	ldr	r2, [r3, #20]
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	03db      	lsls	r3, r3, #15
 8003e64:	4013      	ands	r3, r2
 8003e66:	607b      	str	r3, [r7, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8003e6a:	239f      	movs	r3, #159	; 0x9f
 8003e6c:	019b      	lsls	r3, r3, #6
 8003e6e:	4827      	ldr	r0, [pc, #156]	; (8003f0c <MX_GPIO_Init+0x128>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	0019      	movs	r1, r3
 8003e74:	f001 fbc1 	bl	80055fa <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8003e78:	4b25      	ldr	r3, [pc, #148]	; (8003f10 <MX_GPIO_Init+0x12c>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	21c0      	movs	r1, #192	; 0xc0
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f001 fbbb 	bl	80055fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8003e84:	4b23      	ldr	r3, [pc, #140]	; (8003f14 <MX_GPIO_Init+0x130>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	2160      	movs	r1, #96	; 0x60
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f001 fbb5 	bl	80055fa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8003e90:	193b      	adds	r3, r7, r4
 8003e92:	229f      	movs	r2, #159	; 0x9f
 8003e94:	0192      	lsls	r2, r2, #6
 8003e96:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e98:	193b      	adds	r3, r7, r4
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	193b      	adds	r3, r7, r4
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea4:	193b      	adds	r3, r7, r4
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eaa:	193b      	adds	r3, r7, r4
 8003eac:	4a17      	ldr	r2, [pc, #92]	; (8003f0c <MX_GPIO_Init+0x128>)
 8003eae:	0019      	movs	r1, r3
 8003eb0:	0010      	movs	r0, r2
 8003eb2:	f001 fa15 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003eb6:	193b      	adds	r3, r7, r4
 8003eb8:	22c0      	movs	r2, #192	; 0xc0
 8003eba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ebc:	193b      	adds	r3, r7, r4
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec2:	193b      	adds	r3, r7, r4
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec8:	193b      	adds	r3, r7, r4
 8003eca:	2200      	movs	r2, #0
 8003ecc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ece:	193b      	adds	r3, r7, r4
 8003ed0:	4a0f      	ldr	r2, [pc, #60]	; (8003f10 <MX_GPIO_Init+0x12c>)
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	0010      	movs	r0, r2
 8003ed6:	f001 fa03 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003eda:	0021      	movs	r1, r4
 8003edc:	187b      	adds	r3, r7, r1
 8003ede:	2260      	movs	r2, #96	; 0x60
 8003ee0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ee2:	187b      	adds	r3, r7, r1
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee8:	187b      	adds	r3, r7, r1
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eee:	187b      	adds	r3, r7, r1
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef4:	187b      	adds	r3, r7, r1
 8003ef6:	4a07      	ldr	r2, [pc, #28]	; (8003f14 <MX_GPIO_Init+0x130>)
 8003ef8:	0019      	movs	r1, r3
 8003efa:	0010      	movs	r0, r2
 8003efc:	f001 f9f0 	bl	80052e0 <HAL_GPIO_Init>

}
 8003f00:	46c0      	nop			; (mov r8, r8)
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b00b      	add	sp, #44	; 0x2c
 8003f06:	bd90      	pop	{r4, r7, pc}
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	48000800 	.word	0x48000800
 8003f10:	48001400 	.word	0x48001400
 8003f14:	48000400 	.word	0x48000400

08003f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f1c:	b672      	cpsid	i
}
 8003f1e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003f20:	e7fe      	b.n	8003f20 <Error_Handler+0x8>
	...

08003f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f2a:	4b0f      	ldr	r3, [pc, #60]	; (8003f68 <HAL_MspInit+0x44>)
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <HAL_MspInit+0x44>)
 8003f30:	2101      	movs	r1, #1
 8003f32:	430a      	orrs	r2, r1
 8003f34:	619a      	str	r2, [r3, #24]
 8003f36:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <HAL_MspInit+0x44>)
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	607b      	str	r3, [r7, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f42:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <HAL_MspInit+0x44>)
 8003f44:	69da      	ldr	r2, [r3, #28]
 8003f46:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <HAL_MspInit+0x44>)
 8003f48:	2180      	movs	r1, #128	; 0x80
 8003f4a:	0549      	lsls	r1, r1, #21
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	61da      	str	r2, [r3, #28]
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <HAL_MspInit+0x44>)
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	2380      	movs	r3, #128	; 0x80
 8003f56:	055b      	lsls	r3, r3, #21
 8003f58:	4013      	ands	r3, r2
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b002      	add	sp, #8
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	40021000 	.word	0x40021000

08003f6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b08d      	sub	sp, #52	; 0x34
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f74:	241c      	movs	r4, #28
 8003f76:	193b      	adds	r3, r7, r4
 8003f78:	0018      	movs	r0, r3
 8003f7a:	2314      	movs	r3, #20
 8003f7c:	001a      	movs	r2, r3
 8003f7e:	2100      	movs	r1, #0
 8003f80:	f004 f820 	bl	8007fc4 <memset>
  if(hadc->Instance==ADC1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a4a      	ldr	r2, [pc, #296]	; (80040b4 <HAL_ADC_MspInit+0x148>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d000      	beq.n	8003f90 <HAL_ADC_MspInit+0x24>
 8003f8e:	e08d      	b.n	80040ac <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f90:	4b49      	ldr	r3, [pc, #292]	; (80040b8 <HAL_ADC_MspInit+0x14c>)
 8003f92:	699a      	ldr	r2, [r3, #24]
 8003f94:	4b48      	ldr	r3, [pc, #288]	; (80040b8 <HAL_ADC_MspInit+0x14c>)
 8003f96:	2180      	movs	r1, #128	; 0x80
 8003f98:	0089      	lsls	r1, r1, #2
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	619a      	str	r2, [r3, #24]
 8003f9e:	4b46      	ldr	r3, [pc, #280]	; (80040b8 <HAL_ADC_MspInit+0x14c>)
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fac:	4b42      	ldr	r3, [pc, #264]	; (80040b8 <HAL_ADC_MspInit+0x14c>)
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	4b41      	ldr	r3, [pc, #260]	; (80040b8 <HAL_ADC_MspInit+0x14c>)
 8003fb2:	2180      	movs	r1, #128	; 0x80
 8003fb4:	0309      	lsls	r1, r1, #12
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	615a      	str	r2, [r3, #20]
 8003fba:	4b3f      	ldr	r3, [pc, #252]	; (80040b8 <HAL_ADC_MspInit+0x14c>)
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	031b      	lsls	r3, r3, #12
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc8:	4b3b      	ldr	r3, [pc, #236]	; (80040b8 <HAL_ADC_MspInit+0x14c>)
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	4b3a      	ldr	r3, [pc, #232]	; (80040b8 <HAL_ADC_MspInit+0x14c>)
 8003fce:	2180      	movs	r1, #128	; 0x80
 8003fd0:	0289      	lsls	r1, r1, #10
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	615a      	str	r2, [r3, #20]
 8003fd6:	4b38      	ldr	r3, [pc, #224]	; (80040b8 <HAL_ADC_MspInit+0x14c>)
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	2380      	movs	r3, #128	; 0x80
 8003fdc:	029b      	lsls	r3, r3, #10
 8003fde:	4013      	ands	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe4:	4b34      	ldr	r3, [pc, #208]	; (80040b8 <HAL_ADC_MspInit+0x14c>)
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	4b33      	ldr	r3, [pc, #204]	; (80040b8 <HAL_ADC_MspInit+0x14c>)
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	02c9      	lsls	r1, r1, #11
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	615a      	str	r2, [r3, #20]
 8003ff2:	4b31      	ldr	r3, [pc, #196]	; (80040b8 <HAL_ADC_MspInit+0x14c>)
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	02db      	lsls	r3, r3, #11
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004000:	193b      	adds	r3, r7, r4
 8004002:	223f      	movs	r2, #63	; 0x3f
 8004004:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004006:	193b      	adds	r3, r7, r4
 8004008:	2203      	movs	r2, #3
 800400a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	193b      	adds	r3, r7, r4
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004012:	193b      	adds	r3, r7, r4
 8004014:	4a29      	ldr	r2, [pc, #164]	; (80040bc <HAL_ADC_MspInit+0x150>)
 8004016:	0019      	movs	r1, r3
 8004018:	0010      	movs	r0, r2
 800401a:	f001 f961 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800401e:	193b      	adds	r3, r7, r4
 8004020:	228f      	movs	r2, #143	; 0x8f
 8004022:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004024:	193b      	adds	r3, r7, r4
 8004026:	2203      	movs	r2, #3
 8004028:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402a:	193b      	adds	r3, r7, r4
 800402c:	2200      	movs	r2, #0
 800402e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004030:	193a      	adds	r2, r7, r4
 8004032:	2390      	movs	r3, #144	; 0x90
 8004034:	05db      	lsls	r3, r3, #23
 8004036:	0011      	movs	r1, r2
 8004038:	0018      	movs	r0, r3
 800403a:	f001 f951 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800403e:	193b      	adds	r3, r7, r4
 8004040:	2203      	movs	r2, #3
 8004042:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004044:	193b      	adds	r3, r7, r4
 8004046:	2203      	movs	r2, #3
 8004048:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404a:	193b      	adds	r3, r7, r4
 800404c:	2200      	movs	r2, #0
 800404e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004050:	193b      	adds	r3, r7, r4
 8004052:	4a1b      	ldr	r2, [pc, #108]	; (80040c0 <HAL_ADC_MspInit+0x154>)
 8004054:	0019      	movs	r1, r3
 8004056:	0010      	movs	r0, r2
 8004058:	f001 f942 	bl	80052e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800405c:	4b19      	ldr	r3, [pc, #100]	; (80040c4 <HAL_ADC_MspInit+0x158>)
 800405e:	4a1a      	ldr	r2, [pc, #104]	; (80040c8 <HAL_ADC_MspInit+0x15c>)
 8004060:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004062:	4b18      	ldr	r3, [pc, #96]	; (80040c4 <HAL_ADC_MspInit+0x158>)
 8004064:	2200      	movs	r2, #0
 8004066:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8004068:	4b16      	ldr	r3, [pc, #88]	; (80040c4 <HAL_ADC_MspInit+0x158>)
 800406a:	2200      	movs	r2, #0
 800406c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800406e:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <HAL_ADC_MspInit+0x158>)
 8004070:	2280      	movs	r2, #128	; 0x80
 8004072:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004074:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <HAL_ADC_MspInit+0x158>)
 8004076:	2280      	movs	r2, #128	; 0x80
 8004078:	0092      	lsls	r2, r2, #2
 800407a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800407c:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <HAL_ADC_MspInit+0x158>)
 800407e:	2280      	movs	r2, #128	; 0x80
 8004080:	0112      	lsls	r2, r2, #4
 8004082:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8004084:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <HAL_ADC_MspInit+0x158>)
 8004086:	2220      	movs	r2, #32
 8004088:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800408a:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <HAL_ADC_MspInit+0x158>)
 800408c:	2200      	movs	r2, #0
 800408e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004090:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <HAL_ADC_MspInit+0x158>)
 8004092:	0018      	movs	r0, r3
 8004094:	f000 ff0e 	bl	8004eb4 <HAL_DMA_Init>
 8004098:	1e03      	subs	r3, r0, #0
 800409a:	d001      	beq.n	80040a0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800409c:	f7ff ff3c 	bl	8003f18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a08      	ldr	r2, [pc, #32]	; (80040c4 <HAL_ADC_MspInit+0x158>)
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
 80040a6:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <HAL_ADC_MspInit+0x158>)
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80040ac:	46c0      	nop			; (mov r8, r8)
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b00d      	add	sp, #52	; 0x34
 80040b2:	bd90      	pop	{r4, r7, pc}
 80040b4:	40012400 	.word	0x40012400
 80040b8:	40021000 	.word	0x40021000
 80040bc:	48000800 	.word	0x48000800
 80040c0:	48000400 	.word	0x48000400
 80040c4:	20000260 	.word	0x20000260
 80040c8:	40020008 	.word	0x40020008

080040cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b08b      	sub	sp, #44	; 0x2c
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d4:	2414      	movs	r4, #20
 80040d6:	193b      	adds	r3, r7, r4
 80040d8:	0018      	movs	r0, r3
 80040da:	2314      	movs	r3, #20
 80040dc:	001a      	movs	r2, r3
 80040de:	2100      	movs	r1, #0
 80040e0:	f003 ff70 	bl	8007fc4 <memset>
  if(hi2c->Instance==I2C1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1c      	ldr	r2, [pc, #112]	; (800415c <HAL_I2C_MspInit+0x90>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d132      	bne.n	8004154 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ee:	4b1c      	ldr	r3, [pc, #112]	; (8004160 <HAL_I2C_MspInit+0x94>)
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <HAL_I2C_MspInit+0x94>)
 80040f4:	2180      	movs	r1, #128	; 0x80
 80040f6:	02c9      	lsls	r1, r1, #11
 80040f8:	430a      	orrs	r2, r1
 80040fa:	615a      	str	r2, [r3, #20]
 80040fc:	4b18      	ldr	r3, [pc, #96]	; (8004160 <HAL_I2C_MspInit+0x94>)
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	02db      	lsls	r3, r3, #11
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800410a:	193b      	adds	r3, r7, r4
 800410c:	22c0      	movs	r2, #192	; 0xc0
 800410e:	0092      	lsls	r2, r2, #2
 8004110:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004112:	0021      	movs	r1, r4
 8004114:	187b      	adds	r3, r7, r1
 8004116:	2212      	movs	r2, #18
 8004118:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411a:	187b      	adds	r3, r7, r1
 800411c:	2200      	movs	r2, #0
 800411e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004120:	187b      	adds	r3, r7, r1
 8004122:	2203      	movs	r2, #3
 8004124:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004126:	187b      	adds	r3, r7, r1
 8004128:	2201      	movs	r2, #1
 800412a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800412c:	187b      	adds	r3, r7, r1
 800412e:	4a0d      	ldr	r2, [pc, #52]	; (8004164 <HAL_I2C_MspInit+0x98>)
 8004130:	0019      	movs	r1, r3
 8004132:	0010      	movs	r0, r2
 8004134:	f001 f8d4 	bl	80052e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <HAL_I2C_MspInit+0x94>)
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	4b08      	ldr	r3, [pc, #32]	; (8004160 <HAL_I2C_MspInit+0x94>)
 800413e:	2180      	movs	r1, #128	; 0x80
 8004140:	0389      	lsls	r1, r1, #14
 8004142:	430a      	orrs	r2, r1
 8004144:	61da      	str	r2, [r3, #28]
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <HAL_I2C_MspInit+0x94>)
 8004148:	69da      	ldr	r2, [r3, #28]
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	039b      	lsls	r3, r3, #14
 800414e:	4013      	ands	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004154:	46c0      	nop			; (mov r8, r8)
 8004156:	46bd      	mov	sp, r7
 8004158:	b00b      	add	sp, #44	; 0x2c
 800415a:	bd90      	pop	{r4, r7, pc}
 800415c:	40005400 	.word	0x40005400
 8004160:	40021000 	.word	0x40021000
 8004164:	48000400 	.word	0x48000400

08004168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004168:	b590      	push	{r4, r7, lr}
 800416a:	b08b      	sub	sp, #44	; 0x2c
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004170:	2414      	movs	r4, #20
 8004172:	193b      	adds	r3, r7, r4
 8004174:	0018      	movs	r0, r3
 8004176:	2314      	movs	r3, #20
 8004178:	001a      	movs	r2, r3
 800417a:	2100      	movs	r1, #0
 800417c:	f003 ff22 	bl	8007fc4 <memset>
  if(huart->Instance==USART1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a21      	ldr	r2, [pc, #132]	; (800420c <HAL_UART_MspInit+0xa4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d13b      	bne.n	8004202 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800418a:	4b21      	ldr	r3, [pc, #132]	; (8004210 <HAL_UART_MspInit+0xa8>)
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	4b20      	ldr	r3, [pc, #128]	; (8004210 <HAL_UART_MspInit+0xa8>)
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	01c9      	lsls	r1, r1, #7
 8004194:	430a      	orrs	r2, r1
 8004196:	619a      	str	r2, [r3, #24]
 8004198:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <HAL_UART_MspInit+0xa8>)
 800419a:	699a      	ldr	r2, [r3, #24]
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	01db      	lsls	r3, r3, #7
 80041a0:	4013      	ands	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a6:	4b1a      	ldr	r3, [pc, #104]	; (8004210 <HAL_UART_MspInit+0xa8>)
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	4b19      	ldr	r3, [pc, #100]	; (8004210 <HAL_UART_MspInit+0xa8>)
 80041ac:	2180      	movs	r1, #128	; 0x80
 80041ae:	0289      	lsls	r1, r1, #10
 80041b0:	430a      	orrs	r2, r1
 80041b2:	615a      	str	r2, [r3, #20]
 80041b4:	4b16      	ldr	r3, [pc, #88]	; (8004210 <HAL_UART_MspInit+0xa8>)
 80041b6:	695a      	ldr	r2, [r3, #20]
 80041b8:	2380      	movs	r3, #128	; 0x80
 80041ba:	029b      	lsls	r3, r3, #10
 80041bc:	4013      	ands	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041c2:	193b      	adds	r3, r7, r4
 80041c4:	22c0      	movs	r2, #192	; 0xc0
 80041c6:	00d2      	lsls	r2, r2, #3
 80041c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ca:	0021      	movs	r1, r4
 80041cc:	187b      	adds	r3, r7, r1
 80041ce:	2202      	movs	r2, #2
 80041d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d2:	187b      	adds	r3, r7, r1
 80041d4:	2200      	movs	r2, #0
 80041d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041d8:	187b      	adds	r3, r7, r1
 80041da:	2203      	movs	r2, #3
 80041dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80041de:	187b      	adds	r3, r7, r1
 80041e0:	2201      	movs	r2, #1
 80041e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e4:	187a      	adds	r2, r7, r1
 80041e6:	2390      	movs	r3, #144	; 0x90
 80041e8:	05db      	lsls	r3, r3, #23
 80041ea:	0011      	movs	r1, r2
 80041ec:	0018      	movs	r0, r3
 80041ee:	f001 f877 	bl	80052e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80041f2:	2200      	movs	r2, #0
 80041f4:	2100      	movs	r1, #0
 80041f6:	201b      	movs	r0, #27
 80041f8:	f000 fe2a 	bl	8004e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80041fc:	201b      	movs	r0, #27
 80041fe:	f000 fe3c 	bl	8004e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	46bd      	mov	sp, r7
 8004206:	b00b      	add	sp, #44	; 0x2c
 8004208:	bd90      	pop	{r4, r7, pc}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	40013800 	.word	0x40013800
 8004210:	40021000 	.word	0x40021000

08004214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004218:	e7fe      	b.n	8004218 <NMI_Handler+0x4>

0800421a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800421e:	e7fe      	b.n	800421e <HardFault_Handler+0x4>

08004220 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004238:	f000 f952 	bl	80044e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004248:	4b03      	ldr	r3, [pc, #12]	; (8004258 <DMA1_Channel1_IRQHandler+0x14>)
 800424a:	0018      	movs	r0, r3
 800424c:	f000 ff5d 	bl	800510a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004250:	46c0      	nop			; (mov r8, r8)
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	20000260 	.word	0x20000260

0800425c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004260:	4b03      	ldr	r3, [pc, #12]	; (8004270 <USART1_IRQHandler+0x14>)
 8004262:	0018      	movs	r0, r3
 8004264:	f002 fde0 	bl	8006e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004268:	46c0      	nop			; (mov r8, r8)
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	200002f0 	.word	0x200002f0

08004274 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
	return 1;
 8004278:	2301      	movs	r3, #1
}
 800427a:	0018      	movs	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <_kill>:

int _kill(int pid, int sig)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800428a:	f003 fe71 	bl	8007f70 <__errno>
 800428e:	0003      	movs	r3, r0
 8004290:	2216      	movs	r2, #22
 8004292:	601a      	str	r2, [r3, #0]
	return -1;
 8004294:	2301      	movs	r3, #1
 8004296:	425b      	negs	r3, r3
}
 8004298:	0018      	movs	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	b002      	add	sp, #8
 800429e:	bd80      	pop	{r7, pc}

080042a0 <_exit>:

void _exit (int status)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80042a8:	2301      	movs	r3, #1
 80042aa:	425a      	negs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	0011      	movs	r1, r2
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7ff ffe5 	bl	8004280 <_kill>
	while (1) {}		/* Make sure we hang here */
 80042b6:	e7fe      	b.n	80042b6 <_exit+0x16>

080042b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	e00a      	b.n	80042e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80042ca:	e000      	b.n	80042ce <_read+0x16>
 80042cc:	bf00      	nop
 80042ce:	0001      	movs	r1, r0
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	60ba      	str	r2, [r7, #8]
 80042d6:	b2ca      	uxtb	r2, r1
 80042d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	3301      	adds	r3, #1
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	dbf0      	blt.n	80042ca <_read+0x12>
	}

return len;
 80042e8:	687b      	ldr	r3, [r7, #4]
}
 80042ea:	0018      	movs	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b006      	add	sp, #24
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b086      	sub	sp, #24
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	e009      	b.n	8004318 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	60ba      	str	r2, [r7, #8]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	0018      	movs	r0, r3
 800430e:	e000      	b.n	8004312 <_write+0x20>
 8004310:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	3301      	adds	r3, #1
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	429a      	cmp	r2, r3
 800431e:	dbf1      	blt.n	8004304 <_write+0x12>
	}
	return len;
 8004320:	687b      	ldr	r3, [r7, #4]
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b006      	add	sp, #24
 8004328:	bd80      	pop	{r7, pc}

0800432a <_close>:

int _close(int file)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
	return -1;
 8004332:	2301      	movs	r3, #1
 8004334:	425b      	negs	r3, r3
}
 8004336:	0018      	movs	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	b002      	add	sp, #8
 800433c:	bd80      	pop	{r7, pc}

0800433e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2280      	movs	r2, #128	; 0x80
 800434c:	0192      	lsls	r2, r2, #6
 800434e:	605a      	str	r2, [r3, #4]
	return 0;
 8004350:	2300      	movs	r3, #0
}
 8004352:	0018      	movs	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	b002      	add	sp, #8
 8004358:	bd80      	pop	{r7, pc}

0800435a <_isatty>:

int _isatty(int file)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b082      	sub	sp, #8
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
	return 1;
 8004362:	2301      	movs	r3, #1
}
 8004364:	0018      	movs	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	b002      	add	sp, #8
 800436a:	bd80      	pop	{r7, pc}

0800436c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
	return 0;
 8004378:	2300      	movs	r3, #0
}
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	b004      	add	sp, #16
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800438c:	4a14      	ldr	r2, [pc, #80]	; (80043e0 <_sbrk+0x5c>)
 800438e:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <_sbrk+0x60>)
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004398:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <_sbrk+0x64>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d102      	bne.n	80043a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043a0:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <_sbrk+0x64>)
 80043a2:	4a12      	ldr	r2, [pc, #72]	; (80043ec <_sbrk+0x68>)
 80043a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <_sbrk+0x64>)
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	18d3      	adds	r3, r2, r3
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d207      	bcs.n	80043c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043b4:	f003 fddc 	bl	8007f70 <__errno>
 80043b8:	0003      	movs	r3, r0
 80043ba:	220c      	movs	r2, #12
 80043bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043be:	2301      	movs	r3, #1
 80043c0:	425b      	negs	r3, r3
 80043c2:	e009      	b.n	80043d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043c4:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <_sbrk+0x64>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <_sbrk+0x64>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	18d2      	adds	r2, r2, r3
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <_sbrk+0x64>)
 80043d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80043d6:	68fb      	ldr	r3, [r7, #12]
}
 80043d8:	0018      	movs	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	b006      	add	sp, #24
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20002000 	.word	0x20002000
 80043e4:	00000400 	.word	0x00000400
 80043e8:	20000460 	.word	0x20000460
 80043ec:	20000478 	.word	0x20000478

080043f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043fc:	480d      	ldr	r0, [pc, #52]	; (8004434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004400:	480d      	ldr	r0, [pc, #52]	; (8004438 <LoopForever+0x6>)
  ldr r1, =_edata
 8004402:	490e      	ldr	r1, [pc, #56]	; (800443c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004404:	4a0e      	ldr	r2, [pc, #56]	; (8004440 <LoopForever+0xe>)
  movs r3, #0
 8004406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004408:	e002      	b.n	8004410 <LoopCopyDataInit>

0800440a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800440a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800440c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800440e:	3304      	adds	r3, #4

08004410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004414:	d3f9      	bcc.n	800440a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004416:	4a0b      	ldr	r2, [pc, #44]	; (8004444 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004418:	4c0b      	ldr	r4, [pc, #44]	; (8004448 <LoopForever+0x16>)
  movs r3, #0
 800441a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800441c:	e001      	b.n	8004422 <LoopFillZerobss>

0800441e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800441e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004420:	3204      	adds	r2, #4

08004422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004424:	d3fb      	bcc.n	800441e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004426:	f7ff ffe3 	bl	80043f0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800442a:	f003 fda7 	bl	8007f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800442e:	f7ff faa5 	bl	800397c <main>

08004432 <LoopForever>:

LoopForever:
    b LoopForever
 8004432:	e7fe      	b.n	8004432 <LoopForever>
  ldr   r0, =_estack
 8004434:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800443c:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8004440:	0800d10c 	.word	0x0800d10c
  ldr r2, =_sbss
 8004444:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8004448:	20000478 	.word	0x20000478

0800444c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800444c:	e7fe      	b.n	800444c <ADC1_COMP_IRQHandler>
	...

08004450 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004454:	4b07      	ldr	r3, [pc, #28]	; (8004474 <HAL_Init+0x24>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_Init+0x24>)
 800445a:	2110      	movs	r1, #16
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004460:	2003      	movs	r0, #3
 8004462:	f000 f809 	bl	8004478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004466:	f7ff fd5d 	bl	8003f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	0018      	movs	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	40022000 	.word	0x40022000

08004478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004478:	b590      	push	{r4, r7, lr}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004480:	4b14      	ldr	r3, [pc, #80]	; (80044d4 <HAL_InitTick+0x5c>)
 8004482:	681c      	ldr	r4, [r3, #0]
 8004484:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <HAL_InitTick+0x60>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	0019      	movs	r1, r3
 800448a:	23fa      	movs	r3, #250	; 0xfa
 800448c:	0098      	lsls	r0, r3, #2
 800448e:	f7fb fe57 	bl	8000140 <__udivsi3>
 8004492:	0003      	movs	r3, r0
 8004494:	0019      	movs	r1, r3
 8004496:	0020      	movs	r0, r4
 8004498:	f7fb fe52 	bl	8000140 <__udivsi3>
 800449c:	0003      	movs	r3, r0
 800449e:	0018      	movs	r0, r3
 80044a0:	f000 fcfb 	bl	8004e9a <HAL_SYSTICK_Config>
 80044a4:	1e03      	subs	r3, r0, #0
 80044a6:	d001      	beq.n	80044ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e00f      	b.n	80044cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d80b      	bhi.n	80044ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	2301      	movs	r3, #1
 80044b6:	425b      	negs	r3, r3
 80044b8:	2200      	movs	r2, #0
 80044ba:	0018      	movs	r0, r3
 80044bc:	f000 fcc8 	bl	8004e50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <HAL_InitTick+0x64>)
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	e000      	b.n	80044cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
}
 80044cc:	0018      	movs	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b003      	add	sp, #12
 80044d2:	bd90      	pop	{r4, r7, pc}
 80044d4:	20000024 	.word	0x20000024
 80044d8:	2000002c 	.word	0x2000002c
 80044dc:	20000028 	.word	0x20000028

080044e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_IncTick+0x1c>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	001a      	movs	r2, r3
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_IncTick+0x20>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	18d2      	adds	r2, r2, r3
 80044f0:	4b03      	ldr	r3, [pc, #12]	; (8004500 <HAL_IncTick+0x20>)
 80044f2:	601a      	str	r2, [r3, #0]
}
 80044f4:	46c0      	nop			; (mov r8, r8)
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	2000002c 	.word	0x2000002c
 8004500:	20000464 	.word	0x20000464

08004504 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  return uwTick;
 8004508:	4b02      	ldr	r3, [pc, #8]	; (8004514 <HAL_GetTick+0x10>)
 800450a:	681b      	ldr	r3, [r3, #0]
}
 800450c:	0018      	movs	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	20000464 	.word	0x20000464

08004518 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004520:	230f      	movs	r3, #15
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e125      	b.n	8004782 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2234      	movs	r2, #52	; 0x34
 8004548:	2100      	movs	r1, #0
 800454a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	0018      	movs	r0, r3
 8004550:	f7ff fd0c 	bl	8003f6c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	2210      	movs	r2, #16
 800455a:	4013      	ands	r3, r2
 800455c:	d000      	beq.n	8004560 <HAL_ADC_Init+0x48>
 800455e:	e103      	b.n	8004768 <HAL_ADC_Init+0x250>
 8004560:	230f      	movs	r3, #15
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d000      	beq.n	800456c <HAL_ADC_Init+0x54>
 800456a:	e0fd      	b.n	8004768 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2204      	movs	r2, #4
 8004574:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8004576:	d000      	beq.n	800457a <HAL_ADC_Init+0x62>
 8004578:	e0f6      	b.n	8004768 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	4a83      	ldr	r2, [pc, #524]	; (800478c <HAL_ADC_Init+0x274>)
 8004580:	4013      	ands	r3, r2
 8004582:	2202      	movs	r2, #2
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2203      	movs	r2, #3
 8004592:	4013      	ands	r3, r2
 8004594:	2b01      	cmp	r3, #1
 8004596:	d112      	bne.n	80045be <HAL_ADC_Init+0xa6>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2201      	movs	r2, #1
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d009      	beq.n	80045ba <HAL_ADC_Init+0xa2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	2380      	movs	r3, #128	; 0x80
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	401a      	ands	r2, r3
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d101      	bne.n	80045be <HAL_ADC_Init+0xa6>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <HAL_ADC_Init+0xa8>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d116      	bne.n	80045f2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2218      	movs	r2, #24
 80045cc:	4393      	bics	r3, r2
 80045ce:	0019      	movs	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	0899      	lsrs	r1, r3, #2
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4964      	ldr	r1, [pc, #400]	; (8004790 <HAL_ADC_Init+0x278>)
 80045fe:	400a      	ands	r2, r1
 8004600:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	7e1b      	ldrb	r3, [r3, #24]
 8004606:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	7e5b      	ldrb	r3, [r3, #25]
 800460c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800460e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	7e9b      	ldrb	r3, [r3, #26]
 8004614:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004616:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	2b01      	cmp	r3, #1
 800461e:	d002      	beq.n	8004626 <HAL_ADC_Init+0x10e>
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	015b      	lsls	r3, r3, #5
 8004624:	e000      	b.n	8004628 <HAL_ADC_Init+0x110>
 8004626:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004628:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800462e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d101      	bne.n	800463c <HAL_ADC_Init+0x124>
 8004638:	2304      	movs	r3, #4
 800463a:	e000      	b.n	800463e <HAL_ADC_Init+0x126>
 800463c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800463e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2124      	movs	r1, #36	; 0x24
 8004644:	5c5b      	ldrb	r3, [r3, r1]
 8004646:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004648:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	4313      	orrs	r3, r2
 800464e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	7edb      	ldrb	r3, [r3, #27]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d115      	bne.n	8004684 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	7e9b      	ldrb	r3, [r3, #26]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d105      	bne.n	800466c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2280      	movs	r2, #128	; 0x80
 8004664:	0252      	lsls	r2, r2, #9
 8004666:	4313      	orrs	r3, r2
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	e00b      	b.n	8004684 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	2220      	movs	r2, #32
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467c:	2201      	movs	r2, #1
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	23c2      	movs	r3, #194	; 0xc2
 800468a:	33ff      	adds	r3, #255	; 0xff
 800468c:	429a      	cmp	r2, r3
 800468e:	d007      	beq.n	80046a0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004698:	4313      	orrs	r3, r2
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	4313      	orrs	r3, r2
 800469e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68d9      	ldr	r1, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b4:	2380      	movs	r3, #128	; 0x80
 80046b6:	055b      	lsls	r3, r3, #21
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d01b      	beq.n	80046f4 <HAL_ADC_Init+0x1dc>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d017      	beq.n	80046f4 <HAL_ADC_Init+0x1dc>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d013      	beq.n	80046f4 <HAL_ADC_Init+0x1dc>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d00f      	beq.n	80046f4 <HAL_ADC_Init+0x1dc>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d00b      	beq.n	80046f4 <HAL_ADC_Init+0x1dc>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	2b05      	cmp	r3, #5
 80046e2:	d007      	beq.n	80046f4 <HAL_ADC_Init+0x1dc>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	2b06      	cmp	r3, #6
 80046ea:	d003      	beq.n	80046f4 <HAL_ADC_Init+0x1dc>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	2b07      	cmp	r3, #7
 80046f2:	d112      	bne.n	800471a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695a      	ldr	r2, [r3, #20]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2107      	movs	r1, #7
 8004700:	438a      	bics	r2, r1
 8004702:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6959      	ldr	r1, [r3, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	2207      	movs	r2, #7
 8004710:	401a      	ands	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4a1c      	ldr	r2, [pc, #112]	; (8004794 <HAL_ADC_Init+0x27c>)
 8004722:	4013      	ands	r3, r2
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	429a      	cmp	r2, r3
 8004728:	d10b      	bne.n	8004742 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	2203      	movs	r2, #3
 8004736:	4393      	bics	r3, r2
 8004738:	2201      	movs	r2, #1
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004740:	e01c      	b.n	800477c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	2212      	movs	r2, #18
 8004748:	4393      	bics	r3, r2
 800474a:	2210      	movs	r2, #16
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	2201      	movs	r2, #1
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800475e:	230f      	movs	r3, #15
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	2201      	movs	r2, #1
 8004764:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004766:	e009      	b.n	800477c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	2210      	movs	r2, #16
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004774:	230f      	movs	r3, #15
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	2201      	movs	r2, #1
 800477a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800477c:	230f      	movs	r3, #15
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	781b      	ldrb	r3, [r3, #0]
}
 8004782:	0018      	movs	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	b004      	add	sp, #16
 8004788:	bd80      	pop	{r7, pc}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	fffffefd 	.word	0xfffffefd
 8004790:	fffe0219 	.word	0xfffe0219
 8004794:	833fffe7 	.word	0x833fffe7

08004798 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004798:	b590      	push	{r4, r7, lr}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047a4:	2317      	movs	r3, #23
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	2200      	movs	r2, #0
 80047aa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2204      	movs	r2, #4
 80047b4:	4013      	ands	r3, r2
 80047b6:	d15e      	bne.n	8004876 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2234      	movs	r2, #52	; 0x34
 80047bc:	5c9b      	ldrb	r3, [r3, r2]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_ADC_Start_DMA+0x2e>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e05e      	b.n	8004884 <HAL_ADC_Start_DMA+0xec>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2234      	movs	r2, #52	; 0x34
 80047ca:	2101      	movs	r1, #1
 80047cc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	7e5b      	ldrb	r3, [r3, #25]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d007      	beq.n	80047e6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80047d6:	2317      	movs	r3, #23
 80047d8:	18fc      	adds	r4, r7, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	0018      	movs	r0, r3
 80047de:	f000 f983 	bl	8004ae8 <ADC_Enable>
 80047e2:	0003      	movs	r3, r0
 80047e4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80047e6:	2317      	movs	r3, #23
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d146      	bne.n	800487e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	4a25      	ldr	r2, [pc, #148]	; (800488c <HAL_ADC_Start_DMA+0xf4>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	2280      	movs	r2, #128	; 0x80
 80047fa:	0052      	lsls	r2, r2, #1
 80047fc:	431a      	orrs	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2234      	movs	r2, #52	; 0x34
 800480c:	2100      	movs	r1, #0
 800480e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <HAL_ADC_Start_DMA+0xf8>)
 8004816:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <HAL_ADC_Start_DMA+0xfc>)
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	4a1c      	ldr	r2, [pc, #112]	; (8004898 <HAL_ADC_Start_DMA+0x100>)
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	221c      	movs	r2, #28
 800482e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2110      	movs	r1, #16
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2101      	movs	r1, #1
 800484c:	430a      	orrs	r2, r1
 800484e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3340      	adds	r3, #64	; 0x40
 800485a:	0019      	movs	r1, r3
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f000 fb70 	bl	8004f44 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2104      	movs	r1, #4
 8004870:	430a      	orrs	r2, r1
 8004872:	609a      	str	r2, [r3, #8]
 8004874:	e003      	b.n	800487e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004876:	2317      	movs	r3, #23
 8004878:	18fb      	adds	r3, r7, r3
 800487a:	2202      	movs	r2, #2
 800487c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800487e:	2317      	movs	r3, #23
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	781b      	ldrb	r3, [r3, #0]
}
 8004884:	0018      	movs	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	b007      	add	sp, #28
 800488a:	bd90      	pop	{r4, r7, pc}
 800488c:	fffff0fe 	.word	0xfffff0fe
 8004890:	08004bf1 	.word	0x08004bf1
 8004894:	08004ca5 	.word	0x08004ca5
 8004898:	08004cc3 	.word	0x08004cc3

0800489c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80048a4:	46c0      	nop			; (mov r8, r8)
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b002      	add	sp, #8
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80048b4:	46c0      	nop			; (mov r8, r8)
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b002      	add	sp, #8
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80048c4:	46c0      	nop			; (mov r8, r8)
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b002      	add	sp, #8
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048d6:	230f      	movs	r3, #15
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	2200      	movs	r2, #0
 80048dc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e6:	2380      	movs	r3, #128	; 0x80
 80048e8:	055b      	lsls	r3, r3, #21
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d011      	beq.n	8004912 <HAL_ADC_ConfigChannel+0x46>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d00d      	beq.n	8004912 <HAL_ADC_ConfigChannel+0x46>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d009      	beq.n	8004912 <HAL_ADC_ConfigChannel+0x46>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	2b03      	cmp	r3, #3
 8004904:	d005      	beq.n	8004912 <HAL_ADC_ConfigChannel+0x46>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	2b04      	cmp	r3, #4
 800490c:	d001      	beq.n	8004912 <HAL_ADC_ConfigChannel+0x46>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2234      	movs	r2, #52	; 0x34
 8004916:	5c9b      	ldrb	r3, [r3, r2]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x54>
 800491c:	2302      	movs	r3, #2
 800491e:	e0d0      	b.n	8004ac2 <HAL_ADC_ConfigChannel+0x1f6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2234      	movs	r2, #52	; 0x34
 8004924:	2101      	movs	r1, #1
 8004926:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2204      	movs	r2, #4
 8004930:	4013      	ands	r3, r2
 8004932:	d000      	beq.n	8004936 <HAL_ADC_ConfigChannel+0x6a>
 8004934:	e0b4      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4a64      	ldr	r2, [pc, #400]	; (8004acc <HAL_ADC_ConfigChannel+0x200>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d100      	bne.n	8004942 <HAL_ADC_ConfigChannel+0x76>
 8004940:	e082      	b.n	8004a48 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2201      	movs	r2, #1
 800494e:	409a      	lsls	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495c:	2380      	movs	r3, #128	; 0x80
 800495e:	055b      	lsls	r3, r3, #21
 8004960:	429a      	cmp	r2, r3
 8004962:	d037      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	2b01      	cmp	r3, #1
 800496a:	d033      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	2b02      	cmp	r3, #2
 8004972:	d02f      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	2b03      	cmp	r3, #3
 800497a:	d02b      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	2b04      	cmp	r3, #4
 8004982:	d027      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	2b05      	cmp	r3, #5
 800498a:	d023      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	2b06      	cmp	r3, #6
 8004992:	d01f      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	2b07      	cmp	r3, #7
 800499a:	d01b      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	2107      	movs	r1, #7
 80049a8:	400b      	ands	r3, r1
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d012      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2107      	movs	r1, #7
 80049ba:	438a      	bics	r2, r1
 80049bc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6959      	ldr	r1, [r3, #20]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2207      	movs	r2, #7
 80049ca:	401a      	ands	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b10      	cmp	r3, #16
 80049da:	d007      	beq.n	80049ec <HAL_ADC_ConfigChannel+0x120>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b11      	cmp	r3, #17
 80049e2:	d003      	beq.n	80049ec <HAL_ADC_ConfigChannel+0x120>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b12      	cmp	r3, #18
 80049ea:	d163      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80049ec:	4b38      	ldr	r3, [pc, #224]	; (8004ad0 <HAL_ADC_ConfigChannel+0x204>)
 80049ee:	6819      	ldr	r1, [r3, #0]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d009      	beq.n	8004a0c <HAL_ADC_ConfigChannel+0x140>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b11      	cmp	r3, #17
 80049fe:	d102      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x13a>
 8004a00:	2380      	movs	r3, #128	; 0x80
 8004a02:	03db      	lsls	r3, r3, #15
 8004a04:	e004      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x144>
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	045b      	lsls	r3, r3, #17
 8004a0a:	e001      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x144>
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	041b      	lsls	r3, r3, #16
 8004a10:	4a2f      	ldr	r2, [pc, #188]	; (8004ad0 <HAL_ADC_ConfigChannel+0x204>)
 8004a12:	430b      	orrs	r3, r1
 8004a14:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b10      	cmp	r3, #16
 8004a1c:	d14a      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a1e:	4b2d      	ldr	r3, [pc, #180]	; (8004ad4 <HAL_ADC_ConfigChannel+0x208>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	492d      	ldr	r1, [pc, #180]	; (8004ad8 <HAL_ADC_ConfigChannel+0x20c>)
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7fb fb8b 	bl	8000140 <__udivsi3>
 8004a2a:	0003      	movs	r3, r0
 8004a2c:	001a      	movs	r2, r3
 8004a2e:	0013      	movs	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	189b      	adds	r3, r3, r2
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004a38:	e002      	b.n	8004a40 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f9      	bne.n	8004a3a <HAL_ADC_ConfigChannel+0x16e>
 8004a46:	e035      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2101      	movs	r1, #1
 8004a54:	4099      	lsls	r1, r3
 8004a56:	000b      	movs	r3, r1
 8004a58:	43d9      	mvns	r1, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	400a      	ands	r2, r1
 8004a60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d007      	beq.n	8004a7a <HAL_ADC_ConfigChannel+0x1ae>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b11      	cmp	r3, #17
 8004a70:	d003      	beq.n	8004a7a <HAL_ADC_ConfigChannel+0x1ae>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b12      	cmp	r3, #18
 8004a78:	d11c      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004a7a:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <HAL_ADC_ConfigChannel+0x204>)
 8004a7c:	6819      	ldr	r1, [r3, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d007      	beq.n	8004a96 <HAL_ADC_ConfigChannel+0x1ca>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b11      	cmp	r3, #17
 8004a8c:	d101      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x1c6>
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <HAL_ADC_ConfigChannel+0x210>)
 8004a90:	e002      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x1cc>
 8004a92:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <HAL_ADC_ConfigChannel+0x214>)
 8004a94:	e000      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x1cc>
 8004a96:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <HAL_ADC_ConfigChannel+0x218>)
 8004a98:	4a0d      	ldr	r2, [pc, #52]	; (8004ad0 <HAL_ADC_ConfigChannel+0x204>)
 8004a9a:	400b      	ands	r3, r1
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	e009      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004aac:	230f      	movs	r3, #15
 8004aae:	18fb      	adds	r3, r7, r3
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2234      	movs	r2, #52	; 0x34
 8004ab8:	2100      	movs	r1, #0
 8004aba:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004abc:	230f      	movs	r3, #15
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	781b      	ldrb	r3, [r3, #0]
}
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	b004      	add	sp, #16
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	00001001 	.word	0x00001001
 8004ad0:	40012708 	.word	0x40012708
 8004ad4:	20000024 	.word	0x20000024
 8004ad8:	000f4240 	.word	0x000f4240
 8004adc:	ffbfffff 	.word	0xffbfffff
 8004ae0:	feffffff 	.word	0xfeffffff
 8004ae4:	ff7fffff 	.word	0xff7fffff

08004ae8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	2203      	movs	r2, #3
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d112      	bne.n	8004b2c <ADC_Enable+0x44>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d009      	beq.n	8004b28 <ADC_Enable+0x40>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	2380      	movs	r3, #128	; 0x80
 8004b1c:	021b      	lsls	r3, r3, #8
 8004b1e:	401a      	ands	r2, r3
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d101      	bne.n	8004b2c <ADC_Enable+0x44>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <ADC_Enable+0x46>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d152      	bne.n	8004bd8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4a2a      	ldr	r2, [pc, #168]	; (8004be4 <ADC_Enable+0xfc>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d00d      	beq.n	8004b5a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	2210      	movs	r2, #16
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4e:	2201      	movs	r2, #1
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e03f      	b.n	8004bda <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2101      	movs	r1, #1
 8004b66:	430a      	orrs	r2, r1
 8004b68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b6a:	4b1f      	ldr	r3, [pc, #124]	; (8004be8 <ADC_Enable+0x100>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	491f      	ldr	r1, [pc, #124]	; (8004bec <ADC_Enable+0x104>)
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7fb fae5 	bl	8000140 <__udivsi3>
 8004b76:	0003      	movs	r3, r0
 8004b78:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004b7a:	e002      	b.n	8004b82 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f9      	bne.n	8004b7c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b88:	f7ff fcbc 	bl	8004504 <HAL_GetTick>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b90:	e01b      	b.n	8004bca <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b92:	f7ff fcb7 	bl	8004504 <HAL_GetTick>
 8004b96:	0002      	movs	r2, r0
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d914      	bls.n	8004bca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d00d      	beq.n	8004bca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e007      	b.n	8004bda <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d1dc      	bne.n	8004b92 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	0018      	movs	r0, r3
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b004      	add	sp, #16
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	80000017 	.word	0x80000017
 8004be8:	20000024 	.word	0x20000024
 8004bec:	000f4240 	.word	0x000f4240

08004bf0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	2250      	movs	r2, #80	; 0x50
 8004c04:	4013      	ands	r3, r2
 8004c06:	d140      	bne.n	8004c8a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	2280      	movs	r2, #128	; 0x80
 8004c0e:	0092      	lsls	r2, r2, #2
 8004c10:	431a      	orrs	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	23c0      	movs	r3, #192	; 0xc0
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	4013      	ands	r3, r2
 8004c22:	d12d      	bne.n	8004c80 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d129      	bne.n	8004c80 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2208      	movs	r2, #8
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d122      	bne.n	8004c80 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2204      	movs	r2, #4
 8004c42:	4013      	ands	r3, r2
 8004c44:	d110      	bne.n	8004c68 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	210c      	movs	r1, #12
 8004c52:	438a      	bics	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	4a11      	ldr	r2, [pc, #68]	; (8004ca0 <ADC_DMAConvCplt+0xb0>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2201      	movs	r2, #1
 8004c60:	431a      	orrs	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
 8004c66:	e00b      	b.n	8004c80 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c78:	2201      	movs	r2, #1
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	0018      	movs	r0, r3
 8004c84:	f7ff fe0a 	bl	800489c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8004c88:	e005      	b.n	8004c96 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	0010      	movs	r0, r2
 8004c94:	4798      	blx	r3
}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b004      	add	sp, #16
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	fffffefe 	.word	0xfffffefe

08004ca4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f7ff fdf9 	bl	80048ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b004      	add	sp, #16
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	2240      	movs	r2, #64	; 0x40
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	0018      	movs	r0, r3
 8004cec:	f7ff fde6 	bl	80048bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cf0:	46c0      	nop			; (mov r8, r8)
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b004      	add	sp, #16
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	0002      	movs	r2, r0
 8004d00:	1dfb      	adds	r3, r7, #7
 8004d02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d04:	1dfb      	adds	r3, r7, #7
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b7f      	cmp	r3, #127	; 0x7f
 8004d0a:	d809      	bhi.n	8004d20 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d0c:	1dfb      	adds	r3, r7, #7
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	001a      	movs	r2, r3
 8004d12:	231f      	movs	r3, #31
 8004d14:	401a      	ands	r2, r3
 8004d16:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <__NVIC_EnableIRQ+0x30>)
 8004d18:	2101      	movs	r1, #1
 8004d1a:	4091      	lsls	r1, r2
 8004d1c:	000a      	movs	r2, r1
 8004d1e:	601a      	str	r2, [r3, #0]
  }
}
 8004d20:	46c0      	nop			; (mov r8, r8)
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b002      	add	sp, #8
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	e000e100 	.word	0xe000e100

08004d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	0002      	movs	r2, r0
 8004d34:	6039      	str	r1, [r7, #0]
 8004d36:	1dfb      	adds	r3, r7, #7
 8004d38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d3a:	1dfb      	adds	r3, r7, #7
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d40:	d828      	bhi.n	8004d94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d42:	4a2f      	ldr	r2, [pc, #188]	; (8004e00 <__NVIC_SetPriority+0xd4>)
 8004d44:	1dfb      	adds	r3, r7, #7
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	b25b      	sxtb	r3, r3
 8004d4a:	089b      	lsrs	r3, r3, #2
 8004d4c:	33c0      	adds	r3, #192	; 0xc0
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	589b      	ldr	r3, [r3, r2]
 8004d52:	1dfa      	adds	r2, r7, #7
 8004d54:	7812      	ldrb	r2, [r2, #0]
 8004d56:	0011      	movs	r1, r2
 8004d58:	2203      	movs	r2, #3
 8004d5a:	400a      	ands	r2, r1
 8004d5c:	00d2      	lsls	r2, r2, #3
 8004d5e:	21ff      	movs	r1, #255	; 0xff
 8004d60:	4091      	lsls	r1, r2
 8004d62:	000a      	movs	r2, r1
 8004d64:	43d2      	mvns	r2, r2
 8004d66:	401a      	ands	r2, r3
 8004d68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	019b      	lsls	r3, r3, #6
 8004d6e:	22ff      	movs	r2, #255	; 0xff
 8004d70:	401a      	ands	r2, r3
 8004d72:	1dfb      	adds	r3, r7, #7
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	0018      	movs	r0, r3
 8004d78:	2303      	movs	r3, #3
 8004d7a:	4003      	ands	r3, r0
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d80:	481f      	ldr	r0, [pc, #124]	; (8004e00 <__NVIC_SetPriority+0xd4>)
 8004d82:	1dfb      	adds	r3, r7, #7
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	b25b      	sxtb	r3, r3
 8004d88:	089b      	lsrs	r3, r3, #2
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	33c0      	adds	r3, #192	; 0xc0
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004d92:	e031      	b.n	8004df8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d94:	4a1b      	ldr	r2, [pc, #108]	; (8004e04 <__NVIC_SetPriority+0xd8>)
 8004d96:	1dfb      	adds	r3, r7, #7
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	230f      	movs	r3, #15
 8004d9e:	400b      	ands	r3, r1
 8004da0:	3b08      	subs	r3, #8
 8004da2:	089b      	lsrs	r3, r3, #2
 8004da4:	3306      	adds	r3, #6
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	18d3      	adds	r3, r2, r3
 8004daa:	3304      	adds	r3, #4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	1dfa      	adds	r2, r7, #7
 8004db0:	7812      	ldrb	r2, [r2, #0]
 8004db2:	0011      	movs	r1, r2
 8004db4:	2203      	movs	r2, #3
 8004db6:	400a      	ands	r2, r1
 8004db8:	00d2      	lsls	r2, r2, #3
 8004dba:	21ff      	movs	r1, #255	; 0xff
 8004dbc:	4091      	lsls	r1, r2
 8004dbe:	000a      	movs	r2, r1
 8004dc0:	43d2      	mvns	r2, r2
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	019b      	lsls	r3, r3, #6
 8004dca:	22ff      	movs	r2, #255	; 0xff
 8004dcc:	401a      	ands	r2, r3
 8004dce:	1dfb      	adds	r3, r7, #7
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	4003      	ands	r3, r0
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ddc:	4809      	ldr	r0, [pc, #36]	; (8004e04 <__NVIC_SetPriority+0xd8>)
 8004dde:	1dfb      	adds	r3, r7, #7
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	001c      	movs	r4, r3
 8004de4:	230f      	movs	r3, #15
 8004de6:	4023      	ands	r3, r4
 8004de8:	3b08      	subs	r3, #8
 8004dea:	089b      	lsrs	r3, r3, #2
 8004dec:	430a      	orrs	r2, r1
 8004dee:	3306      	adds	r3, #6
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	18c3      	adds	r3, r0, r3
 8004df4:	3304      	adds	r3, #4
 8004df6:	601a      	str	r2, [r3, #0]
}
 8004df8:	46c0      	nop			; (mov r8, r8)
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b003      	add	sp, #12
 8004dfe:	bd90      	pop	{r4, r7, pc}
 8004e00:	e000e100 	.word	0xe000e100
 8004e04:	e000ed00 	.word	0xe000ed00

08004e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	1e5a      	subs	r2, r3, #1
 8004e14:	2380      	movs	r3, #128	; 0x80
 8004e16:	045b      	lsls	r3, r3, #17
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d301      	bcc.n	8004e20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e010      	b.n	8004e42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e20:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <SysTick_Config+0x44>)
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	3a01      	subs	r2, #1
 8004e26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e28:	2301      	movs	r3, #1
 8004e2a:	425b      	negs	r3, r3
 8004e2c:	2103      	movs	r1, #3
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f7ff ff7c 	bl	8004d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <SysTick_Config+0x44>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e3a:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <SysTick_Config+0x44>)
 8004e3c:	2207      	movs	r2, #7
 8004e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	0018      	movs	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	b002      	add	sp, #8
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	e000e010 	.word	0xe000e010

08004e50 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
 8004e5a:	210f      	movs	r1, #15
 8004e5c:	187b      	adds	r3, r7, r1
 8004e5e:	1c02      	adds	r2, r0, #0
 8004e60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	187b      	adds	r3, r7, r1
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	b25b      	sxtb	r3, r3
 8004e6a:	0011      	movs	r1, r2
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f7ff ff5d 	bl	8004d2c <__NVIC_SetPriority>
}
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b004      	add	sp, #16
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b082      	sub	sp, #8
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	0002      	movs	r2, r0
 8004e82:	1dfb      	adds	r3, r7, #7
 8004e84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e86:	1dfb      	adds	r3, r7, #7
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	b25b      	sxtb	r3, r3
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f7ff ff33 	bl	8004cf8 <__NVIC_EnableIRQ>
}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	46bd      	mov	sp, r7
 8004e96:	b002      	add	sp, #8
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f7ff ffaf 	bl	8004e08 <SysTick_Config>
 8004eaa:	0003      	movs	r3, r0
}
 8004eac:	0018      	movs	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b002      	add	sp, #8
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e036      	b.n	8004f38 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2221      	movs	r2, #33	; 0x21
 8004ece:	2102      	movs	r1, #2
 8004ed0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4a18      	ldr	r2, [pc, #96]	; (8004f40 <HAL_DMA_Init+0x8c>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f000 f9c4 	bl	80052a8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2221      	movs	r2, #33	; 0x21
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	2100      	movs	r1, #0
 8004f34:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}  
 8004f38:	0018      	movs	r0, r3
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	b004      	add	sp, #16
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	ffffc00f 	.word	0xffffc00f

08004f44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
 8004f50:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004f52:	2317      	movs	r3, #23
 8004f54:	18fb      	adds	r3, r7, r3
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	5c9b      	ldrb	r3, [r3, r2]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_DMA_Start_IT+0x24>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e04f      	b.n	8005008 <HAL_DMA_Start_IT+0xc4>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2221      	movs	r2, #33	; 0x21
 8004f74:	5c9b      	ldrb	r3, [r3, r2]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d13a      	bne.n	8004ff2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2221      	movs	r2, #33	; 0x21
 8004f80:	2102      	movs	r1, #2
 8004f82:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2101      	movs	r1, #1
 8004f96:	438a      	bics	r2, r1
 8004f98:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f954 	bl	800524e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d008      	beq.n	8004fc0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	210e      	movs	r1, #14
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	e00f      	b.n	8004fe0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	210a      	movs	r1, #10
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2104      	movs	r1, #4
 8004fdc:	438a      	bics	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2101      	movs	r1, #1
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	e007      	b.n	8005002 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004ffa:	2317      	movs	r3, #23
 8004ffc:	18fb      	adds	r3, r7, r3
 8004ffe:	2202      	movs	r2, #2
 8005000:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8005002:	2317      	movs	r3, #23
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	781b      	ldrb	r3, [r3, #0]
} 
 8005008:	0018      	movs	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	b006      	add	sp, #24
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2221      	movs	r2, #33	; 0x21
 800501c:	5c9b      	ldrb	r3, [r3, r2]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d008      	beq.n	8005036 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2204      	movs	r2, #4
 8005028:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2220      	movs	r2, #32
 800502e:	2100      	movs	r1, #0
 8005030:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e020      	b.n	8005078 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	210e      	movs	r1, #14
 8005042:	438a      	bics	r2, r1
 8005044:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2101      	movs	r1, #1
 8005052:	438a      	bics	r2, r1
 8005054:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505e:	2101      	movs	r1, #1
 8005060:	4091      	lsls	r1, r2
 8005062:	000a      	movs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2221      	movs	r2, #33	; 0x21
 800506a:	2101      	movs	r1, #1
 800506c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	2100      	movs	r1, #0
 8005074:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	0018      	movs	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	b002      	add	sp, #8
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005088:	210f      	movs	r1, #15
 800508a:	187b      	adds	r3, r7, r1
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2221      	movs	r2, #33	; 0x21
 8005094:	5c9b      	ldrb	r3, [r3, r2]
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d006      	beq.n	80050aa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2204      	movs	r2, #4
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80050a2:	187b      	adds	r3, r7, r1
 80050a4:	2201      	movs	r2, #1
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	e028      	b.n	80050fc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	210e      	movs	r1, #14
 80050b6:	438a      	bics	r2, r1
 80050b8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2101      	movs	r1, #1
 80050c6:	438a      	bics	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d2:	2101      	movs	r1, #1
 80050d4:	4091      	lsls	r1, r2
 80050d6:	000a      	movs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2221      	movs	r2, #33	; 0x21
 80050de:	2101      	movs	r1, #1
 80050e0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	2100      	movs	r1, #0
 80050e8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d004      	beq.n	80050fc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	0010      	movs	r0, r2
 80050fa:	4798      	blx	r3
    } 
  }
  return status;
 80050fc:	230f      	movs	r3, #15
 80050fe:	18fb      	adds	r3, r7, r3
 8005100:	781b      	ldrb	r3, [r3, #0]
}
 8005102:	0018      	movs	r0, r3
 8005104:	46bd      	mov	sp, r7
 8005106:	b004      	add	sp, #16
 8005108:	bd80      	pop	{r7, pc}

0800510a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	2204      	movs	r2, #4
 8005128:	409a      	lsls	r2, r3
 800512a:	0013      	movs	r3, r2
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4013      	ands	r3, r2
 8005130:	d024      	beq.n	800517c <HAL_DMA_IRQHandler+0x72>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2204      	movs	r2, #4
 8005136:	4013      	ands	r3, r2
 8005138:	d020      	beq.n	800517c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2220      	movs	r2, #32
 8005142:	4013      	ands	r3, r2
 8005144:	d107      	bne.n	8005156 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2104      	movs	r1, #4
 8005152:	438a      	bics	r2, r1
 8005154:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	2104      	movs	r1, #4
 8005160:	4091      	lsls	r1, r2
 8005162:	000a      	movs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	2b00      	cmp	r3, #0
 800516c:	d100      	bne.n	8005170 <HAL_DMA_IRQHandler+0x66>
 800516e:	e06a      	b.n	8005246 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	0010      	movs	r0, r2
 8005178:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800517a:	e064      	b.n	8005246 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	2202      	movs	r2, #2
 8005182:	409a      	lsls	r2, r3
 8005184:	0013      	movs	r3, r2
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4013      	ands	r3, r2
 800518a:	d02b      	beq.n	80051e4 <HAL_DMA_IRQHandler+0xda>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2202      	movs	r2, #2
 8005190:	4013      	ands	r3, r2
 8005192:	d027      	beq.n	80051e4 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2220      	movs	r2, #32
 800519c:	4013      	ands	r3, r2
 800519e:	d10b      	bne.n	80051b8 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	210a      	movs	r1, #10
 80051ac:	438a      	bics	r2, r1
 80051ae:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2221      	movs	r2, #33	; 0x21
 80051b4:	2101      	movs	r1, #1
 80051b6:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c0:	2102      	movs	r1, #2
 80051c2:	4091      	lsls	r1, r2
 80051c4:	000a      	movs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	2100      	movs	r1, #0
 80051ce:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d036      	beq.n	8005246 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	0010      	movs	r0, r2
 80051e0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80051e2:	e030      	b.n	8005246 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	2208      	movs	r2, #8
 80051ea:	409a      	lsls	r2, r3
 80051ec:	0013      	movs	r3, r2
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4013      	ands	r3, r2
 80051f2:	d028      	beq.n	8005246 <HAL_DMA_IRQHandler+0x13c>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2208      	movs	r2, #8
 80051f8:	4013      	ands	r3, r2
 80051fa:	d024      	beq.n	8005246 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	210e      	movs	r1, #14
 8005208:	438a      	bics	r2, r1
 800520a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	2101      	movs	r1, #1
 8005216:	4091      	lsls	r1, r2
 8005218:	000a      	movs	r2, r1
 800521a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2221      	movs	r2, #33	; 0x21
 8005226:	2101      	movs	r1, #1
 8005228:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	2100      	movs	r1, #0
 8005230:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	0010      	movs	r0, r2
 8005242:	4798      	blx	r3
    }
   }
}  
 8005244:	e7ff      	b.n	8005246 <HAL_DMA_IRQHandler+0x13c>
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	46bd      	mov	sp, r7
 800524a:	b004      	add	sp, #16
 800524c:	bd80      	pop	{r7, pc}

0800524e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	607a      	str	r2, [r7, #4]
 800525a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005264:	2101      	movs	r1, #1
 8005266:	4091      	lsls	r1, r2
 8005268:	000a      	movs	r2, r1
 800526a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b10      	cmp	r3, #16
 800527a:	d108      	bne.n	800528e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800528c:	e007      	b.n	800529e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	60da      	str	r2, [r3, #12]
}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b004      	add	sp, #16
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <DMA_CalcBaseAndBitshift+0x30>)
 80052b6:	4694      	mov	ip, r2
 80052b8:	4463      	add	r3, ip
 80052ba:	2114      	movs	r1, #20
 80052bc:	0018      	movs	r0, r3
 80052be:	f7fa ff3f 	bl	8000140 <__udivsi3>
 80052c2:	0003      	movs	r3, r0
 80052c4:	009a      	lsls	r2, r3, #2
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a03      	ldr	r2, [pc, #12]	; (80052dc <DMA_CalcBaseAndBitshift+0x34>)
 80052ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80052d0:	46c0      	nop			; (mov r8, r8)
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b002      	add	sp, #8
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	bffdfff8 	.word	0xbffdfff8
 80052dc:	40020000 	.word	0x40020000

080052e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052ee:	e14f      	b.n	8005590 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2101      	movs	r1, #1
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4091      	lsls	r1, r2
 80052fa:	000a      	movs	r2, r1
 80052fc:	4013      	ands	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d100      	bne.n	8005308 <HAL_GPIO_Init+0x28>
 8005306:	e140      	b.n	800558a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2203      	movs	r2, #3
 800530e:	4013      	ands	r3, r2
 8005310:	2b01      	cmp	r3, #1
 8005312:	d005      	beq.n	8005320 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2203      	movs	r2, #3
 800531a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800531c:	2b02      	cmp	r3, #2
 800531e:	d130      	bne.n	8005382 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	2203      	movs	r2, #3
 800532c:	409a      	lsls	r2, r3
 800532e:	0013      	movs	r3, r2
 8005330:	43da      	mvns	r2, r3
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	4013      	ands	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	409a      	lsls	r2, r3
 8005342:	0013      	movs	r3, r2
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005356:	2201      	movs	r2, #1
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	409a      	lsls	r2, r3
 800535c:	0013      	movs	r3, r2
 800535e:	43da      	mvns	r2, r3
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4013      	ands	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	091b      	lsrs	r3, r3, #4
 800536c:	2201      	movs	r2, #1
 800536e:	401a      	ands	r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	409a      	lsls	r2, r3
 8005374:	0013      	movs	r3, r2
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2203      	movs	r2, #3
 8005388:	4013      	ands	r3, r2
 800538a:	2b03      	cmp	r3, #3
 800538c:	d017      	beq.n	80053be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	2203      	movs	r2, #3
 800539a:	409a      	lsls	r2, r3
 800539c:	0013      	movs	r3, r2
 800539e:	43da      	mvns	r2, r3
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4013      	ands	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	409a      	lsls	r2, r3
 80053b0:	0013      	movs	r3, r2
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2203      	movs	r2, #3
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d123      	bne.n	8005412 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	08da      	lsrs	r2, r3, #3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3208      	adds	r2, #8
 80053d2:	0092      	lsls	r2, r2, #2
 80053d4:	58d3      	ldr	r3, [r2, r3]
 80053d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2207      	movs	r2, #7
 80053dc:	4013      	ands	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	220f      	movs	r2, #15
 80053e2:	409a      	lsls	r2, r3
 80053e4:	0013      	movs	r3, r2
 80053e6:	43da      	mvns	r2, r3
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	4013      	ands	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2107      	movs	r1, #7
 80053f6:	400b      	ands	r3, r1
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	409a      	lsls	r2, r3
 80053fc:	0013      	movs	r3, r2
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	08da      	lsrs	r2, r3, #3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3208      	adds	r2, #8
 800540c:	0092      	lsls	r2, r2, #2
 800540e:	6939      	ldr	r1, [r7, #16]
 8005410:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	2203      	movs	r2, #3
 800541e:	409a      	lsls	r2, r3
 8005420:	0013      	movs	r3, r2
 8005422:	43da      	mvns	r2, r3
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	4013      	ands	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2203      	movs	r2, #3
 8005430:	401a      	ands	r2, r3
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	409a      	lsls	r2, r3
 8005438:	0013      	movs	r3, r2
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	23c0      	movs	r3, #192	; 0xc0
 800544c:	029b      	lsls	r3, r3, #10
 800544e:	4013      	ands	r3, r2
 8005450:	d100      	bne.n	8005454 <HAL_GPIO_Init+0x174>
 8005452:	e09a      	b.n	800558a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005454:	4b54      	ldr	r3, [pc, #336]	; (80055a8 <HAL_GPIO_Init+0x2c8>)
 8005456:	699a      	ldr	r2, [r3, #24]
 8005458:	4b53      	ldr	r3, [pc, #332]	; (80055a8 <HAL_GPIO_Init+0x2c8>)
 800545a:	2101      	movs	r1, #1
 800545c:	430a      	orrs	r2, r1
 800545e:	619a      	str	r2, [r3, #24]
 8005460:	4b51      	ldr	r3, [pc, #324]	; (80055a8 <HAL_GPIO_Init+0x2c8>)
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	2201      	movs	r2, #1
 8005466:	4013      	ands	r3, r2
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800546c:	4a4f      	ldr	r2, [pc, #316]	; (80055ac <HAL_GPIO_Init+0x2cc>)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	089b      	lsrs	r3, r3, #2
 8005472:	3302      	adds	r3, #2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	589b      	ldr	r3, [r3, r2]
 8005478:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2203      	movs	r2, #3
 800547e:	4013      	ands	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	220f      	movs	r2, #15
 8005484:	409a      	lsls	r2, r3
 8005486:	0013      	movs	r3, r2
 8005488:	43da      	mvns	r2, r3
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	4013      	ands	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	2390      	movs	r3, #144	; 0x90
 8005494:	05db      	lsls	r3, r3, #23
 8005496:	429a      	cmp	r2, r3
 8005498:	d013      	beq.n	80054c2 <HAL_GPIO_Init+0x1e2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a44      	ldr	r2, [pc, #272]	; (80055b0 <HAL_GPIO_Init+0x2d0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00d      	beq.n	80054be <HAL_GPIO_Init+0x1de>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a43      	ldr	r2, [pc, #268]	; (80055b4 <HAL_GPIO_Init+0x2d4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d007      	beq.n	80054ba <HAL_GPIO_Init+0x1da>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a42      	ldr	r2, [pc, #264]	; (80055b8 <HAL_GPIO_Init+0x2d8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d101      	bne.n	80054b6 <HAL_GPIO_Init+0x1d6>
 80054b2:	2303      	movs	r3, #3
 80054b4:	e006      	b.n	80054c4 <HAL_GPIO_Init+0x1e4>
 80054b6:	2305      	movs	r3, #5
 80054b8:	e004      	b.n	80054c4 <HAL_GPIO_Init+0x1e4>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e002      	b.n	80054c4 <HAL_GPIO_Init+0x1e4>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <HAL_GPIO_Init+0x1e4>
 80054c2:	2300      	movs	r3, #0
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	2103      	movs	r1, #3
 80054c8:	400a      	ands	r2, r1
 80054ca:	0092      	lsls	r2, r2, #2
 80054cc:	4093      	lsls	r3, r2
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80054d4:	4935      	ldr	r1, [pc, #212]	; (80055ac <HAL_GPIO_Init+0x2cc>)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	089b      	lsrs	r3, r3, #2
 80054da:	3302      	adds	r3, #2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054e2:	4b36      	ldr	r3, [pc, #216]	; (80055bc <HAL_GPIO_Init+0x2dc>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	43da      	mvns	r2, r3
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	4013      	ands	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	2380      	movs	r3, #128	; 0x80
 80054f8:	025b      	lsls	r3, r3, #9
 80054fa:	4013      	ands	r3, r2
 80054fc:	d003      	beq.n	8005506 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005506:	4b2d      	ldr	r3, [pc, #180]	; (80055bc <HAL_GPIO_Init+0x2dc>)
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800550c:	4b2b      	ldr	r3, [pc, #172]	; (80055bc <HAL_GPIO_Init+0x2dc>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	43da      	mvns	r2, r3
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	4013      	ands	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	2380      	movs	r3, #128	; 0x80
 8005522:	029b      	lsls	r3, r3, #10
 8005524:	4013      	ands	r3, r2
 8005526:	d003      	beq.n	8005530 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005530:	4b22      	ldr	r3, [pc, #136]	; (80055bc <HAL_GPIO_Init+0x2dc>)
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005536:	4b21      	ldr	r3, [pc, #132]	; (80055bc <HAL_GPIO_Init+0x2dc>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	43da      	mvns	r2, r3
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4013      	ands	r3, r2
 8005544:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	2380      	movs	r3, #128	; 0x80
 800554c:	035b      	lsls	r3, r3, #13
 800554e:	4013      	ands	r3, r2
 8005550:	d003      	beq.n	800555a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800555a:	4b18      	ldr	r3, [pc, #96]	; (80055bc <HAL_GPIO_Init+0x2dc>)
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005560:	4b16      	ldr	r3, [pc, #88]	; (80055bc <HAL_GPIO_Init+0x2dc>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	43da      	mvns	r2, r3
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	4013      	ands	r3, r2
 800556e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	2380      	movs	r3, #128	; 0x80
 8005576:	039b      	lsls	r3, r3, #14
 8005578:	4013      	ands	r3, r2
 800557a:	d003      	beq.n	8005584 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005584:	4b0d      	ldr	r3, [pc, #52]	; (80055bc <HAL_GPIO_Init+0x2dc>)
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	3301      	adds	r3, #1
 800558e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	40da      	lsrs	r2, r3
 8005598:	1e13      	subs	r3, r2, #0
 800559a:	d000      	beq.n	800559e <HAL_GPIO_Init+0x2be>
 800559c:	e6a8      	b.n	80052f0 <HAL_GPIO_Init+0x10>
  } 
}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	46c0      	nop			; (mov r8, r8)
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b006      	add	sp, #24
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40021000 	.word	0x40021000
 80055ac:	40010000 	.word	0x40010000
 80055b0:	48000400 	.word	0x48000400
 80055b4:	48000800 	.word	0x48000800
 80055b8:	48000c00 	.word	0x48000c00
 80055bc:	40010400 	.word	0x40010400

080055c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	000a      	movs	r2, r1
 80055ca:	1cbb      	adds	r3, r7, #2
 80055cc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	1cba      	adds	r2, r7, #2
 80055d4:	8812      	ldrh	r2, [r2, #0]
 80055d6:	4013      	ands	r3, r2
 80055d8:	d004      	beq.n	80055e4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80055da:	230f      	movs	r3, #15
 80055dc:	18fb      	adds	r3, r7, r3
 80055de:	2201      	movs	r2, #1
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	e003      	b.n	80055ec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055e4:	230f      	movs	r3, #15
 80055e6:	18fb      	adds	r3, r7, r3
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80055ec:	230f      	movs	r3, #15
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	781b      	ldrb	r3, [r3, #0]
  }
 80055f2:	0018      	movs	r0, r3
 80055f4:	46bd      	mov	sp, r7
 80055f6:	b004      	add	sp, #16
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	0008      	movs	r0, r1
 8005604:	0011      	movs	r1, r2
 8005606:	1cbb      	adds	r3, r7, #2
 8005608:	1c02      	adds	r2, r0, #0
 800560a:	801a      	strh	r2, [r3, #0]
 800560c:	1c7b      	adds	r3, r7, #1
 800560e:	1c0a      	adds	r2, r1, #0
 8005610:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005612:	1c7b      	adds	r3, r7, #1
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d004      	beq.n	8005624 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800561a:	1cbb      	adds	r3, r7, #2
 800561c:	881a      	ldrh	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005622:	e003      	b.n	800562c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005624:	1cbb      	adds	r3, r7, #2
 8005626:	881a      	ldrh	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800562c:	46c0      	nop			; (mov r8, r8)
 800562e:	46bd      	mov	sp, r7
 8005630:	b002      	add	sp, #8
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	000a      	movs	r2, r1
 800563e:	1cbb      	adds	r3, r7, #2
 8005640:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005648:	1cbb      	adds	r3, r7, #2
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4013      	ands	r3, r2
 8005650:	041a      	lsls	r2, r3, #16
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	43db      	mvns	r3, r3
 8005656:	1cb9      	adds	r1, r7, #2
 8005658:	8809      	ldrh	r1, [r1, #0]
 800565a:	400b      	ands	r3, r1
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	619a      	str	r2, [r3, #24]
}
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	46bd      	mov	sp, r7
 8005666:	b004      	add	sp, #16
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e082      	b.n	8005784 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2241      	movs	r2, #65	; 0x41
 8005682:	5c9b      	ldrb	r3, [r3, r2]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d107      	bne.n	800569a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2240      	movs	r2, #64	; 0x40
 800568e:	2100      	movs	r1, #0
 8005690:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	0018      	movs	r0, r3
 8005696:	f7fe fd19 	bl	80040cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2241      	movs	r2, #65	; 0x41
 800569e:	2124      	movs	r1, #36	; 0x24
 80056a0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2101      	movs	r1, #1
 80056ae:	438a      	bics	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4934      	ldr	r1, [pc, #208]	; (800578c <HAL_I2C_Init+0x120>)
 80056bc:	400a      	ands	r2, r1
 80056be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4931      	ldr	r1, [pc, #196]	; (8005790 <HAL_I2C_Init+0x124>)
 80056cc:	400a      	ands	r2, r1
 80056ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d108      	bne.n	80056ea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2180      	movs	r1, #128	; 0x80
 80056e2:	0209      	lsls	r1, r1, #8
 80056e4:	430a      	orrs	r2, r1
 80056e6:	609a      	str	r2, [r3, #8]
 80056e8:	e007      	b.n	80056fa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2184      	movs	r1, #132	; 0x84
 80056f4:	0209      	lsls	r1, r1, #8
 80056f6:	430a      	orrs	r2, r1
 80056f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d104      	bne.n	800570c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	0112      	lsls	r2, r2, #4
 800570a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	491f      	ldr	r1, [pc, #124]	; (8005794 <HAL_I2C_Init+0x128>)
 8005718:	430a      	orrs	r2, r1
 800571a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	491a      	ldr	r1, [pc, #104]	; (8005790 <HAL_I2C_Init+0x124>)
 8005728:	400a      	ands	r2, r1
 800572a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	431a      	orrs	r2, r3
 8005736:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69d9      	ldr	r1, [r3, #28]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1a      	ldr	r2, [r3, #32]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2101      	movs	r1, #1
 8005762:	430a      	orrs	r2, r1
 8005764:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2241      	movs	r2, #65	; 0x41
 8005770:	2120      	movs	r1, #32
 8005772:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2242      	movs	r2, #66	; 0x42
 800577e:	2100      	movs	r1, #0
 8005780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	0018      	movs	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	b002      	add	sp, #8
 800578a:	bd80      	pop	{r7, pc}
 800578c:	f0ffffff 	.word	0xf0ffffff
 8005790:	ffff7fff 	.word	0xffff7fff
 8005794:	02008000 	.word	0x02008000

08005798 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005798:	b590      	push	{r4, r7, lr}
 800579a:	b089      	sub	sp, #36	; 0x24
 800579c:	af02      	add	r7, sp, #8
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	0008      	movs	r0, r1
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	0019      	movs	r1, r3
 80057a6:	230a      	movs	r3, #10
 80057a8:	18fb      	adds	r3, r7, r3
 80057aa:	1c02      	adds	r2, r0, #0
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	2308      	movs	r3, #8
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	1c0a      	adds	r2, r1, #0
 80057b4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2241      	movs	r2, #65	; 0x41
 80057ba:	5c9b      	ldrb	r3, [r3, r2]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b20      	cmp	r3, #32
 80057c0:	d000      	beq.n	80057c4 <HAL_I2C_Master_Transmit+0x2c>
 80057c2:	e0e7      	b.n	8005994 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2240      	movs	r2, #64	; 0x40
 80057c8:	5c9b      	ldrb	r3, [r3, r2]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_I2C_Master_Transmit+0x3a>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e0e1      	b.n	8005996 <HAL_I2C_Master_Transmit+0x1fe>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2240      	movs	r2, #64	; 0x40
 80057d6:	2101      	movs	r1, #1
 80057d8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057da:	f7fe fe93 	bl	8004504 <HAL_GetTick>
 80057de:	0003      	movs	r3, r0
 80057e0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057e2:	2380      	movs	r3, #128	; 0x80
 80057e4:	0219      	lsls	r1, r3, #8
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	2319      	movs	r3, #25
 80057ee:	2201      	movs	r2, #1
 80057f0:	f000 fa04 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 80057f4:	1e03      	subs	r3, r0, #0
 80057f6:	d001      	beq.n	80057fc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0cc      	b.n	8005996 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2241      	movs	r2, #65	; 0x41
 8005800:	2121      	movs	r1, #33	; 0x21
 8005802:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2242      	movs	r2, #66	; 0x42
 8005808:	2110      	movs	r1, #16
 800580a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2208      	movs	r2, #8
 800581c:	18ba      	adds	r2, r7, r2
 800581e:	8812      	ldrh	r2, [r2, #0]
 8005820:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582c:	b29b      	uxth	r3, r3
 800582e:	2bff      	cmp	r3, #255	; 0xff
 8005830:	d911      	bls.n	8005856 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	22ff      	movs	r2, #255	; 0xff
 8005836:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	b2da      	uxtb	r2, r3
 800583e:	2380      	movs	r3, #128	; 0x80
 8005840:	045c      	lsls	r4, r3, #17
 8005842:	230a      	movs	r3, #10
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	8819      	ldrh	r1, [r3, #0]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	4b55      	ldr	r3, [pc, #340]	; (80059a0 <HAL_I2C_Master_Transmit+0x208>)
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	0023      	movs	r3, r4
 8005850:	f000 fb74 	bl	8005f3c <I2C_TransferConfig>
 8005854:	e075      	b.n	8005942 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585a:	b29a      	uxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005864:	b2da      	uxtb	r2, r3
 8005866:	2380      	movs	r3, #128	; 0x80
 8005868:	049c      	lsls	r4, r3, #18
 800586a:	230a      	movs	r3, #10
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	8819      	ldrh	r1, [r3, #0]
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	4b4b      	ldr	r3, [pc, #300]	; (80059a0 <HAL_I2C_Master_Transmit+0x208>)
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	0023      	movs	r3, r4
 8005878:	f000 fb60 	bl	8005f3c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800587c:	e061      	b.n	8005942 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	0018      	movs	r0, r3
 8005886:	f000 f9f8 	bl	8005c7a <I2C_WaitOnTXISFlagUntilTimeout>
 800588a:	1e03      	subs	r3, r0, #0
 800588c:	d001      	beq.n	8005892 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e081      	b.n	8005996 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	781a      	ldrb	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d03a      	beq.n	8005942 <HAL_I2C_Master_Transmit+0x1aa>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d136      	bne.n	8005942 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	0013      	movs	r3, r2
 80058de:	2200      	movs	r2, #0
 80058e0:	2180      	movs	r1, #128	; 0x80
 80058e2:	f000 f98b 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 80058e6:	1e03      	subs	r3, r0, #0
 80058e8:	d001      	beq.n	80058ee <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e053      	b.n	8005996 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2bff      	cmp	r3, #255	; 0xff
 80058f6:	d911      	bls.n	800591c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	22ff      	movs	r2, #255	; 0xff
 80058fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005902:	b2da      	uxtb	r2, r3
 8005904:	2380      	movs	r3, #128	; 0x80
 8005906:	045c      	lsls	r4, r3, #17
 8005908:	230a      	movs	r3, #10
 800590a:	18fb      	adds	r3, r7, r3
 800590c:	8819      	ldrh	r1, [r3, #0]
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	2300      	movs	r3, #0
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	0023      	movs	r3, r4
 8005916:	f000 fb11 	bl	8005f3c <I2C_TransferConfig>
 800591a:	e012      	b.n	8005942 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005920:	b29a      	uxth	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800592a:	b2da      	uxtb	r2, r3
 800592c:	2380      	movs	r3, #128	; 0x80
 800592e:	049c      	lsls	r4, r3, #18
 8005930:	230a      	movs	r3, #10
 8005932:	18fb      	adds	r3, r7, r3
 8005934:	8819      	ldrh	r1, [r3, #0]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	2300      	movs	r3, #0
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	0023      	movs	r3, r4
 800593e:	f000 fafd 	bl	8005f3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005946:	b29b      	uxth	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d198      	bne.n	800587e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	0018      	movs	r0, r3
 8005954:	f000 f9d0 	bl	8005cf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005958:	1e03      	subs	r3, r0, #0
 800595a:	d001      	beq.n	8005960 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e01a      	b.n	8005996 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2220      	movs	r2, #32
 8005966:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	490c      	ldr	r1, [pc, #48]	; (80059a4 <HAL_I2C_Master_Transmit+0x20c>)
 8005974:	400a      	ands	r2, r1
 8005976:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2241      	movs	r2, #65	; 0x41
 800597c:	2120      	movs	r1, #32
 800597e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2242      	movs	r2, #66	; 0x42
 8005984:	2100      	movs	r1, #0
 8005986:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2240      	movs	r2, #64	; 0x40
 800598c:	2100      	movs	r1, #0
 800598e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	e000      	b.n	8005996 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005994:	2302      	movs	r3, #2
  }
}
 8005996:	0018      	movs	r0, r3
 8005998:	46bd      	mov	sp, r7
 800599a:	b007      	add	sp, #28
 800599c:	bd90      	pop	{r4, r7, pc}
 800599e:	46c0      	nop			; (mov r8, r8)
 80059a0:	80002000 	.word	0x80002000
 80059a4:	fe00e800 	.word	0xfe00e800

080059a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80059a8:	b590      	push	{r4, r7, lr}
 80059aa:	b089      	sub	sp, #36	; 0x24
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	0008      	movs	r0, r1
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	0019      	movs	r1, r3
 80059b6:	230a      	movs	r3, #10
 80059b8:	18fb      	adds	r3, r7, r3
 80059ba:	1c02      	adds	r2, r0, #0
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	2308      	movs	r3, #8
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	1c0a      	adds	r2, r1, #0
 80059c4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2241      	movs	r2, #65	; 0x41
 80059ca:	5c9b      	ldrb	r3, [r3, r2]
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d000      	beq.n	80059d4 <HAL_I2C_Master_Receive+0x2c>
 80059d2:	e0e8      	b.n	8005ba6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2240      	movs	r2, #64	; 0x40
 80059d8:	5c9b      	ldrb	r3, [r3, r2]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_I2C_Master_Receive+0x3a>
 80059de:	2302      	movs	r3, #2
 80059e0:	e0e2      	b.n	8005ba8 <HAL_I2C_Master_Receive+0x200>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2240      	movs	r2, #64	; 0x40
 80059e6:	2101      	movs	r1, #1
 80059e8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059ea:	f7fe fd8b 	bl	8004504 <HAL_GetTick>
 80059ee:	0003      	movs	r3, r0
 80059f0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059f2:	2380      	movs	r3, #128	; 0x80
 80059f4:	0219      	lsls	r1, r3, #8
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	2319      	movs	r3, #25
 80059fe:	2201      	movs	r2, #1
 8005a00:	f000 f8fc 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8005a04:	1e03      	subs	r3, r0, #0
 8005a06:	d001      	beq.n	8005a0c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e0cd      	b.n	8005ba8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2241      	movs	r2, #65	; 0x41
 8005a10:	2122      	movs	r1, #34	; 0x22
 8005a12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2242      	movs	r2, #66	; 0x42
 8005a18:	2110      	movs	r1, #16
 8005a1a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2208      	movs	r2, #8
 8005a2c:	18ba      	adds	r2, r7, r2
 8005a2e:	8812      	ldrh	r2, [r2, #0]
 8005a30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2bff      	cmp	r3, #255	; 0xff
 8005a40:	d911      	bls.n	8005a66 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	22ff      	movs	r2, #255	; 0xff
 8005a46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	2380      	movs	r3, #128	; 0x80
 8005a50:	045c      	lsls	r4, r3, #17
 8005a52:	230a      	movs	r3, #10
 8005a54:	18fb      	adds	r3, r7, r3
 8005a56:	8819      	ldrh	r1, [r3, #0]
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	4b55      	ldr	r3, [pc, #340]	; (8005bb0 <HAL_I2C_Master_Receive+0x208>)
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	0023      	movs	r3, r4
 8005a60:	f000 fa6c 	bl	8005f3c <I2C_TransferConfig>
 8005a64:	e076      	b.n	8005b54 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	2380      	movs	r3, #128	; 0x80
 8005a78:	049c      	lsls	r4, r3, #18
 8005a7a:	230a      	movs	r3, #10
 8005a7c:	18fb      	adds	r3, r7, r3
 8005a7e:	8819      	ldrh	r1, [r3, #0]
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	4b4b      	ldr	r3, [pc, #300]	; (8005bb0 <HAL_I2C_Master_Receive+0x208>)
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	0023      	movs	r3, r4
 8005a88:	f000 fa58 	bl	8005f3c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005a8c:	e062      	b.n	8005b54 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	0018      	movs	r0, r3
 8005a96:	f000 f96b 	bl	8005d70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a9a:	1e03      	subs	r3, r0, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e082      	b.n	8005ba8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d03a      	beq.n	8005b54 <HAL_I2C_Master_Receive+0x1ac>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d136      	bne.n	8005b54 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	0013      	movs	r3, r2
 8005af0:	2200      	movs	r2, #0
 8005af2:	2180      	movs	r1, #128	; 0x80
 8005af4:	f000 f882 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8005af8:	1e03      	subs	r3, r0, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e053      	b.n	8005ba8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2bff      	cmp	r3, #255	; 0xff
 8005b08:	d911      	bls.n	8005b2e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	22ff      	movs	r2, #255	; 0xff
 8005b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	2380      	movs	r3, #128	; 0x80
 8005b18:	045c      	lsls	r4, r3, #17
 8005b1a:	230a      	movs	r3, #10
 8005b1c:	18fb      	adds	r3, r7, r3
 8005b1e:	8819      	ldrh	r1, [r3, #0]
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	2300      	movs	r3, #0
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	0023      	movs	r3, r4
 8005b28:	f000 fa08 	bl	8005f3c <I2C_TransferConfig>
 8005b2c:	e012      	b.n	8005b54 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	2380      	movs	r3, #128	; 0x80
 8005b40:	049c      	lsls	r4, r3, #18
 8005b42:	230a      	movs	r3, #10
 8005b44:	18fb      	adds	r3, r7, r3
 8005b46:	8819      	ldrh	r1, [r3, #0]
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	0023      	movs	r3, r4
 8005b50:	f000 f9f4 	bl	8005f3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d197      	bne.n	8005a8e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	0018      	movs	r0, r3
 8005b66:	f000 f8c7 	bl	8005cf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b6a:	1e03      	subs	r3, r0, #0
 8005b6c:	d001      	beq.n	8005b72 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e01a      	b.n	8005ba8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2220      	movs	r2, #32
 8005b78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	490b      	ldr	r1, [pc, #44]	; (8005bb4 <HAL_I2C_Master_Receive+0x20c>)
 8005b86:	400a      	ands	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2241      	movs	r2, #65	; 0x41
 8005b8e:	2120      	movs	r1, #32
 8005b90:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2242      	movs	r2, #66	; 0x42
 8005b96:	2100      	movs	r1, #0
 8005b98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2240      	movs	r2, #64	; 0x40
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e000      	b.n	8005ba8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005ba6:	2302      	movs	r3, #2
  }
}
 8005ba8:	0018      	movs	r0, r3
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b007      	add	sp, #28
 8005bae:	bd90      	pop	{r4, r7, pc}
 8005bb0:	80002400 	.word	0x80002400
 8005bb4:	fe00e800 	.word	0xfe00e800

08005bb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	4013      	ands	r3, r2
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d103      	bne.n	8005bd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	4013      	ands	r3, r2
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d007      	beq.n	8005bf4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2101      	movs	r1, #1
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	619a      	str	r2, [r3, #24]
  }
}
 8005bf4:	46c0      	nop			; (mov r8, r8)
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	b002      	add	sp, #8
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	1dfb      	adds	r3, r7, #7
 8005c0a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c0c:	e021      	b.n	8005c52 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	3301      	adds	r3, #1
 8005c12:	d01e      	beq.n	8005c52 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c14:	f7fe fc76 	bl	8004504 <HAL_GetTick>
 8005c18:	0002      	movs	r2, r0
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d302      	bcc.n	8005c2a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d113      	bne.n	8005c52 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2e:	2220      	movs	r2, #32
 8005c30:	431a      	orrs	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2241      	movs	r2, #65	; 0x41
 8005c3a:	2120      	movs	r1, #32
 8005c3c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2242      	movs	r2, #66	; 0x42
 8005c42:	2100      	movs	r1, #0
 8005c44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2240      	movs	r2, #64	; 0x40
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e00f      	b.n	8005c72 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	425a      	negs	r2, r3
 8005c62:	4153      	adcs	r3, r2
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	001a      	movs	r2, r3
 8005c68:	1dfb      	adds	r3, r7, #7
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d0ce      	beq.n	8005c0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	0018      	movs	r0, r3
 8005c74:	46bd      	mov	sp, r7
 8005c76:	b004      	add	sp, #16
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c86:	e02b      	b.n	8005ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	68b9      	ldr	r1, [r7, #8]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	0018      	movs	r0, r3
 8005c90:	f000 f8da 	bl	8005e48 <I2C_IsAcknowledgeFailed>
 8005c94:	1e03      	subs	r3, r0, #0
 8005c96:	d001      	beq.n	8005c9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e029      	b.n	8005cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	d01e      	beq.n	8005ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca2:	f7fe fc2f 	bl	8004504 <HAL_GetTick>
 8005ca6:	0002      	movs	r2, r0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d302      	bcc.n	8005cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d113      	bne.n	8005ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2241      	movs	r2, #65	; 0x41
 8005cc8:	2120      	movs	r1, #32
 8005cca:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2242      	movs	r2, #66	; 0x42
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2240      	movs	r2, #64	; 0x40
 8005cd8:	2100      	movs	r1, #0
 8005cda:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e007      	b.n	8005cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	4013      	ands	r3, r2
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d1cc      	bne.n	8005c88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b004      	add	sp, #16
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d04:	e028      	b.n	8005d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	f000 f89b 	bl	8005e48 <I2C_IsAcknowledgeFailed>
 8005d12:	1e03      	subs	r3, r0, #0
 8005d14:	d001      	beq.n	8005d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e026      	b.n	8005d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1a:	f7fe fbf3 	bl	8004504 <HAL_GetTick>
 8005d1e:	0002      	movs	r2, r0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d302      	bcc.n	8005d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d113      	bne.n	8005d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d34:	2220      	movs	r2, #32
 8005d36:	431a      	orrs	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2241      	movs	r2, #65	; 0x41
 8005d40:	2120      	movs	r1, #32
 8005d42:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2242      	movs	r2, #66	; 0x42
 8005d48:	2100      	movs	r1, #0
 8005d4a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2240      	movs	r2, #64	; 0x40
 8005d50:	2100      	movs	r1, #0
 8005d52:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e007      	b.n	8005d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	4013      	ands	r3, r2
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d1cf      	bne.n	8005d06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	0018      	movs	r0, r3
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	b004      	add	sp, #16
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d7c:	e055      	b.n	8005e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	68b9      	ldr	r1, [r7, #8]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f000 f85f 	bl	8005e48 <I2C_IsAcknowledgeFailed>
 8005d8a:	1e03      	subs	r3, r0, #0
 8005d8c:	d001      	beq.n	8005d92 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e053      	b.n	8005e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	d129      	bne.n	8005df4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	2204      	movs	r2, #4
 8005da8:	4013      	ands	r3, r2
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d105      	bne.n	8005dba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e03f      	b.n	8005e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	491d      	ldr	r1, [pc, #116]	; (8005e44 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005dce:	400a      	ands	r2, r1
 8005dd0:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2241      	movs	r2, #65	; 0x41
 8005ddc:	2120      	movs	r1, #32
 8005dde:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2242      	movs	r2, #66	; 0x42
 8005de4:	2100      	movs	r1, #0
 8005de6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2240      	movs	r2, #64	; 0x40
 8005dec:	2100      	movs	r1, #0
 8005dee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e022      	b.n	8005e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df4:	f7fe fb86 	bl	8004504 <HAL_GetTick>
 8005df8:	0002      	movs	r2, r0
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d302      	bcc.n	8005e0a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10f      	bne.n	8005e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0e:	2220      	movs	r2, #32
 8005e10:	431a      	orrs	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2241      	movs	r2, #65	; 0x41
 8005e1a:	2120      	movs	r1, #32
 8005e1c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2240      	movs	r2, #64	; 0x40
 8005e22:	2100      	movs	r1, #0
 8005e24:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e007      	b.n	8005e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	2204      	movs	r2, #4
 8005e32:	4013      	ands	r3, r2
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	d1a2      	bne.n	8005d7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	b004      	add	sp, #16
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	fe00e800 	.word	0xfe00e800

08005e48 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	2210      	movs	r2, #16
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b10      	cmp	r3, #16
 8005e60:	d164      	bne.n	8005f2c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	2380      	movs	r3, #128	; 0x80
 8005e6a:	049b      	lsls	r3, r3, #18
 8005e6c:	401a      	ands	r2, r3
 8005e6e:	2380      	movs	r3, #128	; 0x80
 8005e70:	049b      	lsls	r3, r3, #18
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d02b      	beq.n	8005ece <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2180      	movs	r1, #128	; 0x80
 8005e82:	01c9      	lsls	r1, r1, #7
 8005e84:	430a      	orrs	r2, r1
 8005e86:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e88:	e021      	b.n	8005ece <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	d01e      	beq.n	8005ece <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e90:	f7fe fb38 	bl	8004504 <HAL_GetTick>
 8005e94:	0002      	movs	r2, r0
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d302      	bcc.n	8005ea6 <I2C_IsAcknowledgeFailed+0x5e>
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d113      	bne.n	8005ece <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eaa:	2220      	movs	r2, #32
 8005eac:	431a      	orrs	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2241      	movs	r2, #65	; 0x41
 8005eb6:	2120      	movs	r1, #32
 8005eb8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2242      	movs	r2, #66	; 0x42
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2240      	movs	r2, #64	; 0x40
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e02f      	b.n	8005f2e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d1d6      	bne.n	8005e8a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2210      	movs	r2, #16
 8005ee2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f7ff fe62 	bl	8005bb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	490e      	ldr	r1, [pc, #56]	; (8005f38 <I2C_IsAcknowledgeFailed+0xf0>)
 8005f00:	400a      	ands	r2, r1
 8005f02:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f08:	2204      	movs	r2, #4
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2241      	movs	r2, #65	; 0x41
 8005f14:	2120      	movs	r1, #32
 8005f16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2242      	movs	r2, #66	; 0x42
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2240      	movs	r2, #64	; 0x40
 8005f24:	2100      	movs	r1, #0
 8005f26:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e000      	b.n	8005f2e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	0018      	movs	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	b004      	add	sp, #16
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	46c0      	nop			; (mov r8, r8)
 8005f38:	fe00e800 	.word	0xfe00e800

08005f3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f3c:	b590      	push	{r4, r7, lr}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	0008      	movs	r0, r1
 8005f46:	0011      	movs	r1, r2
 8005f48:	607b      	str	r3, [r7, #4]
 8005f4a:	240a      	movs	r4, #10
 8005f4c:	193b      	adds	r3, r7, r4
 8005f4e:	1c02      	adds	r2, r0, #0
 8005f50:	801a      	strh	r2, [r3, #0]
 8005f52:	2009      	movs	r0, #9
 8005f54:	183b      	adds	r3, r7, r0
 8005f56:	1c0a      	adds	r2, r1, #0
 8005f58:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	6a3a      	ldr	r2, [r7, #32]
 8005f62:	0d51      	lsrs	r1, r2, #21
 8005f64:	2280      	movs	r2, #128	; 0x80
 8005f66:	00d2      	lsls	r2, r2, #3
 8005f68:	400a      	ands	r2, r1
 8005f6a:	490e      	ldr	r1, [pc, #56]	; (8005fa4 <I2C_TransferConfig+0x68>)
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	43d2      	mvns	r2, r2
 8005f70:	401a      	ands	r2, r3
 8005f72:	0011      	movs	r1, r2
 8005f74:	193b      	adds	r3, r7, r4
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	059b      	lsls	r3, r3, #22
 8005f7a:	0d9a      	lsrs	r2, r3, #22
 8005f7c:	183b      	adds	r3, r7, r0
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	0418      	lsls	r0, r3, #16
 8005f82:	23ff      	movs	r3, #255	; 0xff
 8005f84:	041b      	lsls	r3, r3, #16
 8005f86:	4003      	ands	r3, r0
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	431a      	orrs	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005f9a:	46c0      	nop			; (mov r8, r8)
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	b005      	add	sp, #20
 8005fa0:	bd90      	pop	{r4, r7, pc}
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	03ff63ff 	.word	0x03ff63ff

08005fa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2241      	movs	r2, #65	; 0x41
 8005fb6:	5c9b      	ldrb	r3, [r3, r2]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d138      	bne.n	8006030 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2240      	movs	r2, #64	; 0x40
 8005fc2:	5c9b      	ldrb	r3, [r3, r2]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e032      	b.n	8006032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2240      	movs	r2, #64	; 0x40
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2241      	movs	r2, #65	; 0x41
 8005fd8:	2124      	movs	r1, #36	; 0x24
 8005fda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	438a      	bics	r2, r1
 8005fea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4911      	ldr	r1, [pc, #68]	; (800603c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005ff8:	400a      	ands	r2, r1
 8005ffa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6819      	ldr	r1, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2101      	movs	r1, #1
 8006018:	430a      	orrs	r2, r1
 800601a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2241      	movs	r2, #65	; 0x41
 8006020:	2120      	movs	r1, #32
 8006022:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2240      	movs	r2, #64	; 0x40
 8006028:	2100      	movs	r1, #0
 800602a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	e000      	b.n	8006032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006030:	2302      	movs	r3, #2
  }
}
 8006032:	0018      	movs	r0, r3
 8006034:	46bd      	mov	sp, r7
 8006036:	b002      	add	sp, #8
 8006038:	bd80      	pop	{r7, pc}
 800603a:	46c0      	nop			; (mov r8, r8)
 800603c:	ffffefff 	.word	0xffffefff

08006040 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2241      	movs	r2, #65	; 0x41
 800604e:	5c9b      	ldrb	r3, [r3, r2]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b20      	cmp	r3, #32
 8006054:	d139      	bne.n	80060ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2240      	movs	r2, #64	; 0x40
 800605a:	5c9b      	ldrb	r3, [r3, r2]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006060:	2302      	movs	r3, #2
 8006062:	e033      	b.n	80060cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2240      	movs	r2, #64	; 0x40
 8006068:	2101      	movs	r1, #1
 800606a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2241      	movs	r2, #65	; 0x41
 8006070:	2124      	movs	r1, #36	; 0x24
 8006072:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2101      	movs	r1, #1
 8006080:	438a      	bics	r2, r1
 8006082:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4a11      	ldr	r2, [pc, #68]	; (80060d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006090:	4013      	ands	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	021b      	lsls	r3, r3, #8
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2101      	movs	r1, #1
 80060b2:	430a      	orrs	r2, r1
 80060b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2241      	movs	r2, #65	; 0x41
 80060ba:	2120      	movs	r1, #32
 80060bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2240      	movs	r2, #64	; 0x40
 80060c2:	2100      	movs	r1, #0
 80060c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	e000      	b.n	80060cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80060ca:	2302      	movs	r3, #2
  }
}
 80060cc:	0018      	movs	r0, r3
 80060ce:	46bd      	mov	sp, r7
 80060d0:	b004      	add	sp, #16
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	fffff0ff 	.word	0xfffff0ff

080060d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e301      	b.n	80066ee <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2201      	movs	r2, #1
 80060f0:	4013      	ands	r3, r2
 80060f2:	d100      	bne.n	80060f6 <HAL_RCC_OscConfig+0x1e>
 80060f4:	e08d      	b.n	8006212 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80060f6:	4bc3      	ldr	r3, [pc, #780]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	220c      	movs	r2, #12
 80060fc:	4013      	ands	r3, r2
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d00e      	beq.n	8006120 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006102:	4bc0      	ldr	r3, [pc, #768]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	220c      	movs	r2, #12
 8006108:	4013      	ands	r3, r2
 800610a:	2b08      	cmp	r3, #8
 800610c:	d116      	bne.n	800613c <HAL_RCC_OscConfig+0x64>
 800610e:	4bbd      	ldr	r3, [pc, #756]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	2380      	movs	r3, #128	; 0x80
 8006114:	025b      	lsls	r3, r3, #9
 8006116:	401a      	ands	r2, r3
 8006118:	2380      	movs	r3, #128	; 0x80
 800611a:	025b      	lsls	r3, r3, #9
 800611c:	429a      	cmp	r2, r3
 800611e:	d10d      	bne.n	800613c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006120:	4bb8      	ldr	r3, [pc, #736]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	2380      	movs	r3, #128	; 0x80
 8006126:	029b      	lsls	r3, r3, #10
 8006128:	4013      	ands	r3, r2
 800612a:	d100      	bne.n	800612e <HAL_RCC_OscConfig+0x56>
 800612c:	e070      	b.n	8006210 <HAL_RCC_OscConfig+0x138>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d000      	beq.n	8006138 <HAL_RCC_OscConfig+0x60>
 8006136:	e06b      	b.n	8006210 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e2d8      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d107      	bne.n	8006154 <HAL_RCC_OscConfig+0x7c>
 8006144:	4baf      	ldr	r3, [pc, #700]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	4bae      	ldr	r3, [pc, #696]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 800614a:	2180      	movs	r1, #128	; 0x80
 800614c:	0249      	lsls	r1, r1, #9
 800614e:	430a      	orrs	r2, r1
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	e02f      	b.n	80061b4 <HAL_RCC_OscConfig+0xdc>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10c      	bne.n	8006176 <HAL_RCC_OscConfig+0x9e>
 800615c:	4ba9      	ldr	r3, [pc, #676]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	4ba8      	ldr	r3, [pc, #672]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006162:	49a9      	ldr	r1, [pc, #676]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 8006164:	400a      	ands	r2, r1
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	4ba6      	ldr	r3, [pc, #664]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	4ba5      	ldr	r3, [pc, #660]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 800616e:	49a7      	ldr	r1, [pc, #668]	; (800640c <HAL_RCC_OscConfig+0x334>)
 8006170:	400a      	ands	r2, r1
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	e01e      	b.n	80061b4 <HAL_RCC_OscConfig+0xdc>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b05      	cmp	r3, #5
 800617c:	d10e      	bne.n	800619c <HAL_RCC_OscConfig+0xc4>
 800617e:	4ba1      	ldr	r3, [pc, #644]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	4ba0      	ldr	r3, [pc, #640]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006184:	2180      	movs	r1, #128	; 0x80
 8006186:	02c9      	lsls	r1, r1, #11
 8006188:	430a      	orrs	r2, r1
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	4b9d      	ldr	r3, [pc, #628]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4b9c      	ldr	r3, [pc, #624]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006192:	2180      	movs	r1, #128	; 0x80
 8006194:	0249      	lsls	r1, r1, #9
 8006196:	430a      	orrs	r2, r1
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	e00b      	b.n	80061b4 <HAL_RCC_OscConfig+0xdc>
 800619c:	4b99      	ldr	r3, [pc, #612]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	4b98      	ldr	r3, [pc, #608]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 80061a2:	4999      	ldr	r1, [pc, #612]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 80061a4:	400a      	ands	r2, r1
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	4b96      	ldr	r3, [pc, #600]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	4b95      	ldr	r3, [pc, #596]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 80061ae:	4997      	ldr	r1, [pc, #604]	; (800640c <HAL_RCC_OscConfig+0x334>)
 80061b0:	400a      	ands	r2, r1
 80061b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d014      	beq.n	80061e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061bc:	f7fe f9a2 	bl	8004504 <HAL_GetTick>
 80061c0:	0003      	movs	r3, r0
 80061c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061c4:	e008      	b.n	80061d8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061c6:	f7fe f99d 	bl	8004504 <HAL_GetTick>
 80061ca:	0002      	movs	r2, r0
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	2b64      	cmp	r3, #100	; 0x64
 80061d2:	d901      	bls.n	80061d8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e28a      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061d8:	4b8a      	ldr	r3, [pc, #552]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	2380      	movs	r3, #128	; 0x80
 80061de:	029b      	lsls	r3, r3, #10
 80061e0:	4013      	ands	r3, r2
 80061e2:	d0f0      	beq.n	80061c6 <HAL_RCC_OscConfig+0xee>
 80061e4:	e015      	b.n	8006212 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e6:	f7fe f98d 	bl	8004504 <HAL_GetTick>
 80061ea:	0003      	movs	r3, r0
 80061ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061f0:	f7fe f988 	bl	8004504 <HAL_GetTick>
 80061f4:	0002      	movs	r2, r0
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b64      	cmp	r3, #100	; 0x64
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e275      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006202:	4b80      	ldr	r3, [pc, #512]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	2380      	movs	r3, #128	; 0x80
 8006208:	029b      	lsls	r3, r3, #10
 800620a:	4013      	ands	r3, r2
 800620c:	d1f0      	bne.n	80061f0 <HAL_RCC_OscConfig+0x118>
 800620e:	e000      	b.n	8006212 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006210:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2202      	movs	r2, #2
 8006218:	4013      	ands	r3, r2
 800621a:	d100      	bne.n	800621e <HAL_RCC_OscConfig+0x146>
 800621c:	e069      	b.n	80062f2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800621e:	4b79      	ldr	r3, [pc, #484]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	220c      	movs	r2, #12
 8006224:	4013      	ands	r3, r2
 8006226:	d00b      	beq.n	8006240 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006228:	4b76      	ldr	r3, [pc, #472]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	220c      	movs	r2, #12
 800622e:	4013      	ands	r3, r2
 8006230:	2b08      	cmp	r3, #8
 8006232:	d11c      	bne.n	800626e <HAL_RCC_OscConfig+0x196>
 8006234:	4b73      	ldr	r3, [pc, #460]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	2380      	movs	r3, #128	; 0x80
 800623a:	025b      	lsls	r3, r3, #9
 800623c:	4013      	ands	r3, r2
 800623e:	d116      	bne.n	800626e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006240:	4b70      	ldr	r3, [pc, #448]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2202      	movs	r2, #2
 8006246:	4013      	ands	r3, r2
 8006248:	d005      	beq.n	8006256 <HAL_RCC_OscConfig+0x17e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d001      	beq.n	8006256 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e24b      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006256:	4b6b      	ldr	r3, [pc, #428]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	22f8      	movs	r2, #248	; 0xf8
 800625c:	4393      	bics	r3, r2
 800625e:	0019      	movs	r1, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	00da      	lsls	r2, r3, #3
 8006266:	4b67      	ldr	r3, [pc, #412]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006268:	430a      	orrs	r2, r1
 800626a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800626c:	e041      	b.n	80062f2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d024      	beq.n	80062c0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006276:	4b63      	ldr	r3, [pc, #396]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	4b62      	ldr	r3, [pc, #392]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 800627c:	2101      	movs	r1, #1
 800627e:	430a      	orrs	r2, r1
 8006280:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006282:	f7fe f93f 	bl	8004504 <HAL_GetTick>
 8006286:	0003      	movs	r3, r0
 8006288:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800628a:	e008      	b.n	800629e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800628c:	f7fe f93a 	bl	8004504 <HAL_GetTick>
 8006290:	0002      	movs	r2, r0
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e227      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800629e:	4b59      	ldr	r3, [pc, #356]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2202      	movs	r2, #2
 80062a4:	4013      	ands	r3, r2
 80062a6:	d0f1      	beq.n	800628c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062a8:	4b56      	ldr	r3, [pc, #344]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	22f8      	movs	r2, #248	; 0xf8
 80062ae:	4393      	bics	r3, r2
 80062b0:	0019      	movs	r1, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	00da      	lsls	r2, r3, #3
 80062b8:	4b52      	ldr	r3, [pc, #328]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 80062ba:	430a      	orrs	r2, r1
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	e018      	b.n	80062f2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062c0:	4b50      	ldr	r3, [pc, #320]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	4b4f      	ldr	r3, [pc, #316]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 80062c6:	2101      	movs	r1, #1
 80062c8:	438a      	bics	r2, r1
 80062ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062cc:	f7fe f91a 	bl	8004504 <HAL_GetTick>
 80062d0:	0003      	movs	r3, r0
 80062d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062d4:	e008      	b.n	80062e8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062d6:	f7fe f915 	bl	8004504 <HAL_GetTick>
 80062da:	0002      	movs	r2, r0
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d901      	bls.n	80062e8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e202      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062e8:	4b46      	ldr	r3, [pc, #280]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2202      	movs	r2, #2
 80062ee:	4013      	ands	r3, r2
 80062f0:	d1f1      	bne.n	80062d6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2208      	movs	r2, #8
 80062f8:	4013      	ands	r3, r2
 80062fa:	d036      	beq.n	800636a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	69db      	ldr	r3, [r3, #28]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d019      	beq.n	8006338 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006304:	4b3f      	ldr	r3, [pc, #252]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006308:	4b3e      	ldr	r3, [pc, #248]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 800630a:	2101      	movs	r1, #1
 800630c:	430a      	orrs	r2, r1
 800630e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006310:	f7fe f8f8 	bl	8004504 <HAL_GetTick>
 8006314:	0003      	movs	r3, r0
 8006316:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006318:	e008      	b.n	800632c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800631a:	f7fe f8f3 	bl	8004504 <HAL_GetTick>
 800631e:	0002      	movs	r2, r0
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d901      	bls.n	800632c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e1e0      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800632c:	4b35      	ldr	r3, [pc, #212]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	2202      	movs	r2, #2
 8006332:	4013      	ands	r3, r2
 8006334:	d0f1      	beq.n	800631a <HAL_RCC_OscConfig+0x242>
 8006336:	e018      	b.n	800636a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006338:	4b32      	ldr	r3, [pc, #200]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 800633a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800633c:	4b31      	ldr	r3, [pc, #196]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 800633e:	2101      	movs	r1, #1
 8006340:	438a      	bics	r2, r1
 8006342:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006344:	f7fe f8de 	bl	8004504 <HAL_GetTick>
 8006348:	0003      	movs	r3, r0
 800634a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800634e:	f7fe f8d9 	bl	8004504 <HAL_GetTick>
 8006352:	0002      	movs	r2, r0
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e1c6      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006360:	4b28      	ldr	r3, [pc, #160]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	2202      	movs	r2, #2
 8006366:	4013      	ands	r3, r2
 8006368:	d1f1      	bne.n	800634e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2204      	movs	r2, #4
 8006370:	4013      	ands	r3, r2
 8006372:	d100      	bne.n	8006376 <HAL_RCC_OscConfig+0x29e>
 8006374:	e0b4      	b.n	80064e0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006376:	201f      	movs	r0, #31
 8006378:	183b      	adds	r3, r7, r0
 800637a:	2200      	movs	r2, #0
 800637c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800637e:	4b21      	ldr	r3, [pc, #132]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006380:	69da      	ldr	r2, [r3, #28]
 8006382:	2380      	movs	r3, #128	; 0x80
 8006384:	055b      	lsls	r3, r3, #21
 8006386:	4013      	ands	r3, r2
 8006388:	d110      	bne.n	80063ac <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800638a:	4b1e      	ldr	r3, [pc, #120]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 800638c:	69da      	ldr	r2, [r3, #28]
 800638e:	4b1d      	ldr	r3, [pc, #116]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 8006390:	2180      	movs	r1, #128	; 0x80
 8006392:	0549      	lsls	r1, r1, #21
 8006394:	430a      	orrs	r2, r1
 8006396:	61da      	str	r2, [r3, #28]
 8006398:	4b1a      	ldr	r3, [pc, #104]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 800639a:	69da      	ldr	r2, [r3, #28]
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	055b      	lsls	r3, r3, #21
 80063a0:	4013      	ands	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80063a6:	183b      	adds	r3, r7, r0
 80063a8:	2201      	movs	r2, #1
 80063aa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ac:	4b18      	ldr	r3, [pc, #96]	; (8006410 <HAL_RCC_OscConfig+0x338>)
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	2380      	movs	r3, #128	; 0x80
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	4013      	ands	r3, r2
 80063b6:	d11a      	bne.n	80063ee <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063b8:	4b15      	ldr	r3, [pc, #84]	; (8006410 <HAL_RCC_OscConfig+0x338>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	4b14      	ldr	r3, [pc, #80]	; (8006410 <HAL_RCC_OscConfig+0x338>)
 80063be:	2180      	movs	r1, #128	; 0x80
 80063c0:	0049      	lsls	r1, r1, #1
 80063c2:	430a      	orrs	r2, r1
 80063c4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063c6:	f7fe f89d 	bl	8004504 <HAL_GetTick>
 80063ca:	0003      	movs	r3, r0
 80063cc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ce:	e008      	b.n	80063e2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063d0:	f7fe f898 	bl	8004504 <HAL_GetTick>
 80063d4:	0002      	movs	r2, r0
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b64      	cmp	r3, #100	; 0x64
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e185      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063e2:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <HAL_RCC_OscConfig+0x338>)
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	2380      	movs	r3, #128	; 0x80
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	4013      	ands	r3, r2
 80063ec:	d0f0      	beq.n	80063d0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d10e      	bne.n	8006414 <HAL_RCC_OscConfig+0x33c>
 80063f6:	4b03      	ldr	r3, [pc, #12]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 80063f8:	6a1a      	ldr	r2, [r3, #32]
 80063fa:	4b02      	ldr	r3, [pc, #8]	; (8006404 <HAL_RCC_OscConfig+0x32c>)
 80063fc:	2101      	movs	r1, #1
 80063fe:	430a      	orrs	r2, r1
 8006400:	621a      	str	r2, [r3, #32]
 8006402:	e035      	b.n	8006470 <HAL_RCC_OscConfig+0x398>
 8006404:	40021000 	.word	0x40021000
 8006408:	fffeffff 	.word	0xfffeffff
 800640c:	fffbffff 	.word	0xfffbffff
 8006410:	40007000 	.word	0x40007000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10c      	bne.n	8006436 <HAL_RCC_OscConfig+0x35e>
 800641c:	4bb6      	ldr	r3, [pc, #728]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 800641e:	6a1a      	ldr	r2, [r3, #32]
 8006420:	4bb5      	ldr	r3, [pc, #724]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006422:	2101      	movs	r1, #1
 8006424:	438a      	bics	r2, r1
 8006426:	621a      	str	r2, [r3, #32]
 8006428:	4bb3      	ldr	r3, [pc, #716]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 800642a:	6a1a      	ldr	r2, [r3, #32]
 800642c:	4bb2      	ldr	r3, [pc, #712]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 800642e:	2104      	movs	r1, #4
 8006430:	438a      	bics	r2, r1
 8006432:	621a      	str	r2, [r3, #32]
 8006434:	e01c      	b.n	8006470 <HAL_RCC_OscConfig+0x398>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	2b05      	cmp	r3, #5
 800643c:	d10c      	bne.n	8006458 <HAL_RCC_OscConfig+0x380>
 800643e:	4bae      	ldr	r3, [pc, #696]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006440:	6a1a      	ldr	r2, [r3, #32]
 8006442:	4bad      	ldr	r3, [pc, #692]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006444:	2104      	movs	r1, #4
 8006446:	430a      	orrs	r2, r1
 8006448:	621a      	str	r2, [r3, #32]
 800644a:	4bab      	ldr	r3, [pc, #684]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 800644c:	6a1a      	ldr	r2, [r3, #32]
 800644e:	4baa      	ldr	r3, [pc, #680]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006450:	2101      	movs	r1, #1
 8006452:	430a      	orrs	r2, r1
 8006454:	621a      	str	r2, [r3, #32]
 8006456:	e00b      	b.n	8006470 <HAL_RCC_OscConfig+0x398>
 8006458:	4ba7      	ldr	r3, [pc, #668]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 800645a:	6a1a      	ldr	r2, [r3, #32]
 800645c:	4ba6      	ldr	r3, [pc, #664]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 800645e:	2101      	movs	r1, #1
 8006460:	438a      	bics	r2, r1
 8006462:	621a      	str	r2, [r3, #32]
 8006464:	4ba4      	ldr	r3, [pc, #656]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	4ba3      	ldr	r3, [pc, #652]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 800646a:	2104      	movs	r1, #4
 800646c:	438a      	bics	r2, r1
 800646e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d014      	beq.n	80064a2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006478:	f7fe f844 	bl	8004504 <HAL_GetTick>
 800647c:	0003      	movs	r3, r0
 800647e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006480:	e009      	b.n	8006496 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006482:	f7fe f83f 	bl	8004504 <HAL_GetTick>
 8006486:	0002      	movs	r2, r0
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	4a9b      	ldr	r2, [pc, #620]	; (80066fc <HAL_RCC_OscConfig+0x624>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e12b      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006496:	4b98      	ldr	r3, [pc, #608]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	2202      	movs	r2, #2
 800649c:	4013      	ands	r3, r2
 800649e:	d0f0      	beq.n	8006482 <HAL_RCC_OscConfig+0x3aa>
 80064a0:	e013      	b.n	80064ca <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064a2:	f7fe f82f 	bl	8004504 <HAL_GetTick>
 80064a6:	0003      	movs	r3, r0
 80064a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064aa:	e009      	b.n	80064c0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064ac:	f7fe f82a 	bl	8004504 <HAL_GetTick>
 80064b0:	0002      	movs	r2, r0
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	4a91      	ldr	r2, [pc, #580]	; (80066fc <HAL_RCC_OscConfig+0x624>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d901      	bls.n	80064c0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e116      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064c0:	4b8d      	ldr	r3, [pc, #564]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	2202      	movs	r2, #2
 80064c6:	4013      	ands	r3, r2
 80064c8:	d1f0      	bne.n	80064ac <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80064ca:	231f      	movs	r3, #31
 80064cc:	18fb      	adds	r3, r7, r3
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d105      	bne.n	80064e0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064d4:	4b88      	ldr	r3, [pc, #544]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 80064d6:	69da      	ldr	r2, [r3, #28]
 80064d8:	4b87      	ldr	r3, [pc, #540]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 80064da:	4989      	ldr	r1, [pc, #548]	; (8006700 <HAL_RCC_OscConfig+0x628>)
 80064dc:	400a      	ands	r2, r1
 80064de:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2210      	movs	r2, #16
 80064e6:	4013      	ands	r3, r2
 80064e8:	d063      	beq.n	80065b2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d12a      	bne.n	8006548 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80064f2:	4b81      	ldr	r3, [pc, #516]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 80064f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064f6:	4b80      	ldr	r3, [pc, #512]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 80064f8:	2104      	movs	r1, #4
 80064fa:	430a      	orrs	r2, r1
 80064fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80064fe:	4b7e      	ldr	r3, [pc, #504]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006502:	4b7d      	ldr	r3, [pc, #500]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006504:	2101      	movs	r1, #1
 8006506:	430a      	orrs	r2, r1
 8006508:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800650a:	f7fd fffb 	bl	8004504 <HAL_GetTick>
 800650e:	0003      	movs	r3, r0
 8006510:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006512:	e008      	b.n	8006526 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006514:	f7fd fff6 	bl	8004504 <HAL_GetTick>
 8006518:	0002      	movs	r2, r0
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e0e3      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006526:	4b74      	ldr	r3, [pc, #464]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652a:	2202      	movs	r2, #2
 800652c:	4013      	ands	r3, r2
 800652e:	d0f1      	beq.n	8006514 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006530:	4b71      	ldr	r3, [pc, #452]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006534:	22f8      	movs	r2, #248	; 0xf8
 8006536:	4393      	bics	r3, r2
 8006538:	0019      	movs	r1, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	00da      	lsls	r2, r3, #3
 8006540:	4b6d      	ldr	r3, [pc, #436]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006542:	430a      	orrs	r2, r1
 8006544:	635a      	str	r2, [r3, #52]	; 0x34
 8006546:	e034      	b.n	80065b2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	3305      	adds	r3, #5
 800654e:	d111      	bne.n	8006574 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006550:	4b69      	ldr	r3, [pc, #420]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006554:	4b68      	ldr	r3, [pc, #416]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006556:	2104      	movs	r1, #4
 8006558:	438a      	bics	r2, r1
 800655a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800655c:	4b66      	ldr	r3, [pc, #408]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 800655e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006560:	22f8      	movs	r2, #248	; 0xf8
 8006562:	4393      	bics	r3, r2
 8006564:	0019      	movs	r1, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	00da      	lsls	r2, r3, #3
 800656c:	4b62      	ldr	r3, [pc, #392]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 800656e:	430a      	orrs	r2, r1
 8006570:	635a      	str	r2, [r3, #52]	; 0x34
 8006572:	e01e      	b.n	80065b2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006574:	4b60      	ldr	r3, [pc, #384]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006578:	4b5f      	ldr	r3, [pc, #380]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 800657a:	2104      	movs	r1, #4
 800657c:	430a      	orrs	r2, r1
 800657e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006580:	4b5d      	ldr	r3, [pc, #372]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006584:	4b5c      	ldr	r3, [pc, #368]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006586:	2101      	movs	r1, #1
 8006588:	438a      	bics	r2, r1
 800658a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800658c:	f7fd ffba 	bl	8004504 <HAL_GetTick>
 8006590:	0003      	movs	r3, r0
 8006592:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006594:	e008      	b.n	80065a8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006596:	f7fd ffb5 	bl	8004504 <HAL_GetTick>
 800659a:	0002      	movs	r2, r0
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e0a2      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80065a8:	4b53      	ldr	r3, [pc, #332]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 80065aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ac:	2202      	movs	r2, #2
 80065ae:	4013      	ands	r3, r2
 80065b0:	d1f1      	bne.n	8006596 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d100      	bne.n	80065bc <HAL_RCC_OscConfig+0x4e4>
 80065ba:	e097      	b.n	80066ec <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065bc:	4b4e      	ldr	r3, [pc, #312]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	220c      	movs	r2, #12
 80065c2:	4013      	ands	r3, r2
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d100      	bne.n	80065ca <HAL_RCC_OscConfig+0x4f2>
 80065c8:	e06b      	b.n	80066a2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d14c      	bne.n	800666c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065d2:	4b49      	ldr	r3, [pc, #292]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	4b48      	ldr	r3, [pc, #288]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 80065d8:	494a      	ldr	r1, [pc, #296]	; (8006704 <HAL_RCC_OscConfig+0x62c>)
 80065da:	400a      	ands	r2, r1
 80065dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065de:	f7fd ff91 	bl	8004504 <HAL_GetTick>
 80065e2:	0003      	movs	r3, r0
 80065e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e8:	f7fd ff8c 	bl	8004504 <HAL_GetTick>
 80065ec:	0002      	movs	r2, r0
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e079      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065fa:	4b3f      	ldr	r3, [pc, #252]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	2380      	movs	r3, #128	; 0x80
 8006600:	049b      	lsls	r3, r3, #18
 8006602:	4013      	ands	r3, r2
 8006604:	d1f0      	bne.n	80065e8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006606:	4b3c      	ldr	r3, [pc, #240]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660a:	220f      	movs	r2, #15
 800660c:	4393      	bics	r3, r2
 800660e:	0019      	movs	r1, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006614:	4b38      	ldr	r3, [pc, #224]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006616:	430a      	orrs	r2, r1
 8006618:	62da      	str	r2, [r3, #44]	; 0x2c
 800661a:	4b37      	ldr	r3, [pc, #220]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	4a3a      	ldr	r2, [pc, #232]	; (8006708 <HAL_RCC_OscConfig+0x630>)
 8006620:	4013      	ands	r3, r2
 8006622:	0019      	movs	r1, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	431a      	orrs	r2, r3
 800662e:	4b32      	ldr	r3, [pc, #200]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006630:	430a      	orrs	r2, r1
 8006632:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006634:	4b30      	ldr	r3, [pc, #192]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	4b2f      	ldr	r3, [pc, #188]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 800663a:	2180      	movs	r1, #128	; 0x80
 800663c:	0449      	lsls	r1, r1, #17
 800663e:	430a      	orrs	r2, r1
 8006640:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006642:	f7fd ff5f 	bl	8004504 <HAL_GetTick>
 8006646:	0003      	movs	r3, r0
 8006648:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800664c:	f7fd ff5a 	bl	8004504 <HAL_GetTick>
 8006650:	0002      	movs	r2, r0
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e047      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800665e:	4b26      	ldr	r3, [pc, #152]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	2380      	movs	r3, #128	; 0x80
 8006664:	049b      	lsls	r3, r3, #18
 8006666:	4013      	ands	r3, r2
 8006668:	d0f0      	beq.n	800664c <HAL_RCC_OscConfig+0x574>
 800666a:	e03f      	b.n	80066ec <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800666c:	4b22      	ldr	r3, [pc, #136]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	4b21      	ldr	r3, [pc, #132]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006672:	4924      	ldr	r1, [pc, #144]	; (8006704 <HAL_RCC_OscConfig+0x62c>)
 8006674:	400a      	ands	r2, r1
 8006676:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006678:	f7fd ff44 	bl	8004504 <HAL_GetTick>
 800667c:	0003      	movs	r3, r0
 800667e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006680:	e008      	b.n	8006694 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006682:	f7fd ff3f 	bl	8004504 <HAL_GetTick>
 8006686:	0002      	movs	r2, r0
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e02c      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006694:	4b18      	ldr	r3, [pc, #96]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	2380      	movs	r3, #128	; 0x80
 800669a:	049b      	lsls	r3, r3, #18
 800669c:	4013      	ands	r3, r2
 800669e:	d1f0      	bne.n	8006682 <HAL_RCC_OscConfig+0x5aa>
 80066a0:	e024      	b.n	80066ec <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d101      	bne.n	80066ae <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e01f      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80066ae:	4b12      	ldr	r3, [pc, #72]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80066b4:	4b10      	ldr	r3, [pc, #64]	; (80066f8 <HAL_RCC_OscConfig+0x620>)
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	2380      	movs	r3, #128	; 0x80
 80066be:	025b      	lsls	r3, r3, #9
 80066c0:	401a      	ands	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d10e      	bne.n	80066e8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	220f      	movs	r2, #15
 80066ce:	401a      	ands	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d107      	bne.n	80066e8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	23f0      	movs	r3, #240	; 0xf0
 80066dc:	039b      	lsls	r3, r3, #14
 80066de:	401a      	ands	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d001      	beq.n	80066ec <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e000      	b.n	80066ee <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	0018      	movs	r0, r3
 80066f0:	46bd      	mov	sp, r7
 80066f2:	b008      	add	sp, #32
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	46c0      	nop			; (mov r8, r8)
 80066f8:	40021000 	.word	0x40021000
 80066fc:	00001388 	.word	0x00001388
 8006700:	efffffff 	.word	0xefffffff
 8006704:	feffffff 	.word	0xfeffffff
 8006708:	ffc2ffff 	.word	0xffc2ffff

0800670c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e0b3      	b.n	8006888 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006720:	4b5b      	ldr	r3, [pc, #364]	; (8006890 <HAL_RCC_ClockConfig+0x184>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2201      	movs	r2, #1
 8006726:	4013      	ands	r3, r2
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d911      	bls.n	8006752 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800672e:	4b58      	ldr	r3, [pc, #352]	; (8006890 <HAL_RCC_ClockConfig+0x184>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2201      	movs	r2, #1
 8006734:	4393      	bics	r3, r2
 8006736:	0019      	movs	r1, r3
 8006738:	4b55      	ldr	r3, [pc, #340]	; (8006890 <HAL_RCC_ClockConfig+0x184>)
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006740:	4b53      	ldr	r3, [pc, #332]	; (8006890 <HAL_RCC_ClockConfig+0x184>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	4013      	ands	r3, r2
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d001      	beq.n	8006752 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e09a      	b.n	8006888 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2202      	movs	r2, #2
 8006758:	4013      	ands	r3, r2
 800675a:	d015      	beq.n	8006788 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2204      	movs	r2, #4
 8006762:	4013      	ands	r3, r2
 8006764:	d006      	beq.n	8006774 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006766:	4b4b      	ldr	r3, [pc, #300]	; (8006894 <HAL_RCC_ClockConfig+0x188>)
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	4b4a      	ldr	r3, [pc, #296]	; (8006894 <HAL_RCC_ClockConfig+0x188>)
 800676c:	21e0      	movs	r1, #224	; 0xe0
 800676e:	00c9      	lsls	r1, r1, #3
 8006770:	430a      	orrs	r2, r1
 8006772:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006774:	4b47      	ldr	r3, [pc, #284]	; (8006894 <HAL_RCC_ClockConfig+0x188>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	22f0      	movs	r2, #240	; 0xf0
 800677a:	4393      	bics	r3, r2
 800677c:	0019      	movs	r1, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	689a      	ldr	r2, [r3, #8]
 8006782:	4b44      	ldr	r3, [pc, #272]	; (8006894 <HAL_RCC_ClockConfig+0x188>)
 8006784:	430a      	orrs	r2, r1
 8006786:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2201      	movs	r2, #1
 800678e:	4013      	ands	r3, r2
 8006790:	d040      	beq.n	8006814 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d107      	bne.n	80067aa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800679a:	4b3e      	ldr	r3, [pc, #248]	; (8006894 <HAL_RCC_ClockConfig+0x188>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	2380      	movs	r3, #128	; 0x80
 80067a0:	029b      	lsls	r3, r3, #10
 80067a2:	4013      	ands	r3, r2
 80067a4:	d114      	bne.n	80067d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e06e      	b.n	8006888 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d107      	bne.n	80067c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067b2:	4b38      	ldr	r3, [pc, #224]	; (8006894 <HAL_RCC_ClockConfig+0x188>)
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	2380      	movs	r3, #128	; 0x80
 80067b8:	049b      	lsls	r3, r3, #18
 80067ba:	4013      	ands	r3, r2
 80067bc:	d108      	bne.n	80067d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e062      	b.n	8006888 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067c2:	4b34      	ldr	r3, [pc, #208]	; (8006894 <HAL_RCC_ClockConfig+0x188>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2202      	movs	r2, #2
 80067c8:	4013      	ands	r3, r2
 80067ca:	d101      	bne.n	80067d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e05b      	b.n	8006888 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067d0:	4b30      	ldr	r3, [pc, #192]	; (8006894 <HAL_RCC_ClockConfig+0x188>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2203      	movs	r2, #3
 80067d6:	4393      	bics	r3, r2
 80067d8:	0019      	movs	r1, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	4b2d      	ldr	r3, [pc, #180]	; (8006894 <HAL_RCC_ClockConfig+0x188>)
 80067e0:	430a      	orrs	r2, r1
 80067e2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067e4:	f7fd fe8e 	bl	8004504 <HAL_GetTick>
 80067e8:	0003      	movs	r3, r0
 80067ea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ec:	e009      	b.n	8006802 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067ee:	f7fd fe89 	bl	8004504 <HAL_GetTick>
 80067f2:	0002      	movs	r2, r0
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	4a27      	ldr	r2, [pc, #156]	; (8006898 <HAL_RCC_ClockConfig+0x18c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e042      	b.n	8006888 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006802:	4b24      	ldr	r3, [pc, #144]	; (8006894 <HAL_RCC_ClockConfig+0x188>)
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	220c      	movs	r2, #12
 8006808:	401a      	ands	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	429a      	cmp	r2, r3
 8006812:	d1ec      	bne.n	80067ee <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006814:	4b1e      	ldr	r3, [pc, #120]	; (8006890 <HAL_RCC_ClockConfig+0x184>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2201      	movs	r2, #1
 800681a:	4013      	ands	r3, r2
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d211      	bcs.n	8006846 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006822:	4b1b      	ldr	r3, [pc, #108]	; (8006890 <HAL_RCC_ClockConfig+0x184>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2201      	movs	r2, #1
 8006828:	4393      	bics	r3, r2
 800682a:	0019      	movs	r1, r3
 800682c:	4b18      	ldr	r3, [pc, #96]	; (8006890 <HAL_RCC_ClockConfig+0x184>)
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006834:	4b16      	ldr	r3, [pc, #88]	; (8006890 <HAL_RCC_ClockConfig+0x184>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2201      	movs	r2, #1
 800683a:	4013      	ands	r3, r2
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d001      	beq.n	8006846 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e020      	b.n	8006888 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2204      	movs	r2, #4
 800684c:	4013      	ands	r3, r2
 800684e:	d009      	beq.n	8006864 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006850:	4b10      	ldr	r3, [pc, #64]	; (8006894 <HAL_RCC_ClockConfig+0x188>)
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	4a11      	ldr	r2, [pc, #68]	; (800689c <HAL_RCC_ClockConfig+0x190>)
 8006856:	4013      	ands	r3, r2
 8006858:	0019      	movs	r1, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	4b0d      	ldr	r3, [pc, #52]	; (8006894 <HAL_RCC_ClockConfig+0x188>)
 8006860:	430a      	orrs	r2, r1
 8006862:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006864:	f000 f820 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 8006868:	0001      	movs	r1, r0
 800686a:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <HAL_RCC_ClockConfig+0x188>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	091b      	lsrs	r3, r3, #4
 8006870:	220f      	movs	r2, #15
 8006872:	4013      	ands	r3, r2
 8006874:	4a0a      	ldr	r2, [pc, #40]	; (80068a0 <HAL_RCC_ClockConfig+0x194>)
 8006876:	5cd3      	ldrb	r3, [r2, r3]
 8006878:	000a      	movs	r2, r1
 800687a:	40da      	lsrs	r2, r3
 800687c:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <HAL_RCC_ClockConfig+0x198>)
 800687e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006880:	2003      	movs	r0, #3
 8006882:	f7fd fdf9 	bl	8004478 <HAL_InitTick>
  
  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	0018      	movs	r0, r3
 800688a:	46bd      	mov	sp, r7
 800688c:	b004      	add	sp, #16
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40022000 	.word	0x40022000
 8006894:	40021000 	.word	0x40021000
 8006898:	00001388 	.word	0x00001388
 800689c:	fffff8ff 	.word	0xfffff8ff
 80068a0:	0800cc48 	.word	0x0800cc48
 80068a4:	20000024 	.word	0x20000024

080068a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068a8:	b590      	push	{r4, r7, lr}
 80068aa:	b08f      	sub	sp, #60	; 0x3c
 80068ac:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80068ae:	2314      	movs	r3, #20
 80068b0:	18fb      	adds	r3, r7, r3
 80068b2:	4a2b      	ldr	r2, [pc, #172]	; (8006960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80068b6:	c313      	stmia	r3!, {r0, r1, r4}
 80068b8:	6812      	ldr	r2, [r2, #0]
 80068ba:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80068bc:	1d3b      	adds	r3, r7, #4
 80068be:	4a29      	ldr	r2, [pc, #164]	; (8006964 <HAL_RCC_GetSysClockFreq+0xbc>)
 80068c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80068c2:	c313      	stmia	r3!, {r0, r1, r4}
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068cc:	2300      	movs	r3, #0
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d0:	2300      	movs	r3, #0
 80068d2:	637b      	str	r3, [r7, #52]	; 0x34
 80068d4:	2300      	movs	r3, #0
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80068dc:	4b22      	ldr	r3, [pc, #136]	; (8006968 <HAL_RCC_GetSysClockFreq+0xc0>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	220c      	movs	r2, #12
 80068e6:	4013      	ands	r3, r2
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d002      	beq.n	80068f2 <HAL_RCC_GetSysClockFreq+0x4a>
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d003      	beq.n	80068f8 <HAL_RCC_GetSysClockFreq+0x50>
 80068f0:	e02d      	b.n	800694e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068f2:	4b1e      	ldr	r3, [pc, #120]	; (800696c <HAL_RCC_GetSysClockFreq+0xc4>)
 80068f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80068f6:	e02d      	b.n	8006954 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fa:	0c9b      	lsrs	r3, r3, #18
 80068fc:	220f      	movs	r2, #15
 80068fe:	4013      	ands	r3, r2
 8006900:	2214      	movs	r2, #20
 8006902:	18ba      	adds	r2, r7, r2
 8006904:	5cd3      	ldrb	r3, [r2, r3]
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006908:	4b17      	ldr	r3, [pc, #92]	; (8006968 <HAL_RCC_GetSysClockFreq+0xc0>)
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	220f      	movs	r2, #15
 800690e:	4013      	ands	r3, r2
 8006910:	1d3a      	adds	r2, r7, #4
 8006912:	5cd3      	ldrb	r3, [r2, r3]
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006918:	2380      	movs	r3, #128	; 0x80
 800691a:	025b      	lsls	r3, r3, #9
 800691c:	4013      	ands	r3, r2
 800691e:	d009      	beq.n	8006934 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006922:	4812      	ldr	r0, [pc, #72]	; (800696c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006924:	f7f9 fc0c 	bl	8000140 <__udivsi3>
 8006928:	0003      	movs	r3, r0
 800692a:	001a      	movs	r2, r3
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	4353      	muls	r3, r2
 8006930:	637b      	str	r3, [r7, #52]	; 0x34
 8006932:	e009      	b.n	8006948 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006936:	000a      	movs	r2, r1
 8006938:	0152      	lsls	r2, r2, #5
 800693a:	1a52      	subs	r2, r2, r1
 800693c:	0193      	lsls	r3, r2, #6
 800693e:	1a9b      	subs	r3, r3, r2
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	185b      	adds	r3, r3, r1
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8006948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800694c:	e002      	b.n	8006954 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800694e:	4b07      	ldr	r3, [pc, #28]	; (800696c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006950:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006952:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006956:	0018      	movs	r0, r3
 8006958:	46bd      	mov	sp, r7
 800695a:	b00f      	add	sp, #60	; 0x3c
 800695c:	bd90      	pop	{r4, r7, pc}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	0800cb28 	.word	0x0800cb28
 8006964:	0800cb38 	.word	0x0800cb38
 8006968:	40021000 	.word	0x40021000
 800696c:	007a1200 	.word	0x007a1200

08006970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006974:	4b02      	ldr	r3, [pc, #8]	; (8006980 <HAL_RCC_GetHCLKFreq+0x10>)
 8006976:	681b      	ldr	r3, [r3, #0]
}
 8006978:	0018      	movs	r0, r3
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	46c0      	nop			; (mov r8, r8)
 8006980:	20000024 	.word	0x20000024

08006984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006988:	f7ff fff2 	bl	8006970 <HAL_RCC_GetHCLKFreq>
 800698c:	0001      	movs	r1, r0
 800698e:	4b06      	ldr	r3, [pc, #24]	; (80069a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	0a1b      	lsrs	r3, r3, #8
 8006994:	2207      	movs	r2, #7
 8006996:	4013      	ands	r3, r2
 8006998:	4a04      	ldr	r2, [pc, #16]	; (80069ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800699a:	5cd3      	ldrb	r3, [r2, r3]
 800699c:	40d9      	lsrs	r1, r3
 800699e:	000b      	movs	r3, r1
}    
 80069a0:	0018      	movs	r0, r3
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	46c0      	nop			; (mov r8, r8)
 80069a8:	40021000 	.word	0x40021000
 80069ac:	0800cc58 	.word	0x0800cc58

080069b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	2380      	movs	r3, #128	; 0x80
 80069c6:	025b      	lsls	r3, r3, #9
 80069c8:	4013      	ands	r3, r2
 80069ca:	d100      	bne.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80069cc:	e08e      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80069ce:	2017      	movs	r0, #23
 80069d0:	183b      	adds	r3, r7, r0
 80069d2:	2200      	movs	r2, #0
 80069d4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069d6:	4b5f      	ldr	r3, [pc, #380]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80069d8:	69da      	ldr	r2, [r3, #28]
 80069da:	2380      	movs	r3, #128	; 0x80
 80069dc:	055b      	lsls	r3, r3, #21
 80069de:	4013      	ands	r3, r2
 80069e0:	d110      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80069e2:	4b5c      	ldr	r3, [pc, #368]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80069e4:	69da      	ldr	r2, [r3, #28]
 80069e6:	4b5b      	ldr	r3, [pc, #364]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80069e8:	2180      	movs	r1, #128	; 0x80
 80069ea:	0549      	lsls	r1, r1, #21
 80069ec:	430a      	orrs	r2, r1
 80069ee:	61da      	str	r2, [r3, #28]
 80069f0:	4b58      	ldr	r3, [pc, #352]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80069f2:	69da      	ldr	r2, [r3, #28]
 80069f4:	2380      	movs	r3, #128	; 0x80
 80069f6:	055b      	lsls	r3, r3, #21
 80069f8:	4013      	ands	r3, r2
 80069fa:	60bb      	str	r3, [r7, #8]
 80069fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069fe:	183b      	adds	r3, r7, r0
 8006a00:	2201      	movs	r2, #1
 8006a02:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a04:	4b54      	ldr	r3, [pc, #336]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	2380      	movs	r3, #128	; 0x80
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	d11a      	bne.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a10:	4b51      	ldr	r3, [pc, #324]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	4b50      	ldr	r3, [pc, #320]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a16:	2180      	movs	r1, #128	; 0x80
 8006a18:	0049      	lsls	r1, r1, #1
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a1e:	f7fd fd71 	bl	8004504 <HAL_GetTick>
 8006a22:	0003      	movs	r3, r0
 8006a24:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a26:	e008      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a28:	f7fd fd6c 	bl	8004504 <HAL_GetTick>
 8006a2c:	0002      	movs	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b64      	cmp	r3, #100	; 0x64
 8006a34:	d901      	bls.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e087      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a3a:	4b47      	ldr	r3, [pc, #284]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	2380      	movs	r3, #128	; 0x80
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	4013      	ands	r3, r2
 8006a44:	d0f0      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a46:	4b43      	ldr	r3, [pc, #268]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a48:	6a1a      	ldr	r2, [r3, #32]
 8006a4a:	23c0      	movs	r3, #192	; 0xc0
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4013      	ands	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d034      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	23c0      	movs	r3, #192	; 0xc0
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4013      	ands	r3, r2
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d02c      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a68:	4b3a      	ldr	r3, [pc, #232]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	4a3b      	ldr	r2, [pc, #236]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a72:	4b38      	ldr	r3, [pc, #224]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a74:	6a1a      	ldr	r2, [r3, #32]
 8006a76:	4b37      	ldr	r3, [pc, #220]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a78:	2180      	movs	r1, #128	; 0x80
 8006a7a:	0249      	lsls	r1, r1, #9
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a80:	4b34      	ldr	r3, [pc, #208]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a82:	6a1a      	ldr	r2, [r3, #32]
 8006a84:	4b33      	ldr	r3, [pc, #204]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a86:	4936      	ldr	r1, [pc, #216]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006a88:	400a      	ands	r2, r1
 8006a8a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a8c:	4b31      	ldr	r3, [pc, #196]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2201      	movs	r2, #1
 8006a96:	4013      	ands	r3, r2
 8006a98:	d013      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a9a:	f7fd fd33 	bl	8004504 <HAL_GetTick>
 8006a9e:	0003      	movs	r3, r0
 8006aa0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aa2:	e009      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa4:	f7fd fd2e 	bl	8004504 <HAL_GetTick>
 8006aa8:	0002      	movs	r2, r0
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	4a2d      	ldr	r2, [pc, #180]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d901      	bls.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e048      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab8:	4b26      	ldr	r3, [pc, #152]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	2202      	movs	r2, #2
 8006abe:	4013      	ands	r3, r2
 8006ac0:	d0f0      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ac2:	4b24      	ldr	r3, [pc, #144]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	4a25      	ldr	r2, [pc, #148]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	0019      	movs	r1, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	4b20      	ldr	r3, [pc, #128]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ad6:	2317      	movs	r3, #23
 8006ad8:	18fb      	adds	r3, r7, r3
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d105      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ae0:	4b1c      	ldr	r3, [pc, #112]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ae2:	69da      	ldr	r2, [r3, #28]
 8006ae4:	4b1b      	ldr	r3, [pc, #108]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ae6:	4920      	ldr	r1, [pc, #128]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ae8:	400a      	ands	r2, r1
 8006aea:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2201      	movs	r2, #1
 8006af2:	4013      	ands	r3, r2
 8006af4:	d009      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006af6:	4b17      	ldr	r3, [pc, #92]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afa:	2203      	movs	r2, #3
 8006afc:	4393      	bics	r3, r2
 8006afe:	0019      	movs	r1, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	4b13      	ldr	r3, [pc, #76]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b06:	430a      	orrs	r2, r1
 8006b08:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	4013      	ands	r3, r2
 8006b12:	d009      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b14:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b18:	2210      	movs	r2, #16
 8006b1a:	4393      	bics	r3, r2
 8006b1c:	0019      	movs	r1, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b24:	430a      	orrs	r2, r1
 8006b26:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	2380      	movs	r3, #128	; 0x80
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	4013      	ands	r3, r2
 8006b32:	d009      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b34:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b38:	2240      	movs	r2, #64	; 0x40
 8006b3a:	4393      	bics	r3, r2
 8006b3c:	0019      	movs	r1, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691a      	ldr	r2, [r3, #16]
 8006b42:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b44:	430a      	orrs	r2, r1
 8006b46:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	b006      	add	sp, #24
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	46c0      	nop			; (mov r8, r8)
 8006b54:	40021000 	.word	0x40021000
 8006b58:	40007000 	.word	0x40007000
 8006b5c:	fffffcff 	.word	0xfffffcff
 8006b60:	fffeffff 	.word	0xfffeffff
 8006b64:	00001388 	.word	0x00001388
 8006b68:	efffffff 	.word	0xefffffff

08006b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e044      	b.n	8006c08 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d107      	bne.n	8006b96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2274      	movs	r2, #116	; 0x74
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	0018      	movs	r0, r3
 8006b92:	f7fd fae9 	bl	8004168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2224      	movs	r2, #36	; 0x24
 8006b9a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	438a      	bics	r2, r1
 8006baa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f000 fc2e 	bl	8007410 <UART_SetConfig>
 8006bb4:	0003      	movs	r3, r0
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d101      	bne.n	8006bbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e024      	b.n	8006c08 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f000 fd61 	bl	8007690 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	490d      	ldr	r1, [pc, #52]	; (8006c10 <HAL_UART_Init+0xa4>)
 8006bda:	400a      	ands	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	212a      	movs	r1, #42	; 0x2a
 8006bea:	438a      	bics	r2, r1
 8006bec:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	0018      	movs	r0, r3
 8006c02:	f000 fdf9 	bl	80077f8 <UART_CheckIdleState>
 8006c06:	0003      	movs	r3, r0
}
 8006c08:	0018      	movs	r0, r3
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	b002      	add	sp, #8
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	ffffb7ff 	.word	0xffffb7ff

08006c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08a      	sub	sp, #40	; 0x28
 8006c18:	af02      	add	r7, sp, #8
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	603b      	str	r3, [r7, #0]
 8006c20:	1dbb      	adds	r3, r7, #6
 8006c22:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d000      	beq.n	8006c2e <HAL_UART_Transmit+0x1a>
 8006c2c:	e096      	b.n	8006d5c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <HAL_UART_Transmit+0x28>
 8006c34:	1dbb      	adds	r3, r7, #6
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e08e      	b.n	8006d5e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	2380      	movs	r3, #128	; 0x80
 8006c46:	015b      	lsls	r3, r3, #5
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d109      	bne.n	8006c60 <HAL_UART_Transmit+0x4c>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d105      	bne.n	8006c60 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2201      	movs	r2, #1
 8006c58:	4013      	ands	r3, r2
 8006c5a:	d001      	beq.n	8006c60 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e07e      	b.n	8006d5e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2274      	movs	r2, #116	; 0x74
 8006c64:	5c9b      	ldrb	r3, [r3, r2]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_UART_Transmit+0x5a>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e077      	b.n	8006d5e <HAL_UART_Transmit+0x14a>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2274      	movs	r2, #116	; 0x74
 8006c72:	2101      	movs	r1, #1
 8006c74:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2280      	movs	r2, #128	; 0x80
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2221      	movs	r2, #33	; 0x21
 8006c82:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c84:	f7fd fc3e 	bl	8004504 <HAL_GetTick>
 8006c88:	0003      	movs	r3, r0
 8006c8a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	1dba      	adds	r2, r7, #6
 8006c90:	2150      	movs	r1, #80	; 0x50
 8006c92:	8812      	ldrh	r2, [r2, #0]
 8006c94:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	1dba      	adds	r2, r7, #6
 8006c9a:	2152      	movs	r1, #82	; 0x52
 8006c9c:	8812      	ldrh	r2, [r2, #0]
 8006c9e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	2380      	movs	r3, #128	; 0x80
 8006ca6:	015b      	lsls	r3, r3, #5
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d108      	bne.n	8006cbe <HAL_UART_Transmit+0xaa>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d104      	bne.n	8006cbe <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	61bb      	str	r3, [r7, #24]
 8006cbc:	e003      	b.n	8006cc6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2274      	movs	r2, #116	; 0x74
 8006cca:	2100      	movs	r1, #0
 8006ccc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006cce:	e02d      	b.n	8006d2c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	0013      	movs	r3, r2
 8006cda:	2200      	movs	r2, #0
 8006cdc:	2180      	movs	r1, #128	; 0x80
 8006cde:	f000 fdd3 	bl	8007888 <UART_WaitOnFlagUntilTimeout>
 8006ce2:	1e03      	subs	r3, r0, #0
 8006ce4:	d001      	beq.n	8006cea <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e039      	b.n	8006d5e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10b      	bne.n	8006d08 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	881a      	ldrh	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	05d2      	lsls	r2, r2, #23
 8006cfa:	0dd2      	lsrs	r2, r2, #23
 8006cfc:	b292      	uxth	r2, r2
 8006cfe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	3302      	adds	r3, #2
 8006d04:	61bb      	str	r3, [r7, #24]
 8006d06:	e008      	b.n	8006d1a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	781a      	ldrb	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	b292      	uxth	r2, r2
 8006d12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	3301      	adds	r3, #1
 8006d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2252      	movs	r2, #82	; 0x52
 8006d1e:	5a9b      	ldrh	r3, [r3, r2]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b299      	uxth	r1, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2252      	movs	r2, #82	; 0x52
 8006d2a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2252      	movs	r2, #82	; 0x52
 8006d30:	5a9b      	ldrh	r3, [r3, r2]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1cb      	bne.n	8006cd0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	0013      	movs	r3, r2
 8006d42:	2200      	movs	r2, #0
 8006d44:	2140      	movs	r1, #64	; 0x40
 8006d46:	f000 fd9f 	bl	8007888 <UART_WaitOnFlagUntilTimeout>
 8006d4a:	1e03      	subs	r3, r0, #0
 8006d4c:	d001      	beq.n	8006d52 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e005      	b.n	8006d5e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2220      	movs	r2, #32
 8006d56:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e000      	b.n	8006d5e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006d5c:	2302      	movs	r3, #2
  }
}
 8006d5e:	0018      	movs	r0, r3
 8006d60:	46bd      	mov	sp, r7
 8006d62:	b008      	add	sp, #32
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b088      	sub	sp, #32
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	1dbb      	adds	r3, r7, #6
 8006d72:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d78:	2b20      	cmp	r3, #32
 8006d7a:	d150      	bne.n	8006e1e <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <HAL_UART_Receive_IT+0x24>
 8006d82:	1dbb      	adds	r3, r7, #6
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e048      	b.n	8006e20 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	689a      	ldr	r2, [r3, #8]
 8006d92:	2380      	movs	r3, #128	; 0x80
 8006d94:	015b      	lsls	r3, r3, #5
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d109      	bne.n	8006dae <HAL_UART_Receive_IT+0x48>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d105      	bne.n	8006dae <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2201      	movs	r2, #1
 8006da6:	4013      	ands	r3, r2
 8006da8:	d001      	beq.n	8006dae <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e038      	b.n	8006e20 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2274      	movs	r2, #116	; 0x74
 8006db2:	5c9b      	ldrb	r3, [r3, r2]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_UART_Receive_IT+0x56>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e031      	b.n	8006e20 <HAL_UART_Receive_IT+0xba>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2274      	movs	r2, #116	; 0x74
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	2380      	movs	r3, #128	; 0x80
 8006dd2:	041b      	lsls	r3, r3, #16
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	d019      	beq.n	8006e0c <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8006ddc:	613b      	str	r3, [r7, #16]
  return(result);
 8006dde:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006de0:	61fb      	str	r3, [r7, #28]
 8006de2:	2301      	movs	r3, #1
 8006de4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f383 8810 	msr	PRIMASK, r3
}
 8006dec:	46c0      	nop			; (mov r8, r8)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2180      	movs	r1, #128	; 0x80
 8006dfa:	04c9      	lsls	r1, r1, #19
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	f383 8810 	msr	PRIMASK, r3
}
 8006e0a:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e0c:	1dbb      	adds	r3, r7, #6
 8006e0e:	881a      	ldrh	r2, [r3, #0]
 8006e10:	68b9      	ldr	r1, [r7, #8]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	0018      	movs	r0, r3
 8006e16:	f000 fdfb 	bl	8007a10 <UART_Start_Receive_IT>
 8006e1a:	0003      	movs	r3, r0
 8006e1c:	e000      	b.n	8006e20 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006e1e:	2302      	movs	r3, #2
  }
}
 8006e20:	0018      	movs	r0, r3
 8006e22:	46bd      	mov	sp, r7
 8006e24:	b008      	add	sp, #32
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e28:	b590      	push	{r4, r7, lr}
 8006e2a:	b0ab      	sub	sp, #172	; 0xac
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	22a4      	movs	r2, #164	; 0xa4
 8006e38:	18b9      	adds	r1, r7, r2
 8006e3a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	20a0      	movs	r0, #160	; 0xa0
 8006e44:	1839      	adds	r1, r7, r0
 8006e46:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	219c      	movs	r1, #156	; 0x9c
 8006e50:	1879      	adds	r1, r7, r1
 8006e52:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e54:	0011      	movs	r1, r2
 8006e56:	18bb      	adds	r3, r7, r2
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a99      	ldr	r2, [pc, #612]	; (80070c0 <HAL_UART_IRQHandler+0x298>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	2298      	movs	r2, #152	; 0x98
 8006e60:	18bc      	adds	r4, r7, r2
 8006e62:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006e64:	18bb      	adds	r3, r7, r2
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d114      	bne.n	8006e96 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e6c:	187b      	adds	r3, r7, r1
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2220      	movs	r2, #32
 8006e72:	4013      	ands	r3, r2
 8006e74:	d00f      	beq.n	8006e96 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e76:	183b      	adds	r3, r7, r0
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	d00a      	beq.n	8006e96 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d100      	bne.n	8006e8a <HAL_UART_IRQHandler+0x62>
 8006e88:	e296      	b.n	80073b8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	0010      	movs	r0, r2
 8006e92:	4798      	blx	r3
      }
      return;
 8006e94:	e290      	b.n	80073b8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e96:	2398      	movs	r3, #152	; 0x98
 8006e98:	18fb      	adds	r3, r7, r3
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d100      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x7a>
 8006ea0:	e114      	b.n	80070cc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ea2:	239c      	movs	r3, #156	; 0x9c
 8006ea4:	18fb      	adds	r3, r7, r3
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	4013      	ands	r3, r2
 8006eac:	d106      	bne.n	8006ebc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006eae:	23a0      	movs	r3, #160	; 0xa0
 8006eb0:	18fb      	adds	r3, r7, r3
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a83      	ldr	r2, [pc, #524]	; (80070c4 <HAL_UART_IRQHandler+0x29c>)
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	d100      	bne.n	8006ebc <HAL_UART_IRQHandler+0x94>
 8006eba:	e107      	b.n	80070cc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ebc:	23a4      	movs	r3, #164	; 0xa4
 8006ebe:	18fb      	adds	r3, r7, r3
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	d012      	beq.n	8006eee <HAL_UART_IRQHandler+0xc6>
 8006ec8:	23a0      	movs	r3, #160	; 0xa0
 8006eca:	18fb      	adds	r3, r7, r3
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	2380      	movs	r3, #128	; 0x80
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	d00b      	beq.n	8006eee <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2201      	movs	r2, #1
 8006edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2280      	movs	r2, #128	; 0x80
 8006ee2:	589b      	ldr	r3, [r3, r2]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2180      	movs	r1, #128	; 0x80
 8006eec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006eee:	23a4      	movs	r3, #164	; 0xa4
 8006ef0:	18fb      	adds	r3, r7, r3
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	d011      	beq.n	8006f1e <HAL_UART_IRQHandler+0xf6>
 8006efa:	239c      	movs	r3, #156	; 0x9c
 8006efc:	18fb      	adds	r3, r7, r3
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2201      	movs	r2, #1
 8006f02:	4013      	ands	r3, r2
 8006f04:	d00b      	beq.n	8006f1e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2280      	movs	r2, #128	; 0x80
 8006f12:	589b      	ldr	r3, [r3, r2]
 8006f14:	2204      	movs	r2, #4
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2180      	movs	r1, #128	; 0x80
 8006f1c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f1e:	23a4      	movs	r3, #164	; 0xa4
 8006f20:	18fb      	adds	r3, r7, r3
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2204      	movs	r2, #4
 8006f26:	4013      	ands	r3, r2
 8006f28:	d011      	beq.n	8006f4e <HAL_UART_IRQHandler+0x126>
 8006f2a:	239c      	movs	r3, #156	; 0x9c
 8006f2c:	18fb      	adds	r3, r7, r3
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2201      	movs	r2, #1
 8006f32:	4013      	ands	r3, r2
 8006f34:	d00b      	beq.n	8006f4e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2204      	movs	r2, #4
 8006f3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2280      	movs	r2, #128	; 0x80
 8006f42:	589b      	ldr	r3, [r3, r2]
 8006f44:	2202      	movs	r2, #2
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2180      	movs	r1, #128	; 0x80
 8006f4c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f4e:	23a4      	movs	r3, #164	; 0xa4
 8006f50:	18fb      	adds	r3, r7, r3
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2208      	movs	r2, #8
 8006f56:	4013      	ands	r3, r2
 8006f58:	d017      	beq.n	8006f8a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f5a:	23a0      	movs	r3, #160	; 0xa0
 8006f5c:	18fb      	adds	r3, r7, r3
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2220      	movs	r2, #32
 8006f62:	4013      	ands	r3, r2
 8006f64:	d105      	bne.n	8006f72 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f66:	239c      	movs	r3, #156	; 0x9c
 8006f68:	18fb      	adds	r3, r7, r3
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f70:	d00b      	beq.n	8006f8a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2208      	movs	r2, #8
 8006f78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2280      	movs	r2, #128	; 0x80
 8006f7e:	589b      	ldr	r3, [r3, r2]
 8006f80:	2208      	movs	r2, #8
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2180      	movs	r1, #128	; 0x80
 8006f88:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f8a:	23a4      	movs	r3, #164	; 0xa4
 8006f8c:	18fb      	adds	r3, r7, r3
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	2380      	movs	r3, #128	; 0x80
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	4013      	ands	r3, r2
 8006f96:	d013      	beq.n	8006fc0 <HAL_UART_IRQHandler+0x198>
 8006f98:	23a0      	movs	r3, #160	; 0xa0
 8006f9a:	18fb      	adds	r3, r7, r3
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	2380      	movs	r3, #128	; 0x80
 8006fa0:	04db      	lsls	r3, r3, #19
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	d00c      	beq.n	8006fc0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2280      	movs	r2, #128	; 0x80
 8006fac:	0112      	lsls	r2, r2, #4
 8006fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2280      	movs	r2, #128	; 0x80
 8006fb4:	589b      	ldr	r3, [r3, r2]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2180      	movs	r1, #128	; 0x80
 8006fbe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2280      	movs	r2, #128	; 0x80
 8006fc4:	589b      	ldr	r3, [r3, r2]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d100      	bne.n	8006fcc <HAL_UART_IRQHandler+0x1a4>
 8006fca:	e1f7      	b.n	80073bc <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006fcc:	23a4      	movs	r3, #164	; 0xa4
 8006fce:	18fb      	adds	r3, r7, r3
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	d00e      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fd8:	23a0      	movs	r3, #160	; 0xa0
 8006fda:	18fb      	adds	r3, r7, r3
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	d008      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d004      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	0010      	movs	r0, r2
 8006ff4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2280      	movs	r2, #128	; 0x80
 8006ffa:	589b      	ldr	r3, [r3, r2]
 8006ffc:	2194      	movs	r1, #148	; 0x94
 8006ffe:	187a      	adds	r2, r7, r1
 8007000:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	2240      	movs	r2, #64	; 0x40
 800700a:	4013      	ands	r3, r2
 800700c:	2b40      	cmp	r3, #64	; 0x40
 800700e:	d004      	beq.n	800701a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007010:	187b      	adds	r3, r7, r1
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2228      	movs	r2, #40	; 0x28
 8007016:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007018:	d047      	beq.n	80070aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	0018      	movs	r0, r3
 800701e:	f000 fd93 	bl	8007b48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	2240      	movs	r2, #64	; 0x40
 800702a:	4013      	ands	r3, r2
 800702c:	2b40      	cmp	r3, #64	; 0x40
 800702e:	d137      	bne.n	80070a0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007030:	f3ef 8310 	mrs	r3, PRIMASK
 8007034:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007038:	2090      	movs	r0, #144	; 0x90
 800703a:	183a      	adds	r2, r7, r0
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	2301      	movs	r3, #1
 8007040:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007044:	f383 8810 	msr	PRIMASK, r3
}
 8007048:	46c0      	nop			; (mov r8, r8)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2140      	movs	r1, #64	; 0x40
 8007056:	438a      	bics	r2, r1
 8007058:	609a      	str	r2, [r3, #8]
 800705a:	183b      	adds	r3, r7, r0
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007060:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007062:	f383 8810 	msr	PRIMASK, r3
}
 8007066:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706c:	2b00      	cmp	r3, #0
 800706e:	d012      	beq.n	8007096 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007074:	4a14      	ldr	r2, [pc, #80]	; (80070c8 <HAL_UART_IRQHandler+0x2a0>)
 8007076:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707c:	0018      	movs	r0, r3
 800707e:	f7fd ffff 	bl	8005080 <HAL_DMA_Abort_IT>
 8007082:	1e03      	subs	r3, r0, #0
 8007084:	d01a      	beq.n	80070bc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007090:	0018      	movs	r0, r3
 8007092:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007094:	e012      	b.n	80070bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	0018      	movs	r0, r3
 800709a:	f000 f9a5 	bl	80073e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800709e:	e00d      	b.n	80070bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	0018      	movs	r0, r3
 80070a4:	f000 f9a0 	bl	80073e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a8:	e008      	b.n	80070bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	0018      	movs	r0, r3
 80070ae:	f000 f99b 	bl	80073e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2280      	movs	r2, #128	; 0x80
 80070b6:	2100      	movs	r1, #0
 80070b8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80070ba:	e17f      	b.n	80073bc <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070bc:	46c0      	nop			; (mov r8, r8)
    return;
 80070be:	e17d      	b.n	80073bc <HAL_UART_IRQHandler+0x594>
 80070c0:	0000080f 	.word	0x0000080f
 80070c4:	04000120 	.word	0x04000120
 80070c8:	08007c0d 	.word	0x08007c0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d000      	beq.n	80070d6 <HAL_UART_IRQHandler+0x2ae>
 80070d4:	e131      	b.n	800733a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80070d6:	23a4      	movs	r3, #164	; 0xa4
 80070d8:	18fb      	adds	r3, r7, r3
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2210      	movs	r2, #16
 80070de:	4013      	ands	r3, r2
 80070e0:	d100      	bne.n	80070e4 <HAL_UART_IRQHandler+0x2bc>
 80070e2:	e12a      	b.n	800733a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80070e4:	23a0      	movs	r3, #160	; 0xa0
 80070e6:	18fb      	adds	r3, r7, r3
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2210      	movs	r2, #16
 80070ec:	4013      	ands	r3, r2
 80070ee:	d100      	bne.n	80070f2 <HAL_UART_IRQHandler+0x2ca>
 80070f0:	e123      	b.n	800733a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2210      	movs	r2, #16
 80070f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	2240      	movs	r2, #64	; 0x40
 8007102:	4013      	ands	r3, r2
 8007104:	2b40      	cmp	r3, #64	; 0x40
 8007106:	d000      	beq.n	800710a <HAL_UART_IRQHandler+0x2e2>
 8007108:	e09b      	b.n	8007242 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	217e      	movs	r1, #126	; 0x7e
 8007114:	187b      	adds	r3, r7, r1
 8007116:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007118:	187b      	adds	r3, r7, r1
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d100      	bne.n	8007122 <HAL_UART_IRQHandler+0x2fa>
 8007120:	e14e      	b.n	80073c0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2258      	movs	r2, #88	; 0x58
 8007126:	5a9b      	ldrh	r3, [r3, r2]
 8007128:	187a      	adds	r2, r7, r1
 800712a:	8812      	ldrh	r2, [r2, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d300      	bcc.n	8007132 <HAL_UART_IRQHandler+0x30a>
 8007130:	e146      	b.n	80073c0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	187a      	adds	r2, r7, r1
 8007136:	215a      	movs	r1, #90	; 0x5a
 8007138:	8812      	ldrh	r2, [r2, #0]
 800713a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	2b20      	cmp	r3, #32
 8007144:	d06e      	beq.n	8007224 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007146:	f3ef 8310 	mrs	r3, PRIMASK
 800714a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800714e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007150:	2301      	movs	r3, #1
 8007152:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007156:	f383 8810 	msr	PRIMASK, r3
}
 800715a:	46c0      	nop			; (mov r8, r8)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	499a      	ldr	r1, [pc, #616]	; (80073d0 <HAL_UART_IRQHandler+0x5a8>)
 8007168:	400a      	ands	r2, r1
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800716e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	f383 8810 	msr	PRIMASK, r3
}
 8007176:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007178:	f3ef 8310 	mrs	r3, PRIMASK
 800717c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800717e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007180:	677b      	str	r3, [r7, #116]	; 0x74
 8007182:	2301      	movs	r3, #1
 8007184:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007188:	f383 8810 	msr	PRIMASK, r3
}
 800718c:	46c0      	nop			; (mov r8, r8)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2101      	movs	r1, #1
 800719a:	438a      	bics	r2, r1
 800719c:	609a      	str	r2, [r3, #8]
 800719e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071a0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a4:	f383 8810 	msr	PRIMASK, r3
}
 80071a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071aa:	f3ef 8310 	mrs	r3, PRIMASK
 80071ae:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80071b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071b2:	673b      	str	r3, [r7, #112]	; 0x70
 80071b4:	2301      	movs	r3, #1
 80071b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ba:	f383 8810 	msr	PRIMASK, r3
}
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2140      	movs	r1, #64	; 0x40
 80071cc:	438a      	bics	r2, r1
 80071ce:	609a      	str	r2, [r3, #8]
 80071d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071d2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071d6:	f383 8810 	msr	PRIMASK, r3
}
 80071da:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2220      	movs	r2, #32
 80071e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071e8:	f3ef 8310 	mrs	r3, PRIMASK
 80071ec:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80071ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071f2:	2301      	movs	r3, #1
 80071f4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071f8:	f383 8810 	msr	PRIMASK, r3
}
 80071fc:	46c0      	nop			; (mov r8, r8)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2110      	movs	r1, #16
 800720a:	438a      	bics	r2, r1
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007210:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007214:	f383 8810 	msr	PRIMASK, r3
}
 8007218:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721e:	0018      	movs	r0, r3
 8007220:	f7fd fef6 	bl	8005010 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2258      	movs	r2, #88	; 0x58
 8007228:	5a9a      	ldrh	r2, [r3, r2]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	215a      	movs	r1, #90	; 0x5a
 800722e:	5a5b      	ldrh	r3, [r3, r1]
 8007230:	b29b      	uxth	r3, r3
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	b29a      	uxth	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	0011      	movs	r1, r2
 800723a:	0018      	movs	r0, r3
 800723c:	f000 f8dc 	bl	80073f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007240:	e0be      	b.n	80073c0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2258      	movs	r2, #88	; 0x58
 8007246:	5a99      	ldrh	r1, [r3, r2]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	225a      	movs	r2, #90	; 0x5a
 800724c:	5a9b      	ldrh	r3, [r3, r2]
 800724e:	b29a      	uxth	r2, r3
 8007250:	208e      	movs	r0, #142	; 0x8e
 8007252:	183b      	adds	r3, r7, r0
 8007254:	1a8a      	subs	r2, r1, r2
 8007256:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	225a      	movs	r2, #90	; 0x5a
 800725c:	5a9b      	ldrh	r3, [r3, r2]
 800725e:	b29b      	uxth	r3, r3
 8007260:	2b00      	cmp	r3, #0
 8007262:	d100      	bne.n	8007266 <HAL_UART_IRQHandler+0x43e>
 8007264:	e0ae      	b.n	80073c4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8007266:	183b      	adds	r3, r7, r0
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d100      	bne.n	8007270 <HAL_UART_IRQHandler+0x448>
 800726e:	e0a9      	b.n	80073c4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007270:	f3ef 8310 	mrs	r3, PRIMASK
 8007274:	60fb      	str	r3, [r7, #12]
  return(result);
 8007276:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007278:	2488      	movs	r4, #136	; 0x88
 800727a:	193a      	adds	r2, r7, r4
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	2301      	movs	r3, #1
 8007280:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f383 8810 	msr	PRIMASK, r3
}
 8007288:	46c0      	nop			; (mov r8, r8)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	494f      	ldr	r1, [pc, #316]	; (80073d4 <HAL_UART_IRQHandler+0x5ac>)
 8007296:	400a      	ands	r2, r1
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	193b      	adds	r3, r7, r4
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f383 8810 	msr	PRIMASK, r3
}
 80072a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072a8:	f3ef 8310 	mrs	r3, PRIMASK
 80072ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80072ae:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b0:	2484      	movs	r4, #132	; 0x84
 80072b2:	193a      	adds	r2, r7, r4
 80072b4:	6013      	str	r3, [r2, #0]
 80072b6:	2301      	movs	r3, #1
 80072b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	f383 8810 	msr	PRIMASK, r3
}
 80072c0:	46c0      	nop			; (mov r8, r8)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2101      	movs	r1, #1
 80072ce:	438a      	bics	r2, r1
 80072d0:	609a      	str	r2, [r3, #8]
 80072d2:	193b      	adds	r3, r7, r4
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	f383 8810 	msr	PRIMASK, r3
}
 80072de:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2220      	movs	r2, #32
 80072e4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072f2:	f3ef 8310 	mrs	r3, PRIMASK
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072fa:	2480      	movs	r4, #128	; 0x80
 80072fc:	193a      	adds	r2, r7, r4
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	2301      	movs	r3, #1
 8007302:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007306:	f383 8810 	msr	PRIMASK, r3
}
 800730a:	46c0      	nop			; (mov r8, r8)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2110      	movs	r1, #16
 8007318:	438a      	bics	r2, r1
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	193b      	adds	r3, r7, r4
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007324:	f383 8810 	msr	PRIMASK, r3
}
 8007328:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800732a:	183b      	adds	r3, r7, r0
 800732c:	881a      	ldrh	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	0011      	movs	r1, r2
 8007332:	0018      	movs	r0, r3
 8007334:	f000 f860 	bl	80073f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007338:	e044      	b.n	80073c4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800733a:	23a4      	movs	r3, #164	; 0xa4
 800733c:	18fb      	adds	r3, r7, r3
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	2380      	movs	r3, #128	; 0x80
 8007342:	035b      	lsls	r3, r3, #13
 8007344:	4013      	ands	r3, r2
 8007346:	d010      	beq.n	800736a <HAL_UART_IRQHandler+0x542>
 8007348:	239c      	movs	r3, #156	; 0x9c
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	2380      	movs	r3, #128	; 0x80
 8007350:	03db      	lsls	r3, r3, #15
 8007352:	4013      	ands	r3, r2
 8007354:	d009      	beq.n	800736a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2280      	movs	r2, #128	; 0x80
 800735c:	0352      	lsls	r2, r2, #13
 800735e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	0018      	movs	r0, r3
 8007364:	f000 fdfc 	bl	8007f60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007368:	e02f      	b.n	80073ca <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800736a:	23a4      	movs	r3, #164	; 0xa4
 800736c:	18fb      	adds	r3, r7, r3
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2280      	movs	r2, #128	; 0x80
 8007372:	4013      	ands	r3, r2
 8007374:	d00f      	beq.n	8007396 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007376:	23a0      	movs	r3, #160	; 0xa0
 8007378:	18fb      	adds	r3, r7, r3
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2280      	movs	r2, #128	; 0x80
 800737e:	4013      	ands	r3, r2
 8007380:	d009      	beq.n	8007396 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007386:	2b00      	cmp	r3, #0
 8007388:	d01e      	beq.n	80073c8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	0010      	movs	r0, r2
 8007392:	4798      	blx	r3
    }
    return;
 8007394:	e018      	b.n	80073c8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007396:	23a4      	movs	r3, #164	; 0xa4
 8007398:	18fb      	adds	r3, r7, r3
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2240      	movs	r2, #64	; 0x40
 800739e:	4013      	ands	r3, r2
 80073a0:	d013      	beq.n	80073ca <HAL_UART_IRQHandler+0x5a2>
 80073a2:	23a0      	movs	r3, #160	; 0xa0
 80073a4:	18fb      	adds	r3, r7, r3
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2240      	movs	r2, #64	; 0x40
 80073aa:	4013      	ands	r3, r2
 80073ac:	d00d      	beq.n	80073ca <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	0018      	movs	r0, r3
 80073b2:	f000 fc42 	bl	8007c3a <UART_EndTransmit_IT>
    return;
 80073b6:	e008      	b.n	80073ca <HAL_UART_IRQHandler+0x5a2>
      return;
 80073b8:	46c0      	nop			; (mov r8, r8)
 80073ba:	e006      	b.n	80073ca <HAL_UART_IRQHandler+0x5a2>
    return;
 80073bc:	46c0      	nop			; (mov r8, r8)
 80073be:	e004      	b.n	80073ca <HAL_UART_IRQHandler+0x5a2>
      return;
 80073c0:	46c0      	nop			; (mov r8, r8)
 80073c2:	e002      	b.n	80073ca <HAL_UART_IRQHandler+0x5a2>
      return;
 80073c4:	46c0      	nop			; (mov r8, r8)
 80073c6:	e000      	b.n	80073ca <HAL_UART_IRQHandler+0x5a2>
    return;
 80073c8:	46c0      	nop			; (mov r8, r8)
  }

}
 80073ca:	46bd      	mov	sp, r7
 80073cc:	b02b      	add	sp, #172	; 0xac
 80073ce:	bd90      	pop	{r4, r7, pc}
 80073d0:	fffffeff 	.word	0xfffffeff
 80073d4:	fffffedf 	.word	0xfffffedf

080073d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073e0:	46c0      	nop			; (mov r8, r8)
 80073e2:	46bd      	mov	sp, r7
 80073e4:	b002      	add	sp, #8
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073f0:	46c0      	nop			; (mov r8, r8)
 80073f2:	46bd      	mov	sp, r7
 80073f4:	b002      	add	sp, #8
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	000a      	movs	r2, r1
 8007402:	1cbb      	adds	r3, r7, #2
 8007404:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	46bd      	mov	sp, r7
 800740a:	b002      	add	sp, #8
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007418:	231e      	movs	r3, #30
 800741a:	18fb      	adds	r3, r7, r3
 800741c:	2200      	movs	r2, #0
 800741e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	431a      	orrs	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	4313      	orrs	r3, r2
 8007436:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a8d      	ldr	r2, [pc, #564]	; (8007674 <UART_SetConfig+0x264>)
 8007440:	4013      	ands	r3, r2
 8007442:	0019      	movs	r1, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	430a      	orrs	r2, r1
 800744c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	4a88      	ldr	r2, [pc, #544]	; (8007678 <UART_SetConfig+0x268>)
 8007456:	4013      	ands	r3, r2
 8007458:	0019      	movs	r1, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68da      	ldr	r2, [r3, #12]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	4313      	orrs	r3, r2
 8007474:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	4a7f      	ldr	r2, [pc, #508]	; (800767c <UART_SetConfig+0x26c>)
 800747e:	4013      	ands	r3, r2
 8007480:	0019      	movs	r1, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	430a      	orrs	r2, r1
 800748a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a7b      	ldr	r2, [pc, #492]	; (8007680 <UART_SetConfig+0x270>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d127      	bne.n	80074e6 <UART_SetConfig+0xd6>
 8007496:	4b7b      	ldr	r3, [pc, #492]	; (8007684 <UART_SetConfig+0x274>)
 8007498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749a:	2203      	movs	r2, #3
 800749c:	4013      	ands	r3, r2
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d00d      	beq.n	80074be <UART_SetConfig+0xae>
 80074a2:	d81b      	bhi.n	80074dc <UART_SetConfig+0xcc>
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d014      	beq.n	80074d2 <UART_SetConfig+0xc2>
 80074a8:	d818      	bhi.n	80074dc <UART_SetConfig+0xcc>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <UART_SetConfig+0xa4>
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d00a      	beq.n	80074c8 <UART_SetConfig+0xb8>
 80074b2:	e013      	b.n	80074dc <UART_SetConfig+0xcc>
 80074b4:	231f      	movs	r3, #31
 80074b6:	18fb      	adds	r3, r7, r3
 80074b8:	2200      	movs	r2, #0
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	e021      	b.n	8007502 <UART_SetConfig+0xf2>
 80074be:	231f      	movs	r3, #31
 80074c0:	18fb      	adds	r3, r7, r3
 80074c2:	2202      	movs	r2, #2
 80074c4:	701a      	strb	r2, [r3, #0]
 80074c6:	e01c      	b.n	8007502 <UART_SetConfig+0xf2>
 80074c8:	231f      	movs	r3, #31
 80074ca:	18fb      	adds	r3, r7, r3
 80074cc:	2204      	movs	r2, #4
 80074ce:	701a      	strb	r2, [r3, #0]
 80074d0:	e017      	b.n	8007502 <UART_SetConfig+0xf2>
 80074d2:	231f      	movs	r3, #31
 80074d4:	18fb      	adds	r3, r7, r3
 80074d6:	2208      	movs	r2, #8
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	e012      	b.n	8007502 <UART_SetConfig+0xf2>
 80074dc:	231f      	movs	r3, #31
 80074de:	18fb      	adds	r3, r7, r3
 80074e0:	2210      	movs	r2, #16
 80074e2:	701a      	strb	r2, [r3, #0]
 80074e4:	e00d      	b.n	8007502 <UART_SetConfig+0xf2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a67      	ldr	r2, [pc, #412]	; (8007688 <UART_SetConfig+0x278>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d104      	bne.n	80074fa <UART_SetConfig+0xea>
 80074f0:	231f      	movs	r3, #31
 80074f2:	18fb      	adds	r3, r7, r3
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	e003      	b.n	8007502 <UART_SetConfig+0xf2>
 80074fa:	231f      	movs	r3, #31
 80074fc:	18fb      	adds	r3, r7, r3
 80074fe:	2210      	movs	r2, #16
 8007500:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	69da      	ldr	r2, [r3, #28]
 8007506:	2380      	movs	r3, #128	; 0x80
 8007508:	021b      	lsls	r3, r3, #8
 800750a:	429a      	cmp	r2, r3
 800750c:	d15d      	bne.n	80075ca <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800750e:	231f      	movs	r3, #31
 8007510:	18fb      	adds	r3, r7, r3
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b08      	cmp	r3, #8
 8007516:	d015      	beq.n	8007544 <UART_SetConfig+0x134>
 8007518:	dc18      	bgt.n	800754c <UART_SetConfig+0x13c>
 800751a:	2b04      	cmp	r3, #4
 800751c:	d00d      	beq.n	800753a <UART_SetConfig+0x12a>
 800751e:	dc15      	bgt.n	800754c <UART_SetConfig+0x13c>
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <UART_SetConfig+0x11a>
 8007524:	2b02      	cmp	r3, #2
 8007526:	d005      	beq.n	8007534 <UART_SetConfig+0x124>
 8007528:	e010      	b.n	800754c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800752a:	f7ff fa2b 	bl	8006984 <HAL_RCC_GetPCLK1Freq>
 800752e:	0003      	movs	r3, r0
 8007530:	61bb      	str	r3, [r7, #24]
        break;
 8007532:	e012      	b.n	800755a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007534:	4b55      	ldr	r3, [pc, #340]	; (800768c <UART_SetConfig+0x27c>)
 8007536:	61bb      	str	r3, [r7, #24]
        break;
 8007538:	e00f      	b.n	800755a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800753a:	f7ff f9b5 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 800753e:	0003      	movs	r3, r0
 8007540:	61bb      	str	r3, [r7, #24]
        break;
 8007542:	e00a      	b.n	800755a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007544:	2380      	movs	r3, #128	; 0x80
 8007546:	021b      	lsls	r3, r3, #8
 8007548:	61bb      	str	r3, [r7, #24]
        break;
 800754a:	e006      	b.n	800755a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007550:	231e      	movs	r3, #30
 8007552:	18fb      	adds	r3, r7, r3
 8007554:	2201      	movs	r2, #1
 8007556:	701a      	strb	r2, [r3, #0]
        break;
 8007558:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d100      	bne.n	8007562 <UART_SetConfig+0x152>
 8007560:	e07b      	b.n	800765a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	005a      	lsls	r2, r3, #1
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	085b      	lsrs	r3, r3, #1
 800756c:	18d2      	adds	r2, r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	0019      	movs	r1, r3
 8007574:	0010      	movs	r0, r2
 8007576:	f7f8 fde3 	bl	8000140 <__udivsi3>
 800757a:	0003      	movs	r3, r0
 800757c:	b29b      	uxth	r3, r3
 800757e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	2b0f      	cmp	r3, #15
 8007584:	d91c      	bls.n	80075c0 <UART_SetConfig+0x1b0>
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	2380      	movs	r3, #128	; 0x80
 800758a:	025b      	lsls	r3, r3, #9
 800758c:	429a      	cmp	r2, r3
 800758e:	d217      	bcs.n	80075c0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	b29a      	uxth	r2, r3
 8007594:	200e      	movs	r0, #14
 8007596:	183b      	adds	r3, r7, r0
 8007598:	210f      	movs	r1, #15
 800759a:	438a      	bics	r2, r1
 800759c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	085b      	lsrs	r3, r3, #1
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	2207      	movs	r2, #7
 80075a6:	4013      	ands	r3, r2
 80075a8:	b299      	uxth	r1, r3
 80075aa:	183b      	adds	r3, r7, r0
 80075ac:	183a      	adds	r2, r7, r0
 80075ae:	8812      	ldrh	r2, [r2, #0]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	183a      	adds	r2, r7, r0
 80075ba:	8812      	ldrh	r2, [r2, #0]
 80075bc:	60da      	str	r2, [r3, #12]
 80075be:	e04c      	b.n	800765a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80075c0:	231e      	movs	r3, #30
 80075c2:	18fb      	adds	r3, r7, r3
 80075c4:	2201      	movs	r2, #1
 80075c6:	701a      	strb	r2, [r3, #0]
 80075c8:	e047      	b.n	800765a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075ca:	231f      	movs	r3, #31
 80075cc:	18fb      	adds	r3, r7, r3
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d015      	beq.n	8007600 <UART_SetConfig+0x1f0>
 80075d4:	dc18      	bgt.n	8007608 <UART_SetConfig+0x1f8>
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d00d      	beq.n	80075f6 <UART_SetConfig+0x1e6>
 80075da:	dc15      	bgt.n	8007608 <UART_SetConfig+0x1f8>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <UART_SetConfig+0x1d6>
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d005      	beq.n	80075f0 <UART_SetConfig+0x1e0>
 80075e4:	e010      	b.n	8007608 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075e6:	f7ff f9cd 	bl	8006984 <HAL_RCC_GetPCLK1Freq>
 80075ea:	0003      	movs	r3, r0
 80075ec:	61bb      	str	r3, [r7, #24]
        break;
 80075ee:	e012      	b.n	8007616 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075f0:	4b26      	ldr	r3, [pc, #152]	; (800768c <UART_SetConfig+0x27c>)
 80075f2:	61bb      	str	r3, [r7, #24]
        break;
 80075f4:	e00f      	b.n	8007616 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075f6:	f7ff f957 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 80075fa:	0003      	movs	r3, r0
 80075fc:	61bb      	str	r3, [r7, #24]
        break;
 80075fe:	e00a      	b.n	8007616 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007600:	2380      	movs	r3, #128	; 0x80
 8007602:	021b      	lsls	r3, r3, #8
 8007604:	61bb      	str	r3, [r7, #24]
        break;
 8007606:	e006      	b.n	8007616 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800760c:	231e      	movs	r3, #30
 800760e:	18fb      	adds	r3, r7, r3
 8007610:	2201      	movs	r2, #1
 8007612:	701a      	strb	r2, [r3, #0]
        break;
 8007614:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d01e      	beq.n	800765a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	085a      	lsrs	r2, r3, #1
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	18d2      	adds	r2, r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	0019      	movs	r1, r3
 800762c:	0010      	movs	r0, r2
 800762e:	f7f8 fd87 	bl	8000140 <__udivsi3>
 8007632:	0003      	movs	r3, r0
 8007634:	b29b      	uxth	r3, r3
 8007636:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2b0f      	cmp	r3, #15
 800763c:	d909      	bls.n	8007652 <UART_SetConfig+0x242>
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	2380      	movs	r3, #128	; 0x80
 8007642:	025b      	lsls	r3, r3, #9
 8007644:	429a      	cmp	r2, r3
 8007646:	d204      	bcs.n	8007652 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	60da      	str	r2, [r3, #12]
 8007650:	e003      	b.n	800765a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8007652:	231e      	movs	r3, #30
 8007654:	18fb      	adds	r3, r7, r3
 8007656:	2201      	movs	r2, #1
 8007658:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007666:	231e      	movs	r3, #30
 8007668:	18fb      	adds	r3, r7, r3
 800766a:	781b      	ldrb	r3, [r3, #0]
}
 800766c:	0018      	movs	r0, r3
 800766e:	46bd      	mov	sp, r7
 8007670:	b008      	add	sp, #32
 8007672:	bd80      	pop	{r7, pc}
 8007674:	ffff69f3 	.word	0xffff69f3
 8007678:	ffffcfff 	.word	0xffffcfff
 800767c:	fffff4ff 	.word	0xfffff4ff
 8007680:	40013800 	.word	0x40013800
 8007684:	40021000 	.word	0x40021000
 8007688:	40004400 	.word	0x40004400
 800768c:	007a1200 	.word	0x007a1200

08007690 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	2201      	movs	r2, #1
 800769e:	4013      	ands	r3, r2
 80076a0:	d00b      	beq.n	80076ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	4a4a      	ldr	r2, [pc, #296]	; (80077d4 <UART_AdvFeatureConfig+0x144>)
 80076aa:	4013      	ands	r3, r2
 80076ac:	0019      	movs	r1, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	2202      	movs	r2, #2
 80076c0:	4013      	ands	r3, r2
 80076c2:	d00b      	beq.n	80076dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	4a43      	ldr	r2, [pc, #268]	; (80077d8 <UART_AdvFeatureConfig+0x148>)
 80076cc:	4013      	ands	r3, r2
 80076ce:	0019      	movs	r1, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	2204      	movs	r2, #4
 80076e2:	4013      	ands	r3, r2
 80076e4:	d00b      	beq.n	80076fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	4a3b      	ldr	r2, [pc, #236]	; (80077dc <UART_AdvFeatureConfig+0x14c>)
 80076ee:	4013      	ands	r3, r2
 80076f0:	0019      	movs	r1, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	2208      	movs	r2, #8
 8007704:	4013      	ands	r3, r2
 8007706:	d00b      	beq.n	8007720 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	4a34      	ldr	r2, [pc, #208]	; (80077e0 <UART_AdvFeatureConfig+0x150>)
 8007710:	4013      	ands	r3, r2
 8007712:	0019      	movs	r1, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	430a      	orrs	r2, r1
 800771e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	2210      	movs	r2, #16
 8007726:	4013      	ands	r3, r2
 8007728:	d00b      	beq.n	8007742 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	4a2c      	ldr	r2, [pc, #176]	; (80077e4 <UART_AdvFeatureConfig+0x154>)
 8007732:	4013      	ands	r3, r2
 8007734:	0019      	movs	r1, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	430a      	orrs	r2, r1
 8007740:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	2220      	movs	r2, #32
 8007748:	4013      	ands	r3, r2
 800774a:	d00b      	beq.n	8007764 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	4a25      	ldr	r2, [pc, #148]	; (80077e8 <UART_AdvFeatureConfig+0x158>)
 8007754:	4013      	ands	r3, r2
 8007756:	0019      	movs	r1, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	430a      	orrs	r2, r1
 8007762:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	2240      	movs	r2, #64	; 0x40
 800776a:	4013      	ands	r3, r2
 800776c:	d01d      	beq.n	80077aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	4a1d      	ldr	r2, [pc, #116]	; (80077ec <UART_AdvFeatureConfig+0x15c>)
 8007776:	4013      	ands	r3, r2
 8007778:	0019      	movs	r1, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	430a      	orrs	r2, r1
 8007784:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800778a:	2380      	movs	r3, #128	; 0x80
 800778c:	035b      	lsls	r3, r3, #13
 800778e:	429a      	cmp	r2, r3
 8007790:	d10b      	bne.n	80077aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	4a15      	ldr	r2, [pc, #84]	; (80077f0 <UART_AdvFeatureConfig+0x160>)
 800779a:	4013      	ands	r3, r2
 800779c:	0019      	movs	r1, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	2280      	movs	r2, #128	; 0x80
 80077b0:	4013      	ands	r3, r2
 80077b2:	d00b      	beq.n	80077cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	4a0e      	ldr	r2, [pc, #56]	; (80077f4 <UART_AdvFeatureConfig+0x164>)
 80077bc:	4013      	ands	r3, r2
 80077be:	0019      	movs	r1, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	605a      	str	r2, [r3, #4]
  }
}
 80077cc:	46c0      	nop			; (mov r8, r8)
 80077ce:	46bd      	mov	sp, r7
 80077d0:	b002      	add	sp, #8
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	fffdffff 	.word	0xfffdffff
 80077d8:	fffeffff 	.word	0xfffeffff
 80077dc:	fffbffff 	.word	0xfffbffff
 80077e0:	ffff7fff 	.word	0xffff7fff
 80077e4:	ffffefff 	.word	0xffffefff
 80077e8:	ffffdfff 	.word	0xffffdfff
 80077ec:	ffefffff 	.word	0xffefffff
 80077f0:	ff9fffff 	.word	0xff9fffff
 80077f4:	fff7ffff 	.word	0xfff7ffff

080077f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af02      	add	r7, sp, #8
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2280      	movs	r2, #128	; 0x80
 8007804:	2100      	movs	r1, #0
 8007806:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007808:	f7fc fe7c 	bl	8004504 <HAL_GetTick>
 800780c:	0003      	movs	r3, r0
 800780e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2208      	movs	r2, #8
 8007818:	4013      	ands	r3, r2
 800781a:	2b08      	cmp	r3, #8
 800781c:	d10c      	bne.n	8007838 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2280      	movs	r2, #128	; 0x80
 8007822:	0391      	lsls	r1, r2, #14
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	4a17      	ldr	r2, [pc, #92]	; (8007884 <UART_CheckIdleState+0x8c>)
 8007828:	9200      	str	r2, [sp, #0]
 800782a:	2200      	movs	r2, #0
 800782c:	f000 f82c 	bl	8007888 <UART_WaitOnFlagUntilTimeout>
 8007830:	1e03      	subs	r3, r0, #0
 8007832:	d001      	beq.n	8007838 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e021      	b.n	800787c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2204      	movs	r2, #4
 8007840:	4013      	ands	r3, r2
 8007842:	2b04      	cmp	r3, #4
 8007844:	d10c      	bne.n	8007860 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2280      	movs	r2, #128	; 0x80
 800784a:	03d1      	lsls	r1, r2, #15
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	4a0d      	ldr	r2, [pc, #52]	; (8007884 <UART_CheckIdleState+0x8c>)
 8007850:	9200      	str	r2, [sp, #0]
 8007852:	2200      	movs	r2, #0
 8007854:	f000 f818 	bl	8007888 <UART_WaitOnFlagUntilTimeout>
 8007858:	1e03      	subs	r3, r0, #0
 800785a:	d001      	beq.n	8007860 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e00d      	b.n	800787c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2220      	movs	r2, #32
 800786a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2274      	movs	r2, #116	; 0x74
 8007876:	2100      	movs	r1, #0
 8007878:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	0018      	movs	r0, r3
 800787e:	46bd      	mov	sp, r7
 8007880:	b004      	add	sp, #16
 8007882:	bd80      	pop	{r7, pc}
 8007884:	01ffffff 	.word	0x01ffffff

08007888 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b094      	sub	sp, #80	; 0x50
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	603b      	str	r3, [r7, #0]
 8007894:	1dfb      	adds	r3, r7, #7
 8007896:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007898:	e0a3      	b.n	80079e2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800789a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800789c:	3301      	adds	r3, #1
 800789e:	d100      	bne.n	80078a2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80078a0:	e09f      	b.n	80079e2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078a2:	f7fc fe2f 	bl	8004504 <HAL_GetTick>
 80078a6:	0002      	movs	r2, r0
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d302      	bcc.n	80078b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80078b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d13d      	bne.n	8007934 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078b8:	f3ef 8310 	mrs	r3, PRIMASK
 80078bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078c0:	647b      	str	r3, [r7, #68]	; 0x44
 80078c2:	2301      	movs	r3, #1
 80078c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c8:	f383 8810 	msr	PRIMASK, r3
}
 80078cc:	46c0      	nop			; (mov r8, r8)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	494c      	ldr	r1, [pc, #304]	; (8007a0c <UART_WaitOnFlagUntilTimeout+0x184>)
 80078da:	400a      	ands	r2, r1
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078e0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	f383 8810 	msr	PRIMASK, r3
}
 80078e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ea:	f3ef 8310 	mrs	r3, PRIMASK
 80078ee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80078f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f2:	643b      	str	r3, [r7, #64]	; 0x40
 80078f4:	2301      	movs	r3, #1
 80078f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fa:	f383 8810 	msr	PRIMASK, r3
}
 80078fe:	46c0      	nop			; (mov r8, r8)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689a      	ldr	r2, [r3, #8]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2101      	movs	r1, #1
 800790c:	438a      	bics	r2, r1
 800790e:	609a      	str	r2, [r3, #8]
 8007910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007912:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007916:	f383 8810 	msr	PRIMASK, r3
}
 800791a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2220      	movs	r2, #32
 8007920:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2220      	movs	r2, #32
 8007926:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2274      	movs	r2, #116	; 0x74
 800792c:	2100      	movs	r1, #0
 800792e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e067      	b.n	8007a04 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2204      	movs	r2, #4
 800793c:	4013      	ands	r3, r2
 800793e:	d050      	beq.n	80079e2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	69da      	ldr	r2, [r3, #28]
 8007946:	2380      	movs	r3, #128	; 0x80
 8007948:	011b      	lsls	r3, r3, #4
 800794a:	401a      	ands	r2, r3
 800794c:	2380      	movs	r3, #128	; 0x80
 800794e:	011b      	lsls	r3, r3, #4
 8007950:	429a      	cmp	r2, r3
 8007952:	d146      	bne.n	80079e2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2280      	movs	r2, #128	; 0x80
 800795a:	0112      	lsls	r2, r2, #4
 800795c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800795e:	f3ef 8310 	mrs	r3, PRIMASK
 8007962:	613b      	str	r3, [r7, #16]
  return(result);
 8007964:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007968:	2301      	movs	r3, #1
 800796a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f383 8810 	msr	PRIMASK, r3
}
 8007972:	46c0      	nop			; (mov r8, r8)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4923      	ldr	r1, [pc, #140]	; (8007a0c <UART_WaitOnFlagUntilTimeout+0x184>)
 8007980:	400a      	ands	r2, r1
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007986:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f383 8810 	msr	PRIMASK, r3
}
 800798e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007990:	f3ef 8310 	mrs	r3, PRIMASK
 8007994:	61fb      	str	r3, [r7, #28]
  return(result);
 8007996:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007998:	64bb      	str	r3, [r7, #72]	; 0x48
 800799a:	2301      	movs	r3, #1
 800799c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	f383 8810 	msr	PRIMASK, r3
}
 80079a4:	46c0      	nop			; (mov r8, r8)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689a      	ldr	r2, [r3, #8]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2101      	movs	r1, #1
 80079b2:	438a      	bics	r2, r1
 80079b4:	609a      	str	r2, [r3, #8]
 80079b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	f383 8810 	msr	PRIMASK, r3
}
 80079c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2220      	movs	r2, #32
 80079c6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2220      	movs	r2, #32
 80079cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2280      	movs	r2, #128	; 0x80
 80079d2:	2120      	movs	r1, #32
 80079d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2274      	movs	r2, #116	; 0x74
 80079da:	2100      	movs	r1, #0
 80079dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e010      	b.n	8007a04 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	4013      	ands	r3, r2
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	425a      	negs	r2, r3
 80079f2:	4153      	adcs	r3, r2
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	001a      	movs	r2, r3
 80079f8:	1dfb      	adds	r3, r7, #7
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d100      	bne.n	8007a02 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007a00:	e74b      	b.n	800789a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	0018      	movs	r0, r3
 8007a06:	46bd      	mov	sp, r7
 8007a08:	b014      	add	sp, #80	; 0x50
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	fffffe5f 	.word	0xfffffe5f

08007a10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b08c      	sub	sp, #48	; 0x30
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	1dbb      	adds	r3, r7, #6
 8007a1c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	1dba      	adds	r2, r7, #6
 8007a28:	2158      	movs	r1, #88	; 0x58
 8007a2a:	8812      	ldrh	r2, [r2, #0]
 8007a2c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	1dba      	adds	r2, r7, #6
 8007a32:	215a      	movs	r1, #90	; 0x5a
 8007a34:	8812      	ldrh	r2, [r2, #0]
 8007a36:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689a      	ldr	r2, [r3, #8]
 8007a42:	2380      	movs	r3, #128	; 0x80
 8007a44:	015b      	lsls	r3, r3, #5
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d10d      	bne.n	8007a66 <UART_Start_Receive_IT+0x56>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d104      	bne.n	8007a5c <UART_Start_Receive_IT+0x4c>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	225c      	movs	r2, #92	; 0x5c
 8007a56:	4939      	ldr	r1, [pc, #228]	; (8007b3c <UART_Start_Receive_IT+0x12c>)
 8007a58:	5299      	strh	r1, [r3, r2]
 8007a5a:	e01a      	b.n	8007a92 <UART_Start_Receive_IT+0x82>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	225c      	movs	r2, #92	; 0x5c
 8007a60:	21ff      	movs	r1, #255	; 0xff
 8007a62:	5299      	strh	r1, [r3, r2]
 8007a64:	e015      	b.n	8007a92 <UART_Start_Receive_IT+0x82>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10d      	bne.n	8007a8a <UART_Start_Receive_IT+0x7a>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d104      	bne.n	8007a80 <UART_Start_Receive_IT+0x70>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	225c      	movs	r2, #92	; 0x5c
 8007a7a:	21ff      	movs	r1, #255	; 0xff
 8007a7c:	5299      	strh	r1, [r3, r2]
 8007a7e:	e008      	b.n	8007a92 <UART_Start_Receive_IT+0x82>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	225c      	movs	r2, #92	; 0x5c
 8007a84:	217f      	movs	r1, #127	; 0x7f
 8007a86:	5299      	strh	r1, [r3, r2]
 8007a88:	e003      	b.n	8007a92 <UART_Start_Receive_IT+0x82>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	225c      	movs	r2, #92	; 0x5c
 8007a8e:	2100      	movs	r1, #0
 8007a90:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2280      	movs	r2, #128	; 0x80
 8007a96:	2100      	movs	r1, #0
 8007a98:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2222      	movs	r2, #34	; 0x22
 8007a9e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8007aa4:	61fb      	str	r3, [r7, #28]
  return(result);
 8007aa6:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007aaa:	2301      	movs	r3, #1
 8007aac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	f383 8810 	msr	PRIMASK, r3
}
 8007ab4:	46c0      	nop			; (mov r8, r8)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	609a      	str	r2, [r3, #8]
 8007ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	f383 8810 	msr	PRIMASK, r3
}
 8007ad0:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	689a      	ldr	r2, [r3, #8]
 8007ad6:	2380      	movs	r3, #128	; 0x80
 8007ad8:	015b      	lsls	r3, r3, #5
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d107      	bne.n	8007aee <UART_Start_Receive_IT+0xde>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d103      	bne.n	8007aee <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4a15      	ldr	r2, [pc, #84]	; (8007b40 <UART_Start_Receive_IT+0x130>)
 8007aea:	665a      	str	r2, [r3, #100]	; 0x64
 8007aec:	e002      	b.n	8007af4 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	4a14      	ldr	r2, [pc, #80]	; (8007b44 <UART_Start_Receive_IT+0x134>)
 8007af2:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2274      	movs	r2, #116	; 0x74
 8007af8:	2100      	movs	r1, #0
 8007afa:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007afc:	f3ef 8310 	mrs	r3, PRIMASK
 8007b00:	613b      	str	r3, [r7, #16]
  return(result);
 8007b02:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b06:	2301      	movs	r3, #1
 8007b08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f383 8810 	msr	PRIMASK, r3
}
 8007b10:	46c0      	nop			; (mov r8, r8)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2190      	movs	r1, #144	; 0x90
 8007b1e:	0049      	lsls	r1, r1, #1
 8007b20:	430a      	orrs	r2, r1
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	f383 8810 	msr	PRIMASK, r3
}
 8007b2e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	0018      	movs	r0, r3
 8007b34:	46bd      	mov	sp, r7
 8007b36:	b00c      	add	sp, #48	; 0x30
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	46c0      	nop			; (mov r8, r8)
 8007b3c:	000001ff 	.word	0x000001ff
 8007b40:	08007df9 	.word	0x08007df9
 8007b44:	08007c91 	.word	0x08007c91

08007b48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08e      	sub	sp, #56	; 0x38
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b50:	f3ef 8310 	mrs	r3, PRIMASK
 8007b54:	617b      	str	r3, [r7, #20]
  return(result);
 8007b56:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b58:	637b      	str	r3, [r7, #52]	; 0x34
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	f383 8810 	msr	PRIMASK, r3
}
 8007b64:	46c0      	nop			; (mov r8, r8)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4925      	ldr	r1, [pc, #148]	; (8007c08 <UART_EndRxTransfer+0xc0>)
 8007b72:	400a      	ands	r2, r1
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	f383 8810 	msr	PRIMASK, r3
}
 8007b80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b82:	f3ef 8310 	mrs	r3, PRIMASK
 8007b86:	623b      	str	r3, [r7, #32]
  return(result);
 8007b88:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b8a:	633b      	str	r3, [r7, #48]	; 0x30
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	f383 8810 	msr	PRIMASK, r3
}
 8007b96:	46c0      	nop			; (mov r8, r8)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	438a      	bics	r2, r1
 8007ba6:	609a      	str	r2, [r3, #8]
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007baa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	f383 8810 	msr	PRIMASK, r3
}
 8007bb2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d118      	bne.n	8007bee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bc2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f383 8810 	msr	PRIMASK, r3
}
 8007bd0:	46c0      	nop			; (mov r8, r8)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2110      	movs	r1, #16
 8007bde:	438a      	bics	r2, r1
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f383 8810 	msr	PRIMASK, r3
}
 8007bec:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007c00:	46c0      	nop			; (mov r8, r8)
 8007c02:	46bd      	mov	sp, r7
 8007c04:	b00e      	add	sp, #56	; 0x38
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	fffffedf 	.word	0xfffffedf

08007c0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	225a      	movs	r2, #90	; 0x5a
 8007c1e:	2100      	movs	r1, #0
 8007c20:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2252      	movs	r2, #82	; 0x52
 8007c26:	2100      	movs	r1, #0
 8007c28:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	0018      	movs	r0, r3
 8007c2e:	f7ff fbdb 	bl	80073e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c32:	46c0      	nop			; (mov r8, r8)
 8007c34:	46bd      	mov	sp, r7
 8007c36:	b004      	add	sp, #16
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b086      	sub	sp, #24
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c42:	f3ef 8310 	mrs	r3, PRIMASK
 8007c46:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c48:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f383 8810 	msr	PRIMASK, r3
}
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2140      	movs	r1, #64	; 0x40
 8007c64:	438a      	bics	r2, r1
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f383 8810 	msr	PRIMASK, r3
}
 8007c72:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2220      	movs	r2, #32
 8007c78:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	0018      	movs	r0, r3
 8007c84:	f7ff fba8 	bl	80073d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c88:	46c0      	nop			; (mov r8, r8)
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	b006      	add	sp, #24
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b090      	sub	sp, #64	; 0x40
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c98:	203e      	movs	r0, #62	; 0x3e
 8007c9a:	183b      	adds	r3, r7, r0
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	215c      	movs	r1, #92	; 0x5c
 8007ca0:	5a52      	ldrh	r2, [r2, r1]
 8007ca2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ca8:	2b22      	cmp	r3, #34	; 0x22
 8007caa:	d000      	beq.n	8007cae <UART_RxISR_8BIT+0x1e>
 8007cac:	e095      	b.n	8007dda <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	213c      	movs	r1, #60	; 0x3c
 8007cb4:	187b      	adds	r3, r7, r1
 8007cb6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007cb8:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007cba:	187b      	adds	r3, r7, r1
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	183b      	adds	r3, r7, r0
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	b2d9      	uxtb	r1, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cca:	400a      	ands	r2, r1
 8007ccc:	b2d2      	uxtb	r2, r2
 8007cce:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd4:	1c5a      	adds	r2, r3, #1
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	225a      	movs	r2, #90	; 0x5a
 8007cde:	5a9b      	ldrh	r3, [r3, r2]
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	b299      	uxth	r1, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	225a      	movs	r2, #90	; 0x5a
 8007cea:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	225a      	movs	r2, #90	; 0x5a
 8007cf0:	5a9b      	ldrh	r3, [r3, r2]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d178      	bne.n	8007dea <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8007cfc:	61bb      	str	r3, [r7, #24]
  return(result);
 8007cfe:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d02:	2301      	movs	r3, #1
 8007d04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	f383 8810 	msr	PRIMASK, r3
}
 8007d0c:	46c0      	nop			; (mov r8, r8)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4936      	ldr	r1, [pc, #216]	; (8007df4 <UART_RxISR_8BIT+0x164>)
 8007d1a:	400a      	ands	r2, r1
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d20:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	f383 8810 	msr	PRIMASK, r3
}
 8007d28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d32:	637b      	str	r3, [r7, #52]	; 0x34
 8007d34:	2301      	movs	r3, #1
 8007d36:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	f383 8810 	msr	PRIMASK, r3
}
 8007d3e:	46c0      	nop			; (mov r8, r8)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689a      	ldr	r2, [r3, #8]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	438a      	bics	r2, r1
 8007d4e:	609a      	str	r2, [r3, #8]
 8007d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d56:	f383 8810 	msr	PRIMASK, r3
}
 8007d5a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d12f      	bne.n	8007dd0 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d76:	f3ef 8310 	mrs	r3, PRIMASK
 8007d7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d7c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8007d80:	2301      	movs	r3, #1
 8007d82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f383 8810 	msr	PRIMASK, r3
}
 8007d8a:	46c0      	nop			; (mov r8, r8)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2110      	movs	r1, #16
 8007d98:	438a      	bics	r2, r1
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f383 8810 	msr	PRIMASK, r3
}
 8007da6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	2210      	movs	r2, #16
 8007db0:	4013      	ands	r3, r2
 8007db2:	2b10      	cmp	r3, #16
 8007db4:	d103      	bne.n	8007dbe <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2210      	movs	r2, #16
 8007dbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2258      	movs	r2, #88	; 0x58
 8007dc2:	5a9a      	ldrh	r2, [r3, r2]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	0011      	movs	r1, r2
 8007dc8:	0018      	movs	r0, r3
 8007dca:	f7ff fb15 	bl	80073f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dce:	e00c      	b.n	8007dea <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	0018      	movs	r0, r3
 8007dd4:	f7fa fea2 	bl	8002b1c <HAL_UART_RxCpltCallback>
}
 8007dd8:	e007      	b.n	8007dea <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	699a      	ldr	r2, [r3, #24]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2108      	movs	r1, #8
 8007de6:	430a      	orrs	r2, r1
 8007de8:	619a      	str	r2, [r3, #24]
}
 8007dea:	46c0      	nop			; (mov r8, r8)
 8007dec:	46bd      	mov	sp, r7
 8007dee:	b010      	add	sp, #64	; 0x40
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	46c0      	nop			; (mov r8, r8)
 8007df4:	fffffedf 	.word	0xfffffedf

08007df8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b090      	sub	sp, #64	; 0x40
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e00:	203e      	movs	r0, #62	; 0x3e
 8007e02:	183b      	adds	r3, r7, r0
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	215c      	movs	r1, #92	; 0x5c
 8007e08:	5a52      	ldrh	r2, [r2, r1]
 8007e0a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e10:	2b22      	cmp	r3, #34	; 0x22
 8007e12:	d000      	beq.n	8007e16 <UART_RxISR_16BIT+0x1e>
 8007e14:	e095      	b.n	8007f42 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	213c      	movs	r1, #60	; 0x3c
 8007e1c:	187b      	adds	r3, r7, r1
 8007e1e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007e20:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e26:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e28:	187b      	adds	r3, r7, r1
 8007e2a:	183a      	adds	r2, r7, r0
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	8812      	ldrh	r2, [r2, #0]
 8007e30:	4013      	ands	r3, r2
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e36:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e3c:	1c9a      	adds	r2, r3, #2
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	225a      	movs	r2, #90	; 0x5a
 8007e46:	5a9b      	ldrh	r3, [r3, r2]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b299      	uxth	r1, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	225a      	movs	r2, #90	; 0x5a
 8007e52:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	225a      	movs	r2, #90	; 0x5a
 8007e58:	5a9b      	ldrh	r3, [r3, r2]
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d178      	bne.n	8007f52 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e60:	f3ef 8310 	mrs	r3, PRIMASK
 8007e64:	617b      	str	r3, [r7, #20]
  return(result);
 8007e66:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	f383 8810 	msr	PRIMASK, r3
}
 8007e74:	46c0      	nop			; (mov r8, r8)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4936      	ldr	r1, [pc, #216]	; (8007f5c <UART_RxISR_16BIT+0x164>)
 8007e82:	400a      	ands	r2, r1
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	f383 8810 	msr	PRIMASK, r3
}
 8007e90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e92:	f3ef 8310 	mrs	r3, PRIMASK
 8007e96:	623b      	str	r3, [r7, #32]
  return(result);
 8007e98:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	f383 8810 	msr	PRIMASK, r3
}
 8007ea6:	46c0      	nop			; (mov r8, r8)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689a      	ldr	r2, [r3, #8]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	438a      	bics	r2, r1
 8007eb6:	609a      	str	r2, [r3, #8]
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebe:	f383 8810 	msr	PRIMASK, r3
}
 8007ec2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d12f      	bne.n	8007f38 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ede:	f3ef 8310 	mrs	r3, PRIMASK
 8007ee2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ee4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ee8:	2301      	movs	r3, #1
 8007eea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f383 8810 	msr	PRIMASK, r3
}
 8007ef2:	46c0      	nop			; (mov r8, r8)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2110      	movs	r1, #16
 8007f00:	438a      	bics	r2, r1
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	f383 8810 	msr	PRIMASK, r3
}
 8007f0e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	2210      	movs	r2, #16
 8007f18:	4013      	ands	r3, r2
 8007f1a:	2b10      	cmp	r3, #16
 8007f1c:	d103      	bne.n	8007f26 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2210      	movs	r2, #16
 8007f24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2258      	movs	r2, #88	; 0x58
 8007f2a:	5a9a      	ldrh	r2, [r3, r2]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	0011      	movs	r1, r2
 8007f30:	0018      	movs	r0, r3
 8007f32:	f7ff fa61 	bl	80073f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f36:	e00c      	b.n	8007f52 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f7fa fdee 	bl	8002b1c <HAL_UART_RxCpltCallback>
}
 8007f40:	e007      	b.n	8007f52 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	699a      	ldr	r2, [r3, #24]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2108      	movs	r1, #8
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	619a      	str	r2, [r3, #24]
}
 8007f52:	46c0      	nop			; (mov r8, r8)
 8007f54:	46bd      	mov	sp, r7
 8007f56:	b010      	add	sp, #64	; 0x40
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	fffffedf 	.word	0xfffffedf

08007f60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f68:	46c0      	nop			; (mov r8, r8)
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	b002      	add	sp, #8
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <__errno>:
 8007f70:	4b01      	ldr	r3, [pc, #4]	; (8007f78 <__errno+0x8>)
 8007f72:	6818      	ldr	r0, [r3, #0]
 8007f74:	4770      	bx	lr
 8007f76:	46c0      	nop			; (mov r8, r8)
 8007f78:	20000030 	.word	0x20000030

08007f7c <__libc_init_array>:
 8007f7c:	b570      	push	{r4, r5, r6, lr}
 8007f7e:	2600      	movs	r6, #0
 8007f80:	4d0c      	ldr	r5, [pc, #48]	; (8007fb4 <__libc_init_array+0x38>)
 8007f82:	4c0d      	ldr	r4, [pc, #52]	; (8007fb8 <__libc_init_array+0x3c>)
 8007f84:	1b64      	subs	r4, r4, r5
 8007f86:	10a4      	asrs	r4, r4, #2
 8007f88:	42a6      	cmp	r6, r4
 8007f8a:	d109      	bne.n	8007fa0 <__libc_init_array+0x24>
 8007f8c:	2600      	movs	r6, #0
 8007f8e:	f004 fd47 	bl	800ca20 <_init>
 8007f92:	4d0a      	ldr	r5, [pc, #40]	; (8007fbc <__libc_init_array+0x40>)
 8007f94:	4c0a      	ldr	r4, [pc, #40]	; (8007fc0 <__libc_init_array+0x44>)
 8007f96:	1b64      	subs	r4, r4, r5
 8007f98:	10a4      	asrs	r4, r4, #2
 8007f9a:	42a6      	cmp	r6, r4
 8007f9c:	d105      	bne.n	8007faa <__libc_init_array+0x2e>
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	00b3      	lsls	r3, r6, #2
 8007fa2:	58eb      	ldr	r3, [r5, r3]
 8007fa4:	4798      	blx	r3
 8007fa6:	3601      	adds	r6, #1
 8007fa8:	e7ee      	b.n	8007f88 <__libc_init_array+0xc>
 8007faa:	00b3      	lsls	r3, r6, #2
 8007fac:	58eb      	ldr	r3, [r5, r3]
 8007fae:	4798      	blx	r3
 8007fb0:	3601      	adds	r6, #1
 8007fb2:	e7f2      	b.n	8007f9a <__libc_init_array+0x1e>
 8007fb4:	0800d104 	.word	0x0800d104
 8007fb8:	0800d104 	.word	0x0800d104
 8007fbc:	0800d104 	.word	0x0800d104
 8007fc0:	0800d108 	.word	0x0800d108

08007fc4 <memset>:
 8007fc4:	0003      	movs	r3, r0
 8007fc6:	1882      	adds	r2, r0, r2
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d100      	bne.n	8007fce <memset+0xa>
 8007fcc:	4770      	bx	lr
 8007fce:	7019      	strb	r1, [r3, #0]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	e7f9      	b.n	8007fc8 <memset+0x4>

08007fd4 <__cvt>:
 8007fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fd6:	001e      	movs	r6, r3
 8007fd8:	2300      	movs	r3, #0
 8007fda:	0014      	movs	r4, r2
 8007fdc:	b08b      	sub	sp, #44	; 0x2c
 8007fde:	429e      	cmp	r6, r3
 8007fe0:	da04      	bge.n	8007fec <__cvt+0x18>
 8007fe2:	2180      	movs	r1, #128	; 0x80
 8007fe4:	0609      	lsls	r1, r1, #24
 8007fe6:	1873      	adds	r3, r6, r1
 8007fe8:	001e      	movs	r6, r3
 8007fea:	232d      	movs	r3, #45	; 0x2d
 8007fec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fee:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007ff0:	7013      	strb	r3, [r2, #0]
 8007ff2:	2320      	movs	r3, #32
 8007ff4:	2203      	movs	r2, #3
 8007ff6:	439f      	bics	r7, r3
 8007ff8:	2f46      	cmp	r7, #70	; 0x46
 8007ffa:	d007      	beq.n	800800c <__cvt+0x38>
 8007ffc:	003b      	movs	r3, r7
 8007ffe:	3b45      	subs	r3, #69	; 0x45
 8008000:	4259      	negs	r1, r3
 8008002:	414b      	adcs	r3, r1
 8008004:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008006:	3a01      	subs	r2, #1
 8008008:	18cb      	adds	r3, r1, r3
 800800a:	9310      	str	r3, [sp, #64]	; 0x40
 800800c:	ab09      	add	r3, sp, #36	; 0x24
 800800e:	9304      	str	r3, [sp, #16]
 8008010:	ab08      	add	r3, sp, #32
 8008012:	9303      	str	r3, [sp, #12]
 8008014:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008016:	9200      	str	r2, [sp, #0]
 8008018:	9302      	str	r3, [sp, #8]
 800801a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800801c:	0022      	movs	r2, r4
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	0033      	movs	r3, r6
 8008022:	f001 fdc3 	bl	8009bac <_dtoa_r>
 8008026:	0005      	movs	r5, r0
 8008028:	2f47      	cmp	r7, #71	; 0x47
 800802a:	d102      	bne.n	8008032 <__cvt+0x5e>
 800802c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800802e:	07db      	lsls	r3, r3, #31
 8008030:	d528      	bpl.n	8008084 <__cvt+0xb0>
 8008032:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008034:	18eb      	adds	r3, r5, r3
 8008036:	9307      	str	r3, [sp, #28]
 8008038:	2f46      	cmp	r7, #70	; 0x46
 800803a:	d114      	bne.n	8008066 <__cvt+0x92>
 800803c:	782b      	ldrb	r3, [r5, #0]
 800803e:	2b30      	cmp	r3, #48	; 0x30
 8008040:	d10c      	bne.n	800805c <__cvt+0x88>
 8008042:	2200      	movs	r2, #0
 8008044:	2300      	movs	r3, #0
 8008046:	0020      	movs	r0, r4
 8008048:	0031      	movs	r1, r6
 800804a:	f7f8 f9ff 	bl	800044c <__aeabi_dcmpeq>
 800804e:	2800      	cmp	r0, #0
 8008050:	d104      	bne.n	800805c <__cvt+0x88>
 8008052:	2301      	movs	r3, #1
 8008054:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008056:	1a9b      	subs	r3, r3, r2
 8008058:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800805a:	6013      	str	r3, [r2, #0]
 800805c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800805e:	9a07      	ldr	r2, [sp, #28]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	18d3      	adds	r3, r2, r3
 8008064:	9307      	str	r3, [sp, #28]
 8008066:	2200      	movs	r2, #0
 8008068:	2300      	movs	r3, #0
 800806a:	0020      	movs	r0, r4
 800806c:	0031      	movs	r1, r6
 800806e:	f7f8 f9ed 	bl	800044c <__aeabi_dcmpeq>
 8008072:	2800      	cmp	r0, #0
 8008074:	d001      	beq.n	800807a <__cvt+0xa6>
 8008076:	9b07      	ldr	r3, [sp, #28]
 8008078:	9309      	str	r3, [sp, #36]	; 0x24
 800807a:	2230      	movs	r2, #48	; 0x30
 800807c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800807e:	9907      	ldr	r1, [sp, #28]
 8008080:	428b      	cmp	r3, r1
 8008082:	d306      	bcc.n	8008092 <__cvt+0xbe>
 8008084:	0028      	movs	r0, r5
 8008086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008088:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800808a:	1b5b      	subs	r3, r3, r5
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	b00b      	add	sp, #44	; 0x2c
 8008090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008092:	1c59      	adds	r1, r3, #1
 8008094:	9109      	str	r1, [sp, #36]	; 0x24
 8008096:	701a      	strb	r2, [r3, #0]
 8008098:	e7f0      	b.n	800807c <__cvt+0xa8>

0800809a <__exponent>:
 800809a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800809c:	1c83      	adds	r3, r0, #2
 800809e:	b087      	sub	sp, #28
 80080a0:	9303      	str	r3, [sp, #12]
 80080a2:	0005      	movs	r5, r0
 80080a4:	000c      	movs	r4, r1
 80080a6:	232b      	movs	r3, #43	; 0x2b
 80080a8:	7002      	strb	r2, [r0, #0]
 80080aa:	2900      	cmp	r1, #0
 80080ac:	da01      	bge.n	80080b2 <__exponent+0x18>
 80080ae:	424c      	negs	r4, r1
 80080b0:	3302      	adds	r3, #2
 80080b2:	706b      	strb	r3, [r5, #1]
 80080b4:	2c09      	cmp	r4, #9
 80080b6:	dd31      	ble.n	800811c <__exponent+0x82>
 80080b8:	270a      	movs	r7, #10
 80080ba:	ab04      	add	r3, sp, #16
 80080bc:	1dde      	adds	r6, r3, #7
 80080be:	0020      	movs	r0, r4
 80080c0:	0039      	movs	r1, r7
 80080c2:	9601      	str	r6, [sp, #4]
 80080c4:	f7f8 f9ac 	bl	8000420 <__aeabi_idivmod>
 80080c8:	3e01      	subs	r6, #1
 80080ca:	3130      	adds	r1, #48	; 0x30
 80080cc:	0020      	movs	r0, r4
 80080ce:	7031      	strb	r1, [r6, #0]
 80080d0:	0039      	movs	r1, r7
 80080d2:	9402      	str	r4, [sp, #8]
 80080d4:	f7f8 f8be 	bl	8000254 <__divsi3>
 80080d8:	9b02      	ldr	r3, [sp, #8]
 80080da:	0004      	movs	r4, r0
 80080dc:	2b63      	cmp	r3, #99	; 0x63
 80080de:	dcee      	bgt.n	80080be <__exponent+0x24>
 80080e0:	9b01      	ldr	r3, [sp, #4]
 80080e2:	3430      	adds	r4, #48	; 0x30
 80080e4:	1e9a      	subs	r2, r3, #2
 80080e6:	0013      	movs	r3, r2
 80080e8:	9903      	ldr	r1, [sp, #12]
 80080ea:	7014      	strb	r4, [r2, #0]
 80080ec:	a804      	add	r0, sp, #16
 80080ee:	3007      	adds	r0, #7
 80080f0:	4298      	cmp	r0, r3
 80080f2:	d80e      	bhi.n	8008112 <__exponent+0x78>
 80080f4:	ab04      	add	r3, sp, #16
 80080f6:	3307      	adds	r3, #7
 80080f8:	2000      	movs	r0, #0
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d804      	bhi.n	8008108 <__exponent+0x6e>
 80080fe:	ab04      	add	r3, sp, #16
 8008100:	3009      	adds	r0, #9
 8008102:	18c0      	adds	r0, r0, r3
 8008104:	9b01      	ldr	r3, [sp, #4]
 8008106:	1ac0      	subs	r0, r0, r3
 8008108:	9b03      	ldr	r3, [sp, #12]
 800810a:	1818      	adds	r0, r3, r0
 800810c:	1b40      	subs	r0, r0, r5
 800810e:	b007      	add	sp, #28
 8008110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008112:	7818      	ldrb	r0, [r3, #0]
 8008114:	3301      	adds	r3, #1
 8008116:	7008      	strb	r0, [r1, #0]
 8008118:	3101      	adds	r1, #1
 800811a:	e7e7      	b.n	80080ec <__exponent+0x52>
 800811c:	2330      	movs	r3, #48	; 0x30
 800811e:	18e4      	adds	r4, r4, r3
 8008120:	70ab      	strb	r3, [r5, #2]
 8008122:	1d28      	adds	r0, r5, #4
 8008124:	70ec      	strb	r4, [r5, #3]
 8008126:	e7f1      	b.n	800810c <__exponent+0x72>

08008128 <_printf_float>:
 8008128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800812a:	b095      	sub	sp, #84	; 0x54
 800812c:	000c      	movs	r4, r1
 800812e:	9209      	str	r2, [sp, #36]	; 0x24
 8008130:	001e      	movs	r6, r3
 8008132:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008134:	0007      	movs	r7, r0
 8008136:	f002 fec7 	bl	800aec8 <_localeconv_r>
 800813a:	6803      	ldr	r3, [r0, #0]
 800813c:	0018      	movs	r0, r3
 800813e:	930c      	str	r3, [sp, #48]	; 0x30
 8008140:	f7f7 ffe2 	bl	8000108 <strlen>
 8008144:	2300      	movs	r3, #0
 8008146:	9312      	str	r3, [sp, #72]	; 0x48
 8008148:	7e23      	ldrb	r3, [r4, #24]
 800814a:	2207      	movs	r2, #7
 800814c:	930a      	str	r3, [sp, #40]	; 0x28
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	900e      	str	r0, [sp, #56]	; 0x38
 8008152:	930d      	str	r3, [sp, #52]	; 0x34
 8008154:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008156:	682b      	ldr	r3, [r5, #0]
 8008158:	05c9      	lsls	r1, r1, #23
 800815a:	d547      	bpl.n	80081ec <_printf_float+0xc4>
 800815c:	189b      	adds	r3, r3, r2
 800815e:	4393      	bics	r3, r2
 8008160:	001a      	movs	r2, r3
 8008162:	3208      	adds	r2, #8
 8008164:	602a      	str	r2, [r5, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	64a2      	str	r2, [r4, #72]	; 0x48
 800816c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800816e:	2201      	movs	r2, #1
 8008170:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008172:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008174:	930b      	str	r3, [sp, #44]	; 0x2c
 8008176:	006b      	lsls	r3, r5, #1
 8008178:	085b      	lsrs	r3, r3, #1
 800817a:	930f      	str	r3, [sp, #60]	; 0x3c
 800817c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800817e:	4ba7      	ldr	r3, [pc, #668]	; (800841c <_printf_float+0x2f4>)
 8008180:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008182:	4252      	negs	r2, r2
 8008184:	f7fa fb32 	bl	80027ec <__aeabi_dcmpun>
 8008188:	2800      	cmp	r0, #0
 800818a:	d131      	bne.n	80081f0 <_printf_float+0xc8>
 800818c:	2201      	movs	r2, #1
 800818e:	4ba3      	ldr	r3, [pc, #652]	; (800841c <_printf_float+0x2f4>)
 8008190:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008192:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008194:	4252      	negs	r2, r2
 8008196:	f7f8 f969 	bl	800046c <__aeabi_dcmple>
 800819a:	2800      	cmp	r0, #0
 800819c:	d128      	bne.n	80081f0 <_printf_float+0xc8>
 800819e:	2200      	movs	r2, #0
 80081a0:	2300      	movs	r3, #0
 80081a2:	0029      	movs	r1, r5
 80081a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80081a6:	f7f8 f957 	bl	8000458 <__aeabi_dcmplt>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	d003      	beq.n	80081b6 <_printf_float+0x8e>
 80081ae:	0023      	movs	r3, r4
 80081b0:	222d      	movs	r2, #45	; 0x2d
 80081b2:	3343      	adds	r3, #67	; 0x43
 80081b4:	701a      	strb	r2, [r3, #0]
 80081b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081b8:	4d99      	ldr	r5, [pc, #612]	; (8008420 <_printf_float+0x2f8>)
 80081ba:	2b47      	cmp	r3, #71	; 0x47
 80081bc:	d900      	bls.n	80081c0 <_printf_float+0x98>
 80081be:	4d99      	ldr	r5, [pc, #612]	; (8008424 <_printf_float+0x2fc>)
 80081c0:	2303      	movs	r3, #3
 80081c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081c4:	6123      	str	r3, [r4, #16]
 80081c6:	3301      	adds	r3, #1
 80081c8:	439a      	bics	r2, r3
 80081ca:	2300      	movs	r3, #0
 80081cc:	6022      	str	r2, [r4, #0]
 80081ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80081d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d2:	0021      	movs	r1, r4
 80081d4:	0038      	movs	r0, r7
 80081d6:	9600      	str	r6, [sp, #0]
 80081d8:	aa13      	add	r2, sp, #76	; 0x4c
 80081da:	f000 f9e7 	bl	80085ac <_printf_common>
 80081de:	1c43      	adds	r3, r0, #1
 80081e0:	d000      	beq.n	80081e4 <_printf_float+0xbc>
 80081e2:	e0a2      	b.n	800832a <_printf_float+0x202>
 80081e4:	2001      	movs	r0, #1
 80081e6:	4240      	negs	r0, r0
 80081e8:	b015      	add	sp, #84	; 0x54
 80081ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ec:	3307      	adds	r3, #7
 80081ee:	e7b6      	b.n	800815e <_printf_float+0x36>
 80081f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081f2:	002b      	movs	r3, r5
 80081f4:	0010      	movs	r0, r2
 80081f6:	0029      	movs	r1, r5
 80081f8:	f7fa faf8 	bl	80027ec <__aeabi_dcmpun>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d00b      	beq.n	8008218 <_printf_float+0xf0>
 8008200:	2d00      	cmp	r5, #0
 8008202:	da03      	bge.n	800820c <_printf_float+0xe4>
 8008204:	0023      	movs	r3, r4
 8008206:	222d      	movs	r2, #45	; 0x2d
 8008208:	3343      	adds	r3, #67	; 0x43
 800820a:	701a      	strb	r2, [r3, #0]
 800820c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800820e:	4d86      	ldr	r5, [pc, #536]	; (8008428 <_printf_float+0x300>)
 8008210:	2b47      	cmp	r3, #71	; 0x47
 8008212:	d9d5      	bls.n	80081c0 <_printf_float+0x98>
 8008214:	4d85      	ldr	r5, [pc, #532]	; (800842c <_printf_float+0x304>)
 8008216:	e7d3      	b.n	80081c0 <_printf_float+0x98>
 8008218:	2220      	movs	r2, #32
 800821a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800821c:	6863      	ldr	r3, [r4, #4]
 800821e:	4391      	bics	r1, r2
 8008220:	910f      	str	r1, [sp, #60]	; 0x3c
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	d149      	bne.n	80082ba <_printf_float+0x192>
 8008226:	3307      	adds	r3, #7
 8008228:	6063      	str	r3, [r4, #4]
 800822a:	2380      	movs	r3, #128	; 0x80
 800822c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800822e:	00db      	lsls	r3, r3, #3
 8008230:	4313      	orrs	r3, r2
 8008232:	2200      	movs	r2, #0
 8008234:	9206      	str	r2, [sp, #24]
 8008236:	aa12      	add	r2, sp, #72	; 0x48
 8008238:	9205      	str	r2, [sp, #20]
 800823a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800823c:	a908      	add	r1, sp, #32
 800823e:	9204      	str	r2, [sp, #16]
 8008240:	aa11      	add	r2, sp, #68	; 0x44
 8008242:	9203      	str	r2, [sp, #12]
 8008244:	2223      	movs	r2, #35	; 0x23
 8008246:	6023      	str	r3, [r4, #0]
 8008248:	9301      	str	r3, [sp, #4]
 800824a:	6863      	ldr	r3, [r4, #4]
 800824c:	1852      	adds	r2, r2, r1
 800824e:	9202      	str	r2, [sp, #8]
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	0038      	movs	r0, r7
 8008254:	002b      	movs	r3, r5
 8008256:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008258:	f7ff febc 	bl	8007fd4 <__cvt>
 800825c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800825e:	0005      	movs	r5, r0
 8008260:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008262:	2b47      	cmp	r3, #71	; 0x47
 8008264:	d108      	bne.n	8008278 <_printf_float+0x150>
 8008266:	1ccb      	adds	r3, r1, #3
 8008268:	db02      	blt.n	8008270 <_printf_float+0x148>
 800826a:	6863      	ldr	r3, [r4, #4]
 800826c:	4299      	cmp	r1, r3
 800826e:	dd48      	ble.n	8008302 <_printf_float+0x1da>
 8008270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008272:	3b02      	subs	r3, #2
 8008274:	b2db      	uxtb	r3, r3
 8008276:	930a      	str	r3, [sp, #40]	; 0x28
 8008278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800827a:	2b65      	cmp	r3, #101	; 0x65
 800827c:	d824      	bhi.n	80082c8 <_printf_float+0x1a0>
 800827e:	0020      	movs	r0, r4
 8008280:	001a      	movs	r2, r3
 8008282:	3901      	subs	r1, #1
 8008284:	3050      	adds	r0, #80	; 0x50
 8008286:	9111      	str	r1, [sp, #68]	; 0x44
 8008288:	f7ff ff07 	bl	800809a <__exponent>
 800828c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800828e:	900b      	str	r0, [sp, #44]	; 0x2c
 8008290:	1813      	adds	r3, r2, r0
 8008292:	6123      	str	r3, [r4, #16]
 8008294:	2a01      	cmp	r2, #1
 8008296:	dc02      	bgt.n	800829e <_printf_float+0x176>
 8008298:	6822      	ldr	r2, [r4, #0]
 800829a:	07d2      	lsls	r2, r2, #31
 800829c:	d501      	bpl.n	80082a2 <_printf_float+0x17a>
 800829e:	3301      	adds	r3, #1
 80082a0:	6123      	str	r3, [r4, #16]
 80082a2:	2323      	movs	r3, #35	; 0x23
 80082a4:	aa08      	add	r2, sp, #32
 80082a6:	189b      	adds	r3, r3, r2
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d100      	bne.n	80082b0 <_printf_float+0x188>
 80082ae:	e78f      	b.n	80081d0 <_printf_float+0xa8>
 80082b0:	0023      	movs	r3, r4
 80082b2:	222d      	movs	r2, #45	; 0x2d
 80082b4:	3343      	adds	r3, #67	; 0x43
 80082b6:	701a      	strb	r2, [r3, #0]
 80082b8:	e78a      	b.n	80081d0 <_printf_float+0xa8>
 80082ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082bc:	2a47      	cmp	r2, #71	; 0x47
 80082be:	d1b4      	bne.n	800822a <_printf_float+0x102>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1b2      	bne.n	800822a <_printf_float+0x102>
 80082c4:	3301      	adds	r3, #1
 80082c6:	e7af      	b.n	8008228 <_printf_float+0x100>
 80082c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ca:	2b66      	cmp	r3, #102	; 0x66
 80082cc:	d11b      	bne.n	8008306 <_printf_float+0x1de>
 80082ce:	6863      	ldr	r3, [r4, #4]
 80082d0:	2900      	cmp	r1, #0
 80082d2:	dd0d      	ble.n	80082f0 <_printf_float+0x1c8>
 80082d4:	6121      	str	r1, [r4, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d102      	bne.n	80082e0 <_printf_float+0x1b8>
 80082da:	6822      	ldr	r2, [r4, #0]
 80082dc:	07d2      	lsls	r2, r2, #31
 80082de:	d502      	bpl.n	80082e6 <_printf_float+0x1be>
 80082e0:	3301      	adds	r3, #1
 80082e2:	1859      	adds	r1, r3, r1
 80082e4:	6121      	str	r1, [r4, #16]
 80082e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80082ea:	2300      	movs	r3, #0
 80082ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80082ee:	e7d8      	b.n	80082a2 <_printf_float+0x17a>
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d103      	bne.n	80082fc <_printf_float+0x1d4>
 80082f4:	2201      	movs	r2, #1
 80082f6:	6821      	ldr	r1, [r4, #0]
 80082f8:	4211      	tst	r1, r2
 80082fa:	d000      	beq.n	80082fe <_printf_float+0x1d6>
 80082fc:	1c9a      	adds	r2, r3, #2
 80082fe:	6122      	str	r2, [r4, #16]
 8008300:	e7f1      	b.n	80082e6 <_printf_float+0x1be>
 8008302:	2367      	movs	r3, #103	; 0x67
 8008304:	930a      	str	r3, [sp, #40]	; 0x28
 8008306:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008308:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800830a:	4293      	cmp	r3, r2
 800830c:	db06      	blt.n	800831c <_printf_float+0x1f4>
 800830e:	6822      	ldr	r2, [r4, #0]
 8008310:	6123      	str	r3, [r4, #16]
 8008312:	07d2      	lsls	r2, r2, #31
 8008314:	d5e7      	bpl.n	80082e6 <_printf_float+0x1be>
 8008316:	3301      	adds	r3, #1
 8008318:	6123      	str	r3, [r4, #16]
 800831a:	e7e4      	b.n	80082e6 <_printf_float+0x1be>
 800831c:	2101      	movs	r1, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	dc01      	bgt.n	8008326 <_printf_float+0x1fe>
 8008322:	1849      	adds	r1, r1, r1
 8008324:	1ac9      	subs	r1, r1, r3
 8008326:	1852      	adds	r2, r2, r1
 8008328:	e7e9      	b.n	80082fe <_printf_float+0x1d6>
 800832a:	6822      	ldr	r2, [r4, #0]
 800832c:	0553      	lsls	r3, r2, #21
 800832e:	d407      	bmi.n	8008340 <_printf_float+0x218>
 8008330:	6923      	ldr	r3, [r4, #16]
 8008332:	002a      	movs	r2, r5
 8008334:	0038      	movs	r0, r7
 8008336:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008338:	47b0      	blx	r6
 800833a:	1c43      	adds	r3, r0, #1
 800833c:	d128      	bne.n	8008390 <_printf_float+0x268>
 800833e:	e751      	b.n	80081e4 <_printf_float+0xbc>
 8008340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008342:	2b65      	cmp	r3, #101	; 0x65
 8008344:	d800      	bhi.n	8008348 <_printf_float+0x220>
 8008346:	e0e1      	b.n	800850c <_printf_float+0x3e4>
 8008348:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800834a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800834c:	2200      	movs	r2, #0
 800834e:	2300      	movs	r3, #0
 8008350:	f7f8 f87c 	bl	800044c <__aeabi_dcmpeq>
 8008354:	2800      	cmp	r0, #0
 8008356:	d031      	beq.n	80083bc <_printf_float+0x294>
 8008358:	2301      	movs	r3, #1
 800835a:	0038      	movs	r0, r7
 800835c:	4a34      	ldr	r2, [pc, #208]	; (8008430 <_printf_float+0x308>)
 800835e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008360:	47b0      	blx	r6
 8008362:	1c43      	adds	r3, r0, #1
 8008364:	d100      	bne.n	8008368 <_printf_float+0x240>
 8008366:	e73d      	b.n	80081e4 <_printf_float+0xbc>
 8008368:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800836a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800836c:	4293      	cmp	r3, r2
 800836e:	db02      	blt.n	8008376 <_printf_float+0x24e>
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	07db      	lsls	r3, r3, #31
 8008374:	d50c      	bpl.n	8008390 <_printf_float+0x268>
 8008376:	0038      	movs	r0, r7
 8008378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800837a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800837c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800837e:	47b0      	blx	r6
 8008380:	2500      	movs	r5, #0
 8008382:	1c43      	adds	r3, r0, #1
 8008384:	d100      	bne.n	8008388 <_printf_float+0x260>
 8008386:	e72d      	b.n	80081e4 <_printf_float+0xbc>
 8008388:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800838a:	3b01      	subs	r3, #1
 800838c:	42ab      	cmp	r3, r5
 800838e:	dc0a      	bgt.n	80083a6 <_printf_float+0x27e>
 8008390:	6823      	ldr	r3, [r4, #0]
 8008392:	079b      	lsls	r3, r3, #30
 8008394:	d500      	bpl.n	8008398 <_printf_float+0x270>
 8008396:	e106      	b.n	80085a6 <_printf_float+0x47e>
 8008398:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800839a:	68e0      	ldr	r0, [r4, #12]
 800839c:	4298      	cmp	r0, r3
 800839e:	db00      	blt.n	80083a2 <_printf_float+0x27a>
 80083a0:	e722      	b.n	80081e8 <_printf_float+0xc0>
 80083a2:	0018      	movs	r0, r3
 80083a4:	e720      	b.n	80081e8 <_printf_float+0xc0>
 80083a6:	0022      	movs	r2, r4
 80083a8:	2301      	movs	r3, #1
 80083aa:	0038      	movs	r0, r7
 80083ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083ae:	321a      	adds	r2, #26
 80083b0:	47b0      	blx	r6
 80083b2:	1c43      	adds	r3, r0, #1
 80083b4:	d100      	bne.n	80083b8 <_printf_float+0x290>
 80083b6:	e715      	b.n	80081e4 <_printf_float+0xbc>
 80083b8:	3501      	adds	r5, #1
 80083ba:	e7e5      	b.n	8008388 <_printf_float+0x260>
 80083bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083be:	2b00      	cmp	r3, #0
 80083c0:	dc38      	bgt.n	8008434 <_printf_float+0x30c>
 80083c2:	2301      	movs	r3, #1
 80083c4:	0038      	movs	r0, r7
 80083c6:	4a1a      	ldr	r2, [pc, #104]	; (8008430 <_printf_float+0x308>)
 80083c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083ca:	47b0      	blx	r6
 80083cc:	1c43      	adds	r3, r0, #1
 80083ce:	d100      	bne.n	80083d2 <_printf_float+0x2aa>
 80083d0:	e708      	b.n	80081e4 <_printf_float+0xbc>
 80083d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083d6:	4313      	orrs	r3, r2
 80083d8:	d102      	bne.n	80083e0 <_printf_float+0x2b8>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	07db      	lsls	r3, r3, #31
 80083de:	d5d7      	bpl.n	8008390 <_printf_float+0x268>
 80083e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083e2:	0038      	movs	r0, r7
 80083e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083e8:	47b0      	blx	r6
 80083ea:	1c43      	adds	r3, r0, #1
 80083ec:	d100      	bne.n	80083f0 <_printf_float+0x2c8>
 80083ee:	e6f9      	b.n	80081e4 <_printf_float+0xbc>
 80083f0:	2300      	movs	r3, #0
 80083f2:	930a      	str	r3, [sp, #40]	; 0x28
 80083f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083f8:	425b      	negs	r3, r3
 80083fa:	4293      	cmp	r3, r2
 80083fc:	dc01      	bgt.n	8008402 <_printf_float+0x2da>
 80083fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008400:	e797      	b.n	8008332 <_printf_float+0x20a>
 8008402:	0022      	movs	r2, r4
 8008404:	2301      	movs	r3, #1
 8008406:	0038      	movs	r0, r7
 8008408:	9909      	ldr	r1, [sp, #36]	; 0x24
 800840a:	321a      	adds	r2, #26
 800840c:	47b0      	blx	r6
 800840e:	1c43      	adds	r3, r0, #1
 8008410:	d100      	bne.n	8008414 <_printf_float+0x2ec>
 8008412:	e6e7      	b.n	80081e4 <_printf_float+0xbc>
 8008414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008416:	3301      	adds	r3, #1
 8008418:	e7eb      	b.n	80083f2 <_printf_float+0x2ca>
 800841a:	46c0      	nop			; (mov r8, r8)
 800841c:	7fefffff 	.word	0x7fefffff
 8008420:	0800cc64 	.word	0x0800cc64
 8008424:	0800cc68 	.word	0x0800cc68
 8008428:	0800cc6c 	.word	0x0800cc6c
 800842c:	0800cc70 	.word	0x0800cc70
 8008430:	0800cc74 	.word	0x0800cc74
 8008434:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008436:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008438:	920a      	str	r2, [sp, #40]	; 0x28
 800843a:	429a      	cmp	r2, r3
 800843c:	dd00      	ble.n	8008440 <_printf_float+0x318>
 800843e:	930a      	str	r3, [sp, #40]	; 0x28
 8008440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008442:	2b00      	cmp	r3, #0
 8008444:	dc3c      	bgt.n	80084c0 <_printf_float+0x398>
 8008446:	2300      	movs	r3, #0
 8008448:	930d      	str	r3, [sp, #52]	; 0x34
 800844a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844c:	43db      	mvns	r3, r3
 800844e:	17db      	asrs	r3, r3, #31
 8008450:	930f      	str	r3, [sp, #60]	; 0x3c
 8008452:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008454:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008456:	930b      	str	r3, [sp, #44]	; 0x2c
 8008458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800845a:	4013      	ands	r3, r2
 800845c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008462:	4293      	cmp	r3, r2
 8008464:	dc34      	bgt.n	80084d0 <_printf_float+0x3a8>
 8008466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008468:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800846a:	4293      	cmp	r3, r2
 800846c:	db3d      	blt.n	80084ea <_printf_float+0x3c2>
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	07db      	lsls	r3, r3, #31
 8008472:	d43a      	bmi.n	80084ea <_printf_float+0x3c2>
 8008474:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008478:	9911      	ldr	r1, [sp, #68]	; 0x44
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	1a52      	subs	r2, r2, r1
 800847e:	920a      	str	r2, [sp, #40]	; 0x28
 8008480:	429a      	cmp	r2, r3
 8008482:	dd00      	ble.n	8008486 <_printf_float+0x35e>
 8008484:	930a      	str	r3, [sp, #40]	; 0x28
 8008486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008488:	2b00      	cmp	r3, #0
 800848a:	dc36      	bgt.n	80084fa <_printf_float+0x3d2>
 800848c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800848e:	2500      	movs	r5, #0
 8008490:	43db      	mvns	r3, r3
 8008492:	17db      	asrs	r3, r3, #31
 8008494:	930b      	str	r3, [sp, #44]	; 0x2c
 8008496:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008498:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800849a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800849c:	1a9b      	subs	r3, r3, r2
 800849e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084a0:	400a      	ands	r2, r1
 80084a2:	1a9b      	subs	r3, r3, r2
 80084a4:	42ab      	cmp	r3, r5
 80084a6:	dc00      	bgt.n	80084aa <_printf_float+0x382>
 80084a8:	e772      	b.n	8008390 <_printf_float+0x268>
 80084aa:	0022      	movs	r2, r4
 80084ac:	2301      	movs	r3, #1
 80084ae:	0038      	movs	r0, r7
 80084b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084b2:	321a      	adds	r2, #26
 80084b4:	47b0      	blx	r6
 80084b6:	1c43      	adds	r3, r0, #1
 80084b8:	d100      	bne.n	80084bc <_printf_float+0x394>
 80084ba:	e693      	b.n	80081e4 <_printf_float+0xbc>
 80084bc:	3501      	adds	r5, #1
 80084be:	e7ea      	b.n	8008496 <_printf_float+0x36e>
 80084c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084c2:	002a      	movs	r2, r5
 80084c4:	0038      	movs	r0, r7
 80084c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084c8:	47b0      	blx	r6
 80084ca:	1c43      	adds	r3, r0, #1
 80084cc:	d1bb      	bne.n	8008446 <_printf_float+0x31e>
 80084ce:	e689      	b.n	80081e4 <_printf_float+0xbc>
 80084d0:	0022      	movs	r2, r4
 80084d2:	2301      	movs	r3, #1
 80084d4:	0038      	movs	r0, r7
 80084d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084d8:	321a      	adds	r2, #26
 80084da:	47b0      	blx	r6
 80084dc:	1c43      	adds	r3, r0, #1
 80084de:	d100      	bne.n	80084e2 <_printf_float+0x3ba>
 80084e0:	e680      	b.n	80081e4 <_printf_float+0xbc>
 80084e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084e4:	3301      	adds	r3, #1
 80084e6:	930d      	str	r3, [sp, #52]	; 0x34
 80084e8:	e7b3      	b.n	8008452 <_printf_float+0x32a>
 80084ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084ec:	0038      	movs	r0, r7
 80084ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084f2:	47b0      	blx	r6
 80084f4:	1c43      	adds	r3, r0, #1
 80084f6:	d1bd      	bne.n	8008474 <_printf_float+0x34c>
 80084f8:	e674      	b.n	80081e4 <_printf_float+0xbc>
 80084fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084fc:	0038      	movs	r0, r7
 80084fe:	18ea      	adds	r2, r5, r3
 8008500:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008504:	47b0      	blx	r6
 8008506:	1c43      	adds	r3, r0, #1
 8008508:	d1c0      	bne.n	800848c <_printf_float+0x364>
 800850a:	e66b      	b.n	80081e4 <_printf_float+0xbc>
 800850c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800850e:	2b01      	cmp	r3, #1
 8008510:	dc02      	bgt.n	8008518 <_printf_float+0x3f0>
 8008512:	2301      	movs	r3, #1
 8008514:	421a      	tst	r2, r3
 8008516:	d034      	beq.n	8008582 <_printf_float+0x45a>
 8008518:	2301      	movs	r3, #1
 800851a:	002a      	movs	r2, r5
 800851c:	0038      	movs	r0, r7
 800851e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008520:	47b0      	blx	r6
 8008522:	1c43      	adds	r3, r0, #1
 8008524:	d100      	bne.n	8008528 <_printf_float+0x400>
 8008526:	e65d      	b.n	80081e4 <_printf_float+0xbc>
 8008528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800852a:	0038      	movs	r0, r7
 800852c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800852e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008530:	47b0      	blx	r6
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	d100      	bne.n	8008538 <_printf_float+0x410>
 8008536:	e655      	b.n	80081e4 <_printf_float+0xbc>
 8008538:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800853a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800853c:	2200      	movs	r2, #0
 800853e:	2300      	movs	r3, #0
 8008540:	f7f7 ff84 	bl	800044c <__aeabi_dcmpeq>
 8008544:	2800      	cmp	r0, #0
 8008546:	d11a      	bne.n	800857e <_printf_float+0x456>
 8008548:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800854a:	1c6a      	adds	r2, r5, #1
 800854c:	3b01      	subs	r3, #1
 800854e:	0038      	movs	r0, r7
 8008550:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008552:	47b0      	blx	r6
 8008554:	1c43      	adds	r3, r0, #1
 8008556:	d10e      	bne.n	8008576 <_printf_float+0x44e>
 8008558:	e644      	b.n	80081e4 <_printf_float+0xbc>
 800855a:	0022      	movs	r2, r4
 800855c:	2301      	movs	r3, #1
 800855e:	0038      	movs	r0, r7
 8008560:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008562:	321a      	adds	r2, #26
 8008564:	47b0      	blx	r6
 8008566:	1c43      	adds	r3, r0, #1
 8008568:	d100      	bne.n	800856c <_printf_float+0x444>
 800856a:	e63b      	b.n	80081e4 <_printf_float+0xbc>
 800856c:	3501      	adds	r5, #1
 800856e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008570:	3b01      	subs	r3, #1
 8008572:	42ab      	cmp	r3, r5
 8008574:	dcf1      	bgt.n	800855a <_printf_float+0x432>
 8008576:	0022      	movs	r2, r4
 8008578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800857a:	3250      	adds	r2, #80	; 0x50
 800857c:	e6da      	b.n	8008334 <_printf_float+0x20c>
 800857e:	2500      	movs	r5, #0
 8008580:	e7f5      	b.n	800856e <_printf_float+0x446>
 8008582:	002a      	movs	r2, r5
 8008584:	e7e3      	b.n	800854e <_printf_float+0x426>
 8008586:	0022      	movs	r2, r4
 8008588:	2301      	movs	r3, #1
 800858a:	0038      	movs	r0, r7
 800858c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800858e:	3219      	adds	r2, #25
 8008590:	47b0      	blx	r6
 8008592:	1c43      	adds	r3, r0, #1
 8008594:	d100      	bne.n	8008598 <_printf_float+0x470>
 8008596:	e625      	b.n	80081e4 <_printf_float+0xbc>
 8008598:	3501      	adds	r5, #1
 800859a:	68e3      	ldr	r3, [r4, #12]
 800859c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800859e:	1a9b      	subs	r3, r3, r2
 80085a0:	42ab      	cmp	r3, r5
 80085a2:	dcf0      	bgt.n	8008586 <_printf_float+0x45e>
 80085a4:	e6f8      	b.n	8008398 <_printf_float+0x270>
 80085a6:	2500      	movs	r5, #0
 80085a8:	e7f7      	b.n	800859a <_printf_float+0x472>
 80085aa:	46c0      	nop			; (mov r8, r8)

080085ac <_printf_common>:
 80085ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085ae:	0015      	movs	r5, r2
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	688a      	ldr	r2, [r1, #8]
 80085b4:	690b      	ldr	r3, [r1, #16]
 80085b6:	000c      	movs	r4, r1
 80085b8:	9000      	str	r0, [sp, #0]
 80085ba:	4293      	cmp	r3, r2
 80085bc:	da00      	bge.n	80085c0 <_printf_common+0x14>
 80085be:	0013      	movs	r3, r2
 80085c0:	0022      	movs	r2, r4
 80085c2:	602b      	str	r3, [r5, #0]
 80085c4:	3243      	adds	r2, #67	; 0x43
 80085c6:	7812      	ldrb	r2, [r2, #0]
 80085c8:	2a00      	cmp	r2, #0
 80085ca:	d001      	beq.n	80085d0 <_printf_common+0x24>
 80085cc:	3301      	adds	r3, #1
 80085ce:	602b      	str	r3, [r5, #0]
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	069b      	lsls	r3, r3, #26
 80085d4:	d502      	bpl.n	80085dc <_printf_common+0x30>
 80085d6:	682b      	ldr	r3, [r5, #0]
 80085d8:	3302      	adds	r3, #2
 80085da:	602b      	str	r3, [r5, #0]
 80085dc:	6822      	ldr	r2, [r4, #0]
 80085de:	2306      	movs	r3, #6
 80085e0:	0017      	movs	r7, r2
 80085e2:	401f      	ands	r7, r3
 80085e4:	421a      	tst	r2, r3
 80085e6:	d027      	beq.n	8008638 <_printf_common+0x8c>
 80085e8:	0023      	movs	r3, r4
 80085ea:	3343      	adds	r3, #67	; 0x43
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	1e5a      	subs	r2, r3, #1
 80085f0:	4193      	sbcs	r3, r2
 80085f2:	6822      	ldr	r2, [r4, #0]
 80085f4:	0692      	lsls	r2, r2, #26
 80085f6:	d430      	bmi.n	800865a <_printf_common+0xae>
 80085f8:	0022      	movs	r2, r4
 80085fa:	9901      	ldr	r1, [sp, #4]
 80085fc:	9800      	ldr	r0, [sp, #0]
 80085fe:	9e08      	ldr	r6, [sp, #32]
 8008600:	3243      	adds	r2, #67	; 0x43
 8008602:	47b0      	blx	r6
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d025      	beq.n	8008654 <_printf_common+0xa8>
 8008608:	2306      	movs	r3, #6
 800860a:	6820      	ldr	r0, [r4, #0]
 800860c:	682a      	ldr	r2, [r5, #0]
 800860e:	68e1      	ldr	r1, [r4, #12]
 8008610:	2500      	movs	r5, #0
 8008612:	4003      	ands	r3, r0
 8008614:	2b04      	cmp	r3, #4
 8008616:	d103      	bne.n	8008620 <_printf_common+0x74>
 8008618:	1a8d      	subs	r5, r1, r2
 800861a:	43eb      	mvns	r3, r5
 800861c:	17db      	asrs	r3, r3, #31
 800861e:	401d      	ands	r5, r3
 8008620:	68a3      	ldr	r3, [r4, #8]
 8008622:	6922      	ldr	r2, [r4, #16]
 8008624:	4293      	cmp	r3, r2
 8008626:	dd01      	ble.n	800862c <_printf_common+0x80>
 8008628:	1a9b      	subs	r3, r3, r2
 800862a:	18ed      	adds	r5, r5, r3
 800862c:	2700      	movs	r7, #0
 800862e:	42bd      	cmp	r5, r7
 8008630:	d120      	bne.n	8008674 <_printf_common+0xc8>
 8008632:	2000      	movs	r0, #0
 8008634:	e010      	b.n	8008658 <_printf_common+0xac>
 8008636:	3701      	adds	r7, #1
 8008638:	68e3      	ldr	r3, [r4, #12]
 800863a:	682a      	ldr	r2, [r5, #0]
 800863c:	1a9b      	subs	r3, r3, r2
 800863e:	42bb      	cmp	r3, r7
 8008640:	ddd2      	ble.n	80085e8 <_printf_common+0x3c>
 8008642:	0022      	movs	r2, r4
 8008644:	2301      	movs	r3, #1
 8008646:	9901      	ldr	r1, [sp, #4]
 8008648:	9800      	ldr	r0, [sp, #0]
 800864a:	9e08      	ldr	r6, [sp, #32]
 800864c:	3219      	adds	r2, #25
 800864e:	47b0      	blx	r6
 8008650:	1c43      	adds	r3, r0, #1
 8008652:	d1f0      	bne.n	8008636 <_printf_common+0x8a>
 8008654:	2001      	movs	r0, #1
 8008656:	4240      	negs	r0, r0
 8008658:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800865a:	2030      	movs	r0, #48	; 0x30
 800865c:	18e1      	adds	r1, r4, r3
 800865e:	3143      	adds	r1, #67	; 0x43
 8008660:	7008      	strb	r0, [r1, #0]
 8008662:	0021      	movs	r1, r4
 8008664:	1c5a      	adds	r2, r3, #1
 8008666:	3145      	adds	r1, #69	; 0x45
 8008668:	7809      	ldrb	r1, [r1, #0]
 800866a:	18a2      	adds	r2, r4, r2
 800866c:	3243      	adds	r2, #67	; 0x43
 800866e:	3302      	adds	r3, #2
 8008670:	7011      	strb	r1, [r2, #0]
 8008672:	e7c1      	b.n	80085f8 <_printf_common+0x4c>
 8008674:	0022      	movs	r2, r4
 8008676:	2301      	movs	r3, #1
 8008678:	9901      	ldr	r1, [sp, #4]
 800867a:	9800      	ldr	r0, [sp, #0]
 800867c:	9e08      	ldr	r6, [sp, #32]
 800867e:	321a      	adds	r2, #26
 8008680:	47b0      	blx	r6
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	d0e6      	beq.n	8008654 <_printf_common+0xa8>
 8008686:	3701      	adds	r7, #1
 8008688:	e7d1      	b.n	800862e <_printf_common+0x82>
	...

0800868c <_printf_i>:
 800868c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800868e:	b08b      	sub	sp, #44	; 0x2c
 8008690:	9206      	str	r2, [sp, #24]
 8008692:	000a      	movs	r2, r1
 8008694:	3243      	adds	r2, #67	; 0x43
 8008696:	9307      	str	r3, [sp, #28]
 8008698:	9005      	str	r0, [sp, #20]
 800869a:	9204      	str	r2, [sp, #16]
 800869c:	7e0a      	ldrb	r2, [r1, #24]
 800869e:	000c      	movs	r4, r1
 80086a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086a2:	2a78      	cmp	r2, #120	; 0x78
 80086a4:	d807      	bhi.n	80086b6 <_printf_i+0x2a>
 80086a6:	2a62      	cmp	r2, #98	; 0x62
 80086a8:	d809      	bhi.n	80086be <_printf_i+0x32>
 80086aa:	2a00      	cmp	r2, #0
 80086ac:	d100      	bne.n	80086b0 <_printf_i+0x24>
 80086ae:	e0c1      	b.n	8008834 <_printf_i+0x1a8>
 80086b0:	2a58      	cmp	r2, #88	; 0x58
 80086b2:	d100      	bne.n	80086b6 <_printf_i+0x2a>
 80086b4:	e08c      	b.n	80087d0 <_printf_i+0x144>
 80086b6:	0026      	movs	r6, r4
 80086b8:	3642      	adds	r6, #66	; 0x42
 80086ba:	7032      	strb	r2, [r6, #0]
 80086bc:	e022      	b.n	8008704 <_printf_i+0x78>
 80086be:	0010      	movs	r0, r2
 80086c0:	3863      	subs	r0, #99	; 0x63
 80086c2:	2815      	cmp	r0, #21
 80086c4:	d8f7      	bhi.n	80086b6 <_printf_i+0x2a>
 80086c6:	f7f7 fd31 	bl	800012c <__gnu_thumb1_case_shi>
 80086ca:	0016      	.short	0x0016
 80086cc:	fff6001f 	.word	0xfff6001f
 80086d0:	fff6fff6 	.word	0xfff6fff6
 80086d4:	001ffff6 	.word	0x001ffff6
 80086d8:	fff6fff6 	.word	0xfff6fff6
 80086dc:	fff6fff6 	.word	0xfff6fff6
 80086e0:	003600a8 	.word	0x003600a8
 80086e4:	fff6009a 	.word	0xfff6009a
 80086e8:	00b9fff6 	.word	0x00b9fff6
 80086ec:	0036fff6 	.word	0x0036fff6
 80086f0:	fff6fff6 	.word	0xfff6fff6
 80086f4:	009e      	.short	0x009e
 80086f6:	0026      	movs	r6, r4
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	3642      	adds	r6, #66	; 0x42
 80086fc:	1d11      	adds	r1, r2, #4
 80086fe:	6019      	str	r1, [r3, #0]
 8008700:	6813      	ldr	r3, [r2, #0]
 8008702:	7033      	strb	r3, [r6, #0]
 8008704:	2301      	movs	r3, #1
 8008706:	e0a7      	b.n	8008858 <_printf_i+0x1cc>
 8008708:	6808      	ldr	r0, [r1, #0]
 800870a:	6819      	ldr	r1, [r3, #0]
 800870c:	1d0a      	adds	r2, r1, #4
 800870e:	0605      	lsls	r5, r0, #24
 8008710:	d50b      	bpl.n	800872a <_printf_i+0x9e>
 8008712:	680d      	ldr	r5, [r1, #0]
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	2d00      	cmp	r5, #0
 8008718:	da03      	bge.n	8008722 <_printf_i+0x96>
 800871a:	232d      	movs	r3, #45	; 0x2d
 800871c:	9a04      	ldr	r2, [sp, #16]
 800871e:	426d      	negs	r5, r5
 8008720:	7013      	strb	r3, [r2, #0]
 8008722:	4b61      	ldr	r3, [pc, #388]	; (80088a8 <_printf_i+0x21c>)
 8008724:	270a      	movs	r7, #10
 8008726:	9303      	str	r3, [sp, #12]
 8008728:	e01b      	b.n	8008762 <_printf_i+0xd6>
 800872a:	680d      	ldr	r5, [r1, #0]
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	0641      	lsls	r1, r0, #25
 8008730:	d5f1      	bpl.n	8008716 <_printf_i+0x8a>
 8008732:	b22d      	sxth	r5, r5
 8008734:	e7ef      	b.n	8008716 <_printf_i+0x8a>
 8008736:	680d      	ldr	r5, [r1, #0]
 8008738:	6819      	ldr	r1, [r3, #0]
 800873a:	1d08      	adds	r0, r1, #4
 800873c:	6018      	str	r0, [r3, #0]
 800873e:	062e      	lsls	r6, r5, #24
 8008740:	d501      	bpl.n	8008746 <_printf_i+0xba>
 8008742:	680d      	ldr	r5, [r1, #0]
 8008744:	e003      	b.n	800874e <_printf_i+0xc2>
 8008746:	066d      	lsls	r5, r5, #25
 8008748:	d5fb      	bpl.n	8008742 <_printf_i+0xb6>
 800874a:	680d      	ldr	r5, [r1, #0]
 800874c:	b2ad      	uxth	r5, r5
 800874e:	4b56      	ldr	r3, [pc, #344]	; (80088a8 <_printf_i+0x21c>)
 8008750:	2708      	movs	r7, #8
 8008752:	9303      	str	r3, [sp, #12]
 8008754:	2a6f      	cmp	r2, #111	; 0x6f
 8008756:	d000      	beq.n	800875a <_printf_i+0xce>
 8008758:	3702      	adds	r7, #2
 800875a:	0023      	movs	r3, r4
 800875c:	2200      	movs	r2, #0
 800875e:	3343      	adds	r3, #67	; 0x43
 8008760:	701a      	strb	r2, [r3, #0]
 8008762:	6863      	ldr	r3, [r4, #4]
 8008764:	60a3      	str	r3, [r4, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	db03      	blt.n	8008772 <_printf_i+0xe6>
 800876a:	2204      	movs	r2, #4
 800876c:	6821      	ldr	r1, [r4, #0]
 800876e:	4391      	bics	r1, r2
 8008770:	6021      	str	r1, [r4, #0]
 8008772:	2d00      	cmp	r5, #0
 8008774:	d102      	bne.n	800877c <_printf_i+0xf0>
 8008776:	9e04      	ldr	r6, [sp, #16]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00c      	beq.n	8008796 <_printf_i+0x10a>
 800877c:	9e04      	ldr	r6, [sp, #16]
 800877e:	0028      	movs	r0, r5
 8008780:	0039      	movs	r1, r7
 8008782:	f7f7 fd63 	bl	800024c <__aeabi_uidivmod>
 8008786:	9b03      	ldr	r3, [sp, #12]
 8008788:	3e01      	subs	r6, #1
 800878a:	5c5b      	ldrb	r3, [r3, r1]
 800878c:	7033      	strb	r3, [r6, #0]
 800878e:	002b      	movs	r3, r5
 8008790:	0005      	movs	r5, r0
 8008792:	429f      	cmp	r7, r3
 8008794:	d9f3      	bls.n	800877e <_printf_i+0xf2>
 8008796:	2f08      	cmp	r7, #8
 8008798:	d109      	bne.n	80087ae <_printf_i+0x122>
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	07db      	lsls	r3, r3, #31
 800879e:	d506      	bpl.n	80087ae <_printf_i+0x122>
 80087a0:	6863      	ldr	r3, [r4, #4]
 80087a2:	6922      	ldr	r2, [r4, #16]
 80087a4:	4293      	cmp	r3, r2
 80087a6:	dc02      	bgt.n	80087ae <_printf_i+0x122>
 80087a8:	2330      	movs	r3, #48	; 0x30
 80087aa:	3e01      	subs	r6, #1
 80087ac:	7033      	strb	r3, [r6, #0]
 80087ae:	9b04      	ldr	r3, [sp, #16]
 80087b0:	1b9b      	subs	r3, r3, r6
 80087b2:	6123      	str	r3, [r4, #16]
 80087b4:	9b07      	ldr	r3, [sp, #28]
 80087b6:	0021      	movs	r1, r4
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	9805      	ldr	r0, [sp, #20]
 80087bc:	9b06      	ldr	r3, [sp, #24]
 80087be:	aa09      	add	r2, sp, #36	; 0x24
 80087c0:	f7ff fef4 	bl	80085ac <_printf_common>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d14c      	bne.n	8008862 <_printf_i+0x1d6>
 80087c8:	2001      	movs	r0, #1
 80087ca:	4240      	negs	r0, r0
 80087cc:	b00b      	add	sp, #44	; 0x2c
 80087ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087d0:	3145      	adds	r1, #69	; 0x45
 80087d2:	700a      	strb	r2, [r1, #0]
 80087d4:	4a34      	ldr	r2, [pc, #208]	; (80088a8 <_printf_i+0x21c>)
 80087d6:	9203      	str	r2, [sp, #12]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	6821      	ldr	r1, [r4, #0]
 80087dc:	ca20      	ldmia	r2!, {r5}
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	0608      	lsls	r0, r1, #24
 80087e2:	d516      	bpl.n	8008812 <_printf_i+0x186>
 80087e4:	07cb      	lsls	r3, r1, #31
 80087e6:	d502      	bpl.n	80087ee <_printf_i+0x162>
 80087e8:	2320      	movs	r3, #32
 80087ea:	4319      	orrs	r1, r3
 80087ec:	6021      	str	r1, [r4, #0]
 80087ee:	2710      	movs	r7, #16
 80087f0:	2d00      	cmp	r5, #0
 80087f2:	d1b2      	bne.n	800875a <_printf_i+0xce>
 80087f4:	2320      	movs	r3, #32
 80087f6:	6822      	ldr	r2, [r4, #0]
 80087f8:	439a      	bics	r2, r3
 80087fa:	6022      	str	r2, [r4, #0]
 80087fc:	e7ad      	b.n	800875a <_printf_i+0xce>
 80087fe:	2220      	movs	r2, #32
 8008800:	6809      	ldr	r1, [r1, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	6022      	str	r2, [r4, #0]
 8008806:	0022      	movs	r2, r4
 8008808:	2178      	movs	r1, #120	; 0x78
 800880a:	3245      	adds	r2, #69	; 0x45
 800880c:	7011      	strb	r1, [r2, #0]
 800880e:	4a27      	ldr	r2, [pc, #156]	; (80088ac <_printf_i+0x220>)
 8008810:	e7e1      	b.n	80087d6 <_printf_i+0x14a>
 8008812:	0648      	lsls	r0, r1, #25
 8008814:	d5e6      	bpl.n	80087e4 <_printf_i+0x158>
 8008816:	b2ad      	uxth	r5, r5
 8008818:	e7e4      	b.n	80087e4 <_printf_i+0x158>
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	680d      	ldr	r5, [r1, #0]
 800881e:	1d10      	adds	r0, r2, #4
 8008820:	6949      	ldr	r1, [r1, #20]
 8008822:	6018      	str	r0, [r3, #0]
 8008824:	6813      	ldr	r3, [r2, #0]
 8008826:	062e      	lsls	r6, r5, #24
 8008828:	d501      	bpl.n	800882e <_printf_i+0x1a2>
 800882a:	6019      	str	r1, [r3, #0]
 800882c:	e002      	b.n	8008834 <_printf_i+0x1a8>
 800882e:	066d      	lsls	r5, r5, #25
 8008830:	d5fb      	bpl.n	800882a <_printf_i+0x19e>
 8008832:	8019      	strh	r1, [r3, #0]
 8008834:	2300      	movs	r3, #0
 8008836:	9e04      	ldr	r6, [sp, #16]
 8008838:	6123      	str	r3, [r4, #16]
 800883a:	e7bb      	b.n	80087b4 <_printf_i+0x128>
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	1d11      	adds	r1, r2, #4
 8008840:	6019      	str	r1, [r3, #0]
 8008842:	6816      	ldr	r6, [r2, #0]
 8008844:	2100      	movs	r1, #0
 8008846:	0030      	movs	r0, r6
 8008848:	6862      	ldr	r2, [r4, #4]
 800884a:	f002 fb5d 	bl	800af08 <memchr>
 800884e:	2800      	cmp	r0, #0
 8008850:	d001      	beq.n	8008856 <_printf_i+0x1ca>
 8008852:	1b80      	subs	r0, r0, r6
 8008854:	6060      	str	r0, [r4, #4]
 8008856:	6863      	ldr	r3, [r4, #4]
 8008858:	6123      	str	r3, [r4, #16]
 800885a:	2300      	movs	r3, #0
 800885c:	9a04      	ldr	r2, [sp, #16]
 800885e:	7013      	strb	r3, [r2, #0]
 8008860:	e7a8      	b.n	80087b4 <_printf_i+0x128>
 8008862:	6923      	ldr	r3, [r4, #16]
 8008864:	0032      	movs	r2, r6
 8008866:	9906      	ldr	r1, [sp, #24]
 8008868:	9805      	ldr	r0, [sp, #20]
 800886a:	9d07      	ldr	r5, [sp, #28]
 800886c:	47a8      	blx	r5
 800886e:	1c43      	adds	r3, r0, #1
 8008870:	d0aa      	beq.n	80087c8 <_printf_i+0x13c>
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	079b      	lsls	r3, r3, #30
 8008876:	d415      	bmi.n	80088a4 <_printf_i+0x218>
 8008878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800887a:	68e0      	ldr	r0, [r4, #12]
 800887c:	4298      	cmp	r0, r3
 800887e:	daa5      	bge.n	80087cc <_printf_i+0x140>
 8008880:	0018      	movs	r0, r3
 8008882:	e7a3      	b.n	80087cc <_printf_i+0x140>
 8008884:	0022      	movs	r2, r4
 8008886:	2301      	movs	r3, #1
 8008888:	9906      	ldr	r1, [sp, #24]
 800888a:	9805      	ldr	r0, [sp, #20]
 800888c:	9e07      	ldr	r6, [sp, #28]
 800888e:	3219      	adds	r2, #25
 8008890:	47b0      	blx	r6
 8008892:	1c43      	adds	r3, r0, #1
 8008894:	d098      	beq.n	80087c8 <_printf_i+0x13c>
 8008896:	3501      	adds	r5, #1
 8008898:	68e3      	ldr	r3, [r4, #12]
 800889a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	42ab      	cmp	r3, r5
 80088a0:	dcf0      	bgt.n	8008884 <_printf_i+0x1f8>
 80088a2:	e7e9      	b.n	8008878 <_printf_i+0x1ec>
 80088a4:	2500      	movs	r5, #0
 80088a6:	e7f7      	b.n	8008898 <_printf_i+0x20c>
 80088a8:	0800cc76 	.word	0x0800cc76
 80088ac:	0800cc87 	.word	0x0800cc87

080088b0 <_scanf_float>:
 80088b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088b2:	b08b      	sub	sp, #44	; 0x2c
 80088b4:	0015      	movs	r5, r2
 80088b6:	9001      	str	r0, [sp, #4]
 80088b8:	22ae      	movs	r2, #174	; 0xae
 80088ba:	2000      	movs	r0, #0
 80088bc:	9306      	str	r3, [sp, #24]
 80088be:	688b      	ldr	r3, [r1, #8]
 80088c0:	000e      	movs	r6, r1
 80088c2:	1e59      	subs	r1, r3, #1
 80088c4:	0052      	lsls	r2, r2, #1
 80088c6:	9005      	str	r0, [sp, #20]
 80088c8:	4291      	cmp	r1, r2
 80088ca:	d905      	bls.n	80088d8 <_scanf_float+0x28>
 80088cc:	3b5e      	subs	r3, #94	; 0x5e
 80088ce:	3bff      	subs	r3, #255	; 0xff
 80088d0:	9305      	str	r3, [sp, #20]
 80088d2:	235e      	movs	r3, #94	; 0x5e
 80088d4:	33ff      	adds	r3, #255	; 0xff
 80088d6:	60b3      	str	r3, [r6, #8]
 80088d8:	23f0      	movs	r3, #240	; 0xf0
 80088da:	6832      	ldr	r2, [r6, #0]
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	4313      	orrs	r3, r2
 80088e0:	6033      	str	r3, [r6, #0]
 80088e2:	0033      	movs	r3, r6
 80088e4:	2400      	movs	r4, #0
 80088e6:	331c      	adds	r3, #28
 80088e8:	001f      	movs	r7, r3
 80088ea:	9303      	str	r3, [sp, #12]
 80088ec:	9402      	str	r4, [sp, #8]
 80088ee:	9408      	str	r4, [sp, #32]
 80088f0:	9407      	str	r4, [sp, #28]
 80088f2:	9400      	str	r4, [sp, #0]
 80088f4:	9404      	str	r4, [sp, #16]
 80088f6:	68b2      	ldr	r2, [r6, #8]
 80088f8:	2a00      	cmp	r2, #0
 80088fa:	d00a      	beq.n	8008912 <_scanf_float+0x62>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	2b4e      	cmp	r3, #78	; 0x4e
 8008902:	d844      	bhi.n	800898e <_scanf_float+0xde>
 8008904:	0018      	movs	r0, r3
 8008906:	2b40      	cmp	r3, #64	; 0x40
 8008908:	d82c      	bhi.n	8008964 <_scanf_float+0xb4>
 800890a:	382b      	subs	r0, #43	; 0x2b
 800890c:	b2c1      	uxtb	r1, r0
 800890e:	290e      	cmp	r1, #14
 8008910:	d92a      	bls.n	8008968 <_scanf_float+0xb8>
 8008912:	9b00      	ldr	r3, [sp, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d003      	beq.n	8008920 <_scanf_float+0x70>
 8008918:	6832      	ldr	r2, [r6, #0]
 800891a:	4ba4      	ldr	r3, [pc, #656]	; (8008bac <_scanf_float+0x2fc>)
 800891c:	4013      	ands	r3, r2
 800891e:	6033      	str	r3, [r6, #0]
 8008920:	9b02      	ldr	r3, [sp, #8]
 8008922:	3b01      	subs	r3, #1
 8008924:	2b01      	cmp	r3, #1
 8008926:	d900      	bls.n	800892a <_scanf_float+0x7a>
 8008928:	e0f9      	b.n	8008b1e <_scanf_float+0x26e>
 800892a:	24be      	movs	r4, #190	; 0xbe
 800892c:	0064      	lsls	r4, r4, #1
 800892e:	9b03      	ldr	r3, [sp, #12]
 8008930:	429f      	cmp	r7, r3
 8008932:	d900      	bls.n	8008936 <_scanf_float+0x86>
 8008934:	e0e9      	b.n	8008b0a <_scanf_float+0x25a>
 8008936:	2301      	movs	r3, #1
 8008938:	9302      	str	r3, [sp, #8]
 800893a:	e185      	b.n	8008c48 <_scanf_float+0x398>
 800893c:	0018      	movs	r0, r3
 800893e:	3861      	subs	r0, #97	; 0x61
 8008940:	280d      	cmp	r0, #13
 8008942:	d8e6      	bhi.n	8008912 <_scanf_float+0x62>
 8008944:	f7f7 fbf2 	bl	800012c <__gnu_thumb1_case_shi>
 8008948:	ffe50083 	.word	0xffe50083
 800894c:	ffe5ffe5 	.word	0xffe5ffe5
 8008950:	00a200b6 	.word	0x00a200b6
 8008954:	ffe5ffe5 	.word	0xffe5ffe5
 8008958:	ffe50089 	.word	0xffe50089
 800895c:	ffe5ffe5 	.word	0xffe5ffe5
 8008960:	0065ffe5 	.word	0x0065ffe5
 8008964:	3841      	subs	r0, #65	; 0x41
 8008966:	e7eb      	b.n	8008940 <_scanf_float+0x90>
 8008968:	280e      	cmp	r0, #14
 800896a:	d8d2      	bhi.n	8008912 <_scanf_float+0x62>
 800896c:	f7f7 fbde 	bl	800012c <__gnu_thumb1_case_shi>
 8008970:	ffd1004b 	.word	0xffd1004b
 8008974:	0098004b 	.word	0x0098004b
 8008978:	0020ffd1 	.word	0x0020ffd1
 800897c:	00400040 	.word	0x00400040
 8008980:	00400040 	.word	0x00400040
 8008984:	00400040 	.word	0x00400040
 8008988:	00400040 	.word	0x00400040
 800898c:	0040      	.short	0x0040
 800898e:	2b6e      	cmp	r3, #110	; 0x6e
 8008990:	d809      	bhi.n	80089a6 <_scanf_float+0xf6>
 8008992:	2b60      	cmp	r3, #96	; 0x60
 8008994:	d8d2      	bhi.n	800893c <_scanf_float+0x8c>
 8008996:	2b54      	cmp	r3, #84	; 0x54
 8008998:	d07d      	beq.n	8008a96 <_scanf_float+0x1e6>
 800899a:	2b59      	cmp	r3, #89	; 0x59
 800899c:	d1b9      	bne.n	8008912 <_scanf_float+0x62>
 800899e:	2c07      	cmp	r4, #7
 80089a0:	d1b7      	bne.n	8008912 <_scanf_float+0x62>
 80089a2:	2408      	movs	r4, #8
 80089a4:	e02c      	b.n	8008a00 <_scanf_float+0x150>
 80089a6:	2b74      	cmp	r3, #116	; 0x74
 80089a8:	d075      	beq.n	8008a96 <_scanf_float+0x1e6>
 80089aa:	2b79      	cmp	r3, #121	; 0x79
 80089ac:	d0f7      	beq.n	800899e <_scanf_float+0xee>
 80089ae:	e7b0      	b.n	8008912 <_scanf_float+0x62>
 80089b0:	6831      	ldr	r1, [r6, #0]
 80089b2:	05c8      	lsls	r0, r1, #23
 80089b4:	d51c      	bpl.n	80089f0 <_scanf_float+0x140>
 80089b6:	2380      	movs	r3, #128	; 0x80
 80089b8:	4399      	bics	r1, r3
 80089ba:	9b00      	ldr	r3, [sp, #0]
 80089bc:	6031      	str	r1, [r6, #0]
 80089be:	3301      	adds	r3, #1
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	9b05      	ldr	r3, [sp, #20]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d003      	beq.n	80089d0 <_scanf_float+0x120>
 80089c8:	3b01      	subs	r3, #1
 80089ca:	3201      	adds	r2, #1
 80089cc:	9305      	str	r3, [sp, #20]
 80089ce:	60b2      	str	r2, [r6, #8]
 80089d0:	68b3      	ldr	r3, [r6, #8]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	60b3      	str	r3, [r6, #8]
 80089d6:	6933      	ldr	r3, [r6, #16]
 80089d8:	3301      	adds	r3, #1
 80089da:	6133      	str	r3, [r6, #16]
 80089dc:	686b      	ldr	r3, [r5, #4]
 80089de:	3b01      	subs	r3, #1
 80089e0:	606b      	str	r3, [r5, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	dc00      	bgt.n	80089e8 <_scanf_float+0x138>
 80089e6:	e086      	b.n	8008af6 <_scanf_float+0x246>
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	3301      	adds	r3, #1
 80089ec:	602b      	str	r3, [r5, #0]
 80089ee:	e782      	b.n	80088f6 <_scanf_float+0x46>
 80089f0:	9a02      	ldr	r2, [sp, #8]
 80089f2:	1912      	adds	r2, r2, r4
 80089f4:	2a00      	cmp	r2, #0
 80089f6:	d18c      	bne.n	8008912 <_scanf_float+0x62>
 80089f8:	4a6d      	ldr	r2, [pc, #436]	; (8008bb0 <_scanf_float+0x300>)
 80089fa:	6831      	ldr	r1, [r6, #0]
 80089fc:	400a      	ands	r2, r1
 80089fe:	6032      	str	r2, [r6, #0]
 8008a00:	703b      	strb	r3, [r7, #0]
 8008a02:	3701      	adds	r7, #1
 8008a04:	e7e4      	b.n	80089d0 <_scanf_float+0x120>
 8008a06:	2180      	movs	r1, #128	; 0x80
 8008a08:	6832      	ldr	r2, [r6, #0]
 8008a0a:	420a      	tst	r2, r1
 8008a0c:	d081      	beq.n	8008912 <_scanf_float+0x62>
 8008a0e:	438a      	bics	r2, r1
 8008a10:	e7f5      	b.n	80089fe <_scanf_float+0x14e>
 8008a12:	9a02      	ldr	r2, [sp, #8]
 8008a14:	2a00      	cmp	r2, #0
 8008a16:	d10f      	bne.n	8008a38 <_scanf_float+0x188>
 8008a18:	9a00      	ldr	r2, [sp, #0]
 8008a1a:	2a00      	cmp	r2, #0
 8008a1c:	d10f      	bne.n	8008a3e <_scanf_float+0x18e>
 8008a1e:	6832      	ldr	r2, [r6, #0]
 8008a20:	21e0      	movs	r1, #224	; 0xe0
 8008a22:	0010      	movs	r0, r2
 8008a24:	00c9      	lsls	r1, r1, #3
 8008a26:	4008      	ands	r0, r1
 8008a28:	4288      	cmp	r0, r1
 8008a2a:	d108      	bne.n	8008a3e <_scanf_float+0x18e>
 8008a2c:	4961      	ldr	r1, [pc, #388]	; (8008bb4 <_scanf_float+0x304>)
 8008a2e:	400a      	ands	r2, r1
 8008a30:	6032      	str	r2, [r6, #0]
 8008a32:	2201      	movs	r2, #1
 8008a34:	9202      	str	r2, [sp, #8]
 8008a36:	e7e3      	b.n	8008a00 <_scanf_float+0x150>
 8008a38:	9a02      	ldr	r2, [sp, #8]
 8008a3a:	2a02      	cmp	r2, #2
 8008a3c:	d059      	beq.n	8008af2 <_scanf_float+0x242>
 8008a3e:	2c01      	cmp	r4, #1
 8008a40:	d002      	beq.n	8008a48 <_scanf_float+0x198>
 8008a42:	2c04      	cmp	r4, #4
 8008a44:	d000      	beq.n	8008a48 <_scanf_float+0x198>
 8008a46:	e764      	b.n	8008912 <_scanf_float+0x62>
 8008a48:	3401      	adds	r4, #1
 8008a4a:	b2e4      	uxtb	r4, r4
 8008a4c:	e7d8      	b.n	8008a00 <_scanf_float+0x150>
 8008a4e:	9a02      	ldr	r2, [sp, #8]
 8008a50:	2a01      	cmp	r2, #1
 8008a52:	d000      	beq.n	8008a56 <_scanf_float+0x1a6>
 8008a54:	e75d      	b.n	8008912 <_scanf_float+0x62>
 8008a56:	2202      	movs	r2, #2
 8008a58:	e7ec      	b.n	8008a34 <_scanf_float+0x184>
 8008a5a:	2c00      	cmp	r4, #0
 8008a5c:	d110      	bne.n	8008a80 <_scanf_float+0x1d0>
 8008a5e:	9a00      	ldr	r2, [sp, #0]
 8008a60:	2a00      	cmp	r2, #0
 8008a62:	d000      	beq.n	8008a66 <_scanf_float+0x1b6>
 8008a64:	e758      	b.n	8008918 <_scanf_float+0x68>
 8008a66:	6832      	ldr	r2, [r6, #0]
 8008a68:	21e0      	movs	r1, #224	; 0xe0
 8008a6a:	0010      	movs	r0, r2
 8008a6c:	00c9      	lsls	r1, r1, #3
 8008a6e:	4008      	ands	r0, r1
 8008a70:	4288      	cmp	r0, r1
 8008a72:	d000      	beq.n	8008a76 <_scanf_float+0x1c6>
 8008a74:	e754      	b.n	8008920 <_scanf_float+0x70>
 8008a76:	494f      	ldr	r1, [pc, #316]	; (8008bb4 <_scanf_float+0x304>)
 8008a78:	3401      	adds	r4, #1
 8008a7a:	400a      	ands	r2, r1
 8008a7c:	6032      	str	r2, [r6, #0]
 8008a7e:	e7bf      	b.n	8008a00 <_scanf_float+0x150>
 8008a80:	21fd      	movs	r1, #253	; 0xfd
 8008a82:	1ee2      	subs	r2, r4, #3
 8008a84:	420a      	tst	r2, r1
 8008a86:	d000      	beq.n	8008a8a <_scanf_float+0x1da>
 8008a88:	e743      	b.n	8008912 <_scanf_float+0x62>
 8008a8a:	e7dd      	b.n	8008a48 <_scanf_float+0x198>
 8008a8c:	2c02      	cmp	r4, #2
 8008a8e:	d000      	beq.n	8008a92 <_scanf_float+0x1e2>
 8008a90:	e73f      	b.n	8008912 <_scanf_float+0x62>
 8008a92:	2403      	movs	r4, #3
 8008a94:	e7b4      	b.n	8008a00 <_scanf_float+0x150>
 8008a96:	2c06      	cmp	r4, #6
 8008a98:	d000      	beq.n	8008a9c <_scanf_float+0x1ec>
 8008a9a:	e73a      	b.n	8008912 <_scanf_float+0x62>
 8008a9c:	2407      	movs	r4, #7
 8008a9e:	e7af      	b.n	8008a00 <_scanf_float+0x150>
 8008aa0:	6832      	ldr	r2, [r6, #0]
 8008aa2:	0591      	lsls	r1, r2, #22
 8008aa4:	d400      	bmi.n	8008aa8 <_scanf_float+0x1f8>
 8008aa6:	e734      	b.n	8008912 <_scanf_float+0x62>
 8008aa8:	4943      	ldr	r1, [pc, #268]	; (8008bb8 <_scanf_float+0x308>)
 8008aaa:	400a      	ands	r2, r1
 8008aac:	6032      	str	r2, [r6, #0]
 8008aae:	9a00      	ldr	r2, [sp, #0]
 8008ab0:	9204      	str	r2, [sp, #16]
 8008ab2:	e7a5      	b.n	8008a00 <_scanf_float+0x150>
 8008ab4:	21a0      	movs	r1, #160	; 0xa0
 8008ab6:	2080      	movs	r0, #128	; 0x80
 8008ab8:	6832      	ldr	r2, [r6, #0]
 8008aba:	00c9      	lsls	r1, r1, #3
 8008abc:	4011      	ands	r1, r2
 8008abe:	00c0      	lsls	r0, r0, #3
 8008ac0:	4281      	cmp	r1, r0
 8008ac2:	d006      	beq.n	8008ad2 <_scanf_float+0x222>
 8008ac4:	4202      	tst	r2, r0
 8008ac6:	d100      	bne.n	8008aca <_scanf_float+0x21a>
 8008ac8:	e723      	b.n	8008912 <_scanf_float+0x62>
 8008aca:	9900      	ldr	r1, [sp, #0]
 8008acc:	2900      	cmp	r1, #0
 8008ace:	d100      	bne.n	8008ad2 <_scanf_float+0x222>
 8008ad0:	e726      	b.n	8008920 <_scanf_float+0x70>
 8008ad2:	0591      	lsls	r1, r2, #22
 8008ad4:	d404      	bmi.n	8008ae0 <_scanf_float+0x230>
 8008ad6:	9900      	ldr	r1, [sp, #0]
 8008ad8:	9804      	ldr	r0, [sp, #16]
 8008ada:	9708      	str	r7, [sp, #32]
 8008adc:	1a09      	subs	r1, r1, r0
 8008ade:	9107      	str	r1, [sp, #28]
 8008ae0:	4934      	ldr	r1, [pc, #208]	; (8008bb4 <_scanf_float+0x304>)
 8008ae2:	400a      	ands	r2, r1
 8008ae4:	21c0      	movs	r1, #192	; 0xc0
 8008ae6:	0049      	lsls	r1, r1, #1
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	6032      	str	r2, [r6, #0]
 8008aec:	2200      	movs	r2, #0
 8008aee:	9200      	str	r2, [sp, #0]
 8008af0:	e786      	b.n	8008a00 <_scanf_float+0x150>
 8008af2:	2203      	movs	r2, #3
 8008af4:	e79e      	b.n	8008a34 <_scanf_float+0x184>
 8008af6:	23c0      	movs	r3, #192	; 0xc0
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	0029      	movs	r1, r5
 8008afc:	58f3      	ldr	r3, [r6, r3]
 8008afe:	9801      	ldr	r0, [sp, #4]
 8008b00:	4798      	blx	r3
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d100      	bne.n	8008b08 <_scanf_float+0x258>
 8008b06:	e6f6      	b.n	80088f6 <_scanf_float+0x46>
 8008b08:	e703      	b.n	8008912 <_scanf_float+0x62>
 8008b0a:	3f01      	subs	r7, #1
 8008b0c:	5933      	ldr	r3, [r6, r4]
 8008b0e:	002a      	movs	r2, r5
 8008b10:	7839      	ldrb	r1, [r7, #0]
 8008b12:	9801      	ldr	r0, [sp, #4]
 8008b14:	4798      	blx	r3
 8008b16:	6933      	ldr	r3, [r6, #16]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	6133      	str	r3, [r6, #16]
 8008b1c:	e707      	b.n	800892e <_scanf_float+0x7e>
 8008b1e:	1e63      	subs	r3, r4, #1
 8008b20:	2b06      	cmp	r3, #6
 8008b22:	d80e      	bhi.n	8008b42 <_scanf_float+0x292>
 8008b24:	9702      	str	r7, [sp, #8]
 8008b26:	2c02      	cmp	r4, #2
 8008b28:	d920      	bls.n	8008b6c <_scanf_float+0x2bc>
 8008b2a:	1be3      	subs	r3, r4, r7
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	9305      	str	r3, [sp, #20]
 8008b30:	9b02      	ldr	r3, [sp, #8]
 8008b32:	9a05      	ldr	r2, [sp, #20]
 8008b34:	189b      	adds	r3, r3, r2
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d827      	bhi.n	8008b8c <_scanf_float+0x2dc>
 8008b3c:	3c03      	subs	r4, #3
 8008b3e:	b2e4      	uxtb	r4, r4
 8008b40:	1b3f      	subs	r7, r7, r4
 8008b42:	6833      	ldr	r3, [r6, #0]
 8008b44:	05da      	lsls	r2, r3, #23
 8008b46:	d554      	bpl.n	8008bf2 <_scanf_float+0x342>
 8008b48:	055b      	lsls	r3, r3, #21
 8008b4a:	d537      	bpl.n	8008bbc <_scanf_float+0x30c>
 8008b4c:	24be      	movs	r4, #190	; 0xbe
 8008b4e:	0064      	lsls	r4, r4, #1
 8008b50:	9b03      	ldr	r3, [sp, #12]
 8008b52:	429f      	cmp	r7, r3
 8008b54:	d800      	bhi.n	8008b58 <_scanf_float+0x2a8>
 8008b56:	e6ee      	b.n	8008936 <_scanf_float+0x86>
 8008b58:	3f01      	subs	r7, #1
 8008b5a:	5933      	ldr	r3, [r6, r4]
 8008b5c:	002a      	movs	r2, r5
 8008b5e:	7839      	ldrb	r1, [r7, #0]
 8008b60:	9801      	ldr	r0, [sp, #4]
 8008b62:	4798      	blx	r3
 8008b64:	6933      	ldr	r3, [r6, #16]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	6133      	str	r3, [r6, #16]
 8008b6a:	e7f1      	b.n	8008b50 <_scanf_float+0x2a0>
 8008b6c:	24be      	movs	r4, #190	; 0xbe
 8008b6e:	0064      	lsls	r4, r4, #1
 8008b70:	9b03      	ldr	r3, [sp, #12]
 8008b72:	429f      	cmp	r7, r3
 8008b74:	d800      	bhi.n	8008b78 <_scanf_float+0x2c8>
 8008b76:	e6de      	b.n	8008936 <_scanf_float+0x86>
 8008b78:	3f01      	subs	r7, #1
 8008b7a:	5933      	ldr	r3, [r6, r4]
 8008b7c:	002a      	movs	r2, r5
 8008b7e:	7839      	ldrb	r1, [r7, #0]
 8008b80:	9801      	ldr	r0, [sp, #4]
 8008b82:	4798      	blx	r3
 8008b84:	6933      	ldr	r3, [r6, #16]
 8008b86:	3b01      	subs	r3, #1
 8008b88:	6133      	str	r3, [r6, #16]
 8008b8a:	e7f1      	b.n	8008b70 <_scanf_float+0x2c0>
 8008b8c:	9b02      	ldr	r3, [sp, #8]
 8008b8e:	002a      	movs	r2, r5
 8008b90:	3b01      	subs	r3, #1
 8008b92:	7819      	ldrb	r1, [r3, #0]
 8008b94:	9302      	str	r3, [sp, #8]
 8008b96:	23be      	movs	r3, #190	; 0xbe
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	58f3      	ldr	r3, [r6, r3]
 8008b9c:	9801      	ldr	r0, [sp, #4]
 8008b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008ba0:	4798      	blx	r3
 8008ba2:	6933      	ldr	r3, [r6, #16]
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	6133      	str	r3, [r6, #16]
 8008ba8:	e7c2      	b.n	8008b30 <_scanf_float+0x280>
 8008baa:	46c0      	nop			; (mov r8, r8)
 8008bac:	fffffeff 	.word	0xfffffeff
 8008bb0:	fffffe7f 	.word	0xfffffe7f
 8008bb4:	fffff87f 	.word	0xfffff87f
 8008bb8:	fffffd7f 	.word	0xfffffd7f
 8008bbc:	6933      	ldr	r3, [r6, #16]
 8008bbe:	1e7c      	subs	r4, r7, #1
 8008bc0:	7821      	ldrb	r1, [r4, #0]
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	6133      	str	r3, [r6, #16]
 8008bc6:	2965      	cmp	r1, #101	; 0x65
 8008bc8:	d00c      	beq.n	8008be4 <_scanf_float+0x334>
 8008bca:	2945      	cmp	r1, #69	; 0x45
 8008bcc:	d00a      	beq.n	8008be4 <_scanf_float+0x334>
 8008bce:	23be      	movs	r3, #190	; 0xbe
 8008bd0:	005b      	lsls	r3, r3, #1
 8008bd2:	58f3      	ldr	r3, [r6, r3]
 8008bd4:	002a      	movs	r2, r5
 8008bd6:	9801      	ldr	r0, [sp, #4]
 8008bd8:	4798      	blx	r3
 8008bda:	6933      	ldr	r3, [r6, #16]
 8008bdc:	1ebc      	subs	r4, r7, #2
 8008bde:	3b01      	subs	r3, #1
 8008be0:	7821      	ldrb	r1, [r4, #0]
 8008be2:	6133      	str	r3, [r6, #16]
 8008be4:	23be      	movs	r3, #190	; 0xbe
 8008be6:	005b      	lsls	r3, r3, #1
 8008be8:	002a      	movs	r2, r5
 8008bea:	58f3      	ldr	r3, [r6, r3]
 8008bec:	9801      	ldr	r0, [sp, #4]
 8008bee:	4798      	blx	r3
 8008bf0:	0027      	movs	r7, r4
 8008bf2:	6832      	ldr	r2, [r6, #0]
 8008bf4:	2310      	movs	r3, #16
 8008bf6:	0011      	movs	r1, r2
 8008bf8:	4019      	ands	r1, r3
 8008bfa:	9102      	str	r1, [sp, #8]
 8008bfc:	421a      	tst	r2, r3
 8008bfe:	d158      	bne.n	8008cb2 <_scanf_float+0x402>
 8008c00:	23c0      	movs	r3, #192	; 0xc0
 8008c02:	7039      	strb	r1, [r7, #0]
 8008c04:	6832      	ldr	r2, [r6, #0]
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	4013      	ands	r3, r2
 8008c0a:	2280      	movs	r2, #128	; 0x80
 8008c0c:	00d2      	lsls	r2, r2, #3
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d11d      	bne.n	8008c4e <_scanf_float+0x39e>
 8008c12:	9b04      	ldr	r3, [sp, #16]
 8008c14:	9a00      	ldr	r2, [sp, #0]
 8008c16:	9900      	ldr	r1, [sp, #0]
 8008c18:	1a9a      	subs	r2, r3, r2
 8008c1a:	428b      	cmp	r3, r1
 8008c1c:	d124      	bne.n	8008c68 <_scanf_float+0x3b8>
 8008c1e:	2200      	movs	r2, #0
 8008c20:	9903      	ldr	r1, [sp, #12]
 8008c22:	9801      	ldr	r0, [sp, #4]
 8008c24:	f000 fe9c 	bl	8009960 <_strtod_r>
 8008c28:	9b06      	ldr	r3, [sp, #24]
 8008c2a:	000d      	movs	r5, r1
 8008c2c:	6831      	ldr	r1, [r6, #0]
 8008c2e:	0004      	movs	r4, r0
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	078a      	lsls	r2, r1, #30
 8008c34:	d525      	bpl.n	8008c82 <_scanf_float+0x3d2>
 8008c36:	1d1a      	adds	r2, r3, #4
 8008c38:	9906      	ldr	r1, [sp, #24]
 8008c3a:	600a      	str	r2, [r1, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	601c      	str	r4, [r3, #0]
 8008c40:	605d      	str	r5, [r3, #4]
 8008c42:	68f3      	ldr	r3, [r6, #12]
 8008c44:	3301      	adds	r3, #1
 8008c46:	60f3      	str	r3, [r6, #12]
 8008c48:	9802      	ldr	r0, [sp, #8]
 8008c4a:	b00b      	add	sp, #44	; 0x2c
 8008c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c4e:	9b07      	ldr	r3, [sp, #28]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0e4      	beq.n	8008c1e <_scanf_float+0x36e>
 8008c54:	9b08      	ldr	r3, [sp, #32]
 8008c56:	9a02      	ldr	r2, [sp, #8]
 8008c58:	1c59      	adds	r1, r3, #1
 8008c5a:	9801      	ldr	r0, [sp, #4]
 8008c5c:	230a      	movs	r3, #10
 8008c5e:	f000 ff15 	bl	8009a8c <_strtol_r>
 8008c62:	9b07      	ldr	r3, [sp, #28]
 8008c64:	9f08      	ldr	r7, [sp, #32]
 8008c66:	1ac2      	subs	r2, r0, r3
 8008c68:	0033      	movs	r3, r6
 8008c6a:	3370      	adds	r3, #112	; 0x70
 8008c6c:	33ff      	adds	r3, #255	; 0xff
 8008c6e:	429f      	cmp	r7, r3
 8008c70:	d302      	bcc.n	8008c78 <_scanf_float+0x3c8>
 8008c72:	0037      	movs	r7, r6
 8008c74:	376f      	adds	r7, #111	; 0x6f
 8008c76:	37ff      	adds	r7, #255	; 0xff
 8008c78:	0038      	movs	r0, r7
 8008c7a:	490f      	ldr	r1, [pc, #60]	; (8008cb8 <_scanf_float+0x408>)
 8008c7c:	f000 f824 	bl	8008cc8 <siprintf>
 8008c80:	e7cd      	b.n	8008c1e <_scanf_float+0x36e>
 8008c82:	1d1a      	adds	r2, r3, #4
 8008c84:	0749      	lsls	r1, r1, #29
 8008c86:	d4d7      	bmi.n	8008c38 <_scanf_float+0x388>
 8008c88:	9906      	ldr	r1, [sp, #24]
 8008c8a:	0020      	movs	r0, r4
 8008c8c:	600a      	str	r2, [r1, #0]
 8008c8e:	681f      	ldr	r7, [r3, #0]
 8008c90:	0022      	movs	r2, r4
 8008c92:	002b      	movs	r3, r5
 8008c94:	0029      	movs	r1, r5
 8008c96:	f7f9 fda9 	bl	80027ec <__aeabi_dcmpun>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d004      	beq.n	8008ca8 <_scanf_float+0x3f8>
 8008c9e:	4807      	ldr	r0, [pc, #28]	; (8008cbc <_scanf_float+0x40c>)
 8008ca0:	f000 f80e 	bl	8008cc0 <nanf>
 8008ca4:	6038      	str	r0, [r7, #0]
 8008ca6:	e7cc      	b.n	8008c42 <_scanf_float+0x392>
 8008ca8:	0020      	movs	r0, r4
 8008caa:	0029      	movs	r1, r5
 8008cac:	f7f9 fe90 	bl	80029d0 <__aeabi_d2f>
 8008cb0:	e7f8      	b.n	8008ca4 <_scanf_float+0x3f4>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	e640      	b.n	8008938 <_scanf_float+0x88>
 8008cb6:	46c0      	nop			; (mov r8, r8)
 8008cb8:	0800cc98 	.word	0x0800cc98
 8008cbc:	0800d0a0 	.word	0x0800d0a0

08008cc0 <nanf>:
 8008cc0:	4800      	ldr	r0, [pc, #0]	; (8008cc4 <nanf+0x4>)
 8008cc2:	4770      	bx	lr
 8008cc4:	7fc00000 	.word	0x7fc00000

08008cc8 <siprintf>:
 8008cc8:	b40e      	push	{r1, r2, r3}
 8008cca:	b500      	push	{lr}
 8008ccc:	490b      	ldr	r1, [pc, #44]	; (8008cfc <siprintf+0x34>)
 8008cce:	b09c      	sub	sp, #112	; 0x70
 8008cd0:	ab1d      	add	r3, sp, #116	; 0x74
 8008cd2:	9002      	str	r0, [sp, #8]
 8008cd4:	9006      	str	r0, [sp, #24]
 8008cd6:	9107      	str	r1, [sp, #28]
 8008cd8:	9104      	str	r1, [sp, #16]
 8008cda:	4809      	ldr	r0, [pc, #36]	; (8008d00 <siprintf+0x38>)
 8008cdc:	4909      	ldr	r1, [pc, #36]	; (8008d04 <siprintf+0x3c>)
 8008cde:	cb04      	ldmia	r3!, {r2}
 8008ce0:	9105      	str	r1, [sp, #20]
 8008ce2:	6800      	ldr	r0, [r0, #0]
 8008ce4:	a902      	add	r1, sp, #8
 8008ce6:	9301      	str	r3, [sp, #4]
 8008ce8:	f002 ff5c 	bl	800bba4 <_svfiprintf_r>
 8008cec:	2300      	movs	r3, #0
 8008cee:	9a02      	ldr	r2, [sp, #8]
 8008cf0:	7013      	strb	r3, [r2, #0]
 8008cf2:	b01c      	add	sp, #112	; 0x70
 8008cf4:	bc08      	pop	{r3}
 8008cf6:	b003      	add	sp, #12
 8008cf8:	4718      	bx	r3
 8008cfa:	46c0      	nop			; (mov r8, r8)
 8008cfc:	7fffffff 	.word	0x7fffffff
 8008d00:	20000030 	.word	0x20000030
 8008d04:	ffff0208 	.word	0xffff0208

08008d08 <sulp>:
 8008d08:	b570      	push	{r4, r5, r6, lr}
 8008d0a:	0016      	movs	r6, r2
 8008d0c:	000d      	movs	r5, r1
 8008d0e:	f002 fc93 	bl	800b638 <__ulp>
 8008d12:	2e00      	cmp	r6, #0
 8008d14:	d00d      	beq.n	8008d32 <sulp+0x2a>
 8008d16:	236b      	movs	r3, #107	; 0x6b
 8008d18:	006a      	lsls	r2, r5, #1
 8008d1a:	0d52      	lsrs	r2, r2, #21
 8008d1c:	1a9b      	subs	r3, r3, r2
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	dd07      	ble.n	8008d32 <sulp+0x2a>
 8008d22:	2400      	movs	r4, #0
 8008d24:	4a03      	ldr	r2, [pc, #12]	; (8008d34 <sulp+0x2c>)
 8008d26:	051b      	lsls	r3, r3, #20
 8008d28:	189d      	adds	r5, r3, r2
 8008d2a:	002b      	movs	r3, r5
 8008d2c:	0022      	movs	r2, r4
 8008d2e:	f7f8 ff5f 	bl	8001bf0 <__aeabi_dmul>
 8008d32:	bd70      	pop	{r4, r5, r6, pc}
 8008d34:	3ff00000 	.word	0x3ff00000

08008d38 <_strtod_l>:
 8008d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d3a:	001d      	movs	r5, r3
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	b0a5      	sub	sp, #148	; 0x94
 8008d40:	9320      	str	r3, [sp, #128]	; 0x80
 8008d42:	4bac      	ldr	r3, [pc, #688]	; (8008ff4 <_strtod_l+0x2bc>)
 8008d44:	9005      	str	r0, [sp, #20]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	9108      	str	r1, [sp, #32]
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	9307      	str	r3, [sp, #28]
 8008d4e:	921b      	str	r2, [sp, #108]	; 0x6c
 8008d50:	f7f7 f9da 	bl	8000108 <strlen>
 8008d54:	2600      	movs	r6, #0
 8008d56:	0004      	movs	r4, r0
 8008d58:	2700      	movs	r7, #0
 8008d5a:	9b08      	ldr	r3, [sp, #32]
 8008d5c:	931f      	str	r3, [sp, #124]	; 0x7c
 8008d5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008d60:	7813      	ldrb	r3, [r2, #0]
 8008d62:	2b2b      	cmp	r3, #43	; 0x2b
 8008d64:	d058      	beq.n	8008e18 <_strtod_l+0xe0>
 8008d66:	d844      	bhi.n	8008df2 <_strtod_l+0xba>
 8008d68:	2b0d      	cmp	r3, #13
 8008d6a:	d83d      	bhi.n	8008de8 <_strtod_l+0xb0>
 8008d6c:	2b08      	cmp	r3, #8
 8008d6e:	d83d      	bhi.n	8008dec <_strtod_l+0xb4>
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d047      	beq.n	8008e04 <_strtod_l+0xcc>
 8008d74:	2300      	movs	r3, #0
 8008d76:	930e      	str	r3, [sp, #56]	; 0x38
 8008d78:	2200      	movs	r2, #0
 8008d7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d7c:	920a      	str	r2, [sp, #40]	; 0x28
 8008d7e:	9306      	str	r3, [sp, #24]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	2b30      	cmp	r3, #48	; 0x30
 8008d84:	d000      	beq.n	8008d88 <_strtod_l+0x50>
 8008d86:	e07f      	b.n	8008e88 <_strtod_l+0x150>
 8008d88:	9b06      	ldr	r3, [sp, #24]
 8008d8a:	3220      	adds	r2, #32
 8008d8c:	785b      	ldrb	r3, [r3, #1]
 8008d8e:	4393      	bics	r3, r2
 8008d90:	2b58      	cmp	r3, #88	; 0x58
 8008d92:	d000      	beq.n	8008d96 <_strtod_l+0x5e>
 8008d94:	e06e      	b.n	8008e74 <_strtod_l+0x13c>
 8008d96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d98:	9502      	str	r5, [sp, #8]
 8008d9a:	9301      	str	r3, [sp, #4]
 8008d9c:	ab20      	add	r3, sp, #128	; 0x80
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	4a95      	ldr	r2, [pc, #596]	; (8008ff8 <_strtod_l+0x2c0>)
 8008da2:	ab21      	add	r3, sp, #132	; 0x84
 8008da4:	9805      	ldr	r0, [sp, #20]
 8008da6:	a91f      	add	r1, sp, #124	; 0x7c
 8008da8:	f001 fd84 	bl	800a8b4 <__gethex>
 8008dac:	2307      	movs	r3, #7
 8008dae:	0005      	movs	r5, r0
 8008db0:	0004      	movs	r4, r0
 8008db2:	401d      	ands	r5, r3
 8008db4:	4218      	tst	r0, r3
 8008db6:	d006      	beq.n	8008dc6 <_strtod_l+0x8e>
 8008db8:	2d06      	cmp	r5, #6
 8008dba:	d12f      	bne.n	8008e1c <_strtod_l+0xe4>
 8008dbc:	9b06      	ldr	r3, [sp, #24]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	931f      	str	r3, [sp, #124]	; 0x7c
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	930e      	str	r3, [sp, #56]	; 0x38
 8008dc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <_strtod_l+0x9a>
 8008dcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008dd0:	601a      	str	r2, [r3, #0]
 8008dd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d01c      	beq.n	8008e12 <_strtod_l+0xda>
 8008dd8:	2380      	movs	r3, #128	; 0x80
 8008dda:	0032      	movs	r2, r6
 8008ddc:	061b      	lsls	r3, r3, #24
 8008dde:	18fb      	adds	r3, r7, r3
 8008de0:	0010      	movs	r0, r2
 8008de2:	0019      	movs	r1, r3
 8008de4:	b025      	add	sp, #148	; 0x94
 8008de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008de8:	2b20      	cmp	r3, #32
 8008dea:	d1c3      	bne.n	8008d74 <_strtod_l+0x3c>
 8008dec:	3201      	adds	r2, #1
 8008dee:	921f      	str	r2, [sp, #124]	; 0x7c
 8008df0:	e7b5      	b.n	8008d5e <_strtod_l+0x26>
 8008df2:	2b2d      	cmp	r3, #45	; 0x2d
 8008df4:	d1be      	bne.n	8008d74 <_strtod_l+0x3c>
 8008df6:	3b2c      	subs	r3, #44	; 0x2c
 8008df8:	930e      	str	r3, [sp, #56]	; 0x38
 8008dfa:	1c53      	adds	r3, r2, #1
 8008dfc:	931f      	str	r3, [sp, #124]	; 0x7c
 8008dfe:	7853      	ldrb	r3, [r2, #1]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1b9      	bne.n	8008d78 <_strtod_l+0x40>
 8008e04:	9b08      	ldr	r3, [sp, #32]
 8008e06:	931f      	str	r3, [sp, #124]	; 0x7c
 8008e08:	2300      	movs	r3, #0
 8008e0a:	930e      	str	r3, [sp, #56]	; 0x38
 8008e0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1dc      	bne.n	8008dcc <_strtod_l+0x94>
 8008e12:	0032      	movs	r2, r6
 8008e14:	003b      	movs	r3, r7
 8008e16:	e7e3      	b.n	8008de0 <_strtod_l+0xa8>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	e7ed      	b.n	8008df8 <_strtod_l+0xc0>
 8008e1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008e1e:	2a00      	cmp	r2, #0
 8008e20:	d007      	beq.n	8008e32 <_strtod_l+0xfa>
 8008e22:	2135      	movs	r1, #53	; 0x35
 8008e24:	a822      	add	r0, sp, #136	; 0x88
 8008e26:	f002 fd08 	bl	800b83a <__copybits>
 8008e2a:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008e2c:	9805      	ldr	r0, [sp, #20]
 8008e2e:	f002 f8c3 	bl	800afb8 <_Bfree>
 8008e32:	1e68      	subs	r0, r5, #1
 8008e34:	2804      	cmp	r0, #4
 8008e36:	d806      	bhi.n	8008e46 <_strtod_l+0x10e>
 8008e38:	f7f7 f96e 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008e3c:	1816030b 	.word	0x1816030b
 8008e40:	0b          	.byte	0x0b
 8008e41:	00          	.byte	0x00
 8008e42:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8008e44:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8008e46:	0723      	lsls	r3, r4, #28
 8008e48:	d5bd      	bpl.n	8008dc6 <_strtod_l+0x8e>
 8008e4a:	2380      	movs	r3, #128	; 0x80
 8008e4c:	061b      	lsls	r3, r3, #24
 8008e4e:	431f      	orrs	r7, r3
 8008e50:	e7b9      	b.n	8008dc6 <_strtod_l+0x8e>
 8008e52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e54:	4a69      	ldr	r2, [pc, #420]	; (8008ffc <_strtod_l+0x2c4>)
 8008e56:	496a      	ldr	r1, [pc, #424]	; (8009000 <_strtod_l+0x2c8>)
 8008e58:	401a      	ands	r2, r3
 8008e5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e5c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8008e5e:	185b      	adds	r3, r3, r1
 8008e60:	051b      	lsls	r3, r3, #20
 8008e62:	431a      	orrs	r2, r3
 8008e64:	0017      	movs	r7, r2
 8008e66:	e7ee      	b.n	8008e46 <_strtod_l+0x10e>
 8008e68:	4f66      	ldr	r7, [pc, #408]	; (8009004 <_strtod_l+0x2cc>)
 8008e6a:	e7ec      	b.n	8008e46 <_strtod_l+0x10e>
 8008e6c:	2601      	movs	r6, #1
 8008e6e:	4f66      	ldr	r7, [pc, #408]	; (8009008 <_strtod_l+0x2d0>)
 8008e70:	4276      	negs	r6, r6
 8008e72:	e7e8      	b.n	8008e46 <_strtod_l+0x10e>
 8008e74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e76:	1c5a      	adds	r2, r3, #1
 8008e78:	921f      	str	r2, [sp, #124]	; 0x7c
 8008e7a:	785b      	ldrb	r3, [r3, #1]
 8008e7c:	2b30      	cmp	r3, #48	; 0x30
 8008e7e:	d0f9      	beq.n	8008e74 <_strtod_l+0x13c>
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d0a0      	beq.n	8008dc6 <_strtod_l+0x8e>
 8008e84:	2301      	movs	r3, #1
 8008e86:	930a      	str	r3, [sp, #40]	; 0x28
 8008e88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e8a:	220a      	movs	r2, #10
 8008e8c:	9310      	str	r3, [sp, #64]	; 0x40
 8008e8e:	2300      	movs	r3, #0
 8008e90:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e92:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e94:	9309      	str	r3, [sp, #36]	; 0x24
 8008e96:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008e98:	7805      	ldrb	r5, [r0, #0]
 8008e9a:	002b      	movs	r3, r5
 8008e9c:	3b30      	subs	r3, #48	; 0x30
 8008e9e:	b2d9      	uxtb	r1, r3
 8008ea0:	2909      	cmp	r1, #9
 8008ea2:	d927      	bls.n	8008ef4 <_strtod_l+0x1bc>
 8008ea4:	0022      	movs	r2, r4
 8008ea6:	9907      	ldr	r1, [sp, #28]
 8008ea8:	f002 ff94 	bl	800bdd4 <strncmp>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d033      	beq.n	8008f18 <_strtod_l+0x1e0>
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	002b      	movs	r3, r5
 8008eb4:	4684      	mov	ip, r0
 8008eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eb8:	900c      	str	r0, [sp, #48]	; 0x30
 8008eba:	9206      	str	r2, [sp, #24]
 8008ebc:	2220      	movs	r2, #32
 8008ebe:	0019      	movs	r1, r3
 8008ec0:	4391      	bics	r1, r2
 8008ec2:	000a      	movs	r2, r1
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	9107      	str	r1, [sp, #28]
 8008ec8:	2a45      	cmp	r2, #69	; 0x45
 8008eca:	d000      	beq.n	8008ece <_strtod_l+0x196>
 8008ecc:	e0c5      	b.n	800905a <_strtod_l+0x322>
 8008ece:	9b06      	ldr	r3, [sp, #24]
 8008ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ed2:	4303      	orrs	r3, r0
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	428b      	cmp	r3, r1
 8008ed8:	d094      	beq.n	8008e04 <_strtod_l+0xcc>
 8008eda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008edc:	9308      	str	r3, [sp, #32]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	931f      	str	r3, [sp, #124]	; 0x7c
 8008ee2:	9b08      	ldr	r3, [sp, #32]
 8008ee4:	785b      	ldrb	r3, [r3, #1]
 8008ee6:	2b2b      	cmp	r3, #43	; 0x2b
 8008ee8:	d076      	beq.n	8008fd8 <_strtod_l+0x2a0>
 8008eea:	000c      	movs	r4, r1
 8008eec:	2b2d      	cmp	r3, #45	; 0x2d
 8008eee:	d179      	bne.n	8008fe4 <_strtod_l+0x2ac>
 8008ef0:	2401      	movs	r4, #1
 8008ef2:	e072      	b.n	8008fda <_strtod_l+0x2a2>
 8008ef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ef6:	2908      	cmp	r1, #8
 8008ef8:	dc09      	bgt.n	8008f0e <_strtod_l+0x1d6>
 8008efa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008efc:	4351      	muls	r1, r2
 8008efe:	185b      	adds	r3, r3, r1
 8008f00:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f04:	3001      	adds	r0, #1
 8008f06:	3301      	adds	r3, #1
 8008f08:	9309      	str	r3, [sp, #36]	; 0x24
 8008f0a:	901f      	str	r0, [sp, #124]	; 0x7c
 8008f0c:	e7c3      	b.n	8008e96 <_strtod_l+0x15e>
 8008f0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008f10:	4351      	muls	r1, r2
 8008f12:	185b      	adds	r3, r3, r1
 8008f14:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f16:	e7f4      	b.n	8008f02 <_strtod_l+0x1ca>
 8008f18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f1c:	191c      	adds	r4, r3, r4
 8008f1e:	941f      	str	r4, [sp, #124]	; 0x7c
 8008f20:	7823      	ldrb	r3, [r4, #0]
 8008f22:	2a00      	cmp	r2, #0
 8008f24:	d039      	beq.n	8008f9a <_strtod_l+0x262>
 8008f26:	900c      	str	r0, [sp, #48]	; 0x30
 8008f28:	9206      	str	r2, [sp, #24]
 8008f2a:	001a      	movs	r2, r3
 8008f2c:	3a30      	subs	r2, #48	; 0x30
 8008f2e:	2a09      	cmp	r2, #9
 8008f30:	d912      	bls.n	8008f58 <_strtod_l+0x220>
 8008f32:	2201      	movs	r2, #1
 8008f34:	4694      	mov	ip, r2
 8008f36:	e7c1      	b.n	8008ebc <_strtod_l+0x184>
 8008f38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	1c5a      	adds	r2, r3, #1
 8008f3e:	921f      	str	r2, [sp, #124]	; 0x7c
 8008f40:	785b      	ldrb	r3, [r3, #1]
 8008f42:	2b30      	cmp	r3, #48	; 0x30
 8008f44:	d0f8      	beq.n	8008f38 <_strtod_l+0x200>
 8008f46:	001a      	movs	r2, r3
 8008f48:	3a31      	subs	r2, #49	; 0x31
 8008f4a:	2a08      	cmp	r2, #8
 8008f4c:	d83f      	bhi.n	8008fce <_strtod_l+0x296>
 8008f4e:	900c      	str	r0, [sp, #48]	; 0x30
 8008f50:	2000      	movs	r0, #0
 8008f52:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008f54:	9006      	str	r0, [sp, #24]
 8008f56:	9210      	str	r2, [sp, #64]	; 0x40
 8008f58:	001a      	movs	r2, r3
 8008f5a:	1c41      	adds	r1, r0, #1
 8008f5c:	3a30      	subs	r2, #48	; 0x30
 8008f5e:	2b30      	cmp	r3, #48	; 0x30
 8008f60:	d015      	beq.n	8008f8e <_strtod_l+0x256>
 8008f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f64:	185b      	adds	r3, r3, r1
 8008f66:	210a      	movs	r1, #10
 8008f68:	930c      	str	r3, [sp, #48]	; 0x30
 8008f6a:	9b06      	ldr	r3, [sp, #24]
 8008f6c:	18c4      	adds	r4, r0, r3
 8008f6e:	42a3      	cmp	r3, r4
 8008f70:	d115      	bne.n	8008f9e <_strtod_l+0x266>
 8008f72:	9906      	ldr	r1, [sp, #24]
 8008f74:	9b06      	ldr	r3, [sp, #24]
 8008f76:	3101      	adds	r1, #1
 8008f78:	1809      	adds	r1, r1, r0
 8008f7a:	181b      	adds	r3, r3, r0
 8008f7c:	9106      	str	r1, [sp, #24]
 8008f7e:	2b08      	cmp	r3, #8
 8008f80:	dc1b      	bgt.n	8008fba <_strtod_l+0x282>
 8008f82:	230a      	movs	r3, #10
 8008f84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f86:	434b      	muls	r3, r1
 8008f88:	2100      	movs	r1, #0
 8008f8a:	18d3      	adds	r3, r2, r3
 8008f8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f90:	0008      	movs	r0, r1
 8008f92:	1c5a      	adds	r2, r3, #1
 8008f94:	921f      	str	r2, [sp, #124]	; 0x7c
 8008f96:	785b      	ldrb	r3, [r3, #1]
 8008f98:	e7c7      	b.n	8008f2a <_strtod_l+0x1f2>
 8008f9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f9c:	e7d1      	b.n	8008f42 <_strtod_l+0x20a>
 8008f9e:	2b08      	cmp	r3, #8
 8008fa0:	dc04      	bgt.n	8008fac <_strtod_l+0x274>
 8008fa2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008fa4:	434d      	muls	r5, r1
 8008fa6:	950b      	str	r5, [sp, #44]	; 0x2c
 8008fa8:	3301      	adds	r3, #1
 8008faa:	e7e0      	b.n	8008f6e <_strtod_l+0x236>
 8008fac:	1c5d      	adds	r5, r3, #1
 8008fae:	2d10      	cmp	r5, #16
 8008fb0:	dcfa      	bgt.n	8008fa8 <_strtod_l+0x270>
 8008fb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008fb4:	434d      	muls	r5, r1
 8008fb6:	950f      	str	r5, [sp, #60]	; 0x3c
 8008fb8:	e7f6      	b.n	8008fa8 <_strtod_l+0x270>
 8008fba:	9b06      	ldr	r3, [sp, #24]
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	2b10      	cmp	r3, #16
 8008fc0:	dce5      	bgt.n	8008f8e <_strtod_l+0x256>
 8008fc2:	230a      	movs	r3, #10
 8008fc4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008fc6:	4343      	muls	r3, r0
 8008fc8:	18d3      	adds	r3, r2, r3
 8008fca:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fcc:	e7df      	b.n	8008f8e <_strtod_l+0x256>
 8008fce:	2200      	movs	r2, #0
 8008fd0:	920c      	str	r2, [sp, #48]	; 0x30
 8008fd2:	9206      	str	r2, [sp, #24]
 8008fd4:	3201      	adds	r2, #1
 8008fd6:	e7ad      	b.n	8008f34 <_strtod_l+0x1fc>
 8008fd8:	2400      	movs	r4, #0
 8008fda:	9b08      	ldr	r3, [sp, #32]
 8008fdc:	3302      	adds	r3, #2
 8008fde:	931f      	str	r3, [sp, #124]	; 0x7c
 8008fe0:	9b08      	ldr	r3, [sp, #32]
 8008fe2:	789b      	ldrb	r3, [r3, #2]
 8008fe4:	001a      	movs	r2, r3
 8008fe6:	3a30      	subs	r2, #48	; 0x30
 8008fe8:	2a09      	cmp	r2, #9
 8008fea:	d913      	bls.n	8009014 <_strtod_l+0x2dc>
 8008fec:	9a08      	ldr	r2, [sp, #32]
 8008fee:	921f      	str	r2, [sp, #124]	; 0x7c
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	e031      	b.n	8009058 <_strtod_l+0x320>
 8008ff4:	0800cee8 	.word	0x0800cee8
 8008ff8:	0800cca0 	.word	0x0800cca0
 8008ffc:	ffefffff 	.word	0xffefffff
 8009000:	00000433 	.word	0x00000433
 8009004:	7ff00000 	.word	0x7ff00000
 8009008:	7fffffff 	.word	0x7fffffff
 800900c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800900e:	1c5a      	adds	r2, r3, #1
 8009010:	921f      	str	r2, [sp, #124]	; 0x7c
 8009012:	785b      	ldrb	r3, [r3, #1]
 8009014:	2b30      	cmp	r3, #48	; 0x30
 8009016:	d0f9      	beq.n	800900c <_strtod_l+0x2d4>
 8009018:	2200      	movs	r2, #0
 800901a:	9207      	str	r2, [sp, #28]
 800901c:	001a      	movs	r2, r3
 800901e:	3a31      	subs	r2, #49	; 0x31
 8009020:	2a08      	cmp	r2, #8
 8009022:	d81a      	bhi.n	800905a <_strtod_l+0x322>
 8009024:	3b30      	subs	r3, #48	; 0x30
 8009026:	001a      	movs	r2, r3
 8009028:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800902a:	9307      	str	r3, [sp, #28]
 800902c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800902e:	1c59      	adds	r1, r3, #1
 8009030:	911f      	str	r1, [sp, #124]	; 0x7c
 8009032:	785b      	ldrb	r3, [r3, #1]
 8009034:	001d      	movs	r5, r3
 8009036:	3d30      	subs	r5, #48	; 0x30
 8009038:	2d09      	cmp	r5, #9
 800903a:	d939      	bls.n	80090b0 <_strtod_l+0x378>
 800903c:	9d07      	ldr	r5, [sp, #28]
 800903e:	1b49      	subs	r1, r1, r5
 8009040:	4db0      	ldr	r5, [pc, #704]	; (8009304 <_strtod_l+0x5cc>)
 8009042:	9507      	str	r5, [sp, #28]
 8009044:	2908      	cmp	r1, #8
 8009046:	dc03      	bgt.n	8009050 <_strtod_l+0x318>
 8009048:	9207      	str	r2, [sp, #28]
 800904a:	42aa      	cmp	r2, r5
 800904c:	dd00      	ble.n	8009050 <_strtod_l+0x318>
 800904e:	9507      	str	r5, [sp, #28]
 8009050:	2c00      	cmp	r4, #0
 8009052:	d002      	beq.n	800905a <_strtod_l+0x322>
 8009054:	9a07      	ldr	r2, [sp, #28]
 8009056:	4252      	negs	r2, r2
 8009058:	9207      	str	r2, [sp, #28]
 800905a:	9a06      	ldr	r2, [sp, #24]
 800905c:	2a00      	cmp	r2, #0
 800905e:	d14b      	bne.n	80090f8 <_strtod_l+0x3c0>
 8009060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009062:	4310      	orrs	r0, r2
 8009064:	d000      	beq.n	8009068 <_strtod_l+0x330>
 8009066:	e6ae      	b.n	8008dc6 <_strtod_l+0x8e>
 8009068:	4662      	mov	r2, ip
 800906a:	2a00      	cmp	r2, #0
 800906c:	d000      	beq.n	8009070 <_strtod_l+0x338>
 800906e:	e6c9      	b.n	8008e04 <_strtod_l+0xcc>
 8009070:	2b69      	cmp	r3, #105	; 0x69
 8009072:	d025      	beq.n	80090c0 <_strtod_l+0x388>
 8009074:	dc21      	bgt.n	80090ba <_strtod_l+0x382>
 8009076:	2b49      	cmp	r3, #73	; 0x49
 8009078:	d022      	beq.n	80090c0 <_strtod_l+0x388>
 800907a:	2b4e      	cmp	r3, #78	; 0x4e
 800907c:	d000      	beq.n	8009080 <_strtod_l+0x348>
 800907e:	e6c1      	b.n	8008e04 <_strtod_l+0xcc>
 8009080:	49a1      	ldr	r1, [pc, #644]	; (8009308 <_strtod_l+0x5d0>)
 8009082:	a81f      	add	r0, sp, #124	; 0x7c
 8009084:	f001 fe64 	bl	800ad50 <__match>
 8009088:	2800      	cmp	r0, #0
 800908a:	d100      	bne.n	800908e <_strtod_l+0x356>
 800908c:	e6ba      	b.n	8008e04 <_strtod_l+0xcc>
 800908e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	2b28      	cmp	r3, #40	; 0x28
 8009094:	d12a      	bne.n	80090ec <_strtod_l+0x3b4>
 8009096:	499d      	ldr	r1, [pc, #628]	; (800930c <_strtod_l+0x5d4>)
 8009098:	aa22      	add	r2, sp, #136	; 0x88
 800909a:	a81f      	add	r0, sp, #124	; 0x7c
 800909c:	f001 fe6c 	bl	800ad78 <__hexnan>
 80090a0:	2805      	cmp	r0, #5
 80090a2:	d123      	bne.n	80090ec <_strtod_l+0x3b4>
 80090a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090a6:	4a9a      	ldr	r2, [pc, #616]	; (8009310 <_strtod_l+0x5d8>)
 80090a8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80090aa:	431a      	orrs	r2, r3
 80090ac:	0017      	movs	r7, r2
 80090ae:	e68a      	b.n	8008dc6 <_strtod_l+0x8e>
 80090b0:	210a      	movs	r1, #10
 80090b2:	434a      	muls	r2, r1
 80090b4:	18d2      	adds	r2, r2, r3
 80090b6:	3a30      	subs	r2, #48	; 0x30
 80090b8:	e7b8      	b.n	800902c <_strtod_l+0x2f4>
 80090ba:	2b6e      	cmp	r3, #110	; 0x6e
 80090bc:	d0e0      	beq.n	8009080 <_strtod_l+0x348>
 80090be:	e6a1      	b.n	8008e04 <_strtod_l+0xcc>
 80090c0:	4994      	ldr	r1, [pc, #592]	; (8009314 <_strtod_l+0x5dc>)
 80090c2:	a81f      	add	r0, sp, #124	; 0x7c
 80090c4:	f001 fe44 	bl	800ad50 <__match>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d100      	bne.n	80090ce <_strtod_l+0x396>
 80090cc:	e69a      	b.n	8008e04 <_strtod_l+0xcc>
 80090ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80090d0:	4991      	ldr	r1, [pc, #580]	; (8009318 <_strtod_l+0x5e0>)
 80090d2:	3b01      	subs	r3, #1
 80090d4:	a81f      	add	r0, sp, #124	; 0x7c
 80090d6:	931f      	str	r3, [sp, #124]	; 0x7c
 80090d8:	f001 fe3a 	bl	800ad50 <__match>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d102      	bne.n	80090e6 <_strtod_l+0x3ae>
 80090e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80090e2:	3301      	adds	r3, #1
 80090e4:	931f      	str	r3, [sp, #124]	; 0x7c
 80090e6:	2600      	movs	r6, #0
 80090e8:	4f89      	ldr	r7, [pc, #548]	; (8009310 <_strtod_l+0x5d8>)
 80090ea:	e66c      	b.n	8008dc6 <_strtod_l+0x8e>
 80090ec:	488b      	ldr	r0, [pc, #556]	; (800931c <_strtod_l+0x5e4>)
 80090ee:	f002 fe59 	bl	800bda4 <nan>
 80090f2:	0006      	movs	r6, r0
 80090f4:	000f      	movs	r7, r1
 80090f6:	e666      	b.n	8008dc6 <_strtod_l+0x8e>
 80090f8:	9b07      	ldr	r3, [sp, #28]
 80090fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090fc:	1a9b      	subs	r3, r3, r2
 80090fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <_strtod_l+0x3d2>
 8009106:	9b06      	ldr	r3, [sp, #24]
 8009108:	9309      	str	r3, [sp, #36]	; 0x24
 800910a:	9c06      	ldr	r4, [sp, #24]
 800910c:	2c10      	cmp	r4, #16
 800910e:	dd00      	ble.n	8009112 <_strtod_l+0x3da>
 8009110:	2410      	movs	r4, #16
 8009112:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009114:	f7f9 fbee 	bl	80028f4 <__aeabi_ui2d>
 8009118:	9b06      	ldr	r3, [sp, #24]
 800911a:	0006      	movs	r6, r0
 800911c:	000f      	movs	r7, r1
 800911e:	2b09      	cmp	r3, #9
 8009120:	dd15      	ble.n	800914e <_strtod_l+0x416>
 8009122:	0022      	movs	r2, r4
 8009124:	4b7e      	ldr	r3, [pc, #504]	; (8009320 <_strtod_l+0x5e8>)
 8009126:	3a09      	subs	r2, #9
 8009128:	00d2      	lsls	r2, r2, #3
 800912a:	189b      	adds	r3, r3, r2
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f7f8 fd5e 	bl	8001bf0 <__aeabi_dmul>
 8009134:	0006      	movs	r6, r0
 8009136:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009138:	000f      	movs	r7, r1
 800913a:	f7f9 fbdb 	bl	80028f4 <__aeabi_ui2d>
 800913e:	0002      	movs	r2, r0
 8009140:	000b      	movs	r3, r1
 8009142:	0030      	movs	r0, r6
 8009144:	0039      	movs	r1, r7
 8009146:	f7f7 fe15 	bl	8000d74 <__aeabi_dadd>
 800914a:	0006      	movs	r6, r0
 800914c:	000f      	movs	r7, r1
 800914e:	9b06      	ldr	r3, [sp, #24]
 8009150:	2b0f      	cmp	r3, #15
 8009152:	dc39      	bgt.n	80091c8 <_strtod_l+0x490>
 8009154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009156:	2b00      	cmp	r3, #0
 8009158:	d100      	bne.n	800915c <_strtod_l+0x424>
 800915a:	e634      	b.n	8008dc6 <_strtod_l+0x8e>
 800915c:	dd24      	ble.n	80091a8 <_strtod_l+0x470>
 800915e:	2b16      	cmp	r3, #22
 8009160:	dc09      	bgt.n	8009176 <_strtod_l+0x43e>
 8009162:	496f      	ldr	r1, [pc, #444]	; (8009320 <_strtod_l+0x5e8>)
 8009164:	00db      	lsls	r3, r3, #3
 8009166:	18c9      	adds	r1, r1, r3
 8009168:	0032      	movs	r2, r6
 800916a:	6808      	ldr	r0, [r1, #0]
 800916c:	6849      	ldr	r1, [r1, #4]
 800916e:	003b      	movs	r3, r7
 8009170:	f7f8 fd3e 	bl	8001bf0 <__aeabi_dmul>
 8009174:	e7bd      	b.n	80090f2 <_strtod_l+0x3ba>
 8009176:	2325      	movs	r3, #37	; 0x25
 8009178:	9a06      	ldr	r2, [sp, #24]
 800917a:	1a9b      	subs	r3, r3, r2
 800917c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800917e:	4293      	cmp	r3, r2
 8009180:	db22      	blt.n	80091c8 <_strtod_l+0x490>
 8009182:	240f      	movs	r4, #15
 8009184:	9b06      	ldr	r3, [sp, #24]
 8009186:	4d66      	ldr	r5, [pc, #408]	; (8009320 <_strtod_l+0x5e8>)
 8009188:	1ae4      	subs	r4, r4, r3
 800918a:	00e1      	lsls	r1, r4, #3
 800918c:	1869      	adds	r1, r5, r1
 800918e:	0032      	movs	r2, r6
 8009190:	6808      	ldr	r0, [r1, #0]
 8009192:	6849      	ldr	r1, [r1, #4]
 8009194:	003b      	movs	r3, r7
 8009196:	f7f8 fd2b 	bl	8001bf0 <__aeabi_dmul>
 800919a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800919c:	1b1c      	subs	r4, r3, r4
 800919e:	00e4      	lsls	r4, r4, #3
 80091a0:	192c      	adds	r4, r5, r4
 80091a2:	6822      	ldr	r2, [r4, #0]
 80091a4:	6863      	ldr	r3, [r4, #4]
 80091a6:	e7e3      	b.n	8009170 <_strtod_l+0x438>
 80091a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091aa:	3316      	adds	r3, #22
 80091ac:	db0c      	blt.n	80091c8 <_strtod_l+0x490>
 80091ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091b0:	9a07      	ldr	r2, [sp, #28]
 80091b2:	0030      	movs	r0, r6
 80091b4:	1a9a      	subs	r2, r3, r2
 80091b6:	4b5a      	ldr	r3, [pc, #360]	; (8009320 <_strtod_l+0x5e8>)
 80091b8:	00d2      	lsls	r2, r2, #3
 80091ba:	189b      	adds	r3, r3, r2
 80091bc:	0039      	movs	r1, r7
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f7f8 f913 	bl	80013ec <__aeabi_ddiv>
 80091c6:	e794      	b.n	80090f2 <_strtod_l+0x3ba>
 80091c8:	9b06      	ldr	r3, [sp, #24]
 80091ca:	1b1c      	subs	r4, r3, r4
 80091cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ce:	18e4      	adds	r4, r4, r3
 80091d0:	2c00      	cmp	r4, #0
 80091d2:	dd72      	ble.n	80092ba <_strtod_l+0x582>
 80091d4:	230f      	movs	r3, #15
 80091d6:	0021      	movs	r1, r4
 80091d8:	4019      	ands	r1, r3
 80091da:	421c      	tst	r4, r3
 80091dc:	d00a      	beq.n	80091f4 <_strtod_l+0x4bc>
 80091de:	00cb      	lsls	r3, r1, #3
 80091e0:	494f      	ldr	r1, [pc, #316]	; (8009320 <_strtod_l+0x5e8>)
 80091e2:	0032      	movs	r2, r6
 80091e4:	18c9      	adds	r1, r1, r3
 80091e6:	6808      	ldr	r0, [r1, #0]
 80091e8:	6849      	ldr	r1, [r1, #4]
 80091ea:	003b      	movs	r3, r7
 80091ec:	f7f8 fd00 	bl	8001bf0 <__aeabi_dmul>
 80091f0:	0006      	movs	r6, r0
 80091f2:	000f      	movs	r7, r1
 80091f4:	230f      	movs	r3, #15
 80091f6:	439c      	bics	r4, r3
 80091f8:	d04a      	beq.n	8009290 <_strtod_l+0x558>
 80091fa:	3326      	adds	r3, #38	; 0x26
 80091fc:	33ff      	adds	r3, #255	; 0xff
 80091fe:	429c      	cmp	r4, r3
 8009200:	dd22      	ble.n	8009248 <_strtod_l+0x510>
 8009202:	2300      	movs	r3, #0
 8009204:	9306      	str	r3, [sp, #24]
 8009206:	9307      	str	r3, [sp, #28]
 8009208:	930b      	str	r3, [sp, #44]	; 0x2c
 800920a:	9309      	str	r3, [sp, #36]	; 0x24
 800920c:	2322      	movs	r3, #34	; 0x22
 800920e:	2600      	movs	r6, #0
 8009210:	9a05      	ldr	r2, [sp, #20]
 8009212:	4f3f      	ldr	r7, [pc, #252]	; (8009310 <_strtod_l+0x5d8>)
 8009214:	6013      	str	r3, [r2, #0]
 8009216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009218:	42b3      	cmp	r3, r6
 800921a:	d100      	bne.n	800921e <_strtod_l+0x4e6>
 800921c:	e5d3      	b.n	8008dc6 <_strtod_l+0x8e>
 800921e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009220:	9805      	ldr	r0, [sp, #20]
 8009222:	f001 fec9 	bl	800afb8 <_Bfree>
 8009226:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009228:	9805      	ldr	r0, [sp, #20]
 800922a:	f001 fec5 	bl	800afb8 <_Bfree>
 800922e:	9907      	ldr	r1, [sp, #28]
 8009230:	9805      	ldr	r0, [sp, #20]
 8009232:	f001 fec1 	bl	800afb8 <_Bfree>
 8009236:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009238:	9805      	ldr	r0, [sp, #20]
 800923a:	f001 febd 	bl	800afb8 <_Bfree>
 800923e:	9906      	ldr	r1, [sp, #24]
 8009240:	9805      	ldr	r0, [sp, #20]
 8009242:	f001 feb9 	bl	800afb8 <_Bfree>
 8009246:	e5be      	b.n	8008dc6 <_strtod_l+0x8e>
 8009248:	2300      	movs	r3, #0
 800924a:	0030      	movs	r0, r6
 800924c:	0039      	movs	r1, r7
 800924e:	4d35      	ldr	r5, [pc, #212]	; (8009324 <_strtod_l+0x5ec>)
 8009250:	1124      	asrs	r4, r4, #4
 8009252:	9308      	str	r3, [sp, #32]
 8009254:	2c01      	cmp	r4, #1
 8009256:	dc1e      	bgt.n	8009296 <_strtod_l+0x55e>
 8009258:	2b00      	cmp	r3, #0
 800925a:	d001      	beq.n	8009260 <_strtod_l+0x528>
 800925c:	0006      	movs	r6, r0
 800925e:	000f      	movs	r7, r1
 8009260:	4b31      	ldr	r3, [pc, #196]	; (8009328 <_strtod_l+0x5f0>)
 8009262:	0032      	movs	r2, r6
 8009264:	18ff      	adds	r7, r7, r3
 8009266:	9b08      	ldr	r3, [sp, #32]
 8009268:	00dd      	lsls	r5, r3, #3
 800926a:	4b2e      	ldr	r3, [pc, #184]	; (8009324 <_strtod_l+0x5ec>)
 800926c:	195d      	adds	r5, r3, r5
 800926e:	6828      	ldr	r0, [r5, #0]
 8009270:	6869      	ldr	r1, [r5, #4]
 8009272:	003b      	movs	r3, r7
 8009274:	f7f8 fcbc 	bl	8001bf0 <__aeabi_dmul>
 8009278:	4b25      	ldr	r3, [pc, #148]	; (8009310 <_strtod_l+0x5d8>)
 800927a:	4a2c      	ldr	r2, [pc, #176]	; (800932c <_strtod_l+0x5f4>)
 800927c:	0006      	movs	r6, r0
 800927e:	400b      	ands	r3, r1
 8009280:	4293      	cmp	r3, r2
 8009282:	d8be      	bhi.n	8009202 <_strtod_l+0x4ca>
 8009284:	4a2a      	ldr	r2, [pc, #168]	; (8009330 <_strtod_l+0x5f8>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d913      	bls.n	80092b2 <_strtod_l+0x57a>
 800928a:	2601      	movs	r6, #1
 800928c:	4f29      	ldr	r7, [pc, #164]	; (8009334 <_strtod_l+0x5fc>)
 800928e:	4276      	negs	r6, r6
 8009290:	2300      	movs	r3, #0
 8009292:	9308      	str	r3, [sp, #32]
 8009294:	e087      	b.n	80093a6 <_strtod_l+0x66e>
 8009296:	2201      	movs	r2, #1
 8009298:	4214      	tst	r4, r2
 800929a:	d004      	beq.n	80092a6 <_strtod_l+0x56e>
 800929c:	682a      	ldr	r2, [r5, #0]
 800929e:	686b      	ldr	r3, [r5, #4]
 80092a0:	f7f8 fca6 	bl	8001bf0 <__aeabi_dmul>
 80092a4:	2301      	movs	r3, #1
 80092a6:	9a08      	ldr	r2, [sp, #32]
 80092a8:	1064      	asrs	r4, r4, #1
 80092aa:	3201      	adds	r2, #1
 80092ac:	9208      	str	r2, [sp, #32]
 80092ae:	3508      	adds	r5, #8
 80092b0:	e7d0      	b.n	8009254 <_strtod_l+0x51c>
 80092b2:	23d4      	movs	r3, #212	; 0xd4
 80092b4:	049b      	lsls	r3, r3, #18
 80092b6:	18cf      	adds	r7, r1, r3
 80092b8:	e7ea      	b.n	8009290 <_strtod_l+0x558>
 80092ba:	2c00      	cmp	r4, #0
 80092bc:	d0e8      	beq.n	8009290 <_strtod_l+0x558>
 80092be:	4264      	negs	r4, r4
 80092c0:	220f      	movs	r2, #15
 80092c2:	0023      	movs	r3, r4
 80092c4:	4013      	ands	r3, r2
 80092c6:	4214      	tst	r4, r2
 80092c8:	d00a      	beq.n	80092e0 <_strtod_l+0x5a8>
 80092ca:	00da      	lsls	r2, r3, #3
 80092cc:	4b14      	ldr	r3, [pc, #80]	; (8009320 <_strtod_l+0x5e8>)
 80092ce:	0030      	movs	r0, r6
 80092d0:	189b      	adds	r3, r3, r2
 80092d2:	0039      	movs	r1, r7
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f7f8 f888 	bl	80013ec <__aeabi_ddiv>
 80092dc:	0006      	movs	r6, r0
 80092de:	000f      	movs	r7, r1
 80092e0:	1124      	asrs	r4, r4, #4
 80092e2:	d0d5      	beq.n	8009290 <_strtod_l+0x558>
 80092e4:	2c1f      	cmp	r4, #31
 80092e6:	dd27      	ble.n	8009338 <_strtod_l+0x600>
 80092e8:	2300      	movs	r3, #0
 80092ea:	9306      	str	r3, [sp, #24]
 80092ec:	9307      	str	r3, [sp, #28]
 80092ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80092f0:	9309      	str	r3, [sp, #36]	; 0x24
 80092f2:	2322      	movs	r3, #34	; 0x22
 80092f4:	9a05      	ldr	r2, [sp, #20]
 80092f6:	2600      	movs	r6, #0
 80092f8:	6013      	str	r3, [r2, #0]
 80092fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092fc:	2700      	movs	r7, #0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d18d      	bne.n	800921e <_strtod_l+0x4e6>
 8009302:	e560      	b.n	8008dc6 <_strtod_l+0x8e>
 8009304:	00004e1f 	.word	0x00004e1f
 8009308:	0800cc71 	.word	0x0800cc71
 800930c:	0800ccb4 	.word	0x0800ccb4
 8009310:	7ff00000 	.word	0x7ff00000
 8009314:	0800cc69 	.word	0x0800cc69
 8009318:	0800cdf4 	.word	0x0800cdf4
 800931c:	0800d0a0 	.word	0x0800d0a0
 8009320:	0800cf80 	.word	0x0800cf80
 8009324:	0800cf58 	.word	0x0800cf58
 8009328:	fcb00000 	.word	0xfcb00000
 800932c:	7ca00000 	.word	0x7ca00000
 8009330:	7c900000 	.word	0x7c900000
 8009334:	7fefffff 	.word	0x7fefffff
 8009338:	2310      	movs	r3, #16
 800933a:	0022      	movs	r2, r4
 800933c:	401a      	ands	r2, r3
 800933e:	9208      	str	r2, [sp, #32]
 8009340:	421c      	tst	r4, r3
 8009342:	d001      	beq.n	8009348 <_strtod_l+0x610>
 8009344:	335a      	adds	r3, #90	; 0x5a
 8009346:	9308      	str	r3, [sp, #32]
 8009348:	0030      	movs	r0, r6
 800934a:	0039      	movs	r1, r7
 800934c:	2300      	movs	r3, #0
 800934e:	4dc5      	ldr	r5, [pc, #788]	; (8009664 <_strtod_l+0x92c>)
 8009350:	2201      	movs	r2, #1
 8009352:	4214      	tst	r4, r2
 8009354:	d004      	beq.n	8009360 <_strtod_l+0x628>
 8009356:	682a      	ldr	r2, [r5, #0]
 8009358:	686b      	ldr	r3, [r5, #4]
 800935a:	f7f8 fc49 	bl	8001bf0 <__aeabi_dmul>
 800935e:	2301      	movs	r3, #1
 8009360:	1064      	asrs	r4, r4, #1
 8009362:	3508      	adds	r5, #8
 8009364:	2c00      	cmp	r4, #0
 8009366:	d1f3      	bne.n	8009350 <_strtod_l+0x618>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d001      	beq.n	8009370 <_strtod_l+0x638>
 800936c:	0006      	movs	r6, r0
 800936e:	000f      	movs	r7, r1
 8009370:	9b08      	ldr	r3, [sp, #32]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00f      	beq.n	8009396 <_strtod_l+0x65e>
 8009376:	236b      	movs	r3, #107	; 0x6b
 8009378:	007a      	lsls	r2, r7, #1
 800937a:	0d52      	lsrs	r2, r2, #21
 800937c:	0039      	movs	r1, r7
 800937e:	1a9b      	subs	r3, r3, r2
 8009380:	2b00      	cmp	r3, #0
 8009382:	dd08      	ble.n	8009396 <_strtod_l+0x65e>
 8009384:	2b1f      	cmp	r3, #31
 8009386:	dc00      	bgt.n	800938a <_strtod_l+0x652>
 8009388:	e124      	b.n	80095d4 <_strtod_l+0x89c>
 800938a:	2600      	movs	r6, #0
 800938c:	2b34      	cmp	r3, #52	; 0x34
 800938e:	dc00      	bgt.n	8009392 <_strtod_l+0x65a>
 8009390:	e119      	b.n	80095c6 <_strtod_l+0x88e>
 8009392:	27dc      	movs	r7, #220	; 0xdc
 8009394:	04bf      	lsls	r7, r7, #18
 8009396:	2200      	movs	r2, #0
 8009398:	2300      	movs	r3, #0
 800939a:	0030      	movs	r0, r6
 800939c:	0039      	movs	r1, r7
 800939e:	f7f7 f855 	bl	800044c <__aeabi_dcmpeq>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d1a0      	bne.n	80092e8 <_strtod_l+0x5b0>
 80093a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	9910      	ldr	r1, [sp, #64]	; 0x40
 80093ae:	9b06      	ldr	r3, [sp, #24]
 80093b0:	9805      	ldr	r0, [sp, #20]
 80093b2:	f001 fe69 	bl	800b088 <__s2b>
 80093b6:	900b      	str	r0, [sp, #44]	; 0x2c
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d100      	bne.n	80093be <_strtod_l+0x686>
 80093bc:	e721      	b.n	8009202 <_strtod_l+0x4ca>
 80093be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c0:	9907      	ldr	r1, [sp, #28]
 80093c2:	17da      	asrs	r2, r3, #31
 80093c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093c6:	1a5b      	subs	r3, r3, r1
 80093c8:	401a      	ands	r2, r3
 80093ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093cc:	9215      	str	r2, [sp, #84]	; 0x54
 80093ce:	43db      	mvns	r3, r3
 80093d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093d2:	17db      	asrs	r3, r3, #31
 80093d4:	401a      	ands	r2, r3
 80093d6:	2300      	movs	r3, #0
 80093d8:	921a      	str	r2, [sp, #104]	; 0x68
 80093da:	9306      	str	r3, [sp, #24]
 80093dc:	9307      	str	r3, [sp, #28]
 80093de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093e0:	9805      	ldr	r0, [sp, #20]
 80093e2:	6859      	ldr	r1, [r3, #4]
 80093e4:	f001 fda4 	bl	800af30 <_Balloc>
 80093e8:	9009      	str	r0, [sp, #36]	; 0x24
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d100      	bne.n	80093f0 <_strtod_l+0x6b8>
 80093ee:	e70d      	b.n	800920c <_strtod_l+0x4d4>
 80093f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	310c      	adds	r1, #12
 80093f8:	1c9a      	adds	r2, r3, #2
 80093fa:	0092      	lsls	r2, r2, #2
 80093fc:	300c      	adds	r0, #12
 80093fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009400:	f001 fd8d 	bl	800af1e <memcpy>
 8009404:	ab22      	add	r3, sp, #136	; 0x88
 8009406:	9301      	str	r3, [sp, #4]
 8009408:	ab21      	add	r3, sp, #132	; 0x84
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	0032      	movs	r2, r6
 800940e:	003b      	movs	r3, r7
 8009410:	9805      	ldr	r0, [sp, #20]
 8009412:	9612      	str	r6, [sp, #72]	; 0x48
 8009414:	9713      	str	r7, [sp, #76]	; 0x4c
 8009416:	f002 f983 	bl	800b720 <__d2b>
 800941a:	9020      	str	r0, [sp, #128]	; 0x80
 800941c:	2800      	cmp	r0, #0
 800941e:	d100      	bne.n	8009422 <_strtod_l+0x6ea>
 8009420:	e6f4      	b.n	800920c <_strtod_l+0x4d4>
 8009422:	2101      	movs	r1, #1
 8009424:	9805      	ldr	r0, [sp, #20]
 8009426:	f001 fec3 	bl	800b1b0 <__i2b>
 800942a:	9007      	str	r0, [sp, #28]
 800942c:	2800      	cmp	r0, #0
 800942e:	d100      	bne.n	8009432 <_strtod_l+0x6fa>
 8009430:	e6ec      	b.n	800920c <_strtod_l+0x4d4>
 8009432:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009434:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009436:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009438:	1ad4      	subs	r4, r2, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	db01      	blt.n	8009442 <_strtod_l+0x70a>
 800943e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8009440:	195d      	adds	r5, r3, r5
 8009442:	9908      	ldr	r1, [sp, #32]
 8009444:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009446:	1a5b      	subs	r3, r3, r1
 8009448:	2136      	movs	r1, #54	; 0x36
 800944a:	189b      	adds	r3, r3, r2
 800944c:	1a8a      	subs	r2, r1, r2
 800944e:	4986      	ldr	r1, [pc, #536]	; (8009668 <_strtod_l+0x930>)
 8009450:	2001      	movs	r0, #1
 8009452:	468c      	mov	ip, r1
 8009454:	2100      	movs	r1, #0
 8009456:	3b01      	subs	r3, #1
 8009458:	9110      	str	r1, [sp, #64]	; 0x40
 800945a:	9014      	str	r0, [sp, #80]	; 0x50
 800945c:	4563      	cmp	r3, ip
 800945e:	da07      	bge.n	8009470 <_strtod_l+0x738>
 8009460:	4661      	mov	r1, ip
 8009462:	1ac9      	subs	r1, r1, r3
 8009464:	1a52      	subs	r2, r2, r1
 8009466:	291f      	cmp	r1, #31
 8009468:	dd00      	ble.n	800946c <_strtod_l+0x734>
 800946a:	e0b8      	b.n	80095de <_strtod_l+0x8a6>
 800946c:	4088      	lsls	r0, r1
 800946e:	9014      	str	r0, [sp, #80]	; 0x50
 8009470:	18ab      	adds	r3, r5, r2
 8009472:	930c      	str	r3, [sp, #48]	; 0x30
 8009474:	18a4      	adds	r4, r4, r2
 8009476:	9b08      	ldr	r3, [sp, #32]
 8009478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800947a:	191c      	adds	r4, r3, r4
 800947c:	002b      	movs	r3, r5
 800947e:	4295      	cmp	r5, r2
 8009480:	dd00      	ble.n	8009484 <_strtod_l+0x74c>
 8009482:	0013      	movs	r3, r2
 8009484:	42a3      	cmp	r3, r4
 8009486:	dd00      	ble.n	800948a <_strtod_l+0x752>
 8009488:	0023      	movs	r3, r4
 800948a:	2b00      	cmp	r3, #0
 800948c:	dd04      	ble.n	8009498 <_strtod_l+0x760>
 800948e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009490:	1ae4      	subs	r4, r4, r3
 8009492:	1ad2      	subs	r2, r2, r3
 8009494:	920c      	str	r2, [sp, #48]	; 0x30
 8009496:	1aed      	subs	r5, r5, r3
 8009498:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800949a:	2b00      	cmp	r3, #0
 800949c:	dd17      	ble.n	80094ce <_strtod_l+0x796>
 800949e:	001a      	movs	r2, r3
 80094a0:	9907      	ldr	r1, [sp, #28]
 80094a2:	9805      	ldr	r0, [sp, #20]
 80094a4:	f001 ff4a 	bl	800b33c <__pow5mult>
 80094a8:	9007      	str	r0, [sp, #28]
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d100      	bne.n	80094b0 <_strtod_l+0x778>
 80094ae:	e6ad      	b.n	800920c <_strtod_l+0x4d4>
 80094b0:	0001      	movs	r1, r0
 80094b2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80094b4:	9805      	ldr	r0, [sp, #20]
 80094b6:	f001 fe91 	bl	800b1dc <__multiply>
 80094ba:	900f      	str	r0, [sp, #60]	; 0x3c
 80094bc:	2800      	cmp	r0, #0
 80094be:	d100      	bne.n	80094c2 <_strtod_l+0x78a>
 80094c0:	e6a4      	b.n	800920c <_strtod_l+0x4d4>
 80094c2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80094c4:	9805      	ldr	r0, [sp, #20]
 80094c6:	f001 fd77 	bl	800afb8 <_Bfree>
 80094ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094cc:	9320      	str	r3, [sp, #128]	; 0x80
 80094ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	dd00      	ble.n	80094d6 <_strtod_l+0x79e>
 80094d4:	e089      	b.n	80095ea <_strtod_l+0x8b2>
 80094d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d8:	2b00      	cmp	r3, #0
 80094da:	dd08      	ble.n	80094ee <_strtod_l+0x7b6>
 80094dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80094de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094e0:	9805      	ldr	r0, [sp, #20]
 80094e2:	f001 ff2b 	bl	800b33c <__pow5mult>
 80094e6:	9009      	str	r0, [sp, #36]	; 0x24
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d100      	bne.n	80094ee <_strtod_l+0x7b6>
 80094ec:	e68e      	b.n	800920c <_strtod_l+0x4d4>
 80094ee:	2c00      	cmp	r4, #0
 80094f0:	dd08      	ble.n	8009504 <_strtod_l+0x7cc>
 80094f2:	0022      	movs	r2, r4
 80094f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094f6:	9805      	ldr	r0, [sp, #20]
 80094f8:	f001 ff7c 	bl	800b3f4 <__lshift>
 80094fc:	9009      	str	r0, [sp, #36]	; 0x24
 80094fe:	2800      	cmp	r0, #0
 8009500:	d100      	bne.n	8009504 <_strtod_l+0x7cc>
 8009502:	e683      	b.n	800920c <_strtod_l+0x4d4>
 8009504:	2d00      	cmp	r5, #0
 8009506:	dd08      	ble.n	800951a <_strtod_l+0x7e2>
 8009508:	002a      	movs	r2, r5
 800950a:	9907      	ldr	r1, [sp, #28]
 800950c:	9805      	ldr	r0, [sp, #20]
 800950e:	f001 ff71 	bl	800b3f4 <__lshift>
 8009512:	9007      	str	r0, [sp, #28]
 8009514:	2800      	cmp	r0, #0
 8009516:	d100      	bne.n	800951a <_strtod_l+0x7e2>
 8009518:	e678      	b.n	800920c <_strtod_l+0x4d4>
 800951a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800951c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800951e:	9805      	ldr	r0, [sp, #20]
 8009520:	f001 fff2 	bl	800b508 <__mdiff>
 8009524:	9006      	str	r0, [sp, #24]
 8009526:	2800      	cmp	r0, #0
 8009528:	d100      	bne.n	800952c <_strtod_l+0x7f4>
 800952a:	e66f      	b.n	800920c <_strtod_l+0x4d4>
 800952c:	2200      	movs	r2, #0
 800952e:	68c3      	ldr	r3, [r0, #12]
 8009530:	9907      	ldr	r1, [sp, #28]
 8009532:	60c2      	str	r2, [r0, #12]
 8009534:	930f      	str	r3, [sp, #60]	; 0x3c
 8009536:	f001 ffcb 	bl	800b4d0 <__mcmp>
 800953a:	2800      	cmp	r0, #0
 800953c:	da5f      	bge.n	80095fe <_strtod_l+0x8c6>
 800953e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009540:	4333      	orrs	r3, r6
 8009542:	d000      	beq.n	8009546 <_strtod_l+0x80e>
 8009544:	e08a      	b.n	800965c <_strtod_l+0x924>
 8009546:	033b      	lsls	r3, r7, #12
 8009548:	d000      	beq.n	800954c <_strtod_l+0x814>
 800954a:	e087      	b.n	800965c <_strtod_l+0x924>
 800954c:	22d6      	movs	r2, #214	; 0xd6
 800954e:	4b47      	ldr	r3, [pc, #284]	; (800966c <_strtod_l+0x934>)
 8009550:	04d2      	lsls	r2, r2, #19
 8009552:	403b      	ands	r3, r7
 8009554:	4293      	cmp	r3, r2
 8009556:	d800      	bhi.n	800955a <_strtod_l+0x822>
 8009558:	e080      	b.n	800965c <_strtod_l+0x924>
 800955a:	9b06      	ldr	r3, [sp, #24]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	930a      	str	r3, [sp, #40]	; 0x28
 8009560:	2b00      	cmp	r3, #0
 8009562:	d104      	bne.n	800956e <_strtod_l+0x836>
 8009564:	9b06      	ldr	r3, [sp, #24]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	930a      	str	r3, [sp, #40]	; 0x28
 800956a:	2b01      	cmp	r3, #1
 800956c:	dd76      	ble.n	800965c <_strtod_l+0x924>
 800956e:	9906      	ldr	r1, [sp, #24]
 8009570:	2201      	movs	r2, #1
 8009572:	9805      	ldr	r0, [sp, #20]
 8009574:	f001 ff3e 	bl	800b3f4 <__lshift>
 8009578:	9907      	ldr	r1, [sp, #28]
 800957a:	9006      	str	r0, [sp, #24]
 800957c:	f001 ffa8 	bl	800b4d0 <__mcmp>
 8009580:	2800      	cmp	r0, #0
 8009582:	dd6b      	ble.n	800965c <_strtod_l+0x924>
 8009584:	9908      	ldr	r1, [sp, #32]
 8009586:	003b      	movs	r3, r7
 8009588:	4a38      	ldr	r2, [pc, #224]	; (800966c <_strtod_l+0x934>)
 800958a:	2900      	cmp	r1, #0
 800958c:	d100      	bne.n	8009590 <_strtod_l+0x858>
 800958e:	e092      	b.n	80096b6 <_strtod_l+0x97e>
 8009590:	0011      	movs	r1, r2
 8009592:	20d6      	movs	r0, #214	; 0xd6
 8009594:	4039      	ands	r1, r7
 8009596:	04c0      	lsls	r0, r0, #19
 8009598:	4281      	cmp	r1, r0
 800959a:	dd00      	ble.n	800959e <_strtod_l+0x866>
 800959c:	e08b      	b.n	80096b6 <_strtod_l+0x97e>
 800959e:	23dc      	movs	r3, #220	; 0xdc
 80095a0:	049b      	lsls	r3, r3, #18
 80095a2:	4299      	cmp	r1, r3
 80095a4:	dc00      	bgt.n	80095a8 <_strtod_l+0x870>
 80095a6:	e6a4      	b.n	80092f2 <_strtod_l+0x5ba>
 80095a8:	0030      	movs	r0, r6
 80095aa:	0039      	movs	r1, r7
 80095ac:	2200      	movs	r2, #0
 80095ae:	4b30      	ldr	r3, [pc, #192]	; (8009670 <_strtod_l+0x938>)
 80095b0:	f7f8 fb1e 	bl	8001bf0 <__aeabi_dmul>
 80095b4:	0006      	movs	r6, r0
 80095b6:	000f      	movs	r7, r1
 80095b8:	4308      	orrs	r0, r1
 80095ba:	d000      	beq.n	80095be <_strtod_l+0x886>
 80095bc:	e62f      	b.n	800921e <_strtod_l+0x4e6>
 80095be:	2322      	movs	r3, #34	; 0x22
 80095c0:	9a05      	ldr	r2, [sp, #20]
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	e62b      	b.n	800921e <_strtod_l+0x4e6>
 80095c6:	234b      	movs	r3, #75	; 0x4b
 80095c8:	1a9a      	subs	r2, r3, r2
 80095ca:	3b4c      	subs	r3, #76	; 0x4c
 80095cc:	4093      	lsls	r3, r2
 80095ce:	4019      	ands	r1, r3
 80095d0:	000f      	movs	r7, r1
 80095d2:	e6e0      	b.n	8009396 <_strtod_l+0x65e>
 80095d4:	2201      	movs	r2, #1
 80095d6:	4252      	negs	r2, r2
 80095d8:	409a      	lsls	r2, r3
 80095da:	4016      	ands	r6, r2
 80095dc:	e6db      	b.n	8009396 <_strtod_l+0x65e>
 80095de:	4925      	ldr	r1, [pc, #148]	; (8009674 <_strtod_l+0x93c>)
 80095e0:	1acb      	subs	r3, r1, r3
 80095e2:	0001      	movs	r1, r0
 80095e4:	4099      	lsls	r1, r3
 80095e6:	9110      	str	r1, [sp, #64]	; 0x40
 80095e8:	e741      	b.n	800946e <_strtod_l+0x736>
 80095ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095ec:	9920      	ldr	r1, [sp, #128]	; 0x80
 80095ee:	9805      	ldr	r0, [sp, #20]
 80095f0:	f001 ff00 	bl	800b3f4 <__lshift>
 80095f4:	9020      	str	r0, [sp, #128]	; 0x80
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d000      	beq.n	80095fc <_strtod_l+0x8c4>
 80095fa:	e76c      	b.n	80094d6 <_strtod_l+0x79e>
 80095fc:	e606      	b.n	800920c <_strtod_l+0x4d4>
 80095fe:	970c      	str	r7, [sp, #48]	; 0x30
 8009600:	2800      	cmp	r0, #0
 8009602:	d176      	bne.n	80096f2 <_strtod_l+0x9ba>
 8009604:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009606:	033b      	lsls	r3, r7, #12
 8009608:	0b1b      	lsrs	r3, r3, #12
 800960a:	2a00      	cmp	r2, #0
 800960c:	d038      	beq.n	8009680 <_strtod_l+0x948>
 800960e:	4a1a      	ldr	r2, [pc, #104]	; (8009678 <_strtod_l+0x940>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d138      	bne.n	8009686 <_strtod_l+0x94e>
 8009614:	2201      	movs	r2, #1
 8009616:	9b08      	ldr	r3, [sp, #32]
 8009618:	4252      	negs	r2, r2
 800961a:	0031      	movs	r1, r6
 800961c:	0010      	movs	r0, r2
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00b      	beq.n	800963a <_strtod_l+0x902>
 8009622:	24d4      	movs	r4, #212	; 0xd4
 8009624:	4b11      	ldr	r3, [pc, #68]	; (800966c <_strtod_l+0x934>)
 8009626:	0010      	movs	r0, r2
 8009628:	403b      	ands	r3, r7
 800962a:	04e4      	lsls	r4, r4, #19
 800962c:	42a3      	cmp	r3, r4
 800962e:	d804      	bhi.n	800963a <_strtod_l+0x902>
 8009630:	306c      	adds	r0, #108	; 0x6c
 8009632:	0d1b      	lsrs	r3, r3, #20
 8009634:	1ac3      	subs	r3, r0, r3
 8009636:	409a      	lsls	r2, r3
 8009638:	0010      	movs	r0, r2
 800963a:	4281      	cmp	r1, r0
 800963c:	d123      	bne.n	8009686 <_strtod_l+0x94e>
 800963e:	4b0f      	ldr	r3, [pc, #60]	; (800967c <_strtod_l+0x944>)
 8009640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009642:	429a      	cmp	r2, r3
 8009644:	d102      	bne.n	800964c <_strtod_l+0x914>
 8009646:	1c4b      	adds	r3, r1, #1
 8009648:	d100      	bne.n	800964c <_strtod_l+0x914>
 800964a:	e5df      	b.n	800920c <_strtod_l+0x4d4>
 800964c:	4b07      	ldr	r3, [pc, #28]	; (800966c <_strtod_l+0x934>)
 800964e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009650:	2600      	movs	r6, #0
 8009652:	401a      	ands	r2, r3
 8009654:	0013      	movs	r3, r2
 8009656:	2280      	movs	r2, #128	; 0x80
 8009658:	0352      	lsls	r2, r2, #13
 800965a:	189f      	adds	r7, r3, r2
 800965c:	9b08      	ldr	r3, [sp, #32]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1a2      	bne.n	80095a8 <_strtod_l+0x870>
 8009662:	e5dc      	b.n	800921e <_strtod_l+0x4e6>
 8009664:	0800ccc8 	.word	0x0800ccc8
 8009668:	fffffc02 	.word	0xfffffc02
 800966c:	7ff00000 	.word	0x7ff00000
 8009670:	39500000 	.word	0x39500000
 8009674:	fffffbe2 	.word	0xfffffbe2
 8009678:	000fffff 	.word	0x000fffff
 800967c:	7fefffff 	.word	0x7fefffff
 8009680:	4333      	orrs	r3, r6
 8009682:	d100      	bne.n	8009686 <_strtod_l+0x94e>
 8009684:	e77e      	b.n	8009584 <_strtod_l+0x84c>
 8009686:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009688:	2b00      	cmp	r3, #0
 800968a:	d01d      	beq.n	80096c8 <_strtod_l+0x990>
 800968c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800968e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009690:	4213      	tst	r3, r2
 8009692:	d0e3      	beq.n	800965c <_strtod_l+0x924>
 8009694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009696:	0030      	movs	r0, r6
 8009698:	0039      	movs	r1, r7
 800969a:	9a08      	ldr	r2, [sp, #32]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d017      	beq.n	80096d0 <_strtod_l+0x998>
 80096a0:	f7ff fb32 	bl	8008d08 <sulp>
 80096a4:	0002      	movs	r2, r0
 80096a6:	000b      	movs	r3, r1
 80096a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80096aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80096ac:	f7f7 fb62 	bl	8000d74 <__aeabi_dadd>
 80096b0:	0006      	movs	r6, r0
 80096b2:	000f      	movs	r7, r1
 80096b4:	e7d2      	b.n	800965c <_strtod_l+0x924>
 80096b6:	2601      	movs	r6, #1
 80096b8:	4013      	ands	r3, r2
 80096ba:	4a99      	ldr	r2, [pc, #612]	; (8009920 <_strtod_l+0xbe8>)
 80096bc:	4276      	negs	r6, r6
 80096be:	189b      	adds	r3, r3, r2
 80096c0:	4a98      	ldr	r2, [pc, #608]	; (8009924 <_strtod_l+0xbec>)
 80096c2:	431a      	orrs	r2, r3
 80096c4:	0017      	movs	r7, r2
 80096c6:	e7c9      	b.n	800965c <_strtod_l+0x924>
 80096c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096ca:	4233      	tst	r3, r6
 80096cc:	d0c6      	beq.n	800965c <_strtod_l+0x924>
 80096ce:	e7e1      	b.n	8009694 <_strtod_l+0x95c>
 80096d0:	f7ff fb1a 	bl	8008d08 <sulp>
 80096d4:	0002      	movs	r2, r0
 80096d6:	000b      	movs	r3, r1
 80096d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80096da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80096dc:	f7f8 fcf4 	bl	80020c8 <__aeabi_dsub>
 80096e0:	2200      	movs	r2, #0
 80096e2:	2300      	movs	r3, #0
 80096e4:	0006      	movs	r6, r0
 80096e6:	000f      	movs	r7, r1
 80096e8:	f7f6 feb0 	bl	800044c <__aeabi_dcmpeq>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d0b5      	beq.n	800965c <_strtod_l+0x924>
 80096f0:	e5ff      	b.n	80092f2 <_strtod_l+0x5ba>
 80096f2:	9907      	ldr	r1, [sp, #28]
 80096f4:	9806      	ldr	r0, [sp, #24]
 80096f6:	f002 f877 	bl	800b7e8 <__ratio>
 80096fa:	2380      	movs	r3, #128	; 0x80
 80096fc:	2200      	movs	r2, #0
 80096fe:	05db      	lsls	r3, r3, #23
 8009700:	0004      	movs	r4, r0
 8009702:	000d      	movs	r5, r1
 8009704:	f7f6 feb2 	bl	800046c <__aeabi_dcmple>
 8009708:	2800      	cmp	r0, #0
 800970a:	d075      	beq.n	80097f8 <_strtod_l+0xac0>
 800970c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800970e:	2b00      	cmp	r3, #0
 8009710:	d047      	beq.n	80097a2 <_strtod_l+0xa6a>
 8009712:	2300      	movs	r3, #0
 8009714:	4c84      	ldr	r4, [pc, #528]	; (8009928 <_strtod_l+0xbf0>)
 8009716:	2500      	movs	r5, #0
 8009718:	9310      	str	r3, [sp, #64]	; 0x40
 800971a:	9411      	str	r4, [sp, #68]	; 0x44
 800971c:	4c82      	ldr	r4, [pc, #520]	; (8009928 <_strtod_l+0xbf0>)
 800971e:	4a83      	ldr	r2, [pc, #524]	; (800992c <_strtod_l+0xbf4>)
 8009720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009722:	4013      	ands	r3, r2
 8009724:	9314      	str	r3, [sp, #80]	; 0x50
 8009726:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009728:	4b81      	ldr	r3, [pc, #516]	; (8009930 <_strtod_l+0xbf8>)
 800972a:	429a      	cmp	r2, r3
 800972c:	d000      	beq.n	8009730 <_strtod_l+0x9f8>
 800972e:	e0ac      	b.n	800988a <_strtod_l+0xb52>
 8009730:	4a80      	ldr	r2, [pc, #512]	; (8009934 <_strtod_l+0xbfc>)
 8009732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009734:	4694      	mov	ip, r2
 8009736:	4463      	add	r3, ip
 8009738:	001f      	movs	r7, r3
 800973a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800973c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800973e:	0030      	movs	r0, r6
 8009740:	0039      	movs	r1, r7
 8009742:	920c      	str	r2, [sp, #48]	; 0x30
 8009744:	930d      	str	r3, [sp, #52]	; 0x34
 8009746:	f001 ff77 	bl	800b638 <__ulp>
 800974a:	0002      	movs	r2, r0
 800974c:	000b      	movs	r3, r1
 800974e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009750:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009752:	f7f8 fa4d 	bl	8001bf0 <__aeabi_dmul>
 8009756:	0032      	movs	r2, r6
 8009758:	003b      	movs	r3, r7
 800975a:	f7f7 fb0b 	bl	8000d74 <__aeabi_dadd>
 800975e:	4a73      	ldr	r2, [pc, #460]	; (800992c <_strtod_l+0xbf4>)
 8009760:	4b75      	ldr	r3, [pc, #468]	; (8009938 <_strtod_l+0xc00>)
 8009762:	0006      	movs	r6, r0
 8009764:	400a      	ands	r2, r1
 8009766:	429a      	cmp	r2, r3
 8009768:	d95e      	bls.n	8009828 <_strtod_l+0xaf0>
 800976a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800976c:	4b73      	ldr	r3, [pc, #460]	; (800993c <_strtod_l+0xc04>)
 800976e:	429a      	cmp	r2, r3
 8009770:	d103      	bne.n	800977a <_strtod_l+0xa42>
 8009772:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009774:	3301      	adds	r3, #1
 8009776:	d100      	bne.n	800977a <_strtod_l+0xa42>
 8009778:	e548      	b.n	800920c <_strtod_l+0x4d4>
 800977a:	2601      	movs	r6, #1
 800977c:	4f6f      	ldr	r7, [pc, #444]	; (800993c <_strtod_l+0xc04>)
 800977e:	4276      	negs	r6, r6
 8009780:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009782:	9805      	ldr	r0, [sp, #20]
 8009784:	f001 fc18 	bl	800afb8 <_Bfree>
 8009788:	9909      	ldr	r1, [sp, #36]	; 0x24
 800978a:	9805      	ldr	r0, [sp, #20]
 800978c:	f001 fc14 	bl	800afb8 <_Bfree>
 8009790:	9907      	ldr	r1, [sp, #28]
 8009792:	9805      	ldr	r0, [sp, #20]
 8009794:	f001 fc10 	bl	800afb8 <_Bfree>
 8009798:	9906      	ldr	r1, [sp, #24]
 800979a:	9805      	ldr	r0, [sp, #20]
 800979c:	f001 fc0c 	bl	800afb8 <_Bfree>
 80097a0:	e61d      	b.n	80093de <_strtod_l+0x6a6>
 80097a2:	2e00      	cmp	r6, #0
 80097a4:	d11c      	bne.n	80097e0 <_strtod_l+0xaa8>
 80097a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097a8:	031b      	lsls	r3, r3, #12
 80097aa:	d11f      	bne.n	80097ec <_strtod_l+0xab4>
 80097ac:	2200      	movs	r2, #0
 80097ae:	0020      	movs	r0, r4
 80097b0:	0029      	movs	r1, r5
 80097b2:	4b5d      	ldr	r3, [pc, #372]	; (8009928 <_strtod_l+0xbf0>)
 80097b4:	f7f6 fe50 	bl	8000458 <__aeabi_dcmplt>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d11a      	bne.n	80097f2 <_strtod_l+0xaba>
 80097bc:	0020      	movs	r0, r4
 80097be:	0029      	movs	r1, r5
 80097c0:	2200      	movs	r2, #0
 80097c2:	4b5f      	ldr	r3, [pc, #380]	; (8009940 <_strtod_l+0xc08>)
 80097c4:	f7f8 fa14 	bl	8001bf0 <__aeabi_dmul>
 80097c8:	0005      	movs	r5, r0
 80097ca:	000c      	movs	r4, r1
 80097cc:	2380      	movs	r3, #128	; 0x80
 80097ce:	061b      	lsls	r3, r3, #24
 80097d0:	18e3      	adds	r3, r4, r3
 80097d2:	951c      	str	r5, [sp, #112]	; 0x70
 80097d4:	931d      	str	r3, [sp, #116]	; 0x74
 80097d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80097d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097da:	9210      	str	r2, [sp, #64]	; 0x40
 80097dc:	9311      	str	r3, [sp, #68]	; 0x44
 80097de:	e79e      	b.n	800971e <_strtod_l+0x9e6>
 80097e0:	2e01      	cmp	r6, #1
 80097e2:	d103      	bne.n	80097ec <_strtod_l+0xab4>
 80097e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d100      	bne.n	80097ec <_strtod_l+0xab4>
 80097ea:	e582      	b.n	80092f2 <_strtod_l+0x5ba>
 80097ec:	2300      	movs	r3, #0
 80097ee:	4c55      	ldr	r4, [pc, #340]	; (8009944 <_strtod_l+0xc0c>)
 80097f0:	e791      	b.n	8009716 <_strtod_l+0x9de>
 80097f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80097f4:	4c52      	ldr	r4, [pc, #328]	; (8009940 <_strtod_l+0xc08>)
 80097f6:	e7e9      	b.n	80097cc <_strtod_l+0xa94>
 80097f8:	2200      	movs	r2, #0
 80097fa:	0020      	movs	r0, r4
 80097fc:	0029      	movs	r1, r5
 80097fe:	4b50      	ldr	r3, [pc, #320]	; (8009940 <_strtod_l+0xc08>)
 8009800:	f7f8 f9f6 	bl	8001bf0 <__aeabi_dmul>
 8009804:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009806:	0005      	movs	r5, r0
 8009808:	000b      	movs	r3, r1
 800980a:	000c      	movs	r4, r1
 800980c:	2a00      	cmp	r2, #0
 800980e:	d107      	bne.n	8009820 <_strtod_l+0xae8>
 8009810:	2280      	movs	r2, #128	; 0x80
 8009812:	0612      	lsls	r2, r2, #24
 8009814:	188b      	adds	r3, r1, r2
 8009816:	9016      	str	r0, [sp, #88]	; 0x58
 8009818:	9317      	str	r3, [sp, #92]	; 0x5c
 800981a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800981c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800981e:	e7dc      	b.n	80097da <_strtod_l+0xaa2>
 8009820:	0002      	movs	r2, r0
 8009822:	9216      	str	r2, [sp, #88]	; 0x58
 8009824:	9317      	str	r3, [sp, #92]	; 0x5c
 8009826:	e7f8      	b.n	800981a <_strtod_l+0xae2>
 8009828:	23d4      	movs	r3, #212	; 0xd4
 800982a:	049b      	lsls	r3, r3, #18
 800982c:	18cf      	adds	r7, r1, r3
 800982e:	9b08      	ldr	r3, [sp, #32]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1a5      	bne.n	8009780 <_strtod_l+0xa48>
 8009834:	4b3d      	ldr	r3, [pc, #244]	; (800992c <_strtod_l+0xbf4>)
 8009836:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009838:	403b      	ands	r3, r7
 800983a:	429a      	cmp	r2, r3
 800983c:	d1a0      	bne.n	8009780 <_strtod_l+0xa48>
 800983e:	0028      	movs	r0, r5
 8009840:	0021      	movs	r1, r4
 8009842:	f7f6 fea1 	bl	8000588 <__aeabi_d2lz>
 8009846:	f7f6 fedb 	bl	8000600 <__aeabi_l2d>
 800984a:	0002      	movs	r2, r0
 800984c:	000b      	movs	r3, r1
 800984e:	0028      	movs	r0, r5
 8009850:	0021      	movs	r1, r4
 8009852:	f7f8 fc39 	bl	80020c8 <__aeabi_dsub>
 8009856:	033b      	lsls	r3, r7, #12
 8009858:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800985a:	0b1b      	lsrs	r3, r3, #12
 800985c:	4333      	orrs	r3, r6
 800985e:	4313      	orrs	r3, r2
 8009860:	0004      	movs	r4, r0
 8009862:	000d      	movs	r5, r1
 8009864:	4a38      	ldr	r2, [pc, #224]	; (8009948 <_strtod_l+0xc10>)
 8009866:	2b00      	cmp	r3, #0
 8009868:	d055      	beq.n	8009916 <_strtod_l+0xbde>
 800986a:	4b38      	ldr	r3, [pc, #224]	; (800994c <_strtod_l+0xc14>)
 800986c:	f7f6 fdf4 	bl	8000458 <__aeabi_dcmplt>
 8009870:	2800      	cmp	r0, #0
 8009872:	d000      	beq.n	8009876 <_strtod_l+0xb3e>
 8009874:	e4d3      	b.n	800921e <_strtod_l+0x4e6>
 8009876:	0020      	movs	r0, r4
 8009878:	0029      	movs	r1, r5
 800987a:	4a35      	ldr	r2, [pc, #212]	; (8009950 <_strtod_l+0xc18>)
 800987c:	4b30      	ldr	r3, [pc, #192]	; (8009940 <_strtod_l+0xc08>)
 800987e:	f7f6 fdff 	bl	8000480 <__aeabi_dcmpgt>
 8009882:	2800      	cmp	r0, #0
 8009884:	d100      	bne.n	8009888 <_strtod_l+0xb50>
 8009886:	e77b      	b.n	8009780 <_strtod_l+0xa48>
 8009888:	e4c9      	b.n	800921e <_strtod_l+0x4e6>
 800988a:	9b08      	ldr	r3, [sp, #32]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d02b      	beq.n	80098e8 <_strtod_l+0xbb0>
 8009890:	23d4      	movs	r3, #212	; 0xd4
 8009892:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009894:	04db      	lsls	r3, r3, #19
 8009896:	429a      	cmp	r2, r3
 8009898:	d826      	bhi.n	80098e8 <_strtod_l+0xbb0>
 800989a:	0028      	movs	r0, r5
 800989c:	0021      	movs	r1, r4
 800989e:	4a2d      	ldr	r2, [pc, #180]	; (8009954 <_strtod_l+0xc1c>)
 80098a0:	4b2d      	ldr	r3, [pc, #180]	; (8009958 <_strtod_l+0xc20>)
 80098a2:	f7f6 fde3 	bl	800046c <__aeabi_dcmple>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d017      	beq.n	80098da <_strtod_l+0xba2>
 80098aa:	0028      	movs	r0, r5
 80098ac:	0021      	movs	r1, r4
 80098ae:	f7f6 fe4d 	bl	800054c <__aeabi_d2uiz>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	d100      	bne.n	80098b8 <_strtod_l+0xb80>
 80098b6:	3001      	adds	r0, #1
 80098b8:	f7f9 f81c 	bl	80028f4 <__aeabi_ui2d>
 80098bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098be:	0005      	movs	r5, r0
 80098c0:	000b      	movs	r3, r1
 80098c2:	000c      	movs	r4, r1
 80098c4:	2a00      	cmp	r2, #0
 80098c6:	d122      	bne.n	800990e <_strtod_l+0xbd6>
 80098c8:	2280      	movs	r2, #128	; 0x80
 80098ca:	0612      	lsls	r2, r2, #24
 80098cc:	188b      	adds	r3, r1, r2
 80098ce:	9018      	str	r0, [sp, #96]	; 0x60
 80098d0:	9319      	str	r3, [sp, #100]	; 0x64
 80098d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80098d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098d6:	9210      	str	r2, [sp, #64]	; 0x40
 80098d8:	9311      	str	r3, [sp, #68]	; 0x44
 80098da:	22d6      	movs	r2, #214	; 0xd6
 80098dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098de:	04d2      	lsls	r2, r2, #19
 80098e0:	189b      	adds	r3, r3, r2
 80098e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80098e4:	1a9b      	subs	r3, r3, r2
 80098e6:	9311      	str	r3, [sp, #68]	; 0x44
 80098e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80098ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80098ec:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80098ee:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80098f0:	f001 fea2 	bl	800b638 <__ulp>
 80098f4:	0002      	movs	r2, r0
 80098f6:	000b      	movs	r3, r1
 80098f8:	0030      	movs	r0, r6
 80098fa:	0039      	movs	r1, r7
 80098fc:	f7f8 f978 	bl	8001bf0 <__aeabi_dmul>
 8009900:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009902:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009904:	f7f7 fa36 	bl	8000d74 <__aeabi_dadd>
 8009908:	0006      	movs	r6, r0
 800990a:	000f      	movs	r7, r1
 800990c:	e78f      	b.n	800982e <_strtod_l+0xaf6>
 800990e:	0002      	movs	r2, r0
 8009910:	9218      	str	r2, [sp, #96]	; 0x60
 8009912:	9319      	str	r3, [sp, #100]	; 0x64
 8009914:	e7dd      	b.n	80098d2 <_strtod_l+0xb9a>
 8009916:	4b11      	ldr	r3, [pc, #68]	; (800995c <_strtod_l+0xc24>)
 8009918:	f7f6 fd9e 	bl	8000458 <__aeabi_dcmplt>
 800991c:	e7b1      	b.n	8009882 <_strtod_l+0xb4a>
 800991e:	46c0      	nop			; (mov r8, r8)
 8009920:	fff00000 	.word	0xfff00000
 8009924:	000fffff 	.word	0x000fffff
 8009928:	3ff00000 	.word	0x3ff00000
 800992c:	7ff00000 	.word	0x7ff00000
 8009930:	7fe00000 	.word	0x7fe00000
 8009934:	fcb00000 	.word	0xfcb00000
 8009938:	7c9fffff 	.word	0x7c9fffff
 800993c:	7fefffff 	.word	0x7fefffff
 8009940:	3fe00000 	.word	0x3fe00000
 8009944:	bff00000 	.word	0xbff00000
 8009948:	94a03595 	.word	0x94a03595
 800994c:	3fdfffff 	.word	0x3fdfffff
 8009950:	35afe535 	.word	0x35afe535
 8009954:	ffc00000 	.word	0xffc00000
 8009958:	41dfffff 	.word	0x41dfffff
 800995c:	3fcfffff 	.word	0x3fcfffff

08009960 <_strtod_r>:
 8009960:	b510      	push	{r4, lr}
 8009962:	4b02      	ldr	r3, [pc, #8]	; (800996c <_strtod_r+0xc>)
 8009964:	f7ff f9e8 	bl	8008d38 <_strtod_l>
 8009968:	bd10      	pop	{r4, pc}
 800996a:	46c0      	nop			; (mov r8, r8)
 800996c:	20000098 	.word	0x20000098

08009970 <_strtol_l.constprop.0>:
 8009970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009972:	b087      	sub	sp, #28
 8009974:	001e      	movs	r6, r3
 8009976:	9005      	str	r0, [sp, #20]
 8009978:	9101      	str	r1, [sp, #4]
 800997a:	9202      	str	r2, [sp, #8]
 800997c:	2b01      	cmp	r3, #1
 800997e:	d045      	beq.n	8009a0c <_strtol_l.constprop.0+0x9c>
 8009980:	000b      	movs	r3, r1
 8009982:	2e24      	cmp	r6, #36	; 0x24
 8009984:	d842      	bhi.n	8009a0c <_strtol_l.constprop.0+0x9c>
 8009986:	4a3f      	ldr	r2, [pc, #252]	; (8009a84 <_strtol_l.constprop.0+0x114>)
 8009988:	2108      	movs	r1, #8
 800998a:	4694      	mov	ip, r2
 800998c:	001a      	movs	r2, r3
 800998e:	4660      	mov	r0, ip
 8009990:	7814      	ldrb	r4, [r2, #0]
 8009992:	3301      	adds	r3, #1
 8009994:	5d00      	ldrb	r0, [r0, r4]
 8009996:	001d      	movs	r5, r3
 8009998:	0007      	movs	r7, r0
 800999a:	400f      	ands	r7, r1
 800999c:	4208      	tst	r0, r1
 800999e:	d1f5      	bne.n	800998c <_strtol_l.constprop.0+0x1c>
 80099a0:	2c2d      	cmp	r4, #45	; 0x2d
 80099a2:	d13a      	bne.n	8009a1a <_strtol_l.constprop.0+0xaa>
 80099a4:	2701      	movs	r7, #1
 80099a6:	781c      	ldrb	r4, [r3, #0]
 80099a8:	1c95      	adds	r5, r2, #2
 80099aa:	2e00      	cmp	r6, #0
 80099ac:	d065      	beq.n	8009a7a <_strtol_l.constprop.0+0x10a>
 80099ae:	2e10      	cmp	r6, #16
 80099b0:	d109      	bne.n	80099c6 <_strtol_l.constprop.0+0x56>
 80099b2:	2c30      	cmp	r4, #48	; 0x30
 80099b4:	d107      	bne.n	80099c6 <_strtol_l.constprop.0+0x56>
 80099b6:	2220      	movs	r2, #32
 80099b8:	782b      	ldrb	r3, [r5, #0]
 80099ba:	4393      	bics	r3, r2
 80099bc:	2b58      	cmp	r3, #88	; 0x58
 80099be:	d157      	bne.n	8009a70 <_strtol_l.constprop.0+0x100>
 80099c0:	2610      	movs	r6, #16
 80099c2:	786c      	ldrb	r4, [r5, #1]
 80099c4:	3502      	adds	r5, #2
 80099c6:	4b30      	ldr	r3, [pc, #192]	; (8009a88 <_strtol_l.constprop.0+0x118>)
 80099c8:	0031      	movs	r1, r6
 80099ca:	18fb      	adds	r3, r7, r3
 80099cc:	0018      	movs	r0, r3
 80099ce:	9303      	str	r3, [sp, #12]
 80099d0:	f7f6 fc3c 	bl	800024c <__aeabi_uidivmod>
 80099d4:	2300      	movs	r3, #0
 80099d6:	2201      	movs	r2, #1
 80099d8:	4684      	mov	ip, r0
 80099da:	0018      	movs	r0, r3
 80099dc:	9104      	str	r1, [sp, #16]
 80099de:	4252      	negs	r2, r2
 80099e0:	0021      	movs	r1, r4
 80099e2:	3930      	subs	r1, #48	; 0x30
 80099e4:	2909      	cmp	r1, #9
 80099e6:	d81d      	bhi.n	8009a24 <_strtol_l.constprop.0+0xb4>
 80099e8:	000c      	movs	r4, r1
 80099ea:	42a6      	cmp	r6, r4
 80099ec:	dd28      	ble.n	8009a40 <_strtol_l.constprop.0+0xd0>
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	db24      	blt.n	8009a3c <_strtol_l.constprop.0+0xcc>
 80099f2:	0013      	movs	r3, r2
 80099f4:	4584      	cmp	ip, r0
 80099f6:	d306      	bcc.n	8009a06 <_strtol_l.constprop.0+0x96>
 80099f8:	d102      	bne.n	8009a00 <_strtol_l.constprop.0+0x90>
 80099fa:	9904      	ldr	r1, [sp, #16]
 80099fc:	42a1      	cmp	r1, r4
 80099fe:	db02      	blt.n	8009a06 <_strtol_l.constprop.0+0x96>
 8009a00:	2301      	movs	r3, #1
 8009a02:	4370      	muls	r0, r6
 8009a04:	1820      	adds	r0, r4, r0
 8009a06:	782c      	ldrb	r4, [r5, #0]
 8009a08:	3501      	adds	r5, #1
 8009a0a:	e7e9      	b.n	80099e0 <_strtol_l.constprop.0+0x70>
 8009a0c:	f7fe fab0 	bl	8007f70 <__errno>
 8009a10:	2316      	movs	r3, #22
 8009a12:	6003      	str	r3, [r0, #0]
 8009a14:	2000      	movs	r0, #0
 8009a16:	b007      	add	sp, #28
 8009a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a1a:	2c2b      	cmp	r4, #43	; 0x2b
 8009a1c:	d1c5      	bne.n	80099aa <_strtol_l.constprop.0+0x3a>
 8009a1e:	781c      	ldrb	r4, [r3, #0]
 8009a20:	1c95      	adds	r5, r2, #2
 8009a22:	e7c2      	b.n	80099aa <_strtol_l.constprop.0+0x3a>
 8009a24:	0021      	movs	r1, r4
 8009a26:	3941      	subs	r1, #65	; 0x41
 8009a28:	2919      	cmp	r1, #25
 8009a2a:	d801      	bhi.n	8009a30 <_strtol_l.constprop.0+0xc0>
 8009a2c:	3c37      	subs	r4, #55	; 0x37
 8009a2e:	e7dc      	b.n	80099ea <_strtol_l.constprop.0+0x7a>
 8009a30:	0021      	movs	r1, r4
 8009a32:	3961      	subs	r1, #97	; 0x61
 8009a34:	2919      	cmp	r1, #25
 8009a36:	d803      	bhi.n	8009a40 <_strtol_l.constprop.0+0xd0>
 8009a38:	3c57      	subs	r4, #87	; 0x57
 8009a3a:	e7d6      	b.n	80099ea <_strtol_l.constprop.0+0x7a>
 8009a3c:	0013      	movs	r3, r2
 8009a3e:	e7e2      	b.n	8009a06 <_strtol_l.constprop.0+0x96>
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	da09      	bge.n	8009a58 <_strtol_l.constprop.0+0xe8>
 8009a44:	2322      	movs	r3, #34	; 0x22
 8009a46:	9a05      	ldr	r2, [sp, #20]
 8009a48:	9803      	ldr	r0, [sp, #12]
 8009a4a:	6013      	str	r3, [r2, #0]
 8009a4c:	9b02      	ldr	r3, [sp, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d0e1      	beq.n	8009a16 <_strtol_l.constprop.0+0xa6>
 8009a52:	1e6b      	subs	r3, r5, #1
 8009a54:	9301      	str	r3, [sp, #4]
 8009a56:	e007      	b.n	8009a68 <_strtol_l.constprop.0+0xf8>
 8009a58:	2f00      	cmp	r7, #0
 8009a5a:	d000      	beq.n	8009a5e <_strtol_l.constprop.0+0xee>
 8009a5c:	4240      	negs	r0, r0
 8009a5e:	9a02      	ldr	r2, [sp, #8]
 8009a60:	2a00      	cmp	r2, #0
 8009a62:	d0d8      	beq.n	8009a16 <_strtol_l.constprop.0+0xa6>
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1f4      	bne.n	8009a52 <_strtol_l.constprop.0+0xe2>
 8009a68:	9b02      	ldr	r3, [sp, #8]
 8009a6a:	9a01      	ldr	r2, [sp, #4]
 8009a6c:	601a      	str	r2, [r3, #0]
 8009a6e:	e7d2      	b.n	8009a16 <_strtol_l.constprop.0+0xa6>
 8009a70:	2430      	movs	r4, #48	; 0x30
 8009a72:	2e00      	cmp	r6, #0
 8009a74:	d1a7      	bne.n	80099c6 <_strtol_l.constprop.0+0x56>
 8009a76:	3608      	adds	r6, #8
 8009a78:	e7a5      	b.n	80099c6 <_strtol_l.constprop.0+0x56>
 8009a7a:	2c30      	cmp	r4, #48	; 0x30
 8009a7c:	d09b      	beq.n	80099b6 <_strtol_l.constprop.0+0x46>
 8009a7e:	260a      	movs	r6, #10
 8009a80:	e7a1      	b.n	80099c6 <_strtol_l.constprop.0+0x56>
 8009a82:	46c0      	nop			; (mov r8, r8)
 8009a84:	0800ccf1 	.word	0x0800ccf1
 8009a88:	7fffffff 	.word	0x7fffffff

08009a8c <_strtol_r>:
 8009a8c:	b510      	push	{r4, lr}
 8009a8e:	f7ff ff6f 	bl	8009970 <_strtol_l.constprop.0>
 8009a92:	bd10      	pop	{r4, pc}

08009a94 <quorem>:
 8009a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a96:	0006      	movs	r6, r0
 8009a98:	690b      	ldr	r3, [r1, #16]
 8009a9a:	6932      	ldr	r2, [r6, #16]
 8009a9c:	b087      	sub	sp, #28
 8009a9e:	2000      	movs	r0, #0
 8009aa0:	9103      	str	r1, [sp, #12]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	db65      	blt.n	8009b72 <quorem+0xde>
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	009c      	lsls	r4, r3, #2
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	000b      	movs	r3, r1
 8009aae:	3314      	adds	r3, #20
 8009ab0:	9305      	str	r3, [sp, #20]
 8009ab2:	191b      	adds	r3, r3, r4
 8009ab4:	9304      	str	r3, [sp, #16]
 8009ab6:	0033      	movs	r3, r6
 8009ab8:	3314      	adds	r3, #20
 8009aba:	9302      	str	r3, [sp, #8]
 8009abc:	191c      	adds	r4, r3, r4
 8009abe:	9b04      	ldr	r3, [sp, #16]
 8009ac0:	6827      	ldr	r7, [r4, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	0038      	movs	r0, r7
 8009ac6:	1c5d      	adds	r5, r3, #1
 8009ac8:	0029      	movs	r1, r5
 8009aca:	9301      	str	r3, [sp, #4]
 8009acc:	f7f6 fb38 	bl	8000140 <__udivsi3>
 8009ad0:	9001      	str	r0, [sp, #4]
 8009ad2:	42af      	cmp	r7, r5
 8009ad4:	d324      	bcc.n	8009b20 <quorem+0x8c>
 8009ad6:	2500      	movs	r5, #0
 8009ad8:	46ac      	mov	ip, r5
 8009ada:	9802      	ldr	r0, [sp, #8]
 8009adc:	9f05      	ldr	r7, [sp, #20]
 8009ade:	cf08      	ldmia	r7!, {r3}
 8009ae0:	9a01      	ldr	r2, [sp, #4]
 8009ae2:	b299      	uxth	r1, r3
 8009ae4:	4351      	muls	r1, r2
 8009ae6:	0c1b      	lsrs	r3, r3, #16
 8009ae8:	4353      	muls	r3, r2
 8009aea:	1949      	adds	r1, r1, r5
 8009aec:	0c0a      	lsrs	r2, r1, #16
 8009aee:	189b      	adds	r3, r3, r2
 8009af0:	6802      	ldr	r2, [r0, #0]
 8009af2:	b289      	uxth	r1, r1
 8009af4:	b292      	uxth	r2, r2
 8009af6:	4462      	add	r2, ip
 8009af8:	1a52      	subs	r2, r2, r1
 8009afa:	6801      	ldr	r1, [r0, #0]
 8009afc:	0c1d      	lsrs	r5, r3, #16
 8009afe:	0c09      	lsrs	r1, r1, #16
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	1acb      	subs	r3, r1, r3
 8009b04:	1411      	asrs	r1, r2, #16
 8009b06:	185b      	adds	r3, r3, r1
 8009b08:	1419      	asrs	r1, r3, #16
 8009b0a:	b292      	uxth	r2, r2
 8009b0c:	041b      	lsls	r3, r3, #16
 8009b0e:	431a      	orrs	r2, r3
 8009b10:	9b04      	ldr	r3, [sp, #16]
 8009b12:	468c      	mov	ip, r1
 8009b14:	c004      	stmia	r0!, {r2}
 8009b16:	42bb      	cmp	r3, r7
 8009b18:	d2e1      	bcs.n	8009ade <quorem+0x4a>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d030      	beq.n	8009b82 <quorem+0xee>
 8009b20:	0030      	movs	r0, r6
 8009b22:	9903      	ldr	r1, [sp, #12]
 8009b24:	f001 fcd4 	bl	800b4d0 <__mcmp>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	db21      	blt.n	8009b70 <quorem+0xdc>
 8009b2c:	0030      	movs	r0, r6
 8009b2e:	2400      	movs	r4, #0
 8009b30:	9b01      	ldr	r3, [sp, #4]
 8009b32:	9903      	ldr	r1, [sp, #12]
 8009b34:	3301      	adds	r3, #1
 8009b36:	9301      	str	r3, [sp, #4]
 8009b38:	3014      	adds	r0, #20
 8009b3a:	3114      	adds	r1, #20
 8009b3c:	6803      	ldr	r3, [r0, #0]
 8009b3e:	c920      	ldmia	r1!, {r5}
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	1914      	adds	r4, r2, r4
 8009b44:	b2aa      	uxth	r2, r5
 8009b46:	1aa2      	subs	r2, r4, r2
 8009b48:	0c1b      	lsrs	r3, r3, #16
 8009b4a:	0c2d      	lsrs	r5, r5, #16
 8009b4c:	1414      	asrs	r4, r2, #16
 8009b4e:	1b5b      	subs	r3, r3, r5
 8009b50:	191b      	adds	r3, r3, r4
 8009b52:	141c      	asrs	r4, r3, #16
 8009b54:	b292      	uxth	r2, r2
 8009b56:	041b      	lsls	r3, r3, #16
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	c008      	stmia	r0!, {r3}
 8009b5c:	9b04      	ldr	r3, [sp, #16]
 8009b5e:	428b      	cmp	r3, r1
 8009b60:	d2ec      	bcs.n	8009b3c <quorem+0xa8>
 8009b62:	9b00      	ldr	r3, [sp, #0]
 8009b64:	9a02      	ldr	r2, [sp, #8]
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	18d3      	adds	r3, r2, r3
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	2a00      	cmp	r2, #0
 8009b6e:	d015      	beq.n	8009b9c <quorem+0x108>
 8009b70:	9801      	ldr	r0, [sp, #4]
 8009b72:	b007      	add	sp, #28
 8009b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d106      	bne.n	8009b8a <quorem+0xf6>
 8009b7c:	9b00      	ldr	r3, [sp, #0]
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	9b02      	ldr	r3, [sp, #8]
 8009b84:	3c04      	subs	r4, #4
 8009b86:	42a3      	cmp	r3, r4
 8009b88:	d3f5      	bcc.n	8009b76 <quorem+0xe2>
 8009b8a:	9b00      	ldr	r3, [sp, #0]
 8009b8c:	6133      	str	r3, [r6, #16]
 8009b8e:	e7c7      	b.n	8009b20 <quorem+0x8c>
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	2a00      	cmp	r2, #0
 8009b94:	d106      	bne.n	8009ba4 <quorem+0x110>
 8009b96:	9a00      	ldr	r2, [sp, #0]
 8009b98:	3a01      	subs	r2, #1
 8009b9a:	9200      	str	r2, [sp, #0]
 8009b9c:	9a02      	ldr	r2, [sp, #8]
 8009b9e:	3b04      	subs	r3, #4
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d3f5      	bcc.n	8009b90 <quorem+0xfc>
 8009ba4:	9b00      	ldr	r3, [sp, #0]
 8009ba6:	6133      	str	r3, [r6, #16]
 8009ba8:	e7e2      	b.n	8009b70 <quorem+0xdc>
	...

08009bac <_dtoa_r>:
 8009bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bae:	b09d      	sub	sp, #116	; 0x74
 8009bb0:	9202      	str	r2, [sp, #8]
 8009bb2:	9303      	str	r3, [sp, #12]
 8009bb4:	9b02      	ldr	r3, [sp, #8]
 8009bb6:	9c03      	ldr	r4, [sp, #12]
 8009bb8:	9308      	str	r3, [sp, #32]
 8009bba:	9409      	str	r4, [sp, #36]	; 0x24
 8009bbc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009bbe:	0007      	movs	r7, r0
 8009bc0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8009bc2:	2c00      	cmp	r4, #0
 8009bc4:	d10e      	bne.n	8009be4 <_dtoa_r+0x38>
 8009bc6:	2010      	movs	r0, #16
 8009bc8:	f001 f982 	bl	800aed0 <malloc>
 8009bcc:	1e02      	subs	r2, r0, #0
 8009bce:	6278      	str	r0, [r7, #36]	; 0x24
 8009bd0:	d104      	bne.n	8009bdc <_dtoa_r+0x30>
 8009bd2:	21ea      	movs	r1, #234	; 0xea
 8009bd4:	4bc7      	ldr	r3, [pc, #796]	; (8009ef4 <_dtoa_r+0x348>)
 8009bd6:	48c8      	ldr	r0, [pc, #800]	; (8009ef8 <_dtoa_r+0x34c>)
 8009bd8:	f002 f91c 	bl	800be14 <__assert_func>
 8009bdc:	6044      	str	r4, [r0, #4]
 8009bde:	6084      	str	r4, [r0, #8]
 8009be0:	6004      	str	r4, [r0, #0]
 8009be2:	60c4      	str	r4, [r0, #12]
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	6819      	ldr	r1, [r3, #0]
 8009be8:	2900      	cmp	r1, #0
 8009bea:	d00a      	beq.n	8009c02 <_dtoa_r+0x56>
 8009bec:	685a      	ldr	r2, [r3, #4]
 8009bee:	2301      	movs	r3, #1
 8009bf0:	4093      	lsls	r3, r2
 8009bf2:	604a      	str	r2, [r1, #4]
 8009bf4:	608b      	str	r3, [r1, #8]
 8009bf6:	0038      	movs	r0, r7
 8009bf8:	f001 f9de 	bl	800afb8 <_Bfree>
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c00:	601a      	str	r2, [r3, #0]
 8009c02:	9b03      	ldr	r3, [sp, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	da20      	bge.n	8009c4a <_dtoa_r+0x9e>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	602b      	str	r3, [r5, #0]
 8009c0c:	9b03      	ldr	r3, [sp, #12]
 8009c0e:	005b      	lsls	r3, r3, #1
 8009c10:	085b      	lsrs	r3, r3, #1
 8009c12:	9309      	str	r3, [sp, #36]	; 0x24
 8009c14:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009c16:	4bb9      	ldr	r3, [pc, #740]	; (8009efc <_dtoa_r+0x350>)
 8009c18:	4ab8      	ldr	r2, [pc, #736]	; (8009efc <_dtoa_r+0x350>)
 8009c1a:	402b      	ands	r3, r5
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d117      	bne.n	8009c50 <_dtoa_r+0xa4>
 8009c20:	4bb7      	ldr	r3, [pc, #732]	; (8009f00 <_dtoa_r+0x354>)
 8009c22:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c24:	0328      	lsls	r0, r5, #12
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	9b02      	ldr	r3, [sp, #8]
 8009c2a:	0b00      	lsrs	r0, r0, #12
 8009c2c:	4318      	orrs	r0, r3
 8009c2e:	d101      	bne.n	8009c34 <_dtoa_r+0x88>
 8009c30:	f000 fdbf 	bl	800a7b2 <_dtoa_r+0xc06>
 8009c34:	48b3      	ldr	r0, [pc, #716]	; (8009f04 <_dtoa_r+0x358>)
 8009c36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009c38:	9006      	str	r0, [sp, #24]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d002      	beq.n	8009c44 <_dtoa_r+0x98>
 8009c3e:	4bb2      	ldr	r3, [pc, #712]	; (8009f08 <_dtoa_r+0x35c>)
 8009c40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009c42:	6013      	str	r3, [r2, #0]
 8009c44:	9806      	ldr	r0, [sp, #24]
 8009c46:	b01d      	add	sp, #116	; 0x74
 8009c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	602b      	str	r3, [r5, #0]
 8009c4e:	e7e1      	b.n	8009c14 <_dtoa_r+0x68>
 8009c50:	9b08      	ldr	r3, [sp, #32]
 8009c52:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009c54:	9312      	str	r3, [sp, #72]	; 0x48
 8009c56:	9413      	str	r4, [sp, #76]	; 0x4c
 8009c58:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009c5a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f7f6 fbf4 	bl	800044c <__aeabi_dcmpeq>
 8009c64:	1e04      	subs	r4, r0, #0
 8009c66:	d009      	beq.n	8009c7c <_dtoa_r+0xd0>
 8009c68:	2301      	movs	r3, #1
 8009c6a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c6c:	6013      	str	r3, [r2, #0]
 8009c6e:	4ba7      	ldr	r3, [pc, #668]	; (8009f0c <_dtoa_r+0x360>)
 8009c70:	9306      	str	r3, [sp, #24]
 8009c72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d0e5      	beq.n	8009c44 <_dtoa_r+0x98>
 8009c78:	4ba5      	ldr	r3, [pc, #660]	; (8009f10 <_dtoa_r+0x364>)
 8009c7a:	e7e1      	b.n	8009c40 <_dtoa_r+0x94>
 8009c7c:	ab1a      	add	r3, sp, #104	; 0x68
 8009c7e:	9301      	str	r3, [sp, #4]
 8009c80:	ab1b      	add	r3, sp, #108	; 0x6c
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	0038      	movs	r0, r7
 8009c86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c8a:	f001 fd49 	bl	800b720 <__d2b>
 8009c8e:	006e      	lsls	r6, r5, #1
 8009c90:	9005      	str	r0, [sp, #20]
 8009c92:	0d76      	lsrs	r6, r6, #21
 8009c94:	d100      	bne.n	8009c98 <_dtoa_r+0xec>
 8009c96:	e07c      	b.n	8009d92 <_dtoa_r+0x1e6>
 8009c98:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009c9a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009c9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c9e:	4a9d      	ldr	r2, [pc, #628]	; (8009f14 <_dtoa_r+0x368>)
 8009ca0:	031b      	lsls	r3, r3, #12
 8009ca2:	0b1b      	lsrs	r3, r3, #12
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	0011      	movs	r1, r2
 8009ca8:	4b9b      	ldr	r3, [pc, #620]	; (8009f18 <_dtoa_r+0x36c>)
 8009caa:	9418      	str	r4, [sp, #96]	; 0x60
 8009cac:	18f6      	adds	r6, r6, r3
 8009cae:	2200      	movs	r2, #0
 8009cb0:	4b9a      	ldr	r3, [pc, #616]	; (8009f1c <_dtoa_r+0x370>)
 8009cb2:	f7f8 fa09 	bl	80020c8 <__aeabi_dsub>
 8009cb6:	4a9a      	ldr	r2, [pc, #616]	; (8009f20 <_dtoa_r+0x374>)
 8009cb8:	4b9a      	ldr	r3, [pc, #616]	; (8009f24 <_dtoa_r+0x378>)
 8009cba:	f7f7 ff99 	bl	8001bf0 <__aeabi_dmul>
 8009cbe:	4a9a      	ldr	r2, [pc, #616]	; (8009f28 <_dtoa_r+0x37c>)
 8009cc0:	4b9a      	ldr	r3, [pc, #616]	; (8009f2c <_dtoa_r+0x380>)
 8009cc2:	f7f7 f857 	bl	8000d74 <__aeabi_dadd>
 8009cc6:	0004      	movs	r4, r0
 8009cc8:	0030      	movs	r0, r6
 8009cca:	000d      	movs	r5, r1
 8009ccc:	f7f8 fde2 	bl	8002894 <__aeabi_i2d>
 8009cd0:	4a97      	ldr	r2, [pc, #604]	; (8009f30 <_dtoa_r+0x384>)
 8009cd2:	4b98      	ldr	r3, [pc, #608]	; (8009f34 <_dtoa_r+0x388>)
 8009cd4:	f7f7 ff8c 	bl	8001bf0 <__aeabi_dmul>
 8009cd8:	0002      	movs	r2, r0
 8009cda:	000b      	movs	r3, r1
 8009cdc:	0020      	movs	r0, r4
 8009cde:	0029      	movs	r1, r5
 8009ce0:	f7f7 f848 	bl	8000d74 <__aeabi_dadd>
 8009ce4:	0004      	movs	r4, r0
 8009ce6:	000d      	movs	r5, r1
 8009ce8:	f7f8 fd9e 	bl	8002828 <__aeabi_d2iz>
 8009cec:	2200      	movs	r2, #0
 8009cee:	9002      	str	r0, [sp, #8]
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	0020      	movs	r0, r4
 8009cf4:	0029      	movs	r1, r5
 8009cf6:	f7f6 fbaf 	bl	8000458 <__aeabi_dcmplt>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	d00b      	beq.n	8009d16 <_dtoa_r+0x16a>
 8009cfe:	9802      	ldr	r0, [sp, #8]
 8009d00:	f7f8 fdc8 	bl	8002894 <__aeabi_i2d>
 8009d04:	002b      	movs	r3, r5
 8009d06:	0022      	movs	r2, r4
 8009d08:	f7f6 fba0 	bl	800044c <__aeabi_dcmpeq>
 8009d0c:	4243      	negs	r3, r0
 8009d0e:	4158      	adcs	r0, r3
 8009d10:	9b02      	ldr	r3, [sp, #8]
 8009d12:	1a1b      	subs	r3, r3, r0
 8009d14:	9302      	str	r3, [sp, #8]
 8009d16:	2301      	movs	r3, #1
 8009d18:	9316      	str	r3, [sp, #88]	; 0x58
 8009d1a:	9b02      	ldr	r3, [sp, #8]
 8009d1c:	2b16      	cmp	r3, #22
 8009d1e:	d80f      	bhi.n	8009d40 <_dtoa_r+0x194>
 8009d20:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009d22:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009d24:	00da      	lsls	r2, r3, #3
 8009d26:	4b84      	ldr	r3, [pc, #528]	; (8009f38 <_dtoa_r+0x38c>)
 8009d28:	189b      	adds	r3, r3, r2
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f7f6 fb93 	bl	8000458 <__aeabi_dcmplt>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d049      	beq.n	8009dca <_dtoa_r+0x21e>
 8009d36:	9b02      	ldr	r3, [sp, #8]
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	9302      	str	r3, [sp, #8]
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	9316      	str	r3, [sp, #88]	; 0x58
 8009d40:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009d42:	1b9e      	subs	r6, r3, r6
 8009d44:	2300      	movs	r3, #0
 8009d46:	930a      	str	r3, [sp, #40]	; 0x28
 8009d48:	0033      	movs	r3, r6
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	930d      	str	r3, [sp, #52]	; 0x34
 8009d4e:	d504      	bpl.n	8009d5a <_dtoa_r+0x1ae>
 8009d50:	2301      	movs	r3, #1
 8009d52:	1b9b      	subs	r3, r3, r6
 8009d54:	930a      	str	r3, [sp, #40]	; 0x28
 8009d56:	2300      	movs	r3, #0
 8009d58:	930d      	str	r3, [sp, #52]	; 0x34
 8009d5a:	9b02      	ldr	r3, [sp, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	db36      	blt.n	8009dce <_dtoa_r+0x222>
 8009d60:	9a02      	ldr	r2, [sp, #8]
 8009d62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d64:	4694      	mov	ip, r2
 8009d66:	4463      	add	r3, ip
 8009d68:	930d      	str	r3, [sp, #52]	; 0x34
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	9215      	str	r2, [sp, #84]	; 0x54
 8009d6e:	930e      	str	r3, [sp, #56]	; 0x38
 8009d70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d72:	2401      	movs	r4, #1
 8009d74:	2b09      	cmp	r3, #9
 8009d76:	d864      	bhi.n	8009e42 <_dtoa_r+0x296>
 8009d78:	2b05      	cmp	r3, #5
 8009d7a:	dd02      	ble.n	8009d82 <_dtoa_r+0x1d6>
 8009d7c:	2400      	movs	r4, #0
 8009d7e:	3b04      	subs	r3, #4
 8009d80:	9322      	str	r3, [sp, #136]	; 0x88
 8009d82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d84:	1e98      	subs	r0, r3, #2
 8009d86:	2803      	cmp	r0, #3
 8009d88:	d864      	bhi.n	8009e54 <_dtoa_r+0x2a8>
 8009d8a:	f7f6 f9c5 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009d8e:	3829      	.short	0x3829
 8009d90:	5836      	.short	0x5836
 8009d92:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009d94:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009d96:	189e      	adds	r6, r3, r2
 8009d98:	4b68      	ldr	r3, [pc, #416]	; (8009f3c <_dtoa_r+0x390>)
 8009d9a:	18f2      	adds	r2, r6, r3
 8009d9c:	2a20      	cmp	r2, #32
 8009d9e:	dd0f      	ble.n	8009dc0 <_dtoa_r+0x214>
 8009da0:	2340      	movs	r3, #64	; 0x40
 8009da2:	1a9b      	subs	r3, r3, r2
 8009da4:	409d      	lsls	r5, r3
 8009da6:	4b66      	ldr	r3, [pc, #408]	; (8009f40 <_dtoa_r+0x394>)
 8009da8:	9802      	ldr	r0, [sp, #8]
 8009daa:	18f3      	adds	r3, r6, r3
 8009dac:	40d8      	lsrs	r0, r3
 8009dae:	4328      	orrs	r0, r5
 8009db0:	f7f8 fda0 	bl	80028f4 <__aeabi_ui2d>
 8009db4:	2301      	movs	r3, #1
 8009db6:	4c63      	ldr	r4, [pc, #396]	; (8009f44 <_dtoa_r+0x398>)
 8009db8:	3e01      	subs	r6, #1
 8009dba:	1909      	adds	r1, r1, r4
 8009dbc:	9318      	str	r3, [sp, #96]	; 0x60
 8009dbe:	e776      	b.n	8009cae <_dtoa_r+0x102>
 8009dc0:	2320      	movs	r3, #32
 8009dc2:	9802      	ldr	r0, [sp, #8]
 8009dc4:	1a9b      	subs	r3, r3, r2
 8009dc6:	4098      	lsls	r0, r3
 8009dc8:	e7f2      	b.n	8009db0 <_dtoa_r+0x204>
 8009dca:	9016      	str	r0, [sp, #88]	; 0x58
 8009dcc:	e7b8      	b.n	8009d40 <_dtoa_r+0x194>
 8009dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dd0:	9a02      	ldr	r2, [sp, #8]
 8009dd2:	1a9b      	subs	r3, r3, r2
 8009dd4:	930a      	str	r3, [sp, #40]	; 0x28
 8009dd6:	4253      	negs	r3, r2
 8009dd8:	930e      	str	r3, [sp, #56]	; 0x38
 8009dda:	2300      	movs	r3, #0
 8009ddc:	9315      	str	r3, [sp, #84]	; 0x54
 8009dde:	e7c7      	b.n	8009d70 <_dtoa_r+0x1c4>
 8009de0:	2300      	movs	r3, #0
 8009de2:	930f      	str	r3, [sp, #60]	; 0x3c
 8009de4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009de6:	930c      	str	r3, [sp, #48]	; 0x30
 8009de8:	9307      	str	r3, [sp, #28]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	dc13      	bgt.n	8009e16 <_dtoa_r+0x26a>
 8009dee:	2301      	movs	r3, #1
 8009df0:	001a      	movs	r2, r3
 8009df2:	930c      	str	r3, [sp, #48]	; 0x30
 8009df4:	9307      	str	r3, [sp, #28]
 8009df6:	9223      	str	r2, [sp, #140]	; 0x8c
 8009df8:	e00d      	b.n	8009e16 <_dtoa_r+0x26a>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e7f1      	b.n	8009de2 <_dtoa_r+0x236>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009e02:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e04:	4694      	mov	ip, r2
 8009e06:	9b02      	ldr	r3, [sp, #8]
 8009e08:	4463      	add	r3, ip
 8009e0a:	930c      	str	r3, [sp, #48]	; 0x30
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	9307      	str	r3, [sp, #28]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	dc00      	bgt.n	8009e16 <_dtoa_r+0x26a>
 8009e14:	2301      	movs	r3, #1
 8009e16:	2200      	movs	r2, #0
 8009e18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e1a:	6042      	str	r2, [r0, #4]
 8009e1c:	3204      	adds	r2, #4
 8009e1e:	0015      	movs	r5, r2
 8009e20:	3514      	adds	r5, #20
 8009e22:	6841      	ldr	r1, [r0, #4]
 8009e24:	429d      	cmp	r5, r3
 8009e26:	d919      	bls.n	8009e5c <_dtoa_r+0x2b0>
 8009e28:	0038      	movs	r0, r7
 8009e2a:	f001 f881 	bl	800af30 <_Balloc>
 8009e2e:	9006      	str	r0, [sp, #24]
 8009e30:	2800      	cmp	r0, #0
 8009e32:	d117      	bne.n	8009e64 <_dtoa_r+0x2b8>
 8009e34:	21d5      	movs	r1, #213	; 0xd5
 8009e36:	0002      	movs	r2, r0
 8009e38:	4b43      	ldr	r3, [pc, #268]	; (8009f48 <_dtoa_r+0x39c>)
 8009e3a:	0049      	lsls	r1, r1, #1
 8009e3c:	e6cb      	b.n	8009bd6 <_dtoa_r+0x2a>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e7de      	b.n	8009e00 <_dtoa_r+0x254>
 8009e42:	2300      	movs	r3, #0
 8009e44:	940f      	str	r4, [sp, #60]	; 0x3c
 8009e46:	9322      	str	r3, [sp, #136]	; 0x88
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	930c      	str	r3, [sp, #48]	; 0x30
 8009e4c:	9307      	str	r3, [sp, #28]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	3313      	adds	r3, #19
 8009e52:	e7d0      	b.n	8009df6 <_dtoa_r+0x24a>
 8009e54:	2301      	movs	r3, #1
 8009e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e58:	3b02      	subs	r3, #2
 8009e5a:	e7f6      	b.n	8009e4a <_dtoa_r+0x29e>
 8009e5c:	3101      	adds	r1, #1
 8009e5e:	6041      	str	r1, [r0, #4]
 8009e60:	0052      	lsls	r2, r2, #1
 8009e62:	e7dc      	b.n	8009e1e <_dtoa_r+0x272>
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e66:	9a06      	ldr	r2, [sp, #24]
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	9b07      	ldr	r3, [sp, #28]
 8009e6c:	2b0e      	cmp	r3, #14
 8009e6e:	d900      	bls.n	8009e72 <_dtoa_r+0x2c6>
 8009e70:	e0eb      	b.n	800a04a <_dtoa_r+0x49e>
 8009e72:	2c00      	cmp	r4, #0
 8009e74:	d100      	bne.n	8009e78 <_dtoa_r+0x2cc>
 8009e76:	e0e8      	b.n	800a04a <_dtoa_r+0x49e>
 8009e78:	9b02      	ldr	r3, [sp, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	dd68      	ble.n	8009f50 <_dtoa_r+0x3a4>
 8009e7e:	001a      	movs	r2, r3
 8009e80:	210f      	movs	r1, #15
 8009e82:	4b2d      	ldr	r3, [pc, #180]	; (8009f38 <_dtoa_r+0x38c>)
 8009e84:	400a      	ands	r2, r1
 8009e86:	00d2      	lsls	r2, r2, #3
 8009e88:	189b      	adds	r3, r3, r2
 8009e8a:	681d      	ldr	r5, [r3, #0]
 8009e8c:	685e      	ldr	r6, [r3, #4]
 8009e8e:	9b02      	ldr	r3, [sp, #8]
 8009e90:	111c      	asrs	r4, r3, #4
 8009e92:	2302      	movs	r3, #2
 8009e94:	9310      	str	r3, [sp, #64]	; 0x40
 8009e96:	9b02      	ldr	r3, [sp, #8]
 8009e98:	05db      	lsls	r3, r3, #23
 8009e9a:	d50b      	bpl.n	8009eb4 <_dtoa_r+0x308>
 8009e9c:	4b2b      	ldr	r3, [pc, #172]	; (8009f4c <_dtoa_r+0x3a0>)
 8009e9e:	400c      	ands	r4, r1
 8009ea0:	6a1a      	ldr	r2, [r3, #32]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009ea6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009ea8:	f7f7 faa0 	bl	80013ec <__aeabi_ddiv>
 8009eac:	2303      	movs	r3, #3
 8009eae:	9008      	str	r0, [sp, #32]
 8009eb0:	9109      	str	r1, [sp, #36]	; 0x24
 8009eb2:	9310      	str	r3, [sp, #64]	; 0x40
 8009eb4:	4b25      	ldr	r3, [pc, #148]	; (8009f4c <_dtoa_r+0x3a0>)
 8009eb6:	9314      	str	r3, [sp, #80]	; 0x50
 8009eb8:	2c00      	cmp	r4, #0
 8009eba:	d108      	bne.n	8009ece <_dtoa_r+0x322>
 8009ebc:	9808      	ldr	r0, [sp, #32]
 8009ebe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ec0:	002a      	movs	r2, r5
 8009ec2:	0033      	movs	r3, r6
 8009ec4:	f7f7 fa92 	bl	80013ec <__aeabi_ddiv>
 8009ec8:	9008      	str	r0, [sp, #32]
 8009eca:	9109      	str	r1, [sp, #36]	; 0x24
 8009ecc:	e05c      	b.n	8009f88 <_dtoa_r+0x3dc>
 8009ece:	2301      	movs	r3, #1
 8009ed0:	421c      	tst	r4, r3
 8009ed2:	d00b      	beq.n	8009eec <_dtoa_r+0x340>
 8009ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ed6:	0028      	movs	r0, r5
 8009ed8:	3301      	adds	r3, #1
 8009eda:	9310      	str	r3, [sp, #64]	; 0x40
 8009edc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ede:	0031      	movs	r1, r6
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	f7f7 fe84 	bl	8001bf0 <__aeabi_dmul>
 8009ee8:	0005      	movs	r5, r0
 8009eea:	000e      	movs	r6, r1
 8009eec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009eee:	1064      	asrs	r4, r4, #1
 8009ef0:	3308      	adds	r3, #8
 8009ef2:	e7e0      	b.n	8009eb6 <_dtoa_r+0x30a>
 8009ef4:	0800cdfe 	.word	0x0800cdfe
 8009ef8:	0800ce15 	.word	0x0800ce15
 8009efc:	7ff00000 	.word	0x7ff00000
 8009f00:	0000270f 	.word	0x0000270f
 8009f04:	0800cdfa 	.word	0x0800cdfa
 8009f08:	0800cdfd 	.word	0x0800cdfd
 8009f0c:	0800cc74 	.word	0x0800cc74
 8009f10:	0800cc75 	.word	0x0800cc75
 8009f14:	3ff00000 	.word	0x3ff00000
 8009f18:	fffffc01 	.word	0xfffffc01
 8009f1c:	3ff80000 	.word	0x3ff80000
 8009f20:	636f4361 	.word	0x636f4361
 8009f24:	3fd287a7 	.word	0x3fd287a7
 8009f28:	8b60c8b3 	.word	0x8b60c8b3
 8009f2c:	3fc68a28 	.word	0x3fc68a28
 8009f30:	509f79fb 	.word	0x509f79fb
 8009f34:	3fd34413 	.word	0x3fd34413
 8009f38:	0800cf80 	.word	0x0800cf80
 8009f3c:	00000432 	.word	0x00000432
 8009f40:	00000412 	.word	0x00000412
 8009f44:	fe100000 	.word	0xfe100000
 8009f48:	0800ce70 	.word	0x0800ce70
 8009f4c:	0800cf58 	.word	0x0800cf58
 8009f50:	2302      	movs	r3, #2
 8009f52:	9310      	str	r3, [sp, #64]	; 0x40
 8009f54:	9b02      	ldr	r3, [sp, #8]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d016      	beq.n	8009f88 <_dtoa_r+0x3dc>
 8009f5a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009f5c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009f5e:	425c      	negs	r4, r3
 8009f60:	230f      	movs	r3, #15
 8009f62:	4ab6      	ldr	r2, [pc, #728]	; (800a23c <_dtoa_r+0x690>)
 8009f64:	4023      	ands	r3, r4
 8009f66:	00db      	lsls	r3, r3, #3
 8009f68:	18d3      	adds	r3, r2, r3
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	f7f7 fe3f 	bl	8001bf0 <__aeabi_dmul>
 8009f72:	2601      	movs	r6, #1
 8009f74:	2300      	movs	r3, #0
 8009f76:	9008      	str	r0, [sp, #32]
 8009f78:	9109      	str	r1, [sp, #36]	; 0x24
 8009f7a:	4db1      	ldr	r5, [pc, #708]	; (800a240 <_dtoa_r+0x694>)
 8009f7c:	1124      	asrs	r4, r4, #4
 8009f7e:	2c00      	cmp	r4, #0
 8009f80:	d000      	beq.n	8009f84 <_dtoa_r+0x3d8>
 8009f82:	e094      	b.n	800a0ae <_dtoa_r+0x502>
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d19f      	bne.n	8009ec8 <_dtoa_r+0x31c>
 8009f88:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d100      	bne.n	8009f90 <_dtoa_r+0x3e4>
 8009f8e:	e09b      	b.n	800a0c8 <_dtoa_r+0x51c>
 8009f90:	9c08      	ldr	r4, [sp, #32]
 8009f92:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f94:	2200      	movs	r2, #0
 8009f96:	0020      	movs	r0, r4
 8009f98:	0029      	movs	r1, r5
 8009f9a:	4baa      	ldr	r3, [pc, #680]	; (800a244 <_dtoa_r+0x698>)
 8009f9c:	f7f6 fa5c 	bl	8000458 <__aeabi_dcmplt>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d100      	bne.n	8009fa6 <_dtoa_r+0x3fa>
 8009fa4:	e090      	b.n	800a0c8 <_dtoa_r+0x51c>
 8009fa6:	9b07      	ldr	r3, [sp, #28]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d100      	bne.n	8009fae <_dtoa_r+0x402>
 8009fac:	e08c      	b.n	800a0c8 <_dtoa_r+0x51c>
 8009fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	dd46      	ble.n	800a042 <_dtoa_r+0x496>
 8009fb4:	9b02      	ldr	r3, [sp, #8]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	0020      	movs	r0, r4
 8009fba:	0029      	movs	r1, r5
 8009fbc:	1e5e      	subs	r6, r3, #1
 8009fbe:	4ba2      	ldr	r3, [pc, #648]	; (800a248 <_dtoa_r+0x69c>)
 8009fc0:	f7f7 fe16 	bl	8001bf0 <__aeabi_dmul>
 8009fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009fc6:	9008      	str	r0, [sp, #32]
 8009fc8:	9109      	str	r1, [sp, #36]	; 0x24
 8009fca:	3301      	adds	r3, #1
 8009fcc:	9310      	str	r3, [sp, #64]	; 0x40
 8009fce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fd0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009fd2:	9c08      	ldr	r4, [sp, #32]
 8009fd4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009fd6:	9314      	str	r3, [sp, #80]	; 0x50
 8009fd8:	f7f8 fc5c 	bl	8002894 <__aeabi_i2d>
 8009fdc:	0022      	movs	r2, r4
 8009fde:	002b      	movs	r3, r5
 8009fe0:	f7f7 fe06 	bl	8001bf0 <__aeabi_dmul>
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	4b99      	ldr	r3, [pc, #612]	; (800a24c <_dtoa_r+0x6a0>)
 8009fe8:	f7f6 fec4 	bl	8000d74 <__aeabi_dadd>
 8009fec:	9010      	str	r0, [sp, #64]	; 0x40
 8009fee:	9111      	str	r1, [sp, #68]	; 0x44
 8009ff0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ff4:	9208      	str	r2, [sp, #32]
 8009ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff8:	4a95      	ldr	r2, [pc, #596]	; (800a250 <_dtoa_r+0x6a4>)
 8009ffa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ffc:	4694      	mov	ip, r2
 8009ffe:	4463      	add	r3, ip
 800a000:	9317      	str	r3, [sp, #92]	; 0x5c
 800a002:	9309      	str	r3, [sp, #36]	; 0x24
 800a004:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a006:	2b00      	cmp	r3, #0
 800a008:	d161      	bne.n	800a0ce <_dtoa_r+0x522>
 800a00a:	2200      	movs	r2, #0
 800a00c:	0020      	movs	r0, r4
 800a00e:	0029      	movs	r1, r5
 800a010:	4b90      	ldr	r3, [pc, #576]	; (800a254 <_dtoa_r+0x6a8>)
 800a012:	f7f8 f859 	bl	80020c8 <__aeabi_dsub>
 800a016:	9a08      	ldr	r2, [sp, #32]
 800a018:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a01a:	0004      	movs	r4, r0
 800a01c:	000d      	movs	r5, r1
 800a01e:	f7f6 fa2f 	bl	8000480 <__aeabi_dcmpgt>
 800a022:	2800      	cmp	r0, #0
 800a024:	d000      	beq.n	800a028 <_dtoa_r+0x47c>
 800a026:	e2af      	b.n	800a588 <_dtoa_r+0x9dc>
 800a028:	488b      	ldr	r0, [pc, #556]	; (800a258 <_dtoa_r+0x6ac>)
 800a02a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a02c:	4684      	mov	ip, r0
 800a02e:	4461      	add	r1, ip
 800a030:	000b      	movs	r3, r1
 800a032:	0020      	movs	r0, r4
 800a034:	0029      	movs	r1, r5
 800a036:	9a08      	ldr	r2, [sp, #32]
 800a038:	f7f6 fa0e 	bl	8000458 <__aeabi_dcmplt>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d000      	beq.n	800a042 <_dtoa_r+0x496>
 800a040:	e29f      	b.n	800a582 <_dtoa_r+0x9d6>
 800a042:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a044:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a046:	9308      	str	r3, [sp, #32]
 800a048:	9409      	str	r4, [sp, #36]	; 0x24
 800a04a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	da00      	bge.n	800a052 <_dtoa_r+0x4a6>
 800a050:	e172      	b.n	800a338 <_dtoa_r+0x78c>
 800a052:	9a02      	ldr	r2, [sp, #8]
 800a054:	2a0e      	cmp	r2, #14
 800a056:	dd00      	ble.n	800a05a <_dtoa_r+0x4ae>
 800a058:	e16e      	b.n	800a338 <_dtoa_r+0x78c>
 800a05a:	4b78      	ldr	r3, [pc, #480]	; (800a23c <_dtoa_r+0x690>)
 800a05c:	00d2      	lsls	r2, r2, #3
 800a05e:	189b      	adds	r3, r3, r2
 800a060:	685c      	ldr	r4, [r3, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	930a      	str	r3, [sp, #40]	; 0x28
 800a066:	940b      	str	r4, [sp, #44]	; 0x2c
 800a068:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	db00      	blt.n	800a070 <_dtoa_r+0x4c4>
 800a06e:	e0f7      	b.n	800a260 <_dtoa_r+0x6b4>
 800a070:	9b07      	ldr	r3, [sp, #28]
 800a072:	2b00      	cmp	r3, #0
 800a074:	dd00      	ble.n	800a078 <_dtoa_r+0x4cc>
 800a076:	e0f3      	b.n	800a260 <_dtoa_r+0x6b4>
 800a078:	d000      	beq.n	800a07c <_dtoa_r+0x4d0>
 800a07a:	e282      	b.n	800a582 <_dtoa_r+0x9d6>
 800a07c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a07e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a080:	2200      	movs	r2, #0
 800a082:	4b74      	ldr	r3, [pc, #464]	; (800a254 <_dtoa_r+0x6a8>)
 800a084:	f7f7 fdb4 	bl	8001bf0 <__aeabi_dmul>
 800a088:	9a08      	ldr	r2, [sp, #32]
 800a08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a08c:	f7f6 fa02 	bl	8000494 <__aeabi_dcmpge>
 800a090:	9e07      	ldr	r6, [sp, #28]
 800a092:	0035      	movs	r5, r6
 800a094:	2800      	cmp	r0, #0
 800a096:	d000      	beq.n	800a09a <_dtoa_r+0x4ee>
 800a098:	e259      	b.n	800a54e <_dtoa_r+0x9a2>
 800a09a:	9b06      	ldr	r3, [sp, #24]
 800a09c:	9a06      	ldr	r2, [sp, #24]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	9308      	str	r3, [sp, #32]
 800a0a2:	2331      	movs	r3, #49	; 0x31
 800a0a4:	7013      	strb	r3, [r2, #0]
 800a0a6:	9b02      	ldr	r3, [sp, #8]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	9302      	str	r3, [sp, #8]
 800a0ac:	e254      	b.n	800a558 <_dtoa_r+0x9ac>
 800a0ae:	4234      	tst	r4, r6
 800a0b0:	d007      	beq.n	800a0c2 <_dtoa_r+0x516>
 800a0b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	9310      	str	r3, [sp, #64]	; 0x40
 800a0b8:	682a      	ldr	r2, [r5, #0]
 800a0ba:	686b      	ldr	r3, [r5, #4]
 800a0bc:	f7f7 fd98 	bl	8001bf0 <__aeabi_dmul>
 800a0c0:	0033      	movs	r3, r6
 800a0c2:	1064      	asrs	r4, r4, #1
 800a0c4:	3508      	adds	r5, #8
 800a0c6:	e75a      	b.n	8009f7e <_dtoa_r+0x3d2>
 800a0c8:	9e02      	ldr	r6, [sp, #8]
 800a0ca:	9b07      	ldr	r3, [sp, #28]
 800a0cc:	e780      	b.n	8009fd0 <_dtoa_r+0x424>
 800a0ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a0d2:	1e5a      	subs	r2, r3, #1
 800a0d4:	4b59      	ldr	r3, [pc, #356]	; (800a23c <_dtoa_r+0x690>)
 800a0d6:	00d2      	lsls	r2, r2, #3
 800a0d8:	189b      	adds	r3, r3, r2
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	2900      	cmp	r1, #0
 800a0e0:	d051      	beq.n	800a186 <_dtoa_r+0x5da>
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	495d      	ldr	r1, [pc, #372]	; (800a25c <_dtoa_r+0x6b0>)
 800a0e6:	f7f7 f981 	bl	80013ec <__aeabi_ddiv>
 800a0ea:	9a08      	ldr	r2, [sp, #32]
 800a0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ee:	f7f7 ffeb 	bl	80020c8 <__aeabi_dsub>
 800a0f2:	9a06      	ldr	r2, [sp, #24]
 800a0f4:	9b06      	ldr	r3, [sp, #24]
 800a0f6:	4694      	mov	ip, r2
 800a0f8:	9317      	str	r3, [sp, #92]	; 0x5c
 800a0fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0fc:	9010      	str	r0, [sp, #64]	; 0x40
 800a0fe:	9111      	str	r1, [sp, #68]	; 0x44
 800a100:	4463      	add	r3, ip
 800a102:	9319      	str	r3, [sp, #100]	; 0x64
 800a104:	0029      	movs	r1, r5
 800a106:	0020      	movs	r0, r4
 800a108:	f7f8 fb8e 	bl	8002828 <__aeabi_d2iz>
 800a10c:	9014      	str	r0, [sp, #80]	; 0x50
 800a10e:	f7f8 fbc1 	bl	8002894 <__aeabi_i2d>
 800a112:	0002      	movs	r2, r0
 800a114:	000b      	movs	r3, r1
 800a116:	0020      	movs	r0, r4
 800a118:	0029      	movs	r1, r5
 800a11a:	f7f7 ffd5 	bl	80020c8 <__aeabi_dsub>
 800a11e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a120:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a122:	3301      	adds	r3, #1
 800a124:	9308      	str	r3, [sp, #32]
 800a126:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a128:	0004      	movs	r4, r0
 800a12a:	3330      	adds	r3, #48	; 0x30
 800a12c:	7013      	strb	r3, [r2, #0]
 800a12e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a132:	000d      	movs	r5, r1
 800a134:	f7f6 f990 	bl	8000458 <__aeabi_dcmplt>
 800a138:	2800      	cmp	r0, #0
 800a13a:	d175      	bne.n	800a228 <_dtoa_r+0x67c>
 800a13c:	0022      	movs	r2, r4
 800a13e:	002b      	movs	r3, r5
 800a140:	2000      	movs	r0, #0
 800a142:	4940      	ldr	r1, [pc, #256]	; (800a244 <_dtoa_r+0x698>)
 800a144:	f7f7 ffc0 	bl	80020c8 <__aeabi_dsub>
 800a148:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a14a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a14c:	f7f6 f984 	bl	8000458 <__aeabi_dcmplt>
 800a150:	2800      	cmp	r0, #0
 800a152:	d000      	beq.n	800a156 <_dtoa_r+0x5aa>
 800a154:	e0d2      	b.n	800a2fc <_dtoa_r+0x750>
 800a156:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a158:	9a08      	ldr	r2, [sp, #32]
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d100      	bne.n	800a160 <_dtoa_r+0x5b4>
 800a15e:	e770      	b.n	800a042 <_dtoa_r+0x496>
 800a160:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a162:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a164:	2200      	movs	r2, #0
 800a166:	4b38      	ldr	r3, [pc, #224]	; (800a248 <_dtoa_r+0x69c>)
 800a168:	f7f7 fd42 	bl	8001bf0 <__aeabi_dmul>
 800a16c:	4b36      	ldr	r3, [pc, #216]	; (800a248 <_dtoa_r+0x69c>)
 800a16e:	9010      	str	r0, [sp, #64]	; 0x40
 800a170:	9111      	str	r1, [sp, #68]	; 0x44
 800a172:	2200      	movs	r2, #0
 800a174:	0020      	movs	r0, r4
 800a176:	0029      	movs	r1, r5
 800a178:	f7f7 fd3a 	bl	8001bf0 <__aeabi_dmul>
 800a17c:	9b08      	ldr	r3, [sp, #32]
 800a17e:	0004      	movs	r4, r0
 800a180:	000d      	movs	r5, r1
 800a182:	9317      	str	r3, [sp, #92]	; 0x5c
 800a184:	e7be      	b.n	800a104 <_dtoa_r+0x558>
 800a186:	9808      	ldr	r0, [sp, #32]
 800a188:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a18a:	f7f7 fd31 	bl	8001bf0 <__aeabi_dmul>
 800a18e:	9a06      	ldr	r2, [sp, #24]
 800a190:	9b06      	ldr	r3, [sp, #24]
 800a192:	4694      	mov	ip, r2
 800a194:	9308      	str	r3, [sp, #32]
 800a196:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a198:	9010      	str	r0, [sp, #64]	; 0x40
 800a19a:	9111      	str	r1, [sp, #68]	; 0x44
 800a19c:	4463      	add	r3, ip
 800a19e:	9319      	str	r3, [sp, #100]	; 0x64
 800a1a0:	0029      	movs	r1, r5
 800a1a2:	0020      	movs	r0, r4
 800a1a4:	f7f8 fb40 	bl	8002828 <__aeabi_d2iz>
 800a1a8:	9017      	str	r0, [sp, #92]	; 0x5c
 800a1aa:	f7f8 fb73 	bl	8002894 <__aeabi_i2d>
 800a1ae:	0002      	movs	r2, r0
 800a1b0:	000b      	movs	r3, r1
 800a1b2:	0020      	movs	r0, r4
 800a1b4:	0029      	movs	r1, r5
 800a1b6:	f7f7 ff87 	bl	80020c8 <__aeabi_dsub>
 800a1ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1bc:	9a08      	ldr	r2, [sp, #32]
 800a1be:	3330      	adds	r3, #48	; 0x30
 800a1c0:	7013      	strb	r3, [r2, #0]
 800a1c2:	0013      	movs	r3, r2
 800a1c4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	0004      	movs	r4, r0
 800a1ca:	000d      	movs	r5, r1
 800a1cc:	9308      	str	r3, [sp, #32]
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d12c      	bne.n	800a22c <_dtoa_r+0x680>
 800a1d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a1d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a1d6:	9a06      	ldr	r2, [sp, #24]
 800a1d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1da:	4694      	mov	ip, r2
 800a1dc:	4463      	add	r3, ip
 800a1de:	2200      	movs	r2, #0
 800a1e0:	9308      	str	r3, [sp, #32]
 800a1e2:	4b1e      	ldr	r3, [pc, #120]	; (800a25c <_dtoa_r+0x6b0>)
 800a1e4:	f7f6 fdc6 	bl	8000d74 <__aeabi_dadd>
 800a1e8:	0002      	movs	r2, r0
 800a1ea:	000b      	movs	r3, r1
 800a1ec:	0020      	movs	r0, r4
 800a1ee:	0029      	movs	r1, r5
 800a1f0:	f7f6 f946 	bl	8000480 <__aeabi_dcmpgt>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d000      	beq.n	800a1fa <_dtoa_r+0x64e>
 800a1f8:	e080      	b.n	800a2fc <_dtoa_r+0x750>
 800a1fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1fe:	2000      	movs	r0, #0
 800a200:	4916      	ldr	r1, [pc, #88]	; (800a25c <_dtoa_r+0x6b0>)
 800a202:	f7f7 ff61 	bl	80020c8 <__aeabi_dsub>
 800a206:	0002      	movs	r2, r0
 800a208:	000b      	movs	r3, r1
 800a20a:	0020      	movs	r0, r4
 800a20c:	0029      	movs	r1, r5
 800a20e:	f7f6 f923 	bl	8000458 <__aeabi_dcmplt>
 800a212:	2800      	cmp	r0, #0
 800a214:	d100      	bne.n	800a218 <_dtoa_r+0x66c>
 800a216:	e714      	b.n	800a042 <_dtoa_r+0x496>
 800a218:	9b08      	ldr	r3, [sp, #32]
 800a21a:	001a      	movs	r2, r3
 800a21c:	3a01      	subs	r2, #1
 800a21e:	9208      	str	r2, [sp, #32]
 800a220:	7812      	ldrb	r2, [r2, #0]
 800a222:	2a30      	cmp	r2, #48	; 0x30
 800a224:	d0f8      	beq.n	800a218 <_dtoa_r+0x66c>
 800a226:	9308      	str	r3, [sp, #32]
 800a228:	9602      	str	r6, [sp, #8]
 800a22a:	e055      	b.n	800a2d8 <_dtoa_r+0x72c>
 800a22c:	2200      	movs	r2, #0
 800a22e:	4b06      	ldr	r3, [pc, #24]	; (800a248 <_dtoa_r+0x69c>)
 800a230:	f7f7 fcde 	bl	8001bf0 <__aeabi_dmul>
 800a234:	0004      	movs	r4, r0
 800a236:	000d      	movs	r5, r1
 800a238:	e7b2      	b.n	800a1a0 <_dtoa_r+0x5f4>
 800a23a:	46c0      	nop			; (mov r8, r8)
 800a23c:	0800cf80 	.word	0x0800cf80
 800a240:	0800cf58 	.word	0x0800cf58
 800a244:	3ff00000 	.word	0x3ff00000
 800a248:	40240000 	.word	0x40240000
 800a24c:	401c0000 	.word	0x401c0000
 800a250:	fcc00000 	.word	0xfcc00000
 800a254:	40140000 	.word	0x40140000
 800a258:	7cc00000 	.word	0x7cc00000
 800a25c:	3fe00000 	.word	0x3fe00000
 800a260:	9b07      	ldr	r3, [sp, #28]
 800a262:	9e06      	ldr	r6, [sp, #24]
 800a264:	3b01      	subs	r3, #1
 800a266:	199b      	adds	r3, r3, r6
 800a268:	930c      	str	r3, [sp, #48]	; 0x30
 800a26a:	9c08      	ldr	r4, [sp, #32]
 800a26c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a26e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a272:	0020      	movs	r0, r4
 800a274:	0029      	movs	r1, r5
 800a276:	f7f7 f8b9 	bl	80013ec <__aeabi_ddiv>
 800a27a:	f7f8 fad5 	bl	8002828 <__aeabi_d2iz>
 800a27e:	9007      	str	r0, [sp, #28]
 800a280:	f7f8 fb08 	bl	8002894 <__aeabi_i2d>
 800a284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a288:	f7f7 fcb2 	bl	8001bf0 <__aeabi_dmul>
 800a28c:	0002      	movs	r2, r0
 800a28e:	000b      	movs	r3, r1
 800a290:	0020      	movs	r0, r4
 800a292:	0029      	movs	r1, r5
 800a294:	f7f7 ff18 	bl	80020c8 <__aeabi_dsub>
 800a298:	0033      	movs	r3, r6
 800a29a:	9a07      	ldr	r2, [sp, #28]
 800a29c:	3601      	adds	r6, #1
 800a29e:	3230      	adds	r2, #48	; 0x30
 800a2a0:	701a      	strb	r2, [r3, #0]
 800a2a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2a4:	9608      	str	r6, [sp, #32]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d139      	bne.n	800a31e <_dtoa_r+0x772>
 800a2aa:	0002      	movs	r2, r0
 800a2ac:	000b      	movs	r3, r1
 800a2ae:	f7f6 fd61 	bl	8000d74 <__aeabi_dadd>
 800a2b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2b6:	0004      	movs	r4, r0
 800a2b8:	000d      	movs	r5, r1
 800a2ba:	f7f6 f8e1 	bl	8000480 <__aeabi_dcmpgt>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d11b      	bne.n	800a2fa <_dtoa_r+0x74e>
 800a2c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2c6:	0020      	movs	r0, r4
 800a2c8:	0029      	movs	r1, r5
 800a2ca:	f7f6 f8bf 	bl	800044c <__aeabi_dcmpeq>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d002      	beq.n	800a2d8 <_dtoa_r+0x72c>
 800a2d2:	9b07      	ldr	r3, [sp, #28]
 800a2d4:	07db      	lsls	r3, r3, #31
 800a2d6:	d410      	bmi.n	800a2fa <_dtoa_r+0x74e>
 800a2d8:	0038      	movs	r0, r7
 800a2da:	9905      	ldr	r1, [sp, #20]
 800a2dc:	f000 fe6c 	bl	800afb8 <_Bfree>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	9a08      	ldr	r2, [sp, #32]
 800a2e4:	9802      	ldr	r0, [sp, #8]
 800a2e6:	7013      	strb	r3, [r2, #0]
 800a2e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	6018      	str	r0, [r3, #0]
 800a2ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d100      	bne.n	800a2f6 <_dtoa_r+0x74a>
 800a2f4:	e4a6      	b.n	8009c44 <_dtoa_r+0x98>
 800a2f6:	601a      	str	r2, [r3, #0]
 800a2f8:	e4a4      	b.n	8009c44 <_dtoa_r+0x98>
 800a2fa:	9e02      	ldr	r6, [sp, #8]
 800a2fc:	9b08      	ldr	r3, [sp, #32]
 800a2fe:	9308      	str	r3, [sp, #32]
 800a300:	3b01      	subs	r3, #1
 800a302:	781a      	ldrb	r2, [r3, #0]
 800a304:	2a39      	cmp	r2, #57	; 0x39
 800a306:	d106      	bne.n	800a316 <_dtoa_r+0x76a>
 800a308:	9a06      	ldr	r2, [sp, #24]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d1f7      	bne.n	800a2fe <_dtoa_r+0x752>
 800a30e:	2230      	movs	r2, #48	; 0x30
 800a310:	9906      	ldr	r1, [sp, #24]
 800a312:	3601      	adds	r6, #1
 800a314:	700a      	strb	r2, [r1, #0]
 800a316:	781a      	ldrb	r2, [r3, #0]
 800a318:	3201      	adds	r2, #1
 800a31a:	701a      	strb	r2, [r3, #0]
 800a31c:	e784      	b.n	800a228 <_dtoa_r+0x67c>
 800a31e:	2200      	movs	r2, #0
 800a320:	4baa      	ldr	r3, [pc, #680]	; (800a5cc <_dtoa_r+0xa20>)
 800a322:	f7f7 fc65 	bl	8001bf0 <__aeabi_dmul>
 800a326:	2200      	movs	r2, #0
 800a328:	2300      	movs	r3, #0
 800a32a:	0004      	movs	r4, r0
 800a32c:	000d      	movs	r5, r1
 800a32e:	f7f6 f88d 	bl	800044c <__aeabi_dcmpeq>
 800a332:	2800      	cmp	r0, #0
 800a334:	d09b      	beq.n	800a26e <_dtoa_r+0x6c2>
 800a336:	e7cf      	b.n	800a2d8 <_dtoa_r+0x72c>
 800a338:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a33a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a33c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a33e:	2d00      	cmp	r5, #0
 800a340:	d012      	beq.n	800a368 <_dtoa_r+0x7bc>
 800a342:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a344:	2a01      	cmp	r2, #1
 800a346:	dc66      	bgt.n	800a416 <_dtoa_r+0x86a>
 800a348:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a34a:	2a00      	cmp	r2, #0
 800a34c:	d05d      	beq.n	800a40a <_dtoa_r+0x85e>
 800a34e:	4aa0      	ldr	r2, [pc, #640]	; (800a5d0 <_dtoa_r+0xa24>)
 800a350:	189b      	adds	r3, r3, r2
 800a352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a354:	2101      	movs	r1, #1
 800a356:	18d2      	adds	r2, r2, r3
 800a358:	920a      	str	r2, [sp, #40]	; 0x28
 800a35a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a35c:	0038      	movs	r0, r7
 800a35e:	18d3      	adds	r3, r2, r3
 800a360:	930d      	str	r3, [sp, #52]	; 0x34
 800a362:	f000 ff25 	bl	800b1b0 <__i2b>
 800a366:	0005      	movs	r5, r0
 800a368:	2c00      	cmp	r4, #0
 800a36a:	dd0e      	ble.n	800a38a <_dtoa_r+0x7de>
 800a36c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a36e:	2b00      	cmp	r3, #0
 800a370:	dd0b      	ble.n	800a38a <_dtoa_r+0x7de>
 800a372:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a374:	0023      	movs	r3, r4
 800a376:	4294      	cmp	r4, r2
 800a378:	dd00      	ble.n	800a37c <_dtoa_r+0x7d0>
 800a37a:	0013      	movs	r3, r2
 800a37c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a37e:	1ae4      	subs	r4, r4, r3
 800a380:	1ad2      	subs	r2, r2, r3
 800a382:	920a      	str	r2, [sp, #40]	; 0x28
 800a384:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a386:	1ad3      	subs	r3, r2, r3
 800a388:	930d      	str	r3, [sp, #52]	; 0x34
 800a38a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d01f      	beq.n	800a3d0 <_dtoa_r+0x824>
 800a390:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a392:	2b00      	cmp	r3, #0
 800a394:	d054      	beq.n	800a440 <_dtoa_r+0x894>
 800a396:	2e00      	cmp	r6, #0
 800a398:	dd11      	ble.n	800a3be <_dtoa_r+0x812>
 800a39a:	0029      	movs	r1, r5
 800a39c:	0032      	movs	r2, r6
 800a39e:	0038      	movs	r0, r7
 800a3a0:	f000 ffcc 	bl	800b33c <__pow5mult>
 800a3a4:	9a05      	ldr	r2, [sp, #20]
 800a3a6:	0001      	movs	r1, r0
 800a3a8:	0005      	movs	r5, r0
 800a3aa:	0038      	movs	r0, r7
 800a3ac:	f000 ff16 	bl	800b1dc <__multiply>
 800a3b0:	9905      	ldr	r1, [sp, #20]
 800a3b2:	9014      	str	r0, [sp, #80]	; 0x50
 800a3b4:	0038      	movs	r0, r7
 800a3b6:	f000 fdff 	bl	800afb8 <_Bfree>
 800a3ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3bc:	9305      	str	r3, [sp, #20]
 800a3be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3c0:	1b9a      	subs	r2, r3, r6
 800a3c2:	42b3      	cmp	r3, r6
 800a3c4:	d004      	beq.n	800a3d0 <_dtoa_r+0x824>
 800a3c6:	0038      	movs	r0, r7
 800a3c8:	9905      	ldr	r1, [sp, #20]
 800a3ca:	f000 ffb7 	bl	800b33c <__pow5mult>
 800a3ce:	9005      	str	r0, [sp, #20]
 800a3d0:	2101      	movs	r1, #1
 800a3d2:	0038      	movs	r0, r7
 800a3d4:	f000 feec 	bl	800b1b0 <__i2b>
 800a3d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3da:	0006      	movs	r6, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	dd31      	ble.n	800a444 <_dtoa_r+0x898>
 800a3e0:	001a      	movs	r2, r3
 800a3e2:	0001      	movs	r1, r0
 800a3e4:	0038      	movs	r0, r7
 800a3e6:	f000 ffa9 	bl	800b33c <__pow5mult>
 800a3ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3ec:	0006      	movs	r6, r0
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	dd2d      	ble.n	800a44e <_dtoa_r+0x8a2>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	930e      	str	r3, [sp, #56]	; 0x38
 800a3f6:	6933      	ldr	r3, [r6, #16]
 800a3f8:	3303      	adds	r3, #3
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	18f3      	adds	r3, r6, r3
 800a3fe:	6858      	ldr	r0, [r3, #4]
 800a400:	f000 fe8e 	bl	800b120 <__hi0bits>
 800a404:	2320      	movs	r3, #32
 800a406:	1a18      	subs	r0, r3, r0
 800a408:	e039      	b.n	800a47e <_dtoa_r+0x8d2>
 800a40a:	2336      	movs	r3, #54	; 0x36
 800a40c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a40e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a410:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a412:	1a9b      	subs	r3, r3, r2
 800a414:	e79d      	b.n	800a352 <_dtoa_r+0x7a6>
 800a416:	9b07      	ldr	r3, [sp, #28]
 800a418:	1e5e      	subs	r6, r3, #1
 800a41a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a41c:	42b3      	cmp	r3, r6
 800a41e:	db07      	blt.n	800a430 <_dtoa_r+0x884>
 800a420:	1b9e      	subs	r6, r3, r6
 800a422:	9b07      	ldr	r3, [sp, #28]
 800a424:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a426:	2b00      	cmp	r3, #0
 800a428:	da93      	bge.n	800a352 <_dtoa_r+0x7a6>
 800a42a:	1ae4      	subs	r4, r4, r3
 800a42c:	2300      	movs	r3, #0
 800a42e:	e790      	b.n	800a352 <_dtoa_r+0x7a6>
 800a430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a432:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a434:	1af3      	subs	r3, r6, r3
 800a436:	18d3      	adds	r3, r2, r3
 800a438:	960e      	str	r6, [sp, #56]	; 0x38
 800a43a:	9315      	str	r3, [sp, #84]	; 0x54
 800a43c:	2600      	movs	r6, #0
 800a43e:	e7f0      	b.n	800a422 <_dtoa_r+0x876>
 800a440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a442:	e7c0      	b.n	800a3c6 <_dtoa_r+0x81a>
 800a444:	2300      	movs	r3, #0
 800a446:	930e      	str	r3, [sp, #56]	; 0x38
 800a448:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	dc13      	bgt.n	800a476 <_dtoa_r+0x8ca>
 800a44e:	2300      	movs	r3, #0
 800a450:	930e      	str	r3, [sp, #56]	; 0x38
 800a452:	9b08      	ldr	r3, [sp, #32]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10e      	bne.n	800a476 <_dtoa_r+0x8ca>
 800a458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a45a:	031b      	lsls	r3, r3, #12
 800a45c:	d10b      	bne.n	800a476 <_dtoa_r+0x8ca>
 800a45e:	4b5d      	ldr	r3, [pc, #372]	; (800a5d4 <_dtoa_r+0xa28>)
 800a460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a462:	4213      	tst	r3, r2
 800a464:	d007      	beq.n	800a476 <_dtoa_r+0x8ca>
 800a466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a468:	3301      	adds	r3, #1
 800a46a:	930a      	str	r3, [sp, #40]	; 0x28
 800a46c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a46e:	3301      	adds	r3, #1
 800a470:	930d      	str	r3, [sp, #52]	; 0x34
 800a472:	2301      	movs	r3, #1
 800a474:	930e      	str	r3, [sp, #56]	; 0x38
 800a476:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a478:	2001      	movs	r0, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1bb      	bne.n	800a3f6 <_dtoa_r+0x84a>
 800a47e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a480:	221f      	movs	r2, #31
 800a482:	1818      	adds	r0, r3, r0
 800a484:	0003      	movs	r3, r0
 800a486:	4013      	ands	r3, r2
 800a488:	4210      	tst	r0, r2
 800a48a:	d046      	beq.n	800a51a <_dtoa_r+0x96e>
 800a48c:	3201      	adds	r2, #1
 800a48e:	1ad2      	subs	r2, r2, r3
 800a490:	2a04      	cmp	r2, #4
 800a492:	dd3f      	ble.n	800a514 <_dtoa_r+0x968>
 800a494:	221c      	movs	r2, #28
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a49a:	18e4      	adds	r4, r4, r3
 800a49c:	18d2      	adds	r2, r2, r3
 800a49e:	920a      	str	r2, [sp, #40]	; 0x28
 800a4a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4a2:	18d3      	adds	r3, r2, r3
 800a4a4:	930d      	str	r3, [sp, #52]	; 0x34
 800a4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	dd05      	ble.n	800a4b8 <_dtoa_r+0x90c>
 800a4ac:	001a      	movs	r2, r3
 800a4ae:	0038      	movs	r0, r7
 800a4b0:	9905      	ldr	r1, [sp, #20]
 800a4b2:	f000 ff9f 	bl	800b3f4 <__lshift>
 800a4b6:	9005      	str	r0, [sp, #20]
 800a4b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	dd05      	ble.n	800a4ca <_dtoa_r+0x91e>
 800a4be:	0031      	movs	r1, r6
 800a4c0:	001a      	movs	r2, r3
 800a4c2:	0038      	movs	r0, r7
 800a4c4:	f000 ff96 	bl	800b3f4 <__lshift>
 800a4c8:	0006      	movs	r6, r0
 800a4ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d026      	beq.n	800a51e <_dtoa_r+0x972>
 800a4d0:	0031      	movs	r1, r6
 800a4d2:	9805      	ldr	r0, [sp, #20]
 800a4d4:	f000 fffc 	bl	800b4d0 <__mcmp>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	da20      	bge.n	800a51e <_dtoa_r+0x972>
 800a4dc:	9b02      	ldr	r3, [sp, #8]
 800a4de:	220a      	movs	r2, #10
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	9302      	str	r3, [sp, #8]
 800a4e4:	0038      	movs	r0, r7
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	9905      	ldr	r1, [sp, #20]
 800a4ea:	f000 fd89 	bl	800b000 <__multadd>
 800a4ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4f0:	9005      	str	r0, [sp, #20]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d100      	bne.n	800a4f8 <_dtoa_r+0x94c>
 800a4f6:	e166      	b.n	800a7c6 <_dtoa_r+0xc1a>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	0029      	movs	r1, r5
 800a4fc:	220a      	movs	r2, #10
 800a4fe:	0038      	movs	r0, r7
 800a500:	f000 fd7e 	bl	800b000 <__multadd>
 800a504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a506:	0005      	movs	r5, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	dc47      	bgt.n	800a59c <_dtoa_r+0x9f0>
 800a50c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a50e:	2b02      	cmp	r3, #2
 800a510:	dc0d      	bgt.n	800a52e <_dtoa_r+0x982>
 800a512:	e043      	b.n	800a59c <_dtoa_r+0x9f0>
 800a514:	2a04      	cmp	r2, #4
 800a516:	d0c6      	beq.n	800a4a6 <_dtoa_r+0x8fa>
 800a518:	0013      	movs	r3, r2
 800a51a:	331c      	adds	r3, #28
 800a51c:	e7bc      	b.n	800a498 <_dtoa_r+0x8ec>
 800a51e:	9b07      	ldr	r3, [sp, #28]
 800a520:	2b00      	cmp	r3, #0
 800a522:	dc35      	bgt.n	800a590 <_dtoa_r+0x9e4>
 800a524:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a526:	2b02      	cmp	r3, #2
 800a528:	dd32      	ble.n	800a590 <_dtoa_r+0x9e4>
 800a52a:	9b07      	ldr	r3, [sp, #28]
 800a52c:	930c      	str	r3, [sp, #48]	; 0x30
 800a52e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a530:	2b00      	cmp	r3, #0
 800a532:	d10c      	bne.n	800a54e <_dtoa_r+0x9a2>
 800a534:	0031      	movs	r1, r6
 800a536:	2205      	movs	r2, #5
 800a538:	0038      	movs	r0, r7
 800a53a:	f000 fd61 	bl	800b000 <__multadd>
 800a53e:	0006      	movs	r6, r0
 800a540:	0001      	movs	r1, r0
 800a542:	9805      	ldr	r0, [sp, #20]
 800a544:	f000 ffc4 	bl	800b4d0 <__mcmp>
 800a548:	2800      	cmp	r0, #0
 800a54a:	dd00      	ble.n	800a54e <_dtoa_r+0x9a2>
 800a54c:	e5a5      	b.n	800a09a <_dtoa_r+0x4ee>
 800a54e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a550:	43db      	mvns	r3, r3
 800a552:	9302      	str	r3, [sp, #8]
 800a554:	9b06      	ldr	r3, [sp, #24]
 800a556:	9308      	str	r3, [sp, #32]
 800a558:	2400      	movs	r4, #0
 800a55a:	0031      	movs	r1, r6
 800a55c:	0038      	movs	r0, r7
 800a55e:	f000 fd2b 	bl	800afb8 <_Bfree>
 800a562:	2d00      	cmp	r5, #0
 800a564:	d100      	bne.n	800a568 <_dtoa_r+0x9bc>
 800a566:	e6b7      	b.n	800a2d8 <_dtoa_r+0x72c>
 800a568:	2c00      	cmp	r4, #0
 800a56a:	d005      	beq.n	800a578 <_dtoa_r+0x9cc>
 800a56c:	42ac      	cmp	r4, r5
 800a56e:	d003      	beq.n	800a578 <_dtoa_r+0x9cc>
 800a570:	0021      	movs	r1, r4
 800a572:	0038      	movs	r0, r7
 800a574:	f000 fd20 	bl	800afb8 <_Bfree>
 800a578:	0029      	movs	r1, r5
 800a57a:	0038      	movs	r0, r7
 800a57c:	f000 fd1c 	bl	800afb8 <_Bfree>
 800a580:	e6aa      	b.n	800a2d8 <_dtoa_r+0x72c>
 800a582:	2600      	movs	r6, #0
 800a584:	0035      	movs	r5, r6
 800a586:	e7e2      	b.n	800a54e <_dtoa_r+0x9a2>
 800a588:	9602      	str	r6, [sp, #8]
 800a58a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800a58c:	0035      	movs	r5, r6
 800a58e:	e584      	b.n	800a09a <_dtoa_r+0x4ee>
 800a590:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a592:	2b00      	cmp	r3, #0
 800a594:	d100      	bne.n	800a598 <_dtoa_r+0x9ec>
 800a596:	e0ce      	b.n	800a736 <_dtoa_r+0xb8a>
 800a598:	9b07      	ldr	r3, [sp, #28]
 800a59a:	930c      	str	r3, [sp, #48]	; 0x30
 800a59c:	2c00      	cmp	r4, #0
 800a59e:	dd05      	ble.n	800a5ac <_dtoa_r+0xa00>
 800a5a0:	0029      	movs	r1, r5
 800a5a2:	0022      	movs	r2, r4
 800a5a4:	0038      	movs	r0, r7
 800a5a6:	f000 ff25 	bl	800b3f4 <__lshift>
 800a5aa:	0005      	movs	r5, r0
 800a5ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5ae:	0028      	movs	r0, r5
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d022      	beq.n	800a5fa <_dtoa_r+0xa4e>
 800a5b4:	0038      	movs	r0, r7
 800a5b6:	6869      	ldr	r1, [r5, #4]
 800a5b8:	f000 fcba 	bl	800af30 <_Balloc>
 800a5bc:	1e04      	subs	r4, r0, #0
 800a5be:	d10f      	bne.n	800a5e0 <_dtoa_r+0xa34>
 800a5c0:	0002      	movs	r2, r0
 800a5c2:	4b05      	ldr	r3, [pc, #20]	; (800a5d8 <_dtoa_r+0xa2c>)
 800a5c4:	4905      	ldr	r1, [pc, #20]	; (800a5dc <_dtoa_r+0xa30>)
 800a5c6:	f7ff fb06 	bl	8009bd6 <_dtoa_r+0x2a>
 800a5ca:	46c0      	nop			; (mov r8, r8)
 800a5cc:	40240000 	.word	0x40240000
 800a5d0:	00000433 	.word	0x00000433
 800a5d4:	7ff00000 	.word	0x7ff00000
 800a5d8:	0800ce70 	.word	0x0800ce70
 800a5dc:	000002ea 	.word	0x000002ea
 800a5e0:	0029      	movs	r1, r5
 800a5e2:	692b      	ldr	r3, [r5, #16]
 800a5e4:	310c      	adds	r1, #12
 800a5e6:	1c9a      	adds	r2, r3, #2
 800a5e8:	0092      	lsls	r2, r2, #2
 800a5ea:	300c      	adds	r0, #12
 800a5ec:	f000 fc97 	bl	800af1e <memcpy>
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	0021      	movs	r1, r4
 800a5f4:	0038      	movs	r0, r7
 800a5f6:	f000 fefd 	bl	800b3f4 <__lshift>
 800a5fa:	9b06      	ldr	r3, [sp, #24]
 800a5fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a600:	3b01      	subs	r3, #1
 800a602:	189b      	adds	r3, r3, r2
 800a604:	2201      	movs	r2, #1
 800a606:	002c      	movs	r4, r5
 800a608:	0005      	movs	r5, r0
 800a60a:	9314      	str	r3, [sp, #80]	; 0x50
 800a60c:	9b08      	ldr	r3, [sp, #32]
 800a60e:	4013      	ands	r3, r2
 800a610:	930f      	str	r3, [sp, #60]	; 0x3c
 800a612:	0031      	movs	r1, r6
 800a614:	9805      	ldr	r0, [sp, #20]
 800a616:	f7ff fa3d 	bl	8009a94 <quorem>
 800a61a:	0003      	movs	r3, r0
 800a61c:	0021      	movs	r1, r4
 800a61e:	3330      	adds	r3, #48	; 0x30
 800a620:	900d      	str	r0, [sp, #52]	; 0x34
 800a622:	9805      	ldr	r0, [sp, #20]
 800a624:	9307      	str	r3, [sp, #28]
 800a626:	f000 ff53 	bl	800b4d0 <__mcmp>
 800a62a:	002a      	movs	r2, r5
 800a62c:	900e      	str	r0, [sp, #56]	; 0x38
 800a62e:	0031      	movs	r1, r6
 800a630:	0038      	movs	r0, r7
 800a632:	f000 ff69 	bl	800b508 <__mdiff>
 800a636:	68c3      	ldr	r3, [r0, #12]
 800a638:	9008      	str	r0, [sp, #32]
 800a63a:	9310      	str	r3, [sp, #64]	; 0x40
 800a63c:	2301      	movs	r3, #1
 800a63e:	930c      	str	r3, [sp, #48]	; 0x30
 800a640:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a642:	2b00      	cmp	r3, #0
 800a644:	d104      	bne.n	800a650 <_dtoa_r+0xaa4>
 800a646:	0001      	movs	r1, r0
 800a648:	9805      	ldr	r0, [sp, #20]
 800a64a:	f000 ff41 	bl	800b4d0 <__mcmp>
 800a64e:	900c      	str	r0, [sp, #48]	; 0x30
 800a650:	0038      	movs	r0, r7
 800a652:	9908      	ldr	r1, [sp, #32]
 800a654:	f000 fcb0 	bl	800afb8 <_Bfree>
 800a658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a65a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a65c:	3301      	adds	r3, #1
 800a65e:	9308      	str	r3, [sp, #32]
 800a660:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a662:	4313      	orrs	r3, r2
 800a664:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a666:	4313      	orrs	r3, r2
 800a668:	d10c      	bne.n	800a684 <_dtoa_r+0xad8>
 800a66a:	9b07      	ldr	r3, [sp, #28]
 800a66c:	2b39      	cmp	r3, #57	; 0x39
 800a66e:	d026      	beq.n	800a6be <_dtoa_r+0xb12>
 800a670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a672:	2b00      	cmp	r3, #0
 800a674:	dd02      	ble.n	800a67c <_dtoa_r+0xad0>
 800a676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a678:	3331      	adds	r3, #49	; 0x31
 800a67a:	9307      	str	r3, [sp, #28]
 800a67c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a67e:	9a07      	ldr	r2, [sp, #28]
 800a680:	701a      	strb	r2, [r3, #0]
 800a682:	e76a      	b.n	800a55a <_dtoa_r+0x9ae>
 800a684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a686:	2b00      	cmp	r3, #0
 800a688:	db04      	blt.n	800a694 <_dtoa_r+0xae8>
 800a68a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a68c:	4313      	orrs	r3, r2
 800a68e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a690:	4313      	orrs	r3, r2
 800a692:	d11f      	bne.n	800a6d4 <_dtoa_r+0xb28>
 800a694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a696:	2b00      	cmp	r3, #0
 800a698:	ddf0      	ble.n	800a67c <_dtoa_r+0xad0>
 800a69a:	9905      	ldr	r1, [sp, #20]
 800a69c:	2201      	movs	r2, #1
 800a69e:	0038      	movs	r0, r7
 800a6a0:	f000 fea8 	bl	800b3f4 <__lshift>
 800a6a4:	0031      	movs	r1, r6
 800a6a6:	9005      	str	r0, [sp, #20]
 800a6a8:	f000 ff12 	bl	800b4d0 <__mcmp>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	dc03      	bgt.n	800a6b8 <_dtoa_r+0xb0c>
 800a6b0:	d1e4      	bne.n	800a67c <_dtoa_r+0xad0>
 800a6b2:	9b07      	ldr	r3, [sp, #28]
 800a6b4:	07db      	lsls	r3, r3, #31
 800a6b6:	d5e1      	bpl.n	800a67c <_dtoa_r+0xad0>
 800a6b8:	9b07      	ldr	r3, [sp, #28]
 800a6ba:	2b39      	cmp	r3, #57	; 0x39
 800a6bc:	d1db      	bne.n	800a676 <_dtoa_r+0xaca>
 800a6be:	2339      	movs	r3, #57	; 0x39
 800a6c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6c2:	7013      	strb	r3, [r2, #0]
 800a6c4:	9b08      	ldr	r3, [sp, #32]
 800a6c6:	9308      	str	r3, [sp, #32]
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	781a      	ldrb	r2, [r3, #0]
 800a6cc:	2a39      	cmp	r2, #57	; 0x39
 800a6ce:	d068      	beq.n	800a7a2 <_dtoa_r+0xbf6>
 800a6d0:	3201      	adds	r2, #1
 800a6d2:	e7d5      	b.n	800a680 <_dtoa_r+0xad4>
 800a6d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	dd07      	ble.n	800a6ea <_dtoa_r+0xb3e>
 800a6da:	9b07      	ldr	r3, [sp, #28]
 800a6dc:	2b39      	cmp	r3, #57	; 0x39
 800a6de:	d0ee      	beq.n	800a6be <_dtoa_r+0xb12>
 800a6e0:	9b07      	ldr	r3, [sp, #28]
 800a6e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	7013      	strb	r3, [r2, #0]
 800a6e8:	e737      	b.n	800a55a <_dtoa_r+0x9ae>
 800a6ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ec:	9a07      	ldr	r2, [sp, #28]
 800a6ee:	701a      	strb	r2, [r3, #0]
 800a6f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d03e      	beq.n	800a776 <_dtoa_r+0xbca>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	220a      	movs	r2, #10
 800a6fc:	9905      	ldr	r1, [sp, #20]
 800a6fe:	0038      	movs	r0, r7
 800a700:	f000 fc7e 	bl	800b000 <__multadd>
 800a704:	2300      	movs	r3, #0
 800a706:	9005      	str	r0, [sp, #20]
 800a708:	220a      	movs	r2, #10
 800a70a:	0021      	movs	r1, r4
 800a70c:	0038      	movs	r0, r7
 800a70e:	42ac      	cmp	r4, r5
 800a710:	d106      	bne.n	800a720 <_dtoa_r+0xb74>
 800a712:	f000 fc75 	bl	800b000 <__multadd>
 800a716:	0004      	movs	r4, r0
 800a718:	0005      	movs	r5, r0
 800a71a:	9b08      	ldr	r3, [sp, #32]
 800a71c:	930a      	str	r3, [sp, #40]	; 0x28
 800a71e:	e778      	b.n	800a612 <_dtoa_r+0xa66>
 800a720:	f000 fc6e 	bl	800b000 <__multadd>
 800a724:	0029      	movs	r1, r5
 800a726:	0004      	movs	r4, r0
 800a728:	2300      	movs	r3, #0
 800a72a:	220a      	movs	r2, #10
 800a72c:	0038      	movs	r0, r7
 800a72e:	f000 fc67 	bl	800b000 <__multadd>
 800a732:	0005      	movs	r5, r0
 800a734:	e7f1      	b.n	800a71a <_dtoa_r+0xb6e>
 800a736:	9b07      	ldr	r3, [sp, #28]
 800a738:	930c      	str	r3, [sp, #48]	; 0x30
 800a73a:	2400      	movs	r4, #0
 800a73c:	0031      	movs	r1, r6
 800a73e:	9805      	ldr	r0, [sp, #20]
 800a740:	f7ff f9a8 	bl	8009a94 <quorem>
 800a744:	9b06      	ldr	r3, [sp, #24]
 800a746:	3030      	adds	r0, #48	; 0x30
 800a748:	5518      	strb	r0, [r3, r4]
 800a74a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a74c:	3401      	adds	r4, #1
 800a74e:	9007      	str	r0, [sp, #28]
 800a750:	42a3      	cmp	r3, r4
 800a752:	dd07      	ble.n	800a764 <_dtoa_r+0xbb8>
 800a754:	2300      	movs	r3, #0
 800a756:	220a      	movs	r2, #10
 800a758:	0038      	movs	r0, r7
 800a75a:	9905      	ldr	r1, [sp, #20]
 800a75c:	f000 fc50 	bl	800b000 <__multadd>
 800a760:	9005      	str	r0, [sp, #20]
 800a762:	e7eb      	b.n	800a73c <_dtoa_r+0xb90>
 800a764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a766:	2001      	movs	r0, #1
 800a768:	2b00      	cmp	r3, #0
 800a76a:	dd00      	ble.n	800a76e <_dtoa_r+0xbc2>
 800a76c:	0018      	movs	r0, r3
 800a76e:	2400      	movs	r4, #0
 800a770:	9b06      	ldr	r3, [sp, #24]
 800a772:	181b      	adds	r3, r3, r0
 800a774:	9308      	str	r3, [sp, #32]
 800a776:	9905      	ldr	r1, [sp, #20]
 800a778:	2201      	movs	r2, #1
 800a77a:	0038      	movs	r0, r7
 800a77c:	f000 fe3a 	bl	800b3f4 <__lshift>
 800a780:	0031      	movs	r1, r6
 800a782:	9005      	str	r0, [sp, #20]
 800a784:	f000 fea4 	bl	800b4d0 <__mcmp>
 800a788:	2800      	cmp	r0, #0
 800a78a:	dc9b      	bgt.n	800a6c4 <_dtoa_r+0xb18>
 800a78c:	d102      	bne.n	800a794 <_dtoa_r+0xbe8>
 800a78e:	9b07      	ldr	r3, [sp, #28]
 800a790:	07db      	lsls	r3, r3, #31
 800a792:	d497      	bmi.n	800a6c4 <_dtoa_r+0xb18>
 800a794:	9b08      	ldr	r3, [sp, #32]
 800a796:	9308      	str	r3, [sp, #32]
 800a798:	3b01      	subs	r3, #1
 800a79a:	781a      	ldrb	r2, [r3, #0]
 800a79c:	2a30      	cmp	r2, #48	; 0x30
 800a79e:	d0fa      	beq.n	800a796 <_dtoa_r+0xbea>
 800a7a0:	e6db      	b.n	800a55a <_dtoa_r+0x9ae>
 800a7a2:	9a06      	ldr	r2, [sp, #24]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d18e      	bne.n	800a6c6 <_dtoa_r+0xb1a>
 800a7a8:	9b02      	ldr	r3, [sp, #8]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	9302      	str	r3, [sp, #8]
 800a7ae:	2331      	movs	r3, #49	; 0x31
 800a7b0:	e799      	b.n	800a6e6 <_dtoa_r+0xb3a>
 800a7b2:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <_dtoa_r+0xc2c>)
 800a7b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a7b6:	9306      	str	r3, [sp, #24]
 800a7b8:	4b08      	ldr	r3, [pc, #32]	; (800a7dc <_dtoa_r+0xc30>)
 800a7ba:	2a00      	cmp	r2, #0
 800a7bc:	d001      	beq.n	800a7c2 <_dtoa_r+0xc16>
 800a7be:	f7ff fa3f 	bl	8009c40 <_dtoa_r+0x94>
 800a7c2:	f7ff fa3f 	bl	8009c44 <_dtoa_r+0x98>
 800a7c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	dcb6      	bgt.n	800a73a <_dtoa_r+0xb8e>
 800a7cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	dd00      	ble.n	800a7d4 <_dtoa_r+0xc28>
 800a7d2:	e6ac      	b.n	800a52e <_dtoa_r+0x982>
 800a7d4:	e7b1      	b.n	800a73a <_dtoa_r+0xb8e>
 800a7d6:	46c0      	nop			; (mov r8, r8)
 800a7d8:	0800cdf1 	.word	0x0800cdf1
 800a7dc:	0800cdf9 	.word	0x0800cdf9

0800a7e0 <rshift>:
 800a7e0:	0002      	movs	r2, r0
 800a7e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7e4:	6904      	ldr	r4, [r0, #16]
 800a7e6:	3214      	adds	r2, #20
 800a7e8:	0013      	movs	r3, r2
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	114f      	asrs	r7, r1, #5
 800a7ee:	42bc      	cmp	r4, r7
 800a7f0:	dd31      	ble.n	800a856 <rshift+0x76>
 800a7f2:	00bb      	lsls	r3, r7, #2
 800a7f4:	18d3      	adds	r3, r2, r3
 800a7f6:	261f      	movs	r6, #31
 800a7f8:	9301      	str	r3, [sp, #4]
 800a7fa:	000b      	movs	r3, r1
 800a7fc:	00a5      	lsls	r5, r4, #2
 800a7fe:	4033      	ands	r3, r6
 800a800:	1955      	adds	r5, r2, r5
 800a802:	9302      	str	r3, [sp, #8]
 800a804:	4231      	tst	r1, r6
 800a806:	d10c      	bne.n	800a822 <rshift+0x42>
 800a808:	0016      	movs	r6, r2
 800a80a:	9901      	ldr	r1, [sp, #4]
 800a80c:	428d      	cmp	r5, r1
 800a80e:	d838      	bhi.n	800a882 <rshift+0xa2>
 800a810:	9901      	ldr	r1, [sp, #4]
 800a812:	2300      	movs	r3, #0
 800a814:	3903      	subs	r1, #3
 800a816:	428d      	cmp	r5, r1
 800a818:	d301      	bcc.n	800a81e <rshift+0x3e>
 800a81a:	1be3      	subs	r3, r4, r7
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	18d3      	adds	r3, r2, r3
 800a820:	e019      	b.n	800a856 <rshift+0x76>
 800a822:	2120      	movs	r1, #32
 800a824:	9b02      	ldr	r3, [sp, #8]
 800a826:	9e01      	ldr	r6, [sp, #4]
 800a828:	1acb      	subs	r3, r1, r3
 800a82a:	9303      	str	r3, [sp, #12]
 800a82c:	ce02      	ldmia	r6!, {r1}
 800a82e:	9b02      	ldr	r3, [sp, #8]
 800a830:	4694      	mov	ip, r2
 800a832:	40d9      	lsrs	r1, r3
 800a834:	9100      	str	r1, [sp, #0]
 800a836:	42b5      	cmp	r5, r6
 800a838:	d816      	bhi.n	800a868 <rshift+0x88>
 800a83a:	9e01      	ldr	r6, [sp, #4]
 800a83c:	2300      	movs	r3, #0
 800a83e:	3601      	adds	r6, #1
 800a840:	42b5      	cmp	r5, r6
 800a842:	d302      	bcc.n	800a84a <rshift+0x6a>
 800a844:	1be3      	subs	r3, r4, r7
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	3b04      	subs	r3, #4
 800a84a:	9900      	ldr	r1, [sp, #0]
 800a84c:	18d3      	adds	r3, r2, r3
 800a84e:	6019      	str	r1, [r3, #0]
 800a850:	2900      	cmp	r1, #0
 800a852:	d000      	beq.n	800a856 <rshift+0x76>
 800a854:	3304      	adds	r3, #4
 800a856:	1a99      	subs	r1, r3, r2
 800a858:	1089      	asrs	r1, r1, #2
 800a85a:	6101      	str	r1, [r0, #16]
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d101      	bne.n	800a864 <rshift+0x84>
 800a860:	2300      	movs	r3, #0
 800a862:	6143      	str	r3, [r0, #20]
 800a864:	b005      	add	sp, #20
 800a866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a868:	6833      	ldr	r3, [r6, #0]
 800a86a:	9903      	ldr	r1, [sp, #12]
 800a86c:	408b      	lsls	r3, r1
 800a86e:	9900      	ldr	r1, [sp, #0]
 800a870:	4319      	orrs	r1, r3
 800a872:	4663      	mov	r3, ip
 800a874:	c302      	stmia	r3!, {r1}
 800a876:	469c      	mov	ip, r3
 800a878:	ce02      	ldmia	r6!, {r1}
 800a87a:	9b02      	ldr	r3, [sp, #8]
 800a87c:	40d9      	lsrs	r1, r3
 800a87e:	9100      	str	r1, [sp, #0]
 800a880:	e7d9      	b.n	800a836 <rshift+0x56>
 800a882:	c908      	ldmia	r1!, {r3}
 800a884:	c608      	stmia	r6!, {r3}
 800a886:	e7c1      	b.n	800a80c <rshift+0x2c>

0800a888 <__hexdig_fun>:
 800a888:	0002      	movs	r2, r0
 800a88a:	3a30      	subs	r2, #48	; 0x30
 800a88c:	0003      	movs	r3, r0
 800a88e:	2a09      	cmp	r2, #9
 800a890:	d802      	bhi.n	800a898 <__hexdig_fun+0x10>
 800a892:	3b20      	subs	r3, #32
 800a894:	b2d8      	uxtb	r0, r3
 800a896:	4770      	bx	lr
 800a898:	0002      	movs	r2, r0
 800a89a:	3a61      	subs	r2, #97	; 0x61
 800a89c:	2a05      	cmp	r2, #5
 800a89e:	d801      	bhi.n	800a8a4 <__hexdig_fun+0x1c>
 800a8a0:	3b47      	subs	r3, #71	; 0x47
 800a8a2:	e7f7      	b.n	800a894 <__hexdig_fun+0xc>
 800a8a4:	001a      	movs	r2, r3
 800a8a6:	3a41      	subs	r2, #65	; 0x41
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	2a05      	cmp	r2, #5
 800a8ac:	d8f3      	bhi.n	800a896 <__hexdig_fun+0xe>
 800a8ae:	3b27      	subs	r3, #39	; 0x27
 800a8b0:	e7f0      	b.n	800a894 <__hexdig_fun+0xc>
	...

0800a8b4 <__gethex>:
 800a8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8b6:	b08d      	sub	sp, #52	; 0x34
 800a8b8:	930a      	str	r3, [sp, #40]	; 0x28
 800a8ba:	4bbf      	ldr	r3, [pc, #764]	; (800abb8 <__gethex+0x304>)
 800a8bc:	9005      	str	r0, [sp, #20]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	9109      	str	r1, [sp, #36]	; 0x24
 800a8c2:	0018      	movs	r0, r3
 800a8c4:	9202      	str	r2, [sp, #8]
 800a8c6:	9307      	str	r3, [sp, #28]
 800a8c8:	f7f5 fc1e 	bl	8000108 <strlen>
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	9b07      	ldr	r3, [sp, #28]
 800a8d0:	4252      	negs	r2, r2
 800a8d2:	181b      	adds	r3, r3, r0
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	9003      	str	r0, [sp, #12]
 800a8da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8de:	6819      	ldr	r1, [r3, #0]
 800a8e0:	1c8b      	adds	r3, r1, #2
 800a8e2:	1a52      	subs	r2, r2, r1
 800a8e4:	18d1      	adds	r1, r2, r3
 800a8e6:	9301      	str	r3, [sp, #4]
 800a8e8:	9108      	str	r1, [sp, #32]
 800a8ea:	9901      	ldr	r1, [sp, #4]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	7808      	ldrb	r0, [r1, #0]
 800a8f0:	2830      	cmp	r0, #48	; 0x30
 800a8f2:	d0f7      	beq.n	800a8e4 <__gethex+0x30>
 800a8f4:	f7ff ffc8 	bl	800a888 <__hexdig_fun>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	001c      	movs	r4, r3
 800a8fc:	9304      	str	r3, [sp, #16]
 800a8fe:	4298      	cmp	r0, r3
 800a900:	d11f      	bne.n	800a942 <__gethex+0x8e>
 800a902:	9a03      	ldr	r2, [sp, #12]
 800a904:	9907      	ldr	r1, [sp, #28]
 800a906:	9801      	ldr	r0, [sp, #4]
 800a908:	f001 fa64 	bl	800bdd4 <strncmp>
 800a90c:	0007      	movs	r7, r0
 800a90e:	42a0      	cmp	r0, r4
 800a910:	d000      	beq.n	800a914 <__gethex+0x60>
 800a912:	e06b      	b.n	800a9ec <__gethex+0x138>
 800a914:	9b01      	ldr	r3, [sp, #4]
 800a916:	9a03      	ldr	r2, [sp, #12]
 800a918:	5c98      	ldrb	r0, [r3, r2]
 800a91a:	189d      	adds	r5, r3, r2
 800a91c:	f7ff ffb4 	bl	800a888 <__hexdig_fun>
 800a920:	2301      	movs	r3, #1
 800a922:	9304      	str	r3, [sp, #16]
 800a924:	42a0      	cmp	r0, r4
 800a926:	d030      	beq.n	800a98a <__gethex+0xd6>
 800a928:	9501      	str	r5, [sp, #4]
 800a92a:	9b01      	ldr	r3, [sp, #4]
 800a92c:	7818      	ldrb	r0, [r3, #0]
 800a92e:	2830      	cmp	r0, #48	; 0x30
 800a930:	d009      	beq.n	800a946 <__gethex+0x92>
 800a932:	f7ff ffa9 	bl	800a888 <__hexdig_fun>
 800a936:	4242      	negs	r2, r0
 800a938:	4142      	adcs	r2, r0
 800a93a:	2301      	movs	r3, #1
 800a93c:	002c      	movs	r4, r5
 800a93e:	9204      	str	r2, [sp, #16]
 800a940:	9308      	str	r3, [sp, #32]
 800a942:	9d01      	ldr	r5, [sp, #4]
 800a944:	e004      	b.n	800a950 <__gethex+0x9c>
 800a946:	9b01      	ldr	r3, [sp, #4]
 800a948:	3301      	adds	r3, #1
 800a94a:	9301      	str	r3, [sp, #4]
 800a94c:	e7ed      	b.n	800a92a <__gethex+0x76>
 800a94e:	3501      	adds	r5, #1
 800a950:	7828      	ldrb	r0, [r5, #0]
 800a952:	f7ff ff99 	bl	800a888 <__hexdig_fun>
 800a956:	1e07      	subs	r7, r0, #0
 800a958:	d1f9      	bne.n	800a94e <__gethex+0x9a>
 800a95a:	0028      	movs	r0, r5
 800a95c:	9a03      	ldr	r2, [sp, #12]
 800a95e:	9907      	ldr	r1, [sp, #28]
 800a960:	f001 fa38 	bl	800bdd4 <strncmp>
 800a964:	2800      	cmp	r0, #0
 800a966:	d10e      	bne.n	800a986 <__gethex+0xd2>
 800a968:	2c00      	cmp	r4, #0
 800a96a:	d107      	bne.n	800a97c <__gethex+0xc8>
 800a96c:	9b03      	ldr	r3, [sp, #12]
 800a96e:	18ed      	adds	r5, r5, r3
 800a970:	002c      	movs	r4, r5
 800a972:	7828      	ldrb	r0, [r5, #0]
 800a974:	f7ff ff88 	bl	800a888 <__hexdig_fun>
 800a978:	2800      	cmp	r0, #0
 800a97a:	d102      	bne.n	800a982 <__gethex+0xce>
 800a97c:	1b64      	subs	r4, r4, r5
 800a97e:	00a7      	lsls	r7, r4, #2
 800a980:	e003      	b.n	800a98a <__gethex+0xd6>
 800a982:	3501      	adds	r5, #1
 800a984:	e7f5      	b.n	800a972 <__gethex+0xbe>
 800a986:	2c00      	cmp	r4, #0
 800a988:	d1f8      	bne.n	800a97c <__gethex+0xc8>
 800a98a:	2220      	movs	r2, #32
 800a98c:	782b      	ldrb	r3, [r5, #0]
 800a98e:	002e      	movs	r6, r5
 800a990:	4393      	bics	r3, r2
 800a992:	2b50      	cmp	r3, #80	; 0x50
 800a994:	d11d      	bne.n	800a9d2 <__gethex+0x11e>
 800a996:	786b      	ldrb	r3, [r5, #1]
 800a998:	2b2b      	cmp	r3, #43	; 0x2b
 800a99a:	d02c      	beq.n	800a9f6 <__gethex+0x142>
 800a99c:	2b2d      	cmp	r3, #45	; 0x2d
 800a99e:	d02e      	beq.n	800a9fe <__gethex+0x14a>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	1c6e      	adds	r6, r5, #1
 800a9a4:	9306      	str	r3, [sp, #24]
 800a9a6:	7830      	ldrb	r0, [r6, #0]
 800a9a8:	f7ff ff6e 	bl	800a888 <__hexdig_fun>
 800a9ac:	1e43      	subs	r3, r0, #1
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	2b18      	cmp	r3, #24
 800a9b2:	d82b      	bhi.n	800aa0c <__gethex+0x158>
 800a9b4:	3810      	subs	r0, #16
 800a9b6:	0004      	movs	r4, r0
 800a9b8:	7870      	ldrb	r0, [r6, #1]
 800a9ba:	f7ff ff65 	bl	800a888 <__hexdig_fun>
 800a9be:	1e43      	subs	r3, r0, #1
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	3601      	adds	r6, #1
 800a9c4:	2b18      	cmp	r3, #24
 800a9c6:	d91c      	bls.n	800aa02 <__gethex+0x14e>
 800a9c8:	9b06      	ldr	r3, [sp, #24]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d000      	beq.n	800a9d0 <__gethex+0x11c>
 800a9ce:	4264      	negs	r4, r4
 800a9d0:	193f      	adds	r7, r7, r4
 800a9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d4:	601e      	str	r6, [r3, #0]
 800a9d6:	9b04      	ldr	r3, [sp, #16]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d019      	beq.n	800aa10 <__gethex+0x15c>
 800a9dc:	2600      	movs	r6, #0
 800a9de:	9b08      	ldr	r3, [sp, #32]
 800a9e0:	42b3      	cmp	r3, r6
 800a9e2:	d100      	bne.n	800a9e6 <__gethex+0x132>
 800a9e4:	3606      	adds	r6, #6
 800a9e6:	0030      	movs	r0, r6
 800a9e8:	b00d      	add	sp, #52	; 0x34
 800a9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	2700      	movs	r7, #0
 800a9f0:	9d01      	ldr	r5, [sp, #4]
 800a9f2:	9304      	str	r3, [sp, #16]
 800a9f4:	e7c9      	b.n	800a98a <__gethex+0xd6>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	9306      	str	r3, [sp, #24]
 800a9fa:	1cae      	adds	r6, r5, #2
 800a9fc:	e7d3      	b.n	800a9a6 <__gethex+0xf2>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e7fa      	b.n	800a9f8 <__gethex+0x144>
 800aa02:	230a      	movs	r3, #10
 800aa04:	435c      	muls	r4, r3
 800aa06:	1824      	adds	r4, r4, r0
 800aa08:	3c10      	subs	r4, #16
 800aa0a:	e7d5      	b.n	800a9b8 <__gethex+0x104>
 800aa0c:	002e      	movs	r6, r5
 800aa0e:	e7e0      	b.n	800a9d2 <__gethex+0x11e>
 800aa10:	9b01      	ldr	r3, [sp, #4]
 800aa12:	9904      	ldr	r1, [sp, #16]
 800aa14:	1aeb      	subs	r3, r5, r3
 800aa16:	3b01      	subs	r3, #1
 800aa18:	2b07      	cmp	r3, #7
 800aa1a:	dc0a      	bgt.n	800aa32 <__gethex+0x17e>
 800aa1c:	9805      	ldr	r0, [sp, #20]
 800aa1e:	f000 fa87 	bl	800af30 <_Balloc>
 800aa22:	1e04      	subs	r4, r0, #0
 800aa24:	d108      	bne.n	800aa38 <__gethex+0x184>
 800aa26:	0002      	movs	r2, r0
 800aa28:	21de      	movs	r1, #222	; 0xde
 800aa2a:	4b64      	ldr	r3, [pc, #400]	; (800abbc <__gethex+0x308>)
 800aa2c:	4864      	ldr	r0, [pc, #400]	; (800abc0 <__gethex+0x30c>)
 800aa2e:	f001 f9f1 	bl	800be14 <__assert_func>
 800aa32:	3101      	adds	r1, #1
 800aa34:	105b      	asrs	r3, r3, #1
 800aa36:	e7ef      	b.n	800aa18 <__gethex+0x164>
 800aa38:	0003      	movs	r3, r0
 800aa3a:	3314      	adds	r3, #20
 800aa3c:	9304      	str	r3, [sp, #16]
 800aa3e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa40:	2300      	movs	r3, #0
 800aa42:	001e      	movs	r6, r3
 800aa44:	9306      	str	r3, [sp, #24]
 800aa46:	9b01      	ldr	r3, [sp, #4]
 800aa48:	42ab      	cmp	r3, r5
 800aa4a:	d340      	bcc.n	800aace <__gethex+0x21a>
 800aa4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aa4e:	9b04      	ldr	r3, [sp, #16]
 800aa50:	c540      	stmia	r5!, {r6}
 800aa52:	1aed      	subs	r5, r5, r3
 800aa54:	10ad      	asrs	r5, r5, #2
 800aa56:	0030      	movs	r0, r6
 800aa58:	6125      	str	r5, [r4, #16]
 800aa5a:	f000 fb61 	bl	800b120 <__hi0bits>
 800aa5e:	9b02      	ldr	r3, [sp, #8]
 800aa60:	016d      	lsls	r5, r5, #5
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	1a2e      	subs	r6, r5, r0
 800aa66:	9301      	str	r3, [sp, #4]
 800aa68:	429e      	cmp	r6, r3
 800aa6a:	dd5a      	ble.n	800ab22 <__gethex+0x26e>
 800aa6c:	1af6      	subs	r6, r6, r3
 800aa6e:	0031      	movs	r1, r6
 800aa70:	0020      	movs	r0, r4
 800aa72:	f000 ff03 	bl	800b87c <__any_on>
 800aa76:	1e05      	subs	r5, r0, #0
 800aa78:	d016      	beq.n	800aaa8 <__gethex+0x1f4>
 800aa7a:	2501      	movs	r5, #1
 800aa7c:	211f      	movs	r1, #31
 800aa7e:	0028      	movs	r0, r5
 800aa80:	1e73      	subs	r3, r6, #1
 800aa82:	4019      	ands	r1, r3
 800aa84:	4088      	lsls	r0, r1
 800aa86:	0001      	movs	r1, r0
 800aa88:	115a      	asrs	r2, r3, #5
 800aa8a:	9804      	ldr	r0, [sp, #16]
 800aa8c:	0092      	lsls	r2, r2, #2
 800aa8e:	5812      	ldr	r2, [r2, r0]
 800aa90:	420a      	tst	r2, r1
 800aa92:	d009      	beq.n	800aaa8 <__gethex+0x1f4>
 800aa94:	42ab      	cmp	r3, r5
 800aa96:	dd06      	ble.n	800aaa6 <__gethex+0x1f2>
 800aa98:	0020      	movs	r0, r4
 800aa9a:	1eb1      	subs	r1, r6, #2
 800aa9c:	f000 feee 	bl	800b87c <__any_on>
 800aaa0:	3502      	adds	r5, #2
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	d100      	bne.n	800aaa8 <__gethex+0x1f4>
 800aaa6:	2502      	movs	r5, #2
 800aaa8:	0031      	movs	r1, r6
 800aaaa:	0020      	movs	r0, r4
 800aaac:	f7ff fe98 	bl	800a7e0 <rshift>
 800aab0:	19bf      	adds	r7, r7, r6
 800aab2:	9b02      	ldr	r3, [sp, #8]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	9303      	str	r3, [sp, #12]
 800aab8:	42bb      	cmp	r3, r7
 800aaba:	da42      	bge.n	800ab42 <__gethex+0x28e>
 800aabc:	0021      	movs	r1, r4
 800aabe:	9805      	ldr	r0, [sp, #20]
 800aac0:	f000 fa7a 	bl	800afb8 <_Bfree>
 800aac4:	2300      	movs	r3, #0
 800aac6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aac8:	26a3      	movs	r6, #163	; 0xa3
 800aaca:	6013      	str	r3, [r2, #0]
 800aacc:	e78b      	b.n	800a9e6 <__gethex+0x132>
 800aace:	1e6b      	subs	r3, r5, #1
 800aad0:	9308      	str	r3, [sp, #32]
 800aad2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d014      	beq.n	800ab04 <__gethex+0x250>
 800aada:	9b06      	ldr	r3, [sp, #24]
 800aadc:	2b20      	cmp	r3, #32
 800aade:	d104      	bne.n	800aaea <__gethex+0x236>
 800aae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae2:	c340      	stmia	r3!, {r6}
 800aae4:	2600      	movs	r6, #0
 800aae6:	9309      	str	r3, [sp, #36]	; 0x24
 800aae8:	9606      	str	r6, [sp, #24]
 800aaea:	9b08      	ldr	r3, [sp, #32]
 800aaec:	7818      	ldrb	r0, [r3, #0]
 800aaee:	f7ff fecb 	bl	800a888 <__hexdig_fun>
 800aaf2:	230f      	movs	r3, #15
 800aaf4:	4018      	ands	r0, r3
 800aaf6:	9b06      	ldr	r3, [sp, #24]
 800aaf8:	9d08      	ldr	r5, [sp, #32]
 800aafa:	4098      	lsls	r0, r3
 800aafc:	3304      	adds	r3, #4
 800aafe:	4306      	orrs	r6, r0
 800ab00:	9306      	str	r3, [sp, #24]
 800ab02:	e7a0      	b.n	800aa46 <__gethex+0x192>
 800ab04:	2301      	movs	r3, #1
 800ab06:	9a03      	ldr	r2, [sp, #12]
 800ab08:	1a9d      	subs	r5, r3, r2
 800ab0a:	9b08      	ldr	r3, [sp, #32]
 800ab0c:	195d      	adds	r5, r3, r5
 800ab0e:	9b01      	ldr	r3, [sp, #4]
 800ab10:	429d      	cmp	r5, r3
 800ab12:	d3e2      	bcc.n	800aada <__gethex+0x226>
 800ab14:	0028      	movs	r0, r5
 800ab16:	9907      	ldr	r1, [sp, #28]
 800ab18:	f001 f95c 	bl	800bdd4 <strncmp>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d1dc      	bne.n	800aada <__gethex+0x226>
 800ab20:	e791      	b.n	800aa46 <__gethex+0x192>
 800ab22:	9b01      	ldr	r3, [sp, #4]
 800ab24:	2500      	movs	r5, #0
 800ab26:	429e      	cmp	r6, r3
 800ab28:	dac3      	bge.n	800aab2 <__gethex+0x1fe>
 800ab2a:	1b9e      	subs	r6, r3, r6
 800ab2c:	0021      	movs	r1, r4
 800ab2e:	0032      	movs	r2, r6
 800ab30:	9805      	ldr	r0, [sp, #20]
 800ab32:	f000 fc5f 	bl	800b3f4 <__lshift>
 800ab36:	0003      	movs	r3, r0
 800ab38:	3314      	adds	r3, #20
 800ab3a:	0004      	movs	r4, r0
 800ab3c:	1bbf      	subs	r7, r7, r6
 800ab3e:	9304      	str	r3, [sp, #16]
 800ab40:	e7b7      	b.n	800aab2 <__gethex+0x1fe>
 800ab42:	9b02      	ldr	r3, [sp, #8]
 800ab44:	685e      	ldr	r6, [r3, #4]
 800ab46:	42be      	cmp	r6, r7
 800ab48:	dd71      	ble.n	800ac2e <__gethex+0x37a>
 800ab4a:	9b01      	ldr	r3, [sp, #4]
 800ab4c:	1bf6      	subs	r6, r6, r7
 800ab4e:	42b3      	cmp	r3, r6
 800ab50:	dc38      	bgt.n	800abc4 <__gethex+0x310>
 800ab52:	9b02      	ldr	r3, [sp, #8]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d026      	beq.n	800aba8 <__gethex+0x2f4>
 800ab5a:	2b03      	cmp	r3, #3
 800ab5c:	d028      	beq.n	800abb0 <__gethex+0x2fc>
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d119      	bne.n	800ab96 <__gethex+0x2e2>
 800ab62:	9b01      	ldr	r3, [sp, #4]
 800ab64:	42b3      	cmp	r3, r6
 800ab66:	d116      	bne.n	800ab96 <__gethex+0x2e2>
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d10d      	bne.n	800ab88 <__gethex+0x2d4>
 800ab6c:	9b02      	ldr	r3, [sp, #8]
 800ab6e:	2662      	movs	r6, #98	; 0x62
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	9301      	str	r3, [sp, #4]
 800ab74:	9a01      	ldr	r2, [sp, #4]
 800ab76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	9a04      	ldr	r2, [sp, #16]
 800ab7e:	6123      	str	r3, [r4, #16]
 800ab80:	6013      	str	r3, [r2, #0]
 800ab82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab84:	601c      	str	r4, [r3, #0]
 800ab86:	e72e      	b.n	800a9e6 <__gethex+0x132>
 800ab88:	9901      	ldr	r1, [sp, #4]
 800ab8a:	0020      	movs	r0, r4
 800ab8c:	3901      	subs	r1, #1
 800ab8e:	f000 fe75 	bl	800b87c <__any_on>
 800ab92:	2800      	cmp	r0, #0
 800ab94:	d1ea      	bne.n	800ab6c <__gethex+0x2b8>
 800ab96:	0021      	movs	r1, r4
 800ab98:	9805      	ldr	r0, [sp, #20]
 800ab9a:	f000 fa0d 	bl	800afb8 <_Bfree>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aba2:	2650      	movs	r6, #80	; 0x50
 800aba4:	6013      	str	r3, [r2, #0]
 800aba6:	e71e      	b.n	800a9e6 <__gethex+0x132>
 800aba8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1f3      	bne.n	800ab96 <__gethex+0x2e2>
 800abae:	e7dd      	b.n	800ab6c <__gethex+0x2b8>
 800abb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1da      	bne.n	800ab6c <__gethex+0x2b8>
 800abb6:	e7ee      	b.n	800ab96 <__gethex+0x2e2>
 800abb8:	0800cee8 	.word	0x0800cee8
 800abbc:	0800ce70 	.word	0x0800ce70
 800abc0:	0800ce81 	.word	0x0800ce81
 800abc4:	1e77      	subs	r7, r6, #1
 800abc6:	2d00      	cmp	r5, #0
 800abc8:	d12f      	bne.n	800ac2a <__gethex+0x376>
 800abca:	2f00      	cmp	r7, #0
 800abcc:	d004      	beq.n	800abd8 <__gethex+0x324>
 800abce:	0039      	movs	r1, r7
 800abd0:	0020      	movs	r0, r4
 800abd2:	f000 fe53 	bl	800b87c <__any_on>
 800abd6:	0005      	movs	r5, r0
 800abd8:	231f      	movs	r3, #31
 800abda:	117a      	asrs	r2, r7, #5
 800abdc:	401f      	ands	r7, r3
 800abde:	3b1e      	subs	r3, #30
 800abe0:	40bb      	lsls	r3, r7
 800abe2:	9904      	ldr	r1, [sp, #16]
 800abe4:	0092      	lsls	r2, r2, #2
 800abe6:	5852      	ldr	r2, [r2, r1]
 800abe8:	421a      	tst	r2, r3
 800abea:	d001      	beq.n	800abf0 <__gethex+0x33c>
 800abec:	2302      	movs	r3, #2
 800abee:	431d      	orrs	r5, r3
 800abf0:	9b01      	ldr	r3, [sp, #4]
 800abf2:	0031      	movs	r1, r6
 800abf4:	1b9b      	subs	r3, r3, r6
 800abf6:	2602      	movs	r6, #2
 800abf8:	0020      	movs	r0, r4
 800abfa:	9301      	str	r3, [sp, #4]
 800abfc:	f7ff fdf0 	bl	800a7e0 <rshift>
 800ac00:	9b02      	ldr	r3, [sp, #8]
 800ac02:	685f      	ldr	r7, [r3, #4]
 800ac04:	2d00      	cmp	r5, #0
 800ac06:	d041      	beq.n	800ac8c <__gethex+0x3d8>
 800ac08:	9b02      	ldr	r3, [sp, #8]
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d010      	beq.n	800ac32 <__gethex+0x37e>
 800ac10:	2b03      	cmp	r3, #3
 800ac12:	d012      	beq.n	800ac3a <__gethex+0x386>
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d106      	bne.n	800ac26 <__gethex+0x372>
 800ac18:	07aa      	lsls	r2, r5, #30
 800ac1a:	d504      	bpl.n	800ac26 <__gethex+0x372>
 800ac1c:	9a04      	ldr	r2, [sp, #16]
 800ac1e:	6810      	ldr	r0, [r2, #0]
 800ac20:	4305      	orrs	r5, r0
 800ac22:	421d      	tst	r5, r3
 800ac24:	d10c      	bne.n	800ac40 <__gethex+0x38c>
 800ac26:	2310      	movs	r3, #16
 800ac28:	e02f      	b.n	800ac8a <__gethex+0x3d6>
 800ac2a:	2501      	movs	r5, #1
 800ac2c:	e7d4      	b.n	800abd8 <__gethex+0x324>
 800ac2e:	2601      	movs	r6, #1
 800ac30:	e7e8      	b.n	800ac04 <__gethex+0x350>
 800ac32:	2301      	movs	r3, #1
 800ac34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ac36:	1a9b      	subs	r3, r3, r2
 800ac38:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0f2      	beq.n	800ac26 <__gethex+0x372>
 800ac40:	6923      	ldr	r3, [r4, #16]
 800ac42:	2000      	movs	r0, #0
 800ac44:	9303      	str	r3, [sp, #12]
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	9304      	str	r3, [sp, #16]
 800ac4a:	0023      	movs	r3, r4
 800ac4c:	9a04      	ldr	r2, [sp, #16]
 800ac4e:	3314      	adds	r3, #20
 800ac50:	1899      	adds	r1, r3, r2
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	1c55      	adds	r5, r2, #1
 800ac56:	d01e      	beq.n	800ac96 <__gethex+0x3e2>
 800ac58:	3201      	adds	r2, #1
 800ac5a:	601a      	str	r2, [r3, #0]
 800ac5c:	0023      	movs	r3, r4
 800ac5e:	3314      	adds	r3, #20
 800ac60:	2e02      	cmp	r6, #2
 800ac62:	d140      	bne.n	800ace6 <__gethex+0x432>
 800ac64:	9a02      	ldr	r2, [sp, #8]
 800ac66:	9901      	ldr	r1, [sp, #4]
 800ac68:	6812      	ldr	r2, [r2, #0]
 800ac6a:	3a01      	subs	r2, #1
 800ac6c:	428a      	cmp	r2, r1
 800ac6e:	d10b      	bne.n	800ac88 <__gethex+0x3d4>
 800ac70:	114a      	asrs	r2, r1, #5
 800ac72:	211f      	movs	r1, #31
 800ac74:	9801      	ldr	r0, [sp, #4]
 800ac76:	0092      	lsls	r2, r2, #2
 800ac78:	4001      	ands	r1, r0
 800ac7a:	2001      	movs	r0, #1
 800ac7c:	0005      	movs	r5, r0
 800ac7e:	408d      	lsls	r5, r1
 800ac80:	58d3      	ldr	r3, [r2, r3]
 800ac82:	422b      	tst	r3, r5
 800ac84:	d000      	beq.n	800ac88 <__gethex+0x3d4>
 800ac86:	2601      	movs	r6, #1
 800ac88:	2320      	movs	r3, #32
 800ac8a:	431e      	orrs	r6, r3
 800ac8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac8e:	601c      	str	r4, [r3, #0]
 800ac90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac92:	601f      	str	r7, [r3, #0]
 800ac94:	e6a7      	b.n	800a9e6 <__gethex+0x132>
 800ac96:	c301      	stmia	r3!, {r0}
 800ac98:	4299      	cmp	r1, r3
 800ac9a:	d8da      	bhi.n	800ac52 <__gethex+0x39e>
 800ac9c:	9b03      	ldr	r3, [sp, #12]
 800ac9e:	68a2      	ldr	r2, [r4, #8]
 800aca0:	4293      	cmp	r3, r2
 800aca2:	db17      	blt.n	800acd4 <__gethex+0x420>
 800aca4:	6863      	ldr	r3, [r4, #4]
 800aca6:	9805      	ldr	r0, [sp, #20]
 800aca8:	1c59      	adds	r1, r3, #1
 800acaa:	f000 f941 	bl	800af30 <_Balloc>
 800acae:	1e05      	subs	r5, r0, #0
 800acb0:	d103      	bne.n	800acba <__gethex+0x406>
 800acb2:	0002      	movs	r2, r0
 800acb4:	2184      	movs	r1, #132	; 0x84
 800acb6:	4b1c      	ldr	r3, [pc, #112]	; (800ad28 <__gethex+0x474>)
 800acb8:	e6b8      	b.n	800aa2c <__gethex+0x178>
 800acba:	0021      	movs	r1, r4
 800acbc:	6923      	ldr	r3, [r4, #16]
 800acbe:	310c      	adds	r1, #12
 800acc0:	1c9a      	adds	r2, r3, #2
 800acc2:	0092      	lsls	r2, r2, #2
 800acc4:	300c      	adds	r0, #12
 800acc6:	f000 f92a 	bl	800af1e <memcpy>
 800acca:	0021      	movs	r1, r4
 800accc:	9805      	ldr	r0, [sp, #20]
 800acce:	f000 f973 	bl	800afb8 <_Bfree>
 800acd2:	002c      	movs	r4, r5
 800acd4:	6923      	ldr	r3, [r4, #16]
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	6122      	str	r2, [r4, #16]
 800acda:	2201      	movs	r2, #1
 800acdc:	3304      	adds	r3, #4
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	18e3      	adds	r3, r4, r3
 800ace2:	605a      	str	r2, [r3, #4]
 800ace4:	e7ba      	b.n	800ac5c <__gethex+0x3a8>
 800ace6:	6922      	ldr	r2, [r4, #16]
 800ace8:	9903      	ldr	r1, [sp, #12]
 800acea:	428a      	cmp	r2, r1
 800acec:	dd09      	ble.n	800ad02 <__gethex+0x44e>
 800acee:	2101      	movs	r1, #1
 800acf0:	0020      	movs	r0, r4
 800acf2:	f7ff fd75 	bl	800a7e0 <rshift>
 800acf6:	9b02      	ldr	r3, [sp, #8]
 800acf8:	3701      	adds	r7, #1
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	42bb      	cmp	r3, r7
 800acfe:	dac2      	bge.n	800ac86 <__gethex+0x3d2>
 800ad00:	e6dc      	b.n	800aabc <__gethex+0x208>
 800ad02:	221f      	movs	r2, #31
 800ad04:	9d01      	ldr	r5, [sp, #4]
 800ad06:	9901      	ldr	r1, [sp, #4]
 800ad08:	2601      	movs	r6, #1
 800ad0a:	4015      	ands	r5, r2
 800ad0c:	4211      	tst	r1, r2
 800ad0e:	d0bb      	beq.n	800ac88 <__gethex+0x3d4>
 800ad10:	9a04      	ldr	r2, [sp, #16]
 800ad12:	189b      	adds	r3, r3, r2
 800ad14:	3b04      	subs	r3, #4
 800ad16:	6818      	ldr	r0, [r3, #0]
 800ad18:	f000 fa02 	bl	800b120 <__hi0bits>
 800ad1c:	2320      	movs	r3, #32
 800ad1e:	1b5d      	subs	r5, r3, r5
 800ad20:	42a8      	cmp	r0, r5
 800ad22:	dbe4      	blt.n	800acee <__gethex+0x43a>
 800ad24:	e7b0      	b.n	800ac88 <__gethex+0x3d4>
 800ad26:	46c0      	nop			; (mov r8, r8)
 800ad28:	0800ce70 	.word	0x0800ce70

0800ad2c <L_shift>:
 800ad2c:	2308      	movs	r3, #8
 800ad2e:	b570      	push	{r4, r5, r6, lr}
 800ad30:	2520      	movs	r5, #32
 800ad32:	1a9a      	subs	r2, r3, r2
 800ad34:	0092      	lsls	r2, r2, #2
 800ad36:	1aad      	subs	r5, r5, r2
 800ad38:	6843      	ldr	r3, [r0, #4]
 800ad3a:	6806      	ldr	r6, [r0, #0]
 800ad3c:	001c      	movs	r4, r3
 800ad3e:	40ac      	lsls	r4, r5
 800ad40:	40d3      	lsrs	r3, r2
 800ad42:	4334      	orrs	r4, r6
 800ad44:	6004      	str	r4, [r0, #0]
 800ad46:	6043      	str	r3, [r0, #4]
 800ad48:	3004      	adds	r0, #4
 800ad4a:	4288      	cmp	r0, r1
 800ad4c:	d3f4      	bcc.n	800ad38 <L_shift+0xc>
 800ad4e:	bd70      	pop	{r4, r5, r6, pc}

0800ad50 <__match>:
 800ad50:	b530      	push	{r4, r5, lr}
 800ad52:	6803      	ldr	r3, [r0, #0]
 800ad54:	780c      	ldrb	r4, [r1, #0]
 800ad56:	3301      	adds	r3, #1
 800ad58:	2c00      	cmp	r4, #0
 800ad5a:	d102      	bne.n	800ad62 <__match+0x12>
 800ad5c:	6003      	str	r3, [r0, #0]
 800ad5e:	2001      	movs	r0, #1
 800ad60:	bd30      	pop	{r4, r5, pc}
 800ad62:	781a      	ldrb	r2, [r3, #0]
 800ad64:	0015      	movs	r5, r2
 800ad66:	3d41      	subs	r5, #65	; 0x41
 800ad68:	2d19      	cmp	r5, #25
 800ad6a:	d800      	bhi.n	800ad6e <__match+0x1e>
 800ad6c:	3220      	adds	r2, #32
 800ad6e:	3101      	adds	r1, #1
 800ad70:	42a2      	cmp	r2, r4
 800ad72:	d0ef      	beq.n	800ad54 <__match+0x4>
 800ad74:	2000      	movs	r0, #0
 800ad76:	e7f3      	b.n	800ad60 <__match+0x10>

0800ad78 <__hexnan>:
 800ad78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad7a:	680b      	ldr	r3, [r1, #0]
 800ad7c:	b08b      	sub	sp, #44	; 0x2c
 800ad7e:	9201      	str	r2, [sp, #4]
 800ad80:	9901      	ldr	r1, [sp, #4]
 800ad82:	115a      	asrs	r2, r3, #5
 800ad84:	0092      	lsls	r2, r2, #2
 800ad86:	188a      	adds	r2, r1, r2
 800ad88:	9202      	str	r2, [sp, #8]
 800ad8a:	0019      	movs	r1, r3
 800ad8c:	221f      	movs	r2, #31
 800ad8e:	4011      	ands	r1, r2
 800ad90:	9008      	str	r0, [sp, #32]
 800ad92:	9106      	str	r1, [sp, #24]
 800ad94:	4213      	tst	r3, r2
 800ad96:	d002      	beq.n	800ad9e <__hexnan+0x26>
 800ad98:	9b02      	ldr	r3, [sp, #8]
 800ad9a:	3304      	adds	r3, #4
 800ad9c:	9302      	str	r3, [sp, #8]
 800ad9e:	9b02      	ldr	r3, [sp, #8]
 800ada0:	2500      	movs	r5, #0
 800ada2:	1f1e      	subs	r6, r3, #4
 800ada4:	0037      	movs	r7, r6
 800ada6:	0034      	movs	r4, r6
 800ada8:	9b08      	ldr	r3, [sp, #32]
 800adaa:	6035      	str	r5, [r6, #0]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	9507      	str	r5, [sp, #28]
 800adb0:	9305      	str	r3, [sp, #20]
 800adb2:	9503      	str	r5, [sp, #12]
 800adb4:	9b05      	ldr	r3, [sp, #20]
 800adb6:	3301      	adds	r3, #1
 800adb8:	9309      	str	r3, [sp, #36]	; 0x24
 800adba:	9b05      	ldr	r3, [sp, #20]
 800adbc:	785b      	ldrb	r3, [r3, #1]
 800adbe:	9304      	str	r3, [sp, #16]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d028      	beq.n	800ae16 <__hexnan+0x9e>
 800adc4:	9804      	ldr	r0, [sp, #16]
 800adc6:	f7ff fd5f 	bl	800a888 <__hexdig_fun>
 800adca:	2800      	cmp	r0, #0
 800adcc:	d154      	bne.n	800ae78 <__hexnan+0x100>
 800adce:	9b04      	ldr	r3, [sp, #16]
 800add0:	2b20      	cmp	r3, #32
 800add2:	d819      	bhi.n	800ae08 <__hexnan+0x90>
 800add4:	9b03      	ldr	r3, [sp, #12]
 800add6:	9a07      	ldr	r2, [sp, #28]
 800add8:	4293      	cmp	r3, r2
 800adda:	dd12      	ble.n	800ae02 <__hexnan+0x8a>
 800addc:	42bc      	cmp	r4, r7
 800adde:	d206      	bcs.n	800adee <__hexnan+0x76>
 800ade0:	2d07      	cmp	r5, #7
 800ade2:	dc04      	bgt.n	800adee <__hexnan+0x76>
 800ade4:	002a      	movs	r2, r5
 800ade6:	0039      	movs	r1, r7
 800ade8:	0020      	movs	r0, r4
 800adea:	f7ff ff9f 	bl	800ad2c <L_shift>
 800adee:	9b01      	ldr	r3, [sp, #4]
 800adf0:	2508      	movs	r5, #8
 800adf2:	429c      	cmp	r4, r3
 800adf4:	d905      	bls.n	800ae02 <__hexnan+0x8a>
 800adf6:	1f27      	subs	r7, r4, #4
 800adf8:	2500      	movs	r5, #0
 800adfa:	003c      	movs	r4, r7
 800adfc:	9b03      	ldr	r3, [sp, #12]
 800adfe:	603d      	str	r5, [r7, #0]
 800ae00:	9307      	str	r3, [sp, #28]
 800ae02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae04:	9305      	str	r3, [sp, #20]
 800ae06:	e7d5      	b.n	800adb4 <__hexnan+0x3c>
 800ae08:	9b04      	ldr	r3, [sp, #16]
 800ae0a:	2b29      	cmp	r3, #41	; 0x29
 800ae0c:	d159      	bne.n	800aec2 <__hexnan+0x14a>
 800ae0e:	9b05      	ldr	r3, [sp, #20]
 800ae10:	9a08      	ldr	r2, [sp, #32]
 800ae12:	3302      	adds	r3, #2
 800ae14:	6013      	str	r3, [r2, #0]
 800ae16:	9b03      	ldr	r3, [sp, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d052      	beq.n	800aec2 <__hexnan+0x14a>
 800ae1c:	42bc      	cmp	r4, r7
 800ae1e:	d206      	bcs.n	800ae2e <__hexnan+0xb6>
 800ae20:	2d07      	cmp	r5, #7
 800ae22:	dc04      	bgt.n	800ae2e <__hexnan+0xb6>
 800ae24:	002a      	movs	r2, r5
 800ae26:	0039      	movs	r1, r7
 800ae28:	0020      	movs	r0, r4
 800ae2a:	f7ff ff7f 	bl	800ad2c <L_shift>
 800ae2e:	9b01      	ldr	r3, [sp, #4]
 800ae30:	429c      	cmp	r4, r3
 800ae32:	d935      	bls.n	800aea0 <__hexnan+0x128>
 800ae34:	001a      	movs	r2, r3
 800ae36:	0023      	movs	r3, r4
 800ae38:	cb02      	ldmia	r3!, {r1}
 800ae3a:	c202      	stmia	r2!, {r1}
 800ae3c:	429e      	cmp	r6, r3
 800ae3e:	d2fb      	bcs.n	800ae38 <__hexnan+0xc0>
 800ae40:	9b02      	ldr	r3, [sp, #8]
 800ae42:	1c61      	adds	r1, r4, #1
 800ae44:	1eda      	subs	r2, r3, #3
 800ae46:	2304      	movs	r3, #4
 800ae48:	4291      	cmp	r1, r2
 800ae4a:	d805      	bhi.n	800ae58 <__hexnan+0xe0>
 800ae4c:	9b02      	ldr	r3, [sp, #8]
 800ae4e:	3b04      	subs	r3, #4
 800ae50:	1b1b      	subs	r3, r3, r4
 800ae52:	089b      	lsrs	r3, r3, #2
 800ae54:	3301      	adds	r3, #1
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	9a01      	ldr	r2, [sp, #4]
 800ae5a:	18d3      	adds	r3, r2, r3
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	c304      	stmia	r3!, {r2}
 800ae60:	429e      	cmp	r6, r3
 800ae62:	d2fc      	bcs.n	800ae5e <__hexnan+0xe6>
 800ae64:	6833      	ldr	r3, [r6, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d104      	bne.n	800ae74 <__hexnan+0xfc>
 800ae6a:	9b01      	ldr	r3, [sp, #4]
 800ae6c:	429e      	cmp	r6, r3
 800ae6e:	d126      	bne.n	800aebe <__hexnan+0x146>
 800ae70:	2301      	movs	r3, #1
 800ae72:	6033      	str	r3, [r6, #0]
 800ae74:	2005      	movs	r0, #5
 800ae76:	e025      	b.n	800aec4 <__hexnan+0x14c>
 800ae78:	9b03      	ldr	r3, [sp, #12]
 800ae7a:	3501      	adds	r5, #1
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	9303      	str	r3, [sp, #12]
 800ae80:	2d08      	cmp	r5, #8
 800ae82:	dd06      	ble.n	800ae92 <__hexnan+0x11a>
 800ae84:	9b01      	ldr	r3, [sp, #4]
 800ae86:	429c      	cmp	r4, r3
 800ae88:	d9bb      	bls.n	800ae02 <__hexnan+0x8a>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	2501      	movs	r5, #1
 800ae8e:	3c04      	subs	r4, #4
 800ae90:	6023      	str	r3, [r4, #0]
 800ae92:	220f      	movs	r2, #15
 800ae94:	6823      	ldr	r3, [r4, #0]
 800ae96:	4010      	ands	r0, r2
 800ae98:	011b      	lsls	r3, r3, #4
 800ae9a:	4318      	orrs	r0, r3
 800ae9c:	6020      	str	r0, [r4, #0]
 800ae9e:	e7b0      	b.n	800ae02 <__hexnan+0x8a>
 800aea0:	9b06      	ldr	r3, [sp, #24]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d0de      	beq.n	800ae64 <__hexnan+0xec>
 800aea6:	2120      	movs	r1, #32
 800aea8:	9a06      	ldr	r2, [sp, #24]
 800aeaa:	9b02      	ldr	r3, [sp, #8]
 800aeac:	1a89      	subs	r1, r1, r2
 800aeae:	2201      	movs	r2, #1
 800aeb0:	4252      	negs	r2, r2
 800aeb2:	40ca      	lsrs	r2, r1
 800aeb4:	3b04      	subs	r3, #4
 800aeb6:	6819      	ldr	r1, [r3, #0]
 800aeb8:	400a      	ands	r2, r1
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	e7d2      	b.n	800ae64 <__hexnan+0xec>
 800aebe:	3e04      	subs	r6, #4
 800aec0:	e7d0      	b.n	800ae64 <__hexnan+0xec>
 800aec2:	2004      	movs	r0, #4
 800aec4:	b00b      	add	sp, #44	; 0x2c
 800aec6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aec8 <_localeconv_r>:
 800aec8:	4800      	ldr	r0, [pc, #0]	; (800aecc <_localeconv_r+0x4>)
 800aeca:	4770      	bx	lr
 800aecc:	20000188 	.word	0x20000188

0800aed0 <malloc>:
 800aed0:	b510      	push	{r4, lr}
 800aed2:	4b03      	ldr	r3, [pc, #12]	; (800aee0 <malloc+0x10>)
 800aed4:	0001      	movs	r1, r0
 800aed6:	6818      	ldr	r0, [r3, #0]
 800aed8:	f000 fd8c 	bl	800b9f4 <_malloc_r>
 800aedc:	bd10      	pop	{r4, pc}
 800aede:	46c0      	nop			; (mov r8, r8)
 800aee0:	20000030 	.word	0x20000030

0800aee4 <__ascii_mbtowc>:
 800aee4:	b082      	sub	sp, #8
 800aee6:	2900      	cmp	r1, #0
 800aee8:	d100      	bne.n	800aeec <__ascii_mbtowc+0x8>
 800aeea:	a901      	add	r1, sp, #4
 800aeec:	1e10      	subs	r0, r2, #0
 800aeee:	d006      	beq.n	800aefe <__ascii_mbtowc+0x1a>
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d006      	beq.n	800af02 <__ascii_mbtowc+0x1e>
 800aef4:	7813      	ldrb	r3, [r2, #0]
 800aef6:	600b      	str	r3, [r1, #0]
 800aef8:	7810      	ldrb	r0, [r2, #0]
 800aefa:	1e43      	subs	r3, r0, #1
 800aefc:	4198      	sbcs	r0, r3
 800aefe:	b002      	add	sp, #8
 800af00:	4770      	bx	lr
 800af02:	2002      	movs	r0, #2
 800af04:	4240      	negs	r0, r0
 800af06:	e7fa      	b.n	800aefe <__ascii_mbtowc+0x1a>

0800af08 <memchr>:
 800af08:	b2c9      	uxtb	r1, r1
 800af0a:	1882      	adds	r2, r0, r2
 800af0c:	4290      	cmp	r0, r2
 800af0e:	d101      	bne.n	800af14 <memchr+0xc>
 800af10:	2000      	movs	r0, #0
 800af12:	4770      	bx	lr
 800af14:	7803      	ldrb	r3, [r0, #0]
 800af16:	428b      	cmp	r3, r1
 800af18:	d0fb      	beq.n	800af12 <memchr+0xa>
 800af1a:	3001      	adds	r0, #1
 800af1c:	e7f6      	b.n	800af0c <memchr+0x4>

0800af1e <memcpy>:
 800af1e:	2300      	movs	r3, #0
 800af20:	b510      	push	{r4, lr}
 800af22:	429a      	cmp	r2, r3
 800af24:	d100      	bne.n	800af28 <memcpy+0xa>
 800af26:	bd10      	pop	{r4, pc}
 800af28:	5ccc      	ldrb	r4, [r1, r3]
 800af2a:	54c4      	strb	r4, [r0, r3]
 800af2c:	3301      	adds	r3, #1
 800af2e:	e7f8      	b.n	800af22 <memcpy+0x4>

0800af30 <_Balloc>:
 800af30:	b570      	push	{r4, r5, r6, lr}
 800af32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af34:	0006      	movs	r6, r0
 800af36:	000c      	movs	r4, r1
 800af38:	2d00      	cmp	r5, #0
 800af3a:	d10e      	bne.n	800af5a <_Balloc+0x2a>
 800af3c:	2010      	movs	r0, #16
 800af3e:	f7ff ffc7 	bl	800aed0 <malloc>
 800af42:	1e02      	subs	r2, r0, #0
 800af44:	6270      	str	r0, [r6, #36]	; 0x24
 800af46:	d104      	bne.n	800af52 <_Balloc+0x22>
 800af48:	2166      	movs	r1, #102	; 0x66
 800af4a:	4b19      	ldr	r3, [pc, #100]	; (800afb0 <_Balloc+0x80>)
 800af4c:	4819      	ldr	r0, [pc, #100]	; (800afb4 <_Balloc+0x84>)
 800af4e:	f000 ff61 	bl	800be14 <__assert_func>
 800af52:	6045      	str	r5, [r0, #4]
 800af54:	6085      	str	r5, [r0, #8]
 800af56:	6005      	str	r5, [r0, #0]
 800af58:	60c5      	str	r5, [r0, #12]
 800af5a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800af5c:	68eb      	ldr	r3, [r5, #12]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d013      	beq.n	800af8a <_Balloc+0x5a>
 800af62:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800af64:	00a2      	lsls	r2, r4, #2
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	189b      	adds	r3, r3, r2
 800af6a:	6818      	ldr	r0, [r3, #0]
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d118      	bne.n	800afa2 <_Balloc+0x72>
 800af70:	2101      	movs	r1, #1
 800af72:	000d      	movs	r5, r1
 800af74:	40a5      	lsls	r5, r4
 800af76:	1d6a      	adds	r2, r5, #5
 800af78:	0030      	movs	r0, r6
 800af7a:	0092      	lsls	r2, r2, #2
 800af7c:	f000 fca1 	bl	800b8c2 <_calloc_r>
 800af80:	2800      	cmp	r0, #0
 800af82:	d00c      	beq.n	800af9e <_Balloc+0x6e>
 800af84:	6044      	str	r4, [r0, #4]
 800af86:	6085      	str	r5, [r0, #8]
 800af88:	e00d      	b.n	800afa6 <_Balloc+0x76>
 800af8a:	2221      	movs	r2, #33	; 0x21
 800af8c:	2104      	movs	r1, #4
 800af8e:	0030      	movs	r0, r6
 800af90:	f000 fc97 	bl	800b8c2 <_calloc_r>
 800af94:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800af96:	60e8      	str	r0, [r5, #12]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1e1      	bne.n	800af62 <_Balloc+0x32>
 800af9e:	2000      	movs	r0, #0
 800afa0:	bd70      	pop	{r4, r5, r6, pc}
 800afa2:	6802      	ldr	r2, [r0, #0]
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	2300      	movs	r3, #0
 800afa8:	6103      	str	r3, [r0, #16]
 800afaa:	60c3      	str	r3, [r0, #12]
 800afac:	e7f8      	b.n	800afa0 <_Balloc+0x70>
 800afae:	46c0      	nop			; (mov r8, r8)
 800afb0:	0800cdfe 	.word	0x0800cdfe
 800afb4:	0800cefc 	.word	0x0800cefc

0800afb8 <_Bfree>:
 800afb8:	b570      	push	{r4, r5, r6, lr}
 800afba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afbc:	0005      	movs	r5, r0
 800afbe:	000c      	movs	r4, r1
 800afc0:	2e00      	cmp	r6, #0
 800afc2:	d10e      	bne.n	800afe2 <_Bfree+0x2a>
 800afc4:	2010      	movs	r0, #16
 800afc6:	f7ff ff83 	bl	800aed0 <malloc>
 800afca:	1e02      	subs	r2, r0, #0
 800afcc:	6268      	str	r0, [r5, #36]	; 0x24
 800afce:	d104      	bne.n	800afda <_Bfree+0x22>
 800afd0:	218a      	movs	r1, #138	; 0x8a
 800afd2:	4b09      	ldr	r3, [pc, #36]	; (800aff8 <_Bfree+0x40>)
 800afd4:	4809      	ldr	r0, [pc, #36]	; (800affc <_Bfree+0x44>)
 800afd6:	f000 ff1d 	bl	800be14 <__assert_func>
 800afda:	6046      	str	r6, [r0, #4]
 800afdc:	6086      	str	r6, [r0, #8]
 800afde:	6006      	str	r6, [r0, #0]
 800afe0:	60c6      	str	r6, [r0, #12]
 800afe2:	2c00      	cmp	r4, #0
 800afe4:	d007      	beq.n	800aff6 <_Bfree+0x3e>
 800afe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800afe8:	6862      	ldr	r2, [r4, #4]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	0092      	lsls	r2, r2, #2
 800afee:	189b      	adds	r3, r3, r2
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	6022      	str	r2, [r4, #0]
 800aff4:	601c      	str	r4, [r3, #0]
 800aff6:	bd70      	pop	{r4, r5, r6, pc}
 800aff8:	0800cdfe 	.word	0x0800cdfe
 800affc:	0800cefc 	.word	0x0800cefc

0800b000 <__multadd>:
 800b000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b002:	000e      	movs	r6, r1
 800b004:	9001      	str	r0, [sp, #4]
 800b006:	000c      	movs	r4, r1
 800b008:	001d      	movs	r5, r3
 800b00a:	2000      	movs	r0, #0
 800b00c:	690f      	ldr	r7, [r1, #16]
 800b00e:	3614      	adds	r6, #20
 800b010:	6833      	ldr	r3, [r6, #0]
 800b012:	3001      	adds	r0, #1
 800b014:	b299      	uxth	r1, r3
 800b016:	4351      	muls	r1, r2
 800b018:	0c1b      	lsrs	r3, r3, #16
 800b01a:	4353      	muls	r3, r2
 800b01c:	1949      	adds	r1, r1, r5
 800b01e:	0c0d      	lsrs	r5, r1, #16
 800b020:	195b      	adds	r3, r3, r5
 800b022:	0c1d      	lsrs	r5, r3, #16
 800b024:	b289      	uxth	r1, r1
 800b026:	041b      	lsls	r3, r3, #16
 800b028:	185b      	adds	r3, r3, r1
 800b02a:	c608      	stmia	r6!, {r3}
 800b02c:	4287      	cmp	r7, r0
 800b02e:	dcef      	bgt.n	800b010 <__multadd+0x10>
 800b030:	2d00      	cmp	r5, #0
 800b032:	d022      	beq.n	800b07a <__multadd+0x7a>
 800b034:	68a3      	ldr	r3, [r4, #8]
 800b036:	42bb      	cmp	r3, r7
 800b038:	dc19      	bgt.n	800b06e <__multadd+0x6e>
 800b03a:	6863      	ldr	r3, [r4, #4]
 800b03c:	9801      	ldr	r0, [sp, #4]
 800b03e:	1c59      	adds	r1, r3, #1
 800b040:	f7ff ff76 	bl	800af30 <_Balloc>
 800b044:	1e06      	subs	r6, r0, #0
 800b046:	d105      	bne.n	800b054 <__multadd+0x54>
 800b048:	0002      	movs	r2, r0
 800b04a:	21b5      	movs	r1, #181	; 0xb5
 800b04c:	4b0c      	ldr	r3, [pc, #48]	; (800b080 <__multadd+0x80>)
 800b04e:	480d      	ldr	r0, [pc, #52]	; (800b084 <__multadd+0x84>)
 800b050:	f000 fee0 	bl	800be14 <__assert_func>
 800b054:	0021      	movs	r1, r4
 800b056:	6923      	ldr	r3, [r4, #16]
 800b058:	310c      	adds	r1, #12
 800b05a:	1c9a      	adds	r2, r3, #2
 800b05c:	0092      	lsls	r2, r2, #2
 800b05e:	300c      	adds	r0, #12
 800b060:	f7ff ff5d 	bl	800af1e <memcpy>
 800b064:	0021      	movs	r1, r4
 800b066:	9801      	ldr	r0, [sp, #4]
 800b068:	f7ff ffa6 	bl	800afb8 <_Bfree>
 800b06c:	0034      	movs	r4, r6
 800b06e:	1d3b      	adds	r3, r7, #4
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	18e3      	adds	r3, r4, r3
 800b074:	605d      	str	r5, [r3, #4]
 800b076:	1c7b      	adds	r3, r7, #1
 800b078:	6123      	str	r3, [r4, #16]
 800b07a:	0020      	movs	r0, r4
 800b07c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b07e:	46c0      	nop			; (mov r8, r8)
 800b080:	0800ce70 	.word	0x0800ce70
 800b084:	0800cefc 	.word	0x0800cefc

0800b088 <__s2b>:
 800b088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b08a:	0006      	movs	r6, r0
 800b08c:	0018      	movs	r0, r3
 800b08e:	000c      	movs	r4, r1
 800b090:	3008      	adds	r0, #8
 800b092:	2109      	movs	r1, #9
 800b094:	9301      	str	r3, [sp, #4]
 800b096:	0015      	movs	r5, r2
 800b098:	f7f5 f8dc 	bl	8000254 <__divsi3>
 800b09c:	2301      	movs	r3, #1
 800b09e:	2100      	movs	r1, #0
 800b0a0:	4283      	cmp	r3, r0
 800b0a2:	db0a      	blt.n	800b0ba <__s2b+0x32>
 800b0a4:	0030      	movs	r0, r6
 800b0a6:	f7ff ff43 	bl	800af30 <_Balloc>
 800b0aa:	1e01      	subs	r1, r0, #0
 800b0ac:	d108      	bne.n	800b0c0 <__s2b+0x38>
 800b0ae:	0002      	movs	r2, r0
 800b0b0:	4b19      	ldr	r3, [pc, #100]	; (800b118 <__s2b+0x90>)
 800b0b2:	481a      	ldr	r0, [pc, #104]	; (800b11c <__s2b+0x94>)
 800b0b4:	31ce      	adds	r1, #206	; 0xce
 800b0b6:	f000 fead 	bl	800be14 <__assert_func>
 800b0ba:	005b      	lsls	r3, r3, #1
 800b0bc:	3101      	adds	r1, #1
 800b0be:	e7ef      	b.n	800b0a0 <__s2b+0x18>
 800b0c0:	9b08      	ldr	r3, [sp, #32]
 800b0c2:	6143      	str	r3, [r0, #20]
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	6103      	str	r3, [r0, #16]
 800b0c8:	2d09      	cmp	r5, #9
 800b0ca:	dd18      	ble.n	800b0fe <__s2b+0x76>
 800b0cc:	0023      	movs	r3, r4
 800b0ce:	3309      	adds	r3, #9
 800b0d0:	001f      	movs	r7, r3
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	1964      	adds	r4, r4, r5
 800b0d6:	783b      	ldrb	r3, [r7, #0]
 800b0d8:	220a      	movs	r2, #10
 800b0da:	0030      	movs	r0, r6
 800b0dc:	3b30      	subs	r3, #48	; 0x30
 800b0de:	f7ff ff8f 	bl	800b000 <__multadd>
 800b0e2:	3701      	adds	r7, #1
 800b0e4:	0001      	movs	r1, r0
 800b0e6:	42a7      	cmp	r7, r4
 800b0e8:	d1f5      	bne.n	800b0d6 <__s2b+0x4e>
 800b0ea:	002c      	movs	r4, r5
 800b0ec:	9b00      	ldr	r3, [sp, #0]
 800b0ee:	3c08      	subs	r4, #8
 800b0f0:	191c      	adds	r4, r3, r4
 800b0f2:	002f      	movs	r7, r5
 800b0f4:	9b01      	ldr	r3, [sp, #4]
 800b0f6:	429f      	cmp	r7, r3
 800b0f8:	db04      	blt.n	800b104 <__s2b+0x7c>
 800b0fa:	0008      	movs	r0, r1
 800b0fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b0fe:	2509      	movs	r5, #9
 800b100:	340a      	adds	r4, #10
 800b102:	e7f6      	b.n	800b0f2 <__s2b+0x6a>
 800b104:	1b63      	subs	r3, r4, r5
 800b106:	5ddb      	ldrb	r3, [r3, r7]
 800b108:	220a      	movs	r2, #10
 800b10a:	0030      	movs	r0, r6
 800b10c:	3b30      	subs	r3, #48	; 0x30
 800b10e:	f7ff ff77 	bl	800b000 <__multadd>
 800b112:	3701      	adds	r7, #1
 800b114:	0001      	movs	r1, r0
 800b116:	e7ed      	b.n	800b0f4 <__s2b+0x6c>
 800b118:	0800ce70 	.word	0x0800ce70
 800b11c:	0800cefc 	.word	0x0800cefc

0800b120 <__hi0bits>:
 800b120:	0003      	movs	r3, r0
 800b122:	0c02      	lsrs	r2, r0, #16
 800b124:	2000      	movs	r0, #0
 800b126:	4282      	cmp	r2, r0
 800b128:	d101      	bne.n	800b12e <__hi0bits+0xe>
 800b12a:	041b      	lsls	r3, r3, #16
 800b12c:	3010      	adds	r0, #16
 800b12e:	0e1a      	lsrs	r2, r3, #24
 800b130:	d101      	bne.n	800b136 <__hi0bits+0x16>
 800b132:	3008      	adds	r0, #8
 800b134:	021b      	lsls	r3, r3, #8
 800b136:	0f1a      	lsrs	r2, r3, #28
 800b138:	d101      	bne.n	800b13e <__hi0bits+0x1e>
 800b13a:	3004      	adds	r0, #4
 800b13c:	011b      	lsls	r3, r3, #4
 800b13e:	0f9a      	lsrs	r2, r3, #30
 800b140:	d101      	bne.n	800b146 <__hi0bits+0x26>
 800b142:	3002      	adds	r0, #2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	2b00      	cmp	r3, #0
 800b148:	db03      	blt.n	800b152 <__hi0bits+0x32>
 800b14a:	3001      	adds	r0, #1
 800b14c:	005b      	lsls	r3, r3, #1
 800b14e:	d400      	bmi.n	800b152 <__hi0bits+0x32>
 800b150:	2020      	movs	r0, #32
 800b152:	4770      	bx	lr

0800b154 <__lo0bits>:
 800b154:	6803      	ldr	r3, [r0, #0]
 800b156:	0002      	movs	r2, r0
 800b158:	2107      	movs	r1, #7
 800b15a:	0018      	movs	r0, r3
 800b15c:	4008      	ands	r0, r1
 800b15e:	420b      	tst	r3, r1
 800b160:	d00d      	beq.n	800b17e <__lo0bits+0x2a>
 800b162:	3906      	subs	r1, #6
 800b164:	2000      	movs	r0, #0
 800b166:	420b      	tst	r3, r1
 800b168:	d105      	bne.n	800b176 <__lo0bits+0x22>
 800b16a:	3002      	adds	r0, #2
 800b16c:	4203      	tst	r3, r0
 800b16e:	d003      	beq.n	800b178 <__lo0bits+0x24>
 800b170:	40cb      	lsrs	r3, r1
 800b172:	0008      	movs	r0, r1
 800b174:	6013      	str	r3, [r2, #0]
 800b176:	4770      	bx	lr
 800b178:	089b      	lsrs	r3, r3, #2
 800b17a:	6013      	str	r3, [r2, #0]
 800b17c:	e7fb      	b.n	800b176 <__lo0bits+0x22>
 800b17e:	b299      	uxth	r1, r3
 800b180:	2900      	cmp	r1, #0
 800b182:	d101      	bne.n	800b188 <__lo0bits+0x34>
 800b184:	2010      	movs	r0, #16
 800b186:	0c1b      	lsrs	r3, r3, #16
 800b188:	b2d9      	uxtb	r1, r3
 800b18a:	2900      	cmp	r1, #0
 800b18c:	d101      	bne.n	800b192 <__lo0bits+0x3e>
 800b18e:	3008      	adds	r0, #8
 800b190:	0a1b      	lsrs	r3, r3, #8
 800b192:	0719      	lsls	r1, r3, #28
 800b194:	d101      	bne.n	800b19a <__lo0bits+0x46>
 800b196:	3004      	adds	r0, #4
 800b198:	091b      	lsrs	r3, r3, #4
 800b19a:	0799      	lsls	r1, r3, #30
 800b19c:	d101      	bne.n	800b1a2 <__lo0bits+0x4e>
 800b19e:	3002      	adds	r0, #2
 800b1a0:	089b      	lsrs	r3, r3, #2
 800b1a2:	07d9      	lsls	r1, r3, #31
 800b1a4:	d4e9      	bmi.n	800b17a <__lo0bits+0x26>
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	085b      	lsrs	r3, r3, #1
 800b1aa:	d1e6      	bne.n	800b17a <__lo0bits+0x26>
 800b1ac:	2020      	movs	r0, #32
 800b1ae:	e7e2      	b.n	800b176 <__lo0bits+0x22>

0800b1b0 <__i2b>:
 800b1b0:	b510      	push	{r4, lr}
 800b1b2:	000c      	movs	r4, r1
 800b1b4:	2101      	movs	r1, #1
 800b1b6:	f7ff febb 	bl	800af30 <_Balloc>
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	d106      	bne.n	800b1cc <__i2b+0x1c>
 800b1be:	21a0      	movs	r1, #160	; 0xa0
 800b1c0:	0002      	movs	r2, r0
 800b1c2:	4b04      	ldr	r3, [pc, #16]	; (800b1d4 <__i2b+0x24>)
 800b1c4:	4804      	ldr	r0, [pc, #16]	; (800b1d8 <__i2b+0x28>)
 800b1c6:	0049      	lsls	r1, r1, #1
 800b1c8:	f000 fe24 	bl	800be14 <__assert_func>
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	6144      	str	r4, [r0, #20]
 800b1d0:	6103      	str	r3, [r0, #16]
 800b1d2:	bd10      	pop	{r4, pc}
 800b1d4:	0800ce70 	.word	0x0800ce70
 800b1d8:	0800cefc 	.word	0x0800cefc

0800b1dc <__multiply>:
 800b1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1de:	690b      	ldr	r3, [r1, #16]
 800b1e0:	0014      	movs	r4, r2
 800b1e2:	6912      	ldr	r2, [r2, #16]
 800b1e4:	000d      	movs	r5, r1
 800b1e6:	b089      	sub	sp, #36	; 0x24
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	da01      	bge.n	800b1f0 <__multiply+0x14>
 800b1ec:	0025      	movs	r5, r4
 800b1ee:	000c      	movs	r4, r1
 800b1f0:	692f      	ldr	r7, [r5, #16]
 800b1f2:	6926      	ldr	r6, [r4, #16]
 800b1f4:	6869      	ldr	r1, [r5, #4]
 800b1f6:	19bb      	adds	r3, r7, r6
 800b1f8:	9302      	str	r3, [sp, #8]
 800b1fa:	68ab      	ldr	r3, [r5, #8]
 800b1fc:	19ba      	adds	r2, r7, r6
 800b1fe:	4293      	cmp	r3, r2
 800b200:	da00      	bge.n	800b204 <__multiply+0x28>
 800b202:	3101      	adds	r1, #1
 800b204:	f7ff fe94 	bl	800af30 <_Balloc>
 800b208:	9001      	str	r0, [sp, #4]
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d106      	bne.n	800b21c <__multiply+0x40>
 800b20e:	215e      	movs	r1, #94	; 0x5e
 800b210:	0002      	movs	r2, r0
 800b212:	4b48      	ldr	r3, [pc, #288]	; (800b334 <__multiply+0x158>)
 800b214:	4848      	ldr	r0, [pc, #288]	; (800b338 <__multiply+0x15c>)
 800b216:	31ff      	adds	r1, #255	; 0xff
 800b218:	f000 fdfc 	bl	800be14 <__assert_func>
 800b21c:	9b01      	ldr	r3, [sp, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	3314      	adds	r3, #20
 800b222:	469c      	mov	ip, r3
 800b224:	19bb      	adds	r3, r7, r6
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4463      	add	r3, ip
 800b22a:	9303      	str	r3, [sp, #12]
 800b22c:	4663      	mov	r3, ip
 800b22e:	9903      	ldr	r1, [sp, #12]
 800b230:	428b      	cmp	r3, r1
 800b232:	d32c      	bcc.n	800b28e <__multiply+0xb2>
 800b234:	002b      	movs	r3, r5
 800b236:	0022      	movs	r2, r4
 800b238:	3314      	adds	r3, #20
 800b23a:	00bf      	lsls	r7, r7, #2
 800b23c:	3214      	adds	r2, #20
 800b23e:	9306      	str	r3, [sp, #24]
 800b240:	00b6      	lsls	r6, r6, #2
 800b242:	19db      	adds	r3, r3, r7
 800b244:	9304      	str	r3, [sp, #16]
 800b246:	1993      	adds	r3, r2, r6
 800b248:	9307      	str	r3, [sp, #28]
 800b24a:	2304      	movs	r3, #4
 800b24c:	9305      	str	r3, [sp, #20]
 800b24e:	002b      	movs	r3, r5
 800b250:	9904      	ldr	r1, [sp, #16]
 800b252:	3315      	adds	r3, #21
 800b254:	9200      	str	r2, [sp, #0]
 800b256:	4299      	cmp	r1, r3
 800b258:	d305      	bcc.n	800b266 <__multiply+0x8a>
 800b25a:	1b4b      	subs	r3, r1, r5
 800b25c:	3b15      	subs	r3, #21
 800b25e:	089b      	lsrs	r3, r3, #2
 800b260:	3301      	adds	r3, #1
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	9305      	str	r3, [sp, #20]
 800b266:	9b07      	ldr	r3, [sp, #28]
 800b268:	9a00      	ldr	r2, [sp, #0]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d311      	bcc.n	800b292 <__multiply+0xb6>
 800b26e:	9b02      	ldr	r3, [sp, #8]
 800b270:	2b00      	cmp	r3, #0
 800b272:	dd06      	ble.n	800b282 <__multiply+0xa6>
 800b274:	9b03      	ldr	r3, [sp, #12]
 800b276:	3b04      	subs	r3, #4
 800b278:	9303      	str	r3, [sp, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d053      	beq.n	800b32a <__multiply+0x14e>
 800b282:	9b01      	ldr	r3, [sp, #4]
 800b284:	9a02      	ldr	r2, [sp, #8]
 800b286:	0018      	movs	r0, r3
 800b288:	611a      	str	r2, [r3, #16]
 800b28a:	b009      	add	sp, #36	; 0x24
 800b28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b28e:	c304      	stmia	r3!, {r2}
 800b290:	e7cd      	b.n	800b22e <__multiply+0x52>
 800b292:	9b00      	ldr	r3, [sp, #0]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	b298      	uxth	r0, r3
 800b298:	2800      	cmp	r0, #0
 800b29a:	d01b      	beq.n	800b2d4 <__multiply+0xf8>
 800b29c:	4667      	mov	r7, ip
 800b29e:	2400      	movs	r4, #0
 800b2a0:	9e06      	ldr	r6, [sp, #24]
 800b2a2:	ce02      	ldmia	r6!, {r1}
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	b28b      	uxth	r3, r1
 800b2a8:	4343      	muls	r3, r0
 800b2aa:	b292      	uxth	r2, r2
 800b2ac:	189b      	adds	r3, r3, r2
 800b2ae:	191b      	adds	r3, r3, r4
 800b2b0:	0c0c      	lsrs	r4, r1, #16
 800b2b2:	4344      	muls	r4, r0
 800b2b4:	683a      	ldr	r2, [r7, #0]
 800b2b6:	0c11      	lsrs	r1, r2, #16
 800b2b8:	1861      	adds	r1, r4, r1
 800b2ba:	0c1c      	lsrs	r4, r3, #16
 800b2bc:	1909      	adds	r1, r1, r4
 800b2be:	0c0c      	lsrs	r4, r1, #16
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	0409      	lsls	r1, r1, #16
 800b2c4:	430b      	orrs	r3, r1
 800b2c6:	c708      	stmia	r7!, {r3}
 800b2c8:	9b04      	ldr	r3, [sp, #16]
 800b2ca:	42b3      	cmp	r3, r6
 800b2cc:	d8e9      	bhi.n	800b2a2 <__multiply+0xc6>
 800b2ce:	4663      	mov	r3, ip
 800b2d0:	9a05      	ldr	r2, [sp, #20]
 800b2d2:	509c      	str	r4, [r3, r2]
 800b2d4:	9b00      	ldr	r3, [sp, #0]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	0c1e      	lsrs	r6, r3, #16
 800b2da:	d020      	beq.n	800b31e <__multiply+0x142>
 800b2dc:	4663      	mov	r3, ip
 800b2de:	002c      	movs	r4, r5
 800b2e0:	4660      	mov	r0, ip
 800b2e2:	2700      	movs	r7, #0
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	3414      	adds	r4, #20
 800b2e8:	6822      	ldr	r2, [r4, #0]
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	b291      	uxth	r1, r2
 800b2ee:	4371      	muls	r1, r6
 800b2f0:	6802      	ldr	r2, [r0, #0]
 800b2f2:	0c12      	lsrs	r2, r2, #16
 800b2f4:	1889      	adds	r1, r1, r2
 800b2f6:	19cf      	adds	r7, r1, r7
 800b2f8:	0439      	lsls	r1, r7, #16
 800b2fa:	430b      	orrs	r3, r1
 800b2fc:	6003      	str	r3, [r0, #0]
 800b2fe:	cc02      	ldmia	r4!, {r1}
 800b300:	6843      	ldr	r3, [r0, #4]
 800b302:	0c09      	lsrs	r1, r1, #16
 800b304:	4371      	muls	r1, r6
 800b306:	b29b      	uxth	r3, r3
 800b308:	0c3f      	lsrs	r7, r7, #16
 800b30a:	18cb      	adds	r3, r1, r3
 800b30c:	9a04      	ldr	r2, [sp, #16]
 800b30e:	19db      	adds	r3, r3, r7
 800b310:	0c1f      	lsrs	r7, r3, #16
 800b312:	3004      	adds	r0, #4
 800b314:	42a2      	cmp	r2, r4
 800b316:	d8e7      	bhi.n	800b2e8 <__multiply+0x10c>
 800b318:	4662      	mov	r2, ip
 800b31a:	9905      	ldr	r1, [sp, #20]
 800b31c:	5053      	str	r3, [r2, r1]
 800b31e:	9b00      	ldr	r3, [sp, #0]
 800b320:	3304      	adds	r3, #4
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	2304      	movs	r3, #4
 800b326:	449c      	add	ip, r3
 800b328:	e79d      	b.n	800b266 <__multiply+0x8a>
 800b32a:	9b02      	ldr	r3, [sp, #8]
 800b32c:	3b01      	subs	r3, #1
 800b32e:	9302      	str	r3, [sp, #8]
 800b330:	e79d      	b.n	800b26e <__multiply+0x92>
 800b332:	46c0      	nop			; (mov r8, r8)
 800b334:	0800ce70 	.word	0x0800ce70
 800b338:	0800cefc 	.word	0x0800cefc

0800b33c <__pow5mult>:
 800b33c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b33e:	2303      	movs	r3, #3
 800b340:	0015      	movs	r5, r2
 800b342:	0007      	movs	r7, r0
 800b344:	000e      	movs	r6, r1
 800b346:	401a      	ands	r2, r3
 800b348:	421d      	tst	r5, r3
 800b34a:	d008      	beq.n	800b35e <__pow5mult+0x22>
 800b34c:	4925      	ldr	r1, [pc, #148]	; (800b3e4 <__pow5mult+0xa8>)
 800b34e:	3a01      	subs	r2, #1
 800b350:	0092      	lsls	r2, r2, #2
 800b352:	5852      	ldr	r2, [r2, r1]
 800b354:	2300      	movs	r3, #0
 800b356:	0031      	movs	r1, r6
 800b358:	f7ff fe52 	bl	800b000 <__multadd>
 800b35c:	0006      	movs	r6, r0
 800b35e:	10ad      	asrs	r5, r5, #2
 800b360:	d03d      	beq.n	800b3de <__pow5mult+0xa2>
 800b362:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b364:	2c00      	cmp	r4, #0
 800b366:	d10f      	bne.n	800b388 <__pow5mult+0x4c>
 800b368:	2010      	movs	r0, #16
 800b36a:	f7ff fdb1 	bl	800aed0 <malloc>
 800b36e:	1e02      	subs	r2, r0, #0
 800b370:	6278      	str	r0, [r7, #36]	; 0x24
 800b372:	d105      	bne.n	800b380 <__pow5mult+0x44>
 800b374:	21d7      	movs	r1, #215	; 0xd7
 800b376:	4b1c      	ldr	r3, [pc, #112]	; (800b3e8 <__pow5mult+0xac>)
 800b378:	481c      	ldr	r0, [pc, #112]	; (800b3ec <__pow5mult+0xb0>)
 800b37a:	0049      	lsls	r1, r1, #1
 800b37c:	f000 fd4a 	bl	800be14 <__assert_func>
 800b380:	6044      	str	r4, [r0, #4]
 800b382:	6084      	str	r4, [r0, #8]
 800b384:	6004      	str	r4, [r0, #0]
 800b386:	60c4      	str	r4, [r0, #12]
 800b388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38a:	689c      	ldr	r4, [r3, #8]
 800b38c:	9301      	str	r3, [sp, #4]
 800b38e:	2c00      	cmp	r4, #0
 800b390:	d108      	bne.n	800b3a4 <__pow5mult+0x68>
 800b392:	0038      	movs	r0, r7
 800b394:	4916      	ldr	r1, [pc, #88]	; (800b3f0 <__pow5mult+0xb4>)
 800b396:	f7ff ff0b 	bl	800b1b0 <__i2b>
 800b39a:	9b01      	ldr	r3, [sp, #4]
 800b39c:	0004      	movs	r4, r0
 800b39e:	6098      	str	r0, [r3, #8]
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	6003      	str	r3, [r0, #0]
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	421d      	tst	r5, r3
 800b3a8:	d00a      	beq.n	800b3c0 <__pow5mult+0x84>
 800b3aa:	0031      	movs	r1, r6
 800b3ac:	0022      	movs	r2, r4
 800b3ae:	0038      	movs	r0, r7
 800b3b0:	f7ff ff14 	bl	800b1dc <__multiply>
 800b3b4:	0031      	movs	r1, r6
 800b3b6:	9001      	str	r0, [sp, #4]
 800b3b8:	0038      	movs	r0, r7
 800b3ba:	f7ff fdfd 	bl	800afb8 <_Bfree>
 800b3be:	9e01      	ldr	r6, [sp, #4]
 800b3c0:	106d      	asrs	r5, r5, #1
 800b3c2:	d00c      	beq.n	800b3de <__pow5mult+0xa2>
 800b3c4:	6820      	ldr	r0, [r4, #0]
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d107      	bne.n	800b3da <__pow5mult+0x9e>
 800b3ca:	0022      	movs	r2, r4
 800b3cc:	0021      	movs	r1, r4
 800b3ce:	0038      	movs	r0, r7
 800b3d0:	f7ff ff04 	bl	800b1dc <__multiply>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	6020      	str	r0, [r4, #0]
 800b3d8:	6003      	str	r3, [r0, #0]
 800b3da:	0004      	movs	r4, r0
 800b3dc:	e7e2      	b.n	800b3a4 <__pow5mult+0x68>
 800b3de:	0030      	movs	r0, r6
 800b3e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b3e2:	46c0      	nop			; (mov r8, r8)
 800b3e4:	0800d048 	.word	0x0800d048
 800b3e8:	0800cdfe 	.word	0x0800cdfe
 800b3ec:	0800cefc 	.word	0x0800cefc
 800b3f0:	00000271 	.word	0x00000271

0800b3f4 <__lshift>:
 800b3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3f6:	000c      	movs	r4, r1
 800b3f8:	0017      	movs	r7, r2
 800b3fa:	6923      	ldr	r3, [r4, #16]
 800b3fc:	1155      	asrs	r5, r2, #5
 800b3fe:	b087      	sub	sp, #28
 800b400:	18eb      	adds	r3, r5, r3
 800b402:	9302      	str	r3, [sp, #8]
 800b404:	3301      	adds	r3, #1
 800b406:	9301      	str	r3, [sp, #4]
 800b408:	6849      	ldr	r1, [r1, #4]
 800b40a:	68a3      	ldr	r3, [r4, #8]
 800b40c:	9004      	str	r0, [sp, #16]
 800b40e:	9a01      	ldr	r2, [sp, #4]
 800b410:	4293      	cmp	r3, r2
 800b412:	db10      	blt.n	800b436 <__lshift+0x42>
 800b414:	9804      	ldr	r0, [sp, #16]
 800b416:	f7ff fd8b 	bl	800af30 <_Balloc>
 800b41a:	2300      	movs	r3, #0
 800b41c:	0002      	movs	r2, r0
 800b41e:	0006      	movs	r6, r0
 800b420:	0019      	movs	r1, r3
 800b422:	3214      	adds	r2, #20
 800b424:	4298      	cmp	r0, r3
 800b426:	d10c      	bne.n	800b442 <__lshift+0x4e>
 800b428:	21da      	movs	r1, #218	; 0xda
 800b42a:	0002      	movs	r2, r0
 800b42c:	4b26      	ldr	r3, [pc, #152]	; (800b4c8 <__lshift+0xd4>)
 800b42e:	4827      	ldr	r0, [pc, #156]	; (800b4cc <__lshift+0xd8>)
 800b430:	31ff      	adds	r1, #255	; 0xff
 800b432:	f000 fcef 	bl	800be14 <__assert_func>
 800b436:	3101      	adds	r1, #1
 800b438:	005b      	lsls	r3, r3, #1
 800b43a:	e7e8      	b.n	800b40e <__lshift+0x1a>
 800b43c:	0098      	lsls	r0, r3, #2
 800b43e:	5011      	str	r1, [r2, r0]
 800b440:	3301      	adds	r3, #1
 800b442:	42ab      	cmp	r3, r5
 800b444:	dbfa      	blt.n	800b43c <__lshift+0x48>
 800b446:	43eb      	mvns	r3, r5
 800b448:	17db      	asrs	r3, r3, #31
 800b44a:	401d      	ands	r5, r3
 800b44c:	211f      	movs	r1, #31
 800b44e:	0023      	movs	r3, r4
 800b450:	0038      	movs	r0, r7
 800b452:	00ad      	lsls	r5, r5, #2
 800b454:	1955      	adds	r5, r2, r5
 800b456:	6922      	ldr	r2, [r4, #16]
 800b458:	3314      	adds	r3, #20
 800b45a:	0092      	lsls	r2, r2, #2
 800b45c:	4008      	ands	r0, r1
 800b45e:	4684      	mov	ip, r0
 800b460:	189a      	adds	r2, r3, r2
 800b462:	420f      	tst	r7, r1
 800b464:	d02a      	beq.n	800b4bc <__lshift+0xc8>
 800b466:	3101      	adds	r1, #1
 800b468:	1a09      	subs	r1, r1, r0
 800b46a:	9105      	str	r1, [sp, #20]
 800b46c:	2100      	movs	r1, #0
 800b46e:	9503      	str	r5, [sp, #12]
 800b470:	4667      	mov	r7, ip
 800b472:	6818      	ldr	r0, [r3, #0]
 800b474:	40b8      	lsls	r0, r7
 800b476:	4301      	orrs	r1, r0
 800b478:	9803      	ldr	r0, [sp, #12]
 800b47a:	c002      	stmia	r0!, {r1}
 800b47c:	cb02      	ldmia	r3!, {r1}
 800b47e:	9003      	str	r0, [sp, #12]
 800b480:	9805      	ldr	r0, [sp, #20]
 800b482:	40c1      	lsrs	r1, r0
 800b484:	429a      	cmp	r2, r3
 800b486:	d8f3      	bhi.n	800b470 <__lshift+0x7c>
 800b488:	0020      	movs	r0, r4
 800b48a:	3015      	adds	r0, #21
 800b48c:	2304      	movs	r3, #4
 800b48e:	4282      	cmp	r2, r0
 800b490:	d304      	bcc.n	800b49c <__lshift+0xa8>
 800b492:	1b13      	subs	r3, r2, r4
 800b494:	3b15      	subs	r3, #21
 800b496:	089b      	lsrs	r3, r3, #2
 800b498:	3301      	adds	r3, #1
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	50e9      	str	r1, [r5, r3]
 800b49e:	2900      	cmp	r1, #0
 800b4a0:	d002      	beq.n	800b4a8 <__lshift+0xb4>
 800b4a2:	9b02      	ldr	r3, [sp, #8]
 800b4a4:	3302      	adds	r3, #2
 800b4a6:	9301      	str	r3, [sp, #4]
 800b4a8:	9b01      	ldr	r3, [sp, #4]
 800b4aa:	9804      	ldr	r0, [sp, #16]
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	0021      	movs	r1, r4
 800b4b0:	6133      	str	r3, [r6, #16]
 800b4b2:	f7ff fd81 	bl	800afb8 <_Bfree>
 800b4b6:	0030      	movs	r0, r6
 800b4b8:	b007      	add	sp, #28
 800b4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4bc:	cb02      	ldmia	r3!, {r1}
 800b4be:	c502      	stmia	r5!, {r1}
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d8fb      	bhi.n	800b4bc <__lshift+0xc8>
 800b4c4:	e7f0      	b.n	800b4a8 <__lshift+0xb4>
 800b4c6:	46c0      	nop			; (mov r8, r8)
 800b4c8:	0800ce70 	.word	0x0800ce70
 800b4cc:	0800cefc 	.word	0x0800cefc

0800b4d0 <__mcmp>:
 800b4d0:	6902      	ldr	r2, [r0, #16]
 800b4d2:	690b      	ldr	r3, [r1, #16]
 800b4d4:	b530      	push	{r4, r5, lr}
 800b4d6:	0004      	movs	r4, r0
 800b4d8:	1ad0      	subs	r0, r2, r3
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d10d      	bne.n	800b4fa <__mcmp+0x2a>
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	3414      	adds	r4, #20
 800b4e2:	3114      	adds	r1, #20
 800b4e4:	18e2      	adds	r2, r4, r3
 800b4e6:	18c9      	adds	r1, r1, r3
 800b4e8:	3a04      	subs	r2, #4
 800b4ea:	3904      	subs	r1, #4
 800b4ec:	6815      	ldr	r5, [r2, #0]
 800b4ee:	680b      	ldr	r3, [r1, #0]
 800b4f0:	429d      	cmp	r5, r3
 800b4f2:	d003      	beq.n	800b4fc <__mcmp+0x2c>
 800b4f4:	2001      	movs	r0, #1
 800b4f6:	429d      	cmp	r5, r3
 800b4f8:	d303      	bcc.n	800b502 <__mcmp+0x32>
 800b4fa:	bd30      	pop	{r4, r5, pc}
 800b4fc:	4294      	cmp	r4, r2
 800b4fe:	d3f3      	bcc.n	800b4e8 <__mcmp+0x18>
 800b500:	e7fb      	b.n	800b4fa <__mcmp+0x2a>
 800b502:	4240      	negs	r0, r0
 800b504:	e7f9      	b.n	800b4fa <__mcmp+0x2a>
	...

0800b508 <__mdiff>:
 800b508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b50a:	000e      	movs	r6, r1
 800b50c:	0007      	movs	r7, r0
 800b50e:	0011      	movs	r1, r2
 800b510:	0030      	movs	r0, r6
 800b512:	b087      	sub	sp, #28
 800b514:	0014      	movs	r4, r2
 800b516:	f7ff ffdb 	bl	800b4d0 <__mcmp>
 800b51a:	1e05      	subs	r5, r0, #0
 800b51c:	d110      	bne.n	800b540 <__mdiff+0x38>
 800b51e:	0001      	movs	r1, r0
 800b520:	0038      	movs	r0, r7
 800b522:	f7ff fd05 	bl	800af30 <_Balloc>
 800b526:	1e02      	subs	r2, r0, #0
 800b528:	d104      	bne.n	800b534 <__mdiff+0x2c>
 800b52a:	4b40      	ldr	r3, [pc, #256]	; (800b62c <__mdiff+0x124>)
 800b52c:	4940      	ldr	r1, [pc, #256]	; (800b630 <__mdiff+0x128>)
 800b52e:	4841      	ldr	r0, [pc, #260]	; (800b634 <__mdiff+0x12c>)
 800b530:	f000 fc70 	bl	800be14 <__assert_func>
 800b534:	2301      	movs	r3, #1
 800b536:	6145      	str	r5, [r0, #20]
 800b538:	6103      	str	r3, [r0, #16]
 800b53a:	0010      	movs	r0, r2
 800b53c:	b007      	add	sp, #28
 800b53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b540:	2301      	movs	r3, #1
 800b542:	9301      	str	r3, [sp, #4]
 800b544:	2800      	cmp	r0, #0
 800b546:	db04      	blt.n	800b552 <__mdiff+0x4a>
 800b548:	0023      	movs	r3, r4
 800b54a:	0034      	movs	r4, r6
 800b54c:	001e      	movs	r6, r3
 800b54e:	2300      	movs	r3, #0
 800b550:	9301      	str	r3, [sp, #4]
 800b552:	0038      	movs	r0, r7
 800b554:	6861      	ldr	r1, [r4, #4]
 800b556:	f7ff fceb 	bl	800af30 <_Balloc>
 800b55a:	1e02      	subs	r2, r0, #0
 800b55c:	d103      	bne.n	800b566 <__mdiff+0x5e>
 800b55e:	2190      	movs	r1, #144	; 0x90
 800b560:	4b32      	ldr	r3, [pc, #200]	; (800b62c <__mdiff+0x124>)
 800b562:	0089      	lsls	r1, r1, #2
 800b564:	e7e3      	b.n	800b52e <__mdiff+0x26>
 800b566:	9b01      	ldr	r3, [sp, #4]
 800b568:	2700      	movs	r7, #0
 800b56a:	60c3      	str	r3, [r0, #12]
 800b56c:	6920      	ldr	r0, [r4, #16]
 800b56e:	3414      	adds	r4, #20
 800b570:	9401      	str	r4, [sp, #4]
 800b572:	9b01      	ldr	r3, [sp, #4]
 800b574:	0084      	lsls	r4, r0, #2
 800b576:	191b      	adds	r3, r3, r4
 800b578:	0034      	movs	r4, r6
 800b57a:	9302      	str	r3, [sp, #8]
 800b57c:	6933      	ldr	r3, [r6, #16]
 800b57e:	3414      	adds	r4, #20
 800b580:	0099      	lsls	r1, r3, #2
 800b582:	1863      	adds	r3, r4, r1
 800b584:	9303      	str	r3, [sp, #12]
 800b586:	0013      	movs	r3, r2
 800b588:	3314      	adds	r3, #20
 800b58a:	469c      	mov	ip, r3
 800b58c:	9305      	str	r3, [sp, #20]
 800b58e:	9b01      	ldr	r3, [sp, #4]
 800b590:	9304      	str	r3, [sp, #16]
 800b592:	9b04      	ldr	r3, [sp, #16]
 800b594:	cc02      	ldmia	r4!, {r1}
 800b596:	cb20      	ldmia	r3!, {r5}
 800b598:	9304      	str	r3, [sp, #16]
 800b59a:	b2ab      	uxth	r3, r5
 800b59c:	19df      	adds	r7, r3, r7
 800b59e:	b28b      	uxth	r3, r1
 800b5a0:	1afb      	subs	r3, r7, r3
 800b5a2:	0c09      	lsrs	r1, r1, #16
 800b5a4:	0c2d      	lsrs	r5, r5, #16
 800b5a6:	1a6d      	subs	r5, r5, r1
 800b5a8:	1419      	asrs	r1, r3, #16
 800b5aa:	186d      	adds	r5, r5, r1
 800b5ac:	4661      	mov	r1, ip
 800b5ae:	142f      	asrs	r7, r5, #16
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	042d      	lsls	r5, r5, #16
 800b5b4:	432b      	orrs	r3, r5
 800b5b6:	c108      	stmia	r1!, {r3}
 800b5b8:	9b03      	ldr	r3, [sp, #12]
 800b5ba:	468c      	mov	ip, r1
 800b5bc:	42a3      	cmp	r3, r4
 800b5be:	d8e8      	bhi.n	800b592 <__mdiff+0x8a>
 800b5c0:	0031      	movs	r1, r6
 800b5c2:	9c03      	ldr	r4, [sp, #12]
 800b5c4:	3115      	adds	r1, #21
 800b5c6:	2304      	movs	r3, #4
 800b5c8:	428c      	cmp	r4, r1
 800b5ca:	d304      	bcc.n	800b5d6 <__mdiff+0xce>
 800b5cc:	1ba3      	subs	r3, r4, r6
 800b5ce:	3b15      	subs	r3, #21
 800b5d0:	089b      	lsrs	r3, r3, #2
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	9901      	ldr	r1, [sp, #4]
 800b5d8:	18cc      	adds	r4, r1, r3
 800b5da:	9905      	ldr	r1, [sp, #20]
 800b5dc:	0026      	movs	r6, r4
 800b5de:	18cb      	adds	r3, r1, r3
 800b5e0:	469c      	mov	ip, r3
 800b5e2:	9902      	ldr	r1, [sp, #8]
 800b5e4:	428e      	cmp	r6, r1
 800b5e6:	d310      	bcc.n	800b60a <__mdiff+0x102>
 800b5e8:	9e02      	ldr	r6, [sp, #8]
 800b5ea:	1ee1      	subs	r1, r4, #3
 800b5ec:	2500      	movs	r5, #0
 800b5ee:	428e      	cmp	r6, r1
 800b5f0:	d304      	bcc.n	800b5fc <__mdiff+0xf4>
 800b5f2:	0031      	movs	r1, r6
 800b5f4:	3103      	adds	r1, #3
 800b5f6:	1b0c      	subs	r4, r1, r4
 800b5f8:	08a4      	lsrs	r4, r4, #2
 800b5fa:	00a5      	lsls	r5, r4, #2
 800b5fc:	195b      	adds	r3, r3, r5
 800b5fe:	3b04      	subs	r3, #4
 800b600:	6819      	ldr	r1, [r3, #0]
 800b602:	2900      	cmp	r1, #0
 800b604:	d00f      	beq.n	800b626 <__mdiff+0x11e>
 800b606:	6110      	str	r0, [r2, #16]
 800b608:	e797      	b.n	800b53a <__mdiff+0x32>
 800b60a:	ce02      	ldmia	r6!, {r1}
 800b60c:	b28d      	uxth	r5, r1
 800b60e:	19ed      	adds	r5, r5, r7
 800b610:	0c0f      	lsrs	r7, r1, #16
 800b612:	1429      	asrs	r1, r5, #16
 800b614:	1879      	adds	r1, r7, r1
 800b616:	140f      	asrs	r7, r1, #16
 800b618:	b2ad      	uxth	r5, r5
 800b61a:	0409      	lsls	r1, r1, #16
 800b61c:	430d      	orrs	r5, r1
 800b61e:	4661      	mov	r1, ip
 800b620:	c120      	stmia	r1!, {r5}
 800b622:	468c      	mov	ip, r1
 800b624:	e7dd      	b.n	800b5e2 <__mdiff+0xda>
 800b626:	3801      	subs	r0, #1
 800b628:	e7e9      	b.n	800b5fe <__mdiff+0xf6>
 800b62a:	46c0      	nop			; (mov r8, r8)
 800b62c:	0800ce70 	.word	0x0800ce70
 800b630:	00000232 	.word	0x00000232
 800b634:	0800cefc 	.word	0x0800cefc

0800b638 <__ulp>:
 800b638:	4b0f      	ldr	r3, [pc, #60]	; (800b678 <__ulp+0x40>)
 800b63a:	4019      	ands	r1, r3
 800b63c:	4b0f      	ldr	r3, [pc, #60]	; (800b67c <__ulp+0x44>)
 800b63e:	18c9      	adds	r1, r1, r3
 800b640:	2900      	cmp	r1, #0
 800b642:	dd04      	ble.n	800b64e <__ulp+0x16>
 800b644:	2200      	movs	r2, #0
 800b646:	000b      	movs	r3, r1
 800b648:	0010      	movs	r0, r2
 800b64a:	0019      	movs	r1, r3
 800b64c:	4770      	bx	lr
 800b64e:	4249      	negs	r1, r1
 800b650:	2200      	movs	r2, #0
 800b652:	2300      	movs	r3, #0
 800b654:	1509      	asrs	r1, r1, #20
 800b656:	2913      	cmp	r1, #19
 800b658:	dc04      	bgt.n	800b664 <__ulp+0x2c>
 800b65a:	2080      	movs	r0, #128	; 0x80
 800b65c:	0300      	lsls	r0, r0, #12
 800b65e:	4108      	asrs	r0, r1
 800b660:	0003      	movs	r3, r0
 800b662:	e7f1      	b.n	800b648 <__ulp+0x10>
 800b664:	3914      	subs	r1, #20
 800b666:	2001      	movs	r0, #1
 800b668:	291e      	cmp	r1, #30
 800b66a:	dc02      	bgt.n	800b672 <__ulp+0x3a>
 800b66c:	2080      	movs	r0, #128	; 0x80
 800b66e:	0600      	lsls	r0, r0, #24
 800b670:	40c8      	lsrs	r0, r1
 800b672:	0002      	movs	r2, r0
 800b674:	e7e8      	b.n	800b648 <__ulp+0x10>
 800b676:	46c0      	nop			; (mov r8, r8)
 800b678:	7ff00000 	.word	0x7ff00000
 800b67c:	fcc00000 	.word	0xfcc00000

0800b680 <__b2d>:
 800b680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b682:	0006      	movs	r6, r0
 800b684:	6903      	ldr	r3, [r0, #16]
 800b686:	3614      	adds	r6, #20
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	18f3      	adds	r3, r6, r3
 800b68c:	1f1d      	subs	r5, r3, #4
 800b68e:	682c      	ldr	r4, [r5, #0]
 800b690:	000f      	movs	r7, r1
 800b692:	0020      	movs	r0, r4
 800b694:	9301      	str	r3, [sp, #4]
 800b696:	f7ff fd43 	bl	800b120 <__hi0bits>
 800b69a:	2320      	movs	r3, #32
 800b69c:	1a1b      	subs	r3, r3, r0
 800b69e:	491f      	ldr	r1, [pc, #124]	; (800b71c <__b2d+0x9c>)
 800b6a0:	603b      	str	r3, [r7, #0]
 800b6a2:	280a      	cmp	r0, #10
 800b6a4:	dc16      	bgt.n	800b6d4 <__b2d+0x54>
 800b6a6:	230b      	movs	r3, #11
 800b6a8:	0027      	movs	r7, r4
 800b6aa:	1a1b      	subs	r3, r3, r0
 800b6ac:	40df      	lsrs	r7, r3
 800b6ae:	4339      	orrs	r1, r7
 800b6b0:	469c      	mov	ip, r3
 800b6b2:	000b      	movs	r3, r1
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	42ae      	cmp	r6, r5
 800b6b8:	d202      	bcs.n	800b6c0 <__b2d+0x40>
 800b6ba:	9901      	ldr	r1, [sp, #4]
 800b6bc:	3908      	subs	r1, #8
 800b6be:	6809      	ldr	r1, [r1, #0]
 800b6c0:	3015      	adds	r0, #21
 800b6c2:	4084      	lsls	r4, r0
 800b6c4:	4660      	mov	r0, ip
 800b6c6:	40c1      	lsrs	r1, r0
 800b6c8:	430c      	orrs	r4, r1
 800b6ca:	0022      	movs	r2, r4
 800b6cc:	0010      	movs	r0, r2
 800b6ce:	0019      	movs	r1, r3
 800b6d0:	b003      	add	sp, #12
 800b6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6d4:	2700      	movs	r7, #0
 800b6d6:	42ae      	cmp	r6, r5
 800b6d8:	d202      	bcs.n	800b6e0 <__b2d+0x60>
 800b6da:	9d01      	ldr	r5, [sp, #4]
 800b6dc:	3d08      	subs	r5, #8
 800b6de:	682f      	ldr	r7, [r5, #0]
 800b6e0:	230b      	movs	r3, #11
 800b6e2:	425b      	negs	r3, r3
 800b6e4:	469c      	mov	ip, r3
 800b6e6:	4484      	add	ip, r0
 800b6e8:	280b      	cmp	r0, #11
 800b6ea:	d013      	beq.n	800b714 <__b2d+0x94>
 800b6ec:	4663      	mov	r3, ip
 800b6ee:	2020      	movs	r0, #32
 800b6f0:	409c      	lsls	r4, r3
 800b6f2:	1ac0      	subs	r0, r0, r3
 800b6f4:	003b      	movs	r3, r7
 800b6f6:	40c3      	lsrs	r3, r0
 800b6f8:	431c      	orrs	r4, r3
 800b6fa:	4321      	orrs	r1, r4
 800b6fc:	000b      	movs	r3, r1
 800b6fe:	2100      	movs	r1, #0
 800b700:	42b5      	cmp	r5, r6
 800b702:	d901      	bls.n	800b708 <__b2d+0x88>
 800b704:	3d04      	subs	r5, #4
 800b706:	6829      	ldr	r1, [r5, #0]
 800b708:	4664      	mov	r4, ip
 800b70a:	40c1      	lsrs	r1, r0
 800b70c:	40a7      	lsls	r7, r4
 800b70e:	430f      	orrs	r7, r1
 800b710:	003a      	movs	r2, r7
 800b712:	e7db      	b.n	800b6cc <__b2d+0x4c>
 800b714:	4321      	orrs	r1, r4
 800b716:	000b      	movs	r3, r1
 800b718:	e7fa      	b.n	800b710 <__b2d+0x90>
 800b71a:	46c0      	nop			; (mov r8, r8)
 800b71c:	3ff00000 	.word	0x3ff00000

0800b720 <__d2b>:
 800b720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b722:	2101      	movs	r1, #1
 800b724:	0014      	movs	r4, r2
 800b726:	001e      	movs	r6, r3
 800b728:	9f08      	ldr	r7, [sp, #32]
 800b72a:	f7ff fc01 	bl	800af30 <_Balloc>
 800b72e:	1e05      	subs	r5, r0, #0
 800b730:	d105      	bne.n	800b73e <__d2b+0x1e>
 800b732:	0002      	movs	r2, r0
 800b734:	4b26      	ldr	r3, [pc, #152]	; (800b7d0 <__d2b+0xb0>)
 800b736:	4927      	ldr	r1, [pc, #156]	; (800b7d4 <__d2b+0xb4>)
 800b738:	4827      	ldr	r0, [pc, #156]	; (800b7d8 <__d2b+0xb8>)
 800b73a:	f000 fb6b 	bl	800be14 <__assert_func>
 800b73e:	0333      	lsls	r3, r6, #12
 800b740:	0076      	lsls	r6, r6, #1
 800b742:	0b1b      	lsrs	r3, r3, #12
 800b744:	0d76      	lsrs	r6, r6, #21
 800b746:	d124      	bne.n	800b792 <__d2b+0x72>
 800b748:	9301      	str	r3, [sp, #4]
 800b74a:	2c00      	cmp	r4, #0
 800b74c:	d027      	beq.n	800b79e <__d2b+0x7e>
 800b74e:	4668      	mov	r0, sp
 800b750:	9400      	str	r4, [sp, #0]
 800b752:	f7ff fcff 	bl	800b154 <__lo0bits>
 800b756:	9c00      	ldr	r4, [sp, #0]
 800b758:	2800      	cmp	r0, #0
 800b75a:	d01e      	beq.n	800b79a <__d2b+0x7a>
 800b75c:	9b01      	ldr	r3, [sp, #4]
 800b75e:	2120      	movs	r1, #32
 800b760:	001a      	movs	r2, r3
 800b762:	1a09      	subs	r1, r1, r0
 800b764:	408a      	lsls	r2, r1
 800b766:	40c3      	lsrs	r3, r0
 800b768:	4322      	orrs	r2, r4
 800b76a:	616a      	str	r2, [r5, #20]
 800b76c:	9301      	str	r3, [sp, #4]
 800b76e:	9c01      	ldr	r4, [sp, #4]
 800b770:	61ac      	str	r4, [r5, #24]
 800b772:	1e63      	subs	r3, r4, #1
 800b774:	419c      	sbcs	r4, r3
 800b776:	3401      	adds	r4, #1
 800b778:	612c      	str	r4, [r5, #16]
 800b77a:	2e00      	cmp	r6, #0
 800b77c:	d018      	beq.n	800b7b0 <__d2b+0x90>
 800b77e:	4b17      	ldr	r3, [pc, #92]	; (800b7dc <__d2b+0xbc>)
 800b780:	18f6      	adds	r6, r6, r3
 800b782:	2335      	movs	r3, #53	; 0x35
 800b784:	1836      	adds	r6, r6, r0
 800b786:	1a18      	subs	r0, r3, r0
 800b788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b78a:	603e      	str	r6, [r7, #0]
 800b78c:	6018      	str	r0, [r3, #0]
 800b78e:	0028      	movs	r0, r5
 800b790:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b792:	2280      	movs	r2, #128	; 0x80
 800b794:	0352      	lsls	r2, r2, #13
 800b796:	4313      	orrs	r3, r2
 800b798:	e7d6      	b.n	800b748 <__d2b+0x28>
 800b79a:	616c      	str	r4, [r5, #20]
 800b79c:	e7e7      	b.n	800b76e <__d2b+0x4e>
 800b79e:	a801      	add	r0, sp, #4
 800b7a0:	f7ff fcd8 	bl	800b154 <__lo0bits>
 800b7a4:	2401      	movs	r4, #1
 800b7a6:	9b01      	ldr	r3, [sp, #4]
 800b7a8:	612c      	str	r4, [r5, #16]
 800b7aa:	616b      	str	r3, [r5, #20]
 800b7ac:	3020      	adds	r0, #32
 800b7ae:	e7e4      	b.n	800b77a <__d2b+0x5a>
 800b7b0:	4b0b      	ldr	r3, [pc, #44]	; (800b7e0 <__d2b+0xc0>)
 800b7b2:	18c0      	adds	r0, r0, r3
 800b7b4:	4b0b      	ldr	r3, [pc, #44]	; (800b7e4 <__d2b+0xc4>)
 800b7b6:	6038      	str	r0, [r7, #0]
 800b7b8:	18e3      	adds	r3, r4, r3
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	18eb      	adds	r3, r5, r3
 800b7be:	6958      	ldr	r0, [r3, #20]
 800b7c0:	f7ff fcae 	bl	800b120 <__hi0bits>
 800b7c4:	0164      	lsls	r4, r4, #5
 800b7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c8:	1a24      	subs	r4, r4, r0
 800b7ca:	601c      	str	r4, [r3, #0]
 800b7cc:	e7df      	b.n	800b78e <__d2b+0x6e>
 800b7ce:	46c0      	nop			; (mov r8, r8)
 800b7d0:	0800ce70 	.word	0x0800ce70
 800b7d4:	0000030a 	.word	0x0000030a
 800b7d8:	0800cefc 	.word	0x0800cefc
 800b7dc:	fffffbcd 	.word	0xfffffbcd
 800b7e0:	fffffbce 	.word	0xfffffbce
 800b7e4:	3fffffff 	.word	0x3fffffff

0800b7e8 <__ratio>:
 800b7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7ea:	b087      	sub	sp, #28
 800b7ec:	000f      	movs	r7, r1
 800b7ee:	a904      	add	r1, sp, #16
 800b7f0:	0006      	movs	r6, r0
 800b7f2:	f7ff ff45 	bl	800b680 <__b2d>
 800b7f6:	9000      	str	r0, [sp, #0]
 800b7f8:	9101      	str	r1, [sp, #4]
 800b7fa:	9c00      	ldr	r4, [sp, #0]
 800b7fc:	9d01      	ldr	r5, [sp, #4]
 800b7fe:	0038      	movs	r0, r7
 800b800:	a905      	add	r1, sp, #20
 800b802:	f7ff ff3d 	bl	800b680 <__b2d>
 800b806:	9002      	str	r0, [sp, #8]
 800b808:	9103      	str	r1, [sp, #12]
 800b80a:	9a02      	ldr	r2, [sp, #8]
 800b80c:	9b03      	ldr	r3, [sp, #12]
 800b80e:	6931      	ldr	r1, [r6, #16]
 800b810:	6938      	ldr	r0, [r7, #16]
 800b812:	9e05      	ldr	r6, [sp, #20]
 800b814:	1a08      	subs	r0, r1, r0
 800b816:	9904      	ldr	r1, [sp, #16]
 800b818:	0140      	lsls	r0, r0, #5
 800b81a:	1b89      	subs	r1, r1, r6
 800b81c:	1841      	adds	r1, r0, r1
 800b81e:	0508      	lsls	r0, r1, #20
 800b820:	2900      	cmp	r1, #0
 800b822:	dd07      	ble.n	800b834 <__ratio+0x4c>
 800b824:	9901      	ldr	r1, [sp, #4]
 800b826:	1845      	adds	r5, r0, r1
 800b828:	0020      	movs	r0, r4
 800b82a:	0029      	movs	r1, r5
 800b82c:	f7f5 fdde 	bl	80013ec <__aeabi_ddiv>
 800b830:	b007      	add	sp, #28
 800b832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b834:	9903      	ldr	r1, [sp, #12]
 800b836:	1a0b      	subs	r3, r1, r0
 800b838:	e7f6      	b.n	800b828 <__ratio+0x40>

0800b83a <__copybits>:
 800b83a:	b570      	push	{r4, r5, r6, lr}
 800b83c:	0014      	movs	r4, r2
 800b83e:	0005      	movs	r5, r0
 800b840:	3901      	subs	r1, #1
 800b842:	6913      	ldr	r3, [r2, #16]
 800b844:	1149      	asrs	r1, r1, #5
 800b846:	3101      	adds	r1, #1
 800b848:	0089      	lsls	r1, r1, #2
 800b84a:	3414      	adds	r4, #20
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	1841      	adds	r1, r0, r1
 800b850:	18e3      	adds	r3, r4, r3
 800b852:	42a3      	cmp	r3, r4
 800b854:	d80d      	bhi.n	800b872 <__copybits+0x38>
 800b856:	0014      	movs	r4, r2
 800b858:	3411      	adds	r4, #17
 800b85a:	2500      	movs	r5, #0
 800b85c:	429c      	cmp	r4, r3
 800b85e:	d803      	bhi.n	800b868 <__copybits+0x2e>
 800b860:	1a9b      	subs	r3, r3, r2
 800b862:	3b11      	subs	r3, #17
 800b864:	089b      	lsrs	r3, r3, #2
 800b866:	009d      	lsls	r5, r3, #2
 800b868:	2300      	movs	r3, #0
 800b86a:	1940      	adds	r0, r0, r5
 800b86c:	4281      	cmp	r1, r0
 800b86e:	d803      	bhi.n	800b878 <__copybits+0x3e>
 800b870:	bd70      	pop	{r4, r5, r6, pc}
 800b872:	cc40      	ldmia	r4!, {r6}
 800b874:	c540      	stmia	r5!, {r6}
 800b876:	e7ec      	b.n	800b852 <__copybits+0x18>
 800b878:	c008      	stmia	r0!, {r3}
 800b87a:	e7f7      	b.n	800b86c <__copybits+0x32>

0800b87c <__any_on>:
 800b87c:	0002      	movs	r2, r0
 800b87e:	6900      	ldr	r0, [r0, #16]
 800b880:	b510      	push	{r4, lr}
 800b882:	3214      	adds	r2, #20
 800b884:	114b      	asrs	r3, r1, #5
 800b886:	4298      	cmp	r0, r3
 800b888:	db13      	blt.n	800b8b2 <__any_on+0x36>
 800b88a:	dd0c      	ble.n	800b8a6 <__any_on+0x2a>
 800b88c:	241f      	movs	r4, #31
 800b88e:	0008      	movs	r0, r1
 800b890:	4020      	ands	r0, r4
 800b892:	4221      	tst	r1, r4
 800b894:	d007      	beq.n	800b8a6 <__any_on+0x2a>
 800b896:	0099      	lsls	r1, r3, #2
 800b898:	588c      	ldr	r4, [r1, r2]
 800b89a:	0021      	movs	r1, r4
 800b89c:	40c1      	lsrs	r1, r0
 800b89e:	4081      	lsls	r1, r0
 800b8a0:	2001      	movs	r0, #1
 800b8a2:	428c      	cmp	r4, r1
 800b8a4:	d104      	bne.n	800b8b0 <__any_on+0x34>
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	18d3      	adds	r3, r2, r3
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d803      	bhi.n	800b8b6 <__any_on+0x3a>
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	bd10      	pop	{r4, pc}
 800b8b2:	0003      	movs	r3, r0
 800b8b4:	e7f7      	b.n	800b8a6 <__any_on+0x2a>
 800b8b6:	3b04      	subs	r3, #4
 800b8b8:	6819      	ldr	r1, [r3, #0]
 800b8ba:	2900      	cmp	r1, #0
 800b8bc:	d0f5      	beq.n	800b8aa <__any_on+0x2e>
 800b8be:	2001      	movs	r0, #1
 800b8c0:	e7f6      	b.n	800b8b0 <__any_on+0x34>

0800b8c2 <_calloc_r>:
 800b8c2:	b570      	push	{r4, r5, r6, lr}
 800b8c4:	0c13      	lsrs	r3, r2, #16
 800b8c6:	0c0d      	lsrs	r5, r1, #16
 800b8c8:	d11e      	bne.n	800b908 <_calloc_r+0x46>
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10c      	bne.n	800b8e8 <_calloc_r+0x26>
 800b8ce:	b289      	uxth	r1, r1
 800b8d0:	b294      	uxth	r4, r2
 800b8d2:	434c      	muls	r4, r1
 800b8d4:	0021      	movs	r1, r4
 800b8d6:	f000 f88d 	bl	800b9f4 <_malloc_r>
 800b8da:	1e05      	subs	r5, r0, #0
 800b8dc:	d01b      	beq.n	800b916 <_calloc_r+0x54>
 800b8de:	0022      	movs	r2, r4
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	f7fc fb6f 	bl	8007fc4 <memset>
 800b8e6:	e016      	b.n	800b916 <_calloc_r+0x54>
 800b8e8:	1c1d      	adds	r5, r3, #0
 800b8ea:	1c0b      	adds	r3, r1, #0
 800b8ec:	b292      	uxth	r2, r2
 800b8ee:	b289      	uxth	r1, r1
 800b8f0:	b29c      	uxth	r4, r3
 800b8f2:	4351      	muls	r1, r2
 800b8f4:	b2ab      	uxth	r3, r5
 800b8f6:	4363      	muls	r3, r4
 800b8f8:	0c0c      	lsrs	r4, r1, #16
 800b8fa:	191c      	adds	r4, r3, r4
 800b8fc:	0c22      	lsrs	r2, r4, #16
 800b8fe:	d107      	bne.n	800b910 <_calloc_r+0x4e>
 800b900:	0424      	lsls	r4, r4, #16
 800b902:	b289      	uxth	r1, r1
 800b904:	430c      	orrs	r4, r1
 800b906:	e7e5      	b.n	800b8d4 <_calloc_r+0x12>
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d101      	bne.n	800b910 <_calloc_r+0x4e>
 800b90c:	1c13      	adds	r3, r2, #0
 800b90e:	e7ed      	b.n	800b8ec <_calloc_r+0x2a>
 800b910:	230c      	movs	r3, #12
 800b912:	2500      	movs	r5, #0
 800b914:	6003      	str	r3, [r0, #0]
 800b916:	0028      	movs	r0, r5
 800b918:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b91c <_free_r>:
 800b91c:	b570      	push	{r4, r5, r6, lr}
 800b91e:	0005      	movs	r5, r0
 800b920:	2900      	cmp	r1, #0
 800b922:	d010      	beq.n	800b946 <_free_r+0x2a>
 800b924:	1f0c      	subs	r4, r1, #4
 800b926:	6823      	ldr	r3, [r4, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	da00      	bge.n	800b92e <_free_r+0x12>
 800b92c:	18e4      	adds	r4, r4, r3
 800b92e:	0028      	movs	r0, r5
 800b930:	f000 fab2 	bl	800be98 <__malloc_lock>
 800b934:	4a1d      	ldr	r2, [pc, #116]	; (800b9ac <_free_r+0x90>)
 800b936:	6813      	ldr	r3, [r2, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d105      	bne.n	800b948 <_free_r+0x2c>
 800b93c:	6063      	str	r3, [r4, #4]
 800b93e:	6014      	str	r4, [r2, #0]
 800b940:	0028      	movs	r0, r5
 800b942:	f000 fab1 	bl	800bea8 <__malloc_unlock>
 800b946:	bd70      	pop	{r4, r5, r6, pc}
 800b948:	42a3      	cmp	r3, r4
 800b94a:	d908      	bls.n	800b95e <_free_r+0x42>
 800b94c:	6821      	ldr	r1, [r4, #0]
 800b94e:	1860      	adds	r0, r4, r1
 800b950:	4283      	cmp	r3, r0
 800b952:	d1f3      	bne.n	800b93c <_free_r+0x20>
 800b954:	6818      	ldr	r0, [r3, #0]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	1841      	adds	r1, r0, r1
 800b95a:	6021      	str	r1, [r4, #0]
 800b95c:	e7ee      	b.n	800b93c <_free_r+0x20>
 800b95e:	001a      	movs	r2, r3
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <_free_r+0x4e>
 800b966:	42a3      	cmp	r3, r4
 800b968:	d9f9      	bls.n	800b95e <_free_r+0x42>
 800b96a:	6811      	ldr	r1, [r2, #0]
 800b96c:	1850      	adds	r0, r2, r1
 800b96e:	42a0      	cmp	r0, r4
 800b970:	d10b      	bne.n	800b98a <_free_r+0x6e>
 800b972:	6820      	ldr	r0, [r4, #0]
 800b974:	1809      	adds	r1, r1, r0
 800b976:	1850      	adds	r0, r2, r1
 800b978:	6011      	str	r1, [r2, #0]
 800b97a:	4283      	cmp	r3, r0
 800b97c:	d1e0      	bne.n	800b940 <_free_r+0x24>
 800b97e:	6818      	ldr	r0, [r3, #0]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	1841      	adds	r1, r0, r1
 800b984:	6011      	str	r1, [r2, #0]
 800b986:	6053      	str	r3, [r2, #4]
 800b988:	e7da      	b.n	800b940 <_free_r+0x24>
 800b98a:	42a0      	cmp	r0, r4
 800b98c:	d902      	bls.n	800b994 <_free_r+0x78>
 800b98e:	230c      	movs	r3, #12
 800b990:	602b      	str	r3, [r5, #0]
 800b992:	e7d5      	b.n	800b940 <_free_r+0x24>
 800b994:	6821      	ldr	r1, [r4, #0]
 800b996:	1860      	adds	r0, r4, r1
 800b998:	4283      	cmp	r3, r0
 800b99a:	d103      	bne.n	800b9a4 <_free_r+0x88>
 800b99c:	6818      	ldr	r0, [r3, #0]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	1841      	adds	r1, r0, r1
 800b9a2:	6021      	str	r1, [r4, #0]
 800b9a4:	6063      	str	r3, [r4, #4]
 800b9a6:	6054      	str	r4, [r2, #4]
 800b9a8:	e7ca      	b.n	800b940 <_free_r+0x24>
 800b9aa:	46c0      	nop			; (mov r8, r8)
 800b9ac:	20000468 	.word	0x20000468

0800b9b0 <sbrk_aligned>:
 800b9b0:	b570      	push	{r4, r5, r6, lr}
 800b9b2:	4e0f      	ldr	r6, [pc, #60]	; (800b9f0 <sbrk_aligned+0x40>)
 800b9b4:	000d      	movs	r5, r1
 800b9b6:	6831      	ldr	r1, [r6, #0]
 800b9b8:	0004      	movs	r4, r0
 800b9ba:	2900      	cmp	r1, #0
 800b9bc:	d102      	bne.n	800b9c4 <sbrk_aligned+0x14>
 800b9be:	f000 f9f7 	bl	800bdb0 <_sbrk_r>
 800b9c2:	6030      	str	r0, [r6, #0]
 800b9c4:	0029      	movs	r1, r5
 800b9c6:	0020      	movs	r0, r4
 800b9c8:	f000 f9f2 	bl	800bdb0 <_sbrk_r>
 800b9cc:	1c43      	adds	r3, r0, #1
 800b9ce:	d00a      	beq.n	800b9e6 <sbrk_aligned+0x36>
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	1cc5      	adds	r5, r0, #3
 800b9d4:	439d      	bics	r5, r3
 800b9d6:	42a8      	cmp	r0, r5
 800b9d8:	d007      	beq.n	800b9ea <sbrk_aligned+0x3a>
 800b9da:	1a29      	subs	r1, r5, r0
 800b9dc:	0020      	movs	r0, r4
 800b9de:	f000 f9e7 	bl	800bdb0 <_sbrk_r>
 800b9e2:	1c43      	adds	r3, r0, #1
 800b9e4:	d101      	bne.n	800b9ea <sbrk_aligned+0x3a>
 800b9e6:	2501      	movs	r5, #1
 800b9e8:	426d      	negs	r5, r5
 800b9ea:	0028      	movs	r0, r5
 800b9ec:	bd70      	pop	{r4, r5, r6, pc}
 800b9ee:	46c0      	nop			; (mov r8, r8)
 800b9f0:	2000046c 	.word	0x2000046c

0800b9f4 <_malloc_r>:
 800b9f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9f6:	2203      	movs	r2, #3
 800b9f8:	1ccb      	adds	r3, r1, #3
 800b9fa:	4393      	bics	r3, r2
 800b9fc:	3308      	adds	r3, #8
 800b9fe:	0006      	movs	r6, r0
 800ba00:	001f      	movs	r7, r3
 800ba02:	2b0c      	cmp	r3, #12
 800ba04:	d232      	bcs.n	800ba6c <_malloc_r+0x78>
 800ba06:	270c      	movs	r7, #12
 800ba08:	42b9      	cmp	r1, r7
 800ba0a:	d831      	bhi.n	800ba70 <_malloc_r+0x7c>
 800ba0c:	0030      	movs	r0, r6
 800ba0e:	f000 fa43 	bl	800be98 <__malloc_lock>
 800ba12:	4d32      	ldr	r5, [pc, #200]	; (800badc <_malloc_r+0xe8>)
 800ba14:	682b      	ldr	r3, [r5, #0]
 800ba16:	001c      	movs	r4, r3
 800ba18:	2c00      	cmp	r4, #0
 800ba1a:	d12e      	bne.n	800ba7a <_malloc_r+0x86>
 800ba1c:	0039      	movs	r1, r7
 800ba1e:	0030      	movs	r0, r6
 800ba20:	f7ff ffc6 	bl	800b9b0 <sbrk_aligned>
 800ba24:	0004      	movs	r4, r0
 800ba26:	1c43      	adds	r3, r0, #1
 800ba28:	d11e      	bne.n	800ba68 <_malloc_r+0x74>
 800ba2a:	682c      	ldr	r4, [r5, #0]
 800ba2c:	0025      	movs	r5, r4
 800ba2e:	2d00      	cmp	r5, #0
 800ba30:	d14a      	bne.n	800bac8 <_malloc_r+0xd4>
 800ba32:	6823      	ldr	r3, [r4, #0]
 800ba34:	0029      	movs	r1, r5
 800ba36:	18e3      	adds	r3, r4, r3
 800ba38:	0030      	movs	r0, r6
 800ba3a:	9301      	str	r3, [sp, #4]
 800ba3c:	f000 f9b8 	bl	800bdb0 <_sbrk_r>
 800ba40:	9b01      	ldr	r3, [sp, #4]
 800ba42:	4283      	cmp	r3, r0
 800ba44:	d143      	bne.n	800bace <_malloc_r+0xda>
 800ba46:	6823      	ldr	r3, [r4, #0]
 800ba48:	3703      	adds	r7, #3
 800ba4a:	1aff      	subs	r7, r7, r3
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	439f      	bics	r7, r3
 800ba50:	3708      	adds	r7, #8
 800ba52:	2f0c      	cmp	r7, #12
 800ba54:	d200      	bcs.n	800ba58 <_malloc_r+0x64>
 800ba56:	270c      	movs	r7, #12
 800ba58:	0039      	movs	r1, r7
 800ba5a:	0030      	movs	r0, r6
 800ba5c:	f7ff ffa8 	bl	800b9b0 <sbrk_aligned>
 800ba60:	1c43      	adds	r3, r0, #1
 800ba62:	d034      	beq.n	800bace <_malloc_r+0xda>
 800ba64:	6823      	ldr	r3, [r4, #0]
 800ba66:	19df      	adds	r7, r3, r7
 800ba68:	6027      	str	r7, [r4, #0]
 800ba6a:	e013      	b.n	800ba94 <_malloc_r+0xa0>
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	dacb      	bge.n	800ba08 <_malloc_r+0x14>
 800ba70:	230c      	movs	r3, #12
 800ba72:	2500      	movs	r5, #0
 800ba74:	6033      	str	r3, [r6, #0]
 800ba76:	0028      	movs	r0, r5
 800ba78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ba7a:	6822      	ldr	r2, [r4, #0]
 800ba7c:	1bd1      	subs	r1, r2, r7
 800ba7e:	d420      	bmi.n	800bac2 <_malloc_r+0xce>
 800ba80:	290b      	cmp	r1, #11
 800ba82:	d917      	bls.n	800bab4 <_malloc_r+0xc0>
 800ba84:	19e2      	adds	r2, r4, r7
 800ba86:	6027      	str	r7, [r4, #0]
 800ba88:	42a3      	cmp	r3, r4
 800ba8a:	d111      	bne.n	800bab0 <_malloc_r+0xbc>
 800ba8c:	602a      	str	r2, [r5, #0]
 800ba8e:	6863      	ldr	r3, [r4, #4]
 800ba90:	6011      	str	r1, [r2, #0]
 800ba92:	6053      	str	r3, [r2, #4]
 800ba94:	0030      	movs	r0, r6
 800ba96:	0025      	movs	r5, r4
 800ba98:	f000 fa06 	bl	800bea8 <__malloc_unlock>
 800ba9c:	2207      	movs	r2, #7
 800ba9e:	350b      	adds	r5, #11
 800baa0:	1d23      	adds	r3, r4, #4
 800baa2:	4395      	bics	r5, r2
 800baa4:	1aea      	subs	r2, r5, r3
 800baa6:	429d      	cmp	r5, r3
 800baa8:	d0e5      	beq.n	800ba76 <_malloc_r+0x82>
 800baaa:	1b5b      	subs	r3, r3, r5
 800baac:	50a3      	str	r3, [r4, r2]
 800baae:	e7e2      	b.n	800ba76 <_malloc_r+0x82>
 800bab0:	605a      	str	r2, [r3, #4]
 800bab2:	e7ec      	b.n	800ba8e <_malloc_r+0x9a>
 800bab4:	6862      	ldr	r2, [r4, #4]
 800bab6:	42a3      	cmp	r3, r4
 800bab8:	d101      	bne.n	800babe <_malloc_r+0xca>
 800baba:	602a      	str	r2, [r5, #0]
 800babc:	e7ea      	b.n	800ba94 <_malloc_r+0xa0>
 800babe:	605a      	str	r2, [r3, #4]
 800bac0:	e7e8      	b.n	800ba94 <_malloc_r+0xa0>
 800bac2:	0023      	movs	r3, r4
 800bac4:	6864      	ldr	r4, [r4, #4]
 800bac6:	e7a7      	b.n	800ba18 <_malloc_r+0x24>
 800bac8:	002c      	movs	r4, r5
 800baca:	686d      	ldr	r5, [r5, #4]
 800bacc:	e7af      	b.n	800ba2e <_malloc_r+0x3a>
 800bace:	230c      	movs	r3, #12
 800bad0:	0030      	movs	r0, r6
 800bad2:	6033      	str	r3, [r6, #0]
 800bad4:	f000 f9e8 	bl	800bea8 <__malloc_unlock>
 800bad8:	e7cd      	b.n	800ba76 <_malloc_r+0x82>
 800bada:	46c0      	nop			; (mov r8, r8)
 800badc:	20000468 	.word	0x20000468

0800bae0 <__ssputs_r>:
 800bae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bae2:	688e      	ldr	r6, [r1, #8]
 800bae4:	b085      	sub	sp, #20
 800bae6:	0007      	movs	r7, r0
 800bae8:	000c      	movs	r4, r1
 800baea:	9203      	str	r2, [sp, #12]
 800baec:	9301      	str	r3, [sp, #4]
 800baee:	429e      	cmp	r6, r3
 800baf0:	d83c      	bhi.n	800bb6c <__ssputs_r+0x8c>
 800baf2:	2390      	movs	r3, #144	; 0x90
 800baf4:	898a      	ldrh	r2, [r1, #12]
 800baf6:	00db      	lsls	r3, r3, #3
 800baf8:	421a      	tst	r2, r3
 800bafa:	d034      	beq.n	800bb66 <__ssputs_r+0x86>
 800bafc:	6909      	ldr	r1, [r1, #16]
 800bafe:	6823      	ldr	r3, [r4, #0]
 800bb00:	6960      	ldr	r0, [r4, #20]
 800bb02:	1a5b      	subs	r3, r3, r1
 800bb04:	9302      	str	r3, [sp, #8]
 800bb06:	2303      	movs	r3, #3
 800bb08:	4343      	muls	r3, r0
 800bb0a:	0fdd      	lsrs	r5, r3, #31
 800bb0c:	18ed      	adds	r5, r5, r3
 800bb0e:	9b01      	ldr	r3, [sp, #4]
 800bb10:	9802      	ldr	r0, [sp, #8]
 800bb12:	3301      	adds	r3, #1
 800bb14:	181b      	adds	r3, r3, r0
 800bb16:	106d      	asrs	r5, r5, #1
 800bb18:	42ab      	cmp	r3, r5
 800bb1a:	d900      	bls.n	800bb1e <__ssputs_r+0x3e>
 800bb1c:	001d      	movs	r5, r3
 800bb1e:	0553      	lsls	r3, r2, #21
 800bb20:	d532      	bpl.n	800bb88 <__ssputs_r+0xa8>
 800bb22:	0029      	movs	r1, r5
 800bb24:	0038      	movs	r0, r7
 800bb26:	f7ff ff65 	bl	800b9f4 <_malloc_r>
 800bb2a:	1e06      	subs	r6, r0, #0
 800bb2c:	d109      	bne.n	800bb42 <__ssputs_r+0x62>
 800bb2e:	230c      	movs	r3, #12
 800bb30:	603b      	str	r3, [r7, #0]
 800bb32:	2340      	movs	r3, #64	; 0x40
 800bb34:	2001      	movs	r0, #1
 800bb36:	89a2      	ldrh	r2, [r4, #12]
 800bb38:	4240      	negs	r0, r0
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	81a3      	strh	r3, [r4, #12]
 800bb3e:	b005      	add	sp, #20
 800bb40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb42:	9a02      	ldr	r2, [sp, #8]
 800bb44:	6921      	ldr	r1, [r4, #16]
 800bb46:	f7ff f9ea 	bl	800af1e <memcpy>
 800bb4a:	89a3      	ldrh	r3, [r4, #12]
 800bb4c:	4a14      	ldr	r2, [pc, #80]	; (800bba0 <__ssputs_r+0xc0>)
 800bb4e:	401a      	ands	r2, r3
 800bb50:	2380      	movs	r3, #128	; 0x80
 800bb52:	4313      	orrs	r3, r2
 800bb54:	81a3      	strh	r3, [r4, #12]
 800bb56:	9b02      	ldr	r3, [sp, #8]
 800bb58:	6126      	str	r6, [r4, #16]
 800bb5a:	18f6      	adds	r6, r6, r3
 800bb5c:	6026      	str	r6, [r4, #0]
 800bb5e:	6165      	str	r5, [r4, #20]
 800bb60:	9e01      	ldr	r6, [sp, #4]
 800bb62:	1aed      	subs	r5, r5, r3
 800bb64:	60a5      	str	r5, [r4, #8]
 800bb66:	9b01      	ldr	r3, [sp, #4]
 800bb68:	429e      	cmp	r6, r3
 800bb6a:	d900      	bls.n	800bb6e <__ssputs_r+0x8e>
 800bb6c:	9e01      	ldr	r6, [sp, #4]
 800bb6e:	0032      	movs	r2, r6
 800bb70:	9903      	ldr	r1, [sp, #12]
 800bb72:	6820      	ldr	r0, [r4, #0]
 800bb74:	f000 f97c 	bl	800be70 <memmove>
 800bb78:	68a3      	ldr	r3, [r4, #8]
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	1b9b      	subs	r3, r3, r6
 800bb7e:	60a3      	str	r3, [r4, #8]
 800bb80:	6823      	ldr	r3, [r4, #0]
 800bb82:	199e      	adds	r6, r3, r6
 800bb84:	6026      	str	r6, [r4, #0]
 800bb86:	e7da      	b.n	800bb3e <__ssputs_r+0x5e>
 800bb88:	002a      	movs	r2, r5
 800bb8a:	0038      	movs	r0, r7
 800bb8c:	f000 f994 	bl	800beb8 <_realloc_r>
 800bb90:	1e06      	subs	r6, r0, #0
 800bb92:	d1e0      	bne.n	800bb56 <__ssputs_r+0x76>
 800bb94:	0038      	movs	r0, r7
 800bb96:	6921      	ldr	r1, [r4, #16]
 800bb98:	f7ff fec0 	bl	800b91c <_free_r>
 800bb9c:	e7c7      	b.n	800bb2e <__ssputs_r+0x4e>
 800bb9e:	46c0      	nop			; (mov r8, r8)
 800bba0:	fffffb7f 	.word	0xfffffb7f

0800bba4 <_svfiprintf_r>:
 800bba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bba6:	b0a1      	sub	sp, #132	; 0x84
 800bba8:	9003      	str	r0, [sp, #12]
 800bbaa:	001d      	movs	r5, r3
 800bbac:	898b      	ldrh	r3, [r1, #12]
 800bbae:	000f      	movs	r7, r1
 800bbb0:	0016      	movs	r6, r2
 800bbb2:	061b      	lsls	r3, r3, #24
 800bbb4:	d511      	bpl.n	800bbda <_svfiprintf_r+0x36>
 800bbb6:	690b      	ldr	r3, [r1, #16]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10e      	bne.n	800bbda <_svfiprintf_r+0x36>
 800bbbc:	2140      	movs	r1, #64	; 0x40
 800bbbe:	f7ff ff19 	bl	800b9f4 <_malloc_r>
 800bbc2:	6038      	str	r0, [r7, #0]
 800bbc4:	6138      	str	r0, [r7, #16]
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	d105      	bne.n	800bbd6 <_svfiprintf_r+0x32>
 800bbca:	230c      	movs	r3, #12
 800bbcc:	9a03      	ldr	r2, [sp, #12]
 800bbce:	3801      	subs	r0, #1
 800bbd0:	6013      	str	r3, [r2, #0]
 800bbd2:	b021      	add	sp, #132	; 0x84
 800bbd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbd6:	2340      	movs	r3, #64	; 0x40
 800bbd8:	617b      	str	r3, [r7, #20]
 800bbda:	2300      	movs	r3, #0
 800bbdc:	ac08      	add	r4, sp, #32
 800bbde:	6163      	str	r3, [r4, #20]
 800bbe0:	3320      	adds	r3, #32
 800bbe2:	7663      	strb	r3, [r4, #25]
 800bbe4:	3310      	adds	r3, #16
 800bbe6:	76a3      	strb	r3, [r4, #26]
 800bbe8:	9507      	str	r5, [sp, #28]
 800bbea:	0035      	movs	r5, r6
 800bbec:	782b      	ldrb	r3, [r5, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d001      	beq.n	800bbf6 <_svfiprintf_r+0x52>
 800bbf2:	2b25      	cmp	r3, #37	; 0x25
 800bbf4:	d147      	bne.n	800bc86 <_svfiprintf_r+0xe2>
 800bbf6:	1bab      	subs	r3, r5, r6
 800bbf8:	9305      	str	r3, [sp, #20]
 800bbfa:	42b5      	cmp	r5, r6
 800bbfc:	d00c      	beq.n	800bc18 <_svfiprintf_r+0x74>
 800bbfe:	0032      	movs	r2, r6
 800bc00:	0039      	movs	r1, r7
 800bc02:	9803      	ldr	r0, [sp, #12]
 800bc04:	f7ff ff6c 	bl	800bae0 <__ssputs_r>
 800bc08:	1c43      	adds	r3, r0, #1
 800bc0a:	d100      	bne.n	800bc0e <_svfiprintf_r+0x6a>
 800bc0c:	e0ae      	b.n	800bd6c <_svfiprintf_r+0x1c8>
 800bc0e:	6962      	ldr	r2, [r4, #20]
 800bc10:	9b05      	ldr	r3, [sp, #20]
 800bc12:	4694      	mov	ip, r2
 800bc14:	4463      	add	r3, ip
 800bc16:	6163      	str	r3, [r4, #20]
 800bc18:	782b      	ldrb	r3, [r5, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d100      	bne.n	800bc20 <_svfiprintf_r+0x7c>
 800bc1e:	e0a5      	b.n	800bd6c <_svfiprintf_r+0x1c8>
 800bc20:	2201      	movs	r2, #1
 800bc22:	2300      	movs	r3, #0
 800bc24:	4252      	negs	r2, r2
 800bc26:	6062      	str	r2, [r4, #4]
 800bc28:	a904      	add	r1, sp, #16
 800bc2a:	3254      	adds	r2, #84	; 0x54
 800bc2c:	1852      	adds	r2, r2, r1
 800bc2e:	1c6e      	adds	r6, r5, #1
 800bc30:	6023      	str	r3, [r4, #0]
 800bc32:	60e3      	str	r3, [r4, #12]
 800bc34:	60a3      	str	r3, [r4, #8]
 800bc36:	7013      	strb	r3, [r2, #0]
 800bc38:	65a3      	str	r3, [r4, #88]	; 0x58
 800bc3a:	2205      	movs	r2, #5
 800bc3c:	7831      	ldrb	r1, [r6, #0]
 800bc3e:	4854      	ldr	r0, [pc, #336]	; (800bd90 <_svfiprintf_r+0x1ec>)
 800bc40:	f7ff f962 	bl	800af08 <memchr>
 800bc44:	1c75      	adds	r5, r6, #1
 800bc46:	2800      	cmp	r0, #0
 800bc48:	d11f      	bne.n	800bc8a <_svfiprintf_r+0xe6>
 800bc4a:	6822      	ldr	r2, [r4, #0]
 800bc4c:	06d3      	lsls	r3, r2, #27
 800bc4e:	d504      	bpl.n	800bc5a <_svfiprintf_r+0xb6>
 800bc50:	2353      	movs	r3, #83	; 0x53
 800bc52:	a904      	add	r1, sp, #16
 800bc54:	185b      	adds	r3, r3, r1
 800bc56:	2120      	movs	r1, #32
 800bc58:	7019      	strb	r1, [r3, #0]
 800bc5a:	0713      	lsls	r3, r2, #28
 800bc5c:	d504      	bpl.n	800bc68 <_svfiprintf_r+0xc4>
 800bc5e:	2353      	movs	r3, #83	; 0x53
 800bc60:	a904      	add	r1, sp, #16
 800bc62:	185b      	adds	r3, r3, r1
 800bc64:	212b      	movs	r1, #43	; 0x2b
 800bc66:	7019      	strb	r1, [r3, #0]
 800bc68:	7833      	ldrb	r3, [r6, #0]
 800bc6a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc6c:	d016      	beq.n	800bc9c <_svfiprintf_r+0xf8>
 800bc6e:	0035      	movs	r5, r6
 800bc70:	2100      	movs	r1, #0
 800bc72:	200a      	movs	r0, #10
 800bc74:	68e3      	ldr	r3, [r4, #12]
 800bc76:	782a      	ldrb	r2, [r5, #0]
 800bc78:	1c6e      	adds	r6, r5, #1
 800bc7a:	3a30      	subs	r2, #48	; 0x30
 800bc7c:	2a09      	cmp	r2, #9
 800bc7e:	d94e      	bls.n	800bd1e <_svfiprintf_r+0x17a>
 800bc80:	2900      	cmp	r1, #0
 800bc82:	d111      	bne.n	800bca8 <_svfiprintf_r+0x104>
 800bc84:	e017      	b.n	800bcb6 <_svfiprintf_r+0x112>
 800bc86:	3501      	adds	r5, #1
 800bc88:	e7b0      	b.n	800bbec <_svfiprintf_r+0x48>
 800bc8a:	4b41      	ldr	r3, [pc, #260]	; (800bd90 <_svfiprintf_r+0x1ec>)
 800bc8c:	6822      	ldr	r2, [r4, #0]
 800bc8e:	1ac0      	subs	r0, r0, r3
 800bc90:	2301      	movs	r3, #1
 800bc92:	4083      	lsls	r3, r0
 800bc94:	4313      	orrs	r3, r2
 800bc96:	002e      	movs	r6, r5
 800bc98:	6023      	str	r3, [r4, #0]
 800bc9a:	e7ce      	b.n	800bc3a <_svfiprintf_r+0x96>
 800bc9c:	9b07      	ldr	r3, [sp, #28]
 800bc9e:	1d19      	adds	r1, r3, #4
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	9107      	str	r1, [sp, #28]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	db01      	blt.n	800bcac <_svfiprintf_r+0x108>
 800bca8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcaa:	e004      	b.n	800bcb6 <_svfiprintf_r+0x112>
 800bcac:	425b      	negs	r3, r3
 800bcae:	60e3      	str	r3, [r4, #12]
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	6023      	str	r3, [r4, #0]
 800bcb6:	782b      	ldrb	r3, [r5, #0]
 800bcb8:	2b2e      	cmp	r3, #46	; 0x2e
 800bcba:	d10a      	bne.n	800bcd2 <_svfiprintf_r+0x12e>
 800bcbc:	786b      	ldrb	r3, [r5, #1]
 800bcbe:	2b2a      	cmp	r3, #42	; 0x2a
 800bcc0:	d135      	bne.n	800bd2e <_svfiprintf_r+0x18a>
 800bcc2:	9b07      	ldr	r3, [sp, #28]
 800bcc4:	3502      	adds	r5, #2
 800bcc6:	1d1a      	adds	r2, r3, #4
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	9207      	str	r2, [sp, #28]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	db2b      	blt.n	800bd28 <_svfiprintf_r+0x184>
 800bcd0:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd2:	4e30      	ldr	r6, [pc, #192]	; (800bd94 <_svfiprintf_r+0x1f0>)
 800bcd4:	2203      	movs	r2, #3
 800bcd6:	0030      	movs	r0, r6
 800bcd8:	7829      	ldrb	r1, [r5, #0]
 800bcda:	f7ff f915 	bl	800af08 <memchr>
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d006      	beq.n	800bcf0 <_svfiprintf_r+0x14c>
 800bce2:	2340      	movs	r3, #64	; 0x40
 800bce4:	1b80      	subs	r0, r0, r6
 800bce6:	4083      	lsls	r3, r0
 800bce8:	6822      	ldr	r2, [r4, #0]
 800bcea:	3501      	adds	r5, #1
 800bcec:	4313      	orrs	r3, r2
 800bcee:	6023      	str	r3, [r4, #0]
 800bcf0:	7829      	ldrb	r1, [r5, #0]
 800bcf2:	2206      	movs	r2, #6
 800bcf4:	4828      	ldr	r0, [pc, #160]	; (800bd98 <_svfiprintf_r+0x1f4>)
 800bcf6:	1c6e      	adds	r6, r5, #1
 800bcf8:	7621      	strb	r1, [r4, #24]
 800bcfa:	f7ff f905 	bl	800af08 <memchr>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d03c      	beq.n	800bd7c <_svfiprintf_r+0x1d8>
 800bd02:	4b26      	ldr	r3, [pc, #152]	; (800bd9c <_svfiprintf_r+0x1f8>)
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d125      	bne.n	800bd54 <_svfiprintf_r+0x1b0>
 800bd08:	2207      	movs	r2, #7
 800bd0a:	9b07      	ldr	r3, [sp, #28]
 800bd0c:	3307      	adds	r3, #7
 800bd0e:	4393      	bics	r3, r2
 800bd10:	3308      	adds	r3, #8
 800bd12:	9307      	str	r3, [sp, #28]
 800bd14:	6963      	ldr	r3, [r4, #20]
 800bd16:	9a04      	ldr	r2, [sp, #16]
 800bd18:	189b      	adds	r3, r3, r2
 800bd1a:	6163      	str	r3, [r4, #20]
 800bd1c:	e765      	b.n	800bbea <_svfiprintf_r+0x46>
 800bd1e:	4343      	muls	r3, r0
 800bd20:	0035      	movs	r5, r6
 800bd22:	2101      	movs	r1, #1
 800bd24:	189b      	adds	r3, r3, r2
 800bd26:	e7a6      	b.n	800bc76 <_svfiprintf_r+0xd2>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	425b      	negs	r3, r3
 800bd2c:	e7d0      	b.n	800bcd0 <_svfiprintf_r+0x12c>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	200a      	movs	r0, #10
 800bd32:	001a      	movs	r2, r3
 800bd34:	3501      	adds	r5, #1
 800bd36:	6063      	str	r3, [r4, #4]
 800bd38:	7829      	ldrb	r1, [r5, #0]
 800bd3a:	1c6e      	adds	r6, r5, #1
 800bd3c:	3930      	subs	r1, #48	; 0x30
 800bd3e:	2909      	cmp	r1, #9
 800bd40:	d903      	bls.n	800bd4a <_svfiprintf_r+0x1a6>
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d0c5      	beq.n	800bcd2 <_svfiprintf_r+0x12e>
 800bd46:	9209      	str	r2, [sp, #36]	; 0x24
 800bd48:	e7c3      	b.n	800bcd2 <_svfiprintf_r+0x12e>
 800bd4a:	4342      	muls	r2, r0
 800bd4c:	0035      	movs	r5, r6
 800bd4e:	2301      	movs	r3, #1
 800bd50:	1852      	adds	r2, r2, r1
 800bd52:	e7f1      	b.n	800bd38 <_svfiprintf_r+0x194>
 800bd54:	ab07      	add	r3, sp, #28
 800bd56:	9300      	str	r3, [sp, #0]
 800bd58:	003a      	movs	r2, r7
 800bd5a:	0021      	movs	r1, r4
 800bd5c:	4b10      	ldr	r3, [pc, #64]	; (800bda0 <_svfiprintf_r+0x1fc>)
 800bd5e:	9803      	ldr	r0, [sp, #12]
 800bd60:	f7fc f9e2 	bl	8008128 <_printf_float>
 800bd64:	9004      	str	r0, [sp, #16]
 800bd66:	9b04      	ldr	r3, [sp, #16]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	d1d3      	bne.n	800bd14 <_svfiprintf_r+0x170>
 800bd6c:	89bb      	ldrh	r3, [r7, #12]
 800bd6e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bd70:	065b      	lsls	r3, r3, #25
 800bd72:	d400      	bmi.n	800bd76 <_svfiprintf_r+0x1d2>
 800bd74:	e72d      	b.n	800bbd2 <_svfiprintf_r+0x2e>
 800bd76:	2001      	movs	r0, #1
 800bd78:	4240      	negs	r0, r0
 800bd7a:	e72a      	b.n	800bbd2 <_svfiprintf_r+0x2e>
 800bd7c:	ab07      	add	r3, sp, #28
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	003a      	movs	r2, r7
 800bd82:	0021      	movs	r1, r4
 800bd84:	4b06      	ldr	r3, [pc, #24]	; (800bda0 <_svfiprintf_r+0x1fc>)
 800bd86:	9803      	ldr	r0, [sp, #12]
 800bd88:	f7fc fc80 	bl	800868c <_printf_i>
 800bd8c:	e7ea      	b.n	800bd64 <_svfiprintf_r+0x1c0>
 800bd8e:	46c0      	nop			; (mov r8, r8)
 800bd90:	0800d054 	.word	0x0800d054
 800bd94:	0800d05a 	.word	0x0800d05a
 800bd98:	0800d05e 	.word	0x0800d05e
 800bd9c:	08008129 	.word	0x08008129
 800bda0:	0800bae1 	.word	0x0800bae1

0800bda4 <nan>:
 800bda4:	2000      	movs	r0, #0
 800bda6:	4901      	ldr	r1, [pc, #4]	; (800bdac <nan+0x8>)
 800bda8:	4770      	bx	lr
 800bdaa:	46c0      	nop			; (mov r8, r8)
 800bdac:	7ff80000 	.word	0x7ff80000

0800bdb0 <_sbrk_r>:
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	b570      	push	{r4, r5, r6, lr}
 800bdb4:	4d06      	ldr	r5, [pc, #24]	; (800bdd0 <_sbrk_r+0x20>)
 800bdb6:	0004      	movs	r4, r0
 800bdb8:	0008      	movs	r0, r1
 800bdba:	602b      	str	r3, [r5, #0]
 800bdbc:	f7f8 fae2 	bl	8004384 <_sbrk>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d103      	bne.n	800bdcc <_sbrk_r+0x1c>
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d000      	beq.n	800bdcc <_sbrk_r+0x1c>
 800bdca:	6023      	str	r3, [r4, #0]
 800bdcc:	bd70      	pop	{r4, r5, r6, pc}
 800bdce:	46c0      	nop			; (mov r8, r8)
 800bdd0:	20000470 	.word	0x20000470

0800bdd4 <strncmp>:
 800bdd4:	b530      	push	{r4, r5, lr}
 800bdd6:	0005      	movs	r5, r0
 800bdd8:	1e10      	subs	r0, r2, #0
 800bdda:	d008      	beq.n	800bdee <strncmp+0x1a>
 800bddc:	2400      	movs	r4, #0
 800bdde:	3a01      	subs	r2, #1
 800bde0:	5d2b      	ldrb	r3, [r5, r4]
 800bde2:	5d08      	ldrb	r0, [r1, r4]
 800bde4:	4283      	cmp	r3, r0
 800bde6:	d101      	bne.n	800bdec <strncmp+0x18>
 800bde8:	4294      	cmp	r4, r2
 800bdea:	d101      	bne.n	800bdf0 <strncmp+0x1c>
 800bdec:	1a18      	subs	r0, r3, r0
 800bdee:	bd30      	pop	{r4, r5, pc}
 800bdf0:	3401      	adds	r4, #1
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d1f4      	bne.n	800bde0 <strncmp+0xc>
 800bdf6:	e7f9      	b.n	800bdec <strncmp+0x18>

0800bdf8 <__ascii_wctomb>:
 800bdf8:	0003      	movs	r3, r0
 800bdfa:	1e08      	subs	r0, r1, #0
 800bdfc:	d005      	beq.n	800be0a <__ascii_wctomb+0x12>
 800bdfe:	2aff      	cmp	r2, #255	; 0xff
 800be00:	d904      	bls.n	800be0c <__ascii_wctomb+0x14>
 800be02:	228a      	movs	r2, #138	; 0x8a
 800be04:	2001      	movs	r0, #1
 800be06:	601a      	str	r2, [r3, #0]
 800be08:	4240      	negs	r0, r0
 800be0a:	4770      	bx	lr
 800be0c:	2001      	movs	r0, #1
 800be0e:	700a      	strb	r2, [r1, #0]
 800be10:	e7fb      	b.n	800be0a <__ascii_wctomb+0x12>
	...

0800be14 <__assert_func>:
 800be14:	b530      	push	{r4, r5, lr}
 800be16:	0014      	movs	r4, r2
 800be18:	001a      	movs	r2, r3
 800be1a:	4b09      	ldr	r3, [pc, #36]	; (800be40 <__assert_func+0x2c>)
 800be1c:	0005      	movs	r5, r0
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	b085      	sub	sp, #20
 800be22:	68d8      	ldr	r0, [r3, #12]
 800be24:	4b07      	ldr	r3, [pc, #28]	; (800be44 <__assert_func+0x30>)
 800be26:	2c00      	cmp	r4, #0
 800be28:	d101      	bne.n	800be2e <__assert_func+0x1a>
 800be2a:	4b07      	ldr	r3, [pc, #28]	; (800be48 <__assert_func+0x34>)
 800be2c:	001c      	movs	r4, r3
 800be2e:	9301      	str	r3, [sp, #4]
 800be30:	9100      	str	r1, [sp, #0]
 800be32:	002b      	movs	r3, r5
 800be34:	4905      	ldr	r1, [pc, #20]	; (800be4c <__assert_func+0x38>)
 800be36:	9402      	str	r4, [sp, #8]
 800be38:	f000 f80a 	bl	800be50 <fiprintf>
 800be3c:	f000 fa9a 	bl	800c374 <abort>
 800be40:	20000030 	.word	0x20000030
 800be44:	0800d065 	.word	0x0800d065
 800be48:	0800d0a0 	.word	0x0800d0a0
 800be4c:	0800d072 	.word	0x0800d072

0800be50 <fiprintf>:
 800be50:	b40e      	push	{r1, r2, r3}
 800be52:	b503      	push	{r0, r1, lr}
 800be54:	0001      	movs	r1, r0
 800be56:	ab03      	add	r3, sp, #12
 800be58:	4804      	ldr	r0, [pc, #16]	; (800be6c <fiprintf+0x1c>)
 800be5a:	cb04      	ldmia	r3!, {r2}
 800be5c:	6800      	ldr	r0, [r0, #0]
 800be5e:	9301      	str	r3, [sp, #4]
 800be60:	f000 f880 	bl	800bf64 <_vfiprintf_r>
 800be64:	b002      	add	sp, #8
 800be66:	bc08      	pop	{r3}
 800be68:	b003      	add	sp, #12
 800be6a:	4718      	bx	r3
 800be6c:	20000030 	.word	0x20000030

0800be70 <memmove>:
 800be70:	b510      	push	{r4, lr}
 800be72:	4288      	cmp	r0, r1
 800be74:	d902      	bls.n	800be7c <memmove+0xc>
 800be76:	188b      	adds	r3, r1, r2
 800be78:	4298      	cmp	r0, r3
 800be7a:	d303      	bcc.n	800be84 <memmove+0x14>
 800be7c:	2300      	movs	r3, #0
 800be7e:	e007      	b.n	800be90 <memmove+0x20>
 800be80:	5c8b      	ldrb	r3, [r1, r2]
 800be82:	5483      	strb	r3, [r0, r2]
 800be84:	3a01      	subs	r2, #1
 800be86:	d2fb      	bcs.n	800be80 <memmove+0x10>
 800be88:	bd10      	pop	{r4, pc}
 800be8a:	5ccc      	ldrb	r4, [r1, r3]
 800be8c:	54c4      	strb	r4, [r0, r3]
 800be8e:	3301      	adds	r3, #1
 800be90:	429a      	cmp	r2, r3
 800be92:	d1fa      	bne.n	800be8a <memmove+0x1a>
 800be94:	e7f8      	b.n	800be88 <memmove+0x18>
	...

0800be98 <__malloc_lock>:
 800be98:	b510      	push	{r4, lr}
 800be9a:	4802      	ldr	r0, [pc, #8]	; (800bea4 <__malloc_lock+0xc>)
 800be9c:	f000 fc41 	bl	800c722 <__retarget_lock_acquire_recursive>
 800bea0:	bd10      	pop	{r4, pc}
 800bea2:	46c0      	nop			; (mov r8, r8)
 800bea4:	20000474 	.word	0x20000474

0800bea8 <__malloc_unlock>:
 800bea8:	b510      	push	{r4, lr}
 800beaa:	4802      	ldr	r0, [pc, #8]	; (800beb4 <__malloc_unlock+0xc>)
 800beac:	f000 fc3a 	bl	800c724 <__retarget_lock_release_recursive>
 800beb0:	bd10      	pop	{r4, pc}
 800beb2:	46c0      	nop			; (mov r8, r8)
 800beb4:	20000474 	.word	0x20000474

0800beb8 <_realloc_r>:
 800beb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800beba:	0007      	movs	r7, r0
 800bebc:	000e      	movs	r6, r1
 800bebe:	0014      	movs	r4, r2
 800bec0:	2900      	cmp	r1, #0
 800bec2:	d105      	bne.n	800bed0 <_realloc_r+0x18>
 800bec4:	0011      	movs	r1, r2
 800bec6:	f7ff fd95 	bl	800b9f4 <_malloc_r>
 800beca:	0005      	movs	r5, r0
 800becc:	0028      	movs	r0, r5
 800bece:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bed0:	2a00      	cmp	r2, #0
 800bed2:	d103      	bne.n	800bedc <_realloc_r+0x24>
 800bed4:	f7ff fd22 	bl	800b91c <_free_r>
 800bed8:	0025      	movs	r5, r4
 800beda:	e7f7      	b.n	800becc <_realloc_r+0x14>
 800bedc:	f000 fc90 	bl	800c800 <_malloc_usable_size_r>
 800bee0:	9001      	str	r0, [sp, #4]
 800bee2:	4284      	cmp	r4, r0
 800bee4:	d803      	bhi.n	800beee <_realloc_r+0x36>
 800bee6:	0035      	movs	r5, r6
 800bee8:	0843      	lsrs	r3, r0, #1
 800beea:	42a3      	cmp	r3, r4
 800beec:	d3ee      	bcc.n	800becc <_realloc_r+0x14>
 800beee:	0021      	movs	r1, r4
 800bef0:	0038      	movs	r0, r7
 800bef2:	f7ff fd7f 	bl	800b9f4 <_malloc_r>
 800bef6:	1e05      	subs	r5, r0, #0
 800bef8:	d0e8      	beq.n	800becc <_realloc_r+0x14>
 800befa:	9b01      	ldr	r3, [sp, #4]
 800befc:	0022      	movs	r2, r4
 800befe:	429c      	cmp	r4, r3
 800bf00:	d900      	bls.n	800bf04 <_realloc_r+0x4c>
 800bf02:	001a      	movs	r2, r3
 800bf04:	0031      	movs	r1, r6
 800bf06:	0028      	movs	r0, r5
 800bf08:	f7ff f809 	bl	800af1e <memcpy>
 800bf0c:	0031      	movs	r1, r6
 800bf0e:	0038      	movs	r0, r7
 800bf10:	f7ff fd04 	bl	800b91c <_free_r>
 800bf14:	e7da      	b.n	800becc <_realloc_r+0x14>

0800bf16 <__sfputc_r>:
 800bf16:	6893      	ldr	r3, [r2, #8]
 800bf18:	b510      	push	{r4, lr}
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	6093      	str	r3, [r2, #8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	da04      	bge.n	800bf2c <__sfputc_r+0x16>
 800bf22:	6994      	ldr	r4, [r2, #24]
 800bf24:	42a3      	cmp	r3, r4
 800bf26:	db07      	blt.n	800bf38 <__sfputc_r+0x22>
 800bf28:	290a      	cmp	r1, #10
 800bf2a:	d005      	beq.n	800bf38 <__sfputc_r+0x22>
 800bf2c:	6813      	ldr	r3, [r2, #0]
 800bf2e:	1c58      	adds	r0, r3, #1
 800bf30:	6010      	str	r0, [r2, #0]
 800bf32:	7019      	strb	r1, [r3, #0]
 800bf34:	0008      	movs	r0, r1
 800bf36:	bd10      	pop	{r4, pc}
 800bf38:	f000 f94e 	bl	800c1d8 <__swbuf_r>
 800bf3c:	0001      	movs	r1, r0
 800bf3e:	e7f9      	b.n	800bf34 <__sfputc_r+0x1e>

0800bf40 <__sfputs_r>:
 800bf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf42:	0006      	movs	r6, r0
 800bf44:	000f      	movs	r7, r1
 800bf46:	0014      	movs	r4, r2
 800bf48:	18d5      	adds	r5, r2, r3
 800bf4a:	42ac      	cmp	r4, r5
 800bf4c:	d101      	bne.n	800bf52 <__sfputs_r+0x12>
 800bf4e:	2000      	movs	r0, #0
 800bf50:	e007      	b.n	800bf62 <__sfputs_r+0x22>
 800bf52:	7821      	ldrb	r1, [r4, #0]
 800bf54:	003a      	movs	r2, r7
 800bf56:	0030      	movs	r0, r6
 800bf58:	f7ff ffdd 	bl	800bf16 <__sfputc_r>
 800bf5c:	3401      	adds	r4, #1
 800bf5e:	1c43      	adds	r3, r0, #1
 800bf60:	d1f3      	bne.n	800bf4a <__sfputs_r+0xa>
 800bf62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf64 <_vfiprintf_r>:
 800bf64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf66:	b0a1      	sub	sp, #132	; 0x84
 800bf68:	0006      	movs	r6, r0
 800bf6a:	000c      	movs	r4, r1
 800bf6c:	001f      	movs	r7, r3
 800bf6e:	9203      	str	r2, [sp, #12]
 800bf70:	2800      	cmp	r0, #0
 800bf72:	d004      	beq.n	800bf7e <_vfiprintf_r+0x1a>
 800bf74:	6983      	ldr	r3, [r0, #24]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d101      	bne.n	800bf7e <_vfiprintf_r+0x1a>
 800bf7a:	f000 fb31 	bl	800c5e0 <__sinit>
 800bf7e:	4b8e      	ldr	r3, [pc, #568]	; (800c1b8 <_vfiprintf_r+0x254>)
 800bf80:	429c      	cmp	r4, r3
 800bf82:	d11c      	bne.n	800bfbe <_vfiprintf_r+0x5a>
 800bf84:	6874      	ldr	r4, [r6, #4]
 800bf86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf88:	07db      	lsls	r3, r3, #31
 800bf8a:	d405      	bmi.n	800bf98 <_vfiprintf_r+0x34>
 800bf8c:	89a3      	ldrh	r3, [r4, #12]
 800bf8e:	059b      	lsls	r3, r3, #22
 800bf90:	d402      	bmi.n	800bf98 <_vfiprintf_r+0x34>
 800bf92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf94:	f000 fbc5 	bl	800c722 <__retarget_lock_acquire_recursive>
 800bf98:	89a3      	ldrh	r3, [r4, #12]
 800bf9a:	071b      	lsls	r3, r3, #28
 800bf9c:	d502      	bpl.n	800bfa4 <_vfiprintf_r+0x40>
 800bf9e:	6923      	ldr	r3, [r4, #16]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d11d      	bne.n	800bfe0 <_vfiprintf_r+0x7c>
 800bfa4:	0021      	movs	r1, r4
 800bfa6:	0030      	movs	r0, r6
 800bfa8:	f000 f96c 	bl	800c284 <__swsetup_r>
 800bfac:	2800      	cmp	r0, #0
 800bfae:	d017      	beq.n	800bfe0 <_vfiprintf_r+0x7c>
 800bfb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfb2:	07db      	lsls	r3, r3, #31
 800bfb4:	d50d      	bpl.n	800bfd2 <_vfiprintf_r+0x6e>
 800bfb6:	2001      	movs	r0, #1
 800bfb8:	4240      	negs	r0, r0
 800bfba:	b021      	add	sp, #132	; 0x84
 800bfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfbe:	4b7f      	ldr	r3, [pc, #508]	; (800c1bc <_vfiprintf_r+0x258>)
 800bfc0:	429c      	cmp	r4, r3
 800bfc2:	d101      	bne.n	800bfc8 <_vfiprintf_r+0x64>
 800bfc4:	68b4      	ldr	r4, [r6, #8]
 800bfc6:	e7de      	b.n	800bf86 <_vfiprintf_r+0x22>
 800bfc8:	4b7d      	ldr	r3, [pc, #500]	; (800c1c0 <_vfiprintf_r+0x25c>)
 800bfca:	429c      	cmp	r4, r3
 800bfcc:	d1db      	bne.n	800bf86 <_vfiprintf_r+0x22>
 800bfce:	68f4      	ldr	r4, [r6, #12]
 800bfd0:	e7d9      	b.n	800bf86 <_vfiprintf_r+0x22>
 800bfd2:	89a3      	ldrh	r3, [r4, #12]
 800bfd4:	059b      	lsls	r3, r3, #22
 800bfd6:	d4ee      	bmi.n	800bfb6 <_vfiprintf_r+0x52>
 800bfd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfda:	f000 fba3 	bl	800c724 <__retarget_lock_release_recursive>
 800bfde:	e7ea      	b.n	800bfb6 <_vfiprintf_r+0x52>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	ad08      	add	r5, sp, #32
 800bfe4:	616b      	str	r3, [r5, #20]
 800bfe6:	3320      	adds	r3, #32
 800bfe8:	766b      	strb	r3, [r5, #25]
 800bfea:	3310      	adds	r3, #16
 800bfec:	76ab      	strb	r3, [r5, #26]
 800bfee:	9707      	str	r7, [sp, #28]
 800bff0:	9f03      	ldr	r7, [sp, #12]
 800bff2:	783b      	ldrb	r3, [r7, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d001      	beq.n	800bffc <_vfiprintf_r+0x98>
 800bff8:	2b25      	cmp	r3, #37	; 0x25
 800bffa:	d14e      	bne.n	800c09a <_vfiprintf_r+0x136>
 800bffc:	9b03      	ldr	r3, [sp, #12]
 800bffe:	1afb      	subs	r3, r7, r3
 800c000:	9305      	str	r3, [sp, #20]
 800c002:	9b03      	ldr	r3, [sp, #12]
 800c004:	429f      	cmp	r7, r3
 800c006:	d00d      	beq.n	800c024 <_vfiprintf_r+0xc0>
 800c008:	9b05      	ldr	r3, [sp, #20]
 800c00a:	0021      	movs	r1, r4
 800c00c:	0030      	movs	r0, r6
 800c00e:	9a03      	ldr	r2, [sp, #12]
 800c010:	f7ff ff96 	bl	800bf40 <__sfputs_r>
 800c014:	1c43      	adds	r3, r0, #1
 800c016:	d100      	bne.n	800c01a <_vfiprintf_r+0xb6>
 800c018:	e0b5      	b.n	800c186 <_vfiprintf_r+0x222>
 800c01a:	696a      	ldr	r2, [r5, #20]
 800c01c:	9b05      	ldr	r3, [sp, #20]
 800c01e:	4694      	mov	ip, r2
 800c020:	4463      	add	r3, ip
 800c022:	616b      	str	r3, [r5, #20]
 800c024:	783b      	ldrb	r3, [r7, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d100      	bne.n	800c02c <_vfiprintf_r+0xc8>
 800c02a:	e0ac      	b.n	800c186 <_vfiprintf_r+0x222>
 800c02c:	2201      	movs	r2, #1
 800c02e:	1c7b      	adds	r3, r7, #1
 800c030:	9303      	str	r3, [sp, #12]
 800c032:	2300      	movs	r3, #0
 800c034:	4252      	negs	r2, r2
 800c036:	606a      	str	r2, [r5, #4]
 800c038:	a904      	add	r1, sp, #16
 800c03a:	3254      	adds	r2, #84	; 0x54
 800c03c:	1852      	adds	r2, r2, r1
 800c03e:	602b      	str	r3, [r5, #0]
 800c040:	60eb      	str	r3, [r5, #12]
 800c042:	60ab      	str	r3, [r5, #8]
 800c044:	7013      	strb	r3, [r2, #0]
 800c046:	65ab      	str	r3, [r5, #88]	; 0x58
 800c048:	9b03      	ldr	r3, [sp, #12]
 800c04a:	2205      	movs	r2, #5
 800c04c:	7819      	ldrb	r1, [r3, #0]
 800c04e:	485d      	ldr	r0, [pc, #372]	; (800c1c4 <_vfiprintf_r+0x260>)
 800c050:	f7fe ff5a 	bl	800af08 <memchr>
 800c054:	9b03      	ldr	r3, [sp, #12]
 800c056:	1c5f      	adds	r7, r3, #1
 800c058:	2800      	cmp	r0, #0
 800c05a:	d120      	bne.n	800c09e <_vfiprintf_r+0x13a>
 800c05c:	682a      	ldr	r2, [r5, #0]
 800c05e:	06d3      	lsls	r3, r2, #27
 800c060:	d504      	bpl.n	800c06c <_vfiprintf_r+0x108>
 800c062:	2353      	movs	r3, #83	; 0x53
 800c064:	a904      	add	r1, sp, #16
 800c066:	185b      	adds	r3, r3, r1
 800c068:	2120      	movs	r1, #32
 800c06a:	7019      	strb	r1, [r3, #0]
 800c06c:	0713      	lsls	r3, r2, #28
 800c06e:	d504      	bpl.n	800c07a <_vfiprintf_r+0x116>
 800c070:	2353      	movs	r3, #83	; 0x53
 800c072:	a904      	add	r1, sp, #16
 800c074:	185b      	adds	r3, r3, r1
 800c076:	212b      	movs	r1, #43	; 0x2b
 800c078:	7019      	strb	r1, [r3, #0]
 800c07a:	9b03      	ldr	r3, [sp, #12]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	2b2a      	cmp	r3, #42	; 0x2a
 800c080:	d016      	beq.n	800c0b0 <_vfiprintf_r+0x14c>
 800c082:	2100      	movs	r1, #0
 800c084:	68eb      	ldr	r3, [r5, #12]
 800c086:	9f03      	ldr	r7, [sp, #12]
 800c088:	783a      	ldrb	r2, [r7, #0]
 800c08a:	1c78      	adds	r0, r7, #1
 800c08c:	3a30      	subs	r2, #48	; 0x30
 800c08e:	4684      	mov	ip, r0
 800c090:	2a09      	cmp	r2, #9
 800c092:	d94f      	bls.n	800c134 <_vfiprintf_r+0x1d0>
 800c094:	2900      	cmp	r1, #0
 800c096:	d111      	bne.n	800c0bc <_vfiprintf_r+0x158>
 800c098:	e017      	b.n	800c0ca <_vfiprintf_r+0x166>
 800c09a:	3701      	adds	r7, #1
 800c09c:	e7a9      	b.n	800bff2 <_vfiprintf_r+0x8e>
 800c09e:	4b49      	ldr	r3, [pc, #292]	; (800c1c4 <_vfiprintf_r+0x260>)
 800c0a0:	682a      	ldr	r2, [r5, #0]
 800c0a2:	1ac0      	subs	r0, r0, r3
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	4083      	lsls	r3, r0
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	602b      	str	r3, [r5, #0]
 800c0ac:	9703      	str	r7, [sp, #12]
 800c0ae:	e7cb      	b.n	800c048 <_vfiprintf_r+0xe4>
 800c0b0:	9b07      	ldr	r3, [sp, #28]
 800c0b2:	1d19      	adds	r1, r3, #4
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	9107      	str	r1, [sp, #28]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	db01      	blt.n	800c0c0 <_vfiprintf_r+0x15c>
 800c0bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0be:	e004      	b.n	800c0ca <_vfiprintf_r+0x166>
 800c0c0:	425b      	negs	r3, r3
 800c0c2:	60eb      	str	r3, [r5, #12]
 800c0c4:	2302      	movs	r3, #2
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	602b      	str	r3, [r5, #0]
 800c0ca:	783b      	ldrb	r3, [r7, #0]
 800c0cc:	2b2e      	cmp	r3, #46	; 0x2e
 800c0ce:	d10a      	bne.n	800c0e6 <_vfiprintf_r+0x182>
 800c0d0:	787b      	ldrb	r3, [r7, #1]
 800c0d2:	2b2a      	cmp	r3, #42	; 0x2a
 800c0d4:	d137      	bne.n	800c146 <_vfiprintf_r+0x1e2>
 800c0d6:	9b07      	ldr	r3, [sp, #28]
 800c0d8:	3702      	adds	r7, #2
 800c0da:	1d1a      	adds	r2, r3, #4
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	9207      	str	r2, [sp, #28]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	db2d      	blt.n	800c140 <_vfiprintf_r+0x1dc>
 800c0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c0e6:	2203      	movs	r2, #3
 800c0e8:	7839      	ldrb	r1, [r7, #0]
 800c0ea:	4837      	ldr	r0, [pc, #220]	; (800c1c8 <_vfiprintf_r+0x264>)
 800c0ec:	f7fe ff0c 	bl	800af08 <memchr>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	d007      	beq.n	800c104 <_vfiprintf_r+0x1a0>
 800c0f4:	4b34      	ldr	r3, [pc, #208]	; (800c1c8 <_vfiprintf_r+0x264>)
 800c0f6:	682a      	ldr	r2, [r5, #0]
 800c0f8:	1ac0      	subs	r0, r0, r3
 800c0fa:	2340      	movs	r3, #64	; 0x40
 800c0fc:	4083      	lsls	r3, r0
 800c0fe:	4313      	orrs	r3, r2
 800c100:	3701      	adds	r7, #1
 800c102:	602b      	str	r3, [r5, #0]
 800c104:	7839      	ldrb	r1, [r7, #0]
 800c106:	1c7b      	adds	r3, r7, #1
 800c108:	2206      	movs	r2, #6
 800c10a:	4830      	ldr	r0, [pc, #192]	; (800c1cc <_vfiprintf_r+0x268>)
 800c10c:	9303      	str	r3, [sp, #12]
 800c10e:	7629      	strb	r1, [r5, #24]
 800c110:	f7fe fefa 	bl	800af08 <memchr>
 800c114:	2800      	cmp	r0, #0
 800c116:	d045      	beq.n	800c1a4 <_vfiprintf_r+0x240>
 800c118:	4b2d      	ldr	r3, [pc, #180]	; (800c1d0 <_vfiprintf_r+0x26c>)
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d127      	bne.n	800c16e <_vfiprintf_r+0x20a>
 800c11e:	2207      	movs	r2, #7
 800c120:	9b07      	ldr	r3, [sp, #28]
 800c122:	3307      	adds	r3, #7
 800c124:	4393      	bics	r3, r2
 800c126:	3308      	adds	r3, #8
 800c128:	9307      	str	r3, [sp, #28]
 800c12a:	696b      	ldr	r3, [r5, #20]
 800c12c:	9a04      	ldr	r2, [sp, #16]
 800c12e:	189b      	adds	r3, r3, r2
 800c130:	616b      	str	r3, [r5, #20]
 800c132:	e75d      	b.n	800bff0 <_vfiprintf_r+0x8c>
 800c134:	210a      	movs	r1, #10
 800c136:	434b      	muls	r3, r1
 800c138:	4667      	mov	r7, ip
 800c13a:	189b      	adds	r3, r3, r2
 800c13c:	3909      	subs	r1, #9
 800c13e:	e7a3      	b.n	800c088 <_vfiprintf_r+0x124>
 800c140:	2301      	movs	r3, #1
 800c142:	425b      	negs	r3, r3
 800c144:	e7ce      	b.n	800c0e4 <_vfiprintf_r+0x180>
 800c146:	2300      	movs	r3, #0
 800c148:	001a      	movs	r2, r3
 800c14a:	3701      	adds	r7, #1
 800c14c:	606b      	str	r3, [r5, #4]
 800c14e:	7839      	ldrb	r1, [r7, #0]
 800c150:	1c78      	adds	r0, r7, #1
 800c152:	3930      	subs	r1, #48	; 0x30
 800c154:	4684      	mov	ip, r0
 800c156:	2909      	cmp	r1, #9
 800c158:	d903      	bls.n	800c162 <_vfiprintf_r+0x1fe>
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d0c3      	beq.n	800c0e6 <_vfiprintf_r+0x182>
 800c15e:	9209      	str	r2, [sp, #36]	; 0x24
 800c160:	e7c1      	b.n	800c0e6 <_vfiprintf_r+0x182>
 800c162:	230a      	movs	r3, #10
 800c164:	435a      	muls	r2, r3
 800c166:	4667      	mov	r7, ip
 800c168:	1852      	adds	r2, r2, r1
 800c16a:	3b09      	subs	r3, #9
 800c16c:	e7ef      	b.n	800c14e <_vfiprintf_r+0x1ea>
 800c16e:	ab07      	add	r3, sp, #28
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	0022      	movs	r2, r4
 800c174:	0029      	movs	r1, r5
 800c176:	0030      	movs	r0, r6
 800c178:	4b16      	ldr	r3, [pc, #88]	; (800c1d4 <_vfiprintf_r+0x270>)
 800c17a:	f7fb ffd5 	bl	8008128 <_printf_float>
 800c17e:	9004      	str	r0, [sp, #16]
 800c180:	9b04      	ldr	r3, [sp, #16]
 800c182:	3301      	adds	r3, #1
 800c184:	d1d1      	bne.n	800c12a <_vfiprintf_r+0x1c6>
 800c186:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c188:	07db      	lsls	r3, r3, #31
 800c18a:	d405      	bmi.n	800c198 <_vfiprintf_r+0x234>
 800c18c:	89a3      	ldrh	r3, [r4, #12]
 800c18e:	059b      	lsls	r3, r3, #22
 800c190:	d402      	bmi.n	800c198 <_vfiprintf_r+0x234>
 800c192:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c194:	f000 fac6 	bl	800c724 <__retarget_lock_release_recursive>
 800c198:	89a3      	ldrh	r3, [r4, #12]
 800c19a:	065b      	lsls	r3, r3, #25
 800c19c:	d500      	bpl.n	800c1a0 <_vfiprintf_r+0x23c>
 800c19e:	e70a      	b.n	800bfb6 <_vfiprintf_r+0x52>
 800c1a0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c1a2:	e70a      	b.n	800bfba <_vfiprintf_r+0x56>
 800c1a4:	ab07      	add	r3, sp, #28
 800c1a6:	9300      	str	r3, [sp, #0]
 800c1a8:	0022      	movs	r2, r4
 800c1aa:	0029      	movs	r1, r5
 800c1ac:	0030      	movs	r0, r6
 800c1ae:	4b09      	ldr	r3, [pc, #36]	; (800c1d4 <_vfiprintf_r+0x270>)
 800c1b0:	f7fc fa6c 	bl	800868c <_printf_i>
 800c1b4:	e7e3      	b.n	800c17e <_vfiprintf_r+0x21a>
 800c1b6:	46c0      	nop			; (mov r8, r8)
 800c1b8:	0800d0c4 	.word	0x0800d0c4
 800c1bc:	0800d0e4 	.word	0x0800d0e4
 800c1c0:	0800d0a4 	.word	0x0800d0a4
 800c1c4:	0800d054 	.word	0x0800d054
 800c1c8:	0800d05a 	.word	0x0800d05a
 800c1cc:	0800d05e 	.word	0x0800d05e
 800c1d0:	08008129 	.word	0x08008129
 800c1d4:	0800bf41 	.word	0x0800bf41

0800c1d8 <__swbuf_r>:
 800c1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1da:	0005      	movs	r5, r0
 800c1dc:	000e      	movs	r6, r1
 800c1de:	0014      	movs	r4, r2
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	d004      	beq.n	800c1ee <__swbuf_r+0x16>
 800c1e4:	6983      	ldr	r3, [r0, #24]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d101      	bne.n	800c1ee <__swbuf_r+0x16>
 800c1ea:	f000 f9f9 	bl	800c5e0 <__sinit>
 800c1ee:	4b22      	ldr	r3, [pc, #136]	; (800c278 <__swbuf_r+0xa0>)
 800c1f0:	429c      	cmp	r4, r3
 800c1f2:	d12e      	bne.n	800c252 <__swbuf_r+0x7a>
 800c1f4:	686c      	ldr	r4, [r5, #4]
 800c1f6:	69a3      	ldr	r3, [r4, #24]
 800c1f8:	60a3      	str	r3, [r4, #8]
 800c1fa:	89a3      	ldrh	r3, [r4, #12]
 800c1fc:	071b      	lsls	r3, r3, #28
 800c1fe:	d532      	bpl.n	800c266 <__swbuf_r+0x8e>
 800c200:	6923      	ldr	r3, [r4, #16]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d02f      	beq.n	800c266 <__swbuf_r+0x8e>
 800c206:	6823      	ldr	r3, [r4, #0]
 800c208:	6922      	ldr	r2, [r4, #16]
 800c20a:	b2f7      	uxtb	r7, r6
 800c20c:	1a98      	subs	r0, r3, r2
 800c20e:	6963      	ldr	r3, [r4, #20]
 800c210:	b2f6      	uxtb	r6, r6
 800c212:	4283      	cmp	r3, r0
 800c214:	dc05      	bgt.n	800c222 <__swbuf_r+0x4a>
 800c216:	0021      	movs	r1, r4
 800c218:	0028      	movs	r0, r5
 800c21a:	f000 f93f 	bl	800c49c <_fflush_r>
 800c21e:	2800      	cmp	r0, #0
 800c220:	d127      	bne.n	800c272 <__swbuf_r+0x9a>
 800c222:	68a3      	ldr	r3, [r4, #8]
 800c224:	3001      	adds	r0, #1
 800c226:	3b01      	subs	r3, #1
 800c228:	60a3      	str	r3, [r4, #8]
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	1c5a      	adds	r2, r3, #1
 800c22e:	6022      	str	r2, [r4, #0]
 800c230:	701f      	strb	r7, [r3, #0]
 800c232:	6963      	ldr	r3, [r4, #20]
 800c234:	4283      	cmp	r3, r0
 800c236:	d004      	beq.n	800c242 <__swbuf_r+0x6a>
 800c238:	89a3      	ldrh	r3, [r4, #12]
 800c23a:	07db      	lsls	r3, r3, #31
 800c23c:	d507      	bpl.n	800c24e <__swbuf_r+0x76>
 800c23e:	2e0a      	cmp	r6, #10
 800c240:	d105      	bne.n	800c24e <__swbuf_r+0x76>
 800c242:	0021      	movs	r1, r4
 800c244:	0028      	movs	r0, r5
 800c246:	f000 f929 	bl	800c49c <_fflush_r>
 800c24a:	2800      	cmp	r0, #0
 800c24c:	d111      	bne.n	800c272 <__swbuf_r+0x9a>
 800c24e:	0030      	movs	r0, r6
 800c250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c252:	4b0a      	ldr	r3, [pc, #40]	; (800c27c <__swbuf_r+0xa4>)
 800c254:	429c      	cmp	r4, r3
 800c256:	d101      	bne.n	800c25c <__swbuf_r+0x84>
 800c258:	68ac      	ldr	r4, [r5, #8]
 800c25a:	e7cc      	b.n	800c1f6 <__swbuf_r+0x1e>
 800c25c:	4b08      	ldr	r3, [pc, #32]	; (800c280 <__swbuf_r+0xa8>)
 800c25e:	429c      	cmp	r4, r3
 800c260:	d1c9      	bne.n	800c1f6 <__swbuf_r+0x1e>
 800c262:	68ec      	ldr	r4, [r5, #12]
 800c264:	e7c7      	b.n	800c1f6 <__swbuf_r+0x1e>
 800c266:	0021      	movs	r1, r4
 800c268:	0028      	movs	r0, r5
 800c26a:	f000 f80b 	bl	800c284 <__swsetup_r>
 800c26e:	2800      	cmp	r0, #0
 800c270:	d0c9      	beq.n	800c206 <__swbuf_r+0x2e>
 800c272:	2601      	movs	r6, #1
 800c274:	4276      	negs	r6, r6
 800c276:	e7ea      	b.n	800c24e <__swbuf_r+0x76>
 800c278:	0800d0c4 	.word	0x0800d0c4
 800c27c:	0800d0e4 	.word	0x0800d0e4
 800c280:	0800d0a4 	.word	0x0800d0a4

0800c284 <__swsetup_r>:
 800c284:	4b37      	ldr	r3, [pc, #220]	; (800c364 <__swsetup_r+0xe0>)
 800c286:	b570      	push	{r4, r5, r6, lr}
 800c288:	681d      	ldr	r5, [r3, #0]
 800c28a:	0006      	movs	r6, r0
 800c28c:	000c      	movs	r4, r1
 800c28e:	2d00      	cmp	r5, #0
 800c290:	d005      	beq.n	800c29e <__swsetup_r+0x1a>
 800c292:	69ab      	ldr	r3, [r5, #24]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d102      	bne.n	800c29e <__swsetup_r+0x1a>
 800c298:	0028      	movs	r0, r5
 800c29a:	f000 f9a1 	bl	800c5e0 <__sinit>
 800c29e:	4b32      	ldr	r3, [pc, #200]	; (800c368 <__swsetup_r+0xe4>)
 800c2a0:	429c      	cmp	r4, r3
 800c2a2:	d10f      	bne.n	800c2c4 <__swsetup_r+0x40>
 800c2a4:	686c      	ldr	r4, [r5, #4]
 800c2a6:	230c      	movs	r3, #12
 800c2a8:	5ee2      	ldrsh	r2, [r4, r3]
 800c2aa:	b293      	uxth	r3, r2
 800c2ac:	0711      	lsls	r1, r2, #28
 800c2ae:	d42d      	bmi.n	800c30c <__swsetup_r+0x88>
 800c2b0:	06d9      	lsls	r1, r3, #27
 800c2b2:	d411      	bmi.n	800c2d8 <__swsetup_r+0x54>
 800c2b4:	2309      	movs	r3, #9
 800c2b6:	2001      	movs	r0, #1
 800c2b8:	6033      	str	r3, [r6, #0]
 800c2ba:	3337      	adds	r3, #55	; 0x37
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	81a3      	strh	r3, [r4, #12]
 800c2c0:	4240      	negs	r0, r0
 800c2c2:	bd70      	pop	{r4, r5, r6, pc}
 800c2c4:	4b29      	ldr	r3, [pc, #164]	; (800c36c <__swsetup_r+0xe8>)
 800c2c6:	429c      	cmp	r4, r3
 800c2c8:	d101      	bne.n	800c2ce <__swsetup_r+0x4a>
 800c2ca:	68ac      	ldr	r4, [r5, #8]
 800c2cc:	e7eb      	b.n	800c2a6 <__swsetup_r+0x22>
 800c2ce:	4b28      	ldr	r3, [pc, #160]	; (800c370 <__swsetup_r+0xec>)
 800c2d0:	429c      	cmp	r4, r3
 800c2d2:	d1e8      	bne.n	800c2a6 <__swsetup_r+0x22>
 800c2d4:	68ec      	ldr	r4, [r5, #12]
 800c2d6:	e7e6      	b.n	800c2a6 <__swsetup_r+0x22>
 800c2d8:	075b      	lsls	r3, r3, #29
 800c2da:	d513      	bpl.n	800c304 <__swsetup_r+0x80>
 800c2dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2de:	2900      	cmp	r1, #0
 800c2e0:	d008      	beq.n	800c2f4 <__swsetup_r+0x70>
 800c2e2:	0023      	movs	r3, r4
 800c2e4:	3344      	adds	r3, #68	; 0x44
 800c2e6:	4299      	cmp	r1, r3
 800c2e8:	d002      	beq.n	800c2f0 <__swsetup_r+0x6c>
 800c2ea:	0030      	movs	r0, r6
 800c2ec:	f7ff fb16 	bl	800b91c <_free_r>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	6363      	str	r3, [r4, #52]	; 0x34
 800c2f4:	2224      	movs	r2, #36	; 0x24
 800c2f6:	89a3      	ldrh	r3, [r4, #12]
 800c2f8:	4393      	bics	r3, r2
 800c2fa:	81a3      	strh	r3, [r4, #12]
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	6063      	str	r3, [r4, #4]
 800c300:	6923      	ldr	r3, [r4, #16]
 800c302:	6023      	str	r3, [r4, #0]
 800c304:	2308      	movs	r3, #8
 800c306:	89a2      	ldrh	r2, [r4, #12]
 800c308:	4313      	orrs	r3, r2
 800c30a:	81a3      	strh	r3, [r4, #12]
 800c30c:	6923      	ldr	r3, [r4, #16]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d10b      	bne.n	800c32a <__swsetup_r+0xa6>
 800c312:	21a0      	movs	r1, #160	; 0xa0
 800c314:	2280      	movs	r2, #128	; 0x80
 800c316:	89a3      	ldrh	r3, [r4, #12]
 800c318:	0089      	lsls	r1, r1, #2
 800c31a:	0092      	lsls	r2, r2, #2
 800c31c:	400b      	ands	r3, r1
 800c31e:	4293      	cmp	r3, r2
 800c320:	d003      	beq.n	800c32a <__swsetup_r+0xa6>
 800c322:	0021      	movs	r1, r4
 800c324:	0030      	movs	r0, r6
 800c326:	f000 fa27 	bl	800c778 <__smakebuf_r>
 800c32a:	220c      	movs	r2, #12
 800c32c:	5ea3      	ldrsh	r3, [r4, r2]
 800c32e:	2001      	movs	r0, #1
 800c330:	001a      	movs	r2, r3
 800c332:	b299      	uxth	r1, r3
 800c334:	4002      	ands	r2, r0
 800c336:	4203      	tst	r3, r0
 800c338:	d00f      	beq.n	800c35a <__swsetup_r+0xd6>
 800c33a:	2200      	movs	r2, #0
 800c33c:	60a2      	str	r2, [r4, #8]
 800c33e:	6962      	ldr	r2, [r4, #20]
 800c340:	4252      	negs	r2, r2
 800c342:	61a2      	str	r2, [r4, #24]
 800c344:	2000      	movs	r0, #0
 800c346:	6922      	ldr	r2, [r4, #16]
 800c348:	4282      	cmp	r2, r0
 800c34a:	d1ba      	bne.n	800c2c2 <__swsetup_r+0x3e>
 800c34c:	060a      	lsls	r2, r1, #24
 800c34e:	d5b8      	bpl.n	800c2c2 <__swsetup_r+0x3e>
 800c350:	2240      	movs	r2, #64	; 0x40
 800c352:	4313      	orrs	r3, r2
 800c354:	81a3      	strh	r3, [r4, #12]
 800c356:	3801      	subs	r0, #1
 800c358:	e7b3      	b.n	800c2c2 <__swsetup_r+0x3e>
 800c35a:	0788      	lsls	r0, r1, #30
 800c35c:	d400      	bmi.n	800c360 <__swsetup_r+0xdc>
 800c35e:	6962      	ldr	r2, [r4, #20]
 800c360:	60a2      	str	r2, [r4, #8]
 800c362:	e7ef      	b.n	800c344 <__swsetup_r+0xc0>
 800c364:	20000030 	.word	0x20000030
 800c368:	0800d0c4 	.word	0x0800d0c4
 800c36c:	0800d0e4 	.word	0x0800d0e4
 800c370:	0800d0a4 	.word	0x0800d0a4

0800c374 <abort>:
 800c374:	2006      	movs	r0, #6
 800c376:	b510      	push	{r4, lr}
 800c378:	f000 fa74 	bl	800c864 <raise>
 800c37c:	2001      	movs	r0, #1
 800c37e:	f7f7 ff8f 	bl	80042a0 <_exit>
	...

0800c384 <__sflush_r>:
 800c384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c386:	898b      	ldrh	r3, [r1, #12]
 800c388:	0005      	movs	r5, r0
 800c38a:	000c      	movs	r4, r1
 800c38c:	071a      	lsls	r2, r3, #28
 800c38e:	d45f      	bmi.n	800c450 <__sflush_r+0xcc>
 800c390:	684a      	ldr	r2, [r1, #4]
 800c392:	2a00      	cmp	r2, #0
 800c394:	dc04      	bgt.n	800c3a0 <__sflush_r+0x1c>
 800c396:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c398:	2a00      	cmp	r2, #0
 800c39a:	dc01      	bgt.n	800c3a0 <__sflush_r+0x1c>
 800c39c:	2000      	movs	r0, #0
 800c39e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c3a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c3a2:	2f00      	cmp	r7, #0
 800c3a4:	d0fa      	beq.n	800c39c <__sflush_r+0x18>
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	2180      	movs	r1, #128	; 0x80
 800c3aa:	682e      	ldr	r6, [r5, #0]
 800c3ac:	602a      	str	r2, [r5, #0]
 800c3ae:	001a      	movs	r2, r3
 800c3b0:	0149      	lsls	r1, r1, #5
 800c3b2:	400a      	ands	r2, r1
 800c3b4:	420b      	tst	r3, r1
 800c3b6:	d034      	beq.n	800c422 <__sflush_r+0x9e>
 800c3b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3ba:	89a3      	ldrh	r3, [r4, #12]
 800c3bc:	075b      	lsls	r3, r3, #29
 800c3be:	d506      	bpl.n	800c3ce <__sflush_r+0x4a>
 800c3c0:	6863      	ldr	r3, [r4, #4]
 800c3c2:	1ac0      	subs	r0, r0, r3
 800c3c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d001      	beq.n	800c3ce <__sflush_r+0x4a>
 800c3ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3cc:	1ac0      	subs	r0, r0, r3
 800c3ce:	0002      	movs	r2, r0
 800c3d0:	6a21      	ldr	r1, [r4, #32]
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	0028      	movs	r0, r5
 800c3d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c3d8:	47b8      	blx	r7
 800c3da:	89a1      	ldrh	r1, [r4, #12]
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	d106      	bne.n	800c3ee <__sflush_r+0x6a>
 800c3e0:	682b      	ldr	r3, [r5, #0]
 800c3e2:	2b1d      	cmp	r3, #29
 800c3e4:	d831      	bhi.n	800c44a <__sflush_r+0xc6>
 800c3e6:	4a2c      	ldr	r2, [pc, #176]	; (800c498 <__sflush_r+0x114>)
 800c3e8:	40da      	lsrs	r2, r3
 800c3ea:	07d3      	lsls	r3, r2, #31
 800c3ec:	d52d      	bpl.n	800c44a <__sflush_r+0xc6>
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	6063      	str	r3, [r4, #4]
 800c3f2:	6923      	ldr	r3, [r4, #16]
 800c3f4:	6023      	str	r3, [r4, #0]
 800c3f6:	04cb      	lsls	r3, r1, #19
 800c3f8:	d505      	bpl.n	800c406 <__sflush_r+0x82>
 800c3fa:	1c43      	adds	r3, r0, #1
 800c3fc:	d102      	bne.n	800c404 <__sflush_r+0x80>
 800c3fe:	682b      	ldr	r3, [r5, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d100      	bne.n	800c406 <__sflush_r+0x82>
 800c404:	6560      	str	r0, [r4, #84]	; 0x54
 800c406:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c408:	602e      	str	r6, [r5, #0]
 800c40a:	2900      	cmp	r1, #0
 800c40c:	d0c6      	beq.n	800c39c <__sflush_r+0x18>
 800c40e:	0023      	movs	r3, r4
 800c410:	3344      	adds	r3, #68	; 0x44
 800c412:	4299      	cmp	r1, r3
 800c414:	d002      	beq.n	800c41c <__sflush_r+0x98>
 800c416:	0028      	movs	r0, r5
 800c418:	f7ff fa80 	bl	800b91c <_free_r>
 800c41c:	2000      	movs	r0, #0
 800c41e:	6360      	str	r0, [r4, #52]	; 0x34
 800c420:	e7bd      	b.n	800c39e <__sflush_r+0x1a>
 800c422:	2301      	movs	r3, #1
 800c424:	0028      	movs	r0, r5
 800c426:	6a21      	ldr	r1, [r4, #32]
 800c428:	47b8      	blx	r7
 800c42a:	1c43      	adds	r3, r0, #1
 800c42c:	d1c5      	bne.n	800c3ba <__sflush_r+0x36>
 800c42e:	682b      	ldr	r3, [r5, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d0c2      	beq.n	800c3ba <__sflush_r+0x36>
 800c434:	2b1d      	cmp	r3, #29
 800c436:	d001      	beq.n	800c43c <__sflush_r+0xb8>
 800c438:	2b16      	cmp	r3, #22
 800c43a:	d101      	bne.n	800c440 <__sflush_r+0xbc>
 800c43c:	602e      	str	r6, [r5, #0]
 800c43e:	e7ad      	b.n	800c39c <__sflush_r+0x18>
 800c440:	2340      	movs	r3, #64	; 0x40
 800c442:	89a2      	ldrh	r2, [r4, #12]
 800c444:	4313      	orrs	r3, r2
 800c446:	81a3      	strh	r3, [r4, #12]
 800c448:	e7a9      	b.n	800c39e <__sflush_r+0x1a>
 800c44a:	2340      	movs	r3, #64	; 0x40
 800c44c:	430b      	orrs	r3, r1
 800c44e:	e7fa      	b.n	800c446 <__sflush_r+0xc2>
 800c450:	690f      	ldr	r7, [r1, #16]
 800c452:	2f00      	cmp	r7, #0
 800c454:	d0a2      	beq.n	800c39c <__sflush_r+0x18>
 800c456:	680a      	ldr	r2, [r1, #0]
 800c458:	600f      	str	r7, [r1, #0]
 800c45a:	1bd2      	subs	r2, r2, r7
 800c45c:	9201      	str	r2, [sp, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	079b      	lsls	r3, r3, #30
 800c462:	d100      	bne.n	800c466 <__sflush_r+0xe2>
 800c464:	694a      	ldr	r2, [r1, #20]
 800c466:	60a2      	str	r2, [r4, #8]
 800c468:	9b01      	ldr	r3, [sp, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	dc00      	bgt.n	800c470 <__sflush_r+0xec>
 800c46e:	e795      	b.n	800c39c <__sflush_r+0x18>
 800c470:	003a      	movs	r2, r7
 800c472:	0028      	movs	r0, r5
 800c474:	9b01      	ldr	r3, [sp, #4]
 800c476:	6a21      	ldr	r1, [r4, #32]
 800c478:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c47a:	47b0      	blx	r6
 800c47c:	2800      	cmp	r0, #0
 800c47e:	dc06      	bgt.n	800c48e <__sflush_r+0x10a>
 800c480:	2340      	movs	r3, #64	; 0x40
 800c482:	2001      	movs	r0, #1
 800c484:	89a2      	ldrh	r2, [r4, #12]
 800c486:	4240      	negs	r0, r0
 800c488:	4313      	orrs	r3, r2
 800c48a:	81a3      	strh	r3, [r4, #12]
 800c48c:	e787      	b.n	800c39e <__sflush_r+0x1a>
 800c48e:	9b01      	ldr	r3, [sp, #4]
 800c490:	183f      	adds	r7, r7, r0
 800c492:	1a1b      	subs	r3, r3, r0
 800c494:	9301      	str	r3, [sp, #4]
 800c496:	e7e7      	b.n	800c468 <__sflush_r+0xe4>
 800c498:	20400001 	.word	0x20400001

0800c49c <_fflush_r>:
 800c49c:	690b      	ldr	r3, [r1, #16]
 800c49e:	b570      	push	{r4, r5, r6, lr}
 800c4a0:	0005      	movs	r5, r0
 800c4a2:	000c      	movs	r4, r1
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d102      	bne.n	800c4ae <_fflush_r+0x12>
 800c4a8:	2500      	movs	r5, #0
 800c4aa:	0028      	movs	r0, r5
 800c4ac:	bd70      	pop	{r4, r5, r6, pc}
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	d004      	beq.n	800c4bc <_fflush_r+0x20>
 800c4b2:	6983      	ldr	r3, [r0, #24]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d101      	bne.n	800c4bc <_fflush_r+0x20>
 800c4b8:	f000 f892 	bl	800c5e0 <__sinit>
 800c4bc:	4b14      	ldr	r3, [pc, #80]	; (800c510 <_fflush_r+0x74>)
 800c4be:	429c      	cmp	r4, r3
 800c4c0:	d11b      	bne.n	800c4fa <_fflush_r+0x5e>
 800c4c2:	686c      	ldr	r4, [r5, #4]
 800c4c4:	220c      	movs	r2, #12
 800c4c6:	5ea3      	ldrsh	r3, [r4, r2]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d0ed      	beq.n	800c4a8 <_fflush_r+0xc>
 800c4cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4ce:	07d2      	lsls	r2, r2, #31
 800c4d0:	d404      	bmi.n	800c4dc <_fflush_r+0x40>
 800c4d2:	059b      	lsls	r3, r3, #22
 800c4d4:	d402      	bmi.n	800c4dc <_fflush_r+0x40>
 800c4d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4d8:	f000 f923 	bl	800c722 <__retarget_lock_acquire_recursive>
 800c4dc:	0028      	movs	r0, r5
 800c4de:	0021      	movs	r1, r4
 800c4e0:	f7ff ff50 	bl	800c384 <__sflush_r>
 800c4e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4e6:	0005      	movs	r5, r0
 800c4e8:	07db      	lsls	r3, r3, #31
 800c4ea:	d4de      	bmi.n	800c4aa <_fflush_r+0xe>
 800c4ec:	89a3      	ldrh	r3, [r4, #12]
 800c4ee:	059b      	lsls	r3, r3, #22
 800c4f0:	d4db      	bmi.n	800c4aa <_fflush_r+0xe>
 800c4f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4f4:	f000 f916 	bl	800c724 <__retarget_lock_release_recursive>
 800c4f8:	e7d7      	b.n	800c4aa <_fflush_r+0xe>
 800c4fa:	4b06      	ldr	r3, [pc, #24]	; (800c514 <_fflush_r+0x78>)
 800c4fc:	429c      	cmp	r4, r3
 800c4fe:	d101      	bne.n	800c504 <_fflush_r+0x68>
 800c500:	68ac      	ldr	r4, [r5, #8]
 800c502:	e7df      	b.n	800c4c4 <_fflush_r+0x28>
 800c504:	4b04      	ldr	r3, [pc, #16]	; (800c518 <_fflush_r+0x7c>)
 800c506:	429c      	cmp	r4, r3
 800c508:	d1dc      	bne.n	800c4c4 <_fflush_r+0x28>
 800c50a:	68ec      	ldr	r4, [r5, #12]
 800c50c:	e7da      	b.n	800c4c4 <_fflush_r+0x28>
 800c50e:	46c0      	nop			; (mov r8, r8)
 800c510:	0800d0c4 	.word	0x0800d0c4
 800c514:	0800d0e4 	.word	0x0800d0e4
 800c518:	0800d0a4 	.word	0x0800d0a4

0800c51c <std>:
 800c51c:	2300      	movs	r3, #0
 800c51e:	b510      	push	{r4, lr}
 800c520:	0004      	movs	r4, r0
 800c522:	6003      	str	r3, [r0, #0]
 800c524:	6043      	str	r3, [r0, #4]
 800c526:	6083      	str	r3, [r0, #8]
 800c528:	8181      	strh	r1, [r0, #12]
 800c52a:	6643      	str	r3, [r0, #100]	; 0x64
 800c52c:	0019      	movs	r1, r3
 800c52e:	81c2      	strh	r2, [r0, #14]
 800c530:	6103      	str	r3, [r0, #16]
 800c532:	6143      	str	r3, [r0, #20]
 800c534:	6183      	str	r3, [r0, #24]
 800c536:	2208      	movs	r2, #8
 800c538:	305c      	adds	r0, #92	; 0x5c
 800c53a:	f7fb fd43 	bl	8007fc4 <memset>
 800c53e:	4b05      	ldr	r3, [pc, #20]	; (800c554 <std+0x38>)
 800c540:	6224      	str	r4, [r4, #32]
 800c542:	6263      	str	r3, [r4, #36]	; 0x24
 800c544:	4b04      	ldr	r3, [pc, #16]	; (800c558 <std+0x3c>)
 800c546:	62a3      	str	r3, [r4, #40]	; 0x28
 800c548:	4b04      	ldr	r3, [pc, #16]	; (800c55c <std+0x40>)
 800c54a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c54c:	4b04      	ldr	r3, [pc, #16]	; (800c560 <std+0x44>)
 800c54e:	6323      	str	r3, [r4, #48]	; 0x30
 800c550:	bd10      	pop	{r4, pc}
 800c552:	46c0      	nop			; (mov r8, r8)
 800c554:	0800c8a5 	.word	0x0800c8a5
 800c558:	0800c8cd 	.word	0x0800c8cd
 800c55c:	0800c905 	.word	0x0800c905
 800c560:	0800c931 	.word	0x0800c931

0800c564 <_cleanup_r>:
 800c564:	b510      	push	{r4, lr}
 800c566:	4902      	ldr	r1, [pc, #8]	; (800c570 <_cleanup_r+0xc>)
 800c568:	f000 f8ba 	bl	800c6e0 <_fwalk_reent>
 800c56c:	bd10      	pop	{r4, pc}
 800c56e:	46c0      	nop			; (mov r8, r8)
 800c570:	0800c49d 	.word	0x0800c49d

0800c574 <__sfmoreglue>:
 800c574:	b570      	push	{r4, r5, r6, lr}
 800c576:	2568      	movs	r5, #104	; 0x68
 800c578:	1e4a      	subs	r2, r1, #1
 800c57a:	4355      	muls	r5, r2
 800c57c:	000e      	movs	r6, r1
 800c57e:	0029      	movs	r1, r5
 800c580:	3174      	adds	r1, #116	; 0x74
 800c582:	f7ff fa37 	bl	800b9f4 <_malloc_r>
 800c586:	1e04      	subs	r4, r0, #0
 800c588:	d008      	beq.n	800c59c <__sfmoreglue+0x28>
 800c58a:	2100      	movs	r1, #0
 800c58c:	002a      	movs	r2, r5
 800c58e:	6001      	str	r1, [r0, #0]
 800c590:	6046      	str	r6, [r0, #4]
 800c592:	300c      	adds	r0, #12
 800c594:	60a0      	str	r0, [r4, #8]
 800c596:	3268      	adds	r2, #104	; 0x68
 800c598:	f7fb fd14 	bl	8007fc4 <memset>
 800c59c:	0020      	movs	r0, r4
 800c59e:	bd70      	pop	{r4, r5, r6, pc}

0800c5a0 <__sfp_lock_acquire>:
 800c5a0:	b510      	push	{r4, lr}
 800c5a2:	4802      	ldr	r0, [pc, #8]	; (800c5ac <__sfp_lock_acquire+0xc>)
 800c5a4:	f000 f8bd 	bl	800c722 <__retarget_lock_acquire_recursive>
 800c5a8:	bd10      	pop	{r4, pc}
 800c5aa:	46c0      	nop			; (mov r8, r8)
 800c5ac:	20000475 	.word	0x20000475

0800c5b0 <__sfp_lock_release>:
 800c5b0:	b510      	push	{r4, lr}
 800c5b2:	4802      	ldr	r0, [pc, #8]	; (800c5bc <__sfp_lock_release+0xc>)
 800c5b4:	f000 f8b6 	bl	800c724 <__retarget_lock_release_recursive>
 800c5b8:	bd10      	pop	{r4, pc}
 800c5ba:	46c0      	nop			; (mov r8, r8)
 800c5bc:	20000475 	.word	0x20000475

0800c5c0 <__sinit_lock_acquire>:
 800c5c0:	b510      	push	{r4, lr}
 800c5c2:	4802      	ldr	r0, [pc, #8]	; (800c5cc <__sinit_lock_acquire+0xc>)
 800c5c4:	f000 f8ad 	bl	800c722 <__retarget_lock_acquire_recursive>
 800c5c8:	bd10      	pop	{r4, pc}
 800c5ca:	46c0      	nop			; (mov r8, r8)
 800c5cc:	20000476 	.word	0x20000476

0800c5d0 <__sinit_lock_release>:
 800c5d0:	b510      	push	{r4, lr}
 800c5d2:	4802      	ldr	r0, [pc, #8]	; (800c5dc <__sinit_lock_release+0xc>)
 800c5d4:	f000 f8a6 	bl	800c724 <__retarget_lock_release_recursive>
 800c5d8:	bd10      	pop	{r4, pc}
 800c5da:	46c0      	nop			; (mov r8, r8)
 800c5dc:	20000476 	.word	0x20000476

0800c5e0 <__sinit>:
 800c5e0:	b513      	push	{r0, r1, r4, lr}
 800c5e2:	0004      	movs	r4, r0
 800c5e4:	f7ff ffec 	bl	800c5c0 <__sinit_lock_acquire>
 800c5e8:	69a3      	ldr	r3, [r4, #24]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d002      	beq.n	800c5f4 <__sinit+0x14>
 800c5ee:	f7ff ffef 	bl	800c5d0 <__sinit_lock_release>
 800c5f2:	bd13      	pop	{r0, r1, r4, pc}
 800c5f4:	64a3      	str	r3, [r4, #72]	; 0x48
 800c5f6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c5f8:	6523      	str	r3, [r4, #80]	; 0x50
 800c5fa:	4b13      	ldr	r3, [pc, #76]	; (800c648 <__sinit+0x68>)
 800c5fc:	4a13      	ldr	r2, [pc, #76]	; (800c64c <__sinit+0x6c>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	62a2      	str	r2, [r4, #40]	; 0x28
 800c602:	9301      	str	r3, [sp, #4]
 800c604:	42a3      	cmp	r3, r4
 800c606:	d101      	bne.n	800c60c <__sinit+0x2c>
 800c608:	2301      	movs	r3, #1
 800c60a:	61a3      	str	r3, [r4, #24]
 800c60c:	0020      	movs	r0, r4
 800c60e:	f000 f81f 	bl	800c650 <__sfp>
 800c612:	6060      	str	r0, [r4, #4]
 800c614:	0020      	movs	r0, r4
 800c616:	f000 f81b 	bl	800c650 <__sfp>
 800c61a:	60a0      	str	r0, [r4, #8]
 800c61c:	0020      	movs	r0, r4
 800c61e:	f000 f817 	bl	800c650 <__sfp>
 800c622:	2200      	movs	r2, #0
 800c624:	2104      	movs	r1, #4
 800c626:	60e0      	str	r0, [r4, #12]
 800c628:	6860      	ldr	r0, [r4, #4]
 800c62a:	f7ff ff77 	bl	800c51c <std>
 800c62e:	2201      	movs	r2, #1
 800c630:	2109      	movs	r1, #9
 800c632:	68a0      	ldr	r0, [r4, #8]
 800c634:	f7ff ff72 	bl	800c51c <std>
 800c638:	2202      	movs	r2, #2
 800c63a:	2112      	movs	r1, #18
 800c63c:	68e0      	ldr	r0, [r4, #12]
 800c63e:	f7ff ff6d 	bl	800c51c <std>
 800c642:	2301      	movs	r3, #1
 800c644:	61a3      	str	r3, [r4, #24]
 800c646:	e7d2      	b.n	800c5ee <__sinit+0xe>
 800c648:	0800cc60 	.word	0x0800cc60
 800c64c:	0800c565 	.word	0x0800c565

0800c650 <__sfp>:
 800c650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c652:	0007      	movs	r7, r0
 800c654:	f7ff ffa4 	bl	800c5a0 <__sfp_lock_acquire>
 800c658:	4b1f      	ldr	r3, [pc, #124]	; (800c6d8 <__sfp+0x88>)
 800c65a:	681e      	ldr	r6, [r3, #0]
 800c65c:	69b3      	ldr	r3, [r6, #24]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d102      	bne.n	800c668 <__sfp+0x18>
 800c662:	0030      	movs	r0, r6
 800c664:	f7ff ffbc 	bl	800c5e0 <__sinit>
 800c668:	3648      	adds	r6, #72	; 0x48
 800c66a:	68b4      	ldr	r4, [r6, #8]
 800c66c:	6873      	ldr	r3, [r6, #4]
 800c66e:	3b01      	subs	r3, #1
 800c670:	d504      	bpl.n	800c67c <__sfp+0x2c>
 800c672:	6833      	ldr	r3, [r6, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d022      	beq.n	800c6be <__sfp+0x6e>
 800c678:	6836      	ldr	r6, [r6, #0]
 800c67a:	e7f6      	b.n	800c66a <__sfp+0x1a>
 800c67c:	220c      	movs	r2, #12
 800c67e:	5ea5      	ldrsh	r5, [r4, r2]
 800c680:	2d00      	cmp	r5, #0
 800c682:	d11a      	bne.n	800c6ba <__sfp+0x6a>
 800c684:	0020      	movs	r0, r4
 800c686:	4b15      	ldr	r3, [pc, #84]	; (800c6dc <__sfp+0x8c>)
 800c688:	3058      	adds	r0, #88	; 0x58
 800c68a:	60e3      	str	r3, [r4, #12]
 800c68c:	6665      	str	r5, [r4, #100]	; 0x64
 800c68e:	f000 f847 	bl	800c720 <__retarget_lock_init_recursive>
 800c692:	f7ff ff8d 	bl	800c5b0 <__sfp_lock_release>
 800c696:	0020      	movs	r0, r4
 800c698:	2208      	movs	r2, #8
 800c69a:	0029      	movs	r1, r5
 800c69c:	6025      	str	r5, [r4, #0]
 800c69e:	60a5      	str	r5, [r4, #8]
 800c6a0:	6065      	str	r5, [r4, #4]
 800c6a2:	6125      	str	r5, [r4, #16]
 800c6a4:	6165      	str	r5, [r4, #20]
 800c6a6:	61a5      	str	r5, [r4, #24]
 800c6a8:	305c      	adds	r0, #92	; 0x5c
 800c6aa:	f7fb fc8b 	bl	8007fc4 <memset>
 800c6ae:	6365      	str	r5, [r4, #52]	; 0x34
 800c6b0:	63a5      	str	r5, [r4, #56]	; 0x38
 800c6b2:	64a5      	str	r5, [r4, #72]	; 0x48
 800c6b4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c6b6:	0020      	movs	r0, r4
 800c6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6ba:	3468      	adds	r4, #104	; 0x68
 800c6bc:	e7d7      	b.n	800c66e <__sfp+0x1e>
 800c6be:	2104      	movs	r1, #4
 800c6c0:	0038      	movs	r0, r7
 800c6c2:	f7ff ff57 	bl	800c574 <__sfmoreglue>
 800c6c6:	1e04      	subs	r4, r0, #0
 800c6c8:	6030      	str	r0, [r6, #0]
 800c6ca:	d1d5      	bne.n	800c678 <__sfp+0x28>
 800c6cc:	f7ff ff70 	bl	800c5b0 <__sfp_lock_release>
 800c6d0:	230c      	movs	r3, #12
 800c6d2:	603b      	str	r3, [r7, #0]
 800c6d4:	e7ef      	b.n	800c6b6 <__sfp+0x66>
 800c6d6:	46c0      	nop			; (mov r8, r8)
 800c6d8:	0800cc60 	.word	0x0800cc60
 800c6dc:	ffff0001 	.word	0xffff0001

0800c6e0 <_fwalk_reent>:
 800c6e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6e2:	0004      	movs	r4, r0
 800c6e4:	0006      	movs	r6, r0
 800c6e6:	2700      	movs	r7, #0
 800c6e8:	9101      	str	r1, [sp, #4]
 800c6ea:	3448      	adds	r4, #72	; 0x48
 800c6ec:	6863      	ldr	r3, [r4, #4]
 800c6ee:	68a5      	ldr	r5, [r4, #8]
 800c6f0:	9300      	str	r3, [sp, #0]
 800c6f2:	9b00      	ldr	r3, [sp, #0]
 800c6f4:	3b01      	subs	r3, #1
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	d504      	bpl.n	800c704 <_fwalk_reent+0x24>
 800c6fa:	6824      	ldr	r4, [r4, #0]
 800c6fc:	2c00      	cmp	r4, #0
 800c6fe:	d1f5      	bne.n	800c6ec <_fwalk_reent+0xc>
 800c700:	0038      	movs	r0, r7
 800c702:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c704:	89ab      	ldrh	r3, [r5, #12]
 800c706:	2b01      	cmp	r3, #1
 800c708:	d908      	bls.n	800c71c <_fwalk_reent+0x3c>
 800c70a:	220e      	movs	r2, #14
 800c70c:	5eab      	ldrsh	r3, [r5, r2]
 800c70e:	3301      	adds	r3, #1
 800c710:	d004      	beq.n	800c71c <_fwalk_reent+0x3c>
 800c712:	0029      	movs	r1, r5
 800c714:	0030      	movs	r0, r6
 800c716:	9b01      	ldr	r3, [sp, #4]
 800c718:	4798      	blx	r3
 800c71a:	4307      	orrs	r7, r0
 800c71c:	3568      	adds	r5, #104	; 0x68
 800c71e:	e7e8      	b.n	800c6f2 <_fwalk_reent+0x12>

0800c720 <__retarget_lock_init_recursive>:
 800c720:	4770      	bx	lr

0800c722 <__retarget_lock_acquire_recursive>:
 800c722:	4770      	bx	lr

0800c724 <__retarget_lock_release_recursive>:
 800c724:	4770      	bx	lr
	...

0800c728 <__swhatbuf_r>:
 800c728:	b570      	push	{r4, r5, r6, lr}
 800c72a:	000e      	movs	r6, r1
 800c72c:	001d      	movs	r5, r3
 800c72e:	230e      	movs	r3, #14
 800c730:	5ec9      	ldrsh	r1, [r1, r3]
 800c732:	0014      	movs	r4, r2
 800c734:	b096      	sub	sp, #88	; 0x58
 800c736:	2900      	cmp	r1, #0
 800c738:	da08      	bge.n	800c74c <__swhatbuf_r+0x24>
 800c73a:	220c      	movs	r2, #12
 800c73c:	5eb3      	ldrsh	r3, [r6, r2]
 800c73e:	2200      	movs	r2, #0
 800c740:	602a      	str	r2, [r5, #0]
 800c742:	061b      	lsls	r3, r3, #24
 800c744:	d411      	bmi.n	800c76a <__swhatbuf_r+0x42>
 800c746:	2380      	movs	r3, #128	; 0x80
 800c748:	00db      	lsls	r3, r3, #3
 800c74a:	e00f      	b.n	800c76c <__swhatbuf_r+0x44>
 800c74c:	466a      	mov	r2, sp
 800c74e:	f000 f91b 	bl	800c988 <_fstat_r>
 800c752:	2800      	cmp	r0, #0
 800c754:	dbf1      	blt.n	800c73a <__swhatbuf_r+0x12>
 800c756:	23f0      	movs	r3, #240	; 0xf0
 800c758:	9901      	ldr	r1, [sp, #4]
 800c75a:	021b      	lsls	r3, r3, #8
 800c75c:	4019      	ands	r1, r3
 800c75e:	4b05      	ldr	r3, [pc, #20]	; (800c774 <__swhatbuf_r+0x4c>)
 800c760:	18c9      	adds	r1, r1, r3
 800c762:	424b      	negs	r3, r1
 800c764:	4159      	adcs	r1, r3
 800c766:	6029      	str	r1, [r5, #0]
 800c768:	e7ed      	b.n	800c746 <__swhatbuf_r+0x1e>
 800c76a:	2340      	movs	r3, #64	; 0x40
 800c76c:	2000      	movs	r0, #0
 800c76e:	6023      	str	r3, [r4, #0]
 800c770:	b016      	add	sp, #88	; 0x58
 800c772:	bd70      	pop	{r4, r5, r6, pc}
 800c774:	ffffe000 	.word	0xffffe000

0800c778 <__smakebuf_r>:
 800c778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c77a:	2602      	movs	r6, #2
 800c77c:	898b      	ldrh	r3, [r1, #12]
 800c77e:	0005      	movs	r5, r0
 800c780:	000c      	movs	r4, r1
 800c782:	4233      	tst	r3, r6
 800c784:	d006      	beq.n	800c794 <__smakebuf_r+0x1c>
 800c786:	0023      	movs	r3, r4
 800c788:	3347      	adds	r3, #71	; 0x47
 800c78a:	6023      	str	r3, [r4, #0]
 800c78c:	6123      	str	r3, [r4, #16]
 800c78e:	2301      	movs	r3, #1
 800c790:	6163      	str	r3, [r4, #20]
 800c792:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c794:	466a      	mov	r2, sp
 800c796:	ab01      	add	r3, sp, #4
 800c798:	f7ff ffc6 	bl	800c728 <__swhatbuf_r>
 800c79c:	9900      	ldr	r1, [sp, #0]
 800c79e:	0007      	movs	r7, r0
 800c7a0:	0028      	movs	r0, r5
 800c7a2:	f7ff f927 	bl	800b9f4 <_malloc_r>
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d108      	bne.n	800c7bc <__smakebuf_r+0x44>
 800c7aa:	220c      	movs	r2, #12
 800c7ac:	5ea3      	ldrsh	r3, [r4, r2]
 800c7ae:	059a      	lsls	r2, r3, #22
 800c7b0:	d4ef      	bmi.n	800c792 <__smakebuf_r+0x1a>
 800c7b2:	2203      	movs	r2, #3
 800c7b4:	4393      	bics	r3, r2
 800c7b6:	431e      	orrs	r6, r3
 800c7b8:	81a6      	strh	r6, [r4, #12]
 800c7ba:	e7e4      	b.n	800c786 <__smakebuf_r+0xe>
 800c7bc:	4b0f      	ldr	r3, [pc, #60]	; (800c7fc <__smakebuf_r+0x84>)
 800c7be:	62ab      	str	r3, [r5, #40]	; 0x28
 800c7c0:	2380      	movs	r3, #128	; 0x80
 800c7c2:	89a2      	ldrh	r2, [r4, #12]
 800c7c4:	6020      	str	r0, [r4, #0]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	81a3      	strh	r3, [r4, #12]
 800c7ca:	9b00      	ldr	r3, [sp, #0]
 800c7cc:	6120      	str	r0, [r4, #16]
 800c7ce:	6163      	str	r3, [r4, #20]
 800c7d0:	9b01      	ldr	r3, [sp, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d00d      	beq.n	800c7f2 <__smakebuf_r+0x7a>
 800c7d6:	0028      	movs	r0, r5
 800c7d8:	230e      	movs	r3, #14
 800c7da:	5ee1      	ldrsh	r1, [r4, r3]
 800c7dc:	f000 f8e6 	bl	800c9ac <_isatty_r>
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d006      	beq.n	800c7f2 <__smakebuf_r+0x7a>
 800c7e4:	2203      	movs	r2, #3
 800c7e6:	89a3      	ldrh	r3, [r4, #12]
 800c7e8:	4393      	bics	r3, r2
 800c7ea:	001a      	movs	r2, r3
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	81a3      	strh	r3, [r4, #12]
 800c7f2:	89a0      	ldrh	r0, [r4, #12]
 800c7f4:	4307      	orrs	r7, r0
 800c7f6:	81a7      	strh	r7, [r4, #12]
 800c7f8:	e7cb      	b.n	800c792 <__smakebuf_r+0x1a>
 800c7fa:	46c0      	nop			; (mov r8, r8)
 800c7fc:	0800c565 	.word	0x0800c565

0800c800 <_malloc_usable_size_r>:
 800c800:	1f0b      	subs	r3, r1, #4
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	1f18      	subs	r0, r3, #4
 800c806:	2b00      	cmp	r3, #0
 800c808:	da01      	bge.n	800c80e <_malloc_usable_size_r+0xe>
 800c80a:	580b      	ldr	r3, [r1, r0]
 800c80c:	18c0      	adds	r0, r0, r3
 800c80e:	4770      	bx	lr

0800c810 <_raise_r>:
 800c810:	b570      	push	{r4, r5, r6, lr}
 800c812:	0004      	movs	r4, r0
 800c814:	000d      	movs	r5, r1
 800c816:	291f      	cmp	r1, #31
 800c818:	d904      	bls.n	800c824 <_raise_r+0x14>
 800c81a:	2316      	movs	r3, #22
 800c81c:	6003      	str	r3, [r0, #0]
 800c81e:	2001      	movs	r0, #1
 800c820:	4240      	negs	r0, r0
 800c822:	bd70      	pop	{r4, r5, r6, pc}
 800c824:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c826:	2b00      	cmp	r3, #0
 800c828:	d004      	beq.n	800c834 <_raise_r+0x24>
 800c82a:	008a      	lsls	r2, r1, #2
 800c82c:	189b      	adds	r3, r3, r2
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	2a00      	cmp	r2, #0
 800c832:	d108      	bne.n	800c846 <_raise_r+0x36>
 800c834:	0020      	movs	r0, r4
 800c836:	f000 f831 	bl	800c89c <_getpid_r>
 800c83a:	002a      	movs	r2, r5
 800c83c:	0001      	movs	r1, r0
 800c83e:	0020      	movs	r0, r4
 800c840:	f000 f81a 	bl	800c878 <_kill_r>
 800c844:	e7ed      	b.n	800c822 <_raise_r+0x12>
 800c846:	2000      	movs	r0, #0
 800c848:	2a01      	cmp	r2, #1
 800c84a:	d0ea      	beq.n	800c822 <_raise_r+0x12>
 800c84c:	1c51      	adds	r1, r2, #1
 800c84e:	d103      	bne.n	800c858 <_raise_r+0x48>
 800c850:	2316      	movs	r3, #22
 800c852:	3001      	adds	r0, #1
 800c854:	6023      	str	r3, [r4, #0]
 800c856:	e7e4      	b.n	800c822 <_raise_r+0x12>
 800c858:	2400      	movs	r4, #0
 800c85a:	0028      	movs	r0, r5
 800c85c:	601c      	str	r4, [r3, #0]
 800c85e:	4790      	blx	r2
 800c860:	0020      	movs	r0, r4
 800c862:	e7de      	b.n	800c822 <_raise_r+0x12>

0800c864 <raise>:
 800c864:	b510      	push	{r4, lr}
 800c866:	4b03      	ldr	r3, [pc, #12]	; (800c874 <raise+0x10>)
 800c868:	0001      	movs	r1, r0
 800c86a:	6818      	ldr	r0, [r3, #0]
 800c86c:	f7ff ffd0 	bl	800c810 <_raise_r>
 800c870:	bd10      	pop	{r4, pc}
 800c872:	46c0      	nop			; (mov r8, r8)
 800c874:	20000030 	.word	0x20000030

0800c878 <_kill_r>:
 800c878:	2300      	movs	r3, #0
 800c87a:	b570      	push	{r4, r5, r6, lr}
 800c87c:	4d06      	ldr	r5, [pc, #24]	; (800c898 <_kill_r+0x20>)
 800c87e:	0004      	movs	r4, r0
 800c880:	0008      	movs	r0, r1
 800c882:	0011      	movs	r1, r2
 800c884:	602b      	str	r3, [r5, #0]
 800c886:	f7f7 fcfb 	bl	8004280 <_kill>
 800c88a:	1c43      	adds	r3, r0, #1
 800c88c:	d103      	bne.n	800c896 <_kill_r+0x1e>
 800c88e:	682b      	ldr	r3, [r5, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d000      	beq.n	800c896 <_kill_r+0x1e>
 800c894:	6023      	str	r3, [r4, #0]
 800c896:	bd70      	pop	{r4, r5, r6, pc}
 800c898:	20000470 	.word	0x20000470

0800c89c <_getpid_r>:
 800c89c:	b510      	push	{r4, lr}
 800c89e:	f7f7 fce9 	bl	8004274 <_getpid>
 800c8a2:	bd10      	pop	{r4, pc}

0800c8a4 <__sread>:
 800c8a4:	b570      	push	{r4, r5, r6, lr}
 800c8a6:	000c      	movs	r4, r1
 800c8a8:	250e      	movs	r5, #14
 800c8aa:	5f49      	ldrsh	r1, [r1, r5]
 800c8ac:	f000 f8a4 	bl	800c9f8 <_read_r>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	db03      	blt.n	800c8bc <__sread+0x18>
 800c8b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c8b6:	181b      	adds	r3, r3, r0
 800c8b8:	6563      	str	r3, [r4, #84]	; 0x54
 800c8ba:	bd70      	pop	{r4, r5, r6, pc}
 800c8bc:	89a3      	ldrh	r3, [r4, #12]
 800c8be:	4a02      	ldr	r2, [pc, #8]	; (800c8c8 <__sread+0x24>)
 800c8c0:	4013      	ands	r3, r2
 800c8c2:	81a3      	strh	r3, [r4, #12]
 800c8c4:	e7f9      	b.n	800c8ba <__sread+0x16>
 800c8c6:	46c0      	nop			; (mov r8, r8)
 800c8c8:	ffffefff 	.word	0xffffefff

0800c8cc <__swrite>:
 800c8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ce:	001f      	movs	r7, r3
 800c8d0:	898b      	ldrh	r3, [r1, #12]
 800c8d2:	0005      	movs	r5, r0
 800c8d4:	000c      	movs	r4, r1
 800c8d6:	0016      	movs	r6, r2
 800c8d8:	05db      	lsls	r3, r3, #23
 800c8da:	d505      	bpl.n	800c8e8 <__swrite+0x1c>
 800c8dc:	230e      	movs	r3, #14
 800c8de:	5ec9      	ldrsh	r1, [r1, r3]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	2302      	movs	r3, #2
 800c8e4:	f000 f874 	bl	800c9d0 <_lseek_r>
 800c8e8:	89a3      	ldrh	r3, [r4, #12]
 800c8ea:	4a05      	ldr	r2, [pc, #20]	; (800c900 <__swrite+0x34>)
 800c8ec:	0028      	movs	r0, r5
 800c8ee:	4013      	ands	r3, r2
 800c8f0:	81a3      	strh	r3, [r4, #12]
 800c8f2:	0032      	movs	r2, r6
 800c8f4:	230e      	movs	r3, #14
 800c8f6:	5ee1      	ldrsh	r1, [r4, r3]
 800c8f8:	003b      	movs	r3, r7
 800c8fa:	f000 f81f 	bl	800c93c <_write_r>
 800c8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c900:	ffffefff 	.word	0xffffefff

0800c904 <__sseek>:
 800c904:	b570      	push	{r4, r5, r6, lr}
 800c906:	000c      	movs	r4, r1
 800c908:	250e      	movs	r5, #14
 800c90a:	5f49      	ldrsh	r1, [r1, r5]
 800c90c:	f000 f860 	bl	800c9d0 <_lseek_r>
 800c910:	89a3      	ldrh	r3, [r4, #12]
 800c912:	1c42      	adds	r2, r0, #1
 800c914:	d103      	bne.n	800c91e <__sseek+0x1a>
 800c916:	4a05      	ldr	r2, [pc, #20]	; (800c92c <__sseek+0x28>)
 800c918:	4013      	ands	r3, r2
 800c91a:	81a3      	strh	r3, [r4, #12]
 800c91c:	bd70      	pop	{r4, r5, r6, pc}
 800c91e:	2280      	movs	r2, #128	; 0x80
 800c920:	0152      	lsls	r2, r2, #5
 800c922:	4313      	orrs	r3, r2
 800c924:	81a3      	strh	r3, [r4, #12]
 800c926:	6560      	str	r0, [r4, #84]	; 0x54
 800c928:	e7f8      	b.n	800c91c <__sseek+0x18>
 800c92a:	46c0      	nop			; (mov r8, r8)
 800c92c:	ffffefff 	.word	0xffffefff

0800c930 <__sclose>:
 800c930:	b510      	push	{r4, lr}
 800c932:	230e      	movs	r3, #14
 800c934:	5ec9      	ldrsh	r1, [r1, r3]
 800c936:	f000 f815 	bl	800c964 <_close_r>
 800c93a:	bd10      	pop	{r4, pc}

0800c93c <_write_r>:
 800c93c:	b570      	push	{r4, r5, r6, lr}
 800c93e:	0004      	movs	r4, r0
 800c940:	0008      	movs	r0, r1
 800c942:	0011      	movs	r1, r2
 800c944:	001a      	movs	r2, r3
 800c946:	2300      	movs	r3, #0
 800c948:	4d05      	ldr	r5, [pc, #20]	; (800c960 <_write_r+0x24>)
 800c94a:	602b      	str	r3, [r5, #0]
 800c94c:	f7f7 fcd1 	bl	80042f2 <_write>
 800c950:	1c43      	adds	r3, r0, #1
 800c952:	d103      	bne.n	800c95c <_write_r+0x20>
 800c954:	682b      	ldr	r3, [r5, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d000      	beq.n	800c95c <_write_r+0x20>
 800c95a:	6023      	str	r3, [r4, #0]
 800c95c:	bd70      	pop	{r4, r5, r6, pc}
 800c95e:	46c0      	nop			; (mov r8, r8)
 800c960:	20000470 	.word	0x20000470

0800c964 <_close_r>:
 800c964:	2300      	movs	r3, #0
 800c966:	b570      	push	{r4, r5, r6, lr}
 800c968:	4d06      	ldr	r5, [pc, #24]	; (800c984 <_close_r+0x20>)
 800c96a:	0004      	movs	r4, r0
 800c96c:	0008      	movs	r0, r1
 800c96e:	602b      	str	r3, [r5, #0]
 800c970:	f7f7 fcdb 	bl	800432a <_close>
 800c974:	1c43      	adds	r3, r0, #1
 800c976:	d103      	bne.n	800c980 <_close_r+0x1c>
 800c978:	682b      	ldr	r3, [r5, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d000      	beq.n	800c980 <_close_r+0x1c>
 800c97e:	6023      	str	r3, [r4, #0]
 800c980:	bd70      	pop	{r4, r5, r6, pc}
 800c982:	46c0      	nop			; (mov r8, r8)
 800c984:	20000470 	.word	0x20000470

0800c988 <_fstat_r>:
 800c988:	2300      	movs	r3, #0
 800c98a:	b570      	push	{r4, r5, r6, lr}
 800c98c:	4d06      	ldr	r5, [pc, #24]	; (800c9a8 <_fstat_r+0x20>)
 800c98e:	0004      	movs	r4, r0
 800c990:	0008      	movs	r0, r1
 800c992:	0011      	movs	r1, r2
 800c994:	602b      	str	r3, [r5, #0]
 800c996:	f7f7 fcd2 	bl	800433e <_fstat>
 800c99a:	1c43      	adds	r3, r0, #1
 800c99c:	d103      	bne.n	800c9a6 <_fstat_r+0x1e>
 800c99e:	682b      	ldr	r3, [r5, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d000      	beq.n	800c9a6 <_fstat_r+0x1e>
 800c9a4:	6023      	str	r3, [r4, #0]
 800c9a6:	bd70      	pop	{r4, r5, r6, pc}
 800c9a8:	20000470 	.word	0x20000470

0800c9ac <_isatty_r>:
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	b570      	push	{r4, r5, r6, lr}
 800c9b0:	4d06      	ldr	r5, [pc, #24]	; (800c9cc <_isatty_r+0x20>)
 800c9b2:	0004      	movs	r4, r0
 800c9b4:	0008      	movs	r0, r1
 800c9b6:	602b      	str	r3, [r5, #0]
 800c9b8:	f7f7 fccf 	bl	800435a <_isatty>
 800c9bc:	1c43      	adds	r3, r0, #1
 800c9be:	d103      	bne.n	800c9c8 <_isatty_r+0x1c>
 800c9c0:	682b      	ldr	r3, [r5, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d000      	beq.n	800c9c8 <_isatty_r+0x1c>
 800c9c6:	6023      	str	r3, [r4, #0]
 800c9c8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ca:	46c0      	nop			; (mov r8, r8)
 800c9cc:	20000470 	.word	0x20000470

0800c9d0 <_lseek_r>:
 800c9d0:	b570      	push	{r4, r5, r6, lr}
 800c9d2:	0004      	movs	r4, r0
 800c9d4:	0008      	movs	r0, r1
 800c9d6:	0011      	movs	r1, r2
 800c9d8:	001a      	movs	r2, r3
 800c9da:	2300      	movs	r3, #0
 800c9dc:	4d05      	ldr	r5, [pc, #20]	; (800c9f4 <_lseek_r+0x24>)
 800c9de:	602b      	str	r3, [r5, #0]
 800c9e0:	f7f7 fcc4 	bl	800436c <_lseek>
 800c9e4:	1c43      	adds	r3, r0, #1
 800c9e6:	d103      	bne.n	800c9f0 <_lseek_r+0x20>
 800c9e8:	682b      	ldr	r3, [r5, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d000      	beq.n	800c9f0 <_lseek_r+0x20>
 800c9ee:	6023      	str	r3, [r4, #0]
 800c9f0:	bd70      	pop	{r4, r5, r6, pc}
 800c9f2:	46c0      	nop			; (mov r8, r8)
 800c9f4:	20000470 	.word	0x20000470

0800c9f8 <_read_r>:
 800c9f8:	b570      	push	{r4, r5, r6, lr}
 800c9fa:	0004      	movs	r4, r0
 800c9fc:	0008      	movs	r0, r1
 800c9fe:	0011      	movs	r1, r2
 800ca00:	001a      	movs	r2, r3
 800ca02:	2300      	movs	r3, #0
 800ca04:	4d05      	ldr	r5, [pc, #20]	; (800ca1c <_read_r+0x24>)
 800ca06:	602b      	str	r3, [r5, #0]
 800ca08:	f7f7 fc56 	bl	80042b8 <_read>
 800ca0c:	1c43      	adds	r3, r0, #1
 800ca0e:	d103      	bne.n	800ca18 <_read_r+0x20>
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d000      	beq.n	800ca18 <_read_r+0x20>
 800ca16:	6023      	str	r3, [r4, #0]
 800ca18:	bd70      	pop	{r4, r5, r6, pc}
 800ca1a:	46c0      	nop			; (mov r8, r8)
 800ca1c:	20000470 	.word	0x20000470

0800ca20 <_init>:
 800ca20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca22:	46c0      	nop			; (mov r8, r8)
 800ca24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca26:	bc08      	pop	{r3}
 800ca28:	469e      	mov	lr, r3
 800ca2a:	4770      	bx	lr

0800ca2c <_fini>:
 800ca2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca2e:	46c0      	nop			; (mov r8, r8)
 800ca30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca32:	bc08      	pop	{r3}
 800ca34:	469e      	mov	lr, r3
 800ca36:	4770      	bx	lr
