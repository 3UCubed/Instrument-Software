
Quick-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb74  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  0800bc38  0800bc38  0001bc38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c34c  0800c34c  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800c34c  0800c34c  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c34c  0800c34c  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c34c  0800c34c  0001c34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c350  0800c350  0001c350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800c354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000204  0800c558  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  0800c558  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e384  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220a  00000000  00000000  0002e5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  000307c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  00031358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013280  00000000  00000000  00031e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd3a  00000000  00000000  00045088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e2ae  00000000  00000000  00054dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c3070  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e80  00000000  00000000  000c30c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000204 	.word	0x20000204
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bc1c 	.word	0x0800bc1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000208 	.word	0x20000208
 8000104:	0800bc1c 	.word	0x0800bc1c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f867 	bl	8001510 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ffb7 	bl	80013c0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f859 	bl	8001510 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f84f 	bl	8001510 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ffdf 	bl	8001444 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ffd5 	bl	8001444 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 f90f 	bl	80006d4 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 f89b 	bl	80005fc <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f901 	bl	80006d4 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f8f7 	bl	80006d4 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f8a7 	bl	8000648 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f89d 	bl	8000648 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_d2uiz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <__aeabi_d2uiz+0x38>)
 8000522:	0004      	movs	r4, r0
 8000524:	000d      	movs	r5, r1
 8000526:	f7ff ffb5 	bl	8000494 <__aeabi_dcmpge>
 800052a:	2800      	cmp	r0, #0
 800052c:	d104      	bne.n	8000538 <__aeabi_d2uiz+0x1c>
 800052e:	0020      	movs	r0, r4
 8000530:	0029      	movs	r1, r5
 8000532:	f001 fe6d 	bl	8002210 <__aeabi_d2iz>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <__aeabi_d2uiz+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f001 fab6 	bl	8001ab0 <__aeabi_dsub>
 8000544:	f001 fe64 	bl	8002210 <__aeabi_d2iz>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	469c      	mov	ip, r3
 800054e:	4460      	add	r0, ip
 8000550:	e7f1      	b.n	8000536 <__aeabi_d2uiz+0x1a>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	41e00000 	.word	0x41e00000

08000558 <__aeabi_d2lz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0005      	movs	r5, r0
 800055c:	000c      	movs	r4, r1
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	0028      	movs	r0, r5
 8000564:	0021      	movs	r1, r4
 8000566:	f7ff ff77 	bl	8000458 <__aeabi_dcmplt>
 800056a:	2800      	cmp	r0, #0
 800056c:	d108      	bne.n	8000580 <__aeabi_d2lz+0x28>
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f000 f80f 	bl	8000594 <__aeabi_d2ulz>
 8000576:	0002      	movs	r2, r0
 8000578:	000b      	movs	r3, r1
 800057a:	0010      	movs	r0, r2
 800057c:	0019      	movs	r1, r3
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	18e1      	adds	r1, r4, r3
 8000586:	0028      	movs	r0, r5
 8000588:	f000 f804 	bl	8000594 <__aeabi_d2ulz>
 800058c:	2300      	movs	r3, #0
 800058e:	4242      	negs	r2, r0
 8000590:	418b      	sbcs	r3, r1
 8000592:	e7f2      	b.n	800057a <__aeabi_d2lz+0x22>

08000594 <__aeabi_d2ulz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	2200      	movs	r2, #0
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <__aeabi_d2ulz+0x34>)
 800059a:	000d      	movs	r5, r1
 800059c:	0004      	movs	r4, r0
 800059e:	f001 f81b 	bl	80015d8 <__aeabi_dmul>
 80005a2:	f7ff ffbb 	bl	800051c <__aeabi_d2uiz>
 80005a6:	0006      	movs	r6, r0
 80005a8:	f001 fe98 	bl	80022dc <__aeabi_ui2d>
 80005ac:	2200      	movs	r2, #0
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <__aeabi_d2ulz+0x38>)
 80005b0:	f001 f812 	bl	80015d8 <__aeabi_dmul>
 80005b4:	0002      	movs	r2, r0
 80005b6:	000b      	movs	r3, r1
 80005b8:	0020      	movs	r0, r4
 80005ba:	0029      	movs	r1, r5
 80005bc:	f001 fa78 	bl	8001ab0 <__aeabi_dsub>
 80005c0:	f7ff ffac 	bl	800051c <__aeabi_d2uiz>
 80005c4:	0031      	movs	r1, r6
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	3df00000 	.word	0x3df00000
 80005cc:	41f00000 	.word	0x41f00000

080005d0 <__aeabi_l2d>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0006      	movs	r6, r0
 80005d4:	0008      	movs	r0, r1
 80005d6:	f001 fe51 	bl	800227c <__aeabi_i2d>
 80005da:	2200      	movs	r2, #0
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_l2d+0x28>)
 80005de:	f000 fffb 	bl	80015d8 <__aeabi_dmul>
 80005e2:	000d      	movs	r5, r1
 80005e4:	0004      	movs	r4, r0
 80005e6:	0030      	movs	r0, r6
 80005e8:	f001 fe78 	bl	80022dc <__aeabi_ui2d>
 80005ec:	002b      	movs	r3, r5
 80005ee:	0022      	movs	r2, r4
 80005f0:	f000 f8b4 	bl	800075c <__aeabi_dadd>
 80005f4:	bd70      	pop	{r4, r5, r6, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41f00000 	.word	0x41f00000

080005fc <__eqsf2>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	0042      	lsls	r2, r0, #1
 8000600:	0245      	lsls	r5, r0, #9
 8000602:	024e      	lsls	r6, r1, #9
 8000604:	004c      	lsls	r4, r1, #1
 8000606:	0fc3      	lsrs	r3, r0, #31
 8000608:	0a6d      	lsrs	r5, r5, #9
 800060a:	2001      	movs	r0, #1
 800060c:	0e12      	lsrs	r2, r2, #24
 800060e:	0a76      	lsrs	r6, r6, #9
 8000610:	0e24      	lsrs	r4, r4, #24
 8000612:	0fc9      	lsrs	r1, r1, #31
 8000614:	2aff      	cmp	r2, #255	; 0xff
 8000616:	d006      	beq.n	8000626 <__eqsf2+0x2a>
 8000618:	2cff      	cmp	r4, #255	; 0xff
 800061a:	d003      	beq.n	8000624 <__eqsf2+0x28>
 800061c:	42a2      	cmp	r2, r4
 800061e:	d101      	bne.n	8000624 <__eqsf2+0x28>
 8000620:	42b5      	cmp	r5, r6
 8000622:	d006      	beq.n	8000632 <__eqsf2+0x36>
 8000624:	bd70      	pop	{r4, r5, r6, pc}
 8000626:	2d00      	cmp	r5, #0
 8000628:	d1fc      	bne.n	8000624 <__eqsf2+0x28>
 800062a:	2cff      	cmp	r4, #255	; 0xff
 800062c:	d1fa      	bne.n	8000624 <__eqsf2+0x28>
 800062e:	2e00      	cmp	r6, #0
 8000630:	d1f8      	bne.n	8000624 <__eqsf2+0x28>
 8000632:	428b      	cmp	r3, r1
 8000634:	d006      	beq.n	8000644 <__eqsf2+0x48>
 8000636:	2001      	movs	r0, #1
 8000638:	2a00      	cmp	r2, #0
 800063a:	d1f3      	bne.n	8000624 <__eqsf2+0x28>
 800063c:	0028      	movs	r0, r5
 800063e:	1e43      	subs	r3, r0, #1
 8000640:	4198      	sbcs	r0, r3
 8000642:	e7ef      	b.n	8000624 <__eqsf2+0x28>
 8000644:	2000      	movs	r0, #0
 8000646:	e7ed      	b.n	8000624 <__eqsf2+0x28>

08000648 <__gesf2>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	0042      	lsls	r2, r0, #1
 800064c:	0245      	lsls	r5, r0, #9
 800064e:	024e      	lsls	r6, r1, #9
 8000650:	004c      	lsls	r4, r1, #1
 8000652:	0fc3      	lsrs	r3, r0, #31
 8000654:	0a6d      	lsrs	r5, r5, #9
 8000656:	0e12      	lsrs	r2, r2, #24
 8000658:	0a76      	lsrs	r6, r6, #9
 800065a:	0e24      	lsrs	r4, r4, #24
 800065c:	0fc8      	lsrs	r0, r1, #31
 800065e:	2aff      	cmp	r2, #255	; 0xff
 8000660:	d01b      	beq.n	800069a <__gesf2+0x52>
 8000662:	2cff      	cmp	r4, #255	; 0xff
 8000664:	d00e      	beq.n	8000684 <__gesf2+0x3c>
 8000666:	2a00      	cmp	r2, #0
 8000668:	d11b      	bne.n	80006a2 <__gesf2+0x5a>
 800066a:	2c00      	cmp	r4, #0
 800066c:	d101      	bne.n	8000672 <__gesf2+0x2a>
 800066e:	2e00      	cmp	r6, #0
 8000670:	d01c      	beq.n	80006ac <__gesf2+0x64>
 8000672:	2d00      	cmp	r5, #0
 8000674:	d00c      	beq.n	8000690 <__gesf2+0x48>
 8000676:	4283      	cmp	r3, r0
 8000678:	d01c      	beq.n	80006b4 <__gesf2+0x6c>
 800067a:	2102      	movs	r1, #2
 800067c:	1e58      	subs	r0, r3, #1
 800067e:	4008      	ands	r0, r1
 8000680:	3801      	subs	r0, #1
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	2e00      	cmp	r6, #0
 8000686:	d122      	bne.n	80006ce <__gesf2+0x86>
 8000688:	2a00      	cmp	r2, #0
 800068a:	d1f4      	bne.n	8000676 <__gesf2+0x2e>
 800068c:	2d00      	cmp	r5, #0
 800068e:	d1f2      	bne.n	8000676 <__gesf2+0x2e>
 8000690:	2800      	cmp	r0, #0
 8000692:	d1f6      	bne.n	8000682 <__gesf2+0x3a>
 8000694:	2001      	movs	r0, #1
 8000696:	4240      	negs	r0, r0
 8000698:	e7f3      	b.n	8000682 <__gesf2+0x3a>
 800069a:	2d00      	cmp	r5, #0
 800069c:	d117      	bne.n	80006ce <__gesf2+0x86>
 800069e:	2cff      	cmp	r4, #255	; 0xff
 80006a0:	d0f0      	beq.n	8000684 <__gesf2+0x3c>
 80006a2:	2c00      	cmp	r4, #0
 80006a4:	d1e7      	bne.n	8000676 <__gesf2+0x2e>
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	d1e5      	bne.n	8000676 <__gesf2+0x2e>
 80006aa:	e7e6      	b.n	800067a <__gesf2+0x32>
 80006ac:	2000      	movs	r0, #0
 80006ae:	2d00      	cmp	r5, #0
 80006b0:	d0e7      	beq.n	8000682 <__gesf2+0x3a>
 80006b2:	e7e2      	b.n	800067a <__gesf2+0x32>
 80006b4:	42a2      	cmp	r2, r4
 80006b6:	dc05      	bgt.n	80006c4 <__gesf2+0x7c>
 80006b8:	dbea      	blt.n	8000690 <__gesf2+0x48>
 80006ba:	42b5      	cmp	r5, r6
 80006bc:	d802      	bhi.n	80006c4 <__gesf2+0x7c>
 80006be:	d3e7      	bcc.n	8000690 <__gesf2+0x48>
 80006c0:	2000      	movs	r0, #0
 80006c2:	e7de      	b.n	8000682 <__gesf2+0x3a>
 80006c4:	4243      	negs	r3, r0
 80006c6:	4158      	adcs	r0, r3
 80006c8:	0040      	lsls	r0, r0, #1
 80006ca:	3801      	subs	r0, #1
 80006cc:	e7d9      	b.n	8000682 <__gesf2+0x3a>
 80006ce:	2002      	movs	r0, #2
 80006d0:	4240      	negs	r0, r0
 80006d2:	e7d6      	b.n	8000682 <__gesf2+0x3a>

080006d4 <__lesf2>:
 80006d4:	b570      	push	{r4, r5, r6, lr}
 80006d6:	0042      	lsls	r2, r0, #1
 80006d8:	0245      	lsls	r5, r0, #9
 80006da:	024e      	lsls	r6, r1, #9
 80006dc:	004c      	lsls	r4, r1, #1
 80006de:	0fc3      	lsrs	r3, r0, #31
 80006e0:	0a6d      	lsrs	r5, r5, #9
 80006e2:	0e12      	lsrs	r2, r2, #24
 80006e4:	0a76      	lsrs	r6, r6, #9
 80006e6:	0e24      	lsrs	r4, r4, #24
 80006e8:	0fc8      	lsrs	r0, r1, #31
 80006ea:	2aff      	cmp	r2, #255	; 0xff
 80006ec:	d00b      	beq.n	8000706 <__lesf2+0x32>
 80006ee:	2cff      	cmp	r4, #255	; 0xff
 80006f0:	d00d      	beq.n	800070e <__lesf2+0x3a>
 80006f2:	2a00      	cmp	r2, #0
 80006f4:	d11f      	bne.n	8000736 <__lesf2+0x62>
 80006f6:	2c00      	cmp	r4, #0
 80006f8:	d116      	bne.n	8000728 <__lesf2+0x54>
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d114      	bne.n	8000728 <__lesf2+0x54>
 80006fe:	2000      	movs	r0, #0
 8000700:	2d00      	cmp	r5, #0
 8000702:	d010      	beq.n	8000726 <__lesf2+0x52>
 8000704:	e009      	b.n	800071a <__lesf2+0x46>
 8000706:	2d00      	cmp	r5, #0
 8000708:	d10c      	bne.n	8000724 <__lesf2+0x50>
 800070a:	2cff      	cmp	r4, #255	; 0xff
 800070c:	d113      	bne.n	8000736 <__lesf2+0x62>
 800070e:	2e00      	cmp	r6, #0
 8000710:	d108      	bne.n	8000724 <__lesf2+0x50>
 8000712:	2a00      	cmp	r2, #0
 8000714:	d008      	beq.n	8000728 <__lesf2+0x54>
 8000716:	4283      	cmp	r3, r0
 8000718:	d012      	beq.n	8000740 <__lesf2+0x6c>
 800071a:	2102      	movs	r1, #2
 800071c:	1e58      	subs	r0, r3, #1
 800071e:	4008      	ands	r0, r1
 8000720:	3801      	subs	r0, #1
 8000722:	e000      	b.n	8000726 <__lesf2+0x52>
 8000724:	2002      	movs	r0, #2
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	2d00      	cmp	r5, #0
 800072a:	d1f4      	bne.n	8000716 <__lesf2+0x42>
 800072c:	2800      	cmp	r0, #0
 800072e:	d1fa      	bne.n	8000726 <__lesf2+0x52>
 8000730:	2001      	movs	r0, #1
 8000732:	4240      	negs	r0, r0
 8000734:	e7f7      	b.n	8000726 <__lesf2+0x52>
 8000736:	2c00      	cmp	r4, #0
 8000738:	d1ed      	bne.n	8000716 <__lesf2+0x42>
 800073a:	2e00      	cmp	r6, #0
 800073c:	d1eb      	bne.n	8000716 <__lesf2+0x42>
 800073e:	e7ec      	b.n	800071a <__lesf2+0x46>
 8000740:	42a2      	cmp	r2, r4
 8000742:	dc05      	bgt.n	8000750 <__lesf2+0x7c>
 8000744:	dbf2      	blt.n	800072c <__lesf2+0x58>
 8000746:	42b5      	cmp	r5, r6
 8000748:	d802      	bhi.n	8000750 <__lesf2+0x7c>
 800074a:	d3ef      	bcc.n	800072c <__lesf2+0x58>
 800074c:	2000      	movs	r0, #0
 800074e:	e7ea      	b.n	8000726 <__lesf2+0x52>
 8000750:	4243      	negs	r3, r0
 8000752:	4158      	adcs	r0, r3
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	3801      	subs	r0, #1
 8000758:	e7e5      	b.n	8000726 <__lesf2+0x52>
 800075a:	46c0      	nop			; (mov r8, r8)

0800075c <__aeabi_dadd>:
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	464f      	mov	r7, r9
 8000760:	4646      	mov	r6, r8
 8000762:	46d6      	mov	lr, sl
 8000764:	000d      	movs	r5, r1
 8000766:	0004      	movs	r4, r0
 8000768:	b5c0      	push	{r6, r7, lr}
 800076a:	001f      	movs	r7, r3
 800076c:	0011      	movs	r1, r2
 800076e:	0328      	lsls	r0, r5, #12
 8000770:	0f62      	lsrs	r2, r4, #29
 8000772:	0a40      	lsrs	r0, r0, #9
 8000774:	4310      	orrs	r0, r2
 8000776:	007a      	lsls	r2, r7, #1
 8000778:	0d52      	lsrs	r2, r2, #21
 800077a:	00e3      	lsls	r3, r4, #3
 800077c:	033c      	lsls	r4, r7, #12
 800077e:	4691      	mov	r9, r2
 8000780:	0a64      	lsrs	r4, r4, #9
 8000782:	0ffa      	lsrs	r2, r7, #31
 8000784:	0f4f      	lsrs	r7, r1, #29
 8000786:	006e      	lsls	r6, r5, #1
 8000788:	4327      	orrs	r7, r4
 800078a:	4692      	mov	sl, r2
 800078c:	46b8      	mov	r8, r7
 800078e:	0d76      	lsrs	r6, r6, #21
 8000790:	0fed      	lsrs	r5, r5, #31
 8000792:	00c9      	lsls	r1, r1, #3
 8000794:	4295      	cmp	r5, r2
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x3e>
 8000798:	e099      	b.n	80008ce <__aeabi_dadd+0x172>
 800079a:	464c      	mov	r4, r9
 800079c:	1b34      	subs	r4, r6, r4
 800079e:	46a4      	mov	ip, r4
 80007a0:	2c00      	cmp	r4, #0
 80007a2:	dc00      	bgt.n	80007a6 <__aeabi_dadd+0x4a>
 80007a4:	e07c      	b.n	80008a0 <__aeabi_dadd+0x144>
 80007a6:	464a      	mov	r2, r9
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0x52>
 80007ac:	e0b8      	b.n	8000920 <__aeabi_dadd+0x1c4>
 80007ae:	4ac5      	ldr	r2, [pc, #788]	; (8000ac4 <__aeabi_dadd+0x368>)
 80007b0:	4296      	cmp	r6, r2
 80007b2:	d100      	bne.n	80007b6 <__aeabi_dadd+0x5a>
 80007b4:	e11c      	b.n	80009f0 <__aeabi_dadd+0x294>
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	003c      	movs	r4, r7
 80007ba:	0412      	lsls	r2, r2, #16
 80007bc:	4314      	orrs	r4, r2
 80007be:	46a0      	mov	r8, r4
 80007c0:	4662      	mov	r2, ip
 80007c2:	2a38      	cmp	r2, #56	; 0x38
 80007c4:	dd00      	ble.n	80007c8 <__aeabi_dadd+0x6c>
 80007c6:	e161      	b.n	8000a8c <__aeabi_dadd+0x330>
 80007c8:	2a1f      	cmp	r2, #31
 80007ca:	dd00      	ble.n	80007ce <__aeabi_dadd+0x72>
 80007cc:	e1cc      	b.n	8000b68 <__aeabi_dadd+0x40c>
 80007ce:	4664      	mov	r4, ip
 80007d0:	2220      	movs	r2, #32
 80007d2:	1b12      	subs	r2, r2, r4
 80007d4:	4644      	mov	r4, r8
 80007d6:	4094      	lsls	r4, r2
 80007d8:	000f      	movs	r7, r1
 80007da:	46a1      	mov	r9, r4
 80007dc:	4664      	mov	r4, ip
 80007de:	4091      	lsls	r1, r2
 80007e0:	40e7      	lsrs	r7, r4
 80007e2:	464c      	mov	r4, r9
 80007e4:	1e4a      	subs	r2, r1, #1
 80007e6:	4191      	sbcs	r1, r2
 80007e8:	433c      	orrs	r4, r7
 80007ea:	4642      	mov	r2, r8
 80007ec:	4321      	orrs	r1, r4
 80007ee:	4664      	mov	r4, ip
 80007f0:	40e2      	lsrs	r2, r4
 80007f2:	1a80      	subs	r0, r0, r2
 80007f4:	1a5c      	subs	r4, r3, r1
 80007f6:	42a3      	cmp	r3, r4
 80007f8:	419b      	sbcs	r3, r3
 80007fa:	425f      	negs	r7, r3
 80007fc:	1bc7      	subs	r7, r0, r7
 80007fe:	023b      	lsls	r3, r7, #8
 8000800:	d400      	bmi.n	8000804 <__aeabi_dadd+0xa8>
 8000802:	e0d0      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000804:	027f      	lsls	r7, r7, #9
 8000806:	0a7f      	lsrs	r7, r7, #9
 8000808:	2f00      	cmp	r7, #0
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0xb2>
 800080c:	e0ff      	b.n	8000a0e <__aeabi_dadd+0x2b2>
 800080e:	0038      	movs	r0, r7
 8000810:	f001 fe5a 	bl	80024c8 <__clzsi2>
 8000814:	0001      	movs	r1, r0
 8000816:	3908      	subs	r1, #8
 8000818:	2320      	movs	r3, #32
 800081a:	0022      	movs	r2, r4
 800081c:	1a5b      	subs	r3, r3, r1
 800081e:	408f      	lsls	r7, r1
 8000820:	40da      	lsrs	r2, r3
 8000822:	408c      	lsls	r4, r1
 8000824:	4317      	orrs	r7, r2
 8000826:	42b1      	cmp	r1, r6
 8000828:	da00      	bge.n	800082c <__aeabi_dadd+0xd0>
 800082a:	e0ff      	b.n	8000a2c <__aeabi_dadd+0x2d0>
 800082c:	1b89      	subs	r1, r1, r6
 800082e:	1c4b      	adds	r3, r1, #1
 8000830:	2b1f      	cmp	r3, #31
 8000832:	dd00      	ble.n	8000836 <__aeabi_dadd+0xda>
 8000834:	e0a8      	b.n	8000988 <__aeabi_dadd+0x22c>
 8000836:	2220      	movs	r2, #32
 8000838:	0039      	movs	r1, r7
 800083a:	1ad2      	subs	r2, r2, r3
 800083c:	0020      	movs	r0, r4
 800083e:	4094      	lsls	r4, r2
 8000840:	4091      	lsls	r1, r2
 8000842:	40d8      	lsrs	r0, r3
 8000844:	1e62      	subs	r2, r4, #1
 8000846:	4194      	sbcs	r4, r2
 8000848:	40df      	lsrs	r7, r3
 800084a:	2600      	movs	r6, #0
 800084c:	4301      	orrs	r1, r0
 800084e:	430c      	orrs	r4, r1
 8000850:	0763      	lsls	r3, r4, #29
 8000852:	d009      	beq.n	8000868 <__aeabi_dadd+0x10c>
 8000854:	230f      	movs	r3, #15
 8000856:	4023      	ands	r3, r4
 8000858:	2b04      	cmp	r3, #4
 800085a:	d005      	beq.n	8000868 <__aeabi_dadd+0x10c>
 800085c:	1d23      	adds	r3, r4, #4
 800085e:	42a3      	cmp	r3, r4
 8000860:	41a4      	sbcs	r4, r4
 8000862:	4264      	negs	r4, r4
 8000864:	193f      	adds	r7, r7, r4
 8000866:	001c      	movs	r4, r3
 8000868:	023b      	lsls	r3, r7, #8
 800086a:	d400      	bmi.n	800086e <__aeabi_dadd+0x112>
 800086c:	e09e      	b.n	80009ac <__aeabi_dadd+0x250>
 800086e:	4b95      	ldr	r3, [pc, #596]	; (8000ac4 <__aeabi_dadd+0x368>)
 8000870:	3601      	adds	r6, #1
 8000872:	429e      	cmp	r6, r3
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x11c>
 8000876:	e0b7      	b.n	80009e8 <__aeabi_dadd+0x28c>
 8000878:	4a93      	ldr	r2, [pc, #588]	; (8000ac8 <__aeabi_dadd+0x36c>)
 800087a:	08e4      	lsrs	r4, r4, #3
 800087c:	4017      	ands	r7, r2
 800087e:	077b      	lsls	r3, r7, #29
 8000880:	0571      	lsls	r1, r6, #21
 8000882:	027f      	lsls	r7, r7, #9
 8000884:	4323      	orrs	r3, r4
 8000886:	0b3f      	lsrs	r7, r7, #12
 8000888:	0d4a      	lsrs	r2, r1, #21
 800088a:	0512      	lsls	r2, r2, #20
 800088c:	433a      	orrs	r2, r7
 800088e:	07ed      	lsls	r5, r5, #31
 8000890:	432a      	orrs	r2, r5
 8000892:	0018      	movs	r0, r3
 8000894:	0011      	movs	r1, r2
 8000896:	bce0      	pop	{r5, r6, r7}
 8000898:	46ba      	mov	sl, r7
 800089a:	46b1      	mov	r9, r6
 800089c:	46a8      	mov	r8, r5
 800089e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a0:	2c00      	cmp	r4, #0
 80008a2:	d04b      	beq.n	800093c <__aeabi_dadd+0x1e0>
 80008a4:	464c      	mov	r4, r9
 80008a6:	1ba4      	subs	r4, r4, r6
 80008a8:	46a4      	mov	ip, r4
 80008aa:	2e00      	cmp	r6, #0
 80008ac:	d000      	beq.n	80008b0 <__aeabi_dadd+0x154>
 80008ae:	e123      	b.n	8000af8 <__aeabi_dadd+0x39c>
 80008b0:	0004      	movs	r4, r0
 80008b2:	431c      	orrs	r4, r3
 80008b4:	d100      	bne.n	80008b8 <__aeabi_dadd+0x15c>
 80008b6:	e1af      	b.n	8000c18 <__aeabi_dadd+0x4bc>
 80008b8:	4662      	mov	r2, ip
 80008ba:	1e54      	subs	r4, r2, #1
 80008bc:	2a01      	cmp	r2, #1
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x166>
 80008c0:	e215      	b.n	8000cee <__aeabi_dadd+0x592>
 80008c2:	4d80      	ldr	r5, [pc, #512]	; (8000ac4 <__aeabi_dadd+0x368>)
 80008c4:	45ac      	cmp	ip, r5
 80008c6:	d100      	bne.n	80008ca <__aeabi_dadd+0x16e>
 80008c8:	e1c8      	b.n	8000c5c <__aeabi_dadd+0x500>
 80008ca:	46a4      	mov	ip, r4
 80008cc:	e11b      	b.n	8000b06 <__aeabi_dadd+0x3aa>
 80008ce:	464a      	mov	r2, r9
 80008d0:	1ab2      	subs	r2, r6, r2
 80008d2:	4694      	mov	ip, r2
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	dc00      	bgt.n	80008da <__aeabi_dadd+0x17e>
 80008d8:	e0ac      	b.n	8000a34 <__aeabi_dadd+0x2d8>
 80008da:	464a      	mov	r2, r9
 80008dc:	2a00      	cmp	r2, #0
 80008de:	d043      	beq.n	8000968 <__aeabi_dadd+0x20c>
 80008e0:	4a78      	ldr	r2, [pc, #480]	; (8000ac4 <__aeabi_dadd+0x368>)
 80008e2:	4296      	cmp	r6, r2
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x18c>
 80008e6:	e1af      	b.n	8000c48 <__aeabi_dadd+0x4ec>
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	003c      	movs	r4, r7
 80008ec:	0412      	lsls	r2, r2, #16
 80008ee:	4314      	orrs	r4, r2
 80008f0:	46a0      	mov	r8, r4
 80008f2:	4662      	mov	r2, ip
 80008f4:	2a38      	cmp	r2, #56	; 0x38
 80008f6:	dc67      	bgt.n	80009c8 <__aeabi_dadd+0x26c>
 80008f8:	2a1f      	cmp	r2, #31
 80008fa:	dc00      	bgt.n	80008fe <__aeabi_dadd+0x1a2>
 80008fc:	e15f      	b.n	8000bbe <__aeabi_dadd+0x462>
 80008fe:	4647      	mov	r7, r8
 8000900:	3a20      	subs	r2, #32
 8000902:	40d7      	lsrs	r7, r2
 8000904:	4662      	mov	r2, ip
 8000906:	2a20      	cmp	r2, #32
 8000908:	d005      	beq.n	8000916 <__aeabi_dadd+0x1ba>
 800090a:	4664      	mov	r4, ip
 800090c:	2240      	movs	r2, #64	; 0x40
 800090e:	1b12      	subs	r2, r2, r4
 8000910:	4644      	mov	r4, r8
 8000912:	4094      	lsls	r4, r2
 8000914:	4321      	orrs	r1, r4
 8000916:	1e4a      	subs	r2, r1, #1
 8000918:	4191      	sbcs	r1, r2
 800091a:	000c      	movs	r4, r1
 800091c:	433c      	orrs	r4, r7
 800091e:	e057      	b.n	80009d0 <__aeabi_dadd+0x274>
 8000920:	003a      	movs	r2, r7
 8000922:	430a      	orrs	r2, r1
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x1cc>
 8000926:	e105      	b.n	8000b34 <__aeabi_dadd+0x3d8>
 8000928:	0022      	movs	r2, r4
 800092a:	3a01      	subs	r2, #1
 800092c:	2c01      	cmp	r4, #1
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x1d6>
 8000930:	e182      	b.n	8000c38 <__aeabi_dadd+0x4dc>
 8000932:	4c64      	ldr	r4, [pc, #400]	; (8000ac4 <__aeabi_dadd+0x368>)
 8000934:	45a4      	cmp	ip, r4
 8000936:	d05b      	beq.n	80009f0 <__aeabi_dadd+0x294>
 8000938:	4694      	mov	ip, r2
 800093a:	e741      	b.n	80007c0 <__aeabi_dadd+0x64>
 800093c:	4c63      	ldr	r4, [pc, #396]	; (8000acc <__aeabi_dadd+0x370>)
 800093e:	1c77      	adds	r7, r6, #1
 8000940:	4227      	tst	r7, r4
 8000942:	d000      	beq.n	8000946 <__aeabi_dadd+0x1ea>
 8000944:	e0c4      	b.n	8000ad0 <__aeabi_dadd+0x374>
 8000946:	0004      	movs	r4, r0
 8000948:	431c      	orrs	r4, r3
 800094a:	2e00      	cmp	r6, #0
 800094c:	d000      	beq.n	8000950 <__aeabi_dadd+0x1f4>
 800094e:	e169      	b.n	8000c24 <__aeabi_dadd+0x4c8>
 8000950:	2c00      	cmp	r4, #0
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x1fa>
 8000954:	e1bf      	b.n	8000cd6 <__aeabi_dadd+0x57a>
 8000956:	4644      	mov	r4, r8
 8000958:	430c      	orrs	r4, r1
 800095a:	d000      	beq.n	800095e <__aeabi_dadd+0x202>
 800095c:	e1d0      	b.n	8000d00 <__aeabi_dadd+0x5a4>
 800095e:	0742      	lsls	r2, r0, #29
 8000960:	08db      	lsrs	r3, r3, #3
 8000962:	4313      	orrs	r3, r2
 8000964:	08c0      	lsrs	r0, r0, #3
 8000966:	e029      	b.n	80009bc <__aeabi_dadd+0x260>
 8000968:	003a      	movs	r2, r7
 800096a:	430a      	orrs	r2, r1
 800096c:	d100      	bne.n	8000970 <__aeabi_dadd+0x214>
 800096e:	e170      	b.n	8000c52 <__aeabi_dadd+0x4f6>
 8000970:	4662      	mov	r2, ip
 8000972:	4664      	mov	r4, ip
 8000974:	3a01      	subs	r2, #1
 8000976:	2c01      	cmp	r4, #1
 8000978:	d100      	bne.n	800097c <__aeabi_dadd+0x220>
 800097a:	e0e0      	b.n	8000b3e <__aeabi_dadd+0x3e2>
 800097c:	4c51      	ldr	r4, [pc, #324]	; (8000ac4 <__aeabi_dadd+0x368>)
 800097e:	45a4      	cmp	ip, r4
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x228>
 8000982:	e161      	b.n	8000c48 <__aeabi_dadd+0x4ec>
 8000984:	4694      	mov	ip, r2
 8000986:	e7b4      	b.n	80008f2 <__aeabi_dadd+0x196>
 8000988:	003a      	movs	r2, r7
 800098a:	391f      	subs	r1, #31
 800098c:	40ca      	lsrs	r2, r1
 800098e:	0011      	movs	r1, r2
 8000990:	2b20      	cmp	r3, #32
 8000992:	d003      	beq.n	800099c <__aeabi_dadd+0x240>
 8000994:	2240      	movs	r2, #64	; 0x40
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	409f      	lsls	r7, r3
 800099a:	433c      	orrs	r4, r7
 800099c:	1e63      	subs	r3, r4, #1
 800099e:	419c      	sbcs	r4, r3
 80009a0:	2700      	movs	r7, #0
 80009a2:	2600      	movs	r6, #0
 80009a4:	430c      	orrs	r4, r1
 80009a6:	0763      	lsls	r3, r4, #29
 80009a8:	d000      	beq.n	80009ac <__aeabi_dadd+0x250>
 80009aa:	e753      	b.n	8000854 <__aeabi_dadd+0xf8>
 80009ac:	46b4      	mov	ip, r6
 80009ae:	08e4      	lsrs	r4, r4, #3
 80009b0:	077b      	lsls	r3, r7, #29
 80009b2:	4323      	orrs	r3, r4
 80009b4:	08f8      	lsrs	r0, r7, #3
 80009b6:	4a43      	ldr	r2, [pc, #268]	; (8000ac4 <__aeabi_dadd+0x368>)
 80009b8:	4594      	cmp	ip, r2
 80009ba:	d01d      	beq.n	80009f8 <__aeabi_dadd+0x29c>
 80009bc:	4662      	mov	r2, ip
 80009be:	0307      	lsls	r7, r0, #12
 80009c0:	0552      	lsls	r2, r2, #21
 80009c2:	0b3f      	lsrs	r7, r7, #12
 80009c4:	0d52      	lsrs	r2, r2, #21
 80009c6:	e760      	b.n	800088a <__aeabi_dadd+0x12e>
 80009c8:	4644      	mov	r4, r8
 80009ca:	430c      	orrs	r4, r1
 80009cc:	1e62      	subs	r2, r4, #1
 80009ce:	4194      	sbcs	r4, r2
 80009d0:	18e4      	adds	r4, r4, r3
 80009d2:	429c      	cmp	r4, r3
 80009d4:	419b      	sbcs	r3, r3
 80009d6:	425f      	negs	r7, r3
 80009d8:	183f      	adds	r7, r7, r0
 80009da:	023b      	lsls	r3, r7, #8
 80009dc:	d5e3      	bpl.n	80009a6 <__aeabi_dadd+0x24a>
 80009de:	4b39      	ldr	r3, [pc, #228]	; (8000ac4 <__aeabi_dadd+0x368>)
 80009e0:	3601      	adds	r6, #1
 80009e2:	429e      	cmp	r6, r3
 80009e4:	d000      	beq.n	80009e8 <__aeabi_dadd+0x28c>
 80009e6:	e0b5      	b.n	8000b54 <__aeabi_dadd+0x3f8>
 80009e8:	0032      	movs	r2, r6
 80009ea:	2700      	movs	r7, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	e74c      	b.n	800088a <__aeabi_dadd+0x12e>
 80009f0:	0742      	lsls	r2, r0, #29
 80009f2:	08db      	lsrs	r3, r3, #3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	08c0      	lsrs	r0, r0, #3
 80009f8:	001a      	movs	r2, r3
 80009fa:	4302      	orrs	r2, r0
 80009fc:	d100      	bne.n	8000a00 <__aeabi_dadd+0x2a4>
 80009fe:	e1e1      	b.n	8000dc4 <__aeabi_dadd+0x668>
 8000a00:	2780      	movs	r7, #128	; 0x80
 8000a02:	033f      	lsls	r7, r7, #12
 8000a04:	4307      	orrs	r7, r0
 8000a06:	033f      	lsls	r7, r7, #12
 8000a08:	4a2e      	ldr	r2, [pc, #184]	; (8000ac4 <__aeabi_dadd+0x368>)
 8000a0a:	0b3f      	lsrs	r7, r7, #12
 8000a0c:	e73d      	b.n	800088a <__aeabi_dadd+0x12e>
 8000a0e:	0020      	movs	r0, r4
 8000a10:	f001 fd5a 	bl	80024c8 <__clzsi2>
 8000a14:	0001      	movs	r1, r0
 8000a16:	3118      	adds	r1, #24
 8000a18:	291f      	cmp	r1, #31
 8000a1a:	dc00      	bgt.n	8000a1e <__aeabi_dadd+0x2c2>
 8000a1c:	e6fc      	b.n	8000818 <__aeabi_dadd+0xbc>
 8000a1e:	3808      	subs	r0, #8
 8000a20:	4084      	lsls	r4, r0
 8000a22:	0027      	movs	r7, r4
 8000a24:	2400      	movs	r4, #0
 8000a26:	42b1      	cmp	r1, r6
 8000a28:	db00      	blt.n	8000a2c <__aeabi_dadd+0x2d0>
 8000a2a:	e6ff      	b.n	800082c <__aeabi_dadd+0xd0>
 8000a2c:	4a26      	ldr	r2, [pc, #152]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000a2e:	1a76      	subs	r6, r6, r1
 8000a30:	4017      	ands	r7, r2
 8000a32:	e70d      	b.n	8000850 <__aeabi_dadd+0xf4>
 8000a34:	2a00      	cmp	r2, #0
 8000a36:	d02f      	beq.n	8000a98 <__aeabi_dadd+0x33c>
 8000a38:	464a      	mov	r2, r9
 8000a3a:	1b92      	subs	r2, r2, r6
 8000a3c:	4694      	mov	ip, r2
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_dadd+0x2e8>
 8000a42:	e0ad      	b.n	8000ba0 <__aeabi_dadd+0x444>
 8000a44:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <__aeabi_dadd+0x368>)
 8000a46:	4591      	cmp	r9, r2
 8000a48:	d100      	bne.n	8000a4c <__aeabi_dadd+0x2f0>
 8000a4a:	e10f      	b.n	8000c6c <__aeabi_dadd+0x510>
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	0412      	lsls	r2, r2, #16
 8000a50:	4310      	orrs	r0, r2
 8000a52:	4662      	mov	r2, ip
 8000a54:	2a38      	cmp	r2, #56	; 0x38
 8000a56:	dd00      	ble.n	8000a5a <__aeabi_dadd+0x2fe>
 8000a58:	e10f      	b.n	8000c7a <__aeabi_dadd+0x51e>
 8000a5a:	2a1f      	cmp	r2, #31
 8000a5c:	dd00      	ble.n	8000a60 <__aeabi_dadd+0x304>
 8000a5e:	e180      	b.n	8000d62 <__aeabi_dadd+0x606>
 8000a60:	4664      	mov	r4, ip
 8000a62:	2220      	movs	r2, #32
 8000a64:	001e      	movs	r6, r3
 8000a66:	1b12      	subs	r2, r2, r4
 8000a68:	4667      	mov	r7, ip
 8000a6a:	0004      	movs	r4, r0
 8000a6c:	4093      	lsls	r3, r2
 8000a6e:	4094      	lsls	r4, r2
 8000a70:	40fe      	lsrs	r6, r7
 8000a72:	1e5a      	subs	r2, r3, #1
 8000a74:	4193      	sbcs	r3, r2
 8000a76:	40f8      	lsrs	r0, r7
 8000a78:	4334      	orrs	r4, r6
 8000a7a:	431c      	orrs	r4, r3
 8000a7c:	4480      	add	r8, r0
 8000a7e:	1864      	adds	r4, r4, r1
 8000a80:	428c      	cmp	r4, r1
 8000a82:	41bf      	sbcs	r7, r7
 8000a84:	427f      	negs	r7, r7
 8000a86:	464e      	mov	r6, r9
 8000a88:	4447      	add	r7, r8
 8000a8a:	e7a6      	b.n	80009da <__aeabi_dadd+0x27e>
 8000a8c:	4642      	mov	r2, r8
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	0011      	movs	r1, r2
 8000a92:	1e4a      	subs	r2, r1, #1
 8000a94:	4191      	sbcs	r1, r2
 8000a96:	e6ad      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000a98:	4c0c      	ldr	r4, [pc, #48]	; (8000acc <__aeabi_dadd+0x370>)
 8000a9a:	1c72      	adds	r2, r6, #1
 8000a9c:	4222      	tst	r2, r4
 8000a9e:	d000      	beq.n	8000aa2 <__aeabi_dadd+0x346>
 8000aa0:	e0a1      	b.n	8000be6 <__aeabi_dadd+0x48a>
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	2e00      	cmp	r6, #0
 8000aa8:	d000      	beq.n	8000aac <__aeabi_dadd+0x350>
 8000aaa:	e0fa      	b.n	8000ca2 <__aeabi_dadd+0x546>
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x356>
 8000ab0:	e145      	b.n	8000d3e <__aeabi_dadd+0x5e2>
 8000ab2:	003a      	movs	r2, r7
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	d000      	beq.n	8000aba <__aeabi_dadd+0x35e>
 8000ab8:	e146      	b.n	8000d48 <__aeabi_dadd+0x5ec>
 8000aba:	0742      	lsls	r2, r0, #29
 8000abc:	08db      	lsrs	r3, r3, #3
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	08c0      	lsrs	r0, r0, #3
 8000ac2:	e77b      	b.n	80009bc <__aeabi_dadd+0x260>
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	ff7fffff 	.word	0xff7fffff
 8000acc:	000007fe 	.word	0x000007fe
 8000ad0:	4647      	mov	r7, r8
 8000ad2:	1a5c      	subs	r4, r3, r1
 8000ad4:	1bc2      	subs	r2, r0, r7
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	41bf      	sbcs	r7, r7
 8000ada:	427f      	negs	r7, r7
 8000adc:	46b9      	mov	r9, r7
 8000ade:	0017      	movs	r7, r2
 8000ae0:	464a      	mov	r2, r9
 8000ae2:	1abf      	subs	r7, r7, r2
 8000ae4:	023a      	lsls	r2, r7, #8
 8000ae6:	d500      	bpl.n	8000aea <__aeabi_dadd+0x38e>
 8000ae8:	e08d      	b.n	8000c06 <__aeabi_dadd+0x4aa>
 8000aea:	0023      	movs	r3, r4
 8000aec:	433b      	orrs	r3, r7
 8000aee:	d000      	beq.n	8000af2 <__aeabi_dadd+0x396>
 8000af0:	e68a      	b.n	8000808 <__aeabi_dadd+0xac>
 8000af2:	2000      	movs	r0, #0
 8000af4:	2500      	movs	r5, #0
 8000af6:	e761      	b.n	80009bc <__aeabi_dadd+0x260>
 8000af8:	4cb4      	ldr	r4, [pc, #720]	; (8000dcc <__aeabi_dadd+0x670>)
 8000afa:	45a1      	cmp	r9, r4
 8000afc:	d100      	bne.n	8000b00 <__aeabi_dadd+0x3a4>
 8000afe:	e0ad      	b.n	8000c5c <__aeabi_dadd+0x500>
 8000b00:	2480      	movs	r4, #128	; 0x80
 8000b02:	0424      	lsls	r4, r4, #16
 8000b04:	4320      	orrs	r0, r4
 8000b06:	4664      	mov	r4, ip
 8000b08:	2c38      	cmp	r4, #56	; 0x38
 8000b0a:	dc3d      	bgt.n	8000b88 <__aeabi_dadd+0x42c>
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	2c1f      	cmp	r4, #31
 8000b10:	dd00      	ble.n	8000b14 <__aeabi_dadd+0x3b8>
 8000b12:	e0b7      	b.n	8000c84 <__aeabi_dadd+0x528>
 8000b14:	2520      	movs	r5, #32
 8000b16:	001e      	movs	r6, r3
 8000b18:	1b2d      	subs	r5, r5, r4
 8000b1a:	0004      	movs	r4, r0
 8000b1c:	40ab      	lsls	r3, r5
 8000b1e:	40ac      	lsls	r4, r5
 8000b20:	40d6      	lsrs	r6, r2
 8000b22:	40d0      	lsrs	r0, r2
 8000b24:	4642      	mov	r2, r8
 8000b26:	1e5d      	subs	r5, r3, #1
 8000b28:	41ab      	sbcs	r3, r5
 8000b2a:	4334      	orrs	r4, r6
 8000b2c:	1a12      	subs	r2, r2, r0
 8000b2e:	4690      	mov	r8, r2
 8000b30:	4323      	orrs	r3, r4
 8000b32:	e02c      	b.n	8000b8e <__aeabi_dadd+0x432>
 8000b34:	0742      	lsls	r2, r0, #29
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	08c0      	lsrs	r0, r0, #3
 8000b3c:	e73b      	b.n	80009b6 <__aeabi_dadd+0x25a>
 8000b3e:	185c      	adds	r4, r3, r1
 8000b40:	429c      	cmp	r4, r3
 8000b42:	419b      	sbcs	r3, r3
 8000b44:	4440      	add	r0, r8
 8000b46:	425b      	negs	r3, r3
 8000b48:	18c7      	adds	r7, r0, r3
 8000b4a:	2601      	movs	r6, #1
 8000b4c:	023b      	lsls	r3, r7, #8
 8000b4e:	d400      	bmi.n	8000b52 <__aeabi_dadd+0x3f6>
 8000b50:	e729      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000b52:	2602      	movs	r6, #2
 8000b54:	4a9e      	ldr	r2, [pc, #632]	; (8000dd0 <__aeabi_dadd+0x674>)
 8000b56:	0863      	lsrs	r3, r4, #1
 8000b58:	4017      	ands	r7, r2
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4014      	ands	r4, r2
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	07fb      	lsls	r3, r7, #31
 8000b62:	431c      	orrs	r4, r3
 8000b64:	087f      	lsrs	r7, r7, #1
 8000b66:	e673      	b.n	8000850 <__aeabi_dadd+0xf4>
 8000b68:	4644      	mov	r4, r8
 8000b6a:	3a20      	subs	r2, #32
 8000b6c:	40d4      	lsrs	r4, r2
 8000b6e:	4662      	mov	r2, ip
 8000b70:	2a20      	cmp	r2, #32
 8000b72:	d005      	beq.n	8000b80 <__aeabi_dadd+0x424>
 8000b74:	4667      	mov	r7, ip
 8000b76:	2240      	movs	r2, #64	; 0x40
 8000b78:	1bd2      	subs	r2, r2, r7
 8000b7a:	4647      	mov	r7, r8
 8000b7c:	4097      	lsls	r7, r2
 8000b7e:	4339      	orrs	r1, r7
 8000b80:	1e4a      	subs	r2, r1, #1
 8000b82:	4191      	sbcs	r1, r2
 8000b84:	4321      	orrs	r1, r4
 8000b86:	e635      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000b88:	4303      	orrs	r3, r0
 8000b8a:	1e58      	subs	r0, r3, #1
 8000b8c:	4183      	sbcs	r3, r0
 8000b8e:	1acc      	subs	r4, r1, r3
 8000b90:	42a1      	cmp	r1, r4
 8000b92:	41bf      	sbcs	r7, r7
 8000b94:	4643      	mov	r3, r8
 8000b96:	427f      	negs	r7, r7
 8000b98:	4655      	mov	r5, sl
 8000b9a:	464e      	mov	r6, r9
 8000b9c:	1bdf      	subs	r7, r3, r7
 8000b9e:	e62e      	b.n	80007fe <__aeabi_dadd+0xa2>
 8000ba0:	0002      	movs	r2, r0
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_dadd+0x44c>
 8000ba6:	e0bd      	b.n	8000d24 <__aeabi_dadd+0x5c8>
 8000ba8:	4662      	mov	r2, ip
 8000baa:	4664      	mov	r4, ip
 8000bac:	3a01      	subs	r2, #1
 8000bae:	2c01      	cmp	r4, #1
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dadd+0x458>
 8000bb2:	e0e5      	b.n	8000d80 <__aeabi_dadd+0x624>
 8000bb4:	4c85      	ldr	r4, [pc, #532]	; (8000dcc <__aeabi_dadd+0x670>)
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	d058      	beq.n	8000c6c <__aeabi_dadd+0x510>
 8000bba:	4694      	mov	ip, r2
 8000bbc:	e749      	b.n	8000a52 <__aeabi_dadd+0x2f6>
 8000bbe:	4664      	mov	r4, ip
 8000bc0:	2220      	movs	r2, #32
 8000bc2:	1b12      	subs	r2, r2, r4
 8000bc4:	4644      	mov	r4, r8
 8000bc6:	4094      	lsls	r4, r2
 8000bc8:	000f      	movs	r7, r1
 8000bca:	46a1      	mov	r9, r4
 8000bcc:	4664      	mov	r4, ip
 8000bce:	4091      	lsls	r1, r2
 8000bd0:	40e7      	lsrs	r7, r4
 8000bd2:	464c      	mov	r4, r9
 8000bd4:	1e4a      	subs	r2, r1, #1
 8000bd6:	4191      	sbcs	r1, r2
 8000bd8:	433c      	orrs	r4, r7
 8000bda:	4642      	mov	r2, r8
 8000bdc:	430c      	orrs	r4, r1
 8000bde:	4661      	mov	r1, ip
 8000be0:	40ca      	lsrs	r2, r1
 8000be2:	1880      	adds	r0, r0, r2
 8000be4:	e6f4      	b.n	80009d0 <__aeabi_dadd+0x274>
 8000be6:	4c79      	ldr	r4, [pc, #484]	; (8000dcc <__aeabi_dadd+0x670>)
 8000be8:	42a2      	cmp	r2, r4
 8000bea:	d100      	bne.n	8000bee <__aeabi_dadd+0x492>
 8000bec:	e6fd      	b.n	80009ea <__aeabi_dadd+0x28e>
 8000bee:	1859      	adds	r1, r3, r1
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	419b      	sbcs	r3, r3
 8000bf4:	4440      	add	r0, r8
 8000bf6:	425f      	negs	r7, r3
 8000bf8:	19c7      	adds	r7, r0, r7
 8000bfa:	07fc      	lsls	r4, r7, #31
 8000bfc:	0849      	lsrs	r1, r1, #1
 8000bfe:	0016      	movs	r6, r2
 8000c00:	430c      	orrs	r4, r1
 8000c02:	087f      	lsrs	r7, r7, #1
 8000c04:	e6cf      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000c06:	1acc      	subs	r4, r1, r3
 8000c08:	42a1      	cmp	r1, r4
 8000c0a:	41bf      	sbcs	r7, r7
 8000c0c:	4643      	mov	r3, r8
 8000c0e:	427f      	negs	r7, r7
 8000c10:	1a18      	subs	r0, r3, r0
 8000c12:	4655      	mov	r5, sl
 8000c14:	1bc7      	subs	r7, r0, r7
 8000c16:	e5f7      	b.n	8000808 <__aeabi_dadd+0xac>
 8000c18:	08c9      	lsrs	r1, r1, #3
 8000c1a:	077b      	lsls	r3, r7, #29
 8000c1c:	4655      	mov	r5, sl
 8000c1e:	430b      	orrs	r3, r1
 8000c20:	08f8      	lsrs	r0, r7, #3
 8000c22:	e6c8      	b.n	80009b6 <__aeabi_dadd+0x25a>
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d000      	beq.n	8000c2a <__aeabi_dadd+0x4ce>
 8000c28:	e081      	b.n	8000d2e <__aeabi_dadd+0x5d2>
 8000c2a:	4643      	mov	r3, r8
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	d115      	bne.n	8000c5c <__aeabi_dadd+0x500>
 8000c30:	2080      	movs	r0, #128	; 0x80
 8000c32:	2500      	movs	r5, #0
 8000c34:	0300      	lsls	r0, r0, #12
 8000c36:	e6e3      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c38:	1a5c      	subs	r4, r3, r1
 8000c3a:	42a3      	cmp	r3, r4
 8000c3c:	419b      	sbcs	r3, r3
 8000c3e:	1bc7      	subs	r7, r0, r7
 8000c40:	425b      	negs	r3, r3
 8000c42:	2601      	movs	r6, #1
 8000c44:	1aff      	subs	r7, r7, r3
 8000c46:	e5da      	b.n	80007fe <__aeabi_dadd+0xa2>
 8000c48:	0742      	lsls	r2, r0, #29
 8000c4a:	08db      	lsrs	r3, r3, #3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	08c0      	lsrs	r0, r0, #3
 8000c50:	e6d2      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000c52:	0742      	lsls	r2, r0, #29
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	08c0      	lsrs	r0, r0, #3
 8000c5a:	e6ac      	b.n	80009b6 <__aeabi_dadd+0x25a>
 8000c5c:	4643      	mov	r3, r8
 8000c5e:	4642      	mov	r2, r8
 8000c60:	08c9      	lsrs	r1, r1, #3
 8000c62:	075b      	lsls	r3, r3, #29
 8000c64:	4655      	mov	r5, sl
 8000c66:	430b      	orrs	r3, r1
 8000c68:	08d0      	lsrs	r0, r2, #3
 8000c6a:	e6c5      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000c6c:	4643      	mov	r3, r8
 8000c6e:	4642      	mov	r2, r8
 8000c70:	075b      	lsls	r3, r3, #29
 8000c72:	08c9      	lsrs	r1, r1, #3
 8000c74:	430b      	orrs	r3, r1
 8000c76:	08d0      	lsrs	r0, r2, #3
 8000c78:	e6be      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000c7a:	4303      	orrs	r3, r0
 8000c7c:	001c      	movs	r4, r3
 8000c7e:	1e63      	subs	r3, r4, #1
 8000c80:	419c      	sbcs	r4, r3
 8000c82:	e6fc      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000c84:	0002      	movs	r2, r0
 8000c86:	3c20      	subs	r4, #32
 8000c88:	40e2      	lsrs	r2, r4
 8000c8a:	0014      	movs	r4, r2
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	2a20      	cmp	r2, #32
 8000c90:	d003      	beq.n	8000c9a <__aeabi_dadd+0x53e>
 8000c92:	2540      	movs	r5, #64	; 0x40
 8000c94:	1aad      	subs	r5, r5, r2
 8000c96:	40a8      	lsls	r0, r5
 8000c98:	4303      	orrs	r3, r0
 8000c9a:	1e58      	subs	r0, r3, #1
 8000c9c:	4183      	sbcs	r3, r0
 8000c9e:	4323      	orrs	r3, r4
 8000ca0:	e775      	b.n	8000b8e <__aeabi_dadd+0x432>
 8000ca2:	2a00      	cmp	r2, #0
 8000ca4:	d0e2      	beq.n	8000c6c <__aeabi_dadd+0x510>
 8000ca6:	003a      	movs	r2, r7
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	d0cd      	beq.n	8000c48 <__aeabi_dadd+0x4ec>
 8000cac:	0742      	lsls	r2, r0, #29
 8000cae:	08db      	lsrs	r3, r3, #3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	08c0      	lsrs	r0, r0, #3
 8000cb6:	0312      	lsls	r2, r2, #12
 8000cb8:	4210      	tst	r0, r2
 8000cba:	d006      	beq.n	8000cca <__aeabi_dadd+0x56e>
 8000cbc:	08fc      	lsrs	r4, r7, #3
 8000cbe:	4214      	tst	r4, r2
 8000cc0:	d103      	bne.n	8000cca <__aeabi_dadd+0x56e>
 8000cc2:	0020      	movs	r0, r4
 8000cc4:	08cb      	lsrs	r3, r1, #3
 8000cc6:	077a      	lsls	r2, r7, #29
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	0f5a      	lsrs	r2, r3, #29
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	0752      	lsls	r2, r2, #29
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	e690      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	d100      	bne.n	8000cde <__aeabi_dadd+0x582>
 8000cdc:	e709      	b.n	8000af2 <__aeabi_dadd+0x396>
 8000cde:	4643      	mov	r3, r8
 8000ce0:	4642      	mov	r2, r8
 8000ce2:	08c9      	lsrs	r1, r1, #3
 8000ce4:	075b      	lsls	r3, r3, #29
 8000ce6:	4655      	mov	r5, sl
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	08d0      	lsrs	r0, r2, #3
 8000cec:	e666      	b.n	80009bc <__aeabi_dadd+0x260>
 8000cee:	1acc      	subs	r4, r1, r3
 8000cf0:	42a1      	cmp	r1, r4
 8000cf2:	4189      	sbcs	r1, r1
 8000cf4:	1a3f      	subs	r7, r7, r0
 8000cf6:	4249      	negs	r1, r1
 8000cf8:	4655      	mov	r5, sl
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	1a7f      	subs	r7, r7, r1
 8000cfe:	e57e      	b.n	80007fe <__aeabi_dadd+0xa2>
 8000d00:	4642      	mov	r2, r8
 8000d02:	1a5c      	subs	r4, r3, r1
 8000d04:	1a87      	subs	r7, r0, r2
 8000d06:	42a3      	cmp	r3, r4
 8000d08:	4192      	sbcs	r2, r2
 8000d0a:	4252      	negs	r2, r2
 8000d0c:	1abf      	subs	r7, r7, r2
 8000d0e:	023a      	lsls	r2, r7, #8
 8000d10:	d53d      	bpl.n	8000d8e <__aeabi_dadd+0x632>
 8000d12:	1acc      	subs	r4, r1, r3
 8000d14:	42a1      	cmp	r1, r4
 8000d16:	4189      	sbcs	r1, r1
 8000d18:	4643      	mov	r3, r8
 8000d1a:	4249      	negs	r1, r1
 8000d1c:	1a1f      	subs	r7, r3, r0
 8000d1e:	4655      	mov	r5, sl
 8000d20:	1a7f      	subs	r7, r7, r1
 8000d22:	e595      	b.n	8000850 <__aeabi_dadd+0xf4>
 8000d24:	077b      	lsls	r3, r7, #29
 8000d26:	08c9      	lsrs	r1, r1, #3
 8000d28:	430b      	orrs	r3, r1
 8000d2a:	08f8      	lsrs	r0, r7, #3
 8000d2c:	e643      	b.n	80009b6 <__aeabi_dadd+0x25a>
 8000d2e:	4644      	mov	r4, r8
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	430c      	orrs	r4, r1
 8000d34:	d130      	bne.n	8000d98 <__aeabi_dadd+0x63c>
 8000d36:	0742      	lsls	r2, r0, #29
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	08c0      	lsrs	r0, r0, #3
 8000d3c:	e65c      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000d3e:	077b      	lsls	r3, r7, #29
 8000d40:	08c9      	lsrs	r1, r1, #3
 8000d42:	430b      	orrs	r3, r1
 8000d44:	08f8      	lsrs	r0, r7, #3
 8000d46:	e639      	b.n	80009bc <__aeabi_dadd+0x260>
 8000d48:	185c      	adds	r4, r3, r1
 8000d4a:	429c      	cmp	r4, r3
 8000d4c:	419b      	sbcs	r3, r3
 8000d4e:	4440      	add	r0, r8
 8000d50:	425b      	negs	r3, r3
 8000d52:	18c7      	adds	r7, r0, r3
 8000d54:	023b      	lsls	r3, r7, #8
 8000d56:	d400      	bmi.n	8000d5a <__aeabi_dadd+0x5fe>
 8000d58:	e625      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <__aeabi_dadd+0x674>)
 8000d5c:	2601      	movs	r6, #1
 8000d5e:	401f      	ands	r7, r3
 8000d60:	e621      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d62:	0004      	movs	r4, r0
 8000d64:	3a20      	subs	r2, #32
 8000d66:	40d4      	lsrs	r4, r2
 8000d68:	4662      	mov	r2, ip
 8000d6a:	2a20      	cmp	r2, #32
 8000d6c:	d004      	beq.n	8000d78 <__aeabi_dadd+0x61c>
 8000d6e:	2240      	movs	r2, #64	; 0x40
 8000d70:	4666      	mov	r6, ip
 8000d72:	1b92      	subs	r2, r2, r6
 8000d74:	4090      	lsls	r0, r2
 8000d76:	4303      	orrs	r3, r0
 8000d78:	1e5a      	subs	r2, r3, #1
 8000d7a:	4193      	sbcs	r3, r2
 8000d7c:	431c      	orrs	r4, r3
 8000d7e:	e67e      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000d80:	185c      	adds	r4, r3, r1
 8000d82:	428c      	cmp	r4, r1
 8000d84:	4189      	sbcs	r1, r1
 8000d86:	4440      	add	r0, r8
 8000d88:	4249      	negs	r1, r1
 8000d8a:	1847      	adds	r7, r0, r1
 8000d8c:	e6dd      	b.n	8000b4a <__aeabi_dadd+0x3ee>
 8000d8e:	0023      	movs	r3, r4
 8000d90:	433b      	orrs	r3, r7
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dadd+0x63a>
 8000d94:	e6ad      	b.n	8000af2 <__aeabi_dadd+0x396>
 8000d96:	e606      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d98:	0744      	lsls	r4, r0, #29
 8000d9a:	4323      	orrs	r3, r4
 8000d9c:	2480      	movs	r4, #128	; 0x80
 8000d9e:	08c0      	lsrs	r0, r0, #3
 8000da0:	0324      	lsls	r4, r4, #12
 8000da2:	4220      	tst	r0, r4
 8000da4:	d008      	beq.n	8000db8 <__aeabi_dadd+0x65c>
 8000da6:	4642      	mov	r2, r8
 8000da8:	08d6      	lsrs	r6, r2, #3
 8000daa:	4226      	tst	r6, r4
 8000dac:	d104      	bne.n	8000db8 <__aeabi_dadd+0x65c>
 8000dae:	4655      	mov	r5, sl
 8000db0:	0030      	movs	r0, r6
 8000db2:	08cb      	lsrs	r3, r1, #3
 8000db4:	0751      	lsls	r1, r2, #29
 8000db6:	430b      	orrs	r3, r1
 8000db8:	0f5a      	lsrs	r2, r3, #29
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	08db      	lsrs	r3, r3, #3
 8000dbe:	0752      	lsls	r2, r2, #29
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	e619      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	4a01      	ldr	r2, [pc, #4]	; (8000dcc <__aeabi_dadd+0x670>)
 8000dc8:	001f      	movs	r7, r3
 8000dca:	e55e      	b.n	800088a <__aeabi_dadd+0x12e>
 8000dcc:	000007ff 	.word	0x000007ff
 8000dd0:	ff7fffff 	.word	0xff7fffff

08000dd4 <__aeabi_ddiv>:
 8000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd6:	4657      	mov	r7, sl
 8000dd8:	464e      	mov	r6, r9
 8000dda:	4645      	mov	r5, r8
 8000ddc:	46de      	mov	lr, fp
 8000dde:	b5e0      	push	{r5, r6, r7, lr}
 8000de0:	4681      	mov	r9, r0
 8000de2:	0005      	movs	r5, r0
 8000de4:	030c      	lsls	r4, r1, #12
 8000de6:	0048      	lsls	r0, r1, #1
 8000de8:	4692      	mov	sl, r2
 8000dea:	001f      	movs	r7, r3
 8000dec:	b085      	sub	sp, #20
 8000dee:	0b24      	lsrs	r4, r4, #12
 8000df0:	0d40      	lsrs	r0, r0, #21
 8000df2:	0fce      	lsrs	r6, r1, #31
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_ddiv+0x26>
 8000df8:	e156      	b.n	80010a8 <__aeabi_ddiv+0x2d4>
 8000dfa:	4bd4      	ldr	r3, [pc, #848]	; (800114c <__aeabi_ddiv+0x378>)
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_ddiv+0x2e>
 8000e00:	e172      	b.n	80010e8 <__aeabi_ddiv+0x314>
 8000e02:	0f6b      	lsrs	r3, r5, #29
 8000e04:	00e4      	lsls	r4, r4, #3
 8000e06:	431c      	orrs	r4, r3
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	041b      	lsls	r3, r3, #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	4698      	mov	r8, r3
 8000e10:	4bcf      	ldr	r3, [pc, #828]	; (8001150 <__aeabi_ddiv+0x37c>)
 8000e12:	00ed      	lsls	r5, r5, #3
 8000e14:	469b      	mov	fp, r3
 8000e16:	2300      	movs	r3, #0
 8000e18:	4699      	mov	r9, r3
 8000e1a:	4483      	add	fp, r0
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	033c      	lsls	r4, r7, #12
 8000e20:	007b      	lsls	r3, r7, #1
 8000e22:	4650      	mov	r0, sl
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	0d5b      	lsrs	r3, r3, #21
 8000e28:	0fff      	lsrs	r7, r7, #31
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x5c>
 8000e2e:	e11f      	b.n	8001070 <__aeabi_ddiv+0x29c>
 8000e30:	4ac6      	ldr	r2, [pc, #792]	; (800114c <__aeabi_ddiv+0x378>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d100      	bne.n	8000e38 <__aeabi_ddiv+0x64>
 8000e36:	e162      	b.n	80010fe <__aeabi_ddiv+0x32a>
 8000e38:	49c5      	ldr	r1, [pc, #788]	; (8001150 <__aeabi_ddiv+0x37c>)
 8000e3a:	0f42      	lsrs	r2, r0, #29
 8000e3c:	468c      	mov	ip, r1
 8000e3e:	00e4      	lsls	r4, r4, #3
 8000e40:	4659      	mov	r1, fp
 8000e42:	4314      	orrs	r4, r2
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	4463      	add	r3, ip
 8000e48:	0412      	lsls	r2, r2, #16
 8000e4a:	1acb      	subs	r3, r1, r3
 8000e4c:	4314      	orrs	r4, r2
 8000e4e:	469b      	mov	fp, r3
 8000e50:	00c2      	lsls	r2, r0, #3
 8000e52:	2000      	movs	r0, #0
 8000e54:	0033      	movs	r3, r6
 8000e56:	407b      	eors	r3, r7
 8000e58:	469a      	mov	sl, r3
 8000e5a:	464b      	mov	r3, r9
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d827      	bhi.n	8000eb0 <__aeabi_ddiv+0xdc>
 8000e60:	49bc      	ldr	r1, [pc, #752]	; (8001154 <__aeabi_ddiv+0x380>)
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	58cb      	ldr	r3, [r1, r3]
 8000e66:	469f      	mov	pc, r3
 8000e68:	46b2      	mov	sl, r6
 8000e6a:	9b00      	ldr	r3, [sp, #0]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d016      	beq.n	8000e9e <__aeabi_ddiv+0xca>
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d100      	bne.n	8000e76 <__aeabi_ddiv+0xa2>
 8000e74:	e28e      	b.n	8001394 <__aeabi_ddiv+0x5c0>
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d000      	beq.n	8000e7c <__aeabi_ddiv+0xa8>
 8000e7a:	e0d9      	b.n	8001030 <__aeabi_ddiv+0x25c>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	2400      	movs	r4, #0
 8000e80:	2500      	movs	r5, #0
 8000e82:	4652      	mov	r2, sl
 8000e84:	051b      	lsls	r3, r3, #20
 8000e86:	4323      	orrs	r3, r4
 8000e88:	07d2      	lsls	r2, r2, #31
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	0028      	movs	r0, r5
 8000e8e:	0019      	movs	r1, r3
 8000e90:	b005      	add	sp, #20
 8000e92:	bcf0      	pop	{r4, r5, r6, r7}
 8000e94:	46bb      	mov	fp, r7
 8000e96:	46b2      	mov	sl, r6
 8000e98:	46a9      	mov	r9, r5
 8000e9a:	46a0      	mov	r8, r4
 8000e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e9e:	2400      	movs	r4, #0
 8000ea0:	2500      	movs	r5, #0
 8000ea2:	4baa      	ldr	r3, [pc, #680]	; (800114c <__aeabi_ddiv+0x378>)
 8000ea4:	e7ed      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8000ea6:	46ba      	mov	sl, r7
 8000ea8:	46a0      	mov	r8, r4
 8000eaa:	0015      	movs	r5, r2
 8000eac:	9000      	str	r0, [sp, #0]
 8000eae:	e7dc      	b.n	8000e6a <__aeabi_ddiv+0x96>
 8000eb0:	4544      	cmp	r4, r8
 8000eb2:	d200      	bcs.n	8000eb6 <__aeabi_ddiv+0xe2>
 8000eb4:	e1c7      	b.n	8001246 <__aeabi_ddiv+0x472>
 8000eb6:	d100      	bne.n	8000eba <__aeabi_ddiv+0xe6>
 8000eb8:	e1c2      	b.n	8001240 <__aeabi_ddiv+0x46c>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	425b      	negs	r3, r3
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	002e      	movs	r6, r5
 8000ec2:	4640      	mov	r0, r8
 8000ec4:	2500      	movs	r5, #0
 8000ec6:	44e3      	add	fp, ip
 8000ec8:	0223      	lsls	r3, r4, #8
 8000eca:	0e14      	lsrs	r4, r2, #24
 8000ecc:	431c      	orrs	r4, r3
 8000ece:	0c1b      	lsrs	r3, r3, #16
 8000ed0:	4699      	mov	r9, r3
 8000ed2:	0423      	lsls	r3, r4, #16
 8000ed4:	0c1f      	lsrs	r7, r3, #16
 8000ed6:	0212      	lsls	r2, r2, #8
 8000ed8:	4649      	mov	r1, r9
 8000eda:	9200      	str	r2, [sp, #0]
 8000edc:	9701      	str	r7, [sp, #4]
 8000ede:	f7ff f9b5 	bl	800024c <__aeabi_uidivmod>
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	437a      	muls	r2, r7
 8000ee6:	040b      	lsls	r3, r1, #16
 8000ee8:	0c31      	lsrs	r1, r6, #16
 8000eea:	4680      	mov	r8, r0
 8000eec:	4319      	orrs	r1, r3
 8000eee:	428a      	cmp	r2, r1
 8000ef0:	d907      	bls.n	8000f02 <__aeabi_ddiv+0x12e>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	425b      	negs	r3, r3
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	1909      	adds	r1, r1, r4
 8000efa:	44e0      	add	r8, ip
 8000efc:	428c      	cmp	r4, r1
 8000efe:	d800      	bhi.n	8000f02 <__aeabi_ddiv+0x12e>
 8000f00:	e207      	b.n	8001312 <__aeabi_ddiv+0x53e>
 8000f02:	1a88      	subs	r0, r1, r2
 8000f04:	4649      	mov	r1, r9
 8000f06:	f7ff f9a1 	bl	800024c <__aeabi_uidivmod>
 8000f0a:	0409      	lsls	r1, r1, #16
 8000f0c:	468c      	mov	ip, r1
 8000f0e:	0431      	lsls	r1, r6, #16
 8000f10:	4666      	mov	r6, ip
 8000f12:	9a01      	ldr	r2, [sp, #4]
 8000f14:	0c09      	lsrs	r1, r1, #16
 8000f16:	4342      	muls	r2, r0
 8000f18:	0003      	movs	r3, r0
 8000f1a:	4331      	orrs	r1, r6
 8000f1c:	428a      	cmp	r2, r1
 8000f1e:	d904      	bls.n	8000f2a <__aeabi_ddiv+0x156>
 8000f20:	1909      	adds	r1, r1, r4
 8000f22:	3b01      	subs	r3, #1
 8000f24:	428c      	cmp	r4, r1
 8000f26:	d800      	bhi.n	8000f2a <__aeabi_ddiv+0x156>
 8000f28:	e1ed      	b.n	8001306 <__aeabi_ddiv+0x532>
 8000f2a:	1a88      	subs	r0, r1, r2
 8000f2c:	4642      	mov	r2, r8
 8000f2e:	0412      	lsls	r2, r2, #16
 8000f30:	431a      	orrs	r2, r3
 8000f32:	4690      	mov	r8, r2
 8000f34:	4641      	mov	r1, r8
 8000f36:	9b00      	ldr	r3, [sp, #0]
 8000f38:	040e      	lsls	r6, r1, #16
 8000f3a:	0c1b      	lsrs	r3, r3, #16
 8000f3c:	001f      	movs	r7, r3
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	9b00      	ldr	r3, [sp, #0]
 8000f42:	0c36      	lsrs	r6, r6, #16
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	0c19      	lsrs	r1, r3, #16
 8000f48:	000b      	movs	r3, r1
 8000f4a:	4373      	muls	r3, r6
 8000f4c:	0c12      	lsrs	r2, r2, #16
 8000f4e:	437e      	muls	r6, r7
 8000f50:	9103      	str	r1, [sp, #12]
 8000f52:	4351      	muls	r1, r2
 8000f54:	437a      	muls	r2, r7
 8000f56:	0c1f      	lsrs	r7, r3, #16
 8000f58:	46bc      	mov	ip, r7
 8000f5a:	1876      	adds	r6, r6, r1
 8000f5c:	4466      	add	r6, ip
 8000f5e:	42b1      	cmp	r1, r6
 8000f60:	d903      	bls.n	8000f6a <__aeabi_ddiv+0x196>
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	0249      	lsls	r1, r1, #9
 8000f66:	468c      	mov	ip, r1
 8000f68:	4462      	add	r2, ip
 8000f6a:	0c31      	lsrs	r1, r6, #16
 8000f6c:	188a      	adds	r2, r1, r2
 8000f6e:	0431      	lsls	r1, r6, #16
 8000f70:	041e      	lsls	r6, r3, #16
 8000f72:	0c36      	lsrs	r6, r6, #16
 8000f74:	198e      	adds	r6, r1, r6
 8000f76:	4290      	cmp	r0, r2
 8000f78:	d302      	bcc.n	8000f80 <__aeabi_ddiv+0x1ac>
 8000f7a:	d112      	bne.n	8000fa2 <__aeabi_ddiv+0x1ce>
 8000f7c:	42b5      	cmp	r5, r6
 8000f7e:	d210      	bcs.n	8000fa2 <__aeabi_ddiv+0x1ce>
 8000f80:	4643      	mov	r3, r8
 8000f82:	1e59      	subs	r1, r3, #1
 8000f84:	9b00      	ldr	r3, [sp, #0]
 8000f86:	469c      	mov	ip, r3
 8000f88:	4465      	add	r5, ip
 8000f8a:	001f      	movs	r7, r3
 8000f8c:	429d      	cmp	r5, r3
 8000f8e:	419b      	sbcs	r3, r3
 8000f90:	425b      	negs	r3, r3
 8000f92:	191b      	adds	r3, r3, r4
 8000f94:	18c0      	adds	r0, r0, r3
 8000f96:	4284      	cmp	r4, r0
 8000f98:	d200      	bcs.n	8000f9c <__aeabi_ddiv+0x1c8>
 8000f9a:	e1a0      	b.n	80012de <__aeabi_ddiv+0x50a>
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_ddiv+0x1cc>
 8000f9e:	e19b      	b.n	80012d8 <__aeabi_ddiv+0x504>
 8000fa0:	4688      	mov	r8, r1
 8000fa2:	1bae      	subs	r6, r5, r6
 8000fa4:	42b5      	cmp	r5, r6
 8000fa6:	41ad      	sbcs	r5, r5
 8000fa8:	1a80      	subs	r0, r0, r2
 8000faa:	426d      	negs	r5, r5
 8000fac:	1b40      	subs	r0, r0, r5
 8000fae:	4284      	cmp	r4, r0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_ddiv+0x1e0>
 8000fb2:	e1d5      	b.n	8001360 <__aeabi_ddiv+0x58c>
 8000fb4:	4649      	mov	r1, r9
 8000fb6:	f7ff f949 	bl	800024c <__aeabi_uidivmod>
 8000fba:	9a01      	ldr	r2, [sp, #4]
 8000fbc:	040b      	lsls	r3, r1, #16
 8000fbe:	4342      	muls	r2, r0
 8000fc0:	0c31      	lsrs	r1, r6, #16
 8000fc2:	0005      	movs	r5, r0
 8000fc4:	4319      	orrs	r1, r3
 8000fc6:	428a      	cmp	r2, r1
 8000fc8:	d900      	bls.n	8000fcc <__aeabi_ddiv+0x1f8>
 8000fca:	e16c      	b.n	80012a6 <__aeabi_ddiv+0x4d2>
 8000fcc:	1a88      	subs	r0, r1, r2
 8000fce:	4649      	mov	r1, r9
 8000fd0:	f7ff f93c 	bl	800024c <__aeabi_uidivmod>
 8000fd4:	9a01      	ldr	r2, [sp, #4]
 8000fd6:	0436      	lsls	r6, r6, #16
 8000fd8:	4342      	muls	r2, r0
 8000fda:	0409      	lsls	r1, r1, #16
 8000fdc:	0c36      	lsrs	r6, r6, #16
 8000fde:	0003      	movs	r3, r0
 8000fe0:	430e      	orrs	r6, r1
 8000fe2:	42b2      	cmp	r2, r6
 8000fe4:	d900      	bls.n	8000fe8 <__aeabi_ddiv+0x214>
 8000fe6:	e153      	b.n	8001290 <__aeabi_ddiv+0x4bc>
 8000fe8:	9803      	ldr	r0, [sp, #12]
 8000fea:	1ab6      	subs	r6, r6, r2
 8000fec:	0002      	movs	r2, r0
 8000fee:	042d      	lsls	r5, r5, #16
 8000ff0:	431d      	orrs	r5, r3
 8000ff2:	9f02      	ldr	r7, [sp, #8]
 8000ff4:	042b      	lsls	r3, r5, #16
 8000ff6:	0c1b      	lsrs	r3, r3, #16
 8000ff8:	435a      	muls	r2, r3
 8000ffa:	437b      	muls	r3, r7
 8000ffc:	469c      	mov	ip, r3
 8000ffe:	0c29      	lsrs	r1, r5, #16
 8001000:	4348      	muls	r0, r1
 8001002:	0c13      	lsrs	r3, r2, #16
 8001004:	4484      	add	ip, r0
 8001006:	4463      	add	r3, ip
 8001008:	4379      	muls	r1, r7
 800100a:	4298      	cmp	r0, r3
 800100c:	d903      	bls.n	8001016 <__aeabi_ddiv+0x242>
 800100e:	2080      	movs	r0, #128	; 0x80
 8001010:	0240      	lsls	r0, r0, #9
 8001012:	4684      	mov	ip, r0
 8001014:	4461      	add	r1, ip
 8001016:	0c18      	lsrs	r0, r3, #16
 8001018:	0412      	lsls	r2, r2, #16
 800101a:	041b      	lsls	r3, r3, #16
 800101c:	0c12      	lsrs	r2, r2, #16
 800101e:	1841      	adds	r1, r0, r1
 8001020:	189b      	adds	r3, r3, r2
 8001022:	428e      	cmp	r6, r1
 8001024:	d200      	bcs.n	8001028 <__aeabi_ddiv+0x254>
 8001026:	e0ff      	b.n	8001228 <__aeabi_ddiv+0x454>
 8001028:	d100      	bne.n	800102c <__aeabi_ddiv+0x258>
 800102a:	e0fa      	b.n	8001222 <__aeabi_ddiv+0x44e>
 800102c:	2301      	movs	r3, #1
 800102e:	431d      	orrs	r5, r3
 8001030:	4a49      	ldr	r2, [pc, #292]	; (8001158 <__aeabi_ddiv+0x384>)
 8001032:	445a      	add	r2, fp
 8001034:	2a00      	cmp	r2, #0
 8001036:	dc00      	bgt.n	800103a <__aeabi_ddiv+0x266>
 8001038:	e0aa      	b.n	8001190 <__aeabi_ddiv+0x3bc>
 800103a:	076b      	lsls	r3, r5, #29
 800103c:	d000      	beq.n	8001040 <__aeabi_ddiv+0x26c>
 800103e:	e13d      	b.n	80012bc <__aeabi_ddiv+0x4e8>
 8001040:	08ed      	lsrs	r5, r5, #3
 8001042:	4643      	mov	r3, r8
 8001044:	01db      	lsls	r3, r3, #7
 8001046:	d506      	bpl.n	8001056 <__aeabi_ddiv+0x282>
 8001048:	4642      	mov	r2, r8
 800104a:	4b44      	ldr	r3, [pc, #272]	; (800115c <__aeabi_ddiv+0x388>)
 800104c:	401a      	ands	r2, r3
 800104e:	4690      	mov	r8, r2
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	00d2      	lsls	r2, r2, #3
 8001054:	445a      	add	r2, fp
 8001056:	4b42      	ldr	r3, [pc, #264]	; (8001160 <__aeabi_ddiv+0x38c>)
 8001058:	429a      	cmp	r2, r3
 800105a:	dd00      	ble.n	800105e <__aeabi_ddiv+0x28a>
 800105c:	e71f      	b.n	8000e9e <__aeabi_ddiv+0xca>
 800105e:	4643      	mov	r3, r8
 8001060:	075b      	lsls	r3, r3, #29
 8001062:	431d      	orrs	r5, r3
 8001064:	4643      	mov	r3, r8
 8001066:	0552      	lsls	r2, r2, #21
 8001068:	025c      	lsls	r4, r3, #9
 800106a:	0b24      	lsrs	r4, r4, #12
 800106c:	0d53      	lsrs	r3, r2, #21
 800106e:	e708      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8001070:	4652      	mov	r2, sl
 8001072:	4322      	orrs	r2, r4
 8001074:	d100      	bne.n	8001078 <__aeabi_ddiv+0x2a4>
 8001076:	e07b      	b.n	8001170 <__aeabi_ddiv+0x39c>
 8001078:	2c00      	cmp	r4, #0
 800107a:	d100      	bne.n	800107e <__aeabi_ddiv+0x2aa>
 800107c:	e0fa      	b.n	8001274 <__aeabi_ddiv+0x4a0>
 800107e:	0020      	movs	r0, r4
 8001080:	f001 fa22 	bl	80024c8 <__clzsi2>
 8001084:	0002      	movs	r2, r0
 8001086:	3a0b      	subs	r2, #11
 8001088:	231d      	movs	r3, #29
 800108a:	0001      	movs	r1, r0
 800108c:	1a9b      	subs	r3, r3, r2
 800108e:	4652      	mov	r2, sl
 8001090:	3908      	subs	r1, #8
 8001092:	40da      	lsrs	r2, r3
 8001094:	408c      	lsls	r4, r1
 8001096:	4314      	orrs	r4, r2
 8001098:	4652      	mov	r2, sl
 800109a:	408a      	lsls	r2, r1
 800109c:	4b31      	ldr	r3, [pc, #196]	; (8001164 <__aeabi_ddiv+0x390>)
 800109e:	4458      	add	r0, fp
 80010a0:	469b      	mov	fp, r3
 80010a2:	4483      	add	fp, r0
 80010a4:	2000      	movs	r0, #0
 80010a6:	e6d5      	b.n	8000e54 <__aeabi_ddiv+0x80>
 80010a8:	464b      	mov	r3, r9
 80010aa:	4323      	orrs	r3, r4
 80010ac:	4698      	mov	r8, r3
 80010ae:	d044      	beq.n	800113a <__aeabi_ddiv+0x366>
 80010b0:	2c00      	cmp	r4, #0
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x2e2>
 80010b4:	e0ce      	b.n	8001254 <__aeabi_ddiv+0x480>
 80010b6:	0020      	movs	r0, r4
 80010b8:	f001 fa06 	bl	80024c8 <__clzsi2>
 80010bc:	0001      	movs	r1, r0
 80010be:	0002      	movs	r2, r0
 80010c0:	390b      	subs	r1, #11
 80010c2:	231d      	movs	r3, #29
 80010c4:	1a5b      	subs	r3, r3, r1
 80010c6:	4649      	mov	r1, r9
 80010c8:	0010      	movs	r0, r2
 80010ca:	40d9      	lsrs	r1, r3
 80010cc:	3808      	subs	r0, #8
 80010ce:	4084      	lsls	r4, r0
 80010d0:	000b      	movs	r3, r1
 80010d2:	464d      	mov	r5, r9
 80010d4:	4323      	orrs	r3, r4
 80010d6:	4698      	mov	r8, r3
 80010d8:	4085      	lsls	r5, r0
 80010da:	4823      	ldr	r0, [pc, #140]	; (8001168 <__aeabi_ddiv+0x394>)
 80010dc:	1a83      	subs	r3, r0, r2
 80010de:	469b      	mov	fp, r3
 80010e0:	2300      	movs	r3, #0
 80010e2:	4699      	mov	r9, r3
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	e69a      	b.n	8000e1e <__aeabi_ddiv+0x4a>
 80010e8:	464b      	mov	r3, r9
 80010ea:	4323      	orrs	r3, r4
 80010ec:	4698      	mov	r8, r3
 80010ee:	d11d      	bne.n	800112c <__aeabi_ddiv+0x358>
 80010f0:	2308      	movs	r3, #8
 80010f2:	4699      	mov	r9, r3
 80010f4:	3b06      	subs	r3, #6
 80010f6:	2500      	movs	r5, #0
 80010f8:	4683      	mov	fp, r0
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	e68f      	b.n	8000e1e <__aeabi_ddiv+0x4a>
 80010fe:	4652      	mov	r2, sl
 8001100:	4322      	orrs	r2, r4
 8001102:	d109      	bne.n	8001118 <__aeabi_ddiv+0x344>
 8001104:	2302      	movs	r3, #2
 8001106:	4649      	mov	r1, r9
 8001108:	4319      	orrs	r1, r3
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <__aeabi_ddiv+0x398>)
 800110c:	4689      	mov	r9, r1
 800110e:	469c      	mov	ip, r3
 8001110:	2400      	movs	r4, #0
 8001112:	2002      	movs	r0, #2
 8001114:	44e3      	add	fp, ip
 8001116:	e69d      	b.n	8000e54 <__aeabi_ddiv+0x80>
 8001118:	2303      	movs	r3, #3
 800111a:	464a      	mov	r2, r9
 800111c:	431a      	orrs	r2, r3
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <__aeabi_ddiv+0x398>)
 8001120:	4691      	mov	r9, r2
 8001122:	469c      	mov	ip, r3
 8001124:	4652      	mov	r2, sl
 8001126:	2003      	movs	r0, #3
 8001128:	44e3      	add	fp, ip
 800112a:	e693      	b.n	8000e54 <__aeabi_ddiv+0x80>
 800112c:	230c      	movs	r3, #12
 800112e:	4699      	mov	r9, r3
 8001130:	3b09      	subs	r3, #9
 8001132:	46a0      	mov	r8, r4
 8001134:	4683      	mov	fp, r0
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	e671      	b.n	8000e1e <__aeabi_ddiv+0x4a>
 800113a:	2304      	movs	r3, #4
 800113c:	4699      	mov	r9, r3
 800113e:	2300      	movs	r3, #0
 8001140:	469b      	mov	fp, r3
 8001142:	3301      	adds	r3, #1
 8001144:	2500      	movs	r5, #0
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	e669      	b.n	8000e1e <__aeabi_ddiv+0x4a>
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	000007ff 	.word	0x000007ff
 8001150:	fffffc01 	.word	0xfffffc01
 8001154:	0800bdb0 	.word	0x0800bdb0
 8001158:	000003ff 	.word	0x000003ff
 800115c:	feffffff 	.word	0xfeffffff
 8001160:	000007fe 	.word	0x000007fe
 8001164:	000003f3 	.word	0x000003f3
 8001168:	fffffc0d 	.word	0xfffffc0d
 800116c:	fffff801 	.word	0xfffff801
 8001170:	4649      	mov	r1, r9
 8001172:	2301      	movs	r3, #1
 8001174:	4319      	orrs	r1, r3
 8001176:	4689      	mov	r9, r1
 8001178:	2400      	movs	r4, #0
 800117a:	2001      	movs	r0, #1
 800117c:	e66a      	b.n	8000e54 <__aeabi_ddiv+0x80>
 800117e:	2300      	movs	r3, #0
 8001180:	2480      	movs	r4, #128	; 0x80
 8001182:	469a      	mov	sl, r3
 8001184:	2500      	movs	r5, #0
 8001186:	4b8a      	ldr	r3, [pc, #552]	; (80013b0 <__aeabi_ddiv+0x5dc>)
 8001188:	0324      	lsls	r4, r4, #12
 800118a:	e67a      	b.n	8000e82 <__aeabi_ddiv+0xae>
 800118c:	2501      	movs	r5, #1
 800118e:	426d      	negs	r5, r5
 8001190:	2301      	movs	r3, #1
 8001192:	1a9b      	subs	r3, r3, r2
 8001194:	2b38      	cmp	r3, #56	; 0x38
 8001196:	dd00      	ble.n	800119a <__aeabi_ddiv+0x3c6>
 8001198:	e670      	b.n	8000e7c <__aeabi_ddiv+0xa8>
 800119a:	2b1f      	cmp	r3, #31
 800119c:	dc00      	bgt.n	80011a0 <__aeabi_ddiv+0x3cc>
 800119e:	e0bf      	b.n	8001320 <__aeabi_ddiv+0x54c>
 80011a0:	211f      	movs	r1, #31
 80011a2:	4249      	negs	r1, r1
 80011a4:	1a8a      	subs	r2, r1, r2
 80011a6:	4641      	mov	r1, r8
 80011a8:	40d1      	lsrs	r1, r2
 80011aa:	000a      	movs	r2, r1
 80011ac:	2b20      	cmp	r3, #32
 80011ae:	d004      	beq.n	80011ba <__aeabi_ddiv+0x3e6>
 80011b0:	4641      	mov	r1, r8
 80011b2:	4b80      	ldr	r3, [pc, #512]	; (80013b4 <__aeabi_ddiv+0x5e0>)
 80011b4:	445b      	add	r3, fp
 80011b6:	4099      	lsls	r1, r3
 80011b8:	430d      	orrs	r5, r1
 80011ba:	1e6b      	subs	r3, r5, #1
 80011bc:	419d      	sbcs	r5, r3
 80011be:	2307      	movs	r3, #7
 80011c0:	432a      	orrs	r2, r5
 80011c2:	001d      	movs	r5, r3
 80011c4:	2400      	movs	r4, #0
 80011c6:	4015      	ands	r5, r2
 80011c8:	4213      	tst	r3, r2
 80011ca:	d100      	bne.n	80011ce <__aeabi_ddiv+0x3fa>
 80011cc:	e0d4      	b.n	8001378 <__aeabi_ddiv+0x5a4>
 80011ce:	210f      	movs	r1, #15
 80011d0:	2300      	movs	r3, #0
 80011d2:	4011      	ands	r1, r2
 80011d4:	2904      	cmp	r1, #4
 80011d6:	d100      	bne.n	80011da <__aeabi_ddiv+0x406>
 80011d8:	e0cb      	b.n	8001372 <__aeabi_ddiv+0x59e>
 80011da:	1d11      	adds	r1, r2, #4
 80011dc:	4291      	cmp	r1, r2
 80011de:	4192      	sbcs	r2, r2
 80011e0:	4252      	negs	r2, r2
 80011e2:	189b      	adds	r3, r3, r2
 80011e4:	000a      	movs	r2, r1
 80011e6:	0219      	lsls	r1, r3, #8
 80011e8:	d400      	bmi.n	80011ec <__aeabi_ddiv+0x418>
 80011ea:	e0c2      	b.n	8001372 <__aeabi_ddiv+0x59e>
 80011ec:	2301      	movs	r3, #1
 80011ee:	2400      	movs	r4, #0
 80011f0:	2500      	movs	r5, #0
 80011f2:	e646      	b.n	8000e82 <__aeabi_ddiv+0xae>
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	4641      	mov	r1, r8
 80011f8:	031b      	lsls	r3, r3, #12
 80011fa:	4219      	tst	r1, r3
 80011fc:	d008      	beq.n	8001210 <__aeabi_ddiv+0x43c>
 80011fe:	421c      	tst	r4, r3
 8001200:	d106      	bne.n	8001210 <__aeabi_ddiv+0x43c>
 8001202:	431c      	orrs	r4, r3
 8001204:	0324      	lsls	r4, r4, #12
 8001206:	46ba      	mov	sl, r7
 8001208:	0015      	movs	r5, r2
 800120a:	4b69      	ldr	r3, [pc, #420]	; (80013b0 <__aeabi_ddiv+0x5dc>)
 800120c:	0b24      	lsrs	r4, r4, #12
 800120e:	e638      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8001210:	2480      	movs	r4, #128	; 0x80
 8001212:	4643      	mov	r3, r8
 8001214:	0324      	lsls	r4, r4, #12
 8001216:	431c      	orrs	r4, r3
 8001218:	0324      	lsls	r4, r4, #12
 800121a:	46b2      	mov	sl, r6
 800121c:	4b64      	ldr	r3, [pc, #400]	; (80013b0 <__aeabi_ddiv+0x5dc>)
 800121e:	0b24      	lsrs	r4, r4, #12
 8001220:	e62f      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8001222:	2b00      	cmp	r3, #0
 8001224:	d100      	bne.n	8001228 <__aeabi_ddiv+0x454>
 8001226:	e703      	b.n	8001030 <__aeabi_ddiv+0x25c>
 8001228:	19a6      	adds	r6, r4, r6
 800122a:	1e68      	subs	r0, r5, #1
 800122c:	42a6      	cmp	r6, r4
 800122e:	d200      	bcs.n	8001232 <__aeabi_ddiv+0x45e>
 8001230:	e08d      	b.n	800134e <__aeabi_ddiv+0x57a>
 8001232:	428e      	cmp	r6, r1
 8001234:	d200      	bcs.n	8001238 <__aeabi_ddiv+0x464>
 8001236:	e0a3      	b.n	8001380 <__aeabi_ddiv+0x5ac>
 8001238:	d100      	bne.n	800123c <__aeabi_ddiv+0x468>
 800123a:	e0b3      	b.n	80013a4 <__aeabi_ddiv+0x5d0>
 800123c:	0005      	movs	r5, r0
 800123e:	e6f5      	b.n	800102c <__aeabi_ddiv+0x258>
 8001240:	42aa      	cmp	r2, r5
 8001242:	d900      	bls.n	8001246 <__aeabi_ddiv+0x472>
 8001244:	e639      	b.n	8000eba <__aeabi_ddiv+0xe6>
 8001246:	4643      	mov	r3, r8
 8001248:	07de      	lsls	r6, r3, #31
 800124a:	0858      	lsrs	r0, r3, #1
 800124c:	086b      	lsrs	r3, r5, #1
 800124e:	431e      	orrs	r6, r3
 8001250:	07ed      	lsls	r5, r5, #31
 8001252:	e639      	b.n	8000ec8 <__aeabi_ddiv+0xf4>
 8001254:	4648      	mov	r0, r9
 8001256:	f001 f937 	bl	80024c8 <__clzsi2>
 800125a:	0001      	movs	r1, r0
 800125c:	0002      	movs	r2, r0
 800125e:	3115      	adds	r1, #21
 8001260:	3220      	adds	r2, #32
 8001262:	291c      	cmp	r1, #28
 8001264:	dc00      	bgt.n	8001268 <__aeabi_ddiv+0x494>
 8001266:	e72c      	b.n	80010c2 <__aeabi_ddiv+0x2ee>
 8001268:	464b      	mov	r3, r9
 800126a:	3808      	subs	r0, #8
 800126c:	4083      	lsls	r3, r0
 800126e:	2500      	movs	r5, #0
 8001270:	4698      	mov	r8, r3
 8001272:	e732      	b.n	80010da <__aeabi_ddiv+0x306>
 8001274:	f001 f928 	bl	80024c8 <__clzsi2>
 8001278:	0003      	movs	r3, r0
 800127a:	001a      	movs	r2, r3
 800127c:	3215      	adds	r2, #21
 800127e:	3020      	adds	r0, #32
 8001280:	2a1c      	cmp	r2, #28
 8001282:	dc00      	bgt.n	8001286 <__aeabi_ddiv+0x4b2>
 8001284:	e700      	b.n	8001088 <__aeabi_ddiv+0x2b4>
 8001286:	4654      	mov	r4, sl
 8001288:	3b08      	subs	r3, #8
 800128a:	2200      	movs	r2, #0
 800128c:	409c      	lsls	r4, r3
 800128e:	e705      	b.n	800109c <__aeabi_ddiv+0x2c8>
 8001290:	1936      	adds	r6, r6, r4
 8001292:	3b01      	subs	r3, #1
 8001294:	42b4      	cmp	r4, r6
 8001296:	d900      	bls.n	800129a <__aeabi_ddiv+0x4c6>
 8001298:	e6a6      	b.n	8000fe8 <__aeabi_ddiv+0x214>
 800129a:	42b2      	cmp	r2, r6
 800129c:	d800      	bhi.n	80012a0 <__aeabi_ddiv+0x4cc>
 800129e:	e6a3      	b.n	8000fe8 <__aeabi_ddiv+0x214>
 80012a0:	1e83      	subs	r3, r0, #2
 80012a2:	1936      	adds	r6, r6, r4
 80012a4:	e6a0      	b.n	8000fe8 <__aeabi_ddiv+0x214>
 80012a6:	1909      	adds	r1, r1, r4
 80012a8:	3d01      	subs	r5, #1
 80012aa:	428c      	cmp	r4, r1
 80012ac:	d900      	bls.n	80012b0 <__aeabi_ddiv+0x4dc>
 80012ae:	e68d      	b.n	8000fcc <__aeabi_ddiv+0x1f8>
 80012b0:	428a      	cmp	r2, r1
 80012b2:	d800      	bhi.n	80012b6 <__aeabi_ddiv+0x4e2>
 80012b4:	e68a      	b.n	8000fcc <__aeabi_ddiv+0x1f8>
 80012b6:	1e85      	subs	r5, r0, #2
 80012b8:	1909      	adds	r1, r1, r4
 80012ba:	e687      	b.n	8000fcc <__aeabi_ddiv+0x1f8>
 80012bc:	230f      	movs	r3, #15
 80012be:	402b      	ands	r3, r5
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x4f2>
 80012c4:	e6bc      	b.n	8001040 <__aeabi_ddiv+0x26c>
 80012c6:	2305      	movs	r3, #5
 80012c8:	425b      	negs	r3, r3
 80012ca:	42ab      	cmp	r3, r5
 80012cc:	419b      	sbcs	r3, r3
 80012ce:	3504      	adds	r5, #4
 80012d0:	425b      	negs	r3, r3
 80012d2:	08ed      	lsrs	r5, r5, #3
 80012d4:	4498      	add	r8, r3
 80012d6:	e6b4      	b.n	8001042 <__aeabi_ddiv+0x26e>
 80012d8:	42af      	cmp	r7, r5
 80012da:	d900      	bls.n	80012de <__aeabi_ddiv+0x50a>
 80012dc:	e660      	b.n	8000fa0 <__aeabi_ddiv+0x1cc>
 80012de:	4282      	cmp	r2, r0
 80012e0:	d804      	bhi.n	80012ec <__aeabi_ddiv+0x518>
 80012e2:	d000      	beq.n	80012e6 <__aeabi_ddiv+0x512>
 80012e4:	e65c      	b.n	8000fa0 <__aeabi_ddiv+0x1cc>
 80012e6:	42ae      	cmp	r6, r5
 80012e8:	d800      	bhi.n	80012ec <__aeabi_ddiv+0x518>
 80012ea:	e659      	b.n	8000fa0 <__aeabi_ddiv+0x1cc>
 80012ec:	2302      	movs	r3, #2
 80012ee:	425b      	negs	r3, r3
 80012f0:	469c      	mov	ip, r3
 80012f2:	9b00      	ldr	r3, [sp, #0]
 80012f4:	44e0      	add	r8, ip
 80012f6:	469c      	mov	ip, r3
 80012f8:	4465      	add	r5, ip
 80012fa:	429d      	cmp	r5, r3
 80012fc:	419b      	sbcs	r3, r3
 80012fe:	425b      	negs	r3, r3
 8001300:	191b      	adds	r3, r3, r4
 8001302:	18c0      	adds	r0, r0, r3
 8001304:	e64d      	b.n	8000fa2 <__aeabi_ddiv+0x1ce>
 8001306:	428a      	cmp	r2, r1
 8001308:	d800      	bhi.n	800130c <__aeabi_ddiv+0x538>
 800130a:	e60e      	b.n	8000f2a <__aeabi_ddiv+0x156>
 800130c:	1e83      	subs	r3, r0, #2
 800130e:	1909      	adds	r1, r1, r4
 8001310:	e60b      	b.n	8000f2a <__aeabi_ddiv+0x156>
 8001312:	428a      	cmp	r2, r1
 8001314:	d800      	bhi.n	8001318 <__aeabi_ddiv+0x544>
 8001316:	e5f4      	b.n	8000f02 <__aeabi_ddiv+0x12e>
 8001318:	1e83      	subs	r3, r0, #2
 800131a:	4698      	mov	r8, r3
 800131c:	1909      	adds	r1, r1, r4
 800131e:	e5f0      	b.n	8000f02 <__aeabi_ddiv+0x12e>
 8001320:	4925      	ldr	r1, [pc, #148]	; (80013b8 <__aeabi_ddiv+0x5e4>)
 8001322:	0028      	movs	r0, r5
 8001324:	4459      	add	r1, fp
 8001326:	408d      	lsls	r5, r1
 8001328:	4642      	mov	r2, r8
 800132a:	408a      	lsls	r2, r1
 800132c:	1e69      	subs	r1, r5, #1
 800132e:	418d      	sbcs	r5, r1
 8001330:	4641      	mov	r1, r8
 8001332:	40d8      	lsrs	r0, r3
 8001334:	40d9      	lsrs	r1, r3
 8001336:	4302      	orrs	r2, r0
 8001338:	432a      	orrs	r2, r5
 800133a:	000b      	movs	r3, r1
 800133c:	0751      	lsls	r1, r2, #29
 800133e:	d100      	bne.n	8001342 <__aeabi_ddiv+0x56e>
 8001340:	e751      	b.n	80011e6 <__aeabi_ddiv+0x412>
 8001342:	210f      	movs	r1, #15
 8001344:	4011      	ands	r1, r2
 8001346:	2904      	cmp	r1, #4
 8001348:	d000      	beq.n	800134c <__aeabi_ddiv+0x578>
 800134a:	e746      	b.n	80011da <__aeabi_ddiv+0x406>
 800134c:	e74b      	b.n	80011e6 <__aeabi_ddiv+0x412>
 800134e:	0005      	movs	r5, r0
 8001350:	428e      	cmp	r6, r1
 8001352:	d000      	beq.n	8001356 <__aeabi_ddiv+0x582>
 8001354:	e66a      	b.n	800102c <__aeabi_ddiv+0x258>
 8001356:	9a00      	ldr	r2, [sp, #0]
 8001358:	4293      	cmp	r3, r2
 800135a:	d000      	beq.n	800135e <__aeabi_ddiv+0x58a>
 800135c:	e666      	b.n	800102c <__aeabi_ddiv+0x258>
 800135e:	e667      	b.n	8001030 <__aeabi_ddiv+0x25c>
 8001360:	4a16      	ldr	r2, [pc, #88]	; (80013bc <__aeabi_ddiv+0x5e8>)
 8001362:	445a      	add	r2, fp
 8001364:	2a00      	cmp	r2, #0
 8001366:	dc00      	bgt.n	800136a <__aeabi_ddiv+0x596>
 8001368:	e710      	b.n	800118c <__aeabi_ddiv+0x3b8>
 800136a:	2301      	movs	r3, #1
 800136c:	2500      	movs	r5, #0
 800136e:	4498      	add	r8, r3
 8001370:	e667      	b.n	8001042 <__aeabi_ddiv+0x26e>
 8001372:	075d      	lsls	r5, r3, #29
 8001374:	025b      	lsls	r3, r3, #9
 8001376:	0b1c      	lsrs	r4, r3, #12
 8001378:	08d2      	lsrs	r2, r2, #3
 800137a:	2300      	movs	r3, #0
 800137c:	4315      	orrs	r5, r2
 800137e:	e580      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8001380:	9800      	ldr	r0, [sp, #0]
 8001382:	3d02      	subs	r5, #2
 8001384:	0042      	lsls	r2, r0, #1
 8001386:	4282      	cmp	r2, r0
 8001388:	41bf      	sbcs	r7, r7
 800138a:	427f      	negs	r7, r7
 800138c:	193c      	adds	r4, r7, r4
 800138e:	1936      	adds	r6, r6, r4
 8001390:	9200      	str	r2, [sp, #0]
 8001392:	e7dd      	b.n	8001350 <__aeabi_ddiv+0x57c>
 8001394:	2480      	movs	r4, #128	; 0x80
 8001396:	4643      	mov	r3, r8
 8001398:	0324      	lsls	r4, r4, #12
 800139a:	431c      	orrs	r4, r3
 800139c:	0324      	lsls	r4, r4, #12
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <__aeabi_ddiv+0x5dc>)
 80013a0:	0b24      	lsrs	r4, r4, #12
 80013a2:	e56e      	b.n	8000e82 <__aeabi_ddiv+0xae>
 80013a4:	9a00      	ldr	r2, [sp, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d3ea      	bcc.n	8001380 <__aeabi_ddiv+0x5ac>
 80013aa:	0005      	movs	r5, r0
 80013ac:	e7d3      	b.n	8001356 <__aeabi_ddiv+0x582>
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	000007ff 	.word	0x000007ff
 80013b4:	0000043e 	.word	0x0000043e
 80013b8:	0000041e 	.word	0x0000041e
 80013bc:	000003ff 	.word	0x000003ff

080013c0 <__eqdf2>:
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	464e      	mov	r6, r9
 80013c4:	4645      	mov	r5, r8
 80013c6:	46de      	mov	lr, fp
 80013c8:	4657      	mov	r7, sl
 80013ca:	4690      	mov	r8, r2
 80013cc:	b5e0      	push	{r5, r6, r7, lr}
 80013ce:	0017      	movs	r7, r2
 80013d0:	031a      	lsls	r2, r3, #12
 80013d2:	0b12      	lsrs	r2, r2, #12
 80013d4:	0005      	movs	r5, r0
 80013d6:	4684      	mov	ip, r0
 80013d8:	4819      	ldr	r0, [pc, #100]	; (8001440 <__eqdf2+0x80>)
 80013da:	030e      	lsls	r6, r1, #12
 80013dc:	004c      	lsls	r4, r1, #1
 80013de:	4691      	mov	r9, r2
 80013e0:	005a      	lsls	r2, r3, #1
 80013e2:	0fdb      	lsrs	r3, r3, #31
 80013e4:	469b      	mov	fp, r3
 80013e6:	0b36      	lsrs	r6, r6, #12
 80013e8:	0d64      	lsrs	r4, r4, #21
 80013ea:	0fc9      	lsrs	r1, r1, #31
 80013ec:	0d52      	lsrs	r2, r2, #21
 80013ee:	4284      	cmp	r4, r0
 80013f0:	d019      	beq.n	8001426 <__eqdf2+0x66>
 80013f2:	4282      	cmp	r2, r0
 80013f4:	d010      	beq.n	8001418 <__eqdf2+0x58>
 80013f6:	2001      	movs	r0, #1
 80013f8:	4294      	cmp	r4, r2
 80013fa:	d10e      	bne.n	800141a <__eqdf2+0x5a>
 80013fc:	454e      	cmp	r6, r9
 80013fe:	d10c      	bne.n	800141a <__eqdf2+0x5a>
 8001400:	2001      	movs	r0, #1
 8001402:	45c4      	cmp	ip, r8
 8001404:	d109      	bne.n	800141a <__eqdf2+0x5a>
 8001406:	4559      	cmp	r1, fp
 8001408:	d017      	beq.n	800143a <__eqdf2+0x7a>
 800140a:	2c00      	cmp	r4, #0
 800140c:	d105      	bne.n	800141a <__eqdf2+0x5a>
 800140e:	0030      	movs	r0, r6
 8001410:	4328      	orrs	r0, r5
 8001412:	1e43      	subs	r3, r0, #1
 8001414:	4198      	sbcs	r0, r3
 8001416:	e000      	b.n	800141a <__eqdf2+0x5a>
 8001418:	2001      	movs	r0, #1
 800141a:	bcf0      	pop	{r4, r5, r6, r7}
 800141c:	46bb      	mov	fp, r7
 800141e:	46b2      	mov	sl, r6
 8001420:	46a9      	mov	r9, r5
 8001422:	46a0      	mov	r8, r4
 8001424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001426:	0033      	movs	r3, r6
 8001428:	2001      	movs	r0, #1
 800142a:	432b      	orrs	r3, r5
 800142c:	d1f5      	bne.n	800141a <__eqdf2+0x5a>
 800142e:	42a2      	cmp	r2, r4
 8001430:	d1f3      	bne.n	800141a <__eqdf2+0x5a>
 8001432:	464b      	mov	r3, r9
 8001434:	433b      	orrs	r3, r7
 8001436:	d1f0      	bne.n	800141a <__eqdf2+0x5a>
 8001438:	e7e2      	b.n	8001400 <__eqdf2+0x40>
 800143a:	2000      	movs	r0, #0
 800143c:	e7ed      	b.n	800141a <__eqdf2+0x5a>
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	000007ff 	.word	0x000007ff

08001444 <__gedf2>:
 8001444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001446:	4647      	mov	r7, r8
 8001448:	46ce      	mov	lr, r9
 800144a:	0004      	movs	r4, r0
 800144c:	0018      	movs	r0, r3
 800144e:	0016      	movs	r6, r2
 8001450:	031b      	lsls	r3, r3, #12
 8001452:	0b1b      	lsrs	r3, r3, #12
 8001454:	4d2d      	ldr	r5, [pc, #180]	; (800150c <__gedf2+0xc8>)
 8001456:	004a      	lsls	r2, r1, #1
 8001458:	4699      	mov	r9, r3
 800145a:	b580      	push	{r7, lr}
 800145c:	0043      	lsls	r3, r0, #1
 800145e:	030f      	lsls	r7, r1, #12
 8001460:	46a4      	mov	ip, r4
 8001462:	46b0      	mov	r8, r6
 8001464:	0b3f      	lsrs	r7, r7, #12
 8001466:	0d52      	lsrs	r2, r2, #21
 8001468:	0fc9      	lsrs	r1, r1, #31
 800146a:	0d5b      	lsrs	r3, r3, #21
 800146c:	0fc0      	lsrs	r0, r0, #31
 800146e:	42aa      	cmp	r2, r5
 8001470:	d021      	beq.n	80014b6 <__gedf2+0x72>
 8001472:	42ab      	cmp	r3, r5
 8001474:	d013      	beq.n	800149e <__gedf2+0x5a>
 8001476:	2a00      	cmp	r2, #0
 8001478:	d122      	bne.n	80014c0 <__gedf2+0x7c>
 800147a:	433c      	orrs	r4, r7
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <__gedf2+0x42>
 8001480:	464d      	mov	r5, r9
 8001482:	432e      	orrs	r6, r5
 8001484:	d022      	beq.n	80014cc <__gedf2+0x88>
 8001486:	2c00      	cmp	r4, #0
 8001488:	d010      	beq.n	80014ac <__gedf2+0x68>
 800148a:	4281      	cmp	r1, r0
 800148c:	d022      	beq.n	80014d4 <__gedf2+0x90>
 800148e:	2002      	movs	r0, #2
 8001490:	3901      	subs	r1, #1
 8001492:	4008      	ands	r0, r1
 8001494:	3801      	subs	r0, #1
 8001496:	bcc0      	pop	{r6, r7}
 8001498:	46b9      	mov	r9, r7
 800149a:	46b0      	mov	r8, r6
 800149c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149e:	464d      	mov	r5, r9
 80014a0:	432e      	orrs	r6, r5
 80014a2:	d129      	bne.n	80014f8 <__gedf2+0xb4>
 80014a4:	2a00      	cmp	r2, #0
 80014a6:	d1f0      	bne.n	800148a <__gedf2+0x46>
 80014a8:	433c      	orrs	r4, r7
 80014aa:	d1ee      	bne.n	800148a <__gedf2+0x46>
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d1f2      	bne.n	8001496 <__gedf2+0x52>
 80014b0:	2001      	movs	r0, #1
 80014b2:	4240      	negs	r0, r0
 80014b4:	e7ef      	b.n	8001496 <__gedf2+0x52>
 80014b6:	003d      	movs	r5, r7
 80014b8:	4325      	orrs	r5, r4
 80014ba:	d11d      	bne.n	80014f8 <__gedf2+0xb4>
 80014bc:	4293      	cmp	r3, r2
 80014be:	d0ee      	beq.n	800149e <__gedf2+0x5a>
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1e2      	bne.n	800148a <__gedf2+0x46>
 80014c4:	464c      	mov	r4, r9
 80014c6:	4326      	orrs	r6, r4
 80014c8:	d1df      	bne.n	800148a <__gedf2+0x46>
 80014ca:	e7e0      	b.n	800148e <__gedf2+0x4a>
 80014cc:	2000      	movs	r0, #0
 80014ce:	2c00      	cmp	r4, #0
 80014d0:	d0e1      	beq.n	8001496 <__gedf2+0x52>
 80014d2:	e7dc      	b.n	800148e <__gedf2+0x4a>
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dc0a      	bgt.n	80014ee <__gedf2+0xaa>
 80014d8:	dbe8      	blt.n	80014ac <__gedf2+0x68>
 80014da:	454f      	cmp	r7, r9
 80014dc:	d8d7      	bhi.n	800148e <__gedf2+0x4a>
 80014de:	d00e      	beq.n	80014fe <__gedf2+0xba>
 80014e0:	2000      	movs	r0, #0
 80014e2:	454f      	cmp	r7, r9
 80014e4:	d2d7      	bcs.n	8001496 <__gedf2+0x52>
 80014e6:	2900      	cmp	r1, #0
 80014e8:	d0e2      	beq.n	80014b0 <__gedf2+0x6c>
 80014ea:	0008      	movs	r0, r1
 80014ec:	e7d3      	b.n	8001496 <__gedf2+0x52>
 80014ee:	4243      	negs	r3, r0
 80014f0:	4158      	adcs	r0, r3
 80014f2:	0040      	lsls	r0, r0, #1
 80014f4:	3801      	subs	r0, #1
 80014f6:	e7ce      	b.n	8001496 <__gedf2+0x52>
 80014f8:	2002      	movs	r0, #2
 80014fa:	4240      	negs	r0, r0
 80014fc:	e7cb      	b.n	8001496 <__gedf2+0x52>
 80014fe:	45c4      	cmp	ip, r8
 8001500:	d8c5      	bhi.n	800148e <__gedf2+0x4a>
 8001502:	2000      	movs	r0, #0
 8001504:	45c4      	cmp	ip, r8
 8001506:	d2c6      	bcs.n	8001496 <__gedf2+0x52>
 8001508:	e7ed      	b.n	80014e6 <__gedf2+0xa2>
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	000007ff 	.word	0x000007ff

08001510 <__ledf2>:
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	4647      	mov	r7, r8
 8001514:	46ce      	mov	lr, r9
 8001516:	0004      	movs	r4, r0
 8001518:	0018      	movs	r0, r3
 800151a:	0016      	movs	r6, r2
 800151c:	031b      	lsls	r3, r3, #12
 800151e:	0b1b      	lsrs	r3, r3, #12
 8001520:	4d2c      	ldr	r5, [pc, #176]	; (80015d4 <__ledf2+0xc4>)
 8001522:	004a      	lsls	r2, r1, #1
 8001524:	4699      	mov	r9, r3
 8001526:	b580      	push	{r7, lr}
 8001528:	0043      	lsls	r3, r0, #1
 800152a:	030f      	lsls	r7, r1, #12
 800152c:	46a4      	mov	ip, r4
 800152e:	46b0      	mov	r8, r6
 8001530:	0b3f      	lsrs	r7, r7, #12
 8001532:	0d52      	lsrs	r2, r2, #21
 8001534:	0fc9      	lsrs	r1, r1, #31
 8001536:	0d5b      	lsrs	r3, r3, #21
 8001538:	0fc0      	lsrs	r0, r0, #31
 800153a:	42aa      	cmp	r2, r5
 800153c:	d00d      	beq.n	800155a <__ledf2+0x4a>
 800153e:	42ab      	cmp	r3, r5
 8001540:	d010      	beq.n	8001564 <__ledf2+0x54>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d127      	bne.n	8001596 <__ledf2+0x86>
 8001546:	433c      	orrs	r4, r7
 8001548:	2b00      	cmp	r3, #0
 800154a:	d111      	bne.n	8001570 <__ledf2+0x60>
 800154c:	464d      	mov	r5, r9
 800154e:	432e      	orrs	r6, r5
 8001550:	d10e      	bne.n	8001570 <__ledf2+0x60>
 8001552:	2000      	movs	r0, #0
 8001554:	2c00      	cmp	r4, #0
 8001556:	d015      	beq.n	8001584 <__ledf2+0x74>
 8001558:	e00e      	b.n	8001578 <__ledf2+0x68>
 800155a:	003d      	movs	r5, r7
 800155c:	4325      	orrs	r5, r4
 800155e:	d110      	bne.n	8001582 <__ledf2+0x72>
 8001560:	4293      	cmp	r3, r2
 8001562:	d118      	bne.n	8001596 <__ledf2+0x86>
 8001564:	464d      	mov	r5, r9
 8001566:	432e      	orrs	r6, r5
 8001568:	d10b      	bne.n	8001582 <__ledf2+0x72>
 800156a:	2a00      	cmp	r2, #0
 800156c:	d102      	bne.n	8001574 <__ledf2+0x64>
 800156e:	433c      	orrs	r4, r7
 8001570:	2c00      	cmp	r4, #0
 8001572:	d00b      	beq.n	800158c <__ledf2+0x7c>
 8001574:	4281      	cmp	r1, r0
 8001576:	d014      	beq.n	80015a2 <__ledf2+0x92>
 8001578:	2002      	movs	r0, #2
 800157a:	3901      	subs	r1, #1
 800157c:	4008      	ands	r0, r1
 800157e:	3801      	subs	r0, #1
 8001580:	e000      	b.n	8001584 <__ledf2+0x74>
 8001582:	2002      	movs	r0, #2
 8001584:	bcc0      	pop	{r6, r7}
 8001586:	46b9      	mov	r9, r7
 8001588:	46b0      	mov	r8, r6
 800158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158c:	2800      	cmp	r0, #0
 800158e:	d1f9      	bne.n	8001584 <__ledf2+0x74>
 8001590:	2001      	movs	r0, #1
 8001592:	4240      	negs	r0, r0
 8001594:	e7f6      	b.n	8001584 <__ledf2+0x74>
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ec      	bne.n	8001574 <__ledf2+0x64>
 800159a:	464c      	mov	r4, r9
 800159c:	4326      	orrs	r6, r4
 800159e:	d1e9      	bne.n	8001574 <__ledf2+0x64>
 80015a0:	e7ea      	b.n	8001578 <__ledf2+0x68>
 80015a2:	429a      	cmp	r2, r3
 80015a4:	dd04      	ble.n	80015b0 <__ledf2+0xa0>
 80015a6:	4243      	negs	r3, r0
 80015a8:	4158      	adcs	r0, r3
 80015aa:	0040      	lsls	r0, r0, #1
 80015ac:	3801      	subs	r0, #1
 80015ae:	e7e9      	b.n	8001584 <__ledf2+0x74>
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbeb      	blt.n	800158c <__ledf2+0x7c>
 80015b4:	454f      	cmp	r7, r9
 80015b6:	d8df      	bhi.n	8001578 <__ledf2+0x68>
 80015b8:	d006      	beq.n	80015c8 <__ledf2+0xb8>
 80015ba:	2000      	movs	r0, #0
 80015bc:	454f      	cmp	r7, r9
 80015be:	d2e1      	bcs.n	8001584 <__ledf2+0x74>
 80015c0:	2900      	cmp	r1, #0
 80015c2:	d0e5      	beq.n	8001590 <__ledf2+0x80>
 80015c4:	0008      	movs	r0, r1
 80015c6:	e7dd      	b.n	8001584 <__ledf2+0x74>
 80015c8:	45c4      	cmp	ip, r8
 80015ca:	d8d5      	bhi.n	8001578 <__ledf2+0x68>
 80015cc:	2000      	movs	r0, #0
 80015ce:	45c4      	cmp	ip, r8
 80015d0:	d2d8      	bcs.n	8001584 <__ledf2+0x74>
 80015d2:	e7f5      	b.n	80015c0 <__ledf2+0xb0>
 80015d4:	000007ff 	.word	0x000007ff

080015d8 <__aeabi_dmul>:
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	4657      	mov	r7, sl
 80015dc:	464e      	mov	r6, r9
 80015de:	4645      	mov	r5, r8
 80015e0:	46de      	mov	lr, fp
 80015e2:	b5e0      	push	{r5, r6, r7, lr}
 80015e4:	4698      	mov	r8, r3
 80015e6:	030c      	lsls	r4, r1, #12
 80015e8:	004b      	lsls	r3, r1, #1
 80015ea:	0006      	movs	r6, r0
 80015ec:	4692      	mov	sl, r2
 80015ee:	b087      	sub	sp, #28
 80015f0:	0b24      	lsrs	r4, r4, #12
 80015f2:	0d5b      	lsrs	r3, r3, #21
 80015f4:	0fcf      	lsrs	r7, r1, #31
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d100      	bne.n	80015fc <__aeabi_dmul+0x24>
 80015fa:	e15c      	b.n	80018b6 <__aeabi_dmul+0x2de>
 80015fc:	4ad9      	ldr	r2, [pc, #868]	; (8001964 <__aeabi_dmul+0x38c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d100      	bne.n	8001604 <__aeabi_dmul+0x2c>
 8001602:	e175      	b.n	80018f0 <__aeabi_dmul+0x318>
 8001604:	0f42      	lsrs	r2, r0, #29
 8001606:	00e4      	lsls	r4, r4, #3
 8001608:	4314      	orrs	r4, r2
 800160a:	2280      	movs	r2, #128	; 0x80
 800160c:	0412      	lsls	r2, r2, #16
 800160e:	4314      	orrs	r4, r2
 8001610:	4ad5      	ldr	r2, [pc, #852]	; (8001968 <__aeabi_dmul+0x390>)
 8001612:	00c5      	lsls	r5, r0, #3
 8001614:	4694      	mov	ip, r2
 8001616:	4463      	add	r3, ip
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2300      	movs	r3, #0
 800161c:	4699      	mov	r9, r3
 800161e:	469b      	mov	fp, r3
 8001620:	4643      	mov	r3, r8
 8001622:	4642      	mov	r2, r8
 8001624:	031e      	lsls	r6, r3, #12
 8001626:	0fd2      	lsrs	r2, r2, #31
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4650      	mov	r0, sl
 800162c:	4690      	mov	r8, r2
 800162e:	0b36      	lsrs	r6, r6, #12
 8001630:	0d5b      	lsrs	r3, r3, #21
 8001632:	d100      	bne.n	8001636 <__aeabi_dmul+0x5e>
 8001634:	e120      	b.n	8001878 <__aeabi_dmul+0x2a0>
 8001636:	4acb      	ldr	r2, [pc, #812]	; (8001964 <__aeabi_dmul+0x38c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x66>
 800163c:	e162      	b.n	8001904 <__aeabi_dmul+0x32c>
 800163e:	49ca      	ldr	r1, [pc, #808]	; (8001968 <__aeabi_dmul+0x390>)
 8001640:	0f42      	lsrs	r2, r0, #29
 8001642:	468c      	mov	ip, r1
 8001644:	9900      	ldr	r1, [sp, #0]
 8001646:	4463      	add	r3, ip
 8001648:	00f6      	lsls	r6, r6, #3
 800164a:	468c      	mov	ip, r1
 800164c:	4316      	orrs	r6, r2
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	449c      	add	ip, r3
 8001652:	0412      	lsls	r2, r2, #16
 8001654:	4663      	mov	r3, ip
 8001656:	4316      	orrs	r6, r2
 8001658:	00c2      	lsls	r2, r0, #3
 800165a:	2000      	movs	r0, #0
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	9900      	ldr	r1, [sp, #0]
 8001660:	4643      	mov	r3, r8
 8001662:	3101      	adds	r1, #1
 8001664:	468c      	mov	ip, r1
 8001666:	4649      	mov	r1, r9
 8001668:	407b      	eors	r3, r7
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	290f      	cmp	r1, #15
 800166e:	d826      	bhi.n	80016be <__aeabi_dmul+0xe6>
 8001670:	4bbe      	ldr	r3, [pc, #760]	; (800196c <__aeabi_dmul+0x394>)
 8001672:	0089      	lsls	r1, r1, #2
 8001674:	5859      	ldr	r1, [r3, r1]
 8001676:	468f      	mov	pc, r1
 8001678:	4643      	mov	r3, r8
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	0034      	movs	r4, r6
 800167e:	0015      	movs	r5, r2
 8001680:	4683      	mov	fp, r0
 8001682:	465b      	mov	r3, fp
 8001684:	2b02      	cmp	r3, #2
 8001686:	d016      	beq.n	80016b6 <__aeabi_dmul+0xde>
 8001688:	2b03      	cmp	r3, #3
 800168a:	d100      	bne.n	800168e <__aeabi_dmul+0xb6>
 800168c:	e203      	b.n	8001a96 <__aeabi_dmul+0x4be>
 800168e:	2b01      	cmp	r3, #1
 8001690:	d000      	beq.n	8001694 <__aeabi_dmul+0xbc>
 8001692:	e0cd      	b.n	8001830 <__aeabi_dmul+0x258>
 8001694:	2200      	movs	r2, #0
 8001696:	2400      	movs	r4, #0
 8001698:	2500      	movs	r5, #0
 800169a:	9b01      	ldr	r3, [sp, #4]
 800169c:	0512      	lsls	r2, r2, #20
 800169e:	4322      	orrs	r2, r4
 80016a0:	07db      	lsls	r3, r3, #31
 80016a2:	431a      	orrs	r2, r3
 80016a4:	0028      	movs	r0, r5
 80016a6:	0011      	movs	r1, r2
 80016a8:	b007      	add	sp, #28
 80016aa:	bcf0      	pop	{r4, r5, r6, r7}
 80016ac:	46bb      	mov	fp, r7
 80016ae:	46b2      	mov	sl, r6
 80016b0:	46a9      	mov	r9, r5
 80016b2:	46a0      	mov	r8, r4
 80016b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b6:	2400      	movs	r4, #0
 80016b8:	2500      	movs	r5, #0
 80016ba:	4aaa      	ldr	r2, [pc, #680]	; (8001964 <__aeabi_dmul+0x38c>)
 80016bc:	e7ed      	b.n	800169a <__aeabi_dmul+0xc2>
 80016be:	0c28      	lsrs	r0, r5, #16
 80016c0:	042d      	lsls	r5, r5, #16
 80016c2:	0c2d      	lsrs	r5, r5, #16
 80016c4:	002b      	movs	r3, r5
 80016c6:	0c11      	lsrs	r1, r2, #16
 80016c8:	0412      	lsls	r2, r2, #16
 80016ca:	0c12      	lsrs	r2, r2, #16
 80016cc:	4353      	muls	r3, r2
 80016ce:	4698      	mov	r8, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	002f      	movs	r7, r5
 80016d4:	4343      	muls	r3, r0
 80016d6:	4699      	mov	r9, r3
 80016d8:	434f      	muls	r7, r1
 80016da:	444f      	add	r7, r9
 80016dc:	46bb      	mov	fp, r7
 80016de:	4647      	mov	r7, r8
 80016e0:	000b      	movs	r3, r1
 80016e2:	0c3f      	lsrs	r7, r7, #16
 80016e4:	46ba      	mov	sl, r7
 80016e6:	4343      	muls	r3, r0
 80016e8:	44da      	add	sl, fp
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	45d1      	cmp	r9, sl
 80016ee:	d904      	bls.n	80016fa <__aeabi_dmul+0x122>
 80016f0:	2780      	movs	r7, #128	; 0x80
 80016f2:	027f      	lsls	r7, r7, #9
 80016f4:	46b9      	mov	r9, r7
 80016f6:	444b      	add	r3, r9
 80016f8:	9302      	str	r3, [sp, #8]
 80016fa:	4653      	mov	r3, sl
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	469b      	mov	fp, r3
 8001700:	4653      	mov	r3, sl
 8001702:	041f      	lsls	r7, r3, #16
 8001704:	4643      	mov	r3, r8
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	0c1b      	lsrs	r3, r3, #16
 800170a:	4698      	mov	r8, r3
 800170c:	003b      	movs	r3, r7
 800170e:	4443      	add	r3, r8
 8001710:	9304      	str	r3, [sp, #16]
 8001712:	0c33      	lsrs	r3, r6, #16
 8001714:	0436      	lsls	r6, r6, #16
 8001716:	0c36      	lsrs	r6, r6, #16
 8001718:	4698      	mov	r8, r3
 800171a:	0033      	movs	r3, r6
 800171c:	4343      	muls	r3, r0
 800171e:	4699      	mov	r9, r3
 8001720:	4643      	mov	r3, r8
 8001722:	4343      	muls	r3, r0
 8001724:	002f      	movs	r7, r5
 8001726:	469a      	mov	sl, r3
 8001728:	4643      	mov	r3, r8
 800172a:	4377      	muls	r7, r6
 800172c:	435d      	muls	r5, r3
 800172e:	0c38      	lsrs	r0, r7, #16
 8001730:	444d      	add	r5, r9
 8001732:	1945      	adds	r5, r0, r5
 8001734:	45a9      	cmp	r9, r5
 8001736:	d903      	bls.n	8001740 <__aeabi_dmul+0x168>
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	025b      	lsls	r3, r3, #9
 800173c:	4699      	mov	r9, r3
 800173e:	44ca      	add	sl, r9
 8001740:	043f      	lsls	r7, r7, #16
 8001742:	0c28      	lsrs	r0, r5, #16
 8001744:	0c3f      	lsrs	r7, r7, #16
 8001746:	042d      	lsls	r5, r5, #16
 8001748:	19ed      	adds	r5, r5, r7
 800174a:	0c27      	lsrs	r7, r4, #16
 800174c:	0424      	lsls	r4, r4, #16
 800174e:	0c24      	lsrs	r4, r4, #16
 8001750:	0003      	movs	r3, r0
 8001752:	0020      	movs	r0, r4
 8001754:	4350      	muls	r0, r2
 8001756:	437a      	muls	r2, r7
 8001758:	4691      	mov	r9, r2
 800175a:	003a      	movs	r2, r7
 800175c:	4453      	add	r3, sl
 800175e:	9305      	str	r3, [sp, #20]
 8001760:	0c03      	lsrs	r3, r0, #16
 8001762:	469a      	mov	sl, r3
 8001764:	434a      	muls	r2, r1
 8001766:	4361      	muls	r1, r4
 8001768:	4449      	add	r1, r9
 800176a:	4451      	add	r1, sl
 800176c:	44ab      	add	fp, r5
 800176e:	4589      	cmp	r9, r1
 8001770:	d903      	bls.n	800177a <__aeabi_dmul+0x1a2>
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	025b      	lsls	r3, r3, #9
 8001776:	4699      	mov	r9, r3
 8001778:	444a      	add	r2, r9
 800177a:	0400      	lsls	r0, r0, #16
 800177c:	0c0b      	lsrs	r3, r1, #16
 800177e:	0c00      	lsrs	r0, r0, #16
 8001780:	0409      	lsls	r1, r1, #16
 8001782:	1809      	adds	r1, r1, r0
 8001784:	0020      	movs	r0, r4
 8001786:	4699      	mov	r9, r3
 8001788:	4643      	mov	r3, r8
 800178a:	4370      	muls	r0, r6
 800178c:	435c      	muls	r4, r3
 800178e:	437e      	muls	r6, r7
 8001790:	435f      	muls	r7, r3
 8001792:	0c03      	lsrs	r3, r0, #16
 8001794:	4698      	mov	r8, r3
 8001796:	19a4      	adds	r4, r4, r6
 8001798:	4444      	add	r4, r8
 800179a:	444a      	add	r2, r9
 800179c:	9703      	str	r7, [sp, #12]
 800179e:	42a6      	cmp	r6, r4
 80017a0:	d904      	bls.n	80017ac <__aeabi_dmul+0x1d4>
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	025b      	lsls	r3, r3, #9
 80017a6:	4698      	mov	r8, r3
 80017a8:	4447      	add	r7, r8
 80017aa:	9703      	str	r7, [sp, #12]
 80017ac:	0423      	lsls	r3, r4, #16
 80017ae:	9e02      	ldr	r6, [sp, #8]
 80017b0:	469a      	mov	sl, r3
 80017b2:	9b05      	ldr	r3, [sp, #20]
 80017b4:	445e      	add	r6, fp
 80017b6:	4698      	mov	r8, r3
 80017b8:	42ae      	cmp	r6, r5
 80017ba:	41ad      	sbcs	r5, r5
 80017bc:	1876      	adds	r6, r6, r1
 80017be:	428e      	cmp	r6, r1
 80017c0:	4189      	sbcs	r1, r1
 80017c2:	0400      	lsls	r0, r0, #16
 80017c4:	0c00      	lsrs	r0, r0, #16
 80017c6:	4450      	add	r0, sl
 80017c8:	4440      	add	r0, r8
 80017ca:	426d      	negs	r5, r5
 80017cc:	1947      	adds	r7, r0, r5
 80017ce:	46b8      	mov	r8, r7
 80017d0:	4693      	mov	fp, r2
 80017d2:	4249      	negs	r1, r1
 80017d4:	4689      	mov	r9, r1
 80017d6:	44c3      	add	fp, r8
 80017d8:	44d9      	add	r9, fp
 80017da:	4298      	cmp	r0, r3
 80017dc:	4180      	sbcs	r0, r0
 80017de:	45a8      	cmp	r8, r5
 80017e0:	41ad      	sbcs	r5, r5
 80017e2:	4593      	cmp	fp, r2
 80017e4:	4192      	sbcs	r2, r2
 80017e6:	4589      	cmp	r9, r1
 80017e8:	4189      	sbcs	r1, r1
 80017ea:	426d      	negs	r5, r5
 80017ec:	4240      	negs	r0, r0
 80017ee:	4328      	orrs	r0, r5
 80017f0:	0c24      	lsrs	r4, r4, #16
 80017f2:	4252      	negs	r2, r2
 80017f4:	4249      	negs	r1, r1
 80017f6:	430a      	orrs	r2, r1
 80017f8:	9b03      	ldr	r3, [sp, #12]
 80017fa:	1900      	adds	r0, r0, r4
 80017fc:	1880      	adds	r0, r0, r2
 80017fe:	18c7      	adds	r7, r0, r3
 8001800:	464b      	mov	r3, r9
 8001802:	0ddc      	lsrs	r4, r3, #23
 8001804:	9b04      	ldr	r3, [sp, #16]
 8001806:	0275      	lsls	r5, r6, #9
 8001808:	431d      	orrs	r5, r3
 800180a:	1e6a      	subs	r2, r5, #1
 800180c:	4195      	sbcs	r5, r2
 800180e:	464b      	mov	r3, r9
 8001810:	0df6      	lsrs	r6, r6, #23
 8001812:	027f      	lsls	r7, r7, #9
 8001814:	4335      	orrs	r5, r6
 8001816:	025a      	lsls	r2, r3, #9
 8001818:	433c      	orrs	r4, r7
 800181a:	4315      	orrs	r5, r2
 800181c:	01fb      	lsls	r3, r7, #7
 800181e:	d400      	bmi.n	8001822 <__aeabi_dmul+0x24a>
 8001820:	e11c      	b.n	8001a5c <__aeabi_dmul+0x484>
 8001822:	2101      	movs	r1, #1
 8001824:	086a      	lsrs	r2, r5, #1
 8001826:	400d      	ands	r5, r1
 8001828:	4315      	orrs	r5, r2
 800182a:	07e2      	lsls	r2, r4, #31
 800182c:	4315      	orrs	r5, r2
 800182e:	0864      	lsrs	r4, r4, #1
 8001830:	494f      	ldr	r1, [pc, #316]	; (8001970 <__aeabi_dmul+0x398>)
 8001832:	4461      	add	r1, ip
 8001834:	2900      	cmp	r1, #0
 8001836:	dc00      	bgt.n	800183a <__aeabi_dmul+0x262>
 8001838:	e0b0      	b.n	800199c <__aeabi_dmul+0x3c4>
 800183a:	076b      	lsls	r3, r5, #29
 800183c:	d009      	beq.n	8001852 <__aeabi_dmul+0x27a>
 800183e:	220f      	movs	r2, #15
 8001840:	402a      	ands	r2, r5
 8001842:	2a04      	cmp	r2, #4
 8001844:	d005      	beq.n	8001852 <__aeabi_dmul+0x27a>
 8001846:	1d2a      	adds	r2, r5, #4
 8001848:	42aa      	cmp	r2, r5
 800184a:	41ad      	sbcs	r5, r5
 800184c:	426d      	negs	r5, r5
 800184e:	1964      	adds	r4, r4, r5
 8001850:	0015      	movs	r5, r2
 8001852:	01e3      	lsls	r3, r4, #7
 8001854:	d504      	bpl.n	8001860 <__aeabi_dmul+0x288>
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	4a46      	ldr	r2, [pc, #280]	; (8001974 <__aeabi_dmul+0x39c>)
 800185a:	00c9      	lsls	r1, r1, #3
 800185c:	4014      	ands	r4, r2
 800185e:	4461      	add	r1, ip
 8001860:	4a45      	ldr	r2, [pc, #276]	; (8001978 <__aeabi_dmul+0x3a0>)
 8001862:	4291      	cmp	r1, r2
 8001864:	dd00      	ble.n	8001868 <__aeabi_dmul+0x290>
 8001866:	e726      	b.n	80016b6 <__aeabi_dmul+0xde>
 8001868:	0762      	lsls	r2, r4, #29
 800186a:	08ed      	lsrs	r5, r5, #3
 800186c:	0264      	lsls	r4, r4, #9
 800186e:	0549      	lsls	r1, r1, #21
 8001870:	4315      	orrs	r5, r2
 8001872:	0b24      	lsrs	r4, r4, #12
 8001874:	0d4a      	lsrs	r2, r1, #21
 8001876:	e710      	b.n	800169a <__aeabi_dmul+0xc2>
 8001878:	4652      	mov	r2, sl
 800187a:	4332      	orrs	r2, r6
 800187c:	d100      	bne.n	8001880 <__aeabi_dmul+0x2a8>
 800187e:	e07f      	b.n	8001980 <__aeabi_dmul+0x3a8>
 8001880:	2e00      	cmp	r6, #0
 8001882:	d100      	bne.n	8001886 <__aeabi_dmul+0x2ae>
 8001884:	e0dc      	b.n	8001a40 <__aeabi_dmul+0x468>
 8001886:	0030      	movs	r0, r6
 8001888:	f000 fe1e 	bl	80024c8 <__clzsi2>
 800188c:	0002      	movs	r2, r0
 800188e:	3a0b      	subs	r2, #11
 8001890:	231d      	movs	r3, #29
 8001892:	0001      	movs	r1, r0
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	4652      	mov	r2, sl
 8001898:	3908      	subs	r1, #8
 800189a:	40da      	lsrs	r2, r3
 800189c:	408e      	lsls	r6, r1
 800189e:	4316      	orrs	r6, r2
 80018a0:	4652      	mov	r2, sl
 80018a2:	408a      	lsls	r2, r1
 80018a4:	9b00      	ldr	r3, [sp, #0]
 80018a6:	4935      	ldr	r1, [pc, #212]	; (800197c <__aeabi_dmul+0x3a4>)
 80018a8:	1a18      	subs	r0, r3, r0
 80018aa:	0003      	movs	r3, r0
 80018ac:	468c      	mov	ip, r1
 80018ae:	4463      	add	r3, ip
 80018b0:	2000      	movs	r0, #0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	e6d3      	b.n	800165e <__aeabi_dmul+0x86>
 80018b6:	0025      	movs	r5, r4
 80018b8:	4305      	orrs	r5, r0
 80018ba:	d04a      	beq.n	8001952 <__aeabi_dmul+0x37a>
 80018bc:	2c00      	cmp	r4, #0
 80018be:	d100      	bne.n	80018c2 <__aeabi_dmul+0x2ea>
 80018c0:	e0b0      	b.n	8001a24 <__aeabi_dmul+0x44c>
 80018c2:	0020      	movs	r0, r4
 80018c4:	f000 fe00 	bl	80024c8 <__clzsi2>
 80018c8:	0001      	movs	r1, r0
 80018ca:	0002      	movs	r2, r0
 80018cc:	390b      	subs	r1, #11
 80018ce:	231d      	movs	r3, #29
 80018d0:	0010      	movs	r0, r2
 80018d2:	1a5b      	subs	r3, r3, r1
 80018d4:	0031      	movs	r1, r6
 80018d6:	0035      	movs	r5, r6
 80018d8:	3808      	subs	r0, #8
 80018da:	4084      	lsls	r4, r0
 80018dc:	40d9      	lsrs	r1, r3
 80018de:	4085      	lsls	r5, r0
 80018e0:	430c      	orrs	r4, r1
 80018e2:	4826      	ldr	r0, [pc, #152]	; (800197c <__aeabi_dmul+0x3a4>)
 80018e4:	1a83      	subs	r3, r0, r2
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2300      	movs	r3, #0
 80018ea:	4699      	mov	r9, r3
 80018ec:	469b      	mov	fp, r3
 80018ee:	e697      	b.n	8001620 <__aeabi_dmul+0x48>
 80018f0:	0005      	movs	r5, r0
 80018f2:	4325      	orrs	r5, r4
 80018f4:	d126      	bne.n	8001944 <__aeabi_dmul+0x36c>
 80018f6:	2208      	movs	r2, #8
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2302      	movs	r3, #2
 80018fc:	2400      	movs	r4, #0
 80018fe:	4691      	mov	r9, r2
 8001900:	469b      	mov	fp, r3
 8001902:	e68d      	b.n	8001620 <__aeabi_dmul+0x48>
 8001904:	4652      	mov	r2, sl
 8001906:	9b00      	ldr	r3, [sp, #0]
 8001908:	4332      	orrs	r2, r6
 800190a:	d110      	bne.n	800192e <__aeabi_dmul+0x356>
 800190c:	4915      	ldr	r1, [pc, #84]	; (8001964 <__aeabi_dmul+0x38c>)
 800190e:	2600      	movs	r6, #0
 8001910:	468c      	mov	ip, r1
 8001912:	4463      	add	r3, ip
 8001914:	4649      	mov	r1, r9
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2302      	movs	r3, #2
 800191a:	4319      	orrs	r1, r3
 800191c:	4689      	mov	r9, r1
 800191e:	2002      	movs	r0, #2
 8001920:	e69d      	b.n	800165e <__aeabi_dmul+0x86>
 8001922:	465b      	mov	r3, fp
 8001924:	9701      	str	r7, [sp, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d000      	beq.n	800192c <__aeabi_dmul+0x354>
 800192a:	e6ad      	b.n	8001688 <__aeabi_dmul+0xb0>
 800192c:	e6c3      	b.n	80016b6 <__aeabi_dmul+0xde>
 800192e:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <__aeabi_dmul+0x38c>)
 8001930:	2003      	movs	r0, #3
 8001932:	4694      	mov	ip, r2
 8001934:	4463      	add	r3, ip
 8001936:	464a      	mov	r2, r9
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2303      	movs	r3, #3
 800193c:	431a      	orrs	r2, r3
 800193e:	4691      	mov	r9, r2
 8001940:	4652      	mov	r2, sl
 8001942:	e68c      	b.n	800165e <__aeabi_dmul+0x86>
 8001944:	220c      	movs	r2, #12
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2303      	movs	r3, #3
 800194a:	0005      	movs	r5, r0
 800194c:	4691      	mov	r9, r2
 800194e:	469b      	mov	fp, r3
 8001950:	e666      	b.n	8001620 <__aeabi_dmul+0x48>
 8001952:	2304      	movs	r3, #4
 8001954:	4699      	mov	r9, r3
 8001956:	2300      	movs	r3, #0
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	3301      	adds	r3, #1
 800195c:	2400      	movs	r4, #0
 800195e:	469b      	mov	fp, r3
 8001960:	e65e      	b.n	8001620 <__aeabi_dmul+0x48>
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	000007ff 	.word	0x000007ff
 8001968:	fffffc01 	.word	0xfffffc01
 800196c:	0800bdf0 	.word	0x0800bdf0
 8001970:	000003ff 	.word	0x000003ff
 8001974:	feffffff 	.word	0xfeffffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	fffffc0d 	.word	0xfffffc0d
 8001980:	4649      	mov	r1, r9
 8001982:	2301      	movs	r3, #1
 8001984:	4319      	orrs	r1, r3
 8001986:	4689      	mov	r9, r1
 8001988:	2600      	movs	r6, #0
 800198a:	2001      	movs	r0, #1
 800198c:	e667      	b.n	800165e <__aeabi_dmul+0x86>
 800198e:	2300      	movs	r3, #0
 8001990:	2480      	movs	r4, #128	; 0x80
 8001992:	2500      	movs	r5, #0
 8001994:	4a43      	ldr	r2, [pc, #268]	; (8001aa4 <__aeabi_dmul+0x4cc>)
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	0324      	lsls	r4, r4, #12
 800199a:	e67e      	b.n	800169a <__aeabi_dmul+0xc2>
 800199c:	2001      	movs	r0, #1
 800199e:	1a40      	subs	r0, r0, r1
 80019a0:	2838      	cmp	r0, #56	; 0x38
 80019a2:	dd00      	ble.n	80019a6 <__aeabi_dmul+0x3ce>
 80019a4:	e676      	b.n	8001694 <__aeabi_dmul+0xbc>
 80019a6:	281f      	cmp	r0, #31
 80019a8:	dd5b      	ble.n	8001a62 <__aeabi_dmul+0x48a>
 80019aa:	221f      	movs	r2, #31
 80019ac:	0023      	movs	r3, r4
 80019ae:	4252      	negs	r2, r2
 80019b0:	1a51      	subs	r1, r2, r1
 80019b2:	40cb      	lsrs	r3, r1
 80019b4:	0019      	movs	r1, r3
 80019b6:	2820      	cmp	r0, #32
 80019b8:	d003      	beq.n	80019c2 <__aeabi_dmul+0x3ea>
 80019ba:	4a3b      	ldr	r2, [pc, #236]	; (8001aa8 <__aeabi_dmul+0x4d0>)
 80019bc:	4462      	add	r2, ip
 80019be:	4094      	lsls	r4, r2
 80019c0:	4325      	orrs	r5, r4
 80019c2:	1e6a      	subs	r2, r5, #1
 80019c4:	4195      	sbcs	r5, r2
 80019c6:	002a      	movs	r2, r5
 80019c8:	430a      	orrs	r2, r1
 80019ca:	2107      	movs	r1, #7
 80019cc:	000d      	movs	r5, r1
 80019ce:	2400      	movs	r4, #0
 80019d0:	4015      	ands	r5, r2
 80019d2:	4211      	tst	r1, r2
 80019d4:	d05b      	beq.n	8001a8e <__aeabi_dmul+0x4b6>
 80019d6:	210f      	movs	r1, #15
 80019d8:	2400      	movs	r4, #0
 80019da:	4011      	ands	r1, r2
 80019dc:	2904      	cmp	r1, #4
 80019de:	d053      	beq.n	8001a88 <__aeabi_dmul+0x4b0>
 80019e0:	1d11      	adds	r1, r2, #4
 80019e2:	4291      	cmp	r1, r2
 80019e4:	4192      	sbcs	r2, r2
 80019e6:	4252      	negs	r2, r2
 80019e8:	18a4      	adds	r4, r4, r2
 80019ea:	000a      	movs	r2, r1
 80019ec:	0223      	lsls	r3, r4, #8
 80019ee:	d54b      	bpl.n	8001a88 <__aeabi_dmul+0x4b0>
 80019f0:	2201      	movs	r2, #1
 80019f2:	2400      	movs	r4, #0
 80019f4:	2500      	movs	r5, #0
 80019f6:	e650      	b.n	800169a <__aeabi_dmul+0xc2>
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	031b      	lsls	r3, r3, #12
 80019fc:	421c      	tst	r4, r3
 80019fe:	d009      	beq.n	8001a14 <__aeabi_dmul+0x43c>
 8001a00:	421e      	tst	r6, r3
 8001a02:	d107      	bne.n	8001a14 <__aeabi_dmul+0x43c>
 8001a04:	4333      	orrs	r3, r6
 8001a06:	031c      	lsls	r4, r3, #12
 8001a08:	4643      	mov	r3, r8
 8001a0a:	0015      	movs	r5, r2
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	4a25      	ldr	r2, [pc, #148]	; (8001aa4 <__aeabi_dmul+0x4cc>)
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	e642      	b.n	800169a <__aeabi_dmul+0xc2>
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	0312      	lsls	r2, r2, #12
 8001a18:	4314      	orrs	r4, r2
 8001a1a:	0324      	lsls	r4, r4, #12
 8001a1c:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <__aeabi_dmul+0x4cc>)
 8001a1e:	0b24      	lsrs	r4, r4, #12
 8001a20:	9701      	str	r7, [sp, #4]
 8001a22:	e63a      	b.n	800169a <__aeabi_dmul+0xc2>
 8001a24:	f000 fd50 	bl	80024c8 <__clzsi2>
 8001a28:	0001      	movs	r1, r0
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	3115      	adds	r1, #21
 8001a2e:	3220      	adds	r2, #32
 8001a30:	291c      	cmp	r1, #28
 8001a32:	dc00      	bgt.n	8001a36 <__aeabi_dmul+0x45e>
 8001a34:	e74b      	b.n	80018ce <__aeabi_dmul+0x2f6>
 8001a36:	0034      	movs	r4, r6
 8001a38:	3808      	subs	r0, #8
 8001a3a:	2500      	movs	r5, #0
 8001a3c:	4084      	lsls	r4, r0
 8001a3e:	e750      	b.n	80018e2 <__aeabi_dmul+0x30a>
 8001a40:	f000 fd42 	bl	80024c8 <__clzsi2>
 8001a44:	0003      	movs	r3, r0
 8001a46:	001a      	movs	r2, r3
 8001a48:	3215      	adds	r2, #21
 8001a4a:	3020      	adds	r0, #32
 8001a4c:	2a1c      	cmp	r2, #28
 8001a4e:	dc00      	bgt.n	8001a52 <__aeabi_dmul+0x47a>
 8001a50:	e71e      	b.n	8001890 <__aeabi_dmul+0x2b8>
 8001a52:	4656      	mov	r6, sl
 8001a54:	3b08      	subs	r3, #8
 8001a56:	2200      	movs	r2, #0
 8001a58:	409e      	lsls	r6, r3
 8001a5a:	e723      	b.n	80018a4 <__aeabi_dmul+0x2cc>
 8001a5c:	9b00      	ldr	r3, [sp, #0]
 8001a5e:	469c      	mov	ip, r3
 8001a60:	e6e6      	b.n	8001830 <__aeabi_dmul+0x258>
 8001a62:	4912      	ldr	r1, [pc, #72]	; (8001aac <__aeabi_dmul+0x4d4>)
 8001a64:	0022      	movs	r2, r4
 8001a66:	4461      	add	r1, ip
 8001a68:	002e      	movs	r6, r5
 8001a6a:	408d      	lsls	r5, r1
 8001a6c:	408a      	lsls	r2, r1
 8001a6e:	40c6      	lsrs	r6, r0
 8001a70:	1e69      	subs	r1, r5, #1
 8001a72:	418d      	sbcs	r5, r1
 8001a74:	4332      	orrs	r2, r6
 8001a76:	432a      	orrs	r2, r5
 8001a78:	40c4      	lsrs	r4, r0
 8001a7a:	0753      	lsls	r3, r2, #29
 8001a7c:	d0b6      	beq.n	80019ec <__aeabi_dmul+0x414>
 8001a7e:	210f      	movs	r1, #15
 8001a80:	4011      	ands	r1, r2
 8001a82:	2904      	cmp	r1, #4
 8001a84:	d1ac      	bne.n	80019e0 <__aeabi_dmul+0x408>
 8001a86:	e7b1      	b.n	80019ec <__aeabi_dmul+0x414>
 8001a88:	0765      	lsls	r5, r4, #29
 8001a8a:	0264      	lsls	r4, r4, #9
 8001a8c:	0b24      	lsrs	r4, r4, #12
 8001a8e:	08d2      	lsrs	r2, r2, #3
 8001a90:	4315      	orrs	r5, r2
 8001a92:	2200      	movs	r2, #0
 8001a94:	e601      	b.n	800169a <__aeabi_dmul+0xc2>
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	0312      	lsls	r2, r2, #12
 8001a9a:	4314      	orrs	r4, r2
 8001a9c:	0324      	lsls	r4, r4, #12
 8001a9e:	4a01      	ldr	r2, [pc, #4]	; (8001aa4 <__aeabi_dmul+0x4cc>)
 8001aa0:	0b24      	lsrs	r4, r4, #12
 8001aa2:	e5fa      	b.n	800169a <__aeabi_dmul+0xc2>
 8001aa4:	000007ff 	.word	0x000007ff
 8001aa8:	0000043e 	.word	0x0000043e
 8001aac:	0000041e 	.word	0x0000041e

08001ab0 <__aeabi_dsub>:
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab2:	4657      	mov	r7, sl
 8001ab4:	464e      	mov	r6, r9
 8001ab6:	4645      	mov	r5, r8
 8001ab8:	46de      	mov	lr, fp
 8001aba:	b5e0      	push	{r5, r6, r7, lr}
 8001abc:	001e      	movs	r6, r3
 8001abe:	0017      	movs	r7, r2
 8001ac0:	004a      	lsls	r2, r1, #1
 8001ac2:	030b      	lsls	r3, r1, #12
 8001ac4:	0d52      	lsrs	r2, r2, #21
 8001ac6:	0a5b      	lsrs	r3, r3, #9
 8001ac8:	4690      	mov	r8, r2
 8001aca:	0f42      	lsrs	r2, r0, #29
 8001acc:	431a      	orrs	r2, r3
 8001ace:	0fcd      	lsrs	r5, r1, #31
 8001ad0:	4ccd      	ldr	r4, [pc, #820]	; (8001e08 <__aeabi_dsub+0x358>)
 8001ad2:	0331      	lsls	r1, r6, #12
 8001ad4:	00c3      	lsls	r3, r0, #3
 8001ad6:	4694      	mov	ip, r2
 8001ad8:	0070      	lsls	r0, r6, #1
 8001ada:	0f7a      	lsrs	r2, r7, #29
 8001adc:	0a49      	lsrs	r1, r1, #9
 8001ade:	00ff      	lsls	r7, r7, #3
 8001ae0:	469a      	mov	sl, r3
 8001ae2:	46b9      	mov	r9, r7
 8001ae4:	0d40      	lsrs	r0, r0, #21
 8001ae6:	0ff6      	lsrs	r6, r6, #31
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	42a0      	cmp	r0, r4
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dsub+0x40>
 8001aee:	e0b1      	b.n	8001c54 <__aeabi_dsub+0x1a4>
 8001af0:	2201      	movs	r2, #1
 8001af2:	4056      	eors	r6, r2
 8001af4:	46b3      	mov	fp, r6
 8001af6:	42b5      	cmp	r5, r6
 8001af8:	d100      	bne.n	8001afc <__aeabi_dsub+0x4c>
 8001afa:	e088      	b.n	8001c0e <__aeabi_dsub+0x15e>
 8001afc:	4642      	mov	r2, r8
 8001afe:	1a12      	subs	r2, r2, r0
 8001b00:	2a00      	cmp	r2, #0
 8001b02:	dc00      	bgt.n	8001b06 <__aeabi_dsub+0x56>
 8001b04:	e0ae      	b.n	8001c64 <__aeabi_dsub+0x1b4>
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x5c>
 8001b0a:	e0c1      	b.n	8001c90 <__aeabi_dsub+0x1e0>
 8001b0c:	48be      	ldr	r0, [pc, #760]	; (8001e08 <__aeabi_dsub+0x358>)
 8001b0e:	4580      	cmp	r8, r0
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x64>
 8001b12:	e151      	b.n	8001db8 <__aeabi_dsub+0x308>
 8001b14:	2080      	movs	r0, #128	; 0x80
 8001b16:	0400      	lsls	r0, r0, #16
 8001b18:	4301      	orrs	r1, r0
 8001b1a:	2a38      	cmp	r2, #56	; 0x38
 8001b1c:	dd00      	ble.n	8001b20 <__aeabi_dsub+0x70>
 8001b1e:	e17b      	b.n	8001e18 <__aeabi_dsub+0x368>
 8001b20:	2a1f      	cmp	r2, #31
 8001b22:	dd00      	ble.n	8001b26 <__aeabi_dsub+0x76>
 8001b24:	e1ee      	b.n	8001f04 <__aeabi_dsub+0x454>
 8001b26:	2020      	movs	r0, #32
 8001b28:	003e      	movs	r6, r7
 8001b2a:	1a80      	subs	r0, r0, r2
 8001b2c:	000c      	movs	r4, r1
 8001b2e:	40d6      	lsrs	r6, r2
 8001b30:	40d1      	lsrs	r1, r2
 8001b32:	4087      	lsls	r7, r0
 8001b34:	4662      	mov	r2, ip
 8001b36:	4084      	lsls	r4, r0
 8001b38:	1a52      	subs	r2, r2, r1
 8001b3a:	1e78      	subs	r0, r7, #1
 8001b3c:	4187      	sbcs	r7, r0
 8001b3e:	4694      	mov	ip, r2
 8001b40:	4334      	orrs	r4, r6
 8001b42:	4327      	orrs	r7, r4
 8001b44:	1bdc      	subs	r4, r3, r7
 8001b46:	42a3      	cmp	r3, r4
 8001b48:	419b      	sbcs	r3, r3
 8001b4a:	4662      	mov	r2, ip
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	4699      	mov	r9, r3
 8001b52:	464b      	mov	r3, r9
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	d400      	bmi.n	8001b5a <__aeabi_dsub+0xaa>
 8001b58:	e118      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8001b5a:	464b      	mov	r3, r9
 8001b5c:	0258      	lsls	r0, r3, #9
 8001b5e:	0a43      	lsrs	r3, r0, #9
 8001b60:	4699      	mov	r9, r3
 8001b62:	464b      	mov	r3, r9
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0xba>
 8001b68:	e137      	b.n	8001dda <__aeabi_dsub+0x32a>
 8001b6a:	4648      	mov	r0, r9
 8001b6c:	f000 fcac 	bl	80024c8 <__clzsi2>
 8001b70:	0001      	movs	r1, r0
 8001b72:	3908      	subs	r1, #8
 8001b74:	2320      	movs	r3, #32
 8001b76:	0022      	movs	r2, r4
 8001b78:	4648      	mov	r0, r9
 8001b7a:	1a5b      	subs	r3, r3, r1
 8001b7c:	40da      	lsrs	r2, r3
 8001b7e:	4088      	lsls	r0, r1
 8001b80:	408c      	lsls	r4, r1
 8001b82:	4643      	mov	r3, r8
 8001b84:	4310      	orrs	r0, r2
 8001b86:	4588      	cmp	r8, r1
 8001b88:	dd00      	ble.n	8001b8c <__aeabi_dsub+0xdc>
 8001b8a:	e136      	b.n	8001dfa <__aeabi_dsub+0x34a>
 8001b8c:	1ac9      	subs	r1, r1, r3
 8001b8e:	1c4b      	adds	r3, r1, #1
 8001b90:	2b1f      	cmp	r3, #31
 8001b92:	dd00      	ble.n	8001b96 <__aeabi_dsub+0xe6>
 8001b94:	e0ea      	b.n	8001d6c <__aeabi_dsub+0x2bc>
 8001b96:	2220      	movs	r2, #32
 8001b98:	0026      	movs	r6, r4
 8001b9a:	1ad2      	subs	r2, r2, r3
 8001b9c:	0001      	movs	r1, r0
 8001b9e:	4094      	lsls	r4, r2
 8001ba0:	40de      	lsrs	r6, r3
 8001ba2:	40d8      	lsrs	r0, r3
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	4091      	lsls	r1, r2
 8001ba8:	1e62      	subs	r2, r4, #1
 8001baa:	4194      	sbcs	r4, r2
 8001bac:	4681      	mov	r9, r0
 8001bae:	4698      	mov	r8, r3
 8001bb0:	4331      	orrs	r1, r6
 8001bb2:	430c      	orrs	r4, r1
 8001bb4:	0763      	lsls	r3, r4, #29
 8001bb6:	d009      	beq.n	8001bcc <__aeabi_dsub+0x11c>
 8001bb8:	230f      	movs	r3, #15
 8001bba:	4023      	ands	r3, r4
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d005      	beq.n	8001bcc <__aeabi_dsub+0x11c>
 8001bc0:	1d23      	adds	r3, r4, #4
 8001bc2:	42a3      	cmp	r3, r4
 8001bc4:	41a4      	sbcs	r4, r4
 8001bc6:	4264      	negs	r4, r4
 8001bc8:	44a1      	add	r9, r4
 8001bca:	001c      	movs	r4, r3
 8001bcc:	464b      	mov	r3, r9
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	d400      	bmi.n	8001bd4 <__aeabi_dsub+0x124>
 8001bd2:	e0de      	b.n	8001d92 <__aeabi_dsub+0x2e2>
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <__aeabi_dsub+0x358>)
 8001bd8:	3101      	adds	r1, #1
 8001bda:	4299      	cmp	r1, r3
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x130>
 8001bde:	e0e7      	b.n	8001db0 <__aeabi_dsub+0x300>
 8001be0:	464b      	mov	r3, r9
 8001be2:	488a      	ldr	r0, [pc, #552]	; (8001e0c <__aeabi_dsub+0x35c>)
 8001be4:	08e4      	lsrs	r4, r4, #3
 8001be6:	4003      	ands	r3, r0
 8001be8:	0018      	movs	r0, r3
 8001bea:	0549      	lsls	r1, r1, #21
 8001bec:	075b      	lsls	r3, r3, #29
 8001bee:	0240      	lsls	r0, r0, #9
 8001bf0:	4323      	orrs	r3, r4
 8001bf2:	0d4a      	lsrs	r2, r1, #21
 8001bf4:	0b04      	lsrs	r4, r0, #12
 8001bf6:	0512      	lsls	r2, r2, #20
 8001bf8:	07ed      	lsls	r5, r5, #31
 8001bfa:	4322      	orrs	r2, r4
 8001bfc:	432a      	orrs	r2, r5
 8001bfe:	0018      	movs	r0, r3
 8001c00:	0011      	movs	r1, r2
 8001c02:	bcf0      	pop	{r4, r5, r6, r7}
 8001c04:	46bb      	mov	fp, r7
 8001c06:	46b2      	mov	sl, r6
 8001c08:	46a9      	mov	r9, r5
 8001c0a:	46a0      	mov	r8, r4
 8001c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c0e:	4642      	mov	r2, r8
 8001c10:	1a12      	subs	r2, r2, r0
 8001c12:	2a00      	cmp	r2, #0
 8001c14:	dd52      	ble.n	8001cbc <__aeabi_dsub+0x20c>
 8001c16:	2800      	cmp	r0, #0
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dsub+0x16c>
 8001c1a:	e09c      	b.n	8001d56 <__aeabi_dsub+0x2a6>
 8001c1c:	45a0      	cmp	r8, r4
 8001c1e:	d100      	bne.n	8001c22 <__aeabi_dsub+0x172>
 8001c20:	e0ca      	b.n	8001db8 <__aeabi_dsub+0x308>
 8001c22:	2080      	movs	r0, #128	; 0x80
 8001c24:	0400      	lsls	r0, r0, #16
 8001c26:	4301      	orrs	r1, r0
 8001c28:	2a38      	cmp	r2, #56	; 0x38
 8001c2a:	dd00      	ble.n	8001c2e <__aeabi_dsub+0x17e>
 8001c2c:	e149      	b.n	8001ec2 <__aeabi_dsub+0x412>
 8001c2e:	2a1f      	cmp	r2, #31
 8001c30:	dc00      	bgt.n	8001c34 <__aeabi_dsub+0x184>
 8001c32:	e197      	b.n	8001f64 <__aeabi_dsub+0x4b4>
 8001c34:	0010      	movs	r0, r2
 8001c36:	000e      	movs	r6, r1
 8001c38:	3820      	subs	r0, #32
 8001c3a:	40c6      	lsrs	r6, r0
 8001c3c:	2a20      	cmp	r2, #32
 8001c3e:	d004      	beq.n	8001c4a <__aeabi_dsub+0x19a>
 8001c40:	2040      	movs	r0, #64	; 0x40
 8001c42:	1a82      	subs	r2, r0, r2
 8001c44:	4091      	lsls	r1, r2
 8001c46:	430f      	orrs	r7, r1
 8001c48:	46b9      	mov	r9, r7
 8001c4a:	464c      	mov	r4, r9
 8001c4c:	1e62      	subs	r2, r4, #1
 8001c4e:	4194      	sbcs	r4, r2
 8001c50:	4334      	orrs	r4, r6
 8001c52:	e13a      	b.n	8001eca <__aeabi_dsub+0x41a>
 8001c54:	000a      	movs	r2, r1
 8001c56:	433a      	orrs	r2, r7
 8001c58:	d028      	beq.n	8001cac <__aeabi_dsub+0x1fc>
 8001c5a:	46b3      	mov	fp, r6
 8001c5c:	42b5      	cmp	r5, r6
 8001c5e:	d02b      	beq.n	8001cb8 <__aeabi_dsub+0x208>
 8001c60:	4a6b      	ldr	r2, [pc, #428]	; (8001e10 <__aeabi_dsub+0x360>)
 8001c62:	4442      	add	r2, r8
 8001c64:	2a00      	cmp	r2, #0
 8001c66:	d05d      	beq.n	8001d24 <__aeabi_dsub+0x274>
 8001c68:	4642      	mov	r2, r8
 8001c6a:	4644      	mov	r4, r8
 8001c6c:	1a82      	subs	r2, r0, r2
 8001c6e:	2c00      	cmp	r4, #0
 8001c70:	d000      	beq.n	8001c74 <__aeabi_dsub+0x1c4>
 8001c72:	e0f5      	b.n	8001e60 <__aeabi_dsub+0x3b0>
 8001c74:	4665      	mov	r5, ip
 8001c76:	431d      	orrs	r5, r3
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dsub+0x1cc>
 8001c7a:	e19c      	b.n	8001fb6 <__aeabi_dsub+0x506>
 8001c7c:	1e55      	subs	r5, r2, #1
 8001c7e:	2a01      	cmp	r2, #1
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x1d4>
 8001c82:	e1fb      	b.n	800207c <__aeabi_dsub+0x5cc>
 8001c84:	4c60      	ldr	r4, [pc, #384]	; (8001e08 <__aeabi_dsub+0x358>)
 8001c86:	42a2      	cmp	r2, r4
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x1dc>
 8001c8a:	e1bd      	b.n	8002008 <__aeabi_dsub+0x558>
 8001c8c:	002a      	movs	r2, r5
 8001c8e:	e0f0      	b.n	8001e72 <__aeabi_dsub+0x3c2>
 8001c90:	0008      	movs	r0, r1
 8001c92:	4338      	orrs	r0, r7
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x1e8>
 8001c96:	e0c3      	b.n	8001e20 <__aeabi_dsub+0x370>
 8001c98:	1e50      	subs	r0, r2, #1
 8001c9a:	2a01      	cmp	r2, #1
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dsub+0x1f0>
 8001c9e:	e1a8      	b.n	8001ff2 <__aeabi_dsub+0x542>
 8001ca0:	4c59      	ldr	r4, [pc, #356]	; (8001e08 <__aeabi_dsub+0x358>)
 8001ca2:	42a2      	cmp	r2, r4
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x1f8>
 8001ca6:	e087      	b.n	8001db8 <__aeabi_dsub+0x308>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	e736      	b.n	8001b1a <__aeabi_dsub+0x6a>
 8001cac:	2201      	movs	r2, #1
 8001cae:	4056      	eors	r6, r2
 8001cb0:	46b3      	mov	fp, r6
 8001cb2:	42b5      	cmp	r5, r6
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x208>
 8001cb6:	e721      	b.n	8001afc <__aeabi_dsub+0x4c>
 8001cb8:	4a55      	ldr	r2, [pc, #340]	; (8001e10 <__aeabi_dsub+0x360>)
 8001cba:	4442      	add	r2, r8
 8001cbc:	2a00      	cmp	r2, #0
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_dsub+0x212>
 8001cc0:	e0b5      	b.n	8001e2e <__aeabi_dsub+0x37e>
 8001cc2:	4642      	mov	r2, r8
 8001cc4:	4644      	mov	r4, r8
 8001cc6:	1a82      	subs	r2, r0, r2
 8001cc8:	2c00      	cmp	r4, #0
 8001cca:	d100      	bne.n	8001cce <__aeabi_dsub+0x21e>
 8001ccc:	e138      	b.n	8001f40 <__aeabi_dsub+0x490>
 8001cce:	4e4e      	ldr	r6, [pc, #312]	; (8001e08 <__aeabi_dsub+0x358>)
 8001cd0:	42b0      	cmp	r0, r6
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_dsub+0x226>
 8001cd4:	e1de      	b.n	8002094 <__aeabi_dsub+0x5e4>
 8001cd6:	2680      	movs	r6, #128	; 0x80
 8001cd8:	4664      	mov	r4, ip
 8001cda:	0436      	lsls	r6, r6, #16
 8001cdc:	4334      	orrs	r4, r6
 8001cde:	46a4      	mov	ip, r4
 8001ce0:	2a38      	cmp	r2, #56	; 0x38
 8001ce2:	dd00      	ble.n	8001ce6 <__aeabi_dsub+0x236>
 8001ce4:	e196      	b.n	8002014 <__aeabi_dsub+0x564>
 8001ce6:	2a1f      	cmp	r2, #31
 8001ce8:	dd00      	ble.n	8001cec <__aeabi_dsub+0x23c>
 8001cea:	e224      	b.n	8002136 <__aeabi_dsub+0x686>
 8001cec:	2620      	movs	r6, #32
 8001cee:	1ab4      	subs	r4, r6, r2
 8001cf0:	46a2      	mov	sl, r4
 8001cf2:	4664      	mov	r4, ip
 8001cf4:	4656      	mov	r6, sl
 8001cf6:	40b4      	lsls	r4, r6
 8001cf8:	46a1      	mov	r9, r4
 8001cfa:	001c      	movs	r4, r3
 8001cfc:	464e      	mov	r6, r9
 8001cfe:	40d4      	lsrs	r4, r2
 8001d00:	4326      	orrs	r6, r4
 8001d02:	0034      	movs	r4, r6
 8001d04:	4656      	mov	r6, sl
 8001d06:	40b3      	lsls	r3, r6
 8001d08:	1e5e      	subs	r6, r3, #1
 8001d0a:	41b3      	sbcs	r3, r6
 8001d0c:	431c      	orrs	r4, r3
 8001d0e:	4663      	mov	r3, ip
 8001d10:	40d3      	lsrs	r3, r2
 8001d12:	18c9      	adds	r1, r1, r3
 8001d14:	19e4      	adds	r4, r4, r7
 8001d16:	42bc      	cmp	r4, r7
 8001d18:	41bf      	sbcs	r7, r7
 8001d1a:	427f      	negs	r7, r7
 8001d1c:	46b9      	mov	r9, r7
 8001d1e:	4680      	mov	r8, r0
 8001d20:	4489      	add	r9, r1
 8001d22:	e0d8      	b.n	8001ed6 <__aeabi_dsub+0x426>
 8001d24:	4640      	mov	r0, r8
 8001d26:	4c3b      	ldr	r4, [pc, #236]	; (8001e14 <__aeabi_dsub+0x364>)
 8001d28:	3001      	adds	r0, #1
 8001d2a:	4220      	tst	r0, r4
 8001d2c:	d000      	beq.n	8001d30 <__aeabi_dsub+0x280>
 8001d2e:	e0b4      	b.n	8001e9a <__aeabi_dsub+0x3ea>
 8001d30:	4640      	mov	r0, r8
 8001d32:	2800      	cmp	r0, #0
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dsub+0x288>
 8001d36:	e144      	b.n	8001fc2 <__aeabi_dsub+0x512>
 8001d38:	4660      	mov	r0, ip
 8001d3a:	4318      	orrs	r0, r3
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x290>
 8001d3e:	e190      	b.n	8002062 <__aeabi_dsub+0x5b2>
 8001d40:	0008      	movs	r0, r1
 8001d42:	4338      	orrs	r0, r7
 8001d44:	d000      	beq.n	8001d48 <__aeabi_dsub+0x298>
 8001d46:	e1aa      	b.n	800209e <__aeabi_dsub+0x5ee>
 8001d48:	4661      	mov	r1, ip
 8001d4a:	08db      	lsrs	r3, r3, #3
 8001d4c:	0749      	lsls	r1, r1, #29
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	4661      	mov	r1, ip
 8001d52:	08cc      	lsrs	r4, r1, #3
 8001d54:	e027      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8001d56:	0008      	movs	r0, r1
 8001d58:	4338      	orrs	r0, r7
 8001d5a:	d061      	beq.n	8001e20 <__aeabi_dsub+0x370>
 8001d5c:	1e50      	subs	r0, r2, #1
 8001d5e:	2a01      	cmp	r2, #1
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x2b4>
 8001d62:	e139      	b.n	8001fd8 <__aeabi_dsub+0x528>
 8001d64:	42a2      	cmp	r2, r4
 8001d66:	d027      	beq.n	8001db8 <__aeabi_dsub+0x308>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	e75d      	b.n	8001c28 <__aeabi_dsub+0x178>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	391f      	subs	r1, #31
 8001d70:	40ca      	lsrs	r2, r1
 8001d72:	0011      	movs	r1, r2
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	d003      	beq.n	8001d80 <__aeabi_dsub+0x2d0>
 8001d78:	2240      	movs	r2, #64	; 0x40
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	4098      	lsls	r0, r3
 8001d7e:	4304      	orrs	r4, r0
 8001d80:	1e63      	subs	r3, r4, #1
 8001d82:	419c      	sbcs	r4, r3
 8001d84:	2300      	movs	r3, #0
 8001d86:	4699      	mov	r9, r3
 8001d88:	4698      	mov	r8, r3
 8001d8a:	430c      	orrs	r4, r1
 8001d8c:	0763      	lsls	r3, r4, #29
 8001d8e:	d000      	beq.n	8001d92 <__aeabi_dsub+0x2e2>
 8001d90:	e712      	b.n	8001bb8 <__aeabi_dsub+0x108>
 8001d92:	464b      	mov	r3, r9
 8001d94:	464a      	mov	r2, r9
 8001d96:	08e4      	lsrs	r4, r4, #3
 8001d98:	075b      	lsls	r3, r3, #29
 8001d9a:	4323      	orrs	r3, r4
 8001d9c:	08d4      	lsrs	r4, r2, #3
 8001d9e:	4642      	mov	r2, r8
 8001da0:	4919      	ldr	r1, [pc, #100]	; (8001e08 <__aeabi_dsub+0x358>)
 8001da2:	428a      	cmp	r2, r1
 8001da4:	d00e      	beq.n	8001dc4 <__aeabi_dsub+0x314>
 8001da6:	0324      	lsls	r4, r4, #12
 8001da8:	0552      	lsls	r2, r2, #21
 8001daa:	0b24      	lsrs	r4, r4, #12
 8001dac:	0d52      	lsrs	r2, r2, #21
 8001dae:	e722      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8001db0:	000a      	movs	r2, r1
 8001db2:	2400      	movs	r4, #0
 8001db4:	2300      	movs	r3, #0
 8001db6:	e71e      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8001db8:	08db      	lsrs	r3, r3, #3
 8001dba:	4662      	mov	r2, ip
 8001dbc:	0752      	lsls	r2, r2, #29
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	4662      	mov	r2, ip
 8001dc2:	08d4      	lsrs	r4, r2, #3
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	4322      	orrs	r2, r4
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dsub+0x31c>
 8001dca:	e1fc      	b.n	80021c6 <__aeabi_dsub+0x716>
 8001dcc:	2280      	movs	r2, #128	; 0x80
 8001dce:	0312      	lsls	r2, r2, #12
 8001dd0:	4314      	orrs	r4, r2
 8001dd2:	0324      	lsls	r4, r4, #12
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <__aeabi_dsub+0x358>)
 8001dd6:	0b24      	lsrs	r4, r4, #12
 8001dd8:	e70d      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8001dda:	0020      	movs	r0, r4
 8001ddc:	f000 fb74 	bl	80024c8 <__clzsi2>
 8001de0:	0001      	movs	r1, r0
 8001de2:	3118      	adds	r1, #24
 8001de4:	291f      	cmp	r1, #31
 8001de6:	dc00      	bgt.n	8001dea <__aeabi_dsub+0x33a>
 8001de8:	e6c4      	b.n	8001b74 <__aeabi_dsub+0xc4>
 8001dea:	3808      	subs	r0, #8
 8001dec:	4084      	lsls	r4, r0
 8001dee:	4643      	mov	r3, r8
 8001df0:	0020      	movs	r0, r4
 8001df2:	2400      	movs	r4, #0
 8001df4:	4588      	cmp	r8, r1
 8001df6:	dc00      	bgt.n	8001dfa <__aeabi_dsub+0x34a>
 8001df8:	e6c8      	b.n	8001b8c <__aeabi_dsub+0xdc>
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <__aeabi_dsub+0x35c>)
 8001dfc:	1a5b      	subs	r3, r3, r1
 8001dfe:	4010      	ands	r0, r2
 8001e00:	4698      	mov	r8, r3
 8001e02:	4681      	mov	r9, r0
 8001e04:	e6d6      	b.n	8001bb4 <__aeabi_dsub+0x104>
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	000007ff 	.word	0x000007ff
 8001e0c:	ff7fffff 	.word	0xff7fffff
 8001e10:	fffff801 	.word	0xfffff801
 8001e14:	000007fe 	.word	0x000007fe
 8001e18:	430f      	orrs	r7, r1
 8001e1a:	1e7a      	subs	r2, r7, #1
 8001e1c:	4197      	sbcs	r7, r2
 8001e1e:	e691      	b.n	8001b44 <__aeabi_dsub+0x94>
 8001e20:	4661      	mov	r1, ip
 8001e22:	08db      	lsrs	r3, r3, #3
 8001e24:	0749      	lsls	r1, r1, #29
 8001e26:	430b      	orrs	r3, r1
 8001e28:	4661      	mov	r1, ip
 8001e2a:	08cc      	lsrs	r4, r1, #3
 8001e2c:	e7b8      	b.n	8001da0 <__aeabi_dsub+0x2f0>
 8001e2e:	4640      	mov	r0, r8
 8001e30:	4cd3      	ldr	r4, [pc, #844]	; (8002180 <__aeabi_dsub+0x6d0>)
 8001e32:	3001      	adds	r0, #1
 8001e34:	4220      	tst	r0, r4
 8001e36:	d000      	beq.n	8001e3a <__aeabi_dsub+0x38a>
 8001e38:	e0a2      	b.n	8001f80 <__aeabi_dsub+0x4d0>
 8001e3a:	4640      	mov	r0, r8
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	d000      	beq.n	8001e42 <__aeabi_dsub+0x392>
 8001e40:	e101      	b.n	8002046 <__aeabi_dsub+0x596>
 8001e42:	4660      	mov	r0, ip
 8001e44:	4318      	orrs	r0, r3
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x39a>
 8001e48:	e15e      	b.n	8002108 <__aeabi_dsub+0x658>
 8001e4a:	0008      	movs	r0, r1
 8001e4c:	4338      	orrs	r0, r7
 8001e4e:	d000      	beq.n	8001e52 <__aeabi_dsub+0x3a2>
 8001e50:	e15f      	b.n	8002112 <__aeabi_dsub+0x662>
 8001e52:	4661      	mov	r1, ip
 8001e54:	08db      	lsrs	r3, r3, #3
 8001e56:	0749      	lsls	r1, r1, #29
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	4661      	mov	r1, ip
 8001e5c:	08cc      	lsrs	r4, r1, #3
 8001e5e:	e7a2      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8001e60:	4dc8      	ldr	r5, [pc, #800]	; (8002184 <__aeabi_dsub+0x6d4>)
 8001e62:	42a8      	cmp	r0, r5
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x3b8>
 8001e66:	e0cf      	b.n	8002008 <__aeabi_dsub+0x558>
 8001e68:	2580      	movs	r5, #128	; 0x80
 8001e6a:	4664      	mov	r4, ip
 8001e6c:	042d      	lsls	r5, r5, #16
 8001e6e:	432c      	orrs	r4, r5
 8001e70:	46a4      	mov	ip, r4
 8001e72:	2a38      	cmp	r2, #56	; 0x38
 8001e74:	dc56      	bgt.n	8001f24 <__aeabi_dsub+0x474>
 8001e76:	2a1f      	cmp	r2, #31
 8001e78:	dd00      	ble.n	8001e7c <__aeabi_dsub+0x3cc>
 8001e7a:	e0d1      	b.n	8002020 <__aeabi_dsub+0x570>
 8001e7c:	2520      	movs	r5, #32
 8001e7e:	001e      	movs	r6, r3
 8001e80:	1aad      	subs	r5, r5, r2
 8001e82:	4664      	mov	r4, ip
 8001e84:	40ab      	lsls	r3, r5
 8001e86:	40ac      	lsls	r4, r5
 8001e88:	40d6      	lsrs	r6, r2
 8001e8a:	1e5d      	subs	r5, r3, #1
 8001e8c:	41ab      	sbcs	r3, r5
 8001e8e:	4334      	orrs	r4, r6
 8001e90:	4323      	orrs	r3, r4
 8001e92:	4664      	mov	r4, ip
 8001e94:	40d4      	lsrs	r4, r2
 8001e96:	1b09      	subs	r1, r1, r4
 8001e98:	e049      	b.n	8001f2e <__aeabi_dsub+0x47e>
 8001e9a:	4660      	mov	r0, ip
 8001e9c:	1bdc      	subs	r4, r3, r7
 8001e9e:	1a46      	subs	r6, r0, r1
 8001ea0:	42a3      	cmp	r3, r4
 8001ea2:	4180      	sbcs	r0, r0
 8001ea4:	4240      	negs	r0, r0
 8001ea6:	4681      	mov	r9, r0
 8001ea8:	0030      	movs	r0, r6
 8001eaa:	464e      	mov	r6, r9
 8001eac:	1b80      	subs	r0, r0, r6
 8001eae:	4681      	mov	r9, r0
 8001eb0:	0200      	lsls	r0, r0, #8
 8001eb2:	d476      	bmi.n	8001fa2 <__aeabi_dsub+0x4f2>
 8001eb4:	464b      	mov	r3, r9
 8001eb6:	4323      	orrs	r3, r4
 8001eb8:	d000      	beq.n	8001ebc <__aeabi_dsub+0x40c>
 8001eba:	e652      	b.n	8001b62 <__aeabi_dsub+0xb2>
 8001ebc:	2400      	movs	r4, #0
 8001ebe:	2500      	movs	r5, #0
 8001ec0:	e771      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8001ec2:	4339      	orrs	r1, r7
 8001ec4:	000c      	movs	r4, r1
 8001ec6:	1e62      	subs	r2, r4, #1
 8001ec8:	4194      	sbcs	r4, r2
 8001eca:	18e4      	adds	r4, r4, r3
 8001ecc:	429c      	cmp	r4, r3
 8001ece:	419b      	sbcs	r3, r3
 8001ed0:	425b      	negs	r3, r3
 8001ed2:	4463      	add	r3, ip
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	464b      	mov	r3, r9
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	d400      	bmi.n	8001ede <__aeabi_dsub+0x42e>
 8001edc:	e756      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	469c      	mov	ip, r3
 8001ee2:	4ba8      	ldr	r3, [pc, #672]	; (8002184 <__aeabi_dsub+0x6d4>)
 8001ee4:	44e0      	add	r8, ip
 8001ee6:	4598      	cmp	r8, r3
 8001ee8:	d038      	beq.n	8001f5c <__aeabi_dsub+0x4ac>
 8001eea:	464b      	mov	r3, r9
 8001eec:	48a6      	ldr	r0, [pc, #664]	; (8002188 <__aeabi_dsub+0x6d8>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4003      	ands	r3, r0
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	0863      	lsrs	r3, r4, #1
 8001ef6:	4014      	ands	r4, r2
 8001ef8:	431c      	orrs	r4, r3
 8001efa:	07c3      	lsls	r3, r0, #31
 8001efc:	431c      	orrs	r4, r3
 8001efe:	0843      	lsrs	r3, r0, #1
 8001f00:	4699      	mov	r9, r3
 8001f02:	e657      	b.n	8001bb4 <__aeabi_dsub+0x104>
 8001f04:	0010      	movs	r0, r2
 8001f06:	000e      	movs	r6, r1
 8001f08:	3820      	subs	r0, #32
 8001f0a:	40c6      	lsrs	r6, r0
 8001f0c:	2a20      	cmp	r2, #32
 8001f0e:	d004      	beq.n	8001f1a <__aeabi_dsub+0x46a>
 8001f10:	2040      	movs	r0, #64	; 0x40
 8001f12:	1a82      	subs	r2, r0, r2
 8001f14:	4091      	lsls	r1, r2
 8001f16:	430f      	orrs	r7, r1
 8001f18:	46b9      	mov	r9, r7
 8001f1a:	464f      	mov	r7, r9
 8001f1c:	1e7a      	subs	r2, r7, #1
 8001f1e:	4197      	sbcs	r7, r2
 8001f20:	4337      	orrs	r7, r6
 8001f22:	e60f      	b.n	8001b44 <__aeabi_dsub+0x94>
 8001f24:	4662      	mov	r2, ip
 8001f26:	431a      	orrs	r2, r3
 8001f28:	0013      	movs	r3, r2
 8001f2a:	1e5a      	subs	r2, r3, #1
 8001f2c:	4193      	sbcs	r3, r2
 8001f2e:	1afc      	subs	r4, r7, r3
 8001f30:	42a7      	cmp	r7, r4
 8001f32:	41bf      	sbcs	r7, r7
 8001f34:	427f      	negs	r7, r7
 8001f36:	1bcb      	subs	r3, r1, r7
 8001f38:	4699      	mov	r9, r3
 8001f3a:	465d      	mov	r5, fp
 8001f3c:	4680      	mov	r8, r0
 8001f3e:	e608      	b.n	8001b52 <__aeabi_dsub+0xa2>
 8001f40:	4666      	mov	r6, ip
 8001f42:	431e      	orrs	r6, r3
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dsub+0x498>
 8001f46:	e0be      	b.n	80020c6 <__aeabi_dsub+0x616>
 8001f48:	1e56      	subs	r6, r2, #1
 8001f4a:	2a01      	cmp	r2, #1
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x4a0>
 8001f4e:	e109      	b.n	8002164 <__aeabi_dsub+0x6b4>
 8001f50:	4c8c      	ldr	r4, [pc, #560]	; (8002184 <__aeabi_dsub+0x6d4>)
 8001f52:	42a2      	cmp	r2, r4
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x4a8>
 8001f56:	e119      	b.n	800218c <__aeabi_dsub+0x6dc>
 8001f58:	0032      	movs	r2, r6
 8001f5a:	e6c1      	b.n	8001ce0 <__aeabi_dsub+0x230>
 8001f5c:	4642      	mov	r2, r8
 8001f5e:	2400      	movs	r4, #0
 8001f60:	2300      	movs	r3, #0
 8001f62:	e648      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8001f64:	2020      	movs	r0, #32
 8001f66:	000c      	movs	r4, r1
 8001f68:	1a80      	subs	r0, r0, r2
 8001f6a:	003e      	movs	r6, r7
 8001f6c:	4087      	lsls	r7, r0
 8001f6e:	4084      	lsls	r4, r0
 8001f70:	40d6      	lsrs	r6, r2
 8001f72:	1e78      	subs	r0, r7, #1
 8001f74:	4187      	sbcs	r7, r0
 8001f76:	40d1      	lsrs	r1, r2
 8001f78:	4334      	orrs	r4, r6
 8001f7a:	433c      	orrs	r4, r7
 8001f7c:	448c      	add	ip, r1
 8001f7e:	e7a4      	b.n	8001eca <__aeabi_dsub+0x41a>
 8001f80:	4a80      	ldr	r2, [pc, #512]	; (8002184 <__aeabi_dsub+0x6d4>)
 8001f82:	4290      	cmp	r0, r2
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x4d8>
 8001f86:	e0e9      	b.n	800215c <__aeabi_dsub+0x6ac>
 8001f88:	19df      	adds	r7, r3, r7
 8001f8a:	429f      	cmp	r7, r3
 8001f8c:	419b      	sbcs	r3, r3
 8001f8e:	4461      	add	r1, ip
 8001f90:	425b      	negs	r3, r3
 8001f92:	18c9      	adds	r1, r1, r3
 8001f94:	07cc      	lsls	r4, r1, #31
 8001f96:	087f      	lsrs	r7, r7, #1
 8001f98:	084b      	lsrs	r3, r1, #1
 8001f9a:	4699      	mov	r9, r3
 8001f9c:	4680      	mov	r8, r0
 8001f9e:	433c      	orrs	r4, r7
 8001fa0:	e6f4      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8001fa2:	1afc      	subs	r4, r7, r3
 8001fa4:	42a7      	cmp	r7, r4
 8001fa6:	41bf      	sbcs	r7, r7
 8001fa8:	4663      	mov	r3, ip
 8001faa:	427f      	negs	r7, r7
 8001fac:	1ac9      	subs	r1, r1, r3
 8001fae:	1bcb      	subs	r3, r1, r7
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	465d      	mov	r5, fp
 8001fb4:	e5d5      	b.n	8001b62 <__aeabi_dsub+0xb2>
 8001fb6:	08ff      	lsrs	r7, r7, #3
 8001fb8:	074b      	lsls	r3, r1, #29
 8001fba:	465d      	mov	r5, fp
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	08cc      	lsrs	r4, r1, #3
 8001fc0:	e6ee      	b.n	8001da0 <__aeabi_dsub+0x2f0>
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	d000      	beq.n	8001fca <__aeabi_dsub+0x51a>
 8001fc8:	e082      	b.n	80020d0 <__aeabi_dsub+0x620>
 8001fca:	000b      	movs	r3, r1
 8001fcc:	433b      	orrs	r3, r7
 8001fce:	d11b      	bne.n	8002008 <__aeabi_dsub+0x558>
 8001fd0:	2480      	movs	r4, #128	; 0x80
 8001fd2:	2500      	movs	r5, #0
 8001fd4:	0324      	lsls	r4, r4, #12
 8001fd6:	e6f9      	b.n	8001dcc <__aeabi_dsub+0x31c>
 8001fd8:	19dc      	adds	r4, r3, r7
 8001fda:	429c      	cmp	r4, r3
 8001fdc:	419b      	sbcs	r3, r3
 8001fde:	4461      	add	r1, ip
 8001fe0:	4689      	mov	r9, r1
 8001fe2:	425b      	negs	r3, r3
 8001fe4:	4499      	add	r9, r3
 8001fe6:	464b      	mov	r3, r9
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	d444      	bmi.n	8002076 <__aeabi_dsub+0x5c6>
 8001fec:	2301      	movs	r3, #1
 8001fee:	4698      	mov	r8, r3
 8001ff0:	e6cc      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8001ff2:	1bdc      	subs	r4, r3, r7
 8001ff4:	4662      	mov	r2, ip
 8001ff6:	42a3      	cmp	r3, r4
 8001ff8:	419b      	sbcs	r3, r3
 8001ffa:	1a51      	subs	r1, r2, r1
 8001ffc:	425b      	negs	r3, r3
 8001ffe:	1acb      	subs	r3, r1, r3
 8002000:	4699      	mov	r9, r3
 8002002:	2301      	movs	r3, #1
 8002004:	4698      	mov	r8, r3
 8002006:	e5a4      	b.n	8001b52 <__aeabi_dsub+0xa2>
 8002008:	08ff      	lsrs	r7, r7, #3
 800200a:	074b      	lsls	r3, r1, #29
 800200c:	465d      	mov	r5, fp
 800200e:	433b      	orrs	r3, r7
 8002010:	08cc      	lsrs	r4, r1, #3
 8002012:	e6d7      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002014:	4662      	mov	r2, ip
 8002016:	431a      	orrs	r2, r3
 8002018:	0014      	movs	r4, r2
 800201a:	1e63      	subs	r3, r4, #1
 800201c:	419c      	sbcs	r4, r3
 800201e:	e679      	b.n	8001d14 <__aeabi_dsub+0x264>
 8002020:	0015      	movs	r5, r2
 8002022:	4664      	mov	r4, ip
 8002024:	3d20      	subs	r5, #32
 8002026:	40ec      	lsrs	r4, r5
 8002028:	46a0      	mov	r8, r4
 800202a:	2a20      	cmp	r2, #32
 800202c:	d005      	beq.n	800203a <__aeabi_dsub+0x58a>
 800202e:	2540      	movs	r5, #64	; 0x40
 8002030:	4664      	mov	r4, ip
 8002032:	1aaa      	subs	r2, r5, r2
 8002034:	4094      	lsls	r4, r2
 8002036:	4323      	orrs	r3, r4
 8002038:	469a      	mov	sl, r3
 800203a:	4654      	mov	r4, sl
 800203c:	1e63      	subs	r3, r4, #1
 800203e:	419c      	sbcs	r4, r3
 8002040:	4643      	mov	r3, r8
 8002042:	4323      	orrs	r3, r4
 8002044:	e773      	b.n	8001f2e <__aeabi_dsub+0x47e>
 8002046:	4662      	mov	r2, ip
 8002048:	431a      	orrs	r2, r3
 800204a:	d023      	beq.n	8002094 <__aeabi_dsub+0x5e4>
 800204c:	000a      	movs	r2, r1
 800204e:	433a      	orrs	r2, r7
 8002050:	d000      	beq.n	8002054 <__aeabi_dsub+0x5a4>
 8002052:	e0a0      	b.n	8002196 <__aeabi_dsub+0x6e6>
 8002054:	4662      	mov	r2, ip
 8002056:	08db      	lsrs	r3, r3, #3
 8002058:	0752      	lsls	r2, r2, #29
 800205a:	4313      	orrs	r3, r2
 800205c:	4662      	mov	r2, ip
 800205e:	08d4      	lsrs	r4, r2, #3
 8002060:	e6b0      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002062:	000b      	movs	r3, r1
 8002064:	433b      	orrs	r3, r7
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x5ba>
 8002068:	e728      	b.n	8001ebc <__aeabi_dsub+0x40c>
 800206a:	08ff      	lsrs	r7, r7, #3
 800206c:	074b      	lsls	r3, r1, #29
 800206e:	465d      	mov	r5, fp
 8002070:	433b      	orrs	r3, r7
 8002072:	08cc      	lsrs	r4, r1, #3
 8002074:	e697      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8002076:	2302      	movs	r3, #2
 8002078:	4698      	mov	r8, r3
 800207a:	e736      	b.n	8001eea <__aeabi_dsub+0x43a>
 800207c:	1afc      	subs	r4, r7, r3
 800207e:	42a7      	cmp	r7, r4
 8002080:	41bf      	sbcs	r7, r7
 8002082:	4663      	mov	r3, ip
 8002084:	427f      	negs	r7, r7
 8002086:	1ac9      	subs	r1, r1, r3
 8002088:	1bcb      	subs	r3, r1, r7
 800208a:	4699      	mov	r9, r3
 800208c:	2301      	movs	r3, #1
 800208e:	465d      	mov	r5, fp
 8002090:	4698      	mov	r8, r3
 8002092:	e55e      	b.n	8001b52 <__aeabi_dsub+0xa2>
 8002094:	074b      	lsls	r3, r1, #29
 8002096:	08ff      	lsrs	r7, r7, #3
 8002098:	433b      	orrs	r3, r7
 800209a:	08cc      	lsrs	r4, r1, #3
 800209c:	e692      	b.n	8001dc4 <__aeabi_dsub+0x314>
 800209e:	1bdc      	subs	r4, r3, r7
 80020a0:	4660      	mov	r0, ip
 80020a2:	42a3      	cmp	r3, r4
 80020a4:	41b6      	sbcs	r6, r6
 80020a6:	1a40      	subs	r0, r0, r1
 80020a8:	4276      	negs	r6, r6
 80020aa:	1b80      	subs	r0, r0, r6
 80020ac:	4681      	mov	r9, r0
 80020ae:	0200      	lsls	r0, r0, #8
 80020b0:	d560      	bpl.n	8002174 <__aeabi_dsub+0x6c4>
 80020b2:	1afc      	subs	r4, r7, r3
 80020b4:	42a7      	cmp	r7, r4
 80020b6:	41bf      	sbcs	r7, r7
 80020b8:	4663      	mov	r3, ip
 80020ba:	427f      	negs	r7, r7
 80020bc:	1ac9      	subs	r1, r1, r3
 80020be:	1bcb      	subs	r3, r1, r7
 80020c0:	4699      	mov	r9, r3
 80020c2:	465d      	mov	r5, fp
 80020c4:	e576      	b.n	8001bb4 <__aeabi_dsub+0x104>
 80020c6:	08ff      	lsrs	r7, r7, #3
 80020c8:	074b      	lsls	r3, r1, #29
 80020ca:	433b      	orrs	r3, r7
 80020cc:	08cc      	lsrs	r4, r1, #3
 80020ce:	e667      	b.n	8001da0 <__aeabi_dsub+0x2f0>
 80020d0:	000a      	movs	r2, r1
 80020d2:	08db      	lsrs	r3, r3, #3
 80020d4:	433a      	orrs	r2, r7
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x62a>
 80020d8:	e66f      	b.n	8001dba <__aeabi_dsub+0x30a>
 80020da:	4662      	mov	r2, ip
 80020dc:	0752      	lsls	r2, r2, #29
 80020de:	4313      	orrs	r3, r2
 80020e0:	4662      	mov	r2, ip
 80020e2:	08d4      	lsrs	r4, r2, #3
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	0312      	lsls	r2, r2, #12
 80020e8:	4214      	tst	r4, r2
 80020ea:	d007      	beq.n	80020fc <__aeabi_dsub+0x64c>
 80020ec:	08c8      	lsrs	r0, r1, #3
 80020ee:	4210      	tst	r0, r2
 80020f0:	d104      	bne.n	80020fc <__aeabi_dsub+0x64c>
 80020f2:	465d      	mov	r5, fp
 80020f4:	0004      	movs	r4, r0
 80020f6:	08fb      	lsrs	r3, r7, #3
 80020f8:	0749      	lsls	r1, r1, #29
 80020fa:	430b      	orrs	r3, r1
 80020fc:	0f5a      	lsrs	r2, r3, #29
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	0752      	lsls	r2, r2, #29
 8002104:	4313      	orrs	r3, r2
 8002106:	e65d      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002108:	074b      	lsls	r3, r1, #29
 800210a:	08ff      	lsrs	r7, r7, #3
 800210c:	433b      	orrs	r3, r7
 800210e:	08cc      	lsrs	r4, r1, #3
 8002110:	e649      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8002112:	19dc      	adds	r4, r3, r7
 8002114:	429c      	cmp	r4, r3
 8002116:	419b      	sbcs	r3, r3
 8002118:	4461      	add	r1, ip
 800211a:	4689      	mov	r9, r1
 800211c:	425b      	negs	r3, r3
 800211e:	4499      	add	r9, r3
 8002120:	464b      	mov	r3, r9
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	d400      	bmi.n	8002128 <__aeabi_dsub+0x678>
 8002126:	e631      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8002128:	464a      	mov	r2, r9
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <__aeabi_dsub+0x6d8>)
 800212c:	401a      	ands	r2, r3
 800212e:	2301      	movs	r3, #1
 8002130:	4691      	mov	r9, r2
 8002132:	4698      	mov	r8, r3
 8002134:	e62a      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8002136:	0016      	movs	r6, r2
 8002138:	4664      	mov	r4, ip
 800213a:	3e20      	subs	r6, #32
 800213c:	40f4      	lsrs	r4, r6
 800213e:	46a0      	mov	r8, r4
 8002140:	2a20      	cmp	r2, #32
 8002142:	d005      	beq.n	8002150 <__aeabi_dsub+0x6a0>
 8002144:	2640      	movs	r6, #64	; 0x40
 8002146:	4664      	mov	r4, ip
 8002148:	1ab2      	subs	r2, r6, r2
 800214a:	4094      	lsls	r4, r2
 800214c:	4323      	orrs	r3, r4
 800214e:	469a      	mov	sl, r3
 8002150:	4654      	mov	r4, sl
 8002152:	1e63      	subs	r3, r4, #1
 8002154:	419c      	sbcs	r4, r3
 8002156:	4643      	mov	r3, r8
 8002158:	431c      	orrs	r4, r3
 800215a:	e5db      	b.n	8001d14 <__aeabi_dsub+0x264>
 800215c:	0002      	movs	r2, r0
 800215e:	2400      	movs	r4, #0
 8002160:	2300      	movs	r3, #0
 8002162:	e548      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8002164:	19dc      	adds	r4, r3, r7
 8002166:	42bc      	cmp	r4, r7
 8002168:	41bf      	sbcs	r7, r7
 800216a:	4461      	add	r1, ip
 800216c:	4689      	mov	r9, r1
 800216e:	427f      	negs	r7, r7
 8002170:	44b9      	add	r9, r7
 8002172:	e738      	b.n	8001fe6 <__aeabi_dsub+0x536>
 8002174:	464b      	mov	r3, r9
 8002176:	4323      	orrs	r3, r4
 8002178:	d100      	bne.n	800217c <__aeabi_dsub+0x6cc>
 800217a:	e69f      	b.n	8001ebc <__aeabi_dsub+0x40c>
 800217c:	e606      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	000007fe 	.word	0x000007fe
 8002184:	000007ff 	.word	0x000007ff
 8002188:	ff7fffff 	.word	0xff7fffff
 800218c:	08ff      	lsrs	r7, r7, #3
 800218e:	074b      	lsls	r3, r1, #29
 8002190:	433b      	orrs	r3, r7
 8002192:	08cc      	lsrs	r4, r1, #3
 8002194:	e616      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002196:	4662      	mov	r2, ip
 8002198:	08db      	lsrs	r3, r3, #3
 800219a:	0752      	lsls	r2, r2, #29
 800219c:	4313      	orrs	r3, r2
 800219e:	4662      	mov	r2, ip
 80021a0:	08d4      	lsrs	r4, r2, #3
 80021a2:	2280      	movs	r2, #128	; 0x80
 80021a4:	0312      	lsls	r2, r2, #12
 80021a6:	4214      	tst	r4, r2
 80021a8:	d007      	beq.n	80021ba <__aeabi_dsub+0x70a>
 80021aa:	08c8      	lsrs	r0, r1, #3
 80021ac:	4210      	tst	r0, r2
 80021ae:	d104      	bne.n	80021ba <__aeabi_dsub+0x70a>
 80021b0:	465d      	mov	r5, fp
 80021b2:	0004      	movs	r4, r0
 80021b4:	08fb      	lsrs	r3, r7, #3
 80021b6:	0749      	lsls	r1, r1, #29
 80021b8:	430b      	orrs	r3, r1
 80021ba:	0f5a      	lsrs	r2, r3, #29
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	0752      	lsls	r2, r2, #29
 80021c0:	08db      	lsrs	r3, r3, #3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	e5fe      	b.n	8001dc4 <__aeabi_dsub+0x314>
 80021c6:	2300      	movs	r3, #0
 80021c8:	4a01      	ldr	r2, [pc, #4]	; (80021d0 <__aeabi_dsub+0x720>)
 80021ca:	001c      	movs	r4, r3
 80021cc:	e513      	b.n	8001bf6 <__aeabi_dsub+0x146>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	000007ff 	.word	0x000007ff

080021d4 <__aeabi_dcmpun>:
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	0005      	movs	r5, r0
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <__aeabi_dcmpun+0x38>)
 80021da:	031c      	lsls	r4, r3, #12
 80021dc:	0016      	movs	r6, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	030a      	lsls	r2, r1, #12
 80021e2:	0049      	lsls	r1, r1, #1
 80021e4:	0b12      	lsrs	r2, r2, #12
 80021e6:	0d49      	lsrs	r1, r1, #21
 80021e8:	0b24      	lsrs	r4, r4, #12
 80021ea:	0d5b      	lsrs	r3, r3, #21
 80021ec:	4281      	cmp	r1, r0
 80021ee:	d008      	beq.n	8002202 <__aeabi_dcmpun+0x2e>
 80021f0:	4a06      	ldr	r2, [pc, #24]	; (800220c <__aeabi_dcmpun+0x38>)
 80021f2:	2000      	movs	r0, #0
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d103      	bne.n	8002200 <__aeabi_dcmpun+0x2c>
 80021f8:	0020      	movs	r0, r4
 80021fa:	4330      	orrs	r0, r6
 80021fc:	1e43      	subs	r3, r0, #1
 80021fe:	4198      	sbcs	r0, r3
 8002200:	bd70      	pop	{r4, r5, r6, pc}
 8002202:	2001      	movs	r0, #1
 8002204:	432a      	orrs	r2, r5
 8002206:	d1fb      	bne.n	8002200 <__aeabi_dcmpun+0x2c>
 8002208:	e7f2      	b.n	80021f0 <__aeabi_dcmpun+0x1c>
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	000007ff 	.word	0x000007ff

08002210 <__aeabi_d2iz>:
 8002210:	000a      	movs	r2, r1
 8002212:	b530      	push	{r4, r5, lr}
 8002214:	4c13      	ldr	r4, [pc, #76]	; (8002264 <__aeabi_d2iz+0x54>)
 8002216:	0053      	lsls	r3, r2, #1
 8002218:	0309      	lsls	r1, r1, #12
 800221a:	0005      	movs	r5, r0
 800221c:	0b09      	lsrs	r1, r1, #12
 800221e:	2000      	movs	r0, #0
 8002220:	0d5b      	lsrs	r3, r3, #21
 8002222:	0fd2      	lsrs	r2, r2, #31
 8002224:	42a3      	cmp	r3, r4
 8002226:	dd04      	ble.n	8002232 <__aeabi_d2iz+0x22>
 8002228:	480f      	ldr	r0, [pc, #60]	; (8002268 <__aeabi_d2iz+0x58>)
 800222a:	4283      	cmp	r3, r0
 800222c:	dd02      	ble.n	8002234 <__aeabi_d2iz+0x24>
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <__aeabi_d2iz+0x5c>)
 8002230:	18d0      	adds	r0, r2, r3
 8002232:	bd30      	pop	{r4, r5, pc}
 8002234:	2080      	movs	r0, #128	; 0x80
 8002236:	0340      	lsls	r0, r0, #13
 8002238:	4301      	orrs	r1, r0
 800223a:	480d      	ldr	r0, [pc, #52]	; (8002270 <__aeabi_d2iz+0x60>)
 800223c:	1ac0      	subs	r0, r0, r3
 800223e:	281f      	cmp	r0, #31
 8002240:	dd08      	ble.n	8002254 <__aeabi_d2iz+0x44>
 8002242:	480c      	ldr	r0, [pc, #48]	; (8002274 <__aeabi_d2iz+0x64>)
 8002244:	1ac3      	subs	r3, r0, r3
 8002246:	40d9      	lsrs	r1, r3
 8002248:	000b      	movs	r3, r1
 800224a:	4258      	negs	r0, r3
 800224c:	2a00      	cmp	r2, #0
 800224e:	d1f0      	bne.n	8002232 <__aeabi_d2iz+0x22>
 8002250:	0018      	movs	r0, r3
 8002252:	e7ee      	b.n	8002232 <__aeabi_d2iz+0x22>
 8002254:	4c08      	ldr	r4, [pc, #32]	; (8002278 <__aeabi_d2iz+0x68>)
 8002256:	40c5      	lsrs	r5, r0
 8002258:	46a4      	mov	ip, r4
 800225a:	4463      	add	r3, ip
 800225c:	4099      	lsls	r1, r3
 800225e:	000b      	movs	r3, r1
 8002260:	432b      	orrs	r3, r5
 8002262:	e7f2      	b.n	800224a <__aeabi_d2iz+0x3a>
 8002264:	000003fe 	.word	0x000003fe
 8002268:	0000041d 	.word	0x0000041d
 800226c:	7fffffff 	.word	0x7fffffff
 8002270:	00000433 	.word	0x00000433
 8002274:	00000413 	.word	0x00000413
 8002278:	fffffbed 	.word	0xfffffbed

0800227c <__aeabi_i2d>:
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	2800      	cmp	r0, #0
 8002280:	d016      	beq.n	80022b0 <__aeabi_i2d+0x34>
 8002282:	17c3      	asrs	r3, r0, #31
 8002284:	18c5      	adds	r5, r0, r3
 8002286:	405d      	eors	r5, r3
 8002288:	0fc4      	lsrs	r4, r0, #31
 800228a:	0028      	movs	r0, r5
 800228c:	f000 f91c 	bl	80024c8 <__clzsi2>
 8002290:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <__aeabi_i2d+0x5c>)
 8002292:	1a12      	subs	r2, r2, r0
 8002294:	280a      	cmp	r0, #10
 8002296:	dc16      	bgt.n	80022c6 <__aeabi_i2d+0x4a>
 8002298:	0003      	movs	r3, r0
 800229a:	002e      	movs	r6, r5
 800229c:	3315      	adds	r3, #21
 800229e:	409e      	lsls	r6, r3
 80022a0:	230b      	movs	r3, #11
 80022a2:	1a18      	subs	r0, r3, r0
 80022a4:	40c5      	lsrs	r5, r0
 80022a6:	0552      	lsls	r2, r2, #21
 80022a8:	032d      	lsls	r5, r5, #12
 80022aa:	0b2d      	lsrs	r5, r5, #12
 80022ac:	0d53      	lsrs	r3, r2, #21
 80022ae:	e003      	b.n	80022b8 <__aeabi_i2d+0x3c>
 80022b0:	2400      	movs	r4, #0
 80022b2:	2300      	movs	r3, #0
 80022b4:	2500      	movs	r5, #0
 80022b6:	2600      	movs	r6, #0
 80022b8:	051b      	lsls	r3, r3, #20
 80022ba:	432b      	orrs	r3, r5
 80022bc:	07e4      	lsls	r4, r4, #31
 80022be:	4323      	orrs	r3, r4
 80022c0:	0030      	movs	r0, r6
 80022c2:	0019      	movs	r1, r3
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
 80022c6:	380b      	subs	r0, #11
 80022c8:	4085      	lsls	r5, r0
 80022ca:	0552      	lsls	r2, r2, #21
 80022cc:	032d      	lsls	r5, r5, #12
 80022ce:	2600      	movs	r6, #0
 80022d0:	0b2d      	lsrs	r5, r5, #12
 80022d2:	0d53      	lsrs	r3, r2, #21
 80022d4:	e7f0      	b.n	80022b8 <__aeabi_i2d+0x3c>
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	0000041e 	.word	0x0000041e

080022dc <__aeabi_ui2d>:
 80022dc:	b510      	push	{r4, lr}
 80022de:	1e04      	subs	r4, r0, #0
 80022e0:	d010      	beq.n	8002304 <__aeabi_ui2d+0x28>
 80022e2:	f000 f8f1 	bl	80024c8 <__clzsi2>
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <__aeabi_ui2d+0x48>)
 80022e8:	1a1b      	subs	r3, r3, r0
 80022ea:	280a      	cmp	r0, #10
 80022ec:	dc11      	bgt.n	8002312 <__aeabi_ui2d+0x36>
 80022ee:	220b      	movs	r2, #11
 80022f0:	0021      	movs	r1, r4
 80022f2:	1a12      	subs	r2, r2, r0
 80022f4:	40d1      	lsrs	r1, r2
 80022f6:	3015      	adds	r0, #21
 80022f8:	030a      	lsls	r2, r1, #12
 80022fa:	055b      	lsls	r3, r3, #21
 80022fc:	4084      	lsls	r4, r0
 80022fe:	0b12      	lsrs	r2, r2, #12
 8002300:	0d5b      	lsrs	r3, r3, #21
 8002302:	e001      	b.n	8002308 <__aeabi_ui2d+0x2c>
 8002304:	2300      	movs	r3, #0
 8002306:	2200      	movs	r2, #0
 8002308:	051b      	lsls	r3, r3, #20
 800230a:	4313      	orrs	r3, r2
 800230c:	0020      	movs	r0, r4
 800230e:	0019      	movs	r1, r3
 8002310:	bd10      	pop	{r4, pc}
 8002312:	0022      	movs	r2, r4
 8002314:	380b      	subs	r0, #11
 8002316:	4082      	lsls	r2, r0
 8002318:	055b      	lsls	r3, r3, #21
 800231a:	0312      	lsls	r2, r2, #12
 800231c:	2400      	movs	r4, #0
 800231e:	0b12      	lsrs	r2, r2, #12
 8002320:	0d5b      	lsrs	r3, r3, #21
 8002322:	e7f1      	b.n	8002308 <__aeabi_ui2d+0x2c>
 8002324:	0000041e 	.word	0x0000041e

08002328 <__aeabi_f2d>:
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	0043      	lsls	r3, r0, #1
 800232c:	0246      	lsls	r6, r0, #9
 800232e:	0fc4      	lsrs	r4, r0, #31
 8002330:	20fe      	movs	r0, #254	; 0xfe
 8002332:	0e1b      	lsrs	r3, r3, #24
 8002334:	1c59      	adds	r1, r3, #1
 8002336:	0a75      	lsrs	r5, r6, #9
 8002338:	4208      	tst	r0, r1
 800233a:	d00c      	beq.n	8002356 <__aeabi_f2d+0x2e>
 800233c:	22e0      	movs	r2, #224	; 0xe0
 800233e:	0092      	lsls	r2, r2, #2
 8002340:	4694      	mov	ip, r2
 8002342:	076d      	lsls	r5, r5, #29
 8002344:	0b36      	lsrs	r6, r6, #12
 8002346:	4463      	add	r3, ip
 8002348:	051b      	lsls	r3, r3, #20
 800234a:	4333      	orrs	r3, r6
 800234c:	07e4      	lsls	r4, r4, #31
 800234e:	4323      	orrs	r3, r4
 8002350:	0028      	movs	r0, r5
 8002352:	0019      	movs	r1, r3
 8002354:	bd70      	pop	{r4, r5, r6, pc}
 8002356:	2b00      	cmp	r3, #0
 8002358:	d114      	bne.n	8002384 <__aeabi_f2d+0x5c>
 800235a:	2d00      	cmp	r5, #0
 800235c:	d01b      	beq.n	8002396 <__aeabi_f2d+0x6e>
 800235e:	0028      	movs	r0, r5
 8002360:	f000 f8b2 	bl	80024c8 <__clzsi2>
 8002364:	280a      	cmp	r0, #10
 8002366:	dc1c      	bgt.n	80023a2 <__aeabi_f2d+0x7a>
 8002368:	230b      	movs	r3, #11
 800236a:	002e      	movs	r6, r5
 800236c:	1a1b      	subs	r3, r3, r0
 800236e:	40de      	lsrs	r6, r3
 8002370:	0003      	movs	r3, r0
 8002372:	3315      	adds	r3, #21
 8002374:	409d      	lsls	r5, r3
 8002376:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <__aeabi_f2d+0x88>)
 8002378:	0336      	lsls	r6, r6, #12
 800237a:	1a12      	subs	r2, r2, r0
 800237c:	0552      	lsls	r2, r2, #21
 800237e:	0b36      	lsrs	r6, r6, #12
 8002380:	0d53      	lsrs	r3, r2, #21
 8002382:	e7e1      	b.n	8002348 <__aeabi_f2d+0x20>
 8002384:	2d00      	cmp	r5, #0
 8002386:	d009      	beq.n	800239c <__aeabi_f2d+0x74>
 8002388:	2280      	movs	r2, #128	; 0x80
 800238a:	0b36      	lsrs	r6, r6, #12
 800238c:	0312      	lsls	r2, r2, #12
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <__aeabi_f2d+0x8c>)
 8002390:	076d      	lsls	r5, r5, #29
 8002392:	4316      	orrs	r6, r2
 8002394:	e7d8      	b.n	8002348 <__aeabi_f2d+0x20>
 8002396:	2300      	movs	r3, #0
 8002398:	2600      	movs	r6, #0
 800239a:	e7d5      	b.n	8002348 <__aeabi_f2d+0x20>
 800239c:	2600      	movs	r6, #0
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <__aeabi_f2d+0x8c>)
 80023a0:	e7d2      	b.n	8002348 <__aeabi_f2d+0x20>
 80023a2:	0003      	movs	r3, r0
 80023a4:	3b0b      	subs	r3, #11
 80023a6:	409d      	lsls	r5, r3
 80023a8:	002e      	movs	r6, r5
 80023aa:	2500      	movs	r5, #0
 80023ac:	e7e3      	b.n	8002376 <__aeabi_f2d+0x4e>
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	00000389 	.word	0x00000389
 80023b4:	000007ff 	.word	0x000007ff

080023b8 <__aeabi_d2f>:
 80023b8:	0002      	movs	r2, r0
 80023ba:	004b      	lsls	r3, r1, #1
 80023bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023be:	0d5b      	lsrs	r3, r3, #21
 80023c0:	030c      	lsls	r4, r1, #12
 80023c2:	4e3d      	ldr	r6, [pc, #244]	; (80024b8 <__aeabi_d2f+0x100>)
 80023c4:	0a64      	lsrs	r4, r4, #9
 80023c6:	0f40      	lsrs	r0, r0, #29
 80023c8:	1c5f      	adds	r7, r3, #1
 80023ca:	0fc9      	lsrs	r1, r1, #31
 80023cc:	4304      	orrs	r4, r0
 80023ce:	00d5      	lsls	r5, r2, #3
 80023d0:	4237      	tst	r7, r6
 80023d2:	d00a      	beq.n	80023ea <__aeabi_d2f+0x32>
 80023d4:	4839      	ldr	r0, [pc, #228]	; (80024bc <__aeabi_d2f+0x104>)
 80023d6:	181e      	adds	r6, r3, r0
 80023d8:	2efe      	cmp	r6, #254	; 0xfe
 80023da:	dd16      	ble.n	800240a <__aeabi_d2f+0x52>
 80023dc:	20ff      	movs	r0, #255	; 0xff
 80023de:	2400      	movs	r4, #0
 80023e0:	05c0      	lsls	r0, r0, #23
 80023e2:	4320      	orrs	r0, r4
 80023e4:	07c9      	lsls	r1, r1, #31
 80023e6:	4308      	orrs	r0, r1
 80023e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <__aeabi_d2f+0x44>
 80023ee:	432c      	orrs	r4, r5
 80023f0:	d026      	beq.n	8002440 <__aeabi_d2f+0x88>
 80023f2:	2205      	movs	r2, #5
 80023f4:	0192      	lsls	r2, r2, #6
 80023f6:	0a54      	lsrs	r4, r2, #9
 80023f8:	b2d8      	uxtb	r0, r3
 80023fa:	e7f1      	b.n	80023e0 <__aeabi_d2f+0x28>
 80023fc:	4325      	orrs	r5, r4
 80023fe:	d0ed      	beq.n	80023dc <__aeabi_d2f+0x24>
 8002400:	2080      	movs	r0, #128	; 0x80
 8002402:	03c0      	lsls	r0, r0, #15
 8002404:	4304      	orrs	r4, r0
 8002406:	20ff      	movs	r0, #255	; 0xff
 8002408:	e7ea      	b.n	80023e0 <__aeabi_d2f+0x28>
 800240a:	2e00      	cmp	r6, #0
 800240c:	dd1b      	ble.n	8002446 <__aeabi_d2f+0x8e>
 800240e:	0192      	lsls	r2, r2, #6
 8002410:	1e53      	subs	r3, r2, #1
 8002412:	419a      	sbcs	r2, r3
 8002414:	00e4      	lsls	r4, r4, #3
 8002416:	0f6d      	lsrs	r5, r5, #29
 8002418:	4322      	orrs	r2, r4
 800241a:	432a      	orrs	r2, r5
 800241c:	0753      	lsls	r3, r2, #29
 800241e:	d048      	beq.n	80024b2 <__aeabi_d2f+0xfa>
 8002420:	230f      	movs	r3, #15
 8002422:	4013      	ands	r3, r2
 8002424:	2b04      	cmp	r3, #4
 8002426:	d000      	beq.n	800242a <__aeabi_d2f+0x72>
 8002428:	3204      	adds	r2, #4
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	04db      	lsls	r3, r3, #19
 800242e:	4013      	ands	r3, r2
 8002430:	d03f      	beq.n	80024b2 <__aeabi_d2f+0xfa>
 8002432:	1c70      	adds	r0, r6, #1
 8002434:	2efe      	cmp	r6, #254	; 0xfe
 8002436:	d0d1      	beq.n	80023dc <__aeabi_d2f+0x24>
 8002438:	0192      	lsls	r2, r2, #6
 800243a:	0a54      	lsrs	r4, r2, #9
 800243c:	b2c0      	uxtb	r0, r0
 800243e:	e7cf      	b.n	80023e0 <__aeabi_d2f+0x28>
 8002440:	2000      	movs	r0, #0
 8002442:	2400      	movs	r4, #0
 8002444:	e7cc      	b.n	80023e0 <__aeabi_d2f+0x28>
 8002446:	0032      	movs	r2, r6
 8002448:	3217      	adds	r2, #23
 800244a:	db22      	blt.n	8002492 <__aeabi_d2f+0xda>
 800244c:	2080      	movs	r0, #128	; 0x80
 800244e:	0400      	lsls	r0, r0, #16
 8002450:	4320      	orrs	r0, r4
 8002452:	241e      	movs	r4, #30
 8002454:	1ba4      	subs	r4, r4, r6
 8002456:	2c1f      	cmp	r4, #31
 8002458:	dd1d      	ble.n	8002496 <__aeabi_d2f+0xde>
 800245a:	2202      	movs	r2, #2
 800245c:	4252      	negs	r2, r2
 800245e:	1b96      	subs	r6, r2, r6
 8002460:	0002      	movs	r2, r0
 8002462:	40f2      	lsrs	r2, r6
 8002464:	0016      	movs	r6, r2
 8002466:	2c20      	cmp	r4, #32
 8002468:	d004      	beq.n	8002474 <__aeabi_d2f+0xbc>
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <__aeabi_d2f+0x108>)
 800246c:	4694      	mov	ip, r2
 800246e:	4463      	add	r3, ip
 8002470:	4098      	lsls	r0, r3
 8002472:	4305      	orrs	r5, r0
 8002474:	002a      	movs	r2, r5
 8002476:	1e53      	subs	r3, r2, #1
 8002478:	419a      	sbcs	r2, r3
 800247a:	4332      	orrs	r2, r6
 800247c:	2600      	movs	r6, #0
 800247e:	0753      	lsls	r3, r2, #29
 8002480:	d1ce      	bne.n	8002420 <__aeabi_d2f+0x68>
 8002482:	2480      	movs	r4, #128	; 0x80
 8002484:	0013      	movs	r3, r2
 8002486:	04e4      	lsls	r4, r4, #19
 8002488:	2001      	movs	r0, #1
 800248a:	4023      	ands	r3, r4
 800248c:	4222      	tst	r2, r4
 800248e:	d1d3      	bne.n	8002438 <__aeabi_d2f+0x80>
 8002490:	e7b0      	b.n	80023f4 <__aeabi_d2f+0x3c>
 8002492:	2300      	movs	r3, #0
 8002494:	e7ad      	b.n	80023f2 <__aeabi_d2f+0x3a>
 8002496:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <__aeabi_d2f+0x10c>)
 8002498:	4694      	mov	ip, r2
 800249a:	002a      	movs	r2, r5
 800249c:	40e2      	lsrs	r2, r4
 800249e:	0014      	movs	r4, r2
 80024a0:	002a      	movs	r2, r5
 80024a2:	4463      	add	r3, ip
 80024a4:	409a      	lsls	r2, r3
 80024a6:	4098      	lsls	r0, r3
 80024a8:	1e55      	subs	r5, r2, #1
 80024aa:	41aa      	sbcs	r2, r5
 80024ac:	4302      	orrs	r2, r0
 80024ae:	4322      	orrs	r2, r4
 80024b0:	e7e4      	b.n	800247c <__aeabi_d2f+0xc4>
 80024b2:	0033      	movs	r3, r6
 80024b4:	e79e      	b.n	80023f4 <__aeabi_d2f+0x3c>
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	000007fe 	.word	0x000007fe
 80024bc:	fffffc80 	.word	0xfffffc80
 80024c0:	fffffca2 	.word	0xfffffca2
 80024c4:	fffffc82 	.word	0xfffffc82

080024c8 <__clzsi2>:
 80024c8:	211c      	movs	r1, #28
 80024ca:	2301      	movs	r3, #1
 80024cc:	041b      	lsls	r3, r3, #16
 80024ce:	4298      	cmp	r0, r3
 80024d0:	d301      	bcc.n	80024d6 <__clzsi2+0xe>
 80024d2:	0c00      	lsrs	r0, r0, #16
 80024d4:	3910      	subs	r1, #16
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	4298      	cmp	r0, r3
 80024da:	d301      	bcc.n	80024e0 <__clzsi2+0x18>
 80024dc:	0a00      	lsrs	r0, r0, #8
 80024de:	3908      	subs	r1, #8
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	4298      	cmp	r0, r3
 80024e4:	d301      	bcc.n	80024ea <__clzsi2+0x22>
 80024e6:	0900      	lsrs	r0, r0, #4
 80024e8:	3904      	subs	r1, #4
 80024ea:	a202      	add	r2, pc, #8	; (adr r2, 80024f4 <__clzsi2+0x2c>)
 80024ec:	5c10      	ldrb	r0, [r2, r0]
 80024ee:	1840      	adds	r0, r0, r1
 80024f0:	4770      	bx	lr
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	02020304 	.word	0x02020304
 80024f8:	01010101 	.word	0x01010101
	...

08002504 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b09b      	sub	sp, #108	; 0x6c
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4ac7      	ldr	r2, [pc, #796]	; (8002830 <HAL_UART_RxCpltCallback+0x32c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d001      	beq.n	800251a <HAL_UART_RxCpltCallback+0x16>
 8002516:	f000 feea 	bl	80032ee <HAL_UART_RxCpltCallback+0xdea>
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 800251a:	49c6      	ldr	r1, [pc, #792]	; (8002834 <HAL_UART_RxCpltCallback+0x330>)
 800251c:	4bc6      	ldr	r3, [pc, #792]	; (8002838 <HAL_UART_RxCpltCallback+0x334>)
 800251e:	2201      	movs	r2, #1
 8002520:	0018      	movs	r0, r3
 8002522:	f003 fd1e 	bl	8005f62 <HAL_UART_Receive_IT>
		char key = rx_buf[0];
 8002526:	215b      	movs	r1, #91	; 0x5b
 8002528:	187b      	adds	r3, r7, r1
 800252a:	4ac2      	ldr	r2, [pc, #776]	; (8002834 <HAL_UART_RxCpltCallback+0x330>)
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	701a      	strb	r2, [r3, #0]
		if (key == 'a' || key == 'b' || key == 'c' || key == 'd' || key == 'e' || key == 'f' || key == 'g' || key == 'h') {
 8002530:	000a      	movs	r2, r1
 8002532:	18bb      	adds	r3, r7, r2
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b61      	cmp	r3, #97	; 0x61
 8002538:	d01d      	beq.n	8002576 <HAL_UART_RxCpltCallback+0x72>
 800253a:	18bb      	adds	r3, r7, r2
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b62      	cmp	r3, #98	; 0x62
 8002540:	d019      	beq.n	8002576 <HAL_UART_RxCpltCallback+0x72>
 8002542:	18bb      	adds	r3, r7, r2
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b63      	cmp	r3, #99	; 0x63
 8002548:	d015      	beq.n	8002576 <HAL_UART_RxCpltCallback+0x72>
 800254a:	18bb      	adds	r3, r7, r2
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d011      	beq.n	8002576 <HAL_UART_RxCpltCallback+0x72>
 8002552:	18bb      	adds	r3, r7, r2
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b65      	cmp	r3, #101	; 0x65
 8002558:	d00d      	beq.n	8002576 <HAL_UART_RxCpltCallback+0x72>
 800255a:	18bb      	adds	r3, r7, r2
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b66      	cmp	r3, #102	; 0x66
 8002560:	d009      	beq.n	8002576 <HAL_UART_RxCpltCallback+0x72>
 8002562:	18bb      	adds	r3, r7, r2
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b67      	cmp	r3, #103	; 0x67
 8002568:	d005      	beq.n	8002576 <HAL_UART_RxCpltCallback+0x72>
 800256a:	18bb      	adds	r3, r7, r2
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b68      	cmp	r3, #104	; 0x68
 8002570:	d001      	beq.n	8002576 <HAL_UART_RxCpltCallback+0x72>
 8002572:	f000 febc 	bl	80032ee <HAL_UART_RxCpltCallback+0xdea>
			int charNum = -1;
 8002576:	2301      	movs	r3, #1
 8002578:	425b      	negs	r3, r3
 800257a:	667b      	str	r3, [r7, #100]	; 0x64
			switch (key) {
 800257c:	235b      	movs	r3, #91	; 0x5b
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	3b61      	subs	r3, #97	; 0x61
 8002584:	2b07      	cmp	r3, #7
 8002586:	d81c      	bhi.n	80025c2 <HAL_UART_RxCpltCallback+0xbe>
 8002588:	009a      	lsls	r2, r3, #2
 800258a:	4bac      	ldr	r3, [pc, #688]	; (800283c <HAL_UART_RxCpltCallback+0x338>)
 800258c:	18d3      	adds	r3, r2, r3
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	469f      	mov	pc, r3
			case 'a':
				charNum = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 8002596:	e014      	b.n	80025c2 <HAL_UART_RxCpltCallback+0xbe>
			case 'b':
				charNum = 1;
 8002598:	2301      	movs	r3, #1
 800259a:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 800259c:	e011      	b.n	80025c2 <HAL_UART_RxCpltCallback+0xbe>
			case 'c':
				charNum = 2;
 800259e:	2302      	movs	r3, #2
 80025a0:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 80025a2:	e00e      	b.n	80025c2 <HAL_UART_RxCpltCallback+0xbe>
			case 'd':
				charNum = 3;
 80025a4:	2303      	movs	r3, #3
 80025a6:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 80025a8:	e00b      	b.n	80025c2 <HAL_UART_RxCpltCallback+0xbe>
			case 'e':
				charNum = 4;
 80025aa:	2304      	movs	r3, #4
 80025ac:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 80025ae:	e008      	b.n	80025c2 <HAL_UART_RxCpltCallback+0xbe>
			case 'f':
				charNum = 5;
 80025b0:	2305      	movs	r3, #5
 80025b2:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 80025b4:	e005      	b.n	80025c2 <HAL_UART_RxCpltCallback+0xbe>
			case 'g':
				charNum = 6;
 80025b6:	2306      	movs	r3, #6
 80025b8:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 80025ba:	e002      	b.n	80025c2 <HAL_UART_RxCpltCallback+0xbe>
			case 'h':
				charNum = 7;
 80025bc:	2307      	movs	r3, #7
 80025be:	667b      	str	r3, [r7, #100]	; 0x64
				break;
 80025c0:	46c0      	nop			; (mov r8, r8)
//			HAL_UART_Transmit(&huart1, "\x1B" , 1, 100);
//			HAL_UART_Transmit(&huart1, "\x5B" , 1, 100);
//			HAL_UART_Transmit(&huart1, "\x32" , 1, 100);
//			HAL_UART_Transmit(&huart1, "\x4A" , 1, 100);
			// Read all the ADCs (adcResultsDMA needs to be uint32_t!!!)
			HAL_ADC_Start_DMA(&hadc, (uint32_t*) adcResultsDMA,
 80025c2:	2311      	movs	r3, #17
 80025c4:	001a      	movs	r2, r3
 80025c6:	499e      	ldr	r1, [pc, #632]	; (8002840 <HAL_UART_RxCpltCallback+0x33c>)
 80025c8:	4b9e      	ldr	r3, [pc, #632]	; (8002844 <HAL_UART_RxCpltCallback+0x340>)
 80025ca:	0018      	movs	r0, r3
 80025cc:	f001 fdea 	bl	80041a4 <HAL_ADC_Start_DMA>
					adcChannelCount);
			for (int i = 0; i < num_gpios; i++) {
 80025d0:	2300      	movs	r3, #0
 80025d2:	663b      	str	r3, [r7, #96]	; 0x60
 80025d4:	e067      	b.n	80026a6 <HAL_UART_RxCpltCallback+0x1a2>

				// Changing to the next GPIO
				if (i == charNum) {
 80025d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025da:	429a      	cmp	r2, r3
 80025dc:	d12b      	bne.n	8002636 <HAL_UART_RxCpltCallback+0x132>
					if (HAL_GPIO_ReadPin(gpios[i].gpio, gpios[i].pin)
 80025de:	4b9a      	ldr	r3, [pc, #616]	; (8002848 <HAL_UART_RxCpltCallback+0x344>)
 80025e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025e2:	00d2      	lsls	r2, r2, #3
 80025e4:	58d0      	ldr	r0, [r2, r3]
 80025e6:	4a98      	ldr	r2, [pc, #608]	; (8002848 <HAL_UART_RxCpltCallback+0x344>)
 80025e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	18d3      	adds	r3, r2, r3
 80025ee:	3304      	adds	r3, #4
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	0019      	movs	r1, r3
 80025f4:	f002 fcea 	bl	8004fcc <HAL_GPIO_ReadPin>
 80025f8:	0003      	movs	r3, r0
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d10e      	bne.n	800261c <HAL_UART_RxCpltCallback+0x118>
							== GPIO_PIN_SET) {
						HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin,
 80025fe:	4b92      	ldr	r3, [pc, #584]	; (8002848 <HAL_UART_RxCpltCallback+0x344>)
 8002600:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002602:	00d2      	lsls	r2, r2, #3
 8002604:	58d0      	ldr	r0, [r2, r3]
 8002606:	4a90      	ldr	r2, [pc, #576]	; (8002848 <HAL_UART_RxCpltCallback+0x344>)
 8002608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	18d3      	adds	r3, r2, r3
 800260e:	3304      	adds	r3, #4
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	0019      	movs	r1, r3
 8002616:	f002 fcf6 	bl	8005006 <HAL_GPIO_WritePin>
 800261a:	e00c      	b.n	8002636 <HAL_UART_RxCpltCallback+0x132>
								GPIO_PIN_RESET);
					} else {

						//			gpio_count == num_gpios - 1 ? gpio_count = 0 : gpio_count++;
						HAL_GPIO_TogglePin(gpios[i].gpio, gpios[i].pin);
 800261c:	4b8a      	ldr	r3, [pc, #552]	; (8002848 <HAL_UART_RxCpltCallback+0x344>)
 800261e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002620:	00d2      	lsls	r2, r2, #3
 8002622:	58d0      	ldr	r0, [r2, r3]
 8002624:	4a88      	ldr	r2, [pc, #544]	; (8002848 <HAL_UART_RxCpltCallback+0x344>)
 8002626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	18d3      	adds	r3, r2, r3
 800262c:	3304      	adds	r3, #4
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	0019      	movs	r1, r3
 8002632:	f002 fd05 	bl	8005040 <HAL_GPIO_TogglePin>
						if (gpio_flags[i] == 1) {
						}
					}
				}

				HAL_UART_Transmit(&huart1, gpio_names[i], strlen(gpio_names[i]), 100);
 8002636:	4b85      	ldr	r3, [pc, #532]	; (800284c <HAL_UART_RxCpltCallback+0x348>)
 8002638:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	58d4      	ldr	r4, [r2, r3]
 800263e:	4b83      	ldr	r3, [pc, #524]	; (800284c <HAL_UART_RxCpltCallback+0x348>)
 8002640:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002642:	0092      	lsls	r2, r2, #2
 8002644:	58d3      	ldr	r3, [r2, r3]
 8002646:	0018      	movs	r0, r3
 8002648:	f7fd fd5e 	bl	8000108 <strlen>
 800264c:	0003      	movs	r3, r0
 800264e:	b29a      	uxth	r2, r3
 8002650:	4879      	ldr	r0, [pc, #484]	; (8002838 <HAL_UART_RxCpltCallback+0x334>)
 8002652:	2364      	movs	r3, #100	; 0x64
 8002654:	0021      	movs	r1, r4
 8002656:	f003 fbdb 	bl	8005e10 <HAL_UART_Transmit>
				if (HAL_GPIO_ReadPin(gpios[i].gpio, gpios[i].pin)
 800265a:	4b7b      	ldr	r3, [pc, #492]	; (8002848 <HAL_UART_RxCpltCallback+0x344>)
 800265c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800265e:	00d2      	lsls	r2, r2, #3
 8002660:	58d0      	ldr	r0, [r2, r3]
 8002662:	4a79      	ldr	r2, [pc, #484]	; (8002848 <HAL_UART_RxCpltCallback+0x344>)
 8002664:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	18d3      	adds	r3, r2, r3
 800266a:	3304      	adds	r3, #4
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	0019      	movs	r1, r3
 8002670:	f002 fcac 	bl	8004fcc <HAL_GPIO_ReadPin>
 8002674:	0003      	movs	r3, r0
 8002676:	2b01      	cmp	r3, #1
 8002678:	d106      	bne.n	8002688 <HAL_UART_RxCpltCallback+0x184>
						== GPIO_PIN_SET) {
					HAL_UART_Transmit(&huart1, ": H", 3, 100);
 800267a:	4975      	ldr	r1, [pc, #468]	; (8002850 <HAL_UART_RxCpltCallback+0x34c>)
 800267c:	486e      	ldr	r0, [pc, #440]	; (8002838 <HAL_UART_RxCpltCallback+0x334>)
 800267e:	2364      	movs	r3, #100	; 0x64
 8002680:	2203      	movs	r2, #3
 8002682:	f003 fbc5 	bl	8005e10 <HAL_UART_Transmit>
 8002686:	e005      	b.n	8002694 <HAL_UART_RxCpltCallback+0x190>
				} else {
					HAL_UART_Transmit(&huart1, ": L", 3, 100);
 8002688:	4972      	ldr	r1, [pc, #456]	; (8002854 <HAL_UART_RxCpltCallback+0x350>)
 800268a:	486b      	ldr	r0, [pc, #428]	; (8002838 <HAL_UART_RxCpltCallback+0x334>)
 800268c:	2364      	movs	r3, #100	; 0x64
 800268e:	2203      	movs	r2, #3
 8002690:	f003 fbbe 	bl	8005e10 <HAL_UART_Transmit>
				}
				HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8002694:	4970      	ldr	r1, [pc, #448]	; (8002858 <HAL_UART_RxCpltCallback+0x354>)
 8002696:	4868      	ldr	r0, [pc, #416]	; (8002838 <HAL_UART_RxCpltCallback+0x334>)
 8002698:	2364      	movs	r3, #100	; 0x64
 800269a:	2202      	movs	r2, #2
 800269c:	f003 fbb8 	bl	8005e10 <HAL_UART_Transmit>
			for (int i = 0; i < num_gpios; i++) {
 80026a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026a2:	3301      	adds	r3, #1
 80026a4:	663b      	str	r3, [r7, #96]	; 0x60
 80026a6:	4b6d      	ldr	r3, [pc, #436]	; (800285c <HAL_UART_RxCpltCallback+0x358>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026ac:	429a      	cmp	r2, r3
 80026ae:	db92      	blt.n	80025d6 <HAL_UART_RxCpltCallback+0xd2>
			}

			HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 80026b0:	4969      	ldr	r1, [pc, #420]	; (8002858 <HAL_UART_RxCpltCallback+0x354>)
 80026b2:	4861      	ldr	r0, [pc, #388]	; (8002838 <HAL_UART_RxCpltCallback+0x334>)
 80026b4:	2364      	movs	r3, #100	; 0x64
 80026b6:	2202      	movs	r2, #2
 80026b8:	f003 fbaa 	bl	8005e10 <HAL_UART_Transmit>

			// For each ADC get its voltage
			for (int i = 0; i < adcChannelCount; i++) {
 80026bc:	2300      	movs	r3, #0
 80026be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026c0:	f000 fe09 	bl	80032d6 <HAL_UART_RxCpltCallback+0xdd2>

				// Parsing ADCs value based on gpio_count
				uint16_t adc = adcResultsDMA[i];
 80026c4:	4b5e      	ldr	r3, [pc, #376]	; (8002840 <HAL_UART_RxCpltCallback+0x33c>)
 80026c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80026c8:	0092      	lsls	r2, r2, #2
 80026ca:	58d2      	ldr	r2, [r2, r3]
 80026cc:	2158      	movs	r1, #88	; 0x58
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	801a      	strh	r2, [r3, #0]
				uint8_t adcval[2];
				adcval[0] = ((adc & 0xFF00) >> 8); // ADC reading MSB
 80026d2:	187b      	adds	r3, r7, r1
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	b29b      	uxth	r3, r3
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	2010      	movs	r0, #16
 80026de:	183b      	adds	r3, r7, r0
 80026e0:	701a      	strb	r2, [r3, #0]
				adcval[1] = (adc & 0xFF); // ADC reading LSB
 80026e2:	187b      	adds	r3, r7, r1
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	183b      	adds	r3, r7, r0
 80026ea:	705a      	strb	r2, [r3, #1]

				// Processing results for UART Transmission

				char value[8];
				if (i == 0) { // When i is < 8 you read from one of the ADC channels
 80026ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d150      	bne.n	8002794 <HAL_UART_RxCpltCallback+0x290>
					float voltage = adc * (3.3 / 4095) * 6;
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f7ff fdc0 	bl	800227c <__aeabi_i2d>
 80026fc:	4a58      	ldr	r2, [pc, #352]	; (8002860 <HAL_UART_RxCpltCallback+0x35c>)
 80026fe:	4b59      	ldr	r3, [pc, #356]	; (8002864 <HAL_UART_RxCpltCallback+0x360>)
 8002700:	f7fe ff6a 	bl	80015d8 <__aeabi_dmul>
 8002704:	0002      	movs	r2, r0
 8002706:	000b      	movs	r3, r1
 8002708:	0010      	movs	r0, r2
 800270a:	0019      	movs	r1, r3
 800270c:	2200      	movs	r2, #0
 800270e:	4b56      	ldr	r3, [pc, #344]	; (8002868 <HAL_UART_RxCpltCallback+0x364>)
 8002710:	f7fe ff62 	bl	80015d8 <__aeabi_dmul>
 8002714:	0002      	movs	r2, r0
 8002716:	000b      	movs	r3, r1
 8002718:	0010      	movs	r0, r2
 800271a:	0019      	movs	r1, r3
 800271c:	f7ff fe4c 	bl	80023b8 <__aeabi_d2f>
 8002720:	1c03      	adds	r3, r0, #0
 8002722:	617b      	str	r3, [r7, #20]
					sprintf(value, "%f", voltage);
 8002724:	6978      	ldr	r0, [r7, #20]
 8002726:	f7ff fdff 	bl	8002328 <__aeabi_f2d>
 800272a:	0002      	movs	r2, r0
 800272c:	000b      	movs	r3, r1
 800272e:	494f      	ldr	r1, [pc, #316]	; (800286c <HAL_UART_RxCpltCallback+0x368>)
 8002730:	2008      	movs	r0, #8
 8002732:	1838      	adds	r0, r7, r0
 8002734:	f005 fbc6 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "END_mon PA0", 11, 100);
 8002738:	494d      	ldr	r1, [pc, #308]	; (8002870 <HAL_UART_RxCpltCallback+0x36c>)
 800273a:	483f      	ldr	r0, [pc, #252]	; (8002838 <HAL_UART_RxCpltCallback+0x334>)
 800273c:	2364      	movs	r3, #100	; 0x64
 800273e:	220b      	movs	r2, #11
 8002740:	f003 fb66 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8002744:	6978      	ldr	r0, [r7, #20]
 8002746:	f7ff fdef 	bl	8002328 <__aeabi_f2d>
 800274a:	4a4a      	ldr	r2, [pc, #296]	; (8002874 <HAL_UART_RxCpltCallback+0x370>)
 800274c:	4b4a      	ldr	r3, [pc, #296]	; (8002878 <HAL_UART_RxCpltCallback+0x374>)
 800274e:	f7fd fe83 	bl	8000458 <__aeabi_dcmplt>
 8002752:	1e03      	subs	r3, r0, #0
 8002754:	d00f      	beq.n	8002776 <HAL_UART_RxCpltCallback+0x272>
 8002756:	6978      	ldr	r0, [r7, #20]
 8002758:	f7ff fde6 	bl	8002328 <__aeabi_f2d>
 800275c:	4a47      	ldr	r2, [pc, #284]	; (800287c <HAL_UART_RxCpltCallback+0x378>)
 800275e:	4b48      	ldr	r3, [pc, #288]	; (8002880 <HAL_UART_RxCpltCallback+0x37c>)
 8002760:	f7fd fe8e 	bl	8000480 <__aeabi_dcmpgt>
 8002764:	1e03      	subs	r3, r0, #0
 8002766:	d006      	beq.n	8002776 <HAL_UART_RxCpltCallback+0x272>
						gpio_flags[i] = 1;
 8002768:	4b46      	ldr	r3, [pc, #280]	; (8002884 <HAL_UART_RxCpltCallback+0x380>)
 800276a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800276c:	0092      	lsls	r2, r2, #2
 800276e:	2101      	movs	r1, #1
 8002770:	50d1      	str	r1, [r2, r3]
 8002772:	f000 fd9a 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 8002776:	2100      	movs	r1, #0
 8002778:	6978      	ldr	r0, [r7, #20]
 800277a:	f7fd fea1 	bl	80004c0 <__aeabi_fcmpeq>
 800277e:	1e03      	subs	r3, r0, #0
 8002780:	d001      	beq.n	8002786 <HAL_UART_RxCpltCallback+0x282>
 8002782:	f000 fd92 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 8002786:	4b3f      	ldr	r3, [pc, #252]	; (8002884 <HAL_UART_RxCpltCallback+0x380>)
 8002788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800278a:	0092      	lsls	r2, r2, #2
 800278c:	2100      	movs	r1, #0
 800278e:	50d1      	str	r1, [r2, r3]
 8002790:	f000 fd8b 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
					}

				} else if (i == 1) {
 8002794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002796:	2b01      	cmp	r3, #1
 8002798:	d000      	beq.n	800279c <HAL_UART_RxCpltCallback+0x298>
 800279a:	e077      	b.n	800288c <HAL_UART_RxCpltCallback+0x388>
					float voltage = adc * (3.3 / 4095);
 800279c:	2358      	movs	r3, #88	; 0x58
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7ff fd6a 	bl	800227c <__aeabi_i2d>
 80027a8:	4a2d      	ldr	r2, [pc, #180]	; (8002860 <HAL_UART_RxCpltCallback+0x35c>)
 80027aa:	4b2e      	ldr	r3, [pc, #184]	; (8002864 <HAL_UART_RxCpltCallback+0x360>)
 80027ac:	f7fe ff14 	bl	80015d8 <__aeabi_dmul>
 80027b0:	0002      	movs	r2, r0
 80027b2:	000b      	movs	r3, r1
 80027b4:	0010      	movs	r0, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	f7ff fdfe 	bl	80023b8 <__aeabi_d2f>
 80027bc:	1c03      	adds	r3, r0, #0
 80027be:	61bb      	str	r3, [r7, #24]
					sprintf(value, "%f", voltage);
 80027c0:	69b8      	ldr	r0, [r7, #24]
 80027c2:	f7ff fdb1 	bl	8002328 <__aeabi_f2d>
 80027c6:	0002      	movs	r2, r0
 80027c8:	000b      	movs	r3, r1
 80027ca:	4928      	ldr	r1, [pc, #160]	; (800286c <HAL_UART_RxCpltCallback+0x368>)
 80027cc:	2008      	movs	r0, #8
 80027ce:	1838      	adds	r0, r7, r0
 80027d0:	f005 fb78 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "BUS_Imon PA1", 12, 100);
 80027d4:	492c      	ldr	r1, [pc, #176]	; (8002888 <HAL_UART_RxCpltCallback+0x384>)
 80027d6:	4818      	ldr	r0, [pc, #96]	; (8002838 <HAL_UART_RxCpltCallback+0x334>)
 80027d8:	2364      	movs	r3, #100	; 0x64
 80027da:	220c      	movs	r2, #12
 80027dc:	f003 fb18 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 80027e0:	69b8      	ldr	r0, [r7, #24]
 80027e2:	f7ff fda1 	bl	8002328 <__aeabi_f2d>
 80027e6:	4a23      	ldr	r2, [pc, #140]	; (8002874 <HAL_UART_RxCpltCallback+0x370>)
 80027e8:	4b23      	ldr	r3, [pc, #140]	; (8002878 <HAL_UART_RxCpltCallback+0x374>)
 80027ea:	f7fd fe35 	bl	8000458 <__aeabi_dcmplt>
 80027ee:	1e03      	subs	r3, r0, #0
 80027f0:	d00f      	beq.n	8002812 <HAL_UART_RxCpltCallback+0x30e>
 80027f2:	69b8      	ldr	r0, [r7, #24]
 80027f4:	f7ff fd98 	bl	8002328 <__aeabi_f2d>
 80027f8:	4a20      	ldr	r2, [pc, #128]	; (800287c <HAL_UART_RxCpltCallback+0x378>)
 80027fa:	4b21      	ldr	r3, [pc, #132]	; (8002880 <HAL_UART_RxCpltCallback+0x37c>)
 80027fc:	f7fd fe40 	bl	8000480 <__aeabi_dcmpgt>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d006      	beq.n	8002812 <HAL_UART_RxCpltCallback+0x30e>
						gpio_flags[i] = 1;
 8002804:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <HAL_UART_RxCpltCallback+0x380>)
 8002806:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002808:	0092      	lsls	r2, r2, #2
 800280a:	2101      	movs	r1, #1
 800280c:	50d1      	str	r1, [r2, r3]
 800280e:	f000 fd4c 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 8002812:	2100      	movs	r1, #0
 8002814:	69b8      	ldr	r0, [r7, #24]
 8002816:	f7fd fe53 	bl	80004c0 <__aeabi_fcmpeq>
 800281a:	1e03      	subs	r3, r0, #0
 800281c:	d001      	beq.n	8002822 <HAL_UART_RxCpltCallback+0x31e>
 800281e:	f000 fd44 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_UART_RxCpltCallback+0x380>)
 8002824:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002826:	0092      	lsls	r2, r2, #2
 8002828:	2100      	movs	r1, #0
 800282a:	50d1      	str	r1, [r2, r3]
 800282c:	f000 fd3d 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
 8002830:	40013800 	.word	0x40013800
 8002834:	20000374 	.word	0x20000374
 8002838:	200002f0 	.word	0x200002f0
 800283c:	0800be70 	.word	0x0800be70
 8002840:	200003d8 	.word	0x200003d8
 8002844:	20000220 	.word	0x20000220
 8002848:	0800be30 	.word	0x0800be30
 800284c:	20000000 	.word	0x20000000
 8002850:	0800bc9c 	.word	0x0800bc9c
 8002854:	0800bca0 	.word	0x0800bca0
 8002858:	0800bca4 	.word	0x0800bca4
 800285c:	20000020 	.word	0x20000020
 8002860:	e734d9b4 	.word	0xe734d9b4
 8002864:	3f4a680c 	.word	0x3f4a680c
 8002868:	40180000 	.word	0x40180000
 800286c:	0800bca8 	.word	0x0800bca8
 8002870:	0800bcac 	.word	0x0800bcac
 8002874:	33333333 	.word	0x33333333
 8002878:	400b3333 	.word	0x400b3333
 800287c:	9999999a 	.word	0x9999999a
 8002880:	40099999 	.word	0x40099999
 8002884:	2000041c 	.word	0x2000041c
 8002888:	0800bcb8 	.word	0x0800bcb8
					}

				} else if (i == 2) {
 800288c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288e:	2b02      	cmp	r3, #2
 8002890:	d151      	bne.n	8002936 <HAL_UART_RxCpltCallback+0x432>
					float voltage = adc * (3.3 / 4095) * 2;
 8002892:	2358      	movs	r3, #88	; 0x58
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	0018      	movs	r0, r3
 800289a:	f7ff fcef 	bl	800227c <__aeabi_i2d>
 800289e:	4acf      	ldr	r2, [pc, #828]	; (8002bdc <HAL_UART_RxCpltCallback+0x6d8>)
 80028a0:	4bcf      	ldr	r3, [pc, #828]	; (8002be0 <HAL_UART_RxCpltCallback+0x6dc>)
 80028a2:	f7fe fe99 	bl	80015d8 <__aeabi_dmul>
 80028a6:	0002      	movs	r2, r0
 80028a8:	000b      	movs	r3, r1
 80028aa:	0010      	movs	r0, r2
 80028ac:	0019      	movs	r1, r3
 80028ae:	0002      	movs	r2, r0
 80028b0:	000b      	movs	r3, r1
 80028b2:	f7fd ff53 	bl	800075c <__aeabi_dadd>
 80028b6:	0002      	movs	r2, r0
 80028b8:	000b      	movs	r3, r1
 80028ba:	0010      	movs	r0, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	f7ff fd7b 	bl	80023b8 <__aeabi_d2f>
 80028c2:	1c03      	adds	r3, r0, #0
 80028c4:	61fb      	str	r3, [r7, #28]
					sprintf(value, "%f", voltage);
 80028c6:	69f8      	ldr	r0, [r7, #28]
 80028c8:	f7ff fd2e 	bl	8002328 <__aeabi_f2d>
 80028cc:	0002      	movs	r2, r0
 80028ce:	000b      	movs	r3, r1
 80028d0:	49c4      	ldr	r1, [pc, #784]	; (8002be4 <HAL_UART_RxCpltCallback+0x6e0>)
 80028d2:	2008      	movs	r0, #8
 80028d4:	1838      	adds	r0, r7, r0
 80028d6:	f005 faf5 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "BUS_Vmon PA2", 12, 100);
 80028da:	49c3      	ldr	r1, [pc, #780]	; (8002be8 <HAL_UART_RxCpltCallback+0x6e4>)
 80028dc:	48c3      	ldr	r0, [pc, #780]	; (8002bec <HAL_UART_RxCpltCallback+0x6e8>)
 80028de:	2364      	movs	r3, #100	; 0x64
 80028e0:	220c      	movs	r2, #12
 80028e2:	f003 fa95 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 80028e6:	69f8      	ldr	r0, [r7, #28]
 80028e8:	f7ff fd1e 	bl	8002328 <__aeabi_f2d>
 80028ec:	4ac0      	ldr	r2, [pc, #768]	; (8002bf0 <HAL_UART_RxCpltCallback+0x6ec>)
 80028ee:	4bc1      	ldr	r3, [pc, #772]	; (8002bf4 <HAL_UART_RxCpltCallback+0x6f0>)
 80028f0:	f7fd fdb2 	bl	8000458 <__aeabi_dcmplt>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d00f      	beq.n	8002918 <HAL_UART_RxCpltCallback+0x414>
 80028f8:	69f8      	ldr	r0, [r7, #28]
 80028fa:	f7ff fd15 	bl	8002328 <__aeabi_f2d>
 80028fe:	4abe      	ldr	r2, [pc, #760]	; (8002bf8 <HAL_UART_RxCpltCallback+0x6f4>)
 8002900:	4bbe      	ldr	r3, [pc, #760]	; (8002bfc <HAL_UART_RxCpltCallback+0x6f8>)
 8002902:	f7fd fdbd 	bl	8000480 <__aeabi_dcmpgt>
 8002906:	1e03      	subs	r3, r0, #0
 8002908:	d006      	beq.n	8002918 <HAL_UART_RxCpltCallback+0x414>
						gpio_flags[i] = 1;
 800290a:	4bbd      	ldr	r3, [pc, #756]	; (8002c00 <HAL_UART_RxCpltCallback+0x6fc>)
 800290c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800290e:	0092      	lsls	r2, r2, #2
 8002910:	2101      	movs	r1, #1
 8002912:	50d1      	str	r1, [r2, r3]
 8002914:	f000 fcc9 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 8002918:	2100      	movs	r1, #0
 800291a:	69f8      	ldr	r0, [r7, #28]
 800291c:	f7fd fdd0 	bl	80004c0 <__aeabi_fcmpeq>
 8002920:	1e03      	subs	r3, r0, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_RxCpltCallback+0x424>
 8002924:	f000 fcc1 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 8002928:	4bb5      	ldr	r3, [pc, #724]	; (8002c00 <HAL_UART_RxCpltCallback+0x6fc>)
 800292a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800292c:	0092      	lsls	r2, r2, #2
 800292e:	2100      	movs	r1, #0
 8002930:	50d1      	str	r1, [r2, r3]
 8002932:	f000 fcba 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
					}

				} else if (i == 3) {
 8002936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002938:	2b03      	cmp	r3, #3
 800293a:	d151      	bne.n	80029e0 <HAL_UART_RxCpltCallback+0x4dc>
					float voltage = adc * (3.3 / 4095) * 1.1 ;
 800293c:	2358      	movs	r3, #88	; 0x58
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	0018      	movs	r0, r3
 8002944:	f7ff fc9a 	bl	800227c <__aeabi_i2d>
 8002948:	4aa4      	ldr	r2, [pc, #656]	; (8002bdc <HAL_UART_RxCpltCallback+0x6d8>)
 800294a:	4ba5      	ldr	r3, [pc, #660]	; (8002be0 <HAL_UART_RxCpltCallback+0x6dc>)
 800294c:	f7fe fe44 	bl	80015d8 <__aeabi_dmul>
 8002950:	0002      	movs	r2, r0
 8002952:	000b      	movs	r3, r1
 8002954:	0010      	movs	r0, r2
 8002956:	0019      	movs	r1, r3
 8002958:	4aa7      	ldr	r2, [pc, #668]	; (8002bf8 <HAL_UART_RxCpltCallback+0x6f4>)
 800295a:	4baa      	ldr	r3, [pc, #680]	; (8002c04 <HAL_UART_RxCpltCallback+0x700>)
 800295c:	f7fe fe3c 	bl	80015d8 <__aeabi_dmul>
 8002960:	0002      	movs	r2, r0
 8002962:	000b      	movs	r3, r1
 8002964:	0010      	movs	r0, r2
 8002966:	0019      	movs	r1, r3
 8002968:	f7ff fd26 	bl	80023b8 <__aeabi_d2f>
 800296c:	1c03      	adds	r3, r0, #0
 800296e:	623b      	str	r3, [r7, #32]
					// Need to multiply by 2
					sprintf(value, "%f", voltage);
 8002970:	6a38      	ldr	r0, [r7, #32]
 8002972:	f7ff fcd9 	bl	8002328 <__aeabi_f2d>
 8002976:	0002      	movs	r2, r0
 8002978:	000b      	movs	r3, r1
 800297a:	499a      	ldr	r1, [pc, #616]	; (8002be4 <HAL_UART_RxCpltCallback+0x6e0>)
 800297c:	2008      	movs	r0, #8
 800297e:	1838      	adds	r0, r7, r0
 8002980:	f005 faa0 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "3v3_mon PA3", 11, 100);
 8002984:	49a0      	ldr	r1, [pc, #640]	; (8002c08 <HAL_UART_RxCpltCallback+0x704>)
 8002986:	4899      	ldr	r0, [pc, #612]	; (8002bec <HAL_UART_RxCpltCallback+0x6e8>)
 8002988:	2364      	movs	r3, #100	; 0x64
 800298a:	220b      	movs	r2, #11
 800298c:	f003 fa40 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8002990:	6a38      	ldr	r0, [r7, #32]
 8002992:	f7ff fcc9 	bl	8002328 <__aeabi_f2d>
 8002996:	4a96      	ldr	r2, [pc, #600]	; (8002bf0 <HAL_UART_RxCpltCallback+0x6ec>)
 8002998:	4b96      	ldr	r3, [pc, #600]	; (8002bf4 <HAL_UART_RxCpltCallback+0x6f0>)
 800299a:	f7fd fd5d 	bl	8000458 <__aeabi_dcmplt>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d00f      	beq.n	80029c2 <HAL_UART_RxCpltCallback+0x4be>
 80029a2:	6a38      	ldr	r0, [r7, #32]
 80029a4:	f7ff fcc0 	bl	8002328 <__aeabi_f2d>
 80029a8:	4a93      	ldr	r2, [pc, #588]	; (8002bf8 <HAL_UART_RxCpltCallback+0x6f4>)
 80029aa:	4b94      	ldr	r3, [pc, #592]	; (8002bfc <HAL_UART_RxCpltCallback+0x6f8>)
 80029ac:	f7fd fd68 	bl	8000480 <__aeabi_dcmpgt>
 80029b0:	1e03      	subs	r3, r0, #0
 80029b2:	d006      	beq.n	80029c2 <HAL_UART_RxCpltCallback+0x4be>
						gpio_flags[i] = 1;
 80029b4:	4b92      	ldr	r3, [pc, #584]	; (8002c00 <HAL_UART_RxCpltCallback+0x6fc>)
 80029b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80029b8:	0092      	lsls	r2, r2, #2
 80029ba:	2101      	movs	r1, #1
 80029bc:	50d1      	str	r1, [r2, r3]
 80029be:	f000 fc74 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 80029c2:	2100      	movs	r1, #0
 80029c4:	6a38      	ldr	r0, [r7, #32]
 80029c6:	f7fd fd7b 	bl	80004c0 <__aeabi_fcmpeq>
 80029ca:	1e03      	subs	r3, r0, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_UART_RxCpltCallback+0x4ce>
 80029ce:	f000 fc6c 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 80029d2:	4b8b      	ldr	r3, [pc, #556]	; (8002c00 <HAL_UART_RxCpltCallback+0x6fc>)
 80029d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80029d6:	0092      	lsls	r2, r2, #2
 80029d8:	2100      	movs	r1, #0
 80029da:	50d1      	str	r1, [r2, r3]
 80029dc:	f000 fc65 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
					}

				} else if (i == 4) {
 80029e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d151      	bne.n	8002a8a <HAL_UART_RxCpltCallback+0x586>
					float voltage = adc * (3.3 / 4095) * -62.5;
 80029e6:	2358      	movs	r3, #88	; 0x58
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7ff fc45 	bl	800227c <__aeabi_i2d>
 80029f2:	4a7a      	ldr	r2, [pc, #488]	; (8002bdc <HAL_UART_RxCpltCallback+0x6d8>)
 80029f4:	4b7a      	ldr	r3, [pc, #488]	; (8002be0 <HAL_UART_RxCpltCallback+0x6dc>)
 80029f6:	f7fe fdef 	bl	80015d8 <__aeabi_dmul>
 80029fa:	0002      	movs	r2, r0
 80029fc:	000b      	movs	r3, r1
 80029fe:	0010      	movs	r0, r2
 8002a00:	0019      	movs	r1, r3
 8002a02:	2200      	movs	r2, #0
 8002a04:	4b81      	ldr	r3, [pc, #516]	; (8002c0c <HAL_UART_RxCpltCallback+0x708>)
 8002a06:	f7fe fde7 	bl	80015d8 <__aeabi_dmul>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	000b      	movs	r3, r1
 8002a0e:	0010      	movs	r0, r2
 8002a10:	0019      	movs	r1, r3
 8002a12:	f7ff fcd1 	bl	80023b8 <__aeabi_d2f>
 8002a16:	1c03      	adds	r3, r0, #0
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
					sprintf(value, "%f", voltage);
 8002a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a1c:	f7ff fc84 	bl	8002328 <__aeabi_f2d>
 8002a20:	0002      	movs	r2, r0
 8002a22:	000b      	movs	r3, r1
 8002a24:	496f      	ldr	r1, [pc, #444]	; (8002be4 <HAL_UART_RxCpltCallback+0x6e0>)
 8002a26:	2008      	movs	r0, #8
 8002a28:	1838      	adds	r0, r7, r0
 8002a2a:	f005 fa4b 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "n150v_mon PA5", 13, 100);
 8002a2e:	4978      	ldr	r1, [pc, #480]	; (8002c10 <HAL_UART_RxCpltCallback+0x70c>)
 8002a30:	486e      	ldr	r0, [pc, #440]	; (8002bec <HAL_UART_RxCpltCallback+0x6e8>)
 8002a32:	2364      	movs	r3, #100	; 0x64
 8002a34:	220d      	movs	r2, #13
 8002a36:	f003 f9eb 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage > -150.1 && voltage < -149.9) {
 8002a3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a3c:	f7ff fc74 	bl	8002328 <__aeabi_f2d>
 8002a40:	4a6b      	ldr	r2, [pc, #428]	; (8002bf0 <HAL_UART_RxCpltCallback+0x6ec>)
 8002a42:	4b74      	ldr	r3, [pc, #464]	; (8002c14 <HAL_UART_RxCpltCallback+0x710>)
 8002a44:	f7fd fd1c 	bl	8000480 <__aeabi_dcmpgt>
 8002a48:	1e03      	subs	r3, r0, #0
 8002a4a:	d00f      	beq.n	8002a6c <HAL_UART_RxCpltCallback+0x568>
 8002a4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a4e:	f7ff fc6b 	bl	8002328 <__aeabi_f2d>
 8002a52:	4a71      	ldr	r2, [pc, #452]	; (8002c18 <HAL_UART_RxCpltCallback+0x714>)
 8002a54:	4b71      	ldr	r3, [pc, #452]	; (8002c1c <HAL_UART_RxCpltCallback+0x718>)
 8002a56:	f7fd fcff 	bl	8000458 <__aeabi_dcmplt>
 8002a5a:	1e03      	subs	r3, r0, #0
 8002a5c:	d006      	beq.n	8002a6c <HAL_UART_RxCpltCallback+0x568>
						gpio_flags[i] = 1;
 8002a5e:	4b68      	ldr	r3, [pc, #416]	; (8002c00 <HAL_UART_RxCpltCallback+0x6fc>)
 8002a60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	2101      	movs	r1, #1
 8002a66:	50d1      	str	r1, [r2, r3]
 8002a68:	f000 fc1f 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a70:	f7fd fd26 	bl	80004c0 <__aeabi_fcmpeq>
 8002a74:	1e03      	subs	r3, r0, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_UART_RxCpltCallback+0x578>
 8002a78:	f000 fc17 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 8002a7c:	4b60      	ldr	r3, [pc, #384]	; (8002c00 <HAL_UART_RxCpltCallback+0x6fc>)
 8002a7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a80:	0092      	lsls	r2, r2, #2
 8002a82:	2100      	movs	r1, #0
 8002a84:	50d1      	str	r1, [r2, r3]
 8002a86:	f000 fc10 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
					}

				} else if (i == 5) {
 8002a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8c:	2b05      	cmp	r3, #5
 8002a8e:	d151      	bne.n	8002b34 <HAL_UART_RxCpltCallback+0x630>
					float voltage = adc * (3.3 / 4095) * -320;
 8002a90:	2358      	movs	r3, #88	; 0x58
 8002a92:	18fb      	adds	r3, r7, r3
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7ff fbf0 	bl	800227c <__aeabi_i2d>
 8002a9c:	4a4f      	ldr	r2, [pc, #316]	; (8002bdc <HAL_UART_RxCpltCallback+0x6d8>)
 8002a9e:	4b50      	ldr	r3, [pc, #320]	; (8002be0 <HAL_UART_RxCpltCallback+0x6dc>)
 8002aa0:	f7fe fd9a 	bl	80015d8 <__aeabi_dmul>
 8002aa4:	0002      	movs	r2, r0
 8002aa6:	000b      	movs	r3, r1
 8002aa8:	0010      	movs	r0, r2
 8002aaa:	0019      	movs	r1, r3
 8002aac:	2200      	movs	r2, #0
 8002aae:	4b5c      	ldr	r3, [pc, #368]	; (8002c20 <HAL_UART_RxCpltCallback+0x71c>)
 8002ab0:	f7fe fd92 	bl	80015d8 <__aeabi_dmul>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	000b      	movs	r3, r1
 8002ab8:	0010      	movs	r0, r2
 8002aba:	0019      	movs	r1, r3
 8002abc:	f7ff fc7c 	bl	80023b8 <__aeabi_d2f>
 8002ac0:	1c03      	adds	r3, r0, #0
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
					sprintf(value, "%f", voltage);
 8002ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ac6:	f7ff fc2f 	bl	8002328 <__aeabi_f2d>
 8002aca:	0002      	movs	r2, r0
 8002acc:	000b      	movs	r3, r1
 8002ace:	4945      	ldr	r1, [pc, #276]	; (8002be4 <HAL_UART_RxCpltCallback+0x6e0>)
 8002ad0:	2008      	movs	r0, #8
 8002ad2:	1838      	adds	r0, r7, r0
 8002ad4:	f005 f9f6 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "n800v_mon PA6", 13, 100);
 8002ad8:	4952      	ldr	r1, [pc, #328]	; (8002c24 <HAL_UART_RxCpltCallback+0x720>)
 8002ada:	4844      	ldr	r0, [pc, #272]	; (8002bec <HAL_UART_RxCpltCallback+0x6e8>)
 8002adc:	2364      	movs	r3, #100	; 0x64
 8002ade:	220d      	movs	r2, #13
 8002ae0:	f003 f996 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8002ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ae6:	f7ff fc1f 	bl	8002328 <__aeabi_f2d>
 8002aea:	4a41      	ldr	r2, [pc, #260]	; (8002bf0 <HAL_UART_RxCpltCallback+0x6ec>)
 8002aec:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <HAL_UART_RxCpltCallback+0x6f0>)
 8002aee:	f7fd fcb3 	bl	8000458 <__aeabi_dcmplt>
 8002af2:	1e03      	subs	r3, r0, #0
 8002af4:	d00f      	beq.n	8002b16 <HAL_UART_RxCpltCallback+0x612>
 8002af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002af8:	f7ff fc16 	bl	8002328 <__aeabi_f2d>
 8002afc:	4a3e      	ldr	r2, [pc, #248]	; (8002bf8 <HAL_UART_RxCpltCallback+0x6f4>)
 8002afe:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <HAL_UART_RxCpltCallback+0x6f8>)
 8002b00:	f7fd fcbe 	bl	8000480 <__aeabi_dcmpgt>
 8002b04:	1e03      	subs	r3, r0, #0
 8002b06:	d006      	beq.n	8002b16 <HAL_UART_RxCpltCallback+0x612>
						gpio_flags[i] = 1;
 8002b08:	4b3d      	ldr	r3, [pc, #244]	; (8002c00 <HAL_UART_RxCpltCallback+0x6fc>)
 8002b0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b0c:	0092      	lsls	r2, r2, #2
 8002b0e:	2101      	movs	r1, #1
 8002b10:	50d1      	str	r1, [r2, r3]
 8002b12:	f000 fbca 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 8002b16:	2100      	movs	r1, #0
 8002b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b1a:	f7fd fcd1 	bl	80004c0 <__aeabi_fcmpeq>
 8002b1e:	1e03      	subs	r3, r0, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_UART_RxCpltCallback+0x622>
 8002b22:	f000 fbc2 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 8002b26:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <HAL_UART_RxCpltCallback+0x6fc>)
 8002b28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b2a:	0092      	lsls	r2, r2, #2
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	50d1      	str	r1, [r2, r3]
 8002b30:	f000 fbbb 	bl	80032aa <HAL_UART_RxCpltCallback+0xda6>
					}

				} else if (i == 6) {
 8002b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b36:	2b06      	cmp	r3, #6
 8002b38:	d000      	beq.n	8002b3c <HAL_UART_RxCpltCallback+0x638>
 8002b3a:	e079      	b.n	8002c30 <HAL_UART_RxCpltCallback+0x72c>
					float voltage = adc * (3.3 / 4095) * -50;
 8002b3c:	2358      	movs	r3, #88	; 0x58
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	0018      	movs	r0, r3
 8002b44:	f7ff fb9a 	bl	800227c <__aeabi_i2d>
 8002b48:	4a24      	ldr	r2, [pc, #144]	; (8002bdc <HAL_UART_RxCpltCallback+0x6d8>)
 8002b4a:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <HAL_UART_RxCpltCallback+0x6dc>)
 8002b4c:	f7fe fd44 	bl	80015d8 <__aeabi_dmul>
 8002b50:	0002      	movs	r2, r0
 8002b52:	000b      	movs	r3, r1
 8002b54:	0010      	movs	r0, r2
 8002b56:	0019      	movs	r1, r3
 8002b58:	2200      	movs	r2, #0
 8002b5a:	4b33      	ldr	r3, [pc, #204]	; (8002c28 <HAL_UART_RxCpltCallback+0x724>)
 8002b5c:	f7fe fd3c 	bl	80015d8 <__aeabi_dmul>
 8002b60:	0002      	movs	r2, r0
 8002b62:	000b      	movs	r3, r1
 8002b64:	0010      	movs	r0, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	f7ff fc26 	bl	80023b8 <__aeabi_d2f>
 8002b6c:	1c03      	adds	r3, r0, #0
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					sprintf(value, "%f", voltage);
 8002b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b72:	f7ff fbd9 	bl	8002328 <__aeabi_f2d>
 8002b76:	0002      	movs	r2, r0
 8002b78:	000b      	movs	r3, r1
 8002b7a:	491a      	ldr	r1, [pc, #104]	; (8002be4 <HAL_UART_RxCpltCallback+0x6e0>)
 8002b7c:	2008      	movs	r0, #8
 8002b7e:	1838      	adds	r0, r7, r0
 8002b80:	f005 f9a0 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "SWP_mon PA7", 11, 100);
 8002b84:	4929      	ldr	r1, [pc, #164]	; (8002c2c <HAL_UART_RxCpltCallback+0x728>)
 8002b86:	4819      	ldr	r0, [pc, #100]	; (8002bec <HAL_UART_RxCpltCallback+0x6e8>)
 8002b88:	2364      	movs	r3, #100	; 0x64
 8002b8a:	220b      	movs	r2, #11
 8002b8c:	f003 f940 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8002b90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b92:	f7ff fbc9 	bl	8002328 <__aeabi_f2d>
 8002b96:	4a16      	ldr	r2, [pc, #88]	; (8002bf0 <HAL_UART_RxCpltCallback+0x6ec>)
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <HAL_UART_RxCpltCallback+0x6f0>)
 8002b9a:	f7fd fc5d 	bl	8000458 <__aeabi_dcmplt>
 8002b9e:	1e03      	subs	r3, r0, #0
 8002ba0:	d00e      	beq.n	8002bc0 <HAL_UART_RxCpltCallback+0x6bc>
 8002ba2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ba4:	f7ff fbc0 	bl	8002328 <__aeabi_f2d>
 8002ba8:	4a13      	ldr	r2, [pc, #76]	; (8002bf8 <HAL_UART_RxCpltCallback+0x6f4>)
 8002baa:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <HAL_UART_RxCpltCallback+0x6f8>)
 8002bac:	f7fd fc68 	bl	8000480 <__aeabi_dcmpgt>
 8002bb0:	1e03      	subs	r3, r0, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_UART_RxCpltCallback+0x6bc>
						gpio_flags[i] = 1;
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_UART_RxCpltCallback+0x6fc>)
 8002bb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002bb8:	0092      	lsls	r2, r2, #2
 8002bba:	2101      	movs	r1, #1
 8002bbc:	50d1      	str	r1, [r2, r3]
 8002bbe:	e374      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bc4:	f7fd fc7c 	bl	80004c0 <__aeabi_fcmpeq>
 8002bc8:	1e03      	subs	r3, r0, #0
 8002bca:	d000      	beq.n	8002bce <HAL_UART_RxCpltCallback+0x6ca>
 8002bcc:	e36d      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 8002bce:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <HAL_UART_RxCpltCallback+0x6fc>)
 8002bd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	50d1      	str	r1, [r2, r3]
 8002bd8:	e367      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	e734d9b4 	.word	0xe734d9b4
 8002be0:	3f4a680c 	.word	0x3f4a680c
 8002be4:	0800bca8 	.word	0x0800bca8
 8002be8:	0800bcc8 	.word	0x0800bcc8
 8002bec:	200002f0 	.word	0x200002f0
 8002bf0:	33333333 	.word	0x33333333
 8002bf4:	400b3333 	.word	0x400b3333
 8002bf8:	9999999a 	.word	0x9999999a
 8002bfc:	40099999 	.word	0x40099999
 8002c00:	2000041c 	.word	0x2000041c
 8002c04:	3ff19999 	.word	0x3ff19999
 8002c08:	0800bcd8 	.word	0x0800bcd8
 8002c0c:	c04f4000 	.word	0xc04f4000
 8002c10:	0800bce4 	.word	0x0800bce4
 8002c14:	c062c333 	.word	0xc062c333
 8002c18:	cccccccd 	.word	0xcccccccd
 8002c1c:	c062bccc 	.word	0xc062bccc
 8002c20:	c0740000 	.word	0xc0740000
 8002c24:	0800bcf4 	.word	0x0800bcf4
 8002c28:	c0490000 	.word	0xc0490000
 8002c2c:	0800bd04 	.word	0x0800bd04
					}

				} else if (i == 7) {
 8002c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c32:	2b07      	cmp	r3, #7
 8002c34:	d146      	bne.n	8002cc4 <HAL_UART_RxCpltCallback+0x7c0>
					float voltage = adc * (3.3 / 4095);
 8002c36:	2358      	movs	r3, #88	; 0x58
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f7ff fb1d 	bl	800227c <__aeabi_i2d>
 8002c42:	4abd      	ldr	r2, [pc, #756]	; (8002f38 <HAL_UART_RxCpltCallback+0xa34>)
 8002c44:	4bbd      	ldr	r3, [pc, #756]	; (8002f3c <HAL_UART_RxCpltCallback+0xa38>)
 8002c46:	f7fe fcc7 	bl	80015d8 <__aeabi_dmul>
 8002c4a:	0002      	movs	r2, r0
 8002c4c:	000b      	movs	r3, r1
 8002c4e:	0010      	movs	r0, r2
 8002c50:	0019      	movs	r1, r3
 8002c52:	f7ff fbb1 	bl	80023b8 <__aeabi_d2f>
 8002c56:	1c03      	adds	r3, r0, #0
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30
//					 voltage *= -2;
					sprintf(value, "%f", voltage);
 8002c5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c5c:	f7ff fb64 	bl	8002328 <__aeabi_f2d>
 8002c60:	0002      	movs	r2, r0
 8002c62:	000b      	movs	r3, r1
 8002c64:	49b6      	ldr	r1, [pc, #728]	; (8002f40 <HAL_UART_RxCpltCallback+0xa3c>)
 8002c66:	2008      	movs	r0, #8
 8002c68:	1838      	adds	r0, r7, r0
 8002c6a:	f005 f92b 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "TMP_1 PB0", 9, 100);
 8002c6e:	49b5      	ldr	r1, [pc, #724]	; (8002f44 <HAL_UART_RxCpltCallback+0xa40>)
 8002c70:	48b5      	ldr	r0, [pc, #724]	; (8002f48 <HAL_UART_RxCpltCallback+0xa44>)
 8002c72:	2364      	movs	r3, #100	; 0x64
 8002c74:	2209      	movs	r2, #9
 8002c76:	f003 f8cb 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage > -5.1 && voltage < -4.9) {
 8002c7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c7c:	f7ff fb54 	bl	8002328 <__aeabi_f2d>
 8002c80:	4ab2      	ldr	r2, [pc, #712]	; (8002f4c <HAL_UART_RxCpltCallback+0xa48>)
 8002c82:	4bb3      	ldr	r3, [pc, #716]	; (8002f50 <HAL_UART_RxCpltCallback+0xa4c>)
 8002c84:	f7fd fbfc 	bl	8000480 <__aeabi_dcmpgt>
 8002c88:	1e03      	subs	r3, r0, #0
 8002c8a:	d00e      	beq.n	8002caa <HAL_UART_RxCpltCallback+0x7a6>
 8002c8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c8e:	f7ff fb4b 	bl	8002328 <__aeabi_f2d>
 8002c92:	4ab0      	ldr	r2, [pc, #704]	; (8002f54 <HAL_UART_RxCpltCallback+0xa50>)
 8002c94:	4bb0      	ldr	r3, [pc, #704]	; (8002f58 <HAL_UART_RxCpltCallback+0xa54>)
 8002c96:	f7fd fbdf 	bl	8000458 <__aeabi_dcmplt>
 8002c9a:	1e03      	subs	r3, r0, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_UART_RxCpltCallback+0x7a6>
						gpio_flags[i] = 1;
 8002c9e:	4baf      	ldr	r3, [pc, #700]	; (8002f5c <HAL_UART_RxCpltCallback+0xa58>)
 8002ca0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ca2:	0092      	lsls	r2, r2, #2
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	50d1      	str	r1, [r2, r3]
 8002ca8:	e2ff      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 8002caa:	2100      	movs	r1, #0
 8002cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cae:	f7fd fc07 	bl	80004c0 <__aeabi_fcmpeq>
 8002cb2:	1e03      	subs	r3, r0, #0
 8002cb4:	d000      	beq.n	8002cb8 <HAL_UART_RxCpltCallback+0x7b4>
 8002cb6:	e2f8      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 8002cb8:	4ba8      	ldr	r3, [pc, #672]	; (8002f5c <HAL_UART_RxCpltCallback+0xa58>)
 8002cba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002cbc:	0092      	lsls	r2, r2, #2
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	50d1      	str	r1, [r2, r3]
 8002cc2:	e2f2      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					}

				} else if (i == 8) {
 8002cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d146      	bne.n	8002d58 <HAL_UART_RxCpltCallback+0x854>
					float voltage = adc * (3.3 / 4095);
 8002cca:	2358      	movs	r3, #88	; 0x58
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f7ff fad3 	bl	800227c <__aeabi_i2d>
 8002cd6:	4a98      	ldr	r2, [pc, #608]	; (8002f38 <HAL_UART_RxCpltCallback+0xa34>)
 8002cd8:	4b98      	ldr	r3, [pc, #608]	; (8002f3c <HAL_UART_RxCpltCallback+0xa38>)
 8002cda:	f7fe fc7d 	bl	80015d8 <__aeabi_dmul>
 8002cde:	0002      	movs	r2, r0
 8002ce0:	000b      	movs	r3, r1
 8002ce2:	0010      	movs	r0, r2
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	f7ff fb67 	bl	80023b8 <__aeabi_d2f>
 8002cea:	1c03      	adds	r3, r0, #0
 8002cec:	637b      	str	r3, [r7, #52]	; 0x34
//					 voltage *= 2;
					sprintf(value, "%f", voltage);
 8002cee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cf0:	f7ff fb1a 	bl	8002328 <__aeabi_f2d>
 8002cf4:	0002      	movs	r2, r0
 8002cf6:	000b      	movs	r3, r1
 8002cf8:	4991      	ldr	r1, [pc, #580]	; (8002f40 <HAL_UART_RxCpltCallback+0xa3c>)
 8002cfa:	2008      	movs	r0, #8
 8002cfc:	1838      	adds	r0, r7, r0
 8002cfe:	f005 f8e1 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "TMP_2 PB1", 9, 100);
 8002d02:	4997      	ldr	r1, [pc, #604]	; (8002f60 <HAL_UART_RxCpltCallback+0xa5c>)
 8002d04:	4890      	ldr	r0, [pc, #576]	; (8002f48 <HAL_UART_RxCpltCallback+0xa44>)
 8002d06:	2364      	movs	r3, #100	; 0x64
 8002d08:	2209      	movs	r2, #9
 8002d0a:	f003 f881 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage > -5.1 && voltage < -4.9) {
 8002d0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d10:	f7ff fb0a 	bl	8002328 <__aeabi_f2d>
 8002d14:	4a8d      	ldr	r2, [pc, #564]	; (8002f4c <HAL_UART_RxCpltCallback+0xa48>)
 8002d16:	4b8e      	ldr	r3, [pc, #568]	; (8002f50 <HAL_UART_RxCpltCallback+0xa4c>)
 8002d18:	f7fd fbb2 	bl	8000480 <__aeabi_dcmpgt>
 8002d1c:	1e03      	subs	r3, r0, #0
 8002d1e:	d00e      	beq.n	8002d3e <HAL_UART_RxCpltCallback+0x83a>
 8002d20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d22:	f7ff fb01 	bl	8002328 <__aeabi_f2d>
 8002d26:	4a8b      	ldr	r2, [pc, #556]	; (8002f54 <HAL_UART_RxCpltCallback+0xa50>)
 8002d28:	4b8b      	ldr	r3, [pc, #556]	; (8002f58 <HAL_UART_RxCpltCallback+0xa54>)
 8002d2a:	f7fd fb95 	bl	8000458 <__aeabi_dcmplt>
 8002d2e:	1e03      	subs	r3, r0, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_UART_RxCpltCallback+0x83a>
						gpio_flags[i] = 1;
 8002d32:	4b8a      	ldr	r3, [pc, #552]	; (8002f5c <HAL_UART_RxCpltCallback+0xa58>)
 8002d34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d36:	0092      	lsls	r2, r2, #2
 8002d38:	2101      	movs	r1, #1
 8002d3a:	50d1      	str	r1, [r2, r3]
 8002d3c:	e2b5      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 8002d3e:	2100      	movs	r1, #0
 8002d40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d42:	f7fd fbbd 	bl	80004c0 <__aeabi_fcmpeq>
 8002d46:	1e03      	subs	r3, r0, #0
 8002d48:	d000      	beq.n	8002d4c <HAL_UART_RxCpltCallback+0x848>
 8002d4a:	e2ae      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 8002d4c:	4b83      	ldr	r3, [pc, #524]	; (8002f5c <HAL_UART_RxCpltCallback+0xa58>)
 8002d4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d50:	0092      	lsls	r2, r2, #2
 8002d52:	2100      	movs	r1, #0
 8002d54:	50d1      	str	r1, [r2, r3]
 8002d56:	e2a8      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					}

				} else if (i == 9) {
 8002d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d5a:	2b09      	cmp	r3, #9
 8002d5c:	d146      	bne.n	8002dec <HAL_UART_RxCpltCallback+0x8e8>
					float voltage = adc * (3.3 / 4095);
 8002d5e:	2358      	movs	r3, #88	; 0x58
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7ff fa89 	bl	800227c <__aeabi_i2d>
 8002d6a:	4a73      	ldr	r2, [pc, #460]	; (8002f38 <HAL_UART_RxCpltCallback+0xa34>)
 8002d6c:	4b73      	ldr	r3, [pc, #460]	; (8002f3c <HAL_UART_RxCpltCallback+0xa38>)
 8002d6e:	f7fe fc33 	bl	80015d8 <__aeabi_dmul>
 8002d72:	0002      	movs	r2, r0
 8002d74:	000b      	movs	r3, r1
 8002d76:	0010      	movs	r0, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	f7ff fb1d 	bl	80023b8 <__aeabi_d2f>
 8002d7e:	1c03      	adds	r3, r0, #0
 8002d80:	63bb      	str	r3, [r7, #56]	; 0x38
//					 voltage *= 2;
					sprintf(value, "%f", voltage);
 8002d82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d84:	f7ff fad0 	bl	8002328 <__aeabi_f2d>
 8002d88:	0002      	movs	r2, r0
 8002d8a:	000b      	movs	r3, r1
 8002d8c:	496c      	ldr	r1, [pc, #432]	; (8002f40 <HAL_UART_RxCpltCallback+0xa3c>)
 8002d8e:	2008      	movs	r0, #8
 8002d90:	1838      	adds	r0, r7, r0
 8002d92:	f005 f897 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "2v5_mon PC0", 11, 100);
 8002d96:	4973      	ldr	r1, [pc, #460]	; (8002f64 <HAL_UART_RxCpltCallback+0xa60>)
 8002d98:	486b      	ldr	r0, [pc, #428]	; (8002f48 <HAL_UART_RxCpltCallback+0xa44>)
 8002d9a:	2364      	movs	r3, #100	; 0x64
 8002d9c:	220b      	movs	r2, #11
 8002d9e:	f003 f837 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage < 5.1 && voltage > 4.9) {
 8002da2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002da4:	f7ff fac0 	bl	8002328 <__aeabi_f2d>
 8002da8:	4a68      	ldr	r2, [pc, #416]	; (8002f4c <HAL_UART_RxCpltCallback+0xa48>)
 8002daa:	4b6f      	ldr	r3, [pc, #444]	; (8002f68 <HAL_UART_RxCpltCallback+0xa64>)
 8002dac:	f7fd fb54 	bl	8000458 <__aeabi_dcmplt>
 8002db0:	1e03      	subs	r3, r0, #0
 8002db2:	d00e      	beq.n	8002dd2 <HAL_UART_RxCpltCallback+0x8ce>
 8002db4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002db6:	f7ff fab7 	bl	8002328 <__aeabi_f2d>
 8002dba:	4a66      	ldr	r2, [pc, #408]	; (8002f54 <HAL_UART_RxCpltCallback+0xa50>)
 8002dbc:	4b6b      	ldr	r3, [pc, #428]	; (8002f6c <HAL_UART_RxCpltCallback+0xa68>)
 8002dbe:	f7fd fb5f 	bl	8000480 <__aeabi_dcmpgt>
 8002dc2:	1e03      	subs	r3, r0, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_UART_RxCpltCallback+0x8ce>
						gpio_flags[i] = 1;
 8002dc6:	4b65      	ldr	r3, [pc, #404]	; (8002f5c <HAL_UART_RxCpltCallback+0xa58>)
 8002dc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002dca:	0092      	lsls	r2, r2, #2
 8002dcc:	2101      	movs	r1, #1
 8002dce:	50d1      	str	r1, [r2, r3]
 8002dd0:	e26b      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002dd6:	f7fd fb73 	bl	80004c0 <__aeabi_fcmpeq>
 8002dda:	1e03      	subs	r3, r0, #0
 8002ddc:	d000      	beq.n	8002de0 <HAL_UART_RxCpltCallback+0x8dc>
 8002dde:	e264      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 8002de0:	4b5e      	ldr	r3, [pc, #376]	; (8002f5c <HAL_UART_RxCpltCallback+0xa58>)
 8002de2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002de4:	0092      	lsls	r2, r2, #2
 8002de6:	2100      	movs	r1, #0
 8002de8:	50d1      	str	r1, [r2, r3]
 8002dea:	e25e      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					}

				} else if (i == 10) {
 8002dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dee:	2b0a      	cmp	r3, #10
 8002df0:	d14e      	bne.n	8002e90 <HAL_UART_RxCpltCallback+0x98c>
					float voltage = adc * (3.3 / 4095) * -1.65;
 8002df2:	2358      	movs	r3, #88	; 0x58
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7ff fa3f 	bl	800227c <__aeabi_i2d>
 8002dfe:	4a4e      	ldr	r2, [pc, #312]	; (8002f38 <HAL_UART_RxCpltCallback+0xa34>)
 8002e00:	4b4e      	ldr	r3, [pc, #312]	; (8002f3c <HAL_UART_RxCpltCallback+0xa38>)
 8002e02:	f7fe fbe9 	bl	80015d8 <__aeabi_dmul>
 8002e06:	0002      	movs	r2, r0
 8002e08:	000b      	movs	r3, r1
 8002e0a:	0010      	movs	r0, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	4a4f      	ldr	r2, [pc, #316]	; (8002f4c <HAL_UART_RxCpltCallback+0xa48>)
 8002e10:	4b57      	ldr	r3, [pc, #348]	; (8002f70 <HAL_UART_RxCpltCallback+0xa6c>)
 8002e12:	f7fe fbe1 	bl	80015d8 <__aeabi_dmul>
 8002e16:	0002      	movs	r2, r0
 8002e18:	000b      	movs	r3, r1
 8002e1a:	0010      	movs	r0, r2
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	f7ff facb 	bl	80023b8 <__aeabi_d2f>
 8002e22:	1c03      	adds	r3, r0, #0
 8002e24:	63fb      	str	r3, [r7, #60]	; 0x3c
//					 voltage *= -1;
					sprintf(value, "%f", voltage);
 8002e26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e28:	f7ff fa7e 	bl	8002328 <__aeabi_f2d>
 8002e2c:	0002      	movs	r2, r0
 8002e2e:	000b      	movs	r3, r1
 8002e30:	4943      	ldr	r1, [pc, #268]	; (8002f40 <HAL_UART_RxCpltCallback+0xa3c>)
 8002e32:	2008      	movs	r0, #8
 8002e34:	1838      	adds	r0, r7, r0
 8002e36:	f005 f845 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "n5v_mon PC1", 11, 100);
 8002e3a:	494e      	ldr	r1, [pc, #312]	; (8002f74 <HAL_UART_RxCpltCallback+0xa70>)
 8002e3c:	4842      	ldr	r0, [pc, #264]	; (8002f48 <HAL_UART_RxCpltCallback+0xa44>)
 8002e3e:	2364      	movs	r3, #100	; 0x64
 8002e40:	220b      	movs	r2, #11
 8002e42:	f002 ffe5 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage > -3.4 && voltage < -3.2) {
 8002e46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e48:	f7ff fa6e 	bl	8002328 <__aeabi_f2d>
 8002e4c:	4a4a      	ldr	r2, [pc, #296]	; (8002f78 <HAL_UART_RxCpltCallback+0xa74>)
 8002e4e:	4b4b      	ldr	r3, [pc, #300]	; (8002f7c <HAL_UART_RxCpltCallback+0xa78>)
 8002e50:	f7fd fb16 	bl	8000480 <__aeabi_dcmpgt>
 8002e54:	1e03      	subs	r3, r0, #0
 8002e56:	d00e      	beq.n	8002e76 <HAL_UART_RxCpltCallback+0x972>
 8002e58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e5a:	f7ff fa65 	bl	8002328 <__aeabi_f2d>
 8002e5e:	4a3d      	ldr	r2, [pc, #244]	; (8002f54 <HAL_UART_RxCpltCallback+0xa50>)
 8002e60:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <HAL_UART_RxCpltCallback+0xa7c>)
 8002e62:	f7fd faf9 	bl	8000458 <__aeabi_dcmplt>
 8002e66:	1e03      	subs	r3, r0, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_UART_RxCpltCallback+0x972>
						gpio_flags[i] = 1;
 8002e6a:	4b3c      	ldr	r3, [pc, #240]	; (8002f5c <HAL_UART_RxCpltCallback+0xa58>)
 8002e6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e6e:	0092      	lsls	r2, r2, #2
 8002e70:	2101      	movs	r1, #1
 8002e72:	50d1      	str	r1, [r2, r3]
 8002e74:	e219      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 8002e76:	2100      	movs	r1, #0
 8002e78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e7a:	f7fd fb21 	bl	80004c0 <__aeabi_fcmpeq>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d000      	beq.n	8002e84 <HAL_UART_RxCpltCallback+0x980>
 8002e82:	e212      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 8002e84:	4b35      	ldr	r3, [pc, #212]	; (8002f5c <HAL_UART_RxCpltCallback+0xa58>)
 8002e86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e88:	0092      	lsls	r2, r2, #2
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	50d1      	str	r1, [r2, r3]
 8002e8e:	e20c      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					}
				} else if (i == 11) {
 8002e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e92:	2b0b      	cmp	r3, #11
 8002e94:	d000      	beq.n	8002e98 <HAL_UART_RxCpltCallback+0x994>
 8002e96:	e081      	b.n	8002f9c <HAL_UART_RxCpltCallback+0xa98>
					float voltage = adc * (3.3 / 4095) * 1.67;
 8002e98:	2358      	movs	r3, #88	; 0x58
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f7ff f9ec 	bl	800227c <__aeabi_i2d>
 8002ea4:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <HAL_UART_RxCpltCallback+0xa34>)
 8002ea6:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <HAL_UART_RxCpltCallback+0xa38>)
 8002ea8:	f7fe fb96 	bl	80015d8 <__aeabi_dmul>
 8002eac:	0002      	movs	r2, r0
 8002eae:	000b      	movs	r3, r1
 8002eb0:	0010      	movs	r0, r2
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	4a33      	ldr	r2, [pc, #204]	; (8002f84 <HAL_UART_RxCpltCallback+0xa80>)
 8002eb6:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <HAL_UART_RxCpltCallback+0xa84>)
 8002eb8:	f7fe fb8e 	bl	80015d8 <__aeabi_dmul>
 8002ebc:	0002      	movs	r2, r0
 8002ebe:	000b      	movs	r3, r1
 8002ec0:	0010      	movs	r0, r2
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	f7ff fa78 	bl	80023b8 <__aeabi_d2f>
 8002ec8:	1c03      	adds	r3, r0, #0
 8002eca:	643b      	str	r3, [r7, #64]	; 0x40
//					 voltage *= -50;
					sprintf(value, "%f", voltage);
 8002ecc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002ece:	f7ff fa2b 	bl	8002328 <__aeabi_f2d>
 8002ed2:	0002      	movs	r2, r0
 8002ed4:	000b      	movs	r3, r1
 8002ed6:	491a      	ldr	r1, [pc, #104]	; (8002f40 <HAL_UART_RxCpltCallback+0xa3c>)
 8002ed8:	2008      	movs	r0, #8
 8002eda:	1838      	adds	r0, r7, r0
 8002edc:	f004 fff2 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "5v_mon PC2", 10, 100);
 8002ee0:	492a      	ldr	r1, [pc, #168]	; (8002f8c <HAL_UART_RxCpltCallback+0xa88>)
 8002ee2:	4819      	ldr	r0, [pc, #100]	; (8002f48 <HAL_UART_RxCpltCallback+0xa44>)
 8002ee4:	2364      	movs	r3, #100	; 0x64
 8002ee6:	220a      	movs	r2, #10
 8002ee8:	f002 ff92 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage > -150.1 && voltage < -149.9) {
 8002eec:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002eee:	f7ff fa1b 	bl	8002328 <__aeabi_f2d>
 8002ef2:	4a21      	ldr	r2, [pc, #132]	; (8002f78 <HAL_UART_RxCpltCallback+0xa74>)
 8002ef4:	4b26      	ldr	r3, [pc, #152]	; (8002f90 <HAL_UART_RxCpltCallback+0xa8c>)
 8002ef6:	f7fd fac3 	bl	8000480 <__aeabi_dcmpgt>
 8002efa:	1e03      	subs	r3, r0, #0
 8002efc:	d00e      	beq.n	8002f1c <HAL_UART_RxCpltCallback+0xa18>
 8002efe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002f00:	f7ff fa12 	bl	8002328 <__aeabi_f2d>
 8002f04:	4a23      	ldr	r2, [pc, #140]	; (8002f94 <HAL_UART_RxCpltCallback+0xa90>)
 8002f06:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <HAL_UART_RxCpltCallback+0xa94>)
 8002f08:	f7fd faa6 	bl	8000458 <__aeabi_dcmplt>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_UART_RxCpltCallback+0xa18>
						gpio_flags[i] = 1;
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_UART_RxCpltCallback+0xa58>)
 8002f12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f14:	0092      	lsls	r2, r2, #2
 8002f16:	2101      	movs	r1, #1
 8002f18:	50d1      	str	r1, [r2, r3]
 8002f1a:	e1c6      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002f20:	f7fd face 	bl	80004c0 <__aeabi_fcmpeq>
 8002f24:	1e03      	subs	r3, r0, #0
 8002f26:	d000      	beq.n	8002f2a <HAL_UART_RxCpltCallback+0xa26>
 8002f28:	e1bf      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 8002f2a:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <HAL_UART_RxCpltCallback+0xa58>)
 8002f2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f2e:	0092      	lsls	r2, r2, #2
 8002f30:	2100      	movs	r1, #0
 8002f32:	50d1      	str	r1, [r2, r3]
 8002f34:	e1b9      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	e734d9b4 	.word	0xe734d9b4
 8002f3c:	3f4a680c 	.word	0x3f4a680c
 8002f40:	0800bca8 	.word	0x0800bca8
 8002f44:	0800bd10 	.word	0x0800bd10
 8002f48:	200002f0 	.word	0x200002f0
 8002f4c:	66666666 	.word	0x66666666
 8002f50:	c0146666 	.word	0xc0146666
 8002f54:	9999999a 	.word	0x9999999a
 8002f58:	c0139999 	.word	0xc0139999
 8002f5c:	2000041c 	.word	0x2000041c
 8002f60:	0800bd1c 	.word	0x0800bd1c
 8002f64:	0800bd28 	.word	0x0800bd28
 8002f68:	40146666 	.word	0x40146666
 8002f6c:	40139999 	.word	0x40139999
 8002f70:	bffa6666 	.word	0xbffa6666
 8002f74:	0800bd34 	.word	0x0800bd34
 8002f78:	33333333 	.word	0x33333333
 8002f7c:	c00b3333 	.word	0xc00b3333
 8002f80:	c0099999 	.word	0xc0099999
 8002f84:	eb851eb8 	.word	0xeb851eb8
 8002f88:	3ffab851 	.word	0x3ffab851
 8002f8c:	0800bd40 	.word	0x0800bd40
 8002f90:	c062c333 	.word	0xc062c333
 8002f94:	cccccccd 	.word	0xcccccccd
 8002f98:	c062bccc 	.word	0xc062bccc
					}

				} else if (i == 12) {
 8002f9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f9e:	2b0c      	cmp	r3, #12
 8002fa0:	d14e      	bne.n	8003040 <HAL_UART_RxCpltCallback+0xb3c>
					float voltage = adc * (3.3 / 4095) * -1.05;
 8002fa2:	2358      	movs	r3, #88	; 0x58
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7ff f967 	bl	800227c <__aeabi_i2d>
 8002fae:	4ad2      	ldr	r2, [pc, #840]	; (80032f8 <HAL_UART_RxCpltCallback+0xdf4>)
 8002fb0:	4bd2      	ldr	r3, [pc, #840]	; (80032fc <HAL_UART_RxCpltCallback+0xdf8>)
 8002fb2:	f7fe fb11 	bl	80015d8 <__aeabi_dmul>
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	000b      	movs	r3, r1
 8002fba:	0010      	movs	r0, r2
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	4ad0      	ldr	r2, [pc, #832]	; (8003300 <HAL_UART_RxCpltCallback+0xdfc>)
 8002fc0:	4bd0      	ldr	r3, [pc, #832]	; (8003304 <HAL_UART_RxCpltCallback+0xe00>)
 8002fc2:	f7fe fb09 	bl	80015d8 <__aeabi_dmul>
 8002fc6:	0002      	movs	r2, r0
 8002fc8:	000b      	movs	r3, r1
 8002fca:	0010      	movs	r0, r2
 8002fcc:	0019      	movs	r1, r3
 8002fce:	f7ff f9f3 	bl	80023b8 <__aeabi_d2f>
 8002fd2:	1c03      	adds	r3, r0, #0
 8002fd4:	647b      	str	r3, [r7, #68]	; 0x44
//					 voltage *= 5;
					sprintf(value, "%f", voltage);
 8002fd6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002fd8:	f7ff f9a6 	bl	8002328 <__aeabi_f2d>
 8002fdc:	0002      	movs	r2, r0
 8002fde:	000b      	movs	r3, r1
 8002fe0:	49c9      	ldr	r1, [pc, #804]	; (8003308 <HAL_UART_RxCpltCallback+0xe04>)
 8002fe2:	2008      	movs	r0, #8
 8002fe4:	1838      	adds	r0, r7, r0
 8002fe6:	f004 ff6d 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "n3v3_mon PC3", 12, 100);
 8002fea:	49c8      	ldr	r1, [pc, #800]	; (800330c <HAL_UART_RxCpltCallback+0xe08>)
 8002fec:	48c8      	ldr	r0, [pc, #800]	; (8003310 <HAL_UART_RxCpltCallback+0xe0c>)
 8002fee:	2364      	movs	r3, #100	; 0x64
 8002ff0:	220c      	movs	r2, #12
 8002ff2:	f002 ff0d 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage < 15.1 && voltage > 14.9) {
 8002ff6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002ff8:	f7ff f996 	bl	8002328 <__aeabi_f2d>
 8002ffc:	4ac5      	ldr	r2, [pc, #788]	; (8003314 <HAL_UART_RxCpltCallback+0xe10>)
 8002ffe:	4bc6      	ldr	r3, [pc, #792]	; (8003318 <HAL_UART_RxCpltCallback+0xe14>)
 8003000:	f7fd fa2a 	bl	8000458 <__aeabi_dcmplt>
 8003004:	1e03      	subs	r3, r0, #0
 8003006:	d00e      	beq.n	8003026 <HAL_UART_RxCpltCallback+0xb22>
 8003008:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800300a:	f7ff f98d 	bl	8002328 <__aeabi_f2d>
 800300e:	4abc      	ldr	r2, [pc, #752]	; (8003300 <HAL_UART_RxCpltCallback+0xdfc>)
 8003010:	4bc2      	ldr	r3, [pc, #776]	; (800331c <HAL_UART_RxCpltCallback+0xe18>)
 8003012:	f7fd fa35 	bl	8000480 <__aeabi_dcmpgt>
 8003016:	1e03      	subs	r3, r0, #0
 8003018:	d005      	beq.n	8003026 <HAL_UART_RxCpltCallback+0xb22>
						gpio_flags[i] = 1;
 800301a:	4bc1      	ldr	r3, [pc, #772]	; (8003320 <HAL_UART_RxCpltCallback+0xe1c>)
 800301c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800301e:	0092      	lsls	r2, r2, #2
 8003020:	2101      	movs	r1, #1
 8003022:	50d1      	str	r1, [r2, r3]
 8003024:	e141      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 8003026:	2100      	movs	r1, #0
 8003028:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800302a:	f7fd fa49 	bl	80004c0 <__aeabi_fcmpeq>
 800302e:	1e03      	subs	r3, r0, #0
 8003030:	d000      	beq.n	8003034 <HAL_UART_RxCpltCallback+0xb30>
 8003032:	e13a      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 8003034:	4bba      	ldr	r3, [pc, #744]	; (8003320 <HAL_UART_RxCpltCallback+0xe1c>)
 8003036:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003038:	0092      	lsls	r2, r2, #2
 800303a:	2100      	movs	r1, #0
 800303c:	50d1      	str	r1, [r2, r3]
 800303e:	e134      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					}

				} else if (i == 13) {
 8003040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003042:	2b0d      	cmp	r3, #13
 8003044:	d14e      	bne.n	80030e4 <HAL_UART_RxCpltCallback+0xbe0>
					float voltage = adc * (3.3 / 4095) * 1.67;
 8003046:	2358      	movs	r3, #88	; 0x58
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	0018      	movs	r0, r3
 800304e:	f7ff f915 	bl	800227c <__aeabi_i2d>
 8003052:	4aa9      	ldr	r2, [pc, #676]	; (80032f8 <HAL_UART_RxCpltCallback+0xdf4>)
 8003054:	4ba9      	ldr	r3, [pc, #676]	; (80032fc <HAL_UART_RxCpltCallback+0xdf8>)
 8003056:	f7fe fabf 	bl	80015d8 <__aeabi_dmul>
 800305a:	0002      	movs	r2, r0
 800305c:	000b      	movs	r3, r1
 800305e:	0010      	movs	r0, r2
 8003060:	0019      	movs	r1, r3
 8003062:	4ab0      	ldr	r2, [pc, #704]	; (8003324 <HAL_UART_RxCpltCallback+0xe20>)
 8003064:	4bb0      	ldr	r3, [pc, #704]	; (8003328 <HAL_UART_RxCpltCallback+0xe24>)
 8003066:	f7fe fab7 	bl	80015d8 <__aeabi_dmul>
 800306a:	0002      	movs	r2, r0
 800306c:	000b      	movs	r3, r1
 800306e:	0010      	movs	r0, r2
 8003070:	0019      	movs	r1, r3
 8003072:	f7ff f9a1 	bl	80023b8 <__aeabi_d2f>
 8003076:	1c03      	adds	r3, r0, #0
 8003078:	64bb      	str	r3, [r7, #72]	; 0x48
					sprintf(value, "%f", voltage);
 800307a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800307c:	f7ff f954 	bl	8002328 <__aeabi_f2d>
 8003080:	0002      	movs	r2, r0
 8003082:	000b      	movs	r3, r1
 8003084:	49a0      	ldr	r1, [pc, #640]	; (8003308 <HAL_UART_RxCpltCallback+0xe04>)
 8003086:	2008      	movs	r0, #8
 8003088:	1838      	adds	r0, r7, r0
 800308a:	f004 ff1b 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "5vref_mon PC4", 13, 100);
 800308e:	49a7      	ldr	r1, [pc, #668]	; (800332c <HAL_UART_RxCpltCallback+0xe28>)
 8003090:	489f      	ldr	r0, [pc, #636]	; (8003310 <HAL_UART_RxCpltCallback+0xe0c>)
 8003092:	2364      	movs	r3, #100	; 0x64
 8003094:	220d      	movs	r2, #13
 8003096:	f002 febb 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 800309a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800309c:	f7ff f944 	bl	8002328 <__aeabi_f2d>
 80030a0:	4a9c      	ldr	r2, [pc, #624]	; (8003314 <HAL_UART_RxCpltCallback+0xe10>)
 80030a2:	4ba3      	ldr	r3, [pc, #652]	; (8003330 <HAL_UART_RxCpltCallback+0xe2c>)
 80030a4:	f7fd f9d8 	bl	8000458 <__aeabi_dcmplt>
 80030a8:	1e03      	subs	r3, r0, #0
 80030aa:	d00e      	beq.n	80030ca <HAL_UART_RxCpltCallback+0xbc6>
 80030ac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80030ae:	f7ff f93b 	bl	8002328 <__aeabi_f2d>
 80030b2:	4aa0      	ldr	r2, [pc, #640]	; (8003334 <HAL_UART_RxCpltCallback+0xe30>)
 80030b4:	4ba0      	ldr	r3, [pc, #640]	; (8003338 <HAL_UART_RxCpltCallback+0xe34>)
 80030b6:	f7fd f9e3 	bl	8000480 <__aeabi_dcmpgt>
 80030ba:	1e03      	subs	r3, r0, #0
 80030bc:	d005      	beq.n	80030ca <HAL_UART_RxCpltCallback+0xbc6>
						gpio_flags[i] = 1;
 80030be:	4b98      	ldr	r3, [pc, #608]	; (8003320 <HAL_UART_RxCpltCallback+0xe1c>)
 80030c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030c2:	0092      	lsls	r2, r2, #2
 80030c4:	2101      	movs	r1, #1
 80030c6:	50d1      	str	r1, [r2, r3]
 80030c8:	e0ef      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 80030ca:	2100      	movs	r1, #0
 80030cc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80030ce:	f7fd f9f7 	bl	80004c0 <__aeabi_fcmpeq>
 80030d2:	1e03      	subs	r3, r0, #0
 80030d4:	d000      	beq.n	80030d8 <HAL_UART_RxCpltCallback+0xbd4>
 80030d6:	e0e8      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 80030d8:	4b91      	ldr	r3, [pc, #580]	; (8003320 <HAL_UART_RxCpltCallback+0xe1c>)
 80030da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030dc:	0092      	lsls	r2, r2, #2
 80030de:	2100      	movs	r1, #0
 80030e0:	50d1      	str	r1, [r2, r3]
 80030e2:	e0e2      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					}
				} else if (i == 14) { // for i = 13 you read the internal temperature
 80030e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e6:	2b0e      	cmp	r3, #14
 80030e8:	d14e      	bne.n	8003188 <HAL_UART_RxCpltCallback+0xc84>
					// Should be 1.5ish for our actual Signal Board
					float voltage = adc * (3.3 / 4095) * 5;
 80030ea:	2358      	movs	r3, #88	; 0x58
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7ff f8c3 	bl	800227c <__aeabi_i2d>
 80030f6:	4a80      	ldr	r2, [pc, #512]	; (80032f8 <HAL_UART_RxCpltCallback+0xdf4>)
 80030f8:	4b80      	ldr	r3, [pc, #512]	; (80032fc <HAL_UART_RxCpltCallback+0xdf8>)
 80030fa:	f7fe fa6d 	bl	80015d8 <__aeabi_dmul>
 80030fe:	0002      	movs	r2, r0
 8003100:	000b      	movs	r3, r1
 8003102:	0010      	movs	r0, r2
 8003104:	0019      	movs	r1, r3
 8003106:	2200      	movs	r2, #0
 8003108:	4b8c      	ldr	r3, [pc, #560]	; (800333c <HAL_UART_RxCpltCallback+0xe38>)
 800310a:	f7fe fa65 	bl	80015d8 <__aeabi_dmul>
 800310e:	0002      	movs	r2, r0
 8003110:	000b      	movs	r3, r1
 8003112:	0010      	movs	r0, r2
 8003114:	0019      	movs	r1, r3
 8003116:	f7ff f94f 	bl	80023b8 <__aeabi_d2f>
 800311a:	1c03      	adds	r3, r0, #0
 800311c:	64fb      	str	r3, [r7, #76]	; 0x4c
					sprintf(value, "%f", voltage);
 800311e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003120:	f7ff f902 	bl	8002328 <__aeabi_f2d>
 8003124:	0002      	movs	r2, r0
 8003126:	000b      	movs	r3, r1
 8003128:	4977      	ldr	r1, [pc, #476]	; (8003308 <HAL_UART_RxCpltCallback+0xe04>)
 800312a:	2008      	movs	r0, #8
 800312c:	1838      	adds	r0, r7, r0
 800312e:	f004 fec9 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "15v_mon PC5", 11, 100);
 8003132:	4983      	ldr	r1, [pc, #524]	; (8003340 <HAL_UART_RxCpltCallback+0xe3c>)
 8003134:	4876      	ldr	r0, [pc, #472]	; (8003310 <HAL_UART_RxCpltCallback+0xe0c>)
 8003136:	2364      	movs	r3, #100	; 0x64
 8003138:	220b      	movs	r2, #11
 800313a:	f002 fe69 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 800313e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003140:	f7ff f8f2 	bl	8002328 <__aeabi_f2d>
 8003144:	4a73      	ldr	r2, [pc, #460]	; (8003314 <HAL_UART_RxCpltCallback+0xe10>)
 8003146:	4b7a      	ldr	r3, [pc, #488]	; (8003330 <HAL_UART_RxCpltCallback+0xe2c>)
 8003148:	f7fd f986 	bl	8000458 <__aeabi_dcmplt>
 800314c:	1e03      	subs	r3, r0, #0
 800314e:	d00e      	beq.n	800316e <HAL_UART_RxCpltCallback+0xc6a>
 8003150:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003152:	f7ff f8e9 	bl	8002328 <__aeabi_f2d>
 8003156:	4a77      	ldr	r2, [pc, #476]	; (8003334 <HAL_UART_RxCpltCallback+0xe30>)
 8003158:	4b77      	ldr	r3, [pc, #476]	; (8003338 <HAL_UART_RxCpltCallback+0xe34>)
 800315a:	f7fd f991 	bl	8000480 <__aeabi_dcmpgt>
 800315e:	1e03      	subs	r3, r0, #0
 8003160:	d005      	beq.n	800316e <HAL_UART_RxCpltCallback+0xc6a>
						gpio_flags[i] = 1;
 8003162:	4b6f      	ldr	r3, [pc, #444]	; (8003320 <HAL_UART_RxCpltCallback+0xe1c>)
 8003164:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003166:	0092      	lsls	r2, r2, #2
 8003168:	2101      	movs	r1, #1
 800316a:	50d1      	str	r1, [r2, r3]
 800316c:	e09d      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 800316e:	2100      	movs	r1, #0
 8003170:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003172:	f7fd f9a5 	bl	80004c0 <__aeabi_fcmpeq>
 8003176:	1e03      	subs	r3, r0, #0
 8003178:	d000      	beq.n	800317c <HAL_UART_RxCpltCallback+0xc78>
 800317a:	e096      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 800317c:	4b68      	ldr	r3, [pc, #416]	; (8003320 <HAL_UART_RxCpltCallback+0xe1c>)
 800317e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003180:	0092      	lsls	r2, r2, #2
 8003182:	2100      	movs	r1, #0
 8003184:	50d1      	str	r1, [r2, r3]
 8003186:	e090      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					}

				} else if (i == 15) { // for i = 13 you read the internal temperature
 8003188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800318a:	2b0f      	cmp	r3, #15
 800318c:	d145      	bne.n	800321a <HAL_UART_RxCpltCallback+0xd16>
					// Should be 1.5ish for our actual Signal Board
					float voltage = adc * (3.3 / 4095);
 800318e:	2358      	movs	r3, #88	; 0x58
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	0018      	movs	r0, r3
 8003196:	f7ff f871 	bl	800227c <__aeabi_i2d>
 800319a:	4a57      	ldr	r2, [pc, #348]	; (80032f8 <HAL_UART_RxCpltCallback+0xdf4>)
 800319c:	4b57      	ldr	r3, [pc, #348]	; (80032fc <HAL_UART_RxCpltCallback+0xdf8>)
 800319e:	f7fe fa1b 	bl	80015d8 <__aeabi_dmul>
 80031a2:	0002      	movs	r2, r0
 80031a4:	000b      	movs	r3, r1
 80031a6:	0010      	movs	r0, r2
 80031a8:	0019      	movs	r1, r3
 80031aa:	f7ff f905 	bl	80023b8 <__aeabi_d2f>
 80031ae:	1c03      	adds	r3, r0, #0
 80031b0:	653b      	str	r3, [r7, #80]	; 0x50
					sprintf(value, "%f", voltage);
 80031b2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80031b4:	f7ff f8b8 	bl	8002328 <__aeabi_f2d>
 80031b8:	0002      	movs	r2, r0
 80031ba:	000b      	movs	r3, r1
 80031bc:	4952      	ldr	r1, [pc, #328]	; (8003308 <HAL_UART_RxCpltCallback+0xe04>)
 80031be:	2008      	movs	r0, #8
 80031c0:	1838      	adds	r0, r7, r0
 80031c2:	f004 fe7f 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "TMPSENSE", 8, 100);
 80031c6:	495f      	ldr	r1, [pc, #380]	; (8003344 <HAL_UART_RxCpltCallback+0xe40>)
 80031c8:	4851      	ldr	r0, [pc, #324]	; (8003310 <HAL_UART_RxCpltCallback+0xe0c>)
 80031ca:	2364      	movs	r3, #100	; 0x64
 80031cc:	2208      	movs	r2, #8
 80031ce:	f002 fe1f 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 80031d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80031d4:	f7ff f8a8 	bl	8002328 <__aeabi_f2d>
 80031d8:	4a4e      	ldr	r2, [pc, #312]	; (8003314 <HAL_UART_RxCpltCallback+0xe10>)
 80031da:	4b55      	ldr	r3, [pc, #340]	; (8003330 <HAL_UART_RxCpltCallback+0xe2c>)
 80031dc:	f7fd f93c 	bl	8000458 <__aeabi_dcmplt>
 80031e0:	1e03      	subs	r3, r0, #0
 80031e2:	d00e      	beq.n	8003202 <HAL_UART_RxCpltCallback+0xcfe>
 80031e4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80031e6:	f7ff f89f 	bl	8002328 <__aeabi_f2d>
 80031ea:	4a52      	ldr	r2, [pc, #328]	; (8003334 <HAL_UART_RxCpltCallback+0xe30>)
 80031ec:	4b52      	ldr	r3, [pc, #328]	; (8003338 <HAL_UART_RxCpltCallback+0xe34>)
 80031ee:	f7fd f947 	bl	8000480 <__aeabi_dcmpgt>
 80031f2:	1e03      	subs	r3, r0, #0
 80031f4:	d005      	beq.n	8003202 <HAL_UART_RxCpltCallback+0xcfe>
						gpio_flags[i] = 1;
 80031f6:	4b4a      	ldr	r3, [pc, #296]	; (8003320 <HAL_UART_RxCpltCallback+0xe1c>)
 80031f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031fa:	0092      	lsls	r2, r2, #2
 80031fc:	2101      	movs	r1, #1
 80031fe:	50d1      	str	r1, [r2, r3]
 8003200:	e053      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 8003202:	2100      	movs	r1, #0
 8003204:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003206:	f7fd f95b 	bl	80004c0 <__aeabi_fcmpeq>
 800320a:	1e03      	subs	r3, r0, #0
 800320c:	d14d      	bne.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 800320e:	4b44      	ldr	r3, [pc, #272]	; (8003320 <HAL_UART_RxCpltCallback+0xe1c>)
 8003210:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	2100      	movs	r1, #0
 8003216:	50d1      	str	r1, [r2, r3]
 8003218:	e047      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					}

				} else if (i == 16) { // for i = 14 you read the internal voltage
 800321a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800321c:	2b10      	cmp	r3, #16
 800321e:	d144      	bne.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					// Should be 3.3 for our actual Signal Board
					float voltage = adc * (3.3 / 4095);
 8003220:	2358      	movs	r3, #88	; 0x58
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	0018      	movs	r0, r3
 8003228:	f7ff f828 	bl	800227c <__aeabi_i2d>
 800322c:	4a32      	ldr	r2, [pc, #200]	; (80032f8 <HAL_UART_RxCpltCallback+0xdf4>)
 800322e:	4b33      	ldr	r3, [pc, #204]	; (80032fc <HAL_UART_RxCpltCallback+0xdf8>)
 8003230:	f7fe f9d2 	bl	80015d8 <__aeabi_dmul>
 8003234:	0002      	movs	r2, r0
 8003236:	000b      	movs	r3, r1
 8003238:	0010      	movs	r0, r2
 800323a:	0019      	movs	r1, r3
 800323c:	f7ff f8bc 	bl	80023b8 <__aeabi_d2f>
 8003240:	1c03      	adds	r3, r0, #0
 8003242:	657b      	str	r3, [r7, #84]	; 0x54
					sprintf(value, "%f", voltage);
 8003244:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003246:	f7ff f86f 	bl	8002328 <__aeabi_f2d>
 800324a:	0002      	movs	r2, r0
 800324c:	000b      	movs	r3, r1
 800324e:	492e      	ldr	r1, [pc, #184]	; (8003308 <HAL_UART_RxCpltCallback+0xe04>)
 8003250:	2008      	movs	r0, #8
 8003252:	1838      	adds	r0, r7, r0
 8003254:	f004 fe36 	bl	8007ec4 <siprintf>
					HAL_UART_Transmit(&huart1, "VREFINT", 7, 100);
 8003258:	493b      	ldr	r1, [pc, #236]	; (8003348 <HAL_UART_RxCpltCallback+0xe44>)
 800325a:	482d      	ldr	r0, [pc, #180]	; (8003310 <HAL_UART_RxCpltCallback+0xe0c>)
 800325c:	2364      	movs	r3, #100	; 0x64
 800325e:	2207      	movs	r2, #7
 8003260:	f002 fdd6 	bl	8005e10 <HAL_UART_Transmit>
					if (voltage < 3.4 && voltage > 3.2) {
 8003264:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003266:	f7ff f85f 	bl	8002328 <__aeabi_f2d>
 800326a:	4a2a      	ldr	r2, [pc, #168]	; (8003314 <HAL_UART_RxCpltCallback+0xe10>)
 800326c:	4b30      	ldr	r3, [pc, #192]	; (8003330 <HAL_UART_RxCpltCallback+0xe2c>)
 800326e:	f7fd f8f3 	bl	8000458 <__aeabi_dcmplt>
 8003272:	1e03      	subs	r3, r0, #0
 8003274:	d00e      	beq.n	8003294 <HAL_UART_RxCpltCallback+0xd90>
 8003276:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003278:	f7ff f856 	bl	8002328 <__aeabi_f2d>
 800327c:	4a2d      	ldr	r2, [pc, #180]	; (8003334 <HAL_UART_RxCpltCallback+0xe30>)
 800327e:	4b2e      	ldr	r3, [pc, #184]	; (8003338 <HAL_UART_RxCpltCallback+0xe34>)
 8003280:	f7fd f8fe 	bl	8000480 <__aeabi_dcmpgt>
 8003284:	1e03      	subs	r3, r0, #0
 8003286:	d005      	beq.n	8003294 <HAL_UART_RxCpltCallback+0xd90>
						gpio_flags[i] = 1;
 8003288:	4b25      	ldr	r3, [pc, #148]	; (8003320 <HAL_UART_RxCpltCallback+0xe1c>)
 800328a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800328c:	0092      	lsls	r2, r2, #2
 800328e:	2101      	movs	r1, #1
 8003290:	50d1      	str	r1, [r2, r3]
 8003292:	e00a      	b.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
					} else if (voltage != 0) {
 8003294:	2100      	movs	r1, #0
 8003296:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003298:	f7fd f912 	bl	80004c0 <__aeabi_fcmpeq>
 800329c:	1e03      	subs	r3, r0, #0
 800329e:	d104      	bne.n	80032aa <HAL_UART_RxCpltCallback+0xda6>
						gpio_flags[i] = 0;
 80032a0:	4b1f      	ldr	r3, [pc, #124]	; (8003320 <HAL_UART_RxCpltCallback+0xe1c>)
 80032a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032a4:	0092      	lsls	r2, r2, #2
 80032a6:	2100      	movs	r1, #0
 80032a8:	50d1      	str	r1, [r2, r3]
					}

				}

				HAL_UART_Transmit(&huart1, ": ", 2, 100);
 80032aa:	4928      	ldr	r1, [pc, #160]	; (800334c <HAL_UART_RxCpltCallback+0xe48>)
 80032ac:	4818      	ldr	r0, [pc, #96]	; (8003310 <HAL_UART_RxCpltCallback+0xe0c>)
 80032ae:	2364      	movs	r3, #100	; 0x64
 80032b0:	2202      	movs	r2, #2
 80032b2:	f002 fdad 	bl	8005e10 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, value, 8, 100);
 80032b6:	2308      	movs	r3, #8
 80032b8:	18f9      	adds	r1, r7, r3
 80032ba:	4815      	ldr	r0, [pc, #84]	; (8003310 <HAL_UART_RxCpltCallback+0xe0c>)
 80032bc:	2364      	movs	r3, #100	; 0x64
 80032be:	2208      	movs	r2, #8
 80032c0:	f002 fda6 	bl	8005e10 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 80032c4:	4922      	ldr	r1, [pc, #136]	; (8003350 <HAL_UART_RxCpltCallback+0xe4c>)
 80032c6:	4812      	ldr	r0, [pc, #72]	; (8003310 <HAL_UART_RxCpltCallback+0xe0c>)
 80032c8:	2364      	movs	r3, #100	; 0x64
 80032ca:	2202      	movs	r2, #2
 80032cc:	f002 fda0 	bl	8005e10 <HAL_UART_Transmit>
			for (int i = 0; i < adcChannelCount; i++) {
 80032d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d2:	3301      	adds	r3, #1
 80032d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032d6:	2211      	movs	r2, #17
 80032d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032da:	4293      	cmp	r3, r2
 80032dc:	da01      	bge.n	80032e2 <HAL_UART_RxCpltCallback+0xdde>
 80032de:	f7ff f9f1 	bl	80026c4 <HAL_UART_RxCpltCallback+0x1c0>

			}

			HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 80032e2:	491b      	ldr	r1, [pc, #108]	; (8003350 <HAL_UART_RxCpltCallback+0xe4c>)
 80032e4:	480a      	ldr	r0, [pc, #40]	; (8003310 <HAL_UART_RxCpltCallback+0xe0c>)
 80032e6:	2364      	movs	r3, #100	; 0x64
 80032e8:	2202      	movs	r2, #2
 80032ea:	f002 fd91 	bl	8005e10 <HAL_UART_Transmit>
			 HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 100);
			 HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
			 */
		}
	}
}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b01b      	add	sp, #108	; 0x6c
 80032f4:	bd90      	pop	{r4, r7, pc}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	e734d9b4 	.word	0xe734d9b4
 80032fc:	3f4a680c 	.word	0x3f4a680c
 8003300:	cccccccd 	.word	0xcccccccd
 8003304:	bff0cccc 	.word	0xbff0cccc
 8003308:	0800bca8 	.word	0x0800bca8
 800330c:	0800bd4c 	.word	0x0800bd4c
 8003310:	200002f0 	.word	0x200002f0
 8003314:	33333333 	.word	0x33333333
 8003318:	402e3333 	.word	0x402e3333
 800331c:	402dcccc 	.word	0x402dcccc
 8003320:	2000041c 	.word	0x2000041c
 8003324:	eb851eb8 	.word	0xeb851eb8
 8003328:	3ffab851 	.word	0x3ffab851
 800332c:	0800bd5c 	.word	0x0800bd5c
 8003330:	400b3333 	.word	0x400b3333
 8003334:	9999999a 	.word	0x9999999a
 8003338:	40099999 	.word	0x40099999
 800333c:	40140000 	.word	0x40140000
 8003340:	0800bd6c 	.word	0x0800bd6c
 8003344:	0800bd78 	.word	0x0800bd78
 8003348:	0800bd84 	.word	0x0800bd84
 800334c:	0800bd8c 	.word	0x0800bd8c
 8003350:	0800bca4 	.word	0x0800bca4

08003354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800335a:	f000 fd7f 	bl	8003e5c <HAL_Init>
	/* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800335e:	f000 f82d 	bl	80033bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003362:	f000 fa45 	bl	80037f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003366:	f000 fa25 	bl	80037b4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800336a:	f000 f9f3 	bl	8003754 <MX_USART1_UART_Init>
  MX_ADC_Init();
 800336e:	f000 f885 	bl	800347c <MX_ADC_Init>
  MX_I2C1_Init();
 8003372:	f000 f9af 	bl	80036d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	for (int i = 0; i < 15; i++) {
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	e007      	b.n	800338c <main+0x38>
		gpio_flags[i] = 1;
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <main+0x58>)
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	0092      	lsls	r2, r2, #2
 8003382:	2101      	movs	r1, #1
 8003384:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < 15; i++) {
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3301      	adds	r3, #1
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b0e      	cmp	r3, #14
 8003390:	ddf4      	ble.n	800337c <main+0x28>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <main+0x5c>)
 8003394:	2120      	movs	r1, #32
 8003396:	2201      	movs	r2, #1
 8003398:	0018      	movs	r0, r3
 800339a:	f001 fe34 	bl	8005006 <HAL_GPIO_WritePin>

	/* USER CODE BEGIN WHILE */
	while (1) {

		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 800339e:	4905      	ldr	r1, [pc, #20]	; (80033b4 <main+0x60>)
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <main+0x64>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	0018      	movs	r0, r3
 80033a6:	f002 fddc 	bl	8005f62 <HAL_UART_Receive_IT>
 80033aa:	e7f8      	b.n	800339e <main+0x4a>
 80033ac:	2000041c 	.word	0x2000041c
 80033b0:	48000400 	.word	0x48000400
 80033b4:	20000374 	.word	0x20000374
 80033b8:	200002f0 	.word	0x200002f0

080033bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b097      	sub	sp, #92	; 0x5c
 80033c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033c2:	2428      	movs	r4, #40	; 0x28
 80033c4:	193b      	adds	r3, r7, r4
 80033c6:	0018      	movs	r0, r3
 80033c8:	2330      	movs	r3, #48	; 0x30
 80033ca:	001a      	movs	r2, r3
 80033cc:	2100      	movs	r1, #0
 80033ce:	f003 fef7 	bl	80071c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033d2:	2318      	movs	r3, #24
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	0018      	movs	r0, r3
 80033d8:	2310      	movs	r3, #16
 80033da:	001a      	movs	r2, r3
 80033dc:	2100      	movs	r1, #0
 80033de:	f003 feef 	bl	80071c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	0018      	movs	r0, r3
 80033e6:	2314      	movs	r3, #20
 80033e8:	001a      	movs	r2, r3
 80033ea:	2100      	movs	r1, #0
 80033ec:	f003 fee8 	bl	80071c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80033f0:	0021      	movs	r1, r4
 80033f2:	187b      	adds	r3, r7, r1
 80033f4:	2212      	movs	r2, #18
 80033f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	2201      	movs	r2, #1
 80033fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80033fe:	187b      	adds	r3, r7, r1
 8003400:	2201      	movs	r2, #1
 8003402:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003404:	187b      	adds	r3, r7, r1
 8003406:	2210      	movs	r2, #16
 8003408:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800340a:	187b      	adds	r3, r7, r1
 800340c:	2210      	movs	r2, #16
 800340e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003410:	187b      	adds	r3, r7, r1
 8003412:	2200      	movs	r2, #0
 8003414:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003416:	187b      	adds	r3, r7, r1
 8003418:	0018      	movs	r0, r3
 800341a:	f001 ff5b 	bl	80052d4 <HAL_RCC_OscConfig>
 800341e:	1e03      	subs	r3, r0, #0
 8003420:	d001      	beq.n	8003426 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003422:	f000 fa7f 	bl	8003924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003426:	2118      	movs	r1, #24
 8003428:	187b      	adds	r3, r7, r1
 800342a:	2207      	movs	r2, #7
 800342c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800342e:	187b      	adds	r3, r7, r1
 8003430:	2200      	movs	r2, #0
 8003432:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003434:	187b      	adds	r3, r7, r1
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800343a:	187b      	adds	r3, r7, r1
 800343c:	2200      	movs	r2, #0
 800343e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003440:	187b      	adds	r3, r7, r1
 8003442:	2100      	movs	r1, #0
 8003444:	0018      	movs	r0, r3
 8003446:	f002 fa5f 	bl	8005908 <HAL_RCC_ClockConfig>
 800344a:	1e03      	subs	r3, r0, #0
 800344c:	d001      	beq.n	8003452 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800344e:	f000 fa69 	bl	8003924 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003452:	1d3b      	adds	r3, r7, #4
 8003454:	2221      	movs	r2, #33	; 0x21
 8003456:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003458:	1d3b      	adds	r3, r7, #4
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800345e:	1d3b      	adds	r3, r7, #4
 8003460:	2200      	movs	r2, #0
 8003462:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003464:	1d3b      	adds	r3, r7, #4
 8003466:	0018      	movs	r0, r3
 8003468:	f002 fba0 	bl	8005bac <HAL_RCCEx_PeriphCLKConfig>
 800346c:	1e03      	subs	r3, r0, #0
 800346e:	d001      	beq.n	8003474 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003470:	f000 fa58 	bl	8003924 <Error_Handler>
  }
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b017      	add	sp, #92	; 0x5c
 800347a:	bd90      	pop	{r4, r7, pc}

0800347c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003482:	1d3b      	adds	r3, r7, #4
 8003484:	0018      	movs	r0, r3
 8003486:	230c      	movs	r3, #12
 8003488:	001a      	movs	r2, r3
 800348a:	2100      	movs	r1, #0
 800348c:	f003 fe98 	bl	80071c0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003490:	4b8e      	ldr	r3, [pc, #568]	; (80036cc <MX_ADC_Init+0x250>)
 8003492:	4a8f      	ldr	r2, [pc, #572]	; (80036d0 <MX_ADC_Init+0x254>)
 8003494:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003496:	4b8d      	ldr	r3, [pc, #564]	; (80036cc <MX_ADC_Init+0x250>)
 8003498:	2200      	movs	r2, #0
 800349a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800349c:	4b8b      	ldr	r3, [pc, #556]	; (80036cc <MX_ADC_Init+0x250>)
 800349e:	2200      	movs	r2, #0
 80034a0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034a2:	4b8a      	ldr	r3, [pc, #552]	; (80036cc <MX_ADC_Init+0x250>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80034a8:	4b88      	ldr	r3, [pc, #544]	; (80036cc <MX_ADC_Init+0x250>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80034ae:	4b87      	ldr	r3, [pc, #540]	; (80036cc <MX_ADC_Init+0x250>)
 80034b0:	2204      	movs	r2, #4
 80034b2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80034b4:	4b85      	ldr	r3, [pc, #532]	; (80036cc <MX_ADC_Init+0x250>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80034ba:	4b84      	ldr	r3, [pc, #528]	; (80036cc <MX_ADC_Init+0x250>)
 80034bc:	2200      	movs	r2, #0
 80034be:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80034c0:	4b82      	ldr	r3, [pc, #520]	; (80036cc <MX_ADC_Init+0x250>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80034c6:	4b81      	ldr	r3, [pc, #516]	; (80036cc <MX_ADC_Init+0x250>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80034cc:	4b7f      	ldr	r3, [pc, #508]	; (80036cc <MX_ADC_Init+0x250>)
 80034ce:	22c2      	movs	r2, #194	; 0xc2
 80034d0:	32ff      	adds	r2, #255	; 0xff
 80034d2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80034d4:	4b7d      	ldr	r3, [pc, #500]	; (80036cc <MX_ADC_Init+0x250>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80034da:	4b7c      	ldr	r3, [pc, #496]	; (80036cc <MX_ADC_Init+0x250>)
 80034dc:	2224      	movs	r2, #36	; 0x24
 80034de:	2100      	movs	r1, #0
 80034e0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80034e2:	4b7a      	ldr	r3, [pc, #488]	; (80036cc <MX_ADC_Init+0x250>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80034e8:	4b78      	ldr	r3, [pc, #480]	; (80036cc <MX_ADC_Init+0x250>)
 80034ea:	0018      	movs	r0, r3
 80034ec:	f000 fd1a 	bl	8003f24 <HAL_ADC_Init>
 80034f0:	1e03      	subs	r3, r0, #0
 80034f2:	d001      	beq.n	80034f8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80034f4:	f000 fa16 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80034f8:	1d3b      	adds	r3, r7, #4
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80034fe:	1d3b      	adds	r3, r7, #4
 8003500:	2280      	movs	r2, #128	; 0x80
 8003502:	0152      	lsls	r2, r2, #5
 8003504:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003506:	1d3b      	adds	r3, r7, #4
 8003508:	2280      	movs	r2, #128	; 0x80
 800350a:	0552      	lsls	r2, r2, #21
 800350c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800350e:	1d3a      	adds	r2, r7, #4
 8003510:	4b6e      	ldr	r3, [pc, #440]	; (80036cc <MX_ADC_Init+0x250>)
 8003512:	0011      	movs	r1, r2
 8003514:	0018      	movs	r0, r3
 8003516:	f000 fedf 	bl	80042d8 <HAL_ADC_ConfigChannel>
 800351a:	1e03      	subs	r3, r0, #0
 800351c:	d001      	beq.n	8003522 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800351e:	f000 fa01 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	2201      	movs	r2, #1
 8003526:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003528:	1d3a      	adds	r2, r7, #4
 800352a:	4b68      	ldr	r3, [pc, #416]	; (80036cc <MX_ADC_Init+0x250>)
 800352c:	0011      	movs	r1, r2
 800352e:	0018      	movs	r0, r3
 8003530:	f000 fed2 	bl	80042d8 <HAL_ADC_ConfigChannel>
 8003534:	1e03      	subs	r3, r0, #0
 8003536:	d001      	beq.n	800353c <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8003538:	f000 f9f4 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	2202      	movs	r2, #2
 8003540:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003542:	1d3a      	adds	r2, r7, #4
 8003544:	4b61      	ldr	r3, [pc, #388]	; (80036cc <MX_ADC_Init+0x250>)
 8003546:	0011      	movs	r1, r2
 8003548:	0018      	movs	r0, r3
 800354a:	f000 fec5 	bl	80042d8 <HAL_ADC_ConfigChannel>
 800354e:	1e03      	subs	r3, r0, #0
 8003550:	d001      	beq.n	8003556 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8003552:	f000 f9e7 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003556:	1d3b      	adds	r3, r7, #4
 8003558:	2203      	movs	r2, #3
 800355a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800355c:	1d3a      	adds	r2, r7, #4
 800355e:	4b5b      	ldr	r3, [pc, #364]	; (80036cc <MX_ADC_Init+0x250>)
 8003560:	0011      	movs	r1, r2
 8003562:	0018      	movs	r0, r3
 8003564:	f000 feb8 	bl	80042d8 <HAL_ADC_ConfigChannel>
 8003568:	1e03      	subs	r3, r0, #0
 800356a:	d001      	beq.n	8003570 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 800356c:	f000 f9da 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	2205      	movs	r2, #5
 8003574:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003576:	1d3a      	adds	r2, r7, #4
 8003578:	4b54      	ldr	r3, [pc, #336]	; (80036cc <MX_ADC_Init+0x250>)
 800357a:	0011      	movs	r1, r2
 800357c:	0018      	movs	r0, r3
 800357e:	f000 feab 	bl	80042d8 <HAL_ADC_ConfigChannel>
 8003582:	1e03      	subs	r3, r0, #0
 8003584:	d001      	beq.n	800358a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8003586:	f000 f9cd 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800358a:	1d3b      	adds	r3, r7, #4
 800358c:	2206      	movs	r2, #6
 800358e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003590:	1d3a      	adds	r2, r7, #4
 8003592:	4b4e      	ldr	r3, [pc, #312]	; (80036cc <MX_ADC_Init+0x250>)
 8003594:	0011      	movs	r1, r2
 8003596:	0018      	movs	r0, r3
 8003598:	f000 fe9e 	bl	80042d8 <HAL_ADC_ConfigChannel>
 800359c:	1e03      	subs	r3, r0, #0
 800359e:	d001      	beq.n	80035a4 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 80035a0:	f000 f9c0 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80035a4:	1d3b      	adds	r3, r7, #4
 80035a6:	2207      	movs	r2, #7
 80035a8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80035aa:	1d3a      	adds	r2, r7, #4
 80035ac:	4b47      	ldr	r3, [pc, #284]	; (80036cc <MX_ADC_Init+0x250>)
 80035ae:	0011      	movs	r1, r2
 80035b0:	0018      	movs	r0, r3
 80035b2:	f000 fe91 	bl	80042d8 <HAL_ADC_ConfigChannel>
 80035b6:	1e03      	subs	r3, r0, #0
 80035b8:	d001      	beq.n	80035be <MX_ADC_Init+0x142>
  {
    Error_Handler();
 80035ba:	f000 f9b3 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80035be:	1d3b      	adds	r3, r7, #4
 80035c0:	2208      	movs	r2, #8
 80035c2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80035c4:	1d3a      	adds	r2, r7, #4
 80035c6:	4b41      	ldr	r3, [pc, #260]	; (80036cc <MX_ADC_Init+0x250>)
 80035c8:	0011      	movs	r1, r2
 80035ca:	0018      	movs	r0, r3
 80035cc:	f000 fe84 	bl	80042d8 <HAL_ADC_ConfigChannel>
 80035d0:	1e03      	subs	r3, r0, #0
 80035d2:	d001      	beq.n	80035d8 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 80035d4:	f000 f9a6 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80035d8:	1d3b      	adds	r3, r7, #4
 80035da:	2209      	movs	r2, #9
 80035dc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80035de:	1d3a      	adds	r2, r7, #4
 80035e0:	4b3a      	ldr	r3, [pc, #232]	; (80036cc <MX_ADC_Init+0x250>)
 80035e2:	0011      	movs	r1, r2
 80035e4:	0018      	movs	r0, r3
 80035e6:	f000 fe77 	bl	80042d8 <HAL_ADC_ConfigChannel>
 80035ea:	1e03      	subs	r3, r0, #0
 80035ec:	d001      	beq.n	80035f2 <MX_ADC_Init+0x176>
  {
    Error_Handler();
 80035ee:	f000 f999 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80035f2:	1d3b      	adds	r3, r7, #4
 80035f4:	220a      	movs	r2, #10
 80035f6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80035f8:	1d3a      	adds	r2, r7, #4
 80035fa:	4b34      	ldr	r3, [pc, #208]	; (80036cc <MX_ADC_Init+0x250>)
 80035fc:	0011      	movs	r1, r2
 80035fe:	0018      	movs	r0, r3
 8003600:	f000 fe6a 	bl	80042d8 <HAL_ADC_ConfigChannel>
 8003604:	1e03      	subs	r3, r0, #0
 8003606:	d001      	beq.n	800360c <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8003608:	f000 f98c 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	220b      	movs	r2, #11
 8003610:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003612:	1d3a      	adds	r2, r7, #4
 8003614:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <MX_ADC_Init+0x250>)
 8003616:	0011      	movs	r1, r2
 8003618:	0018      	movs	r0, r3
 800361a:	f000 fe5d 	bl	80042d8 <HAL_ADC_ConfigChannel>
 800361e:	1e03      	subs	r3, r0, #0
 8003620:	d001      	beq.n	8003626 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8003622:	f000 f97f 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	220c      	movs	r2, #12
 800362a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800362c:	1d3a      	adds	r2, r7, #4
 800362e:	4b27      	ldr	r3, [pc, #156]	; (80036cc <MX_ADC_Init+0x250>)
 8003630:	0011      	movs	r1, r2
 8003632:	0018      	movs	r0, r3
 8003634:	f000 fe50 	bl	80042d8 <HAL_ADC_ConfigChannel>
 8003638:	1e03      	subs	r3, r0, #0
 800363a:	d001      	beq.n	8003640 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 800363c:	f000 f972 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	220d      	movs	r2, #13
 8003644:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003646:	1d3a      	adds	r2, r7, #4
 8003648:	4b20      	ldr	r3, [pc, #128]	; (80036cc <MX_ADC_Init+0x250>)
 800364a:	0011      	movs	r1, r2
 800364c:	0018      	movs	r0, r3
 800364e:	f000 fe43 	bl	80042d8 <HAL_ADC_ConfigChannel>
 8003652:	1e03      	subs	r3, r0, #0
 8003654:	d001      	beq.n	800365a <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8003656:	f000 f965 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800365a:	1d3b      	adds	r3, r7, #4
 800365c:	220e      	movs	r2, #14
 800365e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003660:	1d3a      	adds	r2, r7, #4
 8003662:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <MX_ADC_Init+0x250>)
 8003664:	0011      	movs	r1, r2
 8003666:	0018      	movs	r0, r3
 8003668:	f000 fe36 	bl	80042d8 <HAL_ADC_ConfigChannel>
 800366c:	1e03      	subs	r3, r0, #0
 800366e:	d001      	beq.n	8003674 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8003670:	f000 f958 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	220f      	movs	r2, #15
 8003678:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800367a:	1d3a      	adds	r2, r7, #4
 800367c:	4b13      	ldr	r3, [pc, #76]	; (80036cc <MX_ADC_Init+0x250>)
 800367e:	0011      	movs	r1, r2
 8003680:	0018      	movs	r0, r3
 8003682:	f000 fe29 	bl	80042d8 <HAL_ADC_ConfigChannel>
 8003686:	1e03      	subs	r3, r0, #0
 8003688:	d001      	beq.n	800368e <MX_ADC_Init+0x212>
  {
    Error_Handler();
 800368a:	f000 f94b 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	2210      	movs	r2, #16
 8003692:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003694:	1d3a      	adds	r2, r7, #4
 8003696:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <MX_ADC_Init+0x250>)
 8003698:	0011      	movs	r1, r2
 800369a:	0018      	movs	r0, r3
 800369c:	f000 fe1c 	bl	80042d8 <HAL_ADC_ConfigChannel>
 80036a0:	1e03      	subs	r3, r0, #0
 80036a2:	d001      	beq.n	80036a8 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 80036a4:	f000 f93e 	bl	8003924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80036a8:	1d3b      	adds	r3, r7, #4
 80036aa:	2211      	movs	r2, #17
 80036ac:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80036ae:	1d3a      	adds	r2, r7, #4
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <MX_ADC_Init+0x250>)
 80036b2:	0011      	movs	r1, r2
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 fe0f 	bl	80042d8 <HAL_ADC_ConfigChannel>
 80036ba:	1e03      	subs	r3, r0, #0
 80036bc:	d001      	beq.n	80036c2 <MX_ADC_Init+0x246>
  {
    Error_Handler();
 80036be:	f000 f931 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b004      	add	sp, #16
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	20000220 	.word	0x20000220
 80036d0:	40012400 	.word	0x40012400

080036d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <MX_I2C1_Init+0x74>)
 80036da:	4a1c      	ldr	r2, [pc, #112]	; (800374c <MX_I2C1_Init+0x78>)
 80036dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80036de:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <MX_I2C1_Init+0x74>)
 80036e0:	4a1b      	ldr	r2, [pc, #108]	; (8003750 <MX_I2C1_Init+0x7c>)
 80036e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80036e4:	4b18      	ldr	r3, [pc, #96]	; (8003748 <MX_I2C1_Init+0x74>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036ea:	4b17      	ldr	r3, [pc, #92]	; (8003748 <MX_I2C1_Init+0x74>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036f0:	4b15      	ldr	r3, [pc, #84]	; (8003748 <MX_I2C1_Init+0x74>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80036f6:	4b14      	ldr	r3, [pc, #80]	; (8003748 <MX_I2C1_Init+0x74>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <MX_I2C1_Init+0x74>)
 80036fe:	2200      	movs	r2, #0
 8003700:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <MX_I2C1_Init+0x74>)
 8003704:	2200      	movs	r2, #0
 8003706:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003708:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <MX_I2C1_Init+0x74>)
 800370a:	2200      	movs	r2, #0
 800370c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800370e:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <MX_I2C1_Init+0x74>)
 8003710:	0018      	movs	r0, r3
 8003712:	f001 fcb1 	bl	8005078 <HAL_I2C_Init>
 8003716:	1e03      	subs	r3, r0, #0
 8003718:	d001      	beq.n	800371e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800371a:	f000 f903 	bl	8003924 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <MX_I2C1_Init+0x74>)
 8003720:	2100      	movs	r1, #0
 8003722:	0018      	movs	r0, r3
 8003724:	f001 fd3e 	bl	80051a4 <HAL_I2CEx_ConfigAnalogFilter>
 8003728:	1e03      	subs	r3, r0, #0
 800372a:	d001      	beq.n	8003730 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800372c:	f000 f8fa 	bl	8003924 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <MX_I2C1_Init+0x74>)
 8003732:	2100      	movs	r1, #0
 8003734:	0018      	movs	r0, r3
 8003736:	f001 fd81 	bl	800523c <HAL_I2CEx_ConfigDigitalFilter>
 800373a:	1e03      	subs	r3, r0, #0
 800373c:	d001      	beq.n	8003742 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800373e:	f000 f8f1 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	200002a4 	.word	0x200002a4
 800374c:	40005400 	.word	0x40005400
 8003750:	2000090e 	.word	0x2000090e

08003754 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003758:	4b14      	ldr	r3, [pc, #80]	; (80037ac <MX_USART1_UART_Init+0x58>)
 800375a:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <MX_USART1_UART_Init+0x5c>)
 800375c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <MX_USART1_UART_Init+0x58>)
 8003760:	22e1      	movs	r2, #225	; 0xe1
 8003762:	0252      	lsls	r2, r2, #9
 8003764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003766:	4b11      	ldr	r3, [pc, #68]	; (80037ac <MX_USART1_UART_Init+0x58>)
 8003768:	2200      	movs	r2, #0
 800376a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <MX_USART1_UART_Init+0x58>)
 800376e:	2200      	movs	r2, #0
 8003770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003772:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <MX_USART1_UART_Init+0x58>)
 8003774:	2200      	movs	r2, #0
 8003776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <MX_USART1_UART_Init+0x58>)
 800377a:	220c      	movs	r2, #12
 800377c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <MX_USART1_UART_Init+0x58>)
 8003780:	2200      	movs	r2, #0
 8003782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <MX_USART1_UART_Init+0x58>)
 8003786:	2200      	movs	r2, #0
 8003788:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <MX_USART1_UART_Init+0x58>)
 800378c:	2200      	movs	r2, #0
 800378e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <MX_USART1_UART_Init+0x58>)
 8003792:	2200      	movs	r2, #0
 8003794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <MX_USART1_UART_Init+0x58>)
 8003798:	0018      	movs	r0, r3
 800379a:	f002 fae5 	bl	8005d68 <HAL_UART_Init>
 800379e:	1e03      	subs	r3, r0, #0
 80037a0:	d001      	beq.n	80037a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80037a2:	f000 f8bf 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	200002f0 	.word	0x200002f0
 80037b0:	40013800 	.word	0x40013800

080037b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037ba:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <MX_DMA_Init+0x38>)
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <MX_DMA_Init+0x38>)
 80037c0:	2101      	movs	r1, #1
 80037c2:	430a      	orrs	r2, r1
 80037c4:	615a      	str	r2, [r3, #20]
 80037c6:	4b09      	ldr	r3, [pc, #36]	; (80037ec <MX_DMA_Init+0x38>)
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	2201      	movs	r2, #1
 80037cc:	4013      	ands	r3, r2
 80037ce:	607b      	str	r3, [r7, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80037d2:	2200      	movs	r2, #0
 80037d4:	2100      	movs	r1, #0
 80037d6:	2009      	movs	r0, #9
 80037d8:	f001 f840 	bl	800485c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80037dc:	2009      	movs	r0, #9
 80037de:	f001 f852 	bl	8004886 <HAL_NVIC_EnableIRQ>

}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b002      	add	sp, #8
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	40021000 	.word	0x40021000

080037f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b08b      	sub	sp, #44	; 0x2c
 80037f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f6:	2414      	movs	r4, #20
 80037f8:	193b      	adds	r3, r7, r4
 80037fa:	0018      	movs	r0, r3
 80037fc:	2314      	movs	r3, #20
 80037fe:	001a      	movs	r2, r3
 8003800:	2100      	movs	r1, #0
 8003802:	f003 fcdd 	bl	80071c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003806:	4b43      	ldr	r3, [pc, #268]	; (8003914 <MX_GPIO_Init+0x124>)
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	4b42      	ldr	r3, [pc, #264]	; (8003914 <MX_GPIO_Init+0x124>)
 800380c:	2180      	movs	r1, #128	; 0x80
 800380e:	0309      	lsls	r1, r1, #12
 8003810:	430a      	orrs	r2, r1
 8003812:	615a      	str	r2, [r3, #20]
 8003814:	4b3f      	ldr	r3, [pc, #252]	; (8003914 <MX_GPIO_Init+0x124>)
 8003816:	695a      	ldr	r2, [r3, #20]
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	031b      	lsls	r3, r3, #12
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003822:	4b3c      	ldr	r3, [pc, #240]	; (8003914 <MX_GPIO_Init+0x124>)
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	4b3b      	ldr	r3, [pc, #236]	; (8003914 <MX_GPIO_Init+0x124>)
 8003828:	2180      	movs	r1, #128	; 0x80
 800382a:	0289      	lsls	r1, r1, #10
 800382c:	430a      	orrs	r2, r1
 800382e:	615a      	str	r2, [r3, #20]
 8003830:	4b38      	ldr	r3, [pc, #224]	; (8003914 <MX_GPIO_Init+0x124>)
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	029b      	lsls	r3, r3, #10
 8003838:	4013      	ands	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800383e:	4b35      	ldr	r3, [pc, #212]	; (8003914 <MX_GPIO_Init+0x124>)
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	4b34      	ldr	r3, [pc, #208]	; (8003914 <MX_GPIO_Init+0x124>)
 8003844:	2180      	movs	r1, #128	; 0x80
 8003846:	02c9      	lsls	r1, r1, #11
 8003848:	430a      	orrs	r2, r1
 800384a:	615a      	str	r2, [r3, #20]
 800384c:	4b31      	ldr	r3, [pc, #196]	; (8003914 <MX_GPIO_Init+0x124>)
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	02db      	lsls	r3, r3, #11
 8003854:	4013      	ands	r3, r2
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800385a:	4b2e      	ldr	r3, [pc, #184]	; (8003914 <MX_GPIO_Init+0x124>)
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <MX_GPIO_Init+0x124>)
 8003860:	2180      	movs	r1, #128	; 0x80
 8003862:	03c9      	lsls	r1, r1, #15
 8003864:	430a      	orrs	r2, r1
 8003866:	615a      	str	r2, [r3, #20]
 8003868:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <MX_GPIO_Init+0x124>)
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	03db      	lsls	r3, r3, #15
 8003870:	4013      	ands	r3, r2
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8003876:	239f      	movs	r3, #159	; 0x9f
 8003878:	019b      	lsls	r3, r3, #6
 800387a:	4827      	ldr	r0, [pc, #156]	; (8003918 <MX_GPIO_Init+0x128>)
 800387c:	2200      	movs	r2, #0
 800387e:	0019      	movs	r1, r3
 8003880:	f001 fbc1 	bl	8005006 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8003884:	4b25      	ldr	r3, [pc, #148]	; (800391c <MX_GPIO_Init+0x12c>)
 8003886:	2200      	movs	r2, #0
 8003888:	21c0      	movs	r1, #192	; 0xc0
 800388a:	0018      	movs	r0, r3
 800388c:	f001 fbbb 	bl	8005006 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8003890:	4b23      	ldr	r3, [pc, #140]	; (8003920 <MX_GPIO_Init+0x130>)
 8003892:	2200      	movs	r2, #0
 8003894:	2160      	movs	r1, #96	; 0x60
 8003896:	0018      	movs	r0, r3
 8003898:	f001 fbb5 	bl	8005006 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800389c:	193b      	adds	r3, r7, r4
 800389e:	229f      	movs	r2, #159	; 0x9f
 80038a0:	0192      	lsls	r2, r2, #6
 80038a2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a4:	193b      	adds	r3, r7, r4
 80038a6:	2201      	movs	r2, #1
 80038a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038aa:	193b      	adds	r3, r7, r4
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b0:	193b      	adds	r3, r7, r4
 80038b2:	2200      	movs	r2, #0
 80038b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038b6:	193b      	adds	r3, r7, r4
 80038b8:	4a17      	ldr	r2, [pc, #92]	; (8003918 <MX_GPIO_Init+0x128>)
 80038ba:	0019      	movs	r1, r3
 80038bc:	0010      	movs	r0, r2
 80038be:	f001 fa15 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038c2:	193b      	adds	r3, r7, r4
 80038c4:	22c0      	movs	r2, #192	; 0xc0
 80038c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038c8:	193b      	adds	r3, r7, r4
 80038ca:	2201      	movs	r2, #1
 80038cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	193b      	adds	r3, r7, r4
 80038d0:	2200      	movs	r2, #0
 80038d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d4:	193b      	adds	r3, r7, r4
 80038d6:	2200      	movs	r2, #0
 80038d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038da:	193b      	adds	r3, r7, r4
 80038dc:	4a0f      	ldr	r2, [pc, #60]	; (800391c <MX_GPIO_Init+0x12c>)
 80038de:	0019      	movs	r1, r3
 80038e0:	0010      	movs	r0, r2
 80038e2:	f001 fa03 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80038e6:	0021      	movs	r1, r4
 80038e8:	187b      	adds	r3, r7, r1
 80038ea:	2260      	movs	r2, #96	; 0x60
 80038ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	2201      	movs	r2, #1
 80038f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f4:	187b      	adds	r3, r7, r1
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fa:	187b      	adds	r3, r7, r1
 80038fc:	2200      	movs	r2, #0
 80038fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003900:	187b      	adds	r3, r7, r1
 8003902:	4a07      	ldr	r2, [pc, #28]	; (8003920 <MX_GPIO_Init+0x130>)
 8003904:	0019      	movs	r1, r3
 8003906:	0010      	movs	r0, r2
 8003908:	f001 f9f0 	bl	8004cec <HAL_GPIO_Init>

}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b00b      	add	sp, #44	; 0x2c
 8003912:	bd90      	pop	{r4, r7, pc}
 8003914:	40021000 	.word	0x40021000
 8003918:	48000800 	.word	0x48000800
 800391c:	48001400 	.word	0x48001400
 8003920:	48000400 	.word	0x48000400

08003924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003928:	b672      	cpsid	i
}
 800392a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800392c:	e7fe      	b.n	800392c <Error_Handler+0x8>
	...

08003930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003936:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <HAL_MspInit+0x44>)
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <HAL_MspInit+0x44>)
 800393c:	2101      	movs	r1, #1
 800393e:	430a      	orrs	r2, r1
 8003940:	619a      	str	r2, [r3, #24]
 8003942:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <HAL_MspInit+0x44>)
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2201      	movs	r2, #1
 8003948:	4013      	ands	r3, r2
 800394a:	607b      	str	r3, [r7, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <HAL_MspInit+0x44>)
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	4b08      	ldr	r3, [pc, #32]	; (8003974 <HAL_MspInit+0x44>)
 8003954:	2180      	movs	r1, #128	; 0x80
 8003956:	0549      	lsls	r1, r1, #21
 8003958:	430a      	orrs	r2, r1
 800395a:	61da      	str	r2, [r3, #28]
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_MspInit+0x44>)
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	2380      	movs	r3, #128	; 0x80
 8003962:	055b      	lsls	r3, r3, #21
 8003964:	4013      	ands	r3, r2
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	46bd      	mov	sp, r7
 800396e:	b002      	add	sp, #8
 8003970:	bd80      	pop	{r7, pc}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	40021000 	.word	0x40021000

08003978 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b08d      	sub	sp, #52	; 0x34
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	241c      	movs	r4, #28
 8003982:	193b      	adds	r3, r7, r4
 8003984:	0018      	movs	r0, r3
 8003986:	2314      	movs	r3, #20
 8003988:	001a      	movs	r2, r3
 800398a:	2100      	movs	r1, #0
 800398c:	f003 fc18 	bl	80071c0 <memset>
  if(hadc->Instance==ADC1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a4a      	ldr	r2, [pc, #296]	; (8003ac0 <HAL_ADC_MspInit+0x148>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d000      	beq.n	800399c <HAL_ADC_MspInit+0x24>
 800399a:	e08d      	b.n	8003ab8 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800399c:	4b49      	ldr	r3, [pc, #292]	; (8003ac4 <HAL_ADC_MspInit+0x14c>)
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	4b48      	ldr	r3, [pc, #288]	; (8003ac4 <HAL_ADC_MspInit+0x14c>)
 80039a2:	2180      	movs	r1, #128	; 0x80
 80039a4:	0089      	lsls	r1, r1, #2
 80039a6:	430a      	orrs	r2, r1
 80039a8:	619a      	str	r2, [r3, #24]
 80039aa:	4b46      	ldr	r3, [pc, #280]	; (8003ac4 <HAL_ADC_MspInit+0x14c>)
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039b8:	4b42      	ldr	r3, [pc, #264]	; (8003ac4 <HAL_ADC_MspInit+0x14c>)
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <HAL_ADC_MspInit+0x14c>)
 80039be:	2180      	movs	r1, #128	; 0x80
 80039c0:	0309      	lsls	r1, r1, #12
 80039c2:	430a      	orrs	r2, r1
 80039c4:	615a      	str	r2, [r3, #20]
 80039c6:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <HAL_ADC_MspInit+0x14c>)
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	031b      	lsls	r3, r3, #12
 80039ce:	4013      	ands	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d4:	4b3b      	ldr	r3, [pc, #236]	; (8003ac4 <HAL_ADC_MspInit+0x14c>)
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	4b3a      	ldr	r3, [pc, #232]	; (8003ac4 <HAL_ADC_MspInit+0x14c>)
 80039da:	2180      	movs	r1, #128	; 0x80
 80039dc:	0289      	lsls	r1, r1, #10
 80039de:	430a      	orrs	r2, r1
 80039e0:	615a      	str	r2, [r3, #20]
 80039e2:	4b38      	ldr	r3, [pc, #224]	; (8003ac4 <HAL_ADC_MspInit+0x14c>)
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	029b      	lsls	r3, r3, #10
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f0:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <HAL_ADC_MspInit+0x14c>)
 80039f2:	695a      	ldr	r2, [r3, #20]
 80039f4:	4b33      	ldr	r3, [pc, #204]	; (8003ac4 <HAL_ADC_MspInit+0x14c>)
 80039f6:	2180      	movs	r1, #128	; 0x80
 80039f8:	02c9      	lsls	r1, r1, #11
 80039fa:	430a      	orrs	r2, r1
 80039fc:	615a      	str	r2, [r3, #20]
 80039fe:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <HAL_ADC_MspInit+0x14c>)
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	02db      	lsls	r3, r3, #11
 8003a06:	4013      	ands	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003a0c:	193b      	adds	r3, r7, r4
 8003a0e:	223f      	movs	r2, #63	; 0x3f
 8003a10:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a12:	193b      	adds	r3, r7, r4
 8003a14:	2203      	movs	r2, #3
 8003a16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a18:	193b      	adds	r3, r7, r4
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a1e:	193b      	adds	r3, r7, r4
 8003a20:	4a29      	ldr	r2, [pc, #164]	; (8003ac8 <HAL_ADC_MspInit+0x150>)
 8003a22:	0019      	movs	r1, r3
 8003a24:	0010      	movs	r0, r2
 8003a26:	f001 f961 	bl	8004cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003a2a:	193b      	adds	r3, r7, r4
 8003a2c:	22ef      	movs	r2, #239	; 0xef
 8003a2e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a30:	193b      	adds	r3, r7, r4
 8003a32:	2203      	movs	r2, #3
 8003a34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a36:	193b      	adds	r3, r7, r4
 8003a38:	2200      	movs	r2, #0
 8003a3a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3c:	193a      	adds	r2, r7, r4
 8003a3e:	2390      	movs	r3, #144	; 0x90
 8003a40:	05db      	lsls	r3, r3, #23
 8003a42:	0011      	movs	r1, r2
 8003a44:	0018      	movs	r0, r3
 8003a46:	f001 f951 	bl	8004cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a4a:	193b      	adds	r3, r7, r4
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a50:	193b      	adds	r3, r7, r4
 8003a52:	2203      	movs	r2, #3
 8003a54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a56:	193b      	adds	r3, r7, r4
 8003a58:	2200      	movs	r2, #0
 8003a5a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a5c:	193b      	adds	r3, r7, r4
 8003a5e:	4a1b      	ldr	r2, [pc, #108]	; (8003acc <HAL_ADC_MspInit+0x154>)
 8003a60:	0019      	movs	r1, r3
 8003a62:	0010      	movs	r0, r2
 8003a64:	f001 f942 	bl	8004cec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HAL_ADC_MspInit+0x158>)
 8003a6a:	4a1a      	ldr	r2, [pc, #104]	; (8003ad4 <HAL_ADC_MspInit+0x15c>)
 8003a6c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a6e:	4b18      	ldr	r3, [pc, #96]	; (8003ad0 <HAL_ADC_MspInit+0x158>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a74:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <HAL_ADC_MspInit+0x158>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003a7a:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <HAL_ADC_MspInit+0x158>)
 8003a7c:	2280      	movs	r2, #128	; 0x80
 8003a7e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a80:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <HAL_ADC_MspInit+0x158>)
 8003a82:	2280      	movs	r2, #128	; 0x80
 8003a84:	0092      	lsls	r2, r2, #2
 8003a86:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a88:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <HAL_ADC_MspInit+0x158>)
 8003a8a:	2280      	movs	r2, #128	; 0x80
 8003a8c:	0112      	lsls	r2, r2, #4
 8003a8e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003a90:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <HAL_ADC_MspInit+0x158>)
 8003a92:	2220      	movs	r2, #32
 8003a94:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003a96:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <HAL_ADC_MspInit+0x158>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <HAL_ADC_MspInit+0x158>)
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f000 ff0e 	bl	80048c0 <HAL_DMA_Init>
 8003aa4:	1e03      	subs	r3, r0, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8003aa8:	f7ff ff3c 	bl	8003924 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a08      	ldr	r2, [pc, #32]	; (8003ad0 <HAL_ADC_MspInit+0x158>)
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ab2:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <HAL_ADC_MspInit+0x158>)
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ab8:	46c0      	nop			; (mov r8, r8)
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b00d      	add	sp, #52	; 0x34
 8003abe:	bd90      	pop	{r4, r7, pc}
 8003ac0:	40012400 	.word	0x40012400
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	48000800 	.word	0x48000800
 8003acc:	48000400 	.word	0x48000400
 8003ad0:	20000260 	.word	0x20000260
 8003ad4:	40020008 	.word	0x40020008

08003ad8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b08b      	sub	sp, #44	; 0x2c
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae0:	2414      	movs	r4, #20
 8003ae2:	193b      	adds	r3, r7, r4
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	2314      	movs	r3, #20
 8003ae8:	001a      	movs	r2, r3
 8003aea:	2100      	movs	r1, #0
 8003aec:	f003 fb68 	bl	80071c0 <memset>
  if(hi2c->Instance==I2C1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1c      	ldr	r2, [pc, #112]	; (8003b68 <HAL_I2C_MspInit+0x90>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d132      	bne.n	8003b60 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afa:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <HAL_I2C_MspInit+0x94>)
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <HAL_I2C_MspInit+0x94>)
 8003b00:	2180      	movs	r1, #128	; 0x80
 8003b02:	02c9      	lsls	r1, r1, #11
 8003b04:	430a      	orrs	r2, r1
 8003b06:	615a      	str	r2, [r3, #20]
 8003b08:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <HAL_I2C_MspInit+0x94>)
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	02db      	lsls	r3, r3, #11
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	22c0      	movs	r2, #192	; 0xc0
 8003b1a:	0092      	lsls	r2, r2, #2
 8003b1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b1e:	0021      	movs	r1, r4
 8003b20:	187b      	adds	r3, r7, r1
 8003b22:	2212      	movs	r2, #18
 8003b24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	2200      	movs	r2, #0
 8003b2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	2203      	movs	r2, #3
 8003b30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	2201      	movs	r2, #1
 8003b36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b38:	187b      	adds	r3, r7, r1
 8003b3a:	4a0d      	ldr	r2, [pc, #52]	; (8003b70 <HAL_I2C_MspInit+0x98>)
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	0010      	movs	r0, r2
 8003b40:	f001 f8d4 	bl	8004cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <HAL_I2C_MspInit+0x94>)
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <HAL_I2C_MspInit+0x94>)
 8003b4a:	2180      	movs	r1, #128	; 0x80
 8003b4c:	0389      	lsls	r1, r1, #14
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	61da      	str	r2, [r3, #28]
 8003b52:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <HAL_I2C_MspInit+0x94>)
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	039b      	lsls	r3, r3, #14
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b60:	46c0      	nop			; (mov r8, r8)
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b00b      	add	sp, #44	; 0x2c
 8003b66:	bd90      	pop	{r4, r7, pc}
 8003b68:	40005400 	.word	0x40005400
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	48000400 	.word	0x48000400

08003b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b74:	b590      	push	{r4, r7, lr}
 8003b76:	b08b      	sub	sp, #44	; 0x2c
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7c:	2414      	movs	r4, #20
 8003b7e:	193b      	adds	r3, r7, r4
 8003b80:	0018      	movs	r0, r3
 8003b82:	2314      	movs	r3, #20
 8003b84:	001a      	movs	r2, r3
 8003b86:	2100      	movs	r1, #0
 8003b88:	f003 fb1a 	bl	80071c0 <memset>
  if(huart->Instance==USART1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <HAL_UART_MspInit+0xa4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d13b      	bne.n	8003c0e <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b96:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <HAL_UART_MspInit+0xa8>)
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <HAL_UART_MspInit+0xa8>)
 8003b9c:	2180      	movs	r1, #128	; 0x80
 8003b9e:	01c9      	lsls	r1, r1, #7
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	619a      	str	r2, [r3, #24]
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <HAL_UART_MspInit+0xa8>)
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	01db      	lsls	r3, r3, #7
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb2:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <HAL_UART_MspInit+0xa8>)
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	4b19      	ldr	r3, [pc, #100]	; (8003c1c <HAL_UART_MspInit+0xa8>)
 8003bb8:	2180      	movs	r1, #128	; 0x80
 8003bba:	0289      	lsls	r1, r1, #10
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	615a      	str	r2, [r3, #20]
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <HAL_UART_MspInit+0xa8>)
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	2380      	movs	r3, #128	; 0x80
 8003bc6:	029b      	lsls	r3, r3, #10
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003bce:	193b      	adds	r3, r7, r4
 8003bd0:	22c0      	movs	r2, #192	; 0xc0
 8003bd2:	00d2      	lsls	r2, r2, #3
 8003bd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd6:	0021      	movs	r1, r4
 8003bd8:	187b      	adds	r3, r7, r1
 8003bda:	2202      	movs	r2, #2
 8003bdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bde:	187b      	adds	r3, r7, r1
 8003be0:	2200      	movs	r2, #0
 8003be2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	2203      	movs	r2, #3
 8003be8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003bea:	187b      	adds	r3, r7, r1
 8003bec:	2201      	movs	r2, #1
 8003bee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf0:	187a      	adds	r2, r7, r1
 8003bf2:	2390      	movs	r3, #144	; 0x90
 8003bf4:	05db      	lsls	r3, r3, #23
 8003bf6:	0011      	movs	r1, r2
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f001 f877 	bl	8004cec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2100      	movs	r1, #0
 8003c02:	201b      	movs	r0, #27
 8003c04:	f000 fe2a 	bl	800485c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c08:	201b      	movs	r0, #27
 8003c0a:	f000 fe3c 	bl	8004886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b00b      	add	sp, #44	; 0x2c
 8003c14:	bd90      	pop	{r4, r7, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	40013800 	.word	0x40013800
 8003c1c:	40021000 	.word	0x40021000

08003c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c24:	e7fe      	b.n	8003c24 <NMI_Handler+0x4>

08003c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c2a:	e7fe      	b.n	8003c2a <HardFault_Handler+0x4>

08003c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003c30:	46c0      	nop			; (mov r8, r8)
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c44:	f000 f952 	bl	8003eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003c54:	4b03      	ldr	r3, [pc, #12]	; (8003c64 <DMA1_Channel1_IRQHandler+0x14>)
 8003c56:	0018      	movs	r0, r3
 8003c58:	f000 ff5d 	bl	8004b16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003c5c:	46c0      	nop			; (mov r8, r8)
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	20000260 	.word	0x20000260

08003c68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c6c:	4b03      	ldr	r3, [pc, #12]	; (8003c7c <USART1_IRQHandler+0x14>)
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f002 f9d8 	bl	8006024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	200002f0 	.word	0x200002f0

08003c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
	return 1;
 8003c84:	2301      	movs	r3, #1
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <_kill>:

int _kill(int pid, int sig)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c96:	f003 fa69 	bl	800716c <__errno>
 8003c9a:	0003      	movs	r3, r0
 8003c9c:	2216      	movs	r2, #22
 8003c9e:	601a      	str	r2, [r3, #0]
	return -1;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	425b      	negs	r3, r3
}
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b002      	add	sp, #8
 8003caa:	bd80      	pop	{r7, pc}

08003cac <_exit>:

void _exit (int status)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	425a      	negs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	0011      	movs	r1, r2
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f7ff ffe5 	bl	8003c8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003cc2:	e7fe      	b.n	8003cc2 <_exit+0x16>

08003cc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	e00a      	b.n	8003cec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003cd6:	e000      	b.n	8003cda <_read+0x16>
 8003cd8:	bf00      	nop
 8003cda:	0001      	movs	r1, r0
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	60ba      	str	r2, [r7, #8]
 8003ce2:	b2ca      	uxtb	r2, r1
 8003ce4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	dbf0      	blt.n	8003cd6 <_read+0x12>
	}

return len;
 8003cf4:	687b      	ldr	r3, [r7, #4]
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b006      	add	sp, #24
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	e009      	b.n	8003d24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	60ba      	str	r2, [r7, #8]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	e000      	b.n	8003d1e <_write+0x20>
 8003d1c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	3301      	adds	r3, #1
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	dbf1      	blt.n	8003d10 <_write+0x12>
	}
	return len;
 8003d2c:	687b      	ldr	r3, [r7, #4]
}
 8003d2e:	0018      	movs	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b006      	add	sp, #24
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <_close>:

int _close(int file)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
	return -1;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	425b      	negs	r3, r3
}
 8003d42:	0018      	movs	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b002      	add	sp, #8
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2280      	movs	r2, #128	; 0x80
 8003d58:	0192      	lsls	r2, r2, #6
 8003d5a:	605a      	str	r2, [r3, #4]
	return 0;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	0018      	movs	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b002      	add	sp, #8
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <_isatty>:

int _isatty(int file)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
	return 1;
 8003d6e:	2301      	movs	r3, #1
}
 8003d70:	0018      	movs	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b002      	add	sp, #8
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
	return 0;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	0018      	movs	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b004      	add	sp, #16
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d98:	4a14      	ldr	r2, [pc, #80]	; (8003dec <_sbrk+0x5c>)
 8003d9a:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <_sbrk+0x60>)
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003da4:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <_sbrk+0x64>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d102      	bne.n	8003db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dac:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <_sbrk+0x64>)
 8003dae:	4a12      	ldr	r2, [pc, #72]	; (8003df8 <_sbrk+0x68>)
 8003db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <_sbrk+0x64>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	18d3      	adds	r3, r2, r3
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d207      	bcs.n	8003dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dc0:	f003 f9d4 	bl	800716c <__errno>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	220c      	movs	r2, #12
 8003dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	425b      	negs	r3, r3
 8003dce:	e009      	b.n	8003de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dd0:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <_sbrk+0x64>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dd6:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <_sbrk+0x64>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	18d2      	adds	r2, r2, r3
 8003dde:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <_sbrk+0x64>)
 8003de0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003de2:	68fb      	ldr	r3, [r7, #12]
}
 8003de4:	0018      	movs	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b006      	add	sp, #24
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20002000 	.word	0x20002000
 8003df0:	00000400 	.word	0x00000400
 8003df4:	20000460 	.word	0x20000460
 8003df8:	20000478 	.word	0x20000478

08003dfc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003e00:	46c0      	nop			; (mov r8, r8)
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e08:	480d      	ldr	r0, [pc, #52]	; (8003e40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e0c:	480d      	ldr	r0, [pc, #52]	; (8003e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e0e:	490e      	ldr	r1, [pc, #56]	; (8003e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e10:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <LoopForever+0xe>)
  movs r3, #0
 8003e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e14:	e002      	b.n	8003e1c <LoopCopyDataInit>

08003e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e1a:	3304      	adds	r3, #4

08003e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e20:	d3f9      	bcc.n	8003e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e22:	4a0b      	ldr	r2, [pc, #44]	; (8003e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e24:	4c0b      	ldr	r4, [pc, #44]	; (8003e54 <LoopForever+0x16>)
  movs r3, #0
 8003e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e28:	e001      	b.n	8003e2e <LoopFillZerobss>

08003e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e2c:	3204      	adds	r2, #4

08003e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e30:	d3fb      	bcc.n	8003e2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003e32:	f7ff ffe3 	bl	8003dfc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003e36:	f003 f99f 	bl	8007178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e3a:	f7ff fa8b 	bl	8003354 <main>

08003e3e <LoopForever>:

LoopForever:
    b LoopForever
 8003e3e:	e7fe      	b.n	8003e3e <LoopForever>
  ldr   r0, =_estack
 8003e40:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e48:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8003e4c:	0800c354 	.word	0x0800c354
  ldr r2, =_sbss
 8003e50:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8003e54:	20000478 	.word	0x20000478

08003e58 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e58:	e7fe      	b.n	8003e58 <ADC1_COMP_IRQHandler>
	...

08003e5c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e60:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <HAL_Init+0x24>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_Init+0x24>)
 8003e66:	2110      	movs	r1, #16
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003e6c:	2003      	movs	r0, #3
 8003e6e:	f000 f809 	bl	8003e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e72:	f7ff fd5d 	bl	8003930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	0018      	movs	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	40022000 	.word	0x40022000

08003e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e84:	b590      	push	{r4, r7, lr}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e8c:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <HAL_InitTick+0x5c>)
 8003e8e:	681c      	ldr	r4, [r3, #0]
 8003e90:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <HAL_InitTick+0x60>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	0019      	movs	r1, r3
 8003e96:	23fa      	movs	r3, #250	; 0xfa
 8003e98:	0098      	lsls	r0, r3, #2
 8003e9a:	f7fc f951 	bl	8000140 <__udivsi3>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	0019      	movs	r1, r3
 8003ea2:	0020      	movs	r0, r4
 8003ea4:	f7fc f94c 	bl	8000140 <__udivsi3>
 8003ea8:	0003      	movs	r3, r0
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f000 fcfb 	bl	80048a6 <HAL_SYSTICK_Config>
 8003eb0:	1e03      	subs	r3, r0, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e00f      	b.n	8003ed8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d80b      	bhi.n	8003ed6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	425b      	negs	r3, r3
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f000 fcc8 	bl	800485c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_InitTick+0x64>)
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e000      	b.n	8003ed8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
}
 8003ed8:	0018      	movs	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b003      	add	sp, #12
 8003ede:	bd90      	pop	{r4, r7, pc}
 8003ee0:	20000024 	.word	0x20000024
 8003ee4:	2000002c 	.word	0x2000002c
 8003ee8:	20000028 	.word	0x20000028

08003eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_IncTick+0x1c>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	001a      	movs	r2, r3
 8003ef6:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <HAL_IncTick+0x20>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	18d2      	adds	r2, r2, r3
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <HAL_IncTick+0x20>)
 8003efe:	601a      	str	r2, [r3, #0]
}
 8003f00:	46c0      	nop			; (mov r8, r8)
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	2000002c 	.word	0x2000002c
 8003f0c:	20000464 	.word	0x20000464

08003f10 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  return uwTick;
 8003f14:	4b02      	ldr	r3, [pc, #8]	; (8003f20 <HAL_GetTick+0x10>)
 8003f16:	681b      	ldr	r3, [r3, #0]
}
 8003f18:	0018      	movs	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	20000464 	.word	0x20000464

08003f24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f2c:	230f      	movs	r3, #15
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	2200      	movs	r2, #0
 8003f32:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e125      	b.n	800418e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10a      	bne.n	8003f60 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2234      	movs	r2, #52	; 0x34
 8003f54:	2100      	movs	r1, #0
 8003f56:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7ff fd0c 	bl	8003978 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	2210      	movs	r2, #16
 8003f66:	4013      	ands	r3, r2
 8003f68:	d000      	beq.n	8003f6c <HAL_ADC_Init+0x48>
 8003f6a:	e103      	b.n	8004174 <HAL_ADC_Init+0x250>
 8003f6c:	230f      	movs	r3, #15
 8003f6e:	18fb      	adds	r3, r7, r3
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d000      	beq.n	8003f78 <HAL_ADC_Init+0x54>
 8003f76:	e0fd      	b.n	8004174 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2204      	movs	r2, #4
 8003f80:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003f82:	d000      	beq.n	8003f86 <HAL_ADC_Init+0x62>
 8003f84:	e0f6      	b.n	8004174 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8a:	4a83      	ldr	r2, [pc, #524]	; (8004198 <HAL_ADC_Init+0x274>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2202      	movs	r2, #2
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d112      	bne.n	8003fca <HAL_ADC_Init+0xa6>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2201      	movs	r2, #1
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d009      	beq.n	8003fc6 <HAL_ADC_Init+0xa2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	401a      	ands	r2, r3
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d101      	bne.n	8003fca <HAL_ADC_Init+0xa6>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <HAL_ADC_Init+0xa8>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d116      	bne.n	8003ffe <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2218      	movs	r2, #24
 8003fd8:	4393      	bics	r3, r2
 8003fda:	0019      	movs	r1, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	0899      	lsrs	r1, r3, #2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4964      	ldr	r1, [pc, #400]	; (800419c <HAL_ADC_Init+0x278>)
 800400a:	400a      	ands	r2, r1
 800400c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	7e1b      	ldrb	r3, [r3, #24]
 8004012:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	7e5b      	ldrb	r3, [r3, #25]
 8004018:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800401a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	7e9b      	ldrb	r3, [r3, #26]
 8004020:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004022:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	2b01      	cmp	r3, #1
 800402a:	d002      	beq.n	8004032 <HAL_ADC_Init+0x10e>
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	015b      	lsls	r3, r3, #5
 8004030:	e000      	b.n	8004034 <HAL_ADC_Init+0x110>
 8004032:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004034:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800403a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d101      	bne.n	8004048 <HAL_ADC_Init+0x124>
 8004044:	2304      	movs	r3, #4
 8004046:	e000      	b.n	800404a <HAL_ADC_Init+0x126>
 8004048:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800404a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2124      	movs	r1, #36	; 0x24
 8004050:	5c5b      	ldrb	r3, [r3, r1]
 8004052:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004054:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	4313      	orrs	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	7edb      	ldrb	r3, [r3, #27]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d115      	bne.n	8004090 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	7e9b      	ldrb	r3, [r3, #26]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d105      	bne.n	8004078 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2280      	movs	r2, #128	; 0x80
 8004070:	0252      	lsls	r2, r2, #9
 8004072:	4313      	orrs	r3, r2
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	e00b      	b.n	8004090 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	2220      	movs	r2, #32
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004088:	2201      	movs	r2, #1
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69da      	ldr	r2, [r3, #28]
 8004094:	23c2      	movs	r3, #194	; 0xc2
 8004096:	33ff      	adds	r3, #255	; 0xff
 8004098:	429a      	cmp	r2, r3
 800409a:	d007      	beq.n	80040ac <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80040a4:	4313      	orrs	r3, r2
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68d9      	ldr	r1, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	055b      	lsls	r3, r3, #21
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d01b      	beq.n	8004100 <HAL_ADC_Init+0x1dc>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d017      	beq.n	8004100 <HAL_ADC_Init+0x1dc>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d013      	beq.n	8004100 <HAL_ADC_Init+0x1dc>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d00f      	beq.n	8004100 <HAL_ADC_Init+0x1dc>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d00b      	beq.n	8004100 <HAL_ADC_Init+0x1dc>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	2b05      	cmp	r3, #5
 80040ee:	d007      	beq.n	8004100 <HAL_ADC_Init+0x1dc>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	2b06      	cmp	r3, #6
 80040f6:	d003      	beq.n	8004100 <HAL_ADC_Init+0x1dc>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	2b07      	cmp	r3, #7
 80040fe:	d112      	bne.n	8004126 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2107      	movs	r1, #7
 800410c:	438a      	bics	r2, r1
 800410e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6959      	ldr	r1, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	2207      	movs	r2, #7
 800411c:	401a      	ands	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a1c      	ldr	r2, [pc, #112]	; (80041a0 <HAL_ADC_Init+0x27c>)
 800412e:	4013      	ands	r3, r2
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	429a      	cmp	r2, r3
 8004134:	d10b      	bne.n	800414e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	2203      	movs	r2, #3
 8004142:	4393      	bics	r3, r2
 8004144:	2201      	movs	r2, #1
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800414c:	e01c      	b.n	8004188 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	2212      	movs	r2, #18
 8004154:	4393      	bics	r3, r2
 8004156:	2210      	movs	r2, #16
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	2201      	movs	r2, #1
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800416a:	230f      	movs	r3, #15
 800416c:	18fb      	adds	r3, r7, r3
 800416e:	2201      	movs	r2, #1
 8004170:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004172:	e009      	b.n	8004188 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	2210      	movs	r2, #16
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004180:	230f      	movs	r3, #15
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	2201      	movs	r2, #1
 8004186:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004188:	230f      	movs	r3, #15
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	781b      	ldrb	r3, [r3, #0]
}
 800418e:	0018      	movs	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	b004      	add	sp, #16
 8004194:	bd80      	pop	{r7, pc}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	fffffefd 	.word	0xfffffefd
 800419c:	fffe0219 	.word	0xfffe0219
 80041a0:	833fffe7 	.word	0x833fffe7

080041a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80041a4:	b590      	push	{r4, r7, lr}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041b0:	2317      	movs	r3, #23
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2204      	movs	r2, #4
 80041c0:	4013      	ands	r3, r2
 80041c2:	d15e      	bne.n	8004282 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2234      	movs	r2, #52	; 0x34
 80041c8:	5c9b      	ldrb	r3, [r3, r2]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_ADC_Start_DMA+0x2e>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e05e      	b.n	8004290 <HAL_ADC_Start_DMA+0xec>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2234      	movs	r2, #52	; 0x34
 80041d6:	2101      	movs	r1, #1
 80041d8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	7e5b      	ldrb	r3, [r3, #25]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d007      	beq.n	80041f2 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80041e2:	2317      	movs	r3, #23
 80041e4:	18fc      	adds	r4, r7, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	0018      	movs	r0, r3
 80041ea:	f000 f983 	bl	80044f4 <ADC_Enable>
 80041ee:	0003      	movs	r3, r0
 80041f0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80041f2:	2317      	movs	r3, #23
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d146      	bne.n	800428a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	4a25      	ldr	r2, [pc, #148]	; (8004298 <HAL_ADC_Start_DMA+0xf4>)
 8004202:	4013      	ands	r3, r2
 8004204:	2280      	movs	r2, #128	; 0x80
 8004206:	0052      	lsls	r2, r2, #1
 8004208:	431a      	orrs	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2234      	movs	r2, #52	; 0x34
 8004218:	2100      	movs	r1, #0
 800421a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	4a1e      	ldr	r2, [pc, #120]	; (800429c <HAL_ADC_Start_DMA+0xf8>)
 8004222:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <HAL_ADC_Start_DMA+0xfc>)
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	4a1c      	ldr	r2, [pc, #112]	; (80042a4 <HAL_ADC_Start_DMA+0x100>)
 8004232:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	221c      	movs	r2, #28
 800423a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2110      	movs	r1, #16
 8004248:	430a      	orrs	r2, r1
 800424a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2101      	movs	r1, #1
 8004258:	430a      	orrs	r2, r1
 800425a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3340      	adds	r3, #64	; 0x40
 8004266:	0019      	movs	r1, r3
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f000 fb70 	bl	8004950 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2104      	movs	r1, #4
 800427c:	430a      	orrs	r2, r1
 800427e:	609a      	str	r2, [r3, #8]
 8004280:	e003      	b.n	800428a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004282:	2317      	movs	r3, #23
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	2202      	movs	r2, #2
 8004288:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800428a:	2317      	movs	r3, #23
 800428c:	18fb      	adds	r3, r7, r3
 800428e:	781b      	ldrb	r3, [r3, #0]
}
 8004290:	0018      	movs	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	b007      	add	sp, #28
 8004296:	bd90      	pop	{r4, r7, pc}
 8004298:	fffff0fe 	.word	0xfffff0fe
 800429c:	080045fd 	.word	0x080045fd
 80042a0:	080046b1 	.word	0x080046b1
 80042a4:	080046cf 	.word	0x080046cf

080042a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80042b0:	46c0      	nop			; (mov r8, r8)
 80042b2:	46bd      	mov	sp, r7
 80042b4:	b002      	add	sp, #8
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80042c0:	46c0      	nop			; (mov r8, r8)
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b002      	add	sp, #8
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042d0:	46c0      	nop			; (mov r8, r8)
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b002      	add	sp, #8
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042e2:	230f      	movs	r3, #15
 80042e4:	18fb      	adds	r3, r7, r3
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f2:	2380      	movs	r3, #128	; 0x80
 80042f4:	055b      	lsls	r3, r3, #21
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d011      	beq.n	800431e <HAL_ADC_ConfigChannel+0x46>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d00d      	beq.n	800431e <HAL_ADC_ConfigChannel+0x46>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	2b02      	cmp	r3, #2
 8004308:	d009      	beq.n	800431e <HAL_ADC_ConfigChannel+0x46>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	2b03      	cmp	r3, #3
 8004310:	d005      	beq.n	800431e <HAL_ADC_ConfigChannel+0x46>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	2b04      	cmp	r3, #4
 8004318:	d001      	beq.n	800431e <HAL_ADC_ConfigChannel+0x46>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2234      	movs	r2, #52	; 0x34
 8004322:	5c9b      	ldrb	r3, [r3, r2]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_ADC_ConfigChannel+0x54>
 8004328:	2302      	movs	r3, #2
 800432a:	e0d0      	b.n	80044ce <HAL_ADC_ConfigChannel+0x1f6>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2234      	movs	r2, #52	; 0x34
 8004330:	2101      	movs	r1, #1
 8004332:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2204      	movs	r2, #4
 800433c:	4013      	ands	r3, r2
 800433e:	d000      	beq.n	8004342 <HAL_ADC_ConfigChannel+0x6a>
 8004340:	e0b4      	b.n	80044ac <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	4a64      	ldr	r2, [pc, #400]	; (80044d8 <HAL_ADC_ConfigChannel+0x200>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d100      	bne.n	800434e <HAL_ADC_ConfigChannel+0x76>
 800434c:	e082      	b.n	8004454 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2201      	movs	r2, #1
 800435a:	409a      	lsls	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004368:	2380      	movs	r3, #128	; 0x80
 800436a:	055b      	lsls	r3, r3, #21
 800436c:	429a      	cmp	r2, r3
 800436e:	d037      	beq.n	80043e0 <HAL_ADC_ConfigChannel+0x108>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d033      	beq.n	80043e0 <HAL_ADC_ConfigChannel+0x108>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	2b02      	cmp	r3, #2
 800437e:	d02f      	beq.n	80043e0 <HAL_ADC_ConfigChannel+0x108>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	2b03      	cmp	r3, #3
 8004386:	d02b      	beq.n	80043e0 <HAL_ADC_ConfigChannel+0x108>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	2b04      	cmp	r3, #4
 800438e:	d027      	beq.n	80043e0 <HAL_ADC_ConfigChannel+0x108>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	2b05      	cmp	r3, #5
 8004396:	d023      	beq.n	80043e0 <HAL_ADC_ConfigChannel+0x108>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	2b06      	cmp	r3, #6
 800439e:	d01f      	beq.n	80043e0 <HAL_ADC_ConfigChannel+0x108>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	2b07      	cmp	r3, #7
 80043a6:	d01b      	beq.n	80043e0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	2107      	movs	r1, #7
 80043b4:	400b      	ands	r3, r1
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d012      	beq.n	80043e0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2107      	movs	r1, #7
 80043c6:	438a      	bics	r2, r1
 80043c8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6959      	ldr	r1, [r3, #20]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2207      	movs	r2, #7
 80043d6:	401a      	ands	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d007      	beq.n	80043f8 <HAL_ADC_ConfigChannel+0x120>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b11      	cmp	r3, #17
 80043ee:	d003      	beq.n	80043f8 <HAL_ADC_ConfigChannel+0x120>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b12      	cmp	r3, #18
 80043f6:	d163      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80043f8:	4b38      	ldr	r3, [pc, #224]	; (80044dc <HAL_ADC_ConfigChannel+0x204>)
 80043fa:	6819      	ldr	r1, [r3, #0]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b10      	cmp	r3, #16
 8004402:	d009      	beq.n	8004418 <HAL_ADC_ConfigChannel+0x140>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b11      	cmp	r3, #17
 800440a:	d102      	bne.n	8004412 <HAL_ADC_ConfigChannel+0x13a>
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	03db      	lsls	r3, r3, #15
 8004410:	e004      	b.n	800441c <HAL_ADC_ConfigChannel+0x144>
 8004412:	2380      	movs	r3, #128	; 0x80
 8004414:	045b      	lsls	r3, r3, #17
 8004416:	e001      	b.n	800441c <HAL_ADC_ConfigChannel+0x144>
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	041b      	lsls	r3, r3, #16
 800441c:	4a2f      	ldr	r2, [pc, #188]	; (80044dc <HAL_ADC_ConfigChannel+0x204>)
 800441e:	430b      	orrs	r3, r1
 8004420:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b10      	cmp	r3, #16
 8004428:	d14a      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800442a:	4b2d      	ldr	r3, [pc, #180]	; (80044e0 <HAL_ADC_ConfigChannel+0x208>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	492d      	ldr	r1, [pc, #180]	; (80044e4 <HAL_ADC_ConfigChannel+0x20c>)
 8004430:	0018      	movs	r0, r3
 8004432:	f7fb fe85 	bl	8000140 <__udivsi3>
 8004436:	0003      	movs	r3, r0
 8004438:	001a      	movs	r2, r3
 800443a:	0013      	movs	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	189b      	adds	r3, r3, r2
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004444:	e002      	b.n	800444c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	3b01      	subs	r3, #1
 800444a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f9      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x16e>
 8004452:	e035      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2101      	movs	r1, #1
 8004460:	4099      	lsls	r1, r3
 8004462:	000b      	movs	r3, r1
 8004464:	43d9      	mvns	r1, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	400a      	ands	r2, r1
 800446c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b10      	cmp	r3, #16
 8004474:	d007      	beq.n	8004486 <HAL_ADC_ConfigChannel+0x1ae>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b11      	cmp	r3, #17
 800447c:	d003      	beq.n	8004486 <HAL_ADC_ConfigChannel+0x1ae>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b12      	cmp	r3, #18
 8004484:	d11c      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004486:	4b15      	ldr	r3, [pc, #84]	; (80044dc <HAL_ADC_ConfigChannel+0x204>)
 8004488:	6819      	ldr	r1, [r3, #0]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b10      	cmp	r3, #16
 8004490:	d007      	beq.n	80044a2 <HAL_ADC_ConfigChannel+0x1ca>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b11      	cmp	r3, #17
 8004498:	d101      	bne.n	800449e <HAL_ADC_ConfigChannel+0x1c6>
 800449a:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <HAL_ADC_ConfigChannel+0x210>)
 800449c:	e002      	b.n	80044a4 <HAL_ADC_ConfigChannel+0x1cc>
 800449e:	4b13      	ldr	r3, [pc, #76]	; (80044ec <HAL_ADC_ConfigChannel+0x214>)
 80044a0:	e000      	b.n	80044a4 <HAL_ADC_ConfigChannel+0x1cc>
 80044a2:	4b13      	ldr	r3, [pc, #76]	; (80044f0 <HAL_ADC_ConfigChannel+0x218>)
 80044a4:	4a0d      	ldr	r2, [pc, #52]	; (80044dc <HAL_ADC_ConfigChannel+0x204>)
 80044a6:	400b      	ands	r3, r1
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e009      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	2220      	movs	r2, #32
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80044b8:	230f      	movs	r3, #15
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	2201      	movs	r2, #1
 80044be:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2234      	movs	r2, #52	; 0x34
 80044c4:	2100      	movs	r1, #0
 80044c6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80044c8:	230f      	movs	r3, #15
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	781b      	ldrb	r3, [r3, #0]
}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b004      	add	sp, #16
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	00001001 	.word	0x00001001
 80044dc:	40012708 	.word	0x40012708
 80044e0:	20000024 	.word	0x20000024
 80044e4:	000f4240 	.word	0x000f4240
 80044e8:	ffbfffff 	.word	0xffbfffff
 80044ec:	feffffff 	.word	0xfeffffff
 80044f0:	ff7fffff 	.word	0xff7fffff

080044f4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2203      	movs	r2, #3
 800450c:	4013      	ands	r3, r2
 800450e:	2b01      	cmp	r3, #1
 8004510:	d112      	bne.n	8004538 <ADC_Enable+0x44>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2201      	movs	r2, #1
 800451a:	4013      	ands	r3, r2
 800451c:	2b01      	cmp	r3, #1
 800451e:	d009      	beq.n	8004534 <ADC_Enable+0x40>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	401a      	ands	r2, r3
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	429a      	cmp	r2, r3
 8004532:	d101      	bne.n	8004538 <ADC_Enable+0x44>
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <ADC_Enable+0x46>
 8004538:	2300      	movs	r3, #0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d152      	bne.n	80045e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	4a2a      	ldr	r2, [pc, #168]	; (80045f0 <ADC_Enable+0xfc>)
 8004546:	4013      	ands	r3, r2
 8004548:	d00d      	beq.n	8004566 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	2210      	movs	r2, #16
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455a:	2201      	movs	r2, #1
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e03f      	b.n	80045e6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2101      	movs	r1, #1
 8004572:	430a      	orrs	r2, r1
 8004574:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004576:	4b1f      	ldr	r3, [pc, #124]	; (80045f4 <ADC_Enable+0x100>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	491f      	ldr	r1, [pc, #124]	; (80045f8 <ADC_Enable+0x104>)
 800457c:	0018      	movs	r0, r3
 800457e:	f7fb fddf 	bl	8000140 <__udivsi3>
 8004582:	0003      	movs	r3, r0
 8004584:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004586:	e002      	b.n	800458e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	3b01      	subs	r3, #1
 800458c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f9      	bne.n	8004588 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004594:	f7ff fcbc 	bl	8003f10 <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800459c:	e01b      	b.n	80045d6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800459e:	f7ff fcb7 	bl	8003f10 <HAL_GetTick>
 80045a2:	0002      	movs	r2, r0
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d914      	bls.n	80045d6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2201      	movs	r2, #1
 80045b4:	4013      	ands	r3, r2
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d00d      	beq.n	80045d6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	2210      	movs	r2, #16
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	2201      	movs	r2, #1
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e007      	b.n	80045e6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2201      	movs	r2, #1
 80045de:	4013      	ands	r3, r2
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d1dc      	bne.n	800459e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	0018      	movs	r0, r3
 80045e8:	46bd      	mov	sp, r7
 80045ea:	b004      	add	sp, #16
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	80000017 	.word	0x80000017
 80045f4:	20000024 	.word	0x20000024
 80045f8:	000f4240 	.word	0x000f4240

080045fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	2250      	movs	r2, #80	; 0x50
 8004610:	4013      	ands	r3, r2
 8004612:	d140      	bne.n	8004696 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	2280      	movs	r2, #128	; 0x80
 800461a:	0092      	lsls	r2, r2, #2
 800461c:	431a      	orrs	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	23c0      	movs	r3, #192	; 0xc0
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	4013      	ands	r3, r2
 800462e:	d12d      	bne.n	800468c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004634:	2b00      	cmp	r3, #0
 8004636:	d129      	bne.n	800468c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2208      	movs	r2, #8
 8004640:	4013      	ands	r3, r2
 8004642:	2b08      	cmp	r3, #8
 8004644:	d122      	bne.n	800468c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2204      	movs	r2, #4
 800464e:	4013      	ands	r3, r2
 8004650:	d110      	bne.n	8004674 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	210c      	movs	r1, #12
 800465e:	438a      	bics	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	4a11      	ldr	r2, [pc, #68]	; (80046ac <ADC_DMAConvCplt+0xb0>)
 8004668:	4013      	ands	r3, r2
 800466a:	2201      	movs	r2, #1
 800466c:	431a      	orrs	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
 8004672:	e00b      	b.n	800468c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	2220      	movs	r2, #32
 800467a:	431a      	orrs	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004684:	2201      	movs	r2, #1
 8004686:	431a      	orrs	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	0018      	movs	r0, r3
 8004690:	f7ff fe0a 	bl	80042a8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8004694:	e005      	b.n	80046a2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	0010      	movs	r0, r2
 80046a0:	4798      	blx	r3
}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b004      	add	sp, #16
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	fffffefe 	.word	0xfffffefe

080046b0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	0018      	movs	r0, r3
 80046c2:	f7ff fdf9 	bl	80042b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b004      	add	sp, #16
 80046cc:	bd80      	pop	{r7, pc}

080046ce <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	2240      	movs	r2, #64	; 0x40
 80046e2:	431a      	orrs	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ec:	2204      	movs	r2, #4
 80046ee:	431a      	orrs	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	0018      	movs	r0, r3
 80046f8:	f7ff fde6 	bl	80042c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046fc:	46c0      	nop			; (mov r8, r8)
 80046fe:	46bd      	mov	sp, r7
 8004700:	b004      	add	sp, #16
 8004702:	bd80      	pop	{r7, pc}

08004704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	0002      	movs	r2, r0
 800470c:	1dfb      	adds	r3, r7, #7
 800470e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004710:	1dfb      	adds	r3, r7, #7
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b7f      	cmp	r3, #127	; 0x7f
 8004716:	d809      	bhi.n	800472c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004718:	1dfb      	adds	r3, r7, #7
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	001a      	movs	r2, r3
 800471e:	231f      	movs	r3, #31
 8004720:	401a      	ands	r2, r3
 8004722:	4b04      	ldr	r3, [pc, #16]	; (8004734 <__NVIC_EnableIRQ+0x30>)
 8004724:	2101      	movs	r1, #1
 8004726:	4091      	lsls	r1, r2
 8004728:	000a      	movs	r2, r1
 800472a:	601a      	str	r2, [r3, #0]
  }
}
 800472c:	46c0      	nop			; (mov r8, r8)
 800472e:	46bd      	mov	sp, r7
 8004730:	b002      	add	sp, #8
 8004732:	bd80      	pop	{r7, pc}
 8004734:	e000e100 	.word	0xe000e100

08004738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	0002      	movs	r2, r0
 8004740:	6039      	str	r1, [r7, #0]
 8004742:	1dfb      	adds	r3, r7, #7
 8004744:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004746:	1dfb      	adds	r3, r7, #7
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b7f      	cmp	r3, #127	; 0x7f
 800474c:	d828      	bhi.n	80047a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800474e:	4a2f      	ldr	r2, [pc, #188]	; (800480c <__NVIC_SetPriority+0xd4>)
 8004750:	1dfb      	adds	r3, r7, #7
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b25b      	sxtb	r3, r3
 8004756:	089b      	lsrs	r3, r3, #2
 8004758:	33c0      	adds	r3, #192	; 0xc0
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	589b      	ldr	r3, [r3, r2]
 800475e:	1dfa      	adds	r2, r7, #7
 8004760:	7812      	ldrb	r2, [r2, #0]
 8004762:	0011      	movs	r1, r2
 8004764:	2203      	movs	r2, #3
 8004766:	400a      	ands	r2, r1
 8004768:	00d2      	lsls	r2, r2, #3
 800476a:	21ff      	movs	r1, #255	; 0xff
 800476c:	4091      	lsls	r1, r2
 800476e:	000a      	movs	r2, r1
 8004770:	43d2      	mvns	r2, r2
 8004772:	401a      	ands	r2, r3
 8004774:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	019b      	lsls	r3, r3, #6
 800477a:	22ff      	movs	r2, #255	; 0xff
 800477c:	401a      	ands	r2, r3
 800477e:	1dfb      	adds	r3, r7, #7
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	0018      	movs	r0, r3
 8004784:	2303      	movs	r3, #3
 8004786:	4003      	ands	r3, r0
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800478c:	481f      	ldr	r0, [pc, #124]	; (800480c <__NVIC_SetPriority+0xd4>)
 800478e:	1dfb      	adds	r3, r7, #7
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	b25b      	sxtb	r3, r3
 8004794:	089b      	lsrs	r3, r3, #2
 8004796:	430a      	orrs	r2, r1
 8004798:	33c0      	adds	r3, #192	; 0xc0
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800479e:	e031      	b.n	8004804 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047a0:	4a1b      	ldr	r2, [pc, #108]	; (8004810 <__NVIC_SetPriority+0xd8>)
 80047a2:	1dfb      	adds	r3, r7, #7
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	0019      	movs	r1, r3
 80047a8:	230f      	movs	r3, #15
 80047aa:	400b      	ands	r3, r1
 80047ac:	3b08      	subs	r3, #8
 80047ae:	089b      	lsrs	r3, r3, #2
 80047b0:	3306      	adds	r3, #6
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	18d3      	adds	r3, r2, r3
 80047b6:	3304      	adds	r3, #4
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	1dfa      	adds	r2, r7, #7
 80047bc:	7812      	ldrb	r2, [r2, #0]
 80047be:	0011      	movs	r1, r2
 80047c0:	2203      	movs	r2, #3
 80047c2:	400a      	ands	r2, r1
 80047c4:	00d2      	lsls	r2, r2, #3
 80047c6:	21ff      	movs	r1, #255	; 0xff
 80047c8:	4091      	lsls	r1, r2
 80047ca:	000a      	movs	r2, r1
 80047cc:	43d2      	mvns	r2, r2
 80047ce:	401a      	ands	r2, r3
 80047d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	019b      	lsls	r3, r3, #6
 80047d6:	22ff      	movs	r2, #255	; 0xff
 80047d8:	401a      	ands	r2, r3
 80047da:	1dfb      	adds	r3, r7, #7
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	0018      	movs	r0, r3
 80047e0:	2303      	movs	r3, #3
 80047e2:	4003      	ands	r3, r0
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047e8:	4809      	ldr	r0, [pc, #36]	; (8004810 <__NVIC_SetPriority+0xd8>)
 80047ea:	1dfb      	adds	r3, r7, #7
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	001c      	movs	r4, r3
 80047f0:	230f      	movs	r3, #15
 80047f2:	4023      	ands	r3, r4
 80047f4:	3b08      	subs	r3, #8
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	430a      	orrs	r2, r1
 80047fa:	3306      	adds	r3, #6
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	18c3      	adds	r3, r0, r3
 8004800:	3304      	adds	r3, #4
 8004802:	601a      	str	r2, [r3, #0]
}
 8004804:	46c0      	nop			; (mov r8, r8)
 8004806:	46bd      	mov	sp, r7
 8004808:	b003      	add	sp, #12
 800480a:	bd90      	pop	{r4, r7, pc}
 800480c:	e000e100 	.word	0xe000e100
 8004810:	e000ed00 	.word	0xe000ed00

08004814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	1e5a      	subs	r2, r3, #1
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	045b      	lsls	r3, r3, #17
 8004824:	429a      	cmp	r2, r3
 8004826:	d301      	bcc.n	800482c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004828:	2301      	movs	r3, #1
 800482a:	e010      	b.n	800484e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800482c:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <SysTick_Config+0x44>)
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	3a01      	subs	r2, #1
 8004832:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004834:	2301      	movs	r3, #1
 8004836:	425b      	negs	r3, r3
 8004838:	2103      	movs	r1, #3
 800483a:	0018      	movs	r0, r3
 800483c:	f7ff ff7c 	bl	8004738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004840:	4b05      	ldr	r3, [pc, #20]	; (8004858 <SysTick_Config+0x44>)
 8004842:	2200      	movs	r2, #0
 8004844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004846:	4b04      	ldr	r3, [pc, #16]	; (8004858 <SysTick_Config+0x44>)
 8004848:	2207      	movs	r2, #7
 800484a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800484c:	2300      	movs	r3, #0
}
 800484e:	0018      	movs	r0, r3
 8004850:	46bd      	mov	sp, r7
 8004852:	b002      	add	sp, #8
 8004854:	bd80      	pop	{r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	e000e010 	.word	0xe000e010

0800485c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
 8004866:	210f      	movs	r1, #15
 8004868:	187b      	adds	r3, r7, r1
 800486a:	1c02      	adds	r2, r0, #0
 800486c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	187b      	adds	r3, r7, r1
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	b25b      	sxtb	r3, r3
 8004876:	0011      	movs	r1, r2
 8004878:	0018      	movs	r0, r3
 800487a:	f7ff ff5d 	bl	8004738 <__NVIC_SetPriority>
}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	46bd      	mov	sp, r7
 8004882:	b004      	add	sp, #16
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b082      	sub	sp, #8
 800488a:	af00      	add	r7, sp, #0
 800488c:	0002      	movs	r2, r0
 800488e:	1dfb      	adds	r3, r7, #7
 8004890:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004892:	1dfb      	adds	r3, r7, #7
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	b25b      	sxtb	r3, r3
 8004898:	0018      	movs	r0, r3
 800489a:	f7ff ff33 	bl	8004704 <__NVIC_EnableIRQ>
}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b002      	add	sp, #8
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b082      	sub	sp, #8
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7ff ffaf 	bl	8004814 <SysTick_Config>
 80048b6:	0003      	movs	r3, r0
}
 80048b8:	0018      	movs	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b002      	add	sp, #8
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e036      	b.n	8004944 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2221      	movs	r2, #33	; 0x21
 80048da:	2102      	movs	r1, #2
 80048dc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4a18      	ldr	r2, [pc, #96]	; (800494c <HAL_DMA_Init+0x8c>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80048f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800490e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	0018      	movs	r0, r3
 8004928:	f000 f9c4 	bl	8004cb4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2221      	movs	r2, #33	; 0x21
 8004936:	2101      	movs	r1, #1
 8004938:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2220      	movs	r2, #32
 800493e:	2100      	movs	r1, #0
 8004940:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}  
 8004944:	0018      	movs	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	b004      	add	sp, #16
 800494a:	bd80      	pop	{r7, pc}
 800494c:	ffffc00f 	.word	0xffffc00f

08004950 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800495e:	2317      	movs	r3, #23
 8004960:	18fb      	adds	r3, r7, r3
 8004962:	2200      	movs	r2, #0
 8004964:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	5c9b      	ldrb	r3, [r3, r2]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_DMA_Start_IT+0x24>
 8004970:	2302      	movs	r3, #2
 8004972:	e04f      	b.n	8004a14 <HAL_DMA_Start_IT+0xc4>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	2101      	movs	r1, #1
 800497a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2221      	movs	r2, #33	; 0x21
 8004980:	5c9b      	ldrb	r3, [r3, r2]
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d13a      	bne.n	80049fe <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2221      	movs	r2, #33	; 0x21
 800498c:	2102      	movs	r1, #2
 800498e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2101      	movs	r1, #1
 80049a2:	438a      	bics	r2, r1
 80049a4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f954 	bl	8004c5a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	210e      	movs	r1, #14
 80049c6:	430a      	orrs	r2, r1
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e00f      	b.n	80049ec <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	210a      	movs	r1, #10
 80049d8:	430a      	orrs	r2, r1
 80049da:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2104      	movs	r1, #4
 80049e8:	438a      	bics	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2101      	movs	r1, #1
 80049f8:	430a      	orrs	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e007      	b.n	8004a0e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	2100      	movs	r1, #0
 8004a04:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004a06:	2317      	movs	r3, #23
 8004a08:	18fb      	adds	r3, r7, r3
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8004a0e:	2317      	movs	r3, #23
 8004a10:	18fb      	adds	r3, r7, r3
 8004a12:	781b      	ldrb	r3, [r3, #0]
} 
 8004a14:	0018      	movs	r0, r3
 8004a16:	46bd      	mov	sp, r7
 8004a18:	b006      	add	sp, #24
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2221      	movs	r2, #33	; 0x21
 8004a28:	5c9b      	ldrb	r3, [r3, r2]
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d008      	beq.n	8004a42 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2204      	movs	r2, #4
 8004a34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e020      	b.n	8004a84 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	210e      	movs	r1, #14
 8004a4e:	438a      	bics	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	438a      	bics	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	4091      	lsls	r1, r2
 8004a6e:	000a      	movs	r2, r1
 8004a70:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2221      	movs	r2, #33	; 0x21
 8004a76:	2101      	movs	r1, #1
 8004a78:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	2100      	movs	r1, #0
 8004a80:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	0018      	movs	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b002      	add	sp, #8
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a94:	210f      	movs	r1, #15
 8004a96:	187b      	adds	r3, r7, r1
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2221      	movs	r2, #33	; 0x21
 8004aa0:	5c9b      	ldrb	r3, [r3, r2]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d006      	beq.n	8004ab6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2204      	movs	r2, #4
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004aae:	187b      	adds	r3, r7, r1
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	e028      	b.n	8004b08 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	210e      	movs	r1, #14
 8004ac2:	438a      	bics	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	438a      	bics	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	2101      	movs	r1, #1
 8004ae0:	4091      	lsls	r1, r2
 8004ae2:	000a      	movs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2221      	movs	r2, #33	; 0x21
 8004aea:	2101      	movs	r1, #1
 8004aec:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	2100      	movs	r1, #0
 8004af4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d004      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	0010      	movs	r0, r2
 8004b06:	4798      	blx	r3
    } 
  }
  return status;
 8004b08:	230f      	movs	r3, #15
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	781b      	ldrb	r3, [r3, #0]
}
 8004b0e:	0018      	movs	r0, r3
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b004      	add	sp, #16
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	2204      	movs	r2, #4
 8004b34:	409a      	lsls	r2, r3
 8004b36:	0013      	movs	r3, r2
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d024      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x72>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2204      	movs	r2, #4
 8004b42:	4013      	ands	r3, r2
 8004b44:	d020      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	4013      	ands	r3, r2
 8004b50:	d107      	bne.n	8004b62 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2104      	movs	r1, #4
 8004b5e:	438a      	bics	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6a:	2104      	movs	r1, #4
 8004b6c:	4091      	lsls	r1, r2
 8004b6e:	000a      	movs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d100      	bne.n	8004b7c <HAL_DMA_IRQHandler+0x66>
 8004b7a:	e06a      	b.n	8004c52 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	0010      	movs	r0, r2
 8004b84:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004b86:	e064      	b.n	8004c52 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	0013      	movs	r3, r2
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4013      	ands	r3, r2
 8004b96:	d02b      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0xda>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d027      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d10b      	bne.n	8004bc4 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	210a      	movs	r1, #10
 8004bb8:	438a      	bics	r2, r1
 8004bba:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2221      	movs	r2, #33	; 0x21
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bcc:	2102      	movs	r1, #2
 8004bce:	4091      	lsls	r1, r2
 8004bd0:	000a      	movs	r2, r1
 8004bd2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	2100      	movs	r1, #0
 8004bda:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d036      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	0010      	movs	r0, r2
 8004bec:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004bee:	e030      	b.n	8004c52 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	0013      	movs	r3, r2
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d028      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x13c>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2208      	movs	r2, #8
 8004c04:	4013      	ands	r3, r2
 8004c06:	d024      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	210e      	movs	r1, #14
 8004c14:	438a      	bics	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c20:	2101      	movs	r1, #1
 8004c22:	4091      	lsls	r1, r2
 8004c24:	000a      	movs	r2, r1
 8004c26:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2221      	movs	r2, #33	; 0x21
 8004c32:	2101      	movs	r1, #1
 8004c34:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	0010      	movs	r0, r2
 8004c4e:	4798      	blx	r3
    }
   }
}  
 8004c50:	e7ff      	b.n	8004c52 <HAL_DMA_IRQHandler+0x13c>
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b004      	add	sp, #16
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c70:	2101      	movs	r1, #1
 8004c72:	4091      	lsls	r1, r2
 8004c74:	000a      	movs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b10      	cmp	r3, #16
 8004c86:	d108      	bne.n	8004c9a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c98:	e007      	b.n	8004caa <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	60da      	str	r2, [r3, #12]
}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	46bd      	mov	sp, r7
 8004cae:	b004      	add	sp, #16
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a08      	ldr	r2, [pc, #32]	; (8004ce4 <DMA_CalcBaseAndBitshift+0x30>)
 8004cc2:	4694      	mov	ip, r2
 8004cc4:	4463      	add	r3, ip
 8004cc6:	2114      	movs	r1, #20
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f7fb fa39 	bl	8000140 <__udivsi3>
 8004cce:	0003      	movs	r3, r0
 8004cd0:	009a      	lsls	r2, r3, #2
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a03      	ldr	r2, [pc, #12]	; (8004ce8 <DMA_CalcBaseAndBitshift+0x34>)
 8004cda:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004cdc:	46c0      	nop			; (mov r8, r8)
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	b002      	add	sp, #8
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	bffdfff8 	.word	0xbffdfff8
 8004ce8:	40020000 	.word	0x40020000

08004cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cfa:	e14f      	b.n	8004f9c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2101      	movs	r1, #1
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4091      	lsls	r1, r2
 8004d06:	000a      	movs	r2, r1
 8004d08:	4013      	ands	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d100      	bne.n	8004d14 <HAL_GPIO_Init+0x28>
 8004d12:	e140      	b.n	8004f96 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2203      	movs	r2, #3
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d005      	beq.n	8004d2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2203      	movs	r2, #3
 8004d26:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d130      	bne.n	8004d8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	2203      	movs	r2, #3
 8004d38:	409a      	lsls	r2, r3
 8004d3a:	0013      	movs	r3, r2
 8004d3c:	43da      	mvns	r2, r3
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	4013      	ands	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	409a      	lsls	r2, r3
 8004d4e:	0013      	movs	r3, r2
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d62:	2201      	movs	r2, #1
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	409a      	lsls	r2, r3
 8004d68:	0013      	movs	r3, r2
 8004d6a:	43da      	mvns	r2, r3
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	091b      	lsrs	r3, r3, #4
 8004d78:	2201      	movs	r2, #1
 8004d7a:	401a      	ands	r2, r3
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	409a      	lsls	r2, r3
 8004d80:	0013      	movs	r3, r2
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2203      	movs	r2, #3
 8004d94:	4013      	ands	r3, r2
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d017      	beq.n	8004dca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	2203      	movs	r2, #3
 8004da6:	409a      	lsls	r2, r3
 8004da8:	0013      	movs	r3, r2
 8004daa:	43da      	mvns	r2, r3
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4013      	ands	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	409a      	lsls	r2, r3
 8004dbc:	0013      	movs	r3, r2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2203      	movs	r2, #3
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d123      	bne.n	8004e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	08da      	lsrs	r2, r3, #3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3208      	adds	r2, #8
 8004dde:	0092      	lsls	r2, r2, #2
 8004de0:	58d3      	ldr	r3, [r2, r3]
 8004de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2207      	movs	r2, #7
 8004de8:	4013      	ands	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	220f      	movs	r2, #15
 8004dee:	409a      	lsls	r2, r3
 8004df0:	0013      	movs	r3, r2
 8004df2:	43da      	mvns	r2, r3
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	4013      	ands	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2107      	movs	r1, #7
 8004e02:	400b      	ands	r3, r1
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	409a      	lsls	r2, r3
 8004e08:	0013      	movs	r3, r2
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	08da      	lsrs	r2, r3, #3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3208      	adds	r2, #8
 8004e18:	0092      	lsls	r2, r2, #2
 8004e1a:	6939      	ldr	r1, [r7, #16]
 8004e1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	2203      	movs	r2, #3
 8004e2a:	409a      	lsls	r2, r3
 8004e2c:	0013      	movs	r3, r2
 8004e2e:	43da      	mvns	r2, r3
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	4013      	ands	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	401a      	ands	r2, r3
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	409a      	lsls	r2, r3
 8004e44:	0013      	movs	r3, r2
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	23c0      	movs	r3, #192	; 0xc0
 8004e58:	029b      	lsls	r3, r3, #10
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d100      	bne.n	8004e60 <HAL_GPIO_Init+0x174>
 8004e5e:	e09a      	b.n	8004f96 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e60:	4b54      	ldr	r3, [pc, #336]	; (8004fb4 <HAL_GPIO_Init+0x2c8>)
 8004e62:	699a      	ldr	r2, [r3, #24]
 8004e64:	4b53      	ldr	r3, [pc, #332]	; (8004fb4 <HAL_GPIO_Init+0x2c8>)
 8004e66:	2101      	movs	r1, #1
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	619a      	str	r2, [r3, #24]
 8004e6c:	4b51      	ldr	r3, [pc, #324]	; (8004fb4 <HAL_GPIO_Init+0x2c8>)
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	2201      	movs	r2, #1
 8004e72:	4013      	ands	r3, r2
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e78:	4a4f      	ldr	r2, [pc, #316]	; (8004fb8 <HAL_GPIO_Init+0x2cc>)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	089b      	lsrs	r3, r3, #2
 8004e7e:	3302      	adds	r3, #2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	589b      	ldr	r3, [r3, r2]
 8004e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2203      	movs	r2, #3
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	220f      	movs	r2, #15
 8004e90:	409a      	lsls	r2, r3
 8004e92:	0013      	movs	r3, r2
 8004e94:	43da      	mvns	r2, r3
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	2390      	movs	r3, #144	; 0x90
 8004ea0:	05db      	lsls	r3, r3, #23
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d013      	beq.n	8004ece <HAL_GPIO_Init+0x1e2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a44      	ldr	r2, [pc, #272]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00d      	beq.n	8004eca <HAL_GPIO_Init+0x1de>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a43      	ldr	r2, [pc, #268]	; (8004fc0 <HAL_GPIO_Init+0x2d4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d007      	beq.n	8004ec6 <HAL_GPIO_Init+0x1da>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a42      	ldr	r2, [pc, #264]	; (8004fc4 <HAL_GPIO_Init+0x2d8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d101      	bne.n	8004ec2 <HAL_GPIO_Init+0x1d6>
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e006      	b.n	8004ed0 <HAL_GPIO_Init+0x1e4>
 8004ec2:	2305      	movs	r3, #5
 8004ec4:	e004      	b.n	8004ed0 <HAL_GPIO_Init+0x1e4>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e002      	b.n	8004ed0 <HAL_GPIO_Init+0x1e4>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <HAL_GPIO_Init+0x1e4>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	2103      	movs	r1, #3
 8004ed4:	400a      	ands	r2, r1
 8004ed6:	0092      	lsls	r2, r2, #2
 8004ed8:	4093      	lsls	r3, r2
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ee0:	4935      	ldr	r1, [pc, #212]	; (8004fb8 <HAL_GPIO_Init+0x2cc>)
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	089b      	lsrs	r3, r3, #2
 8004ee6:	3302      	adds	r3, #2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004eee:	4b36      	ldr	r3, [pc, #216]	; (8004fc8 <HAL_GPIO_Init+0x2dc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	43da      	mvns	r2, r3
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4013      	ands	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	2380      	movs	r3, #128	; 0x80
 8004f04:	025b      	lsls	r3, r3, #9
 8004f06:	4013      	ands	r3, r2
 8004f08:	d003      	beq.n	8004f12 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004f12:	4b2d      	ldr	r3, [pc, #180]	; (8004fc8 <HAL_GPIO_Init+0x2dc>)
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004f18:	4b2b      	ldr	r3, [pc, #172]	; (8004fc8 <HAL_GPIO_Init+0x2dc>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	43da      	mvns	r2, r3
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4013      	ands	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	2380      	movs	r3, #128	; 0x80
 8004f2e:	029b      	lsls	r3, r3, #10
 8004f30:	4013      	ands	r3, r2
 8004f32:	d003      	beq.n	8004f3c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004f3c:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <HAL_GPIO_Init+0x2dc>)
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f42:	4b21      	ldr	r3, [pc, #132]	; (8004fc8 <HAL_GPIO_Init+0x2dc>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	43da      	mvns	r2, r3
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	2380      	movs	r3, #128	; 0x80
 8004f58:	035b      	lsls	r3, r3, #13
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d003      	beq.n	8004f66 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f66:	4b18      	ldr	r3, [pc, #96]	; (8004fc8 <HAL_GPIO_Init+0x2dc>)
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004f6c:	4b16      	ldr	r3, [pc, #88]	; (8004fc8 <HAL_GPIO_Init+0x2dc>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	43da      	mvns	r2, r3
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	2380      	movs	r3, #128	; 0x80
 8004f82:	039b      	lsls	r3, r3, #14
 8004f84:	4013      	ands	r3, r2
 8004f86:	d003      	beq.n	8004f90 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f90:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <HAL_GPIO_Init+0x2dc>)
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	40da      	lsrs	r2, r3
 8004fa4:	1e13      	subs	r3, r2, #0
 8004fa6:	d000      	beq.n	8004faa <HAL_GPIO_Init+0x2be>
 8004fa8:	e6a8      	b.n	8004cfc <HAL_GPIO_Init+0x10>
  } 
}
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	46c0      	nop			; (mov r8, r8)
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b006      	add	sp, #24
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40010000 	.word	0x40010000
 8004fbc:	48000400 	.word	0x48000400
 8004fc0:	48000800 	.word	0x48000800
 8004fc4:	48000c00 	.word	0x48000c00
 8004fc8:	40010400 	.word	0x40010400

08004fcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	000a      	movs	r2, r1
 8004fd6:	1cbb      	adds	r3, r7, #2
 8004fd8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	1cba      	adds	r2, r7, #2
 8004fe0:	8812      	ldrh	r2, [r2, #0]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d004      	beq.n	8004ff0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004fe6:	230f      	movs	r3, #15
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	2201      	movs	r2, #1
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	e003      	b.n	8004ff8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ff0:	230f      	movs	r3, #15
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004ff8:	230f      	movs	r3, #15
 8004ffa:	18fb      	adds	r3, r7, r3
 8004ffc:	781b      	ldrb	r3, [r3, #0]
  }
 8004ffe:	0018      	movs	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	b004      	add	sp, #16
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b082      	sub	sp, #8
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	0008      	movs	r0, r1
 8005010:	0011      	movs	r1, r2
 8005012:	1cbb      	adds	r3, r7, #2
 8005014:	1c02      	adds	r2, r0, #0
 8005016:	801a      	strh	r2, [r3, #0]
 8005018:	1c7b      	adds	r3, r7, #1
 800501a:	1c0a      	adds	r2, r1, #0
 800501c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800501e:	1c7b      	adds	r3, r7, #1
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d004      	beq.n	8005030 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005026:	1cbb      	adds	r3, r7, #2
 8005028:	881a      	ldrh	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800502e:	e003      	b.n	8005038 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005030:	1cbb      	adds	r3, r7, #2
 8005032:	881a      	ldrh	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005038:	46c0      	nop			; (mov r8, r8)
 800503a:	46bd      	mov	sp, r7
 800503c:	b002      	add	sp, #8
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	000a      	movs	r2, r1
 800504a:	1cbb      	adds	r3, r7, #2
 800504c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005054:	1cbb      	adds	r3, r7, #2
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4013      	ands	r3, r2
 800505c:	041a      	lsls	r2, r3, #16
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	43db      	mvns	r3, r3
 8005062:	1cb9      	adds	r1, r7, #2
 8005064:	8809      	ldrh	r1, [r1, #0]
 8005066:	400b      	ands	r3, r1
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	619a      	str	r2, [r3, #24]
}
 800506e:	46c0      	nop			; (mov r8, r8)
 8005070:	46bd      	mov	sp, r7
 8005072:	b004      	add	sp, #16
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e082      	b.n	8005190 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2241      	movs	r2, #65	; 0x41
 800508e:	5c9b      	ldrb	r3, [r3, r2]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d107      	bne.n	80050a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2240      	movs	r2, #64	; 0x40
 800509a:	2100      	movs	r1, #0
 800509c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	0018      	movs	r0, r3
 80050a2:	f7fe fd19 	bl	8003ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2241      	movs	r2, #65	; 0x41
 80050aa:	2124      	movs	r1, #36	; 0x24
 80050ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2101      	movs	r1, #1
 80050ba:	438a      	bics	r2, r1
 80050bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4934      	ldr	r1, [pc, #208]	; (8005198 <HAL_I2C_Init+0x120>)
 80050c8:	400a      	ands	r2, r1
 80050ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4931      	ldr	r1, [pc, #196]	; (800519c <HAL_I2C_Init+0x124>)
 80050d8:	400a      	ands	r2, r1
 80050da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d108      	bne.n	80050f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2180      	movs	r1, #128	; 0x80
 80050ee:	0209      	lsls	r1, r1, #8
 80050f0:	430a      	orrs	r2, r1
 80050f2:	609a      	str	r2, [r3, #8]
 80050f4:	e007      	b.n	8005106 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2184      	movs	r1, #132	; 0x84
 8005100:	0209      	lsls	r1, r1, #8
 8005102:	430a      	orrs	r2, r1
 8005104:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d104      	bne.n	8005118 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2280      	movs	r2, #128	; 0x80
 8005114:	0112      	lsls	r2, r2, #4
 8005116:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	491f      	ldr	r1, [pc, #124]	; (80051a0 <HAL_I2C_Init+0x128>)
 8005124:	430a      	orrs	r2, r1
 8005126:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	491a      	ldr	r1, [pc, #104]	; (800519c <HAL_I2C_Init+0x124>)
 8005134:	400a      	ands	r2, r1
 8005136:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	431a      	orrs	r2, r3
 8005142:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69d9      	ldr	r1, [r3, #28]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2101      	movs	r1, #1
 800516e:	430a      	orrs	r2, r1
 8005170:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2241      	movs	r2, #65	; 0x41
 800517c:	2120      	movs	r1, #32
 800517e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2242      	movs	r2, #66	; 0x42
 800518a:	2100      	movs	r1, #0
 800518c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	0018      	movs	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	b002      	add	sp, #8
 8005196:	bd80      	pop	{r7, pc}
 8005198:	f0ffffff 	.word	0xf0ffffff
 800519c:	ffff7fff 	.word	0xffff7fff
 80051a0:	02008000 	.word	0x02008000

080051a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2241      	movs	r2, #65	; 0x41
 80051b2:	5c9b      	ldrb	r3, [r3, r2]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b20      	cmp	r3, #32
 80051b8:	d138      	bne.n	800522c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2240      	movs	r2, #64	; 0x40
 80051be:	5c9b      	ldrb	r3, [r3, r2]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e032      	b.n	800522e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2240      	movs	r2, #64	; 0x40
 80051cc:	2101      	movs	r1, #1
 80051ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2241      	movs	r2, #65	; 0x41
 80051d4:	2124      	movs	r1, #36	; 0x24
 80051d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2101      	movs	r1, #1
 80051e4:	438a      	bics	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4911      	ldr	r1, [pc, #68]	; (8005238 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80051f4:	400a      	ands	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6819      	ldr	r1, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2101      	movs	r1, #1
 8005214:	430a      	orrs	r2, r1
 8005216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2241      	movs	r2, #65	; 0x41
 800521c:	2120      	movs	r1, #32
 800521e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2240      	movs	r2, #64	; 0x40
 8005224:	2100      	movs	r1, #0
 8005226:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	e000      	b.n	800522e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800522c:	2302      	movs	r3, #2
  }
}
 800522e:	0018      	movs	r0, r3
 8005230:	46bd      	mov	sp, r7
 8005232:	b002      	add	sp, #8
 8005234:	bd80      	pop	{r7, pc}
 8005236:	46c0      	nop			; (mov r8, r8)
 8005238:	ffffefff 	.word	0xffffefff

0800523c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2241      	movs	r2, #65	; 0x41
 800524a:	5c9b      	ldrb	r3, [r3, r2]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b20      	cmp	r3, #32
 8005250:	d139      	bne.n	80052c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2240      	movs	r2, #64	; 0x40
 8005256:	5c9b      	ldrb	r3, [r3, r2]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800525c:	2302      	movs	r3, #2
 800525e:	e033      	b.n	80052c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2240      	movs	r2, #64	; 0x40
 8005264:	2101      	movs	r1, #1
 8005266:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2241      	movs	r2, #65	; 0x41
 800526c:	2124      	movs	r1, #36	; 0x24
 800526e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2101      	movs	r1, #1
 800527c:	438a      	bics	r2, r1
 800527e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4a11      	ldr	r2, [pc, #68]	; (80052d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800528c:	4013      	ands	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2101      	movs	r1, #1
 80052ae:	430a      	orrs	r2, r1
 80052b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2241      	movs	r2, #65	; 0x41
 80052b6:	2120      	movs	r1, #32
 80052b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2240      	movs	r2, #64	; 0x40
 80052be:	2100      	movs	r1, #0
 80052c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	e000      	b.n	80052c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052c6:	2302      	movs	r3, #2
  }
}
 80052c8:	0018      	movs	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b004      	add	sp, #16
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	fffff0ff 	.word	0xfffff0ff

080052d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e301      	b.n	80058ea <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2201      	movs	r2, #1
 80052ec:	4013      	ands	r3, r2
 80052ee:	d100      	bne.n	80052f2 <HAL_RCC_OscConfig+0x1e>
 80052f0:	e08d      	b.n	800540e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80052f2:	4bc3      	ldr	r3, [pc, #780]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	220c      	movs	r2, #12
 80052f8:	4013      	ands	r3, r2
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d00e      	beq.n	800531c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80052fe:	4bc0      	ldr	r3, [pc, #768]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	220c      	movs	r2, #12
 8005304:	4013      	ands	r3, r2
 8005306:	2b08      	cmp	r3, #8
 8005308:	d116      	bne.n	8005338 <HAL_RCC_OscConfig+0x64>
 800530a:	4bbd      	ldr	r3, [pc, #756]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	2380      	movs	r3, #128	; 0x80
 8005310:	025b      	lsls	r3, r3, #9
 8005312:	401a      	ands	r2, r3
 8005314:	2380      	movs	r3, #128	; 0x80
 8005316:	025b      	lsls	r3, r3, #9
 8005318:	429a      	cmp	r2, r3
 800531a:	d10d      	bne.n	8005338 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800531c:	4bb8      	ldr	r3, [pc, #736]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	2380      	movs	r3, #128	; 0x80
 8005322:	029b      	lsls	r3, r3, #10
 8005324:	4013      	ands	r3, r2
 8005326:	d100      	bne.n	800532a <HAL_RCC_OscConfig+0x56>
 8005328:	e070      	b.n	800540c <HAL_RCC_OscConfig+0x138>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d000      	beq.n	8005334 <HAL_RCC_OscConfig+0x60>
 8005332:	e06b      	b.n	800540c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e2d8      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d107      	bne.n	8005350 <HAL_RCC_OscConfig+0x7c>
 8005340:	4baf      	ldr	r3, [pc, #700]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	4bae      	ldr	r3, [pc, #696]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005346:	2180      	movs	r1, #128	; 0x80
 8005348:	0249      	lsls	r1, r1, #9
 800534a:	430a      	orrs	r2, r1
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	e02f      	b.n	80053b0 <HAL_RCC_OscConfig+0xdc>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10c      	bne.n	8005372 <HAL_RCC_OscConfig+0x9e>
 8005358:	4ba9      	ldr	r3, [pc, #676]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	4ba8      	ldr	r3, [pc, #672]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800535e:	49a9      	ldr	r1, [pc, #676]	; (8005604 <HAL_RCC_OscConfig+0x330>)
 8005360:	400a      	ands	r2, r1
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	4ba6      	ldr	r3, [pc, #664]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	4ba5      	ldr	r3, [pc, #660]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800536a:	49a7      	ldr	r1, [pc, #668]	; (8005608 <HAL_RCC_OscConfig+0x334>)
 800536c:	400a      	ands	r2, r1
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	e01e      	b.n	80053b0 <HAL_RCC_OscConfig+0xdc>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b05      	cmp	r3, #5
 8005378:	d10e      	bne.n	8005398 <HAL_RCC_OscConfig+0xc4>
 800537a:	4ba1      	ldr	r3, [pc, #644]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	4ba0      	ldr	r3, [pc, #640]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005380:	2180      	movs	r1, #128	; 0x80
 8005382:	02c9      	lsls	r1, r1, #11
 8005384:	430a      	orrs	r2, r1
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	4b9d      	ldr	r3, [pc, #628]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4b9c      	ldr	r3, [pc, #624]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800538e:	2180      	movs	r1, #128	; 0x80
 8005390:	0249      	lsls	r1, r1, #9
 8005392:	430a      	orrs	r2, r1
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	e00b      	b.n	80053b0 <HAL_RCC_OscConfig+0xdc>
 8005398:	4b99      	ldr	r3, [pc, #612]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	4b98      	ldr	r3, [pc, #608]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800539e:	4999      	ldr	r1, [pc, #612]	; (8005604 <HAL_RCC_OscConfig+0x330>)
 80053a0:	400a      	ands	r2, r1
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	4b96      	ldr	r3, [pc, #600]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4b95      	ldr	r3, [pc, #596]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 80053aa:	4997      	ldr	r1, [pc, #604]	; (8005608 <HAL_RCC_OscConfig+0x334>)
 80053ac:	400a      	ands	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d014      	beq.n	80053e2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b8:	f7fe fdaa 	bl	8003f10 <HAL_GetTick>
 80053bc:	0003      	movs	r3, r0
 80053be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053c2:	f7fe fda5 	bl	8003f10 <HAL_GetTick>
 80053c6:	0002      	movs	r2, r0
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b64      	cmp	r3, #100	; 0x64
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e28a      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053d4:	4b8a      	ldr	r3, [pc, #552]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	2380      	movs	r3, #128	; 0x80
 80053da:	029b      	lsls	r3, r3, #10
 80053dc:	4013      	ands	r3, r2
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCC_OscConfig+0xee>
 80053e0:	e015      	b.n	800540e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e2:	f7fe fd95 	bl	8003f10 <HAL_GetTick>
 80053e6:	0003      	movs	r3, r0
 80053e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053ec:	f7fe fd90 	bl	8003f10 <HAL_GetTick>
 80053f0:	0002      	movs	r2, r0
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b64      	cmp	r3, #100	; 0x64
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e275      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053fe:	4b80      	ldr	r3, [pc, #512]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	029b      	lsls	r3, r3, #10
 8005406:	4013      	ands	r3, r2
 8005408:	d1f0      	bne.n	80053ec <HAL_RCC_OscConfig+0x118>
 800540a:	e000      	b.n	800540e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800540c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2202      	movs	r2, #2
 8005414:	4013      	ands	r3, r2
 8005416:	d100      	bne.n	800541a <HAL_RCC_OscConfig+0x146>
 8005418:	e069      	b.n	80054ee <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800541a:	4b79      	ldr	r3, [pc, #484]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	220c      	movs	r2, #12
 8005420:	4013      	ands	r3, r2
 8005422:	d00b      	beq.n	800543c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005424:	4b76      	ldr	r3, [pc, #472]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	220c      	movs	r2, #12
 800542a:	4013      	ands	r3, r2
 800542c:	2b08      	cmp	r3, #8
 800542e:	d11c      	bne.n	800546a <HAL_RCC_OscConfig+0x196>
 8005430:	4b73      	ldr	r3, [pc, #460]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	2380      	movs	r3, #128	; 0x80
 8005436:	025b      	lsls	r3, r3, #9
 8005438:	4013      	ands	r3, r2
 800543a:	d116      	bne.n	800546a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800543c:	4b70      	ldr	r3, [pc, #448]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2202      	movs	r2, #2
 8005442:	4013      	ands	r3, r2
 8005444:	d005      	beq.n	8005452 <HAL_RCC_OscConfig+0x17e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d001      	beq.n	8005452 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e24b      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005452:	4b6b      	ldr	r3, [pc, #428]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	22f8      	movs	r2, #248	; 0xf8
 8005458:	4393      	bics	r3, r2
 800545a:	0019      	movs	r1, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	00da      	lsls	r2, r3, #3
 8005462:	4b67      	ldr	r3, [pc, #412]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005464:	430a      	orrs	r2, r1
 8005466:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005468:	e041      	b.n	80054ee <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d024      	beq.n	80054bc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005472:	4b63      	ldr	r3, [pc, #396]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	4b62      	ldr	r3, [pc, #392]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005478:	2101      	movs	r1, #1
 800547a:	430a      	orrs	r2, r1
 800547c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547e:	f7fe fd47 	bl	8003f10 <HAL_GetTick>
 8005482:	0003      	movs	r3, r0
 8005484:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005488:	f7fe fd42 	bl	8003f10 <HAL_GetTick>
 800548c:	0002      	movs	r2, r0
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e227      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549a:	4b59      	ldr	r3, [pc, #356]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2202      	movs	r2, #2
 80054a0:	4013      	ands	r3, r2
 80054a2:	d0f1      	beq.n	8005488 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a4:	4b56      	ldr	r3, [pc, #344]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	22f8      	movs	r2, #248	; 0xf8
 80054aa:	4393      	bics	r3, r2
 80054ac:	0019      	movs	r1, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	00da      	lsls	r2, r3, #3
 80054b4:	4b52      	ldr	r3, [pc, #328]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 80054b6:	430a      	orrs	r2, r1
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	e018      	b.n	80054ee <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054bc:	4b50      	ldr	r3, [pc, #320]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	4b4f      	ldr	r3, [pc, #316]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 80054c2:	2101      	movs	r1, #1
 80054c4:	438a      	bics	r2, r1
 80054c6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fe fd22 	bl	8003f10 <HAL_GetTick>
 80054cc:	0003      	movs	r3, r0
 80054ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054d0:	e008      	b.n	80054e4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054d2:	f7fe fd1d 	bl	8003f10 <HAL_GetTick>
 80054d6:	0002      	movs	r2, r0
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e202      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054e4:	4b46      	ldr	r3, [pc, #280]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2202      	movs	r2, #2
 80054ea:	4013      	ands	r3, r2
 80054ec:	d1f1      	bne.n	80054d2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2208      	movs	r2, #8
 80054f4:	4013      	ands	r3, r2
 80054f6:	d036      	beq.n	8005566 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d019      	beq.n	8005534 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005500:	4b3f      	ldr	r3, [pc, #252]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005504:	4b3e      	ldr	r3, [pc, #248]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005506:	2101      	movs	r1, #1
 8005508:	430a      	orrs	r2, r1
 800550a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800550c:	f7fe fd00 	bl	8003f10 <HAL_GetTick>
 8005510:	0003      	movs	r3, r0
 8005512:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005516:	f7fe fcfb 	bl	8003f10 <HAL_GetTick>
 800551a:	0002      	movs	r2, r0
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e1e0      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005528:	4b35      	ldr	r3, [pc, #212]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	2202      	movs	r2, #2
 800552e:	4013      	ands	r3, r2
 8005530:	d0f1      	beq.n	8005516 <HAL_RCC_OscConfig+0x242>
 8005532:	e018      	b.n	8005566 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005534:	4b32      	ldr	r3, [pc, #200]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005538:	4b31      	ldr	r3, [pc, #196]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800553a:	2101      	movs	r1, #1
 800553c:	438a      	bics	r2, r1
 800553e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005540:	f7fe fce6 	bl	8003f10 <HAL_GetTick>
 8005544:	0003      	movs	r3, r0
 8005546:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800554a:	f7fe fce1 	bl	8003f10 <HAL_GetTick>
 800554e:	0002      	movs	r2, r0
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e1c6      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800555c:	4b28      	ldr	r3, [pc, #160]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	2202      	movs	r2, #2
 8005562:	4013      	ands	r3, r2
 8005564:	d1f1      	bne.n	800554a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2204      	movs	r2, #4
 800556c:	4013      	ands	r3, r2
 800556e:	d100      	bne.n	8005572 <HAL_RCC_OscConfig+0x29e>
 8005570:	e0b4      	b.n	80056dc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005572:	201f      	movs	r0, #31
 8005574:	183b      	adds	r3, r7, r0
 8005576:	2200      	movs	r2, #0
 8005578:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800557a:	4b21      	ldr	r3, [pc, #132]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800557c:	69da      	ldr	r2, [r3, #28]
 800557e:	2380      	movs	r3, #128	; 0x80
 8005580:	055b      	lsls	r3, r3, #21
 8005582:	4013      	ands	r3, r2
 8005584:	d110      	bne.n	80055a8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005586:	4b1e      	ldr	r3, [pc, #120]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005588:	69da      	ldr	r2, [r3, #28]
 800558a:	4b1d      	ldr	r3, [pc, #116]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 800558c:	2180      	movs	r1, #128	; 0x80
 800558e:	0549      	lsls	r1, r1, #21
 8005590:	430a      	orrs	r2, r1
 8005592:	61da      	str	r2, [r3, #28]
 8005594:	4b1a      	ldr	r3, [pc, #104]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 8005596:	69da      	ldr	r2, [r3, #28]
 8005598:	2380      	movs	r3, #128	; 0x80
 800559a:	055b      	lsls	r3, r3, #21
 800559c:	4013      	ands	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80055a2:	183b      	adds	r3, r7, r0
 80055a4:	2201      	movs	r2, #1
 80055a6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a8:	4b18      	ldr	r3, [pc, #96]	; (800560c <HAL_RCC_OscConfig+0x338>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	2380      	movs	r3, #128	; 0x80
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	4013      	ands	r3, r2
 80055b2:	d11a      	bne.n	80055ea <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055b4:	4b15      	ldr	r3, [pc, #84]	; (800560c <HAL_RCC_OscConfig+0x338>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	4b14      	ldr	r3, [pc, #80]	; (800560c <HAL_RCC_OscConfig+0x338>)
 80055ba:	2180      	movs	r1, #128	; 0x80
 80055bc:	0049      	lsls	r1, r1, #1
 80055be:	430a      	orrs	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055c2:	f7fe fca5 	bl	8003f10 <HAL_GetTick>
 80055c6:	0003      	movs	r3, r0
 80055c8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055cc:	f7fe fca0 	bl	8003f10 <HAL_GetTick>
 80055d0:	0002      	movs	r2, r0
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b64      	cmp	r3, #100	; 0x64
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e185      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055de:	4b0b      	ldr	r3, [pc, #44]	; (800560c <HAL_RCC_OscConfig+0x338>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	2380      	movs	r3, #128	; 0x80
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	4013      	ands	r3, r2
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d10e      	bne.n	8005610 <HAL_RCC_OscConfig+0x33c>
 80055f2:	4b03      	ldr	r3, [pc, #12]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 80055f4:	6a1a      	ldr	r2, [r3, #32]
 80055f6:	4b02      	ldr	r3, [pc, #8]	; (8005600 <HAL_RCC_OscConfig+0x32c>)
 80055f8:	2101      	movs	r1, #1
 80055fa:	430a      	orrs	r2, r1
 80055fc:	621a      	str	r2, [r3, #32]
 80055fe:	e035      	b.n	800566c <HAL_RCC_OscConfig+0x398>
 8005600:	40021000 	.word	0x40021000
 8005604:	fffeffff 	.word	0xfffeffff
 8005608:	fffbffff 	.word	0xfffbffff
 800560c:	40007000 	.word	0x40007000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10c      	bne.n	8005632 <HAL_RCC_OscConfig+0x35e>
 8005618:	4bb6      	ldr	r3, [pc, #728]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 800561a:	6a1a      	ldr	r2, [r3, #32]
 800561c:	4bb5      	ldr	r3, [pc, #724]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 800561e:	2101      	movs	r1, #1
 8005620:	438a      	bics	r2, r1
 8005622:	621a      	str	r2, [r3, #32]
 8005624:	4bb3      	ldr	r3, [pc, #716]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005626:	6a1a      	ldr	r2, [r3, #32]
 8005628:	4bb2      	ldr	r3, [pc, #712]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 800562a:	2104      	movs	r1, #4
 800562c:	438a      	bics	r2, r1
 800562e:	621a      	str	r2, [r3, #32]
 8005630:	e01c      	b.n	800566c <HAL_RCC_OscConfig+0x398>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2b05      	cmp	r3, #5
 8005638:	d10c      	bne.n	8005654 <HAL_RCC_OscConfig+0x380>
 800563a:	4bae      	ldr	r3, [pc, #696]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 800563c:	6a1a      	ldr	r2, [r3, #32]
 800563e:	4bad      	ldr	r3, [pc, #692]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005640:	2104      	movs	r1, #4
 8005642:	430a      	orrs	r2, r1
 8005644:	621a      	str	r2, [r3, #32]
 8005646:	4bab      	ldr	r3, [pc, #684]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005648:	6a1a      	ldr	r2, [r3, #32]
 800564a:	4baa      	ldr	r3, [pc, #680]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 800564c:	2101      	movs	r1, #1
 800564e:	430a      	orrs	r2, r1
 8005650:	621a      	str	r2, [r3, #32]
 8005652:	e00b      	b.n	800566c <HAL_RCC_OscConfig+0x398>
 8005654:	4ba7      	ldr	r3, [pc, #668]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005656:	6a1a      	ldr	r2, [r3, #32]
 8005658:	4ba6      	ldr	r3, [pc, #664]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 800565a:	2101      	movs	r1, #1
 800565c:	438a      	bics	r2, r1
 800565e:	621a      	str	r2, [r3, #32]
 8005660:	4ba4      	ldr	r3, [pc, #656]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005662:	6a1a      	ldr	r2, [r3, #32]
 8005664:	4ba3      	ldr	r3, [pc, #652]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005666:	2104      	movs	r1, #4
 8005668:	438a      	bics	r2, r1
 800566a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d014      	beq.n	800569e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005674:	f7fe fc4c 	bl	8003f10 <HAL_GetTick>
 8005678:	0003      	movs	r3, r0
 800567a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800567c:	e009      	b.n	8005692 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800567e:	f7fe fc47 	bl	8003f10 <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	4a9b      	ldr	r2, [pc, #620]	; (80058f8 <HAL_RCC_OscConfig+0x624>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e12b      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005692:	4b98      	ldr	r3, [pc, #608]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	2202      	movs	r2, #2
 8005698:	4013      	ands	r3, r2
 800569a:	d0f0      	beq.n	800567e <HAL_RCC_OscConfig+0x3aa>
 800569c:	e013      	b.n	80056c6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800569e:	f7fe fc37 	bl	8003f10 <HAL_GetTick>
 80056a2:	0003      	movs	r3, r0
 80056a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056a6:	e009      	b.n	80056bc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a8:	f7fe fc32 	bl	8003f10 <HAL_GetTick>
 80056ac:	0002      	movs	r2, r0
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	4a91      	ldr	r2, [pc, #580]	; (80058f8 <HAL_RCC_OscConfig+0x624>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e116      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056bc:	4b8d      	ldr	r3, [pc, #564]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	2202      	movs	r2, #2
 80056c2:	4013      	ands	r3, r2
 80056c4:	d1f0      	bne.n	80056a8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056c6:	231f      	movs	r3, #31
 80056c8:	18fb      	adds	r3, r7, r3
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d105      	bne.n	80056dc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056d0:	4b88      	ldr	r3, [pc, #544]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 80056d2:	69da      	ldr	r2, [r3, #28]
 80056d4:	4b87      	ldr	r3, [pc, #540]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 80056d6:	4989      	ldr	r1, [pc, #548]	; (80058fc <HAL_RCC_OscConfig+0x628>)
 80056d8:	400a      	ands	r2, r1
 80056da:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2210      	movs	r2, #16
 80056e2:	4013      	ands	r3, r2
 80056e4:	d063      	beq.n	80057ae <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d12a      	bne.n	8005744 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80056ee:	4b81      	ldr	r3, [pc, #516]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 80056f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056f2:	4b80      	ldr	r3, [pc, #512]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 80056f4:	2104      	movs	r1, #4
 80056f6:	430a      	orrs	r2, r1
 80056f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80056fa:	4b7e      	ldr	r3, [pc, #504]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 80056fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056fe:	4b7d      	ldr	r3, [pc, #500]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005700:	2101      	movs	r1, #1
 8005702:	430a      	orrs	r2, r1
 8005704:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005706:	f7fe fc03 	bl	8003f10 <HAL_GetTick>
 800570a:	0003      	movs	r3, r0
 800570c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005710:	f7fe fbfe 	bl	8003f10 <HAL_GetTick>
 8005714:	0002      	movs	r2, r0
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e0e3      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005722:	4b74      	ldr	r3, [pc, #464]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005726:	2202      	movs	r2, #2
 8005728:	4013      	ands	r3, r2
 800572a:	d0f1      	beq.n	8005710 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800572c:	4b71      	ldr	r3, [pc, #452]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 800572e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005730:	22f8      	movs	r2, #248	; 0xf8
 8005732:	4393      	bics	r3, r2
 8005734:	0019      	movs	r1, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	00da      	lsls	r2, r3, #3
 800573c:	4b6d      	ldr	r3, [pc, #436]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 800573e:	430a      	orrs	r2, r1
 8005740:	635a      	str	r2, [r3, #52]	; 0x34
 8005742:	e034      	b.n	80057ae <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	3305      	adds	r3, #5
 800574a:	d111      	bne.n	8005770 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800574c:	4b69      	ldr	r3, [pc, #420]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 800574e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005750:	4b68      	ldr	r3, [pc, #416]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005752:	2104      	movs	r1, #4
 8005754:	438a      	bics	r2, r1
 8005756:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005758:	4b66      	ldr	r3, [pc, #408]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	22f8      	movs	r2, #248	; 0xf8
 800575e:	4393      	bics	r3, r2
 8005760:	0019      	movs	r1, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	00da      	lsls	r2, r3, #3
 8005768:	4b62      	ldr	r3, [pc, #392]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 800576a:	430a      	orrs	r2, r1
 800576c:	635a      	str	r2, [r3, #52]	; 0x34
 800576e:	e01e      	b.n	80057ae <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005770:	4b60      	ldr	r3, [pc, #384]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005774:	4b5f      	ldr	r3, [pc, #380]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005776:	2104      	movs	r1, #4
 8005778:	430a      	orrs	r2, r1
 800577a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800577c:	4b5d      	ldr	r3, [pc, #372]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 800577e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005780:	4b5c      	ldr	r3, [pc, #368]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005782:	2101      	movs	r1, #1
 8005784:	438a      	bics	r2, r1
 8005786:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005788:	f7fe fbc2 	bl	8003f10 <HAL_GetTick>
 800578c:	0003      	movs	r3, r0
 800578e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005790:	e008      	b.n	80057a4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005792:	f7fe fbbd 	bl	8003f10 <HAL_GetTick>
 8005796:	0002      	movs	r2, r0
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e0a2      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80057a4:	4b53      	ldr	r3, [pc, #332]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 80057a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a8:	2202      	movs	r2, #2
 80057aa:	4013      	ands	r3, r2
 80057ac:	d1f1      	bne.n	8005792 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d100      	bne.n	80057b8 <HAL_RCC_OscConfig+0x4e4>
 80057b6:	e097      	b.n	80058e8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057b8:	4b4e      	ldr	r3, [pc, #312]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	220c      	movs	r2, #12
 80057be:	4013      	ands	r3, r2
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d100      	bne.n	80057c6 <HAL_RCC_OscConfig+0x4f2>
 80057c4:	e06b      	b.n	800589e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d14c      	bne.n	8005868 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ce:	4b49      	ldr	r3, [pc, #292]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b48      	ldr	r3, [pc, #288]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 80057d4:	494a      	ldr	r1, [pc, #296]	; (8005900 <HAL_RCC_OscConfig+0x62c>)
 80057d6:	400a      	ands	r2, r1
 80057d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057da:	f7fe fb99 	bl	8003f10 <HAL_GetTick>
 80057de:	0003      	movs	r3, r0
 80057e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e4:	f7fe fb94 	bl	8003f10 <HAL_GetTick>
 80057e8:	0002      	movs	r2, r0
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e079      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057f6:	4b3f      	ldr	r3, [pc, #252]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	2380      	movs	r3, #128	; 0x80
 80057fc:	049b      	lsls	r3, r3, #18
 80057fe:	4013      	ands	r3, r2
 8005800:	d1f0      	bne.n	80057e4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005802:	4b3c      	ldr	r3, [pc, #240]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	220f      	movs	r2, #15
 8005808:	4393      	bics	r3, r2
 800580a:	0019      	movs	r1, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005810:	4b38      	ldr	r3, [pc, #224]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005812:	430a      	orrs	r2, r1
 8005814:	62da      	str	r2, [r3, #44]	; 0x2c
 8005816:	4b37      	ldr	r3, [pc, #220]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	4a3a      	ldr	r2, [pc, #232]	; (8005904 <HAL_RCC_OscConfig+0x630>)
 800581c:	4013      	ands	r3, r2
 800581e:	0019      	movs	r1, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	431a      	orrs	r2, r3
 800582a:	4b32      	ldr	r3, [pc, #200]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 800582c:	430a      	orrs	r2, r1
 800582e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005830:	4b30      	ldr	r3, [pc, #192]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	4b2f      	ldr	r3, [pc, #188]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005836:	2180      	movs	r1, #128	; 0x80
 8005838:	0449      	lsls	r1, r1, #17
 800583a:	430a      	orrs	r2, r1
 800583c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800583e:	f7fe fb67 	bl	8003f10 <HAL_GetTick>
 8005842:	0003      	movs	r3, r0
 8005844:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005848:	f7fe fb62 	bl	8003f10 <HAL_GetTick>
 800584c:	0002      	movs	r2, r0
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e047      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800585a:	4b26      	ldr	r3, [pc, #152]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	2380      	movs	r3, #128	; 0x80
 8005860:	049b      	lsls	r3, r3, #18
 8005862:	4013      	ands	r3, r2
 8005864:	d0f0      	beq.n	8005848 <HAL_RCC_OscConfig+0x574>
 8005866:	e03f      	b.n	80058e8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005868:	4b22      	ldr	r3, [pc, #136]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	4b21      	ldr	r3, [pc, #132]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 800586e:	4924      	ldr	r1, [pc, #144]	; (8005900 <HAL_RCC_OscConfig+0x62c>)
 8005870:	400a      	ands	r2, r1
 8005872:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005874:	f7fe fb4c 	bl	8003f10 <HAL_GetTick>
 8005878:	0003      	movs	r3, r0
 800587a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800587e:	f7fe fb47 	bl	8003f10 <HAL_GetTick>
 8005882:	0002      	movs	r2, r0
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e02c      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005890:	4b18      	ldr	r3, [pc, #96]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	2380      	movs	r3, #128	; 0x80
 8005896:	049b      	lsls	r3, r3, #18
 8005898:	4013      	ands	r3, r2
 800589a:	d1f0      	bne.n	800587e <HAL_RCC_OscConfig+0x5aa>
 800589c:	e024      	b.n	80058e8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e01f      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80058aa:	4b12      	ldr	r3, [pc, #72]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80058b0:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <HAL_RCC_OscConfig+0x620>)
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	2380      	movs	r3, #128	; 0x80
 80058ba:	025b      	lsls	r3, r3, #9
 80058bc:	401a      	ands	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d10e      	bne.n	80058e4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	220f      	movs	r2, #15
 80058ca:	401a      	ands	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d107      	bne.n	80058e4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	23f0      	movs	r3, #240	; 0xf0
 80058d8:	039b      	lsls	r3, r3, #14
 80058da:	401a      	ands	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d001      	beq.n	80058e8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	0018      	movs	r0, r3
 80058ec:	46bd      	mov	sp, r7
 80058ee:	b008      	add	sp, #32
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	40021000 	.word	0x40021000
 80058f8:	00001388 	.word	0x00001388
 80058fc:	efffffff 	.word	0xefffffff
 8005900:	feffffff 	.word	0xfeffffff
 8005904:	ffc2ffff 	.word	0xffc2ffff

08005908 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0b3      	b.n	8005a84 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800591c:	4b5b      	ldr	r3, [pc, #364]	; (8005a8c <HAL_RCC_ClockConfig+0x184>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2201      	movs	r2, #1
 8005922:	4013      	ands	r3, r2
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d911      	bls.n	800594e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592a:	4b58      	ldr	r3, [pc, #352]	; (8005a8c <HAL_RCC_ClockConfig+0x184>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2201      	movs	r2, #1
 8005930:	4393      	bics	r3, r2
 8005932:	0019      	movs	r1, r3
 8005934:	4b55      	ldr	r3, [pc, #340]	; (8005a8c <HAL_RCC_ClockConfig+0x184>)
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800593c:	4b53      	ldr	r3, [pc, #332]	; (8005a8c <HAL_RCC_ClockConfig+0x184>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2201      	movs	r2, #1
 8005942:	4013      	ands	r3, r2
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d001      	beq.n	800594e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e09a      	b.n	8005a84 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2202      	movs	r2, #2
 8005954:	4013      	ands	r3, r2
 8005956:	d015      	beq.n	8005984 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2204      	movs	r2, #4
 800595e:	4013      	ands	r3, r2
 8005960:	d006      	beq.n	8005970 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005962:	4b4b      	ldr	r3, [pc, #300]	; (8005a90 <HAL_RCC_ClockConfig+0x188>)
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	4b4a      	ldr	r3, [pc, #296]	; (8005a90 <HAL_RCC_ClockConfig+0x188>)
 8005968:	21e0      	movs	r1, #224	; 0xe0
 800596a:	00c9      	lsls	r1, r1, #3
 800596c:	430a      	orrs	r2, r1
 800596e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005970:	4b47      	ldr	r3, [pc, #284]	; (8005a90 <HAL_RCC_ClockConfig+0x188>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	22f0      	movs	r2, #240	; 0xf0
 8005976:	4393      	bics	r3, r2
 8005978:	0019      	movs	r1, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	4b44      	ldr	r3, [pc, #272]	; (8005a90 <HAL_RCC_ClockConfig+0x188>)
 8005980:	430a      	orrs	r2, r1
 8005982:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2201      	movs	r2, #1
 800598a:	4013      	ands	r3, r2
 800598c:	d040      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d107      	bne.n	80059a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005996:	4b3e      	ldr	r3, [pc, #248]	; (8005a90 <HAL_RCC_ClockConfig+0x188>)
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	2380      	movs	r3, #128	; 0x80
 800599c:	029b      	lsls	r3, r3, #10
 800599e:	4013      	ands	r3, r2
 80059a0:	d114      	bne.n	80059cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e06e      	b.n	8005a84 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d107      	bne.n	80059be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ae:	4b38      	ldr	r3, [pc, #224]	; (8005a90 <HAL_RCC_ClockConfig+0x188>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	2380      	movs	r3, #128	; 0x80
 80059b4:	049b      	lsls	r3, r3, #18
 80059b6:	4013      	ands	r3, r2
 80059b8:	d108      	bne.n	80059cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e062      	b.n	8005a84 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059be:	4b34      	ldr	r3, [pc, #208]	; (8005a90 <HAL_RCC_ClockConfig+0x188>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2202      	movs	r2, #2
 80059c4:	4013      	ands	r3, r2
 80059c6:	d101      	bne.n	80059cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e05b      	b.n	8005a84 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059cc:	4b30      	ldr	r3, [pc, #192]	; (8005a90 <HAL_RCC_ClockConfig+0x188>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2203      	movs	r2, #3
 80059d2:	4393      	bics	r3, r2
 80059d4:	0019      	movs	r1, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	4b2d      	ldr	r3, [pc, #180]	; (8005a90 <HAL_RCC_ClockConfig+0x188>)
 80059dc:	430a      	orrs	r2, r1
 80059de:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059e0:	f7fe fa96 	bl	8003f10 <HAL_GetTick>
 80059e4:	0003      	movs	r3, r0
 80059e6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e8:	e009      	b.n	80059fe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ea:	f7fe fa91 	bl	8003f10 <HAL_GetTick>
 80059ee:	0002      	movs	r2, r0
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	4a27      	ldr	r2, [pc, #156]	; (8005a94 <HAL_RCC_ClockConfig+0x18c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e042      	b.n	8005a84 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fe:	4b24      	ldr	r3, [pc, #144]	; (8005a90 <HAL_RCC_ClockConfig+0x188>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	220c      	movs	r2, #12
 8005a04:	401a      	ands	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d1ec      	bne.n	80059ea <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a10:	4b1e      	ldr	r3, [pc, #120]	; (8005a8c <HAL_RCC_ClockConfig+0x184>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2201      	movs	r2, #1
 8005a16:	4013      	ands	r3, r2
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d211      	bcs.n	8005a42 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1e:	4b1b      	ldr	r3, [pc, #108]	; (8005a8c <HAL_RCC_ClockConfig+0x184>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2201      	movs	r2, #1
 8005a24:	4393      	bics	r3, r2
 8005a26:	0019      	movs	r1, r3
 8005a28:	4b18      	ldr	r3, [pc, #96]	; (8005a8c <HAL_RCC_ClockConfig+0x184>)
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a30:	4b16      	ldr	r3, [pc, #88]	; (8005a8c <HAL_RCC_ClockConfig+0x184>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2201      	movs	r2, #1
 8005a36:	4013      	ands	r3, r2
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d001      	beq.n	8005a42 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e020      	b.n	8005a84 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2204      	movs	r2, #4
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d009      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005a4c:	4b10      	ldr	r3, [pc, #64]	; (8005a90 <HAL_RCC_ClockConfig+0x188>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	4a11      	ldr	r2, [pc, #68]	; (8005a98 <HAL_RCC_ClockConfig+0x190>)
 8005a52:	4013      	ands	r3, r2
 8005a54:	0019      	movs	r1, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <HAL_RCC_ClockConfig+0x188>)
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005a60:	f000 f820 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8005a64:	0001      	movs	r1, r0
 8005a66:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <HAL_RCC_ClockConfig+0x188>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	091b      	lsrs	r3, r3, #4
 8005a6c:	220f      	movs	r2, #15
 8005a6e:	4013      	ands	r3, r2
 8005a70:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <HAL_RCC_ClockConfig+0x194>)
 8005a72:	5cd3      	ldrb	r3, [r2, r3]
 8005a74:	000a      	movs	r2, r1
 8005a76:	40da      	lsrs	r2, r3
 8005a78:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <HAL_RCC_ClockConfig+0x198>)
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005a7c:	2003      	movs	r0, #3
 8005a7e:	f7fe fa01 	bl	8003e84 <HAL_InitTick>
  
  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	0018      	movs	r0, r3
 8005a86:	46bd      	mov	sp, r7
 8005a88:	b004      	add	sp, #16
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	40022000 	.word	0x40022000
 8005a90:	40021000 	.word	0x40021000
 8005a94:	00001388 	.word	0x00001388
 8005a98:	fffff8ff 	.word	0xfffff8ff
 8005a9c:	0800be90 	.word	0x0800be90
 8005aa0:	20000024 	.word	0x20000024

08005aa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa4:	b590      	push	{r4, r7, lr}
 8005aa6:	b08f      	sub	sp, #60	; 0x3c
 8005aa8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005aaa:	2314      	movs	r3, #20
 8005aac:	18fb      	adds	r3, r7, r3
 8005aae:	4a2b      	ldr	r2, [pc, #172]	; (8005b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ab0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005ab2:	c313      	stmia	r3!, {r0, r1, r4}
 8005ab4:	6812      	ldr	r2, [r2, #0]
 8005ab6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005ab8:	1d3b      	adds	r3, r7, #4
 8005aba:	4a29      	ldr	r2, [pc, #164]	; (8005b60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005abc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005abe:	c313      	stmia	r3!, {r0, r1, r4}
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac8:	2300      	movs	r3, #0
 8005aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005acc:	2300      	movs	r3, #0
 8005ace:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005ad8:	4b22      	ldr	r3, [pc, #136]	; (8005b64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae0:	220c      	movs	r2, #12
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d002      	beq.n	8005aee <HAL_RCC_GetSysClockFreq+0x4a>
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d003      	beq.n	8005af4 <HAL_RCC_GetSysClockFreq+0x50>
 8005aec:	e02d      	b.n	8005b4a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005aee:	4b1e      	ldr	r3, [pc, #120]	; (8005b68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005af0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005af2:	e02d      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af6:	0c9b      	lsrs	r3, r3, #18
 8005af8:	220f      	movs	r2, #15
 8005afa:	4013      	ands	r3, r2
 8005afc:	2214      	movs	r2, #20
 8005afe:	18ba      	adds	r2, r7, r2
 8005b00:	5cd3      	ldrb	r3, [r2, r3]
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005b04:	4b17      	ldr	r3, [pc, #92]	; (8005b64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	220f      	movs	r2, #15
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	1d3a      	adds	r2, r7, #4
 8005b0e:	5cd3      	ldrb	r3, [r2, r3]
 8005b10:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b14:	2380      	movs	r3, #128	; 0x80
 8005b16:	025b      	lsls	r3, r3, #9
 8005b18:	4013      	ands	r3, r2
 8005b1a:	d009      	beq.n	8005b30 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b1e:	4812      	ldr	r0, [pc, #72]	; (8005b68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b20:	f7fa fb0e 	bl	8000140 <__udivsi3>
 8005b24:	0003      	movs	r3, r0
 8005b26:	001a      	movs	r2, r3
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	4353      	muls	r3, r2
 8005b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b2e:	e009      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b32:	000a      	movs	r2, r1
 8005b34:	0152      	lsls	r2, r2, #5
 8005b36:	1a52      	subs	r2, r2, r1
 8005b38:	0193      	lsls	r3, r2, #6
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	185b      	adds	r3, r3, r1
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8005b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b48:	e002      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b4a:	4b07      	ldr	r3, [pc, #28]	; (8005b68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b4e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005b52:	0018      	movs	r0, r3
 8005b54:	46bd      	mov	sp, r7
 8005b56:	b00f      	add	sp, #60	; 0x3c
 8005b58:	bd90      	pop	{r4, r7, pc}
 8005b5a:	46c0      	nop			; (mov r8, r8)
 8005b5c:	0800bd90 	.word	0x0800bd90
 8005b60:	0800bda0 	.word	0x0800bda0
 8005b64:	40021000 	.word	0x40021000
 8005b68:	007a1200 	.word	0x007a1200

08005b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b70:	4b02      	ldr	r3, [pc, #8]	; (8005b7c <HAL_RCC_GetHCLKFreq+0x10>)
 8005b72:	681b      	ldr	r3, [r3, #0]
}
 8005b74:	0018      	movs	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	20000024 	.word	0x20000024

08005b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005b84:	f7ff fff2 	bl	8005b6c <HAL_RCC_GetHCLKFreq>
 8005b88:	0001      	movs	r1, r0
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	0a1b      	lsrs	r3, r3, #8
 8005b90:	2207      	movs	r2, #7
 8005b92:	4013      	ands	r3, r2
 8005b94:	4a04      	ldr	r2, [pc, #16]	; (8005ba8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b96:	5cd3      	ldrb	r3, [r2, r3]
 8005b98:	40d9      	lsrs	r1, r3
 8005b9a:	000b      	movs	r3, r1
}    
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	0800bea0 	.word	0x0800bea0

08005bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	025b      	lsls	r3, r3, #9
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	d100      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005bc8:	e08e      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005bca:	2017      	movs	r0, #23
 8005bcc:	183b      	adds	r3, r7, r0
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bd2:	4b5f      	ldr	r3, [pc, #380]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005bd4:	69da      	ldr	r2, [r3, #28]
 8005bd6:	2380      	movs	r3, #128	; 0x80
 8005bd8:	055b      	lsls	r3, r3, #21
 8005bda:	4013      	ands	r3, r2
 8005bdc:	d110      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bde:	4b5c      	ldr	r3, [pc, #368]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005be0:	69da      	ldr	r2, [r3, #28]
 8005be2:	4b5b      	ldr	r3, [pc, #364]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005be4:	2180      	movs	r1, #128	; 0x80
 8005be6:	0549      	lsls	r1, r1, #21
 8005be8:	430a      	orrs	r2, r1
 8005bea:	61da      	str	r2, [r3, #28]
 8005bec:	4b58      	ldr	r3, [pc, #352]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	2380      	movs	r3, #128	; 0x80
 8005bf2:	055b      	lsls	r3, r3, #21
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60bb      	str	r3, [r7, #8]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bfa:	183b      	adds	r3, r7, r0
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c00:	4b54      	ldr	r3, [pc, #336]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d11a      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c0c:	4b51      	ldr	r3, [pc, #324]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	4b50      	ldr	r3, [pc, #320]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005c12:	2180      	movs	r1, #128	; 0x80
 8005c14:	0049      	lsls	r1, r1, #1
 8005c16:	430a      	orrs	r2, r1
 8005c18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c1a:	f7fe f979 	bl	8003f10 <HAL_GetTick>
 8005c1e:	0003      	movs	r3, r0
 8005c20:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c22:	e008      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c24:	f7fe f974 	bl	8003f10 <HAL_GetTick>
 8005c28:	0002      	movs	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b64      	cmp	r3, #100	; 0x64
 8005c30:	d901      	bls.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e087      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c36:	4b47      	ldr	r3, [pc, #284]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	2380      	movs	r3, #128	; 0x80
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	4013      	ands	r3, r2
 8005c40:	d0f0      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c42:	4b43      	ldr	r3, [pc, #268]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c44:	6a1a      	ldr	r2, [r3, #32]
 8005c46:	23c0      	movs	r3, #192	; 0xc0
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d034      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	23c0      	movs	r3, #192	; 0xc0
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d02c      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c64:	4b3a      	ldr	r3, [pc, #232]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	4a3b      	ldr	r2, [pc, #236]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c6e:	4b38      	ldr	r3, [pc, #224]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c70:	6a1a      	ldr	r2, [r3, #32]
 8005c72:	4b37      	ldr	r3, [pc, #220]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c74:	2180      	movs	r1, #128	; 0x80
 8005c76:	0249      	lsls	r1, r1, #9
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c7c:	4b34      	ldr	r3, [pc, #208]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c7e:	6a1a      	ldr	r2, [r3, #32]
 8005c80:	4b33      	ldr	r3, [pc, #204]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c82:	4936      	ldr	r1, [pc, #216]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005c84:	400a      	ands	r2, r1
 8005c86:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c88:	4b31      	ldr	r3, [pc, #196]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	4013      	ands	r3, r2
 8005c94:	d013      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c96:	f7fe f93b 	bl	8003f10 <HAL_GetTick>
 8005c9a:	0003      	movs	r3, r0
 8005c9c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c9e:	e009      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca0:	f7fe f936 	bl	8003f10 <HAL_GetTick>
 8005ca4:	0002      	movs	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	4a2d      	ldr	r2, [pc, #180]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e048      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb4:	4b26      	ldr	r3, [pc, #152]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cbe:	4b24      	ldr	r3, [pc, #144]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	4a25      	ldr	r2, [pc, #148]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	0019      	movs	r1, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	4b20      	ldr	r3, [pc, #128]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005cd2:	2317      	movs	r3, #23
 8005cd4:	18fb      	adds	r3, r7, r3
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d105      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cdc:	4b1c      	ldr	r3, [pc, #112]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005cde:	69da      	ldr	r2, [r3, #28]
 8005ce0:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005ce2:	4920      	ldr	r1, [pc, #128]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ce4:	400a      	ands	r2, r1
 8005ce6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2201      	movs	r2, #1
 8005cee:	4013      	ands	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cf2:	4b17      	ldr	r3, [pc, #92]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf6:	2203      	movs	r2, #3
 8005cf8:	4393      	bics	r3, r2
 8005cfa:	0019      	movs	r1, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	4b13      	ldr	r3, [pc, #76]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005d02:	430a      	orrs	r2, r1
 8005d04:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	d009      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d10:	4b0f      	ldr	r3, [pc, #60]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d14:	2210      	movs	r2, #16
 8005d16:	4393      	bics	r3, r2
 8005d18:	0019      	movs	r1, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	4b0c      	ldr	r3, [pc, #48]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005d20:	430a      	orrs	r2, r1
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	2380      	movs	r3, #128	; 0x80
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d009      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d30:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d34:	2240      	movs	r2, #64	; 0x40
 8005d36:	4393      	bics	r3, r2
 8005d38:	0019      	movs	r1, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005d40:	430a      	orrs	r2, r1
 8005d42:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	0018      	movs	r0, r3
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b006      	add	sp, #24
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	40021000 	.word	0x40021000
 8005d54:	40007000 	.word	0x40007000
 8005d58:	fffffcff 	.word	0xfffffcff
 8005d5c:	fffeffff 	.word	0xfffeffff
 8005d60:	00001388 	.word	0x00001388
 8005d64:	efffffff 	.word	0xefffffff

08005d68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e044      	b.n	8005e04 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d107      	bne.n	8005d92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2274      	movs	r2, #116	; 0x74
 8005d86:	2100      	movs	r1, #0
 8005d88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f7fd fef1 	bl	8003b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2224      	movs	r2, #36	; 0x24
 8005d96:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2101      	movs	r1, #1
 8005da4:	438a      	bics	r2, r1
 8005da6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	0018      	movs	r0, r3
 8005dac:	f000 fc2e 	bl	800660c <UART_SetConfig>
 8005db0:	0003      	movs	r3, r0
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e024      	b.n	8005e04 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f000 fd61 	bl	800688c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	490d      	ldr	r1, [pc, #52]	; (8005e0c <HAL_UART_Init+0xa4>)
 8005dd6:	400a      	ands	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	212a      	movs	r1, #42	; 0x2a
 8005de6:	438a      	bics	r2, r1
 8005de8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2101      	movs	r1, #1
 8005df6:	430a      	orrs	r2, r1
 8005df8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f000 fdf9 	bl	80069f4 <UART_CheckIdleState>
 8005e02:	0003      	movs	r3, r0
}
 8005e04:	0018      	movs	r0, r3
 8005e06:	46bd      	mov	sp, r7
 8005e08:	b002      	add	sp, #8
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	ffffb7ff 	.word	0xffffb7ff

08005e10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08a      	sub	sp, #40	; 0x28
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	1dbb      	adds	r3, r7, #6
 8005e1e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	d000      	beq.n	8005e2a <HAL_UART_Transmit+0x1a>
 8005e28:	e096      	b.n	8005f58 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_UART_Transmit+0x28>
 8005e30:	1dbb      	adds	r3, r7, #6
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e08e      	b.n	8005f5a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	2380      	movs	r3, #128	; 0x80
 8005e42:	015b      	lsls	r3, r3, #5
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d109      	bne.n	8005e5c <HAL_UART_Transmit+0x4c>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d105      	bne.n	8005e5c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2201      	movs	r2, #1
 8005e54:	4013      	ands	r3, r2
 8005e56:	d001      	beq.n	8005e5c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e07e      	b.n	8005f5a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2274      	movs	r2, #116	; 0x74
 8005e60:	5c9b      	ldrb	r3, [r3, r2]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <HAL_UART_Transmit+0x5a>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e077      	b.n	8005f5a <HAL_UART_Transmit+0x14a>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2274      	movs	r2, #116	; 0x74
 8005e6e:	2101      	movs	r1, #1
 8005e70:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2280      	movs	r2, #128	; 0x80
 8005e76:	2100      	movs	r1, #0
 8005e78:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2221      	movs	r2, #33	; 0x21
 8005e7e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e80:	f7fe f846 	bl	8003f10 <HAL_GetTick>
 8005e84:	0003      	movs	r3, r0
 8005e86:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	1dba      	adds	r2, r7, #6
 8005e8c:	2150      	movs	r1, #80	; 0x50
 8005e8e:	8812      	ldrh	r2, [r2, #0]
 8005e90:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	1dba      	adds	r2, r7, #6
 8005e96:	2152      	movs	r1, #82	; 0x52
 8005e98:	8812      	ldrh	r2, [r2, #0]
 8005e9a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	2380      	movs	r3, #128	; 0x80
 8005ea2:	015b      	lsls	r3, r3, #5
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d108      	bne.n	8005eba <HAL_UART_Transmit+0xaa>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d104      	bne.n	8005eba <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	61bb      	str	r3, [r7, #24]
 8005eb8:	e003      	b.n	8005ec2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2274      	movs	r2, #116	; 0x74
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005eca:	e02d      	b.n	8005f28 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	0013      	movs	r3, r2
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2180      	movs	r1, #128	; 0x80
 8005eda:	f000 fdd3 	bl	8006a84 <UART_WaitOnFlagUntilTimeout>
 8005ede:	1e03      	subs	r3, r0, #0
 8005ee0:	d001      	beq.n	8005ee6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e039      	b.n	8005f5a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10b      	bne.n	8005f04 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	881a      	ldrh	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	05d2      	lsls	r2, r2, #23
 8005ef6:	0dd2      	lsrs	r2, r2, #23
 8005ef8:	b292      	uxth	r2, r2
 8005efa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	3302      	adds	r3, #2
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	e008      	b.n	8005f16 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	781a      	ldrb	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	b292      	uxth	r2, r2
 8005f0e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	3301      	adds	r3, #1
 8005f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2252      	movs	r2, #82	; 0x52
 8005f1a:	5a9b      	ldrh	r3, [r3, r2]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b299      	uxth	r1, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2252      	movs	r2, #82	; 0x52
 8005f26:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2252      	movs	r2, #82	; 0x52
 8005f2c:	5a9b      	ldrh	r3, [r3, r2]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1cb      	bne.n	8005ecc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	0013      	movs	r3, r2
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2140      	movs	r1, #64	; 0x40
 8005f42:	f000 fd9f 	bl	8006a84 <UART_WaitOnFlagUntilTimeout>
 8005f46:	1e03      	subs	r3, r0, #0
 8005f48:	d001      	beq.n	8005f4e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e005      	b.n	8005f5a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2220      	movs	r2, #32
 8005f52:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	e000      	b.n	8005f5a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005f58:	2302      	movs	r3, #2
  }
}
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b008      	add	sp, #32
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b088      	sub	sp, #32
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	1dbb      	adds	r3, r7, #6
 8005f6e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d150      	bne.n	800601a <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_UART_Receive_IT+0x24>
 8005f7e:	1dbb      	adds	r3, r7, #6
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e048      	b.n	800601c <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	2380      	movs	r3, #128	; 0x80
 8005f90:	015b      	lsls	r3, r3, #5
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d109      	bne.n	8005faa <HAL_UART_Receive_IT+0x48>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d105      	bne.n	8005faa <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	d001      	beq.n	8005faa <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e038      	b.n	800601c <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2274      	movs	r2, #116	; 0x74
 8005fae:	5c9b      	ldrb	r3, [r3, r2]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_UART_Receive_IT+0x56>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e031      	b.n	800601c <HAL_UART_Receive_IT+0xba>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2274      	movs	r2, #116	; 0x74
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	2380      	movs	r3, #128	; 0x80
 8005fce:	041b      	lsls	r3, r3, #16
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	d019      	beq.n	8006008 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8005fd8:	613b      	str	r3, [r7, #16]
  return(result);
 8005fda:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fdc:	61fb      	str	r3, [r7, #28]
 8005fde:	2301      	movs	r3, #1
 8005fe0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f383 8810 	msr	PRIMASK, r3
}
 8005fe8:	46c0      	nop			; (mov r8, r8)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2180      	movs	r1, #128	; 0x80
 8005ff6:	04c9      	lsls	r1, r1, #19
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	f383 8810 	msr	PRIMASK, r3
}
 8006006:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006008:	1dbb      	adds	r3, r7, #6
 800600a:	881a      	ldrh	r2, [r3, #0]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	0018      	movs	r0, r3
 8006012:	f000 fdfb 	bl	8006c0c <UART_Start_Receive_IT>
 8006016:	0003      	movs	r3, r0
 8006018:	e000      	b.n	800601c <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800601a:	2302      	movs	r3, #2
  }
}
 800601c:	0018      	movs	r0, r3
 800601e:	46bd      	mov	sp, r7
 8006020:	b008      	add	sp, #32
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006024:	b590      	push	{r4, r7, lr}
 8006026:	b0ab      	sub	sp, #172	; 0xac
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	22a4      	movs	r2, #164	; 0xa4
 8006034:	18b9      	adds	r1, r7, r2
 8006036:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	20a0      	movs	r0, #160	; 0xa0
 8006040:	1839      	adds	r1, r7, r0
 8006042:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	219c      	movs	r1, #156	; 0x9c
 800604c:	1879      	adds	r1, r7, r1
 800604e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006050:	0011      	movs	r1, r2
 8006052:	18bb      	adds	r3, r7, r2
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a99      	ldr	r2, [pc, #612]	; (80062bc <HAL_UART_IRQHandler+0x298>)
 8006058:	4013      	ands	r3, r2
 800605a:	2298      	movs	r2, #152	; 0x98
 800605c:	18bc      	adds	r4, r7, r2
 800605e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006060:	18bb      	adds	r3, r7, r2
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d114      	bne.n	8006092 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006068:	187b      	adds	r3, r7, r1
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2220      	movs	r2, #32
 800606e:	4013      	ands	r3, r2
 8006070:	d00f      	beq.n	8006092 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006072:	183b      	adds	r3, r7, r0
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2220      	movs	r2, #32
 8006078:	4013      	ands	r3, r2
 800607a:	d00a      	beq.n	8006092 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006080:	2b00      	cmp	r3, #0
 8006082:	d100      	bne.n	8006086 <HAL_UART_IRQHandler+0x62>
 8006084:	e296      	b.n	80065b4 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	0010      	movs	r0, r2
 800608e:	4798      	blx	r3
      }
      return;
 8006090:	e290      	b.n	80065b4 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006092:	2398      	movs	r3, #152	; 0x98
 8006094:	18fb      	adds	r3, r7, r3
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d100      	bne.n	800609e <HAL_UART_IRQHandler+0x7a>
 800609c:	e114      	b.n	80062c8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800609e:	239c      	movs	r3, #156	; 0x9c
 80060a0:	18fb      	adds	r3, r7, r3
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2201      	movs	r2, #1
 80060a6:	4013      	ands	r3, r2
 80060a8:	d106      	bne.n	80060b8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80060aa:	23a0      	movs	r3, #160	; 0xa0
 80060ac:	18fb      	adds	r3, r7, r3
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a83      	ldr	r2, [pc, #524]	; (80062c0 <HAL_UART_IRQHandler+0x29c>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	d100      	bne.n	80060b8 <HAL_UART_IRQHandler+0x94>
 80060b6:	e107      	b.n	80062c8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060b8:	23a4      	movs	r3, #164	; 0xa4
 80060ba:	18fb      	adds	r3, r7, r3
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2201      	movs	r2, #1
 80060c0:	4013      	ands	r3, r2
 80060c2:	d012      	beq.n	80060ea <HAL_UART_IRQHandler+0xc6>
 80060c4:	23a0      	movs	r3, #160	; 0xa0
 80060c6:	18fb      	adds	r3, r7, r3
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	2380      	movs	r3, #128	; 0x80
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	4013      	ands	r3, r2
 80060d0:	d00b      	beq.n	80060ea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2201      	movs	r2, #1
 80060d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2280      	movs	r2, #128	; 0x80
 80060de:	589b      	ldr	r3, [r3, r2]
 80060e0:	2201      	movs	r2, #1
 80060e2:	431a      	orrs	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2180      	movs	r1, #128	; 0x80
 80060e8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060ea:	23a4      	movs	r3, #164	; 0xa4
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2202      	movs	r2, #2
 80060f2:	4013      	ands	r3, r2
 80060f4:	d011      	beq.n	800611a <HAL_UART_IRQHandler+0xf6>
 80060f6:	239c      	movs	r3, #156	; 0x9c
 80060f8:	18fb      	adds	r3, r7, r3
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2201      	movs	r2, #1
 80060fe:	4013      	ands	r3, r2
 8006100:	d00b      	beq.n	800611a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2202      	movs	r2, #2
 8006108:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2280      	movs	r2, #128	; 0x80
 800610e:	589b      	ldr	r3, [r3, r2]
 8006110:	2204      	movs	r2, #4
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2180      	movs	r1, #128	; 0x80
 8006118:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800611a:	23a4      	movs	r3, #164	; 0xa4
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2204      	movs	r2, #4
 8006122:	4013      	ands	r3, r2
 8006124:	d011      	beq.n	800614a <HAL_UART_IRQHandler+0x126>
 8006126:	239c      	movs	r3, #156	; 0x9c
 8006128:	18fb      	adds	r3, r7, r3
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2201      	movs	r2, #1
 800612e:	4013      	ands	r3, r2
 8006130:	d00b      	beq.n	800614a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2204      	movs	r2, #4
 8006138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2280      	movs	r2, #128	; 0x80
 800613e:	589b      	ldr	r3, [r3, r2]
 8006140:	2202      	movs	r2, #2
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2180      	movs	r1, #128	; 0x80
 8006148:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800614a:	23a4      	movs	r3, #164	; 0xa4
 800614c:	18fb      	adds	r3, r7, r3
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2208      	movs	r2, #8
 8006152:	4013      	ands	r3, r2
 8006154:	d017      	beq.n	8006186 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006156:	23a0      	movs	r3, #160	; 0xa0
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2220      	movs	r2, #32
 800615e:	4013      	ands	r3, r2
 8006160:	d105      	bne.n	800616e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006162:	239c      	movs	r3, #156	; 0x9c
 8006164:	18fb      	adds	r3, r7, r3
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2201      	movs	r2, #1
 800616a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800616c:	d00b      	beq.n	8006186 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2208      	movs	r2, #8
 8006174:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2280      	movs	r2, #128	; 0x80
 800617a:	589b      	ldr	r3, [r3, r2]
 800617c:	2208      	movs	r2, #8
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2180      	movs	r1, #128	; 0x80
 8006184:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006186:	23a4      	movs	r3, #164	; 0xa4
 8006188:	18fb      	adds	r3, r7, r3
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	2380      	movs	r3, #128	; 0x80
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	4013      	ands	r3, r2
 8006192:	d013      	beq.n	80061bc <HAL_UART_IRQHandler+0x198>
 8006194:	23a0      	movs	r3, #160	; 0xa0
 8006196:	18fb      	adds	r3, r7, r3
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	2380      	movs	r3, #128	; 0x80
 800619c:	04db      	lsls	r3, r3, #19
 800619e:	4013      	ands	r3, r2
 80061a0:	d00c      	beq.n	80061bc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2280      	movs	r2, #128	; 0x80
 80061a8:	0112      	lsls	r2, r2, #4
 80061aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2280      	movs	r2, #128	; 0x80
 80061b0:	589b      	ldr	r3, [r3, r2]
 80061b2:	2220      	movs	r2, #32
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2180      	movs	r1, #128	; 0x80
 80061ba:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2280      	movs	r2, #128	; 0x80
 80061c0:	589b      	ldr	r3, [r3, r2]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d100      	bne.n	80061c8 <HAL_UART_IRQHandler+0x1a4>
 80061c6:	e1f7      	b.n	80065b8 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80061c8:	23a4      	movs	r3, #164	; 0xa4
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2220      	movs	r2, #32
 80061d0:	4013      	ands	r3, r2
 80061d2:	d00e      	beq.n	80061f2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061d4:	23a0      	movs	r3, #160	; 0xa0
 80061d6:	18fb      	adds	r3, r7, r3
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2220      	movs	r2, #32
 80061dc:	4013      	ands	r3, r2
 80061de:	d008      	beq.n	80061f2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	0010      	movs	r0, r2
 80061f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2280      	movs	r2, #128	; 0x80
 80061f6:	589b      	ldr	r3, [r3, r2]
 80061f8:	2194      	movs	r1, #148	; 0x94
 80061fa:	187a      	adds	r2, r7, r1
 80061fc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2240      	movs	r2, #64	; 0x40
 8006206:	4013      	ands	r3, r2
 8006208:	2b40      	cmp	r3, #64	; 0x40
 800620a:	d004      	beq.n	8006216 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800620c:	187b      	adds	r3, r7, r1
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2228      	movs	r2, #40	; 0x28
 8006212:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006214:	d047      	beq.n	80062a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	0018      	movs	r0, r3
 800621a:	f000 fd93 	bl	8006d44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	2240      	movs	r2, #64	; 0x40
 8006226:	4013      	ands	r3, r2
 8006228:	2b40      	cmp	r3, #64	; 0x40
 800622a:	d137      	bne.n	800629c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800622c:	f3ef 8310 	mrs	r3, PRIMASK
 8006230:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006234:	2090      	movs	r0, #144	; 0x90
 8006236:	183a      	adds	r2, r7, r0
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	2301      	movs	r3, #1
 800623c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006240:	f383 8810 	msr	PRIMASK, r3
}
 8006244:	46c0      	nop			; (mov r8, r8)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2140      	movs	r1, #64	; 0x40
 8006252:	438a      	bics	r2, r1
 8006254:	609a      	str	r2, [r3, #8]
 8006256:	183b      	adds	r3, r7, r0
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800625c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800625e:	f383 8810 	msr	PRIMASK, r3
}
 8006262:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006268:	2b00      	cmp	r3, #0
 800626a:	d012      	beq.n	8006292 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006270:	4a14      	ldr	r2, [pc, #80]	; (80062c4 <HAL_UART_IRQHandler+0x2a0>)
 8006272:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006278:	0018      	movs	r0, r3
 800627a:	f7fe fc07 	bl	8004a8c <HAL_DMA_Abort_IT>
 800627e:	1e03      	subs	r3, r0, #0
 8006280:	d01a      	beq.n	80062b8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628c:	0018      	movs	r0, r3
 800628e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006290:	e012      	b.n	80062b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	0018      	movs	r0, r3
 8006296:	f000 f9a5 	bl	80065e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629a:	e00d      	b.n	80062b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	0018      	movs	r0, r3
 80062a0:	f000 f9a0 	bl	80065e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a4:	e008      	b.n	80062b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	0018      	movs	r0, r3
 80062aa:	f000 f99b 	bl	80065e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2280      	movs	r2, #128	; 0x80
 80062b2:	2100      	movs	r1, #0
 80062b4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80062b6:	e17f      	b.n	80065b8 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b8:	46c0      	nop			; (mov r8, r8)
    return;
 80062ba:	e17d      	b.n	80065b8 <HAL_UART_IRQHandler+0x594>
 80062bc:	0000080f 	.word	0x0000080f
 80062c0:	04000120 	.word	0x04000120
 80062c4:	08006e09 	.word	0x08006e09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d000      	beq.n	80062d2 <HAL_UART_IRQHandler+0x2ae>
 80062d0:	e131      	b.n	8006536 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062d2:	23a4      	movs	r3, #164	; 0xa4
 80062d4:	18fb      	adds	r3, r7, r3
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2210      	movs	r2, #16
 80062da:	4013      	ands	r3, r2
 80062dc:	d100      	bne.n	80062e0 <HAL_UART_IRQHandler+0x2bc>
 80062de:	e12a      	b.n	8006536 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062e0:	23a0      	movs	r3, #160	; 0xa0
 80062e2:	18fb      	adds	r3, r7, r3
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2210      	movs	r2, #16
 80062e8:	4013      	ands	r3, r2
 80062ea:	d100      	bne.n	80062ee <HAL_UART_IRQHandler+0x2ca>
 80062ec:	e123      	b.n	8006536 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2210      	movs	r2, #16
 80062f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2240      	movs	r2, #64	; 0x40
 80062fe:	4013      	ands	r3, r2
 8006300:	2b40      	cmp	r3, #64	; 0x40
 8006302:	d000      	beq.n	8006306 <HAL_UART_IRQHandler+0x2e2>
 8006304:	e09b      	b.n	800643e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	217e      	movs	r1, #126	; 0x7e
 8006310:	187b      	adds	r3, r7, r1
 8006312:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006314:	187b      	adds	r3, r7, r1
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d100      	bne.n	800631e <HAL_UART_IRQHandler+0x2fa>
 800631c:	e14e      	b.n	80065bc <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2258      	movs	r2, #88	; 0x58
 8006322:	5a9b      	ldrh	r3, [r3, r2]
 8006324:	187a      	adds	r2, r7, r1
 8006326:	8812      	ldrh	r2, [r2, #0]
 8006328:	429a      	cmp	r2, r3
 800632a:	d300      	bcc.n	800632e <HAL_UART_IRQHandler+0x30a>
 800632c:	e146      	b.n	80065bc <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	187a      	adds	r2, r7, r1
 8006332:	215a      	movs	r1, #90	; 0x5a
 8006334:	8812      	ldrh	r2, [r2, #0]
 8006336:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	2b20      	cmp	r3, #32
 8006340:	d06e      	beq.n	8006420 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006342:	f3ef 8310 	mrs	r3, PRIMASK
 8006346:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800634a:	67bb      	str	r3, [r7, #120]	; 0x78
 800634c:	2301      	movs	r3, #1
 800634e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006352:	f383 8810 	msr	PRIMASK, r3
}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	499a      	ldr	r1, [pc, #616]	; (80065cc <HAL_UART_IRQHandler+0x5a8>)
 8006364:	400a      	ands	r2, r1
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800636a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	f383 8810 	msr	PRIMASK, r3
}
 8006372:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006374:	f3ef 8310 	mrs	r3, PRIMASK
 8006378:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800637a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800637c:	677b      	str	r3, [r7, #116]	; 0x74
 800637e:	2301      	movs	r3, #1
 8006380:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006384:	f383 8810 	msr	PRIMASK, r3
}
 8006388:	46c0      	nop			; (mov r8, r8)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2101      	movs	r1, #1
 8006396:	438a      	bics	r2, r1
 8006398:	609a      	str	r2, [r3, #8]
 800639a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800639c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800639e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a0:	f383 8810 	msr	PRIMASK, r3
}
 80063a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063a6:	f3ef 8310 	mrs	r3, PRIMASK
 80063aa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80063ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ae:	673b      	str	r3, [r7, #112]	; 0x70
 80063b0:	2301      	movs	r3, #1
 80063b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b6:	f383 8810 	msr	PRIMASK, r3
}
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2140      	movs	r1, #64	; 0x40
 80063c8:	438a      	bics	r2, r1
 80063ca:	609a      	str	r2, [r3, #8]
 80063cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063ce:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d2:	f383 8810 	msr	PRIMASK, r3
}
 80063d6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063e4:	f3ef 8310 	mrs	r3, PRIMASK
 80063e8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80063ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063ee:	2301      	movs	r3, #1
 80063f0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063f4:	f383 8810 	msr	PRIMASK, r3
}
 80063f8:	46c0      	nop			; (mov r8, r8)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2110      	movs	r1, #16
 8006406:	438a      	bics	r2, r1
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800640e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006410:	f383 8810 	msr	PRIMASK, r3
}
 8006414:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641a:	0018      	movs	r0, r3
 800641c:	f7fe fafe 	bl	8004a1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2258      	movs	r2, #88	; 0x58
 8006424:	5a9a      	ldrh	r2, [r3, r2]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	215a      	movs	r1, #90	; 0x5a
 800642a:	5a5b      	ldrh	r3, [r3, r1]
 800642c:	b29b      	uxth	r3, r3
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	b29a      	uxth	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	0011      	movs	r1, r2
 8006436:	0018      	movs	r0, r3
 8006438:	f000 f8dc 	bl	80065f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800643c:	e0be      	b.n	80065bc <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2258      	movs	r2, #88	; 0x58
 8006442:	5a99      	ldrh	r1, [r3, r2]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	225a      	movs	r2, #90	; 0x5a
 8006448:	5a9b      	ldrh	r3, [r3, r2]
 800644a:	b29a      	uxth	r2, r3
 800644c:	208e      	movs	r0, #142	; 0x8e
 800644e:	183b      	adds	r3, r7, r0
 8006450:	1a8a      	subs	r2, r1, r2
 8006452:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	225a      	movs	r2, #90	; 0x5a
 8006458:	5a9b      	ldrh	r3, [r3, r2]
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d100      	bne.n	8006462 <HAL_UART_IRQHandler+0x43e>
 8006460:	e0ae      	b.n	80065c0 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8006462:	183b      	adds	r3, r7, r0
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d100      	bne.n	800646c <HAL_UART_IRQHandler+0x448>
 800646a:	e0a9      	b.n	80065c0 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800646c:	f3ef 8310 	mrs	r3, PRIMASK
 8006470:	60fb      	str	r3, [r7, #12]
  return(result);
 8006472:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006474:	2488      	movs	r4, #136	; 0x88
 8006476:	193a      	adds	r2, r7, r4
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	2301      	movs	r3, #1
 800647c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f383 8810 	msr	PRIMASK, r3
}
 8006484:	46c0      	nop			; (mov r8, r8)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	494f      	ldr	r1, [pc, #316]	; (80065d0 <HAL_UART_IRQHandler+0x5ac>)
 8006492:	400a      	ands	r2, r1
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	193b      	adds	r3, r7, r4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f383 8810 	msr	PRIMASK, r3
}
 80064a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064a4:	f3ef 8310 	mrs	r3, PRIMASK
 80064a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80064aa:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ac:	2484      	movs	r4, #132	; 0x84
 80064ae:	193a      	adds	r2, r7, r4
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	2301      	movs	r3, #1
 80064b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	f383 8810 	msr	PRIMASK, r3
}
 80064bc:	46c0      	nop			; (mov r8, r8)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2101      	movs	r1, #1
 80064ca:	438a      	bics	r2, r1
 80064cc:	609a      	str	r2, [r3, #8]
 80064ce:	193b      	adds	r3, r7, r4
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	f383 8810 	msr	PRIMASK, r3
}
 80064da:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ee:	f3ef 8310 	mrs	r3, PRIMASK
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f6:	2480      	movs	r4, #128	; 0x80
 80064f8:	193a      	adds	r2, r7, r4
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	2301      	movs	r3, #1
 80064fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	f383 8810 	msr	PRIMASK, r3
}
 8006506:	46c0      	nop			; (mov r8, r8)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2110      	movs	r1, #16
 8006514:	438a      	bics	r2, r1
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	193b      	adds	r3, r7, r4
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800651e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006520:	f383 8810 	msr	PRIMASK, r3
}
 8006524:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006526:	183b      	adds	r3, r7, r0
 8006528:	881a      	ldrh	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	0011      	movs	r1, r2
 800652e:	0018      	movs	r0, r3
 8006530:	f000 f860 	bl	80065f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006534:	e044      	b.n	80065c0 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006536:	23a4      	movs	r3, #164	; 0xa4
 8006538:	18fb      	adds	r3, r7, r3
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	035b      	lsls	r3, r3, #13
 8006540:	4013      	ands	r3, r2
 8006542:	d010      	beq.n	8006566 <HAL_UART_IRQHandler+0x542>
 8006544:	239c      	movs	r3, #156	; 0x9c
 8006546:	18fb      	adds	r3, r7, r3
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	2380      	movs	r3, #128	; 0x80
 800654c:	03db      	lsls	r3, r3, #15
 800654e:	4013      	ands	r3, r2
 8006550:	d009      	beq.n	8006566 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2280      	movs	r2, #128	; 0x80
 8006558:	0352      	lsls	r2, r2, #13
 800655a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	0018      	movs	r0, r3
 8006560:	f000 fdfc 	bl	800715c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006564:	e02f      	b.n	80065c6 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006566:	23a4      	movs	r3, #164	; 0xa4
 8006568:	18fb      	adds	r3, r7, r3
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2280      	movs	r2, #128	; 0x80
 800656e:	4013      	ands	r3, r2
 8006570:	d00f      	beq.n	8006592 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006572:	23a0      	movs	r3, #160	; 0xa0
 8006574:	18fb      	adds	r3, r7, r3
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2280      	movs	r2, #128	; 0x80
 800657a:	4013      	ands	r3, r2
 800657c:	d009      	beq.n	8006592 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006582:	2b00      	cmp	r3, #0
 8006584:	d01e      	beq.n	80065c4 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	0010      	movs	r0, r2
 800658e:	4798      	blx	r3
    }
    return;
 8006590:	e018      	b.n	80065c4 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006592:	23a4      	movs	r3, #164	; 0xa4
 8006594:	18fb      	adds	r3, r7, r3
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2240      	movs	r2, #64	; 0x40
 800659a:	4013      	ands	r3, r2
 800659c:	d013      	beq.n	80065c6 <HAL_UART_IRQHandler+0x5a2>
 800659e:	23a0      	movs	r3, #160	; 0xa0
 80065a0:	18fb      	adds	r3, r7, r3
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2240      	movs	r2, #64	; 0x40
 80065a6:	4013      	ands	r3, r2
 80065a8:	d00d      	beq.n	80065c6 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	0018      	movs	r0, r3
 80065ae:	f000 fc42 	bl	8006e36 <UART_EndTransmit_IT>
    return;
 80065b2:	e008      	b.n	80065c6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80065b4:	46c0      	nop			; (mov r8, r8)
 80065b6:	e006      	b.n	80065c6 <HAL_UART_IRQHandler+0x5a2>
    return;
 80065b8:	46c0      	nop			; (mov r8, r8)
 80065ba:	e004      	b.n	80065c6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80065bc:	46c0      	nop			; (mov r8, r8)
 80065be:	e002      	b.n	80065c6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80065c0:	46c0      	nop			; (mov r8, r8)
 80065c2:	e000      	b.n	80065c6 <HAL_UART_IRQHandler+0x5a2>
    return;
 80065c4:	46c0      	nop			; (mov r8, r8)
  }

}
 80065c6:	46bd      	mov	sp, r7
 80065c8:	b02b      	add	sp, #172	; 0xac
 80065ca:	bd90      	pop	{r4, r7, pc}
 80065cc:	fffffeff 	.word	0xfffffeff
 80065d0:	fffffedf 	.word	0xfffffedf

080065d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80065dc:	46c0      	nop			; (mov r8, r8)
 80065de:	46bd      	mov	sp, r7
 80065e0:	b002      	add	sp, #8
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065ec:	46c0      	nop			; (mov r8, r8)
 80065ee:	46bd      	mov	sp, r7
 80065f0:	b002      	add	sp, #8
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	000a      	movs	r2, r1
 80065fe:	1cbb      	adds	r3, r7, #2
 8006600:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006602:	46c0      	nop			; (mov r8, r8)
 8006604:	46bd      	mov	sp, r7
 8006606:	b002      	add	sp, #8
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006614:	231e      	movs	r3, #30
 8006616:	18fb      	adds	r3, r7, r3
 8006618:	2200      	movs	r2, #0
 800661a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	431a      	orrs	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	431a      	orrs	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	4313      	orrs	r3, r2
 8006632:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a8d      	ldr	r2, [pc, #564]	; (8006870 <UART_SetConfig+0x264>)
 800663c:	4013      	ands	r3, r2
 800663e:	0019      	movs	r1, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	430a      	orrs	r2, r1
 8006648:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	4a88      	ldr	r2, [pc, #544]	; (8006874 <UART_SetConfig+0x268>)
 8006652:	4013      	ands	r3, r2
 8006654:	0019      	movs	r1, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	4a7f      	ldr	r2, [pc, #508]	; (8006878 <UART_SetConfig+0x26c>)
 800667a:	4013      	ands	r3, r2
 800667c:	0019      	movs	r1, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	430a      	orrs	r2, r1
 8006686:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a7b      	ldr	r2, [pc, #492]	; (800687c <UART_SetConfig+0x270>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d127      	bne.n	80066e2 <UART_SetConfig+0xd6>
 8006692:	4b7b      	ldr	r3, [pc, #492]	; (8006880 <UART_SetConfig+0x274>)
 8006694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006696:	2203      	movs	r2, #3
 8006698:	4013      	ands	r3, r2
 800669a:	2b03      	cmp	r3, #3
 800669c:	d00d      	beq.n	80066ba <UART_SetConfig+0xae>
 800669e:	d81b      	bhi.n	80066d8 <UART_SetConfig+0xcc>
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d014      	beq.n	80066ce <UART_SetConfig+0xc2>
 80066a4:	d818      	bhi.n	80066d8 <UART_SetConfig+0xcc>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <UART_SetConfig+0xa4>
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d00a      	beq.n	80066c4 <UART_SetConfig+0xb8>
 80066ae:	e013      	b.n	80066d8 <UART_SetConfig+0xcc>
 80066b0:	231f      	movs	r3, #31
 80066b2:	18fb      	adds	r3, r7, r3
 80066b4:	2200      	movs	r2, #0
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	e021      	b.n	80066fe <UART_SetConfig+0xf2>
 80066ba:	231f      	movs	r3, #31
 80066bc:	18fb      	adds	r3, r7, r3
 80066be:	2202      	movs	r2, #2
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	e01c      	b.n	80066fe <UART_SetConfig+0xf2>
 80066c4:	231f      	movs	r3, #31
 80066c6:	18fb      	adds	r3, r7, r3
 80066c8:	2204      	movs	r2, #4
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	e017      	b.n	80066fe <UART_SetConfig+0xf2>
 80066ce:	231f      	movs	r3, #31
 80066d0:	18fb      	adds	r3, r7, r3
 80066d2:	2208      	movs	r2, #8
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	e012      	b.n	80066fe <UART_SetConfig+0xf2>
 80066d8:	231f      	movs	r3, #31
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	2210      	movs	r2, #16
 80066de:	701a      	strb	r2, [r3, #0]
 80066e0:	e00d      	b.n	80066fe <UART_SetConfig+0xf2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a67      	ldr	r2, [pc, #412]	; (8006884 <UART_SetConfig+0x278>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d104      	bne.n	80066f6 <UART_SetConfig+0xea>
 80066ec:	231f      	movs	r3, #31
 80066ee:	18fb      	adds	r3, r7, r3
 80066f0:	2200      	movs	r2, #0
 80066f2:	701a      	strb	r2, [r3, #0]
 80066f4:	e003      	b.n	80066fe <UART_SetConfig+0xf2>
 80066f6:	231f      	movs	r3, #31
 80066f8:	18fb      	adds	r3, r7, r3
 80066fa:	2210      	movs	r2, #16
 80066fc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69da      	ldr	r2, [r3, #28]
 8006702:	2380      	movs	r3, #128	; 0x80
 8006704:	021b      	lsls	r3, r3, #8
 8006706:	429a      	cmp	r2, r3
 8006708:	d15d      	bne.n	80067c6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800670a:	231f      	movs	r3, #31
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	2b08      	cmp	r3, #8
 8006712:	d015      	beq.n	8006740 <UART_SetConfig+0x134>
 8006714:	dc18      	bgt.n	8006748 <UART_SetConfig+0x13c>
 8006716:	2b04      	cmp	r3, #4
 8006718:	d00d      	beq.n	8006736 <UART_SetConfig+0x12a>
 800671a:	dc15      	bgt.n	8006748 <UART_SetConfig+0x13c>
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <UART_SetConfig+0x11a>
 8006720:	2b02      	cmp	r3, #2
 8006722:	d005      	beq.n	8006730 <UART_SetConfig+0x124>
 8006724:	e010      	b.n	8006748 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006726:	f7ff fa2b 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 800672a:	0003      	movs	r3, r0
 800672c:	61bb      	str	r3, [r7, #24]
        break;
 800672e:	e012      	b.n	8006756 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006730:	4b55      	ldr	r3, [pc, #340]	; (8006888 <UART_SetConfig+0x27c>)
 8006732:	61bb      	str	r3, [r7, #24]
        break;
 8006734:	e00f      	b.n	8006756 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006736:	f7ff f9b5 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 800673a:	0003      	movs	r3, r0
 800673c:	61bb      	str	r3, [r7, #24]
        break;
 800673e:	e00a      	b.n	8006756 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006740:	2380      	movs	r3, #128	; 0x80
 8006742:	021b      	lsls	r3, r3, #8
 8006744:	61bb      	str	r3, [r7, #24]
        break;
 8006746:	e006      	b.n	8006756 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006748:	2300      	movs	r3, #0
 800674a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800674c:	231e      	movs	r3, #30
 800674e:	18fb      	adds	r3, r7, r3
 8006750:	2201      	movs	r2, #1
 8006752:	701a      	strb	r2, [r3, #0]
        break;
 8006754:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d100      	bne.n	800675e <UART_SetConfig+0x152>
 800675c:	e07b      	b.n	8006856 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	005a      	lsls	r2, r3, #1
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	085b      	lsrs	r3, r3, #1
 8006768:	18d2      	adds	r2, r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	0019      	movs	r1, r3
 8006770:	0010      	movs	r0, r2
 8006772:	f7f9 fce5 	bl	8000140 <__udivsi3>
 8006776:	0003      	movs	r3, r0
 8006778:	b29b      	uxth	r3, r3
 800677a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	2b0f      	cmp	r3, #15
 8006780:	d91c      	bls.n	80067bc <UART_SetConfig+0x1b0>
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	2380      	movs	r3, #128	; 0x80
 8006786:	025b      	lsls	r3, r3, #9
 8006788:	429a      	cmp	r2, r3
 800678a:	d217      	bcs.n	80067bc <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	b29a      	uxth	r2, r3
 8006790:	200e      	movs	r0, #14
 8006792:	183b      	adds	r3, r7, r0
 8006794:	210f      	movs	r1, #15
 8006796:	438a      	bics	r2, r1
 8006798:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	085b      	lsrs	r3, r3, #1
 800679e:	b29b      	uxth	r3, r3
 80067a0:	2207      	movs	r2, #7
 80067a2:	4013      	ands	r3, r2
 80067a4:	b299      	uxth	r1, r3
 80067a6:	183b      	adds	r3, r7, r0
 80067a8:	183a      	adds	r2, r7, r0
 80067aa:	8812      	ldrh	r2, [r2, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	183a      	adds	r2, r7, r0
 80067b6:	8812      	ldrh	r2, [r2, #0]
 80067b8:	60da      	str	r2, [r3, #12]
 80067ba:	e04c      	b.n	8006856 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80067bc:	231e      	movs	r3, #30
 80067be:	18fb      	adds	r3, r7, r3
 80067c0:	2201      	movs	r2, #1
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	e047      	b.n	8006856 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067c6:	231f      	movs	r3, #31
 80067c8:	18fb      	adds	r3, r7, r3
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d015      	beq.n	80067fc <UART_SetConfig+0x1f0>
 80067d0:	dc18      	bgt.n	8006804 <UART_SetConfig+0x1f8>
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d00d      	beq.n	80067f2 <UART_SetConfig+0x1e6>
 80067d6:	dc15      	bgt.n	8006804 <UART_SetConfig+0x1f8>
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <UART_SetConfig+0x1d6>
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d005      	beq.n	80067ec <UART_SetConfig+0x1e0>
 80067e0:	e010      	b.n	8006804 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067e2:	f7ff f9cd 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 80067e6:	0003      	movs	r3, r0
 80067e8:	61bb      	str	r3, [r7, #24]
        break;
 80067ea:	e012      	b.n	8006812 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067ec:	4b26      	ldr	r3, [pc, #152]	; (8006888 <UART_SetConfig+0x27c>)
 80067ee:	61bb      	str	r3, [r7, #24]
        break;
 80067f0:	e00f      	b.n	8006812 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067f2:	f7ff f957 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 80067f6:	0003      	movs	r3, r0
 80067f8:	61bb      	str	r3, [r7, #24]
        break;
 80067fa:	e00a      	b.n	8006812 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067fc:	2380      	movs	r3, #128	; 0x80
 80067fe:	021b      	lsls	r3, r3, #8
 8006800:	61bb      	str	r3, [r7, #24]
        break;
 8006802:	e006      	b.n	8006812 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006808:	231e      	movs	r3, #30
 800680a:	18fb      	adds	r3, r7, r3
 800680c:	2201      	movs	r2, #1
 800680e:	701a      	strb	r2, [r3, #0]
        break;
 8006810:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01e      	beq.n	8006856 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	085a      	lsrs	r2, r3, #1
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	18d2      	adds	r2, r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	0019      	movs	r1, r3
 8006828:	0010      	movs	r0, r2
 800682a:	f7f9 fc89 	bl	8000140 <__udivsi3>
 800682e:	0003      	movs	r3, r0
 8006830:	b29b      	uxth	r3, r3
 8006832:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	2b0f      	cmp	r3, #15
 8006838:	d909      	bls.n	800684e <UART_SetConfig+0x242>
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	2380      	movs	r3, #128	; 0x80
 800683e:	025b      	lsls	r3, r3, #9
 8006840:	429a      	cmp	r2, r3
 8006842:	d204      	bcs.n	800684e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	60da      	str	r2, [r3, #12]
 800684c:	e003      	b.n	8006856 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800684e:	231e      	movs	r3, #30
 8006850:	18fb      	adds	r3, r7, r3
 8006852:	2201      	movs	r2, #1
 8006854:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006862:	231e      	movs	r3, #30
 8006864:	18fb      	adds	r3, r7, r3
 8006866:	781b      	ldrb	r3, [r3, #0]
}
 8006868:	0018      	movs	r0, r3
 800686a:	46bd      	mov	sp, r7
 800686c:	b008      	add	sp, #32
 800686e:	bd80      	pop	{r7, pc}
 8006870:	ffff69f3 	.word	0xffff69f3
 8006874:	ffffcfff 	.word	0xffffcfff
 8006878:	fffff4ff 	.word	0xfffff4ff
 800687c:	40013800 	.word	0x40013800
 8006880:	40021000 	.word	0x40021000
 8006884:	40004400 	.word	0x40004400
 8006888:	007a1200 	.word	0x007a1200

0800688c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	2201      	movs	r2, #1
 800689a:	4013      	ands	r3, r2
 800689c:	d00b      	beq.n	80068b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	4a4a      	ldr	r2, [pc, #296]	; (80069d0 <UART_AdvFeatureConfig+0x144>)
 80068a6:	4013      	ands	r3, r2
 80068a8:	0019      	movs	r1, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	2202      	movs	r2, #2
 80068bc:	4013      	ands	r3, r2
 80068be:	d00b      	beq.n	80068d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	4a43      	ldr	r2, [pc, #268]	; (80069d4 <UART_AdvFeatureConfig+0x148>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	0019      	movs	r1, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	2204      	movs	r2, #4
 80068de:	4013      	ands	r3, r2
 80068e0:	d00b      	beq.n	80068fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	4a3b      	ldr	r2, [pc, #236]	; (80069d8 <UART_AdvFeatureConfig+0x14c>)
 80068ea:	4013      	ands	r3, r2
 80068ec:	0019      	movs	r1, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	2208      	movs	r2, #8
 8006900:	4013      	ands	r3, r2
 8006902:	d00b      	beq.n	800691c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	4a34      	ldr	r2, [pc, #208]	; (80069dc <UART_AdvFeatureConfig+0x150>)
 800690c:	4013      	ands	r3, r2
 800690e:	0019      	movs	r1, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	2210      	movs	r2, #16
 8006922:	4013      	ands	r3, r2
 8006924:	d00b      	beq.n	800693e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	4a2c      	ldr	r2, [pc, #176]	; (80069e0 <UART_AdvFeatureConfig+0x154>)
 800692e:	4013      	ands	r3, r2
 8006930:	0019      	movs	r1, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006942:	2220      	movs	r2, #32
 8006944:	4013      	ands	r3, r2
 8006946:	d00b      	beq.n	8006960 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	4a25      	ldr	r2, [pc, #148]	; (80069e4 <UART_AdvFeatureConfig+0x158>)
 8006950:	4013      	ands	r3, r2
 8006952:	0019      	movs	r1, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	2240      	movs	r2, #64	; 0x40
 8006966:	4013      	ands	r3, r2
 8006968:	d01d      	beq.n	80069a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	4a1d      	ldr	r2, [pc, #116]	; (80069e8 <UART_AdvFeatureConfig+0x15c>)
 8006972:	4013      	ands	r3, r2
 8006974:	0019      	movs	r1, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006986:	2380      	movs	r3, #128	; 0x80
 8006988:	035b      	lsls	r3, r3, #13
 800698a:	429a      	cmp	r2, r3
 800698c:	d10b      	bne.n	80069a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	4a15      	ldr	r2, [pc, #84]	; (80069ec <UART_AdvFeatureConfig+0x160>)
 8006996:	4013      	ands	r3, r2
 8006998:	0019      	movs	r1, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	2280      	movs	r2, #128	; 0x80
 80069ac:	4013      	ands	r3, r2
 80069ae:	d00b      	beq.n	80069c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	4a0e      	ldr	r2, [pc, #56]	; (80069f0 <UART_AdvFeatureConfig+0x164>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	0019      	movs	r1, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	605a      	str	r2, [r3, #4]
  }
}
 80069c8:	46c0      	nop			; (mov r8, r8)
 80069ca:	46bd      	mov	sp, r7
 80069cc:	b002      	add	sp, #8
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	fffdffff 	.word	0xfffdffff
 80069d4:	fffeffff 	.word	0xfffeffff
 80069d8:	fffbffff 	.word	0xfffbffff
 80069dc:	ffff7fff 	.word	0xffff7fff
 80069e0:	ffffefff 	.word	0xffffefff
 80069e4:	ffffdfff 	.word	0xffffdfff
 80069e8:	ffefffff 	.word	0xffefffff
 80069ec:	ff9fffff 	.word	0xff9fffff
 80069f0:	fff7ffff 	.word	0xfff7ffff

080069f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2280      	movs	r2, #128	; 0x80
 8006a00:	2100      	movs	r1, #0
 8006a02:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a04:	f7fd fa84 	bl	8003f10 <HAL_GetTick>
 8006a08:	0003      	movs	r3, r0
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2208      	movs	r2, #8
 8006a14:	4013      	ands	r3, r2
 8006a16:	2b08      	cmp	r3, #8
 8006a18:	d10c      	bne.n	8006a34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2280      	movs	r2, #128	; 0x80
 8006a1e:	0391      	lsls	r1, r2, #14
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	4a17      	ldr	r2, [pc, #92]	; (8006a80 <UART_CheckIdleState+0x8c>)
 8006a24:	9200      	str	r2, [sp, #0]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f000 f82c 	bl	8006a84 <UART_WaitOnFlagUntilTimeout>
 8006a2c:	1e03      	subs	r3, r0, #0
 8006a2e:	d001      	beq.n	8006a34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e021      	b.n	8006a78 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d10c      	bne.n	8006a5c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2280      	movs	r2, #128	; 0x80
 8006a46:	03d1      	lsls	r1, r2, #15
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	4a0d      	ldr	r2, [pc, #52]	; (8006a80 <UART_CheckIdleState+0x8c>)
 8006a4c:	9200      	str	r2, [sp, #0]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f000 f818 	bl	8006a84 <UART_WaitOnFlagUntilTimeout>
 8006a54:	1e03      	subs	r3, r0, #0
 8006a56:	d001      	beq.n	8006a5c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e00d      	b.n	8006a78 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2220      	movs	r2, #32
 8006a66:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2274      	movs	r2, #116	; 0x74
 8006a72:	2100      	movs	r1, #0
 8006a74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	0018      	movs	r0, r3
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	b004      	add	sp, #16
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	01ffffff 	.word	0x01ffffff

08006a84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b094      	sub	sp, #80	; 0x50
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	603b      	str	r3, [r7, #0]
 8006a90:	1dfb      	adds	r3, r7, #7
 8006a92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a94:	e0a3      	b.n	8006bde <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a98:	3301      	adds	r3, #1
 8006a9a:	d100      	bne.n	8006a9e <UART_WaitOnFlagUntilTimeout+0x1a>
 8006a9c:	e09f      	b.n	8006bde <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a9e:	f7fd fa37 	bl	8003f10 <HAL_GetTick>
 8006aa2:	0002      	movs	r2, r0
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d302      	bcc.n	8006ab4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d13d      	bne.n	8006b30 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006abc:	647b      	str	r3, [r7, #68]	; 0x44
 8006abe:	2301      	movs	r3, #1
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac4:	f383 8810 	msr	PRIMASK, r3
}
 8006ac8:	46c0      	nop			; (mov r8, r8)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	494c      	ldr	r1, [pc, #304]	; (8006c08 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006ad6:	400a      	ands	r2, r1
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006adc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	f383 8810 	msr	PRIMASK, r3
}
 8006ae4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8006aea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aee:	643b      	str	r3, [r7, #64]	; 0x40
 8006af0:	2301      	movs	r3, #1
 8006af2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af6:	f383 8810 	msr	PRIMASK, r3
}
 8006afa:	46c0      	nop			; (mov r8, r8)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2101      	movs	r1, #1
 8006b08:	438a      	bics	r2, r1
 8006b0a:	609a      	str	r2, [r3, #8]
 8006b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b12:	f383 8810 	msr	PRIMASK, r3
}
 8006b16:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2220      	movs	r2, #32
 8006b22:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2274      	movs	r2, #116	; 0x74
 8006b28:	2100      	movs	r1, #0
 8006b2a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e067      	b.n	8006c00 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2204      	movs	r2, #4
 8006b38:	4013      	ands	r3, r2
 8006b3a:	d050      	beq.n	8006bde <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69da      	ldr	r2, [r3, #28]
 8006b42:	2380      	movs	r3, #128	; 0x80
 8006b44:	011b      	lsls	r3, r3, #4
 8006b46:	401a      	ands	r2, r3
 8006b48:	2380      	movs	r3, #128	; 0x80
 8006b4a:	011b      	lsls	r3, r3, #4
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d146      	bne.n	8006bde <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2280      	movs	r2, #128	; 0x80
 8006b56:	0112      	lsls	r2, r2, #4
 8006b58:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b5e:	613b      	str	r3, [r7, #16]
  return(result);
 8006b60:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b64:	2301      	movs	r3, #1
 8006b66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f383 8810 	msr	PRIMASK, r3
}
 8006b6e:	46c0      	nop			; (mov r8, r8)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4923      	ldr	r1, [pc, #140]	; (8006c08 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006b7c:	400a      	ands	r2, r1
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	f383 8810 	msr	PRIMASK, r3
}
 8006b8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b90:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b92:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b96:	2301      	movs	r3, #1
 8006b98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	f383 8810 	msr	PRIMASK, r3
}
 8006ba0:	46c0      	nop			; (mov r8, r8)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2101      	movs	r1, #1
 8006bae:	438a      	bics	r2, r1
 8006bb0:	609a      	str	r2, [r3, #8]
 8006bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	f383 8810 	msr	PRIMASK, r3
}
 8006bbc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2280      	movs	r2, #128	; 0x80
 8006bce:	2120      	movs	r1, #32
 8006bd0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2274      	movs	r2, #116	; 0x74
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e010      	b.n	8006c00 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	4013      	ands	r3, r2
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	425a      	negs	r2, r3
 8006bee:	4153      	adcs	r3, r2
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	001a      	movs	r2, r3
 8006bf4:	1dfb      	adds	r3, r7, #7
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d100      	bne.n	8006bfe <UART_WaitOnFlagUntilTimeout+0x17a>
 8006bfc:	e74b      	b.n	8006a96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	0018      	movs	r0, r3
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b014      	add	sp, #80	; 0x50
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	fffffe5f 	.word	0xfffffe5f

08006c0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08c      	sub	sp, #48	; 0x30
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	1dbb      	adds	r3, r7, #6
 8006c18:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	1dba      	adds	r2, r7, #6
 8006c24:	2158      	movs	r1, #88	; 0x58
 8006c26:	8812      	ldrh	r2, [r2, #0]
 8006c28:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	1dba      	adds	r2, r7, #6
 8006c2e:	215a      	movs	r1, #90	; 0x5a
 8006c30:	8812      	ldrh	r2, [r2, #0]
 8006c32:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	2380      	movs	r3, #128	; 0x80
 8006c40:	015b      	lsls	r3, r3, #5
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d10d      	bne.n	8006c62 <UART_Start_Receive_IT+0x56>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d104      	bne.n	8006c58 <UART_Start_Receive_IT+0x4c>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	225c      	movs	r2, #92	; 0x5c
 8006c52:	4939      	ldr	r1, [pc, #228]	; (8006d38 <UART_Start_Receive_IT+0x12c>)
 8006c54:	5299      	strh	r1, [r3, r2]
 8006c56:	e01a      	b.n	8006c8e <UART_Start_Receive_IT+0x82>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	225c      	movs	r2, #92	; 0x5c
 8006c5c:	21ff      	movs	r1, #255	; 0xff
 8006c5e:	5299      	strh	r1, [r3, r2]
 8006c60:	e015      	b.n	8006c8e <UART_Start_Receive_IT+0x82>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10d      	bne.n	8006c86 <UART_Start_Receive_IT+0x7a>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d104      	bne.n	8006c7c <UART_Start_Receive_IT+0x70>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	225c      	movs	r2, #92	; 0x5c
 8006c76:	21ff      	movs	r1, #255	; 0xff
 8006c78:	5299      	strh	r1, [r3, r2]
 8006c7a:	e008      	b.n	8006c8e <UART_Start_Receive_IT+0x82>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	225c      	movs	r2, #92	; 0x5c
 8006c80:	217f      	movs	r1, #127	; 0x7f
 8006c82:	5299      	strh	r1, [r3, r2]
 8006c84:	e003      	b.n	8006c8e <UART_Start_Receive_IT+0x82>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	225c      	movs	r2, #92	; 0x5c
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2280      	movs	r2, #128	; 0x80
 8006c92:	2100      	movs	r1, #0
 8006c94:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2222      	movs	r2, #34	; 0x22
 8006c9a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ca0:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ca2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	f383 8810 	msr	PRIMASK, r3
}
 8006cb0:	46c0      	nop			; (mov r8, r8)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	609a      	str	r2, [r3, #8]
 8006cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	f383 8810 	msr	PRIMASK, r3
}
 8006ccc:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	2380      	movs	r3, #128	; 0x80
 8006cd4:	015b      	lsls	r3, r3, #5
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d107      	bne.n	8006cea <UART_Start_Receive_IT+0xde>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d103      	bne.n	8006cea <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4a15      	ldr	r2, [pc, #84]	; (8006d3c <UART_Start_Receive_IT+0x130>)
 8006ce6:	665a      	str	r2, [r3, #100]	; 0x64
 8006ce8:	e002      	b.n	8006cf0 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4a14      	ldr	r2, [pc, #80]	; (8006d40 <UART_Start_Receive_IT+0x134>)
 8006cee:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2274      	movs	r2, #116	; 0x74
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8006cfc:	613b      	str	r3, [r7, #16]
  return(result);
 8006cfe:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d02:	2301      	movs	r3, #1
 8006d04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f383 8810 	msr	PRIMASK, r3
}
 8006d0c:	46c0      	nop			; (mov r8, r8)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2190      	movs	r1, #144	; 0x90
 8006d1a:	0049      	lsls	r1, r1, #1
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	f383 8810 	msr	PRIMASK, r3
}
 8006d2a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	0018      	movs	r0, r3
 8006d30:	46bd      	mov	sp, r7
 8006d32:	b00c      	add	sp, #48	; 0x30
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	46c0      	nop			; (mov r8, r8)
 8006d38:	000001ff 	.word	0x000001ff
 8006d3c:	08006ff5 	.word	0x08006ff5
 8006d40:	08006e8d 	.word	0x08006e8d

08006d44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08e      	sub	sp, #56	; 0x38
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8006d50:	617b      	str	r3, [r7, #20]
  return(result);
 8006d52:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d54:	637b      	str	r3, [r7, #52]	; 0x34
 8006d56:	2301      	movs	r3, #1
 8006d58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	f383 8810 	msr	PRIMASK, r3
}
 8006d60:	46c0      	nop			; (mov r8, r8)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4925      	ldr	r1, [pc, #148]	; (8006e04 <UART_EndRxTransfer+0xc0>)
 8006d6e:	400a      	ands	r2, r1
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	f383 8810 	msr	PRIMASK, r3
}
 8006d7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d82:	623b      	str	r3, [r7, #32]
  return(result);
 8006d84:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d86:	633b      	str	r3, [r7, #48]	; 0x30
 8006d88:	2301      	movs	r3, #1
 8006d8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	f383 8810 	msr	PRIMASK, r3
}
 8006d92:	46c0      	nop			; (mov r8, r8)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689a      	ldr	r2, [r3, #8]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2101      	movs	r1, #1
 8006da0:	438a      	bics	r2, r1
 8006da2:	609a      	str	r2, [r3, #8]
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	f383 8810 	msr	PRIMASK, r3
}
 8006dae:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d118      	bne.n	8006dea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006db8:	f3ef 8310 	mrs	r3, PRIMASK
 8006dbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f383 8810 	msr	PRIMASK, r3
}
 8006dcc:	46c0      	nop			; (mov r8, r8)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2110      	movs	r1, #16
 8006dda:	438a      	bics	r2, r1
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f383 8810 	msr	PRIMASK, r3
}
 8006de8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2220      	movs	r2, #32
 8006dee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006dfc:	46c0      	nop			; (mov r8, r8)
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	b00e      	add	sp, #56	; 0x38
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	fffffedf 	.word	0xfffffedf

08006e08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	225a      	movs	r2, #90	; 0x5a
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2252      	movs	r2, #82	; 0x52
 8006e22:	2100      	movs	r1, #0
 8006e24:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f7ff fbdb 	bl	80065e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	46bd      	mov	sp, r7
 8006e32:	b004      	add	sp, #16
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b086      	sub	sp, #24
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e42:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e44:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	2301      	movs	r3, #1
 8006e4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f383 8810 	msr	PRIMASK, r3
}
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2140      	movs	r1, #64	; 0x40
 8006e60:	438a      	bics	r2, r1
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f383 8810 	msr	PRIMASK, r3
}
 8006e6e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2220      	movs	r2, #32
 8006e74:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f7ff fba8 	bl	80065d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e84:	46c0      	nop			; (mov r8, r8)
 8006e86:	46bd      	mov	sp, r7
 8006e88:	b006      	add	sp, #24
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b090      	sub	sp, #64	; 0x40
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e94:	203e      	movs	r0, #62	; 0x3e
 8006e96:	183b      	adds	r3, r7, r0
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	215c      	movs	r1, #92	; 0x5c
 8006e9c:	5a52      	ldrh	r2, [r2, r1]
 8006e9e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ea4:	2b22      	cmp	r3, #34	; 0x22
 8006ea6:	d000      	beq.n	8006eaa <UART_RxISR_8BIT+0x1e>
 8006ea8:	e095      	b.n	8006fd6 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	213c      	movs	r1, #60	; 0x3c
 8006eb0:	187b      	adds	r3, r7, r1
 8006eb2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006eb4:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006eb6:	187b      	adds	r3, r7, r1
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	183b      	adds	r3, r7, r0
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b2d9      	uxtb	r1, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec6:	400a      	ands	r2, r1
 8006ec8:	b2d2      	uxtb	r2, r2
 8006eca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	225a      	movs	r2, #90	; 0x5a
 8006eda:	5a9b      	ldrh	r3, [r3, r2]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b299      	uxth	r1, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	225a      	movs	r2, #90	; 0x5a
 8006ee6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	225a      	movs	r2, #90	; 0x5a
 8006eec:	5a9b      	ldrh	r3, [r3, r2]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d178      	bne.n	8006fe6 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ef8:	61bb      	str	r3, [r7, #24]
  return(result);
 8006efa:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006efc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006efe:	2301      	movs	r3, #1
 8006f00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	f383 8810 	msr	PRIMASK, r3
}
 8006f08:	46c0      	nop			; (mov r8, r8)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4936      	ldr	r1, [pc, #216]	; (8006ff0 <UART_RxISR_8BIT+0x164>)
 8006f16:	400a      	ands	r2, r1
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	f383 8810 	msr	PRIMASK, r3
}
 8006f24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f26:	f3ef 8310 	mrs	r3, PRIMASK
 8006f2a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f30:	2301      	movs	r3, #1
 8006f32:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	f383 8810 	msr	PRIMASK, r3
}
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2101      	movs	r1, #1
 8006f48:	438a      	bics	r2, r1
 8006f4a:	609a      	str	r2, [r3, #8]
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f52:	f383 8810 	msr	PRIMASK, r3
}
 8006f56:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d12f      	bne.n	8006fcc <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f72:	f3ef 8310 	mrs	r3, PRIMASK
 8006f76:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f78:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f383 8810 	msr	PRIMASK, r3
}
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2110      	movs	r1, #16
 8006f94:	438a      	bics	r2, r1
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f383 8810 	msr	PRIMASK, r3
}
 8006fa2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	2210      	movs	r2, #16
 8006fac:	4013      	ands	r3, r2
 8006fae:	2b10      	cmp	r3, #16
 8006fb0:	d103      	bne.n	8006fba <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2210      	movs	r2, #16
 8006fb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2258      	movs	r2, #88	; 0x58
 8006fbe:	5a9a      	ldrh	r2, [r3, r2]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	0011      	movs	r1, r2
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	f7ff fb15 	bl	80065f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fca:	e00c      	b.n	8006fe6 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	0018      	movs	r0, r3
 8006fd0:	f7fb fa98 	bl	8002504 <HAL_UART_RxCpltCallback>
}
 8006fd4:	e007      	b.n	8006fe6 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	699a      	ldr	r2, [r3, #24]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2108      	movs	r1, #8
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	619a      	str	r2, [r3, #24]
}
 8006fe6:	46c0      	nop			; (mov r8, r8)
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	b010      	add	sp, #64	; 0x40
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	46c0      	nop			; (mov r8, r8)
 8006ff0:	fffffedf 	.word	0xfffffedf

08006ff4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b090      	sub	sp, #64	; 0x40
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ffc:	203e      	movs	r0, #62	; 0x3e
 8006ffe:	183b      	adds	r3, r7, r0
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	215c      	movs	r1, #92	; 0x5c
 8007004:	5a52      	ldrh	r2, [r2, r1]
 8007006:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800700c:	2b22      	cmp	r3, #34	; 0x22
 800700e:	d000      	beq.n	8007012 <UART_RxISR_16BIT+0x1e>
 8007010:	e095      	b.n	800713e <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	213c      	movs	r1, #60	; 0x3c
 8007018:	187b      	adds	r3, r7, r1
 800701a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800701c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007022:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007024:	187b      	adds	r3, r7, r1
 8007026:	183a      	adds	r2, r7, r0
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	8812      	ldrh	r2, [r2, #0]
 800702c:	4013      	ands	r3, r2
 800702e:	b29a      	uxth	r2, r3
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007038:	1c9a      	adds	r2, r3, #2
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	225a      	movs	r2, #90	; 0x5a
 8007042:	5a9b      	ldrh	r3, [r3, r2]
 8007044:	b29b      	uxth	r3, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	b299      	uxth	r1, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	225a      	movs	r2, #90	; 0x5a
 800704e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	225a      	movs	r2, #90	; 0x5a
 8007054:	5a9b      	ldrh	r3, [r3, r2]
 8007056:	b29b      	uxth	r3, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	d178      	bne.n	800714e <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800705c:	f3ef 8310 	mrs	r3, PRIMASK
 8007060:	617b      	str	r3, [r7, #20]
  return(result);
 8007062:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007064:	637b      	str	r3, [r7, #52]	; 0x34
 8007066:	2301      	movs	r3, #1
 8007068:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	f383 8810 	msr	PRIMASK, r3
}
 8007070:	46c0      	nop			; (mov r8, r8)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4936      	ldr	r1, [pc, #216]	; (8007158 <UART_RxISR_16BIT+0x164>)
 800707e:	400a      	ands	r2, r1
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007084:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	f383 8810 	msr	PRIMASK, r3
}
 800708c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800708e:	f3ef 8310 	mrs	r3, PRIMASK
 8007092:	623b      	str	r3, [r7, #32]
  return(result);
 8007094:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007096:	633b      	str	r3, [r7, #48]	; 0x30
 8007098:	2301      	movs	r3, #1
 800709a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	f383 8810 	msr	PRIMASK, r3
}
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2101      	movs	r1, #1
 80070b0:	438a      	bics	r2, r1
 80070b2:	609a      	str	r2, [r3, #8]
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	f383 8810 	msr	PRIMASK, r3
}
 80070be:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2220      	movs	r2, #32
 80070c4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d12f      	bne.n	8007134 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070da:	f3ef 8310 	mrs	r3, PRIMASK
 80070de:	60bb      	str	r3, [r7, #8]
  return(result);
 80070e0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070e4:	2301      	movs	r3, #1
 80070e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f383 8810 	msr	PRIMASK, r3
}
 80070ee:	46c0      	nop			; (mov r8, r8)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2110      	movs	r1, #16
 80070fc:	438a      	bics	r2, r1
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f383 8810 	msr	PRIMASK, r3
}
 800710a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	2210      	movs	r2, #16
 8007114:	4013      	ands	r3, r2
 8007116:	2b10      	cmp	r3, #16
 8007118:	d103      	bne.n	8007122 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2210      	movs	r2, #16
 8007120:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2258      	movs	r2, #88	; 0x58
 8007126:	5a9a      	ldrh	r2, [r3, r2]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	0011      	movs	r1, r2
 800712c:	0018      	movs	r0, r3
 800712e:	f7ff fa61 	bl	80065f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007132:	e00c      	b.n	800714e <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	0018      	movs	r0, r3
 8007138:	f7fb f9e4 	bl	8002504 <HAL_UART_RxCpltCallback>
}
 800713c:	e007      	b.n	800714e <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	699a      	ldr	r2, [r3, #24]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2108      	movs	r1, #8
 800714a:	430a      	orrs	r2, r1
 800714c:	619a      	str	r2, [r3, #24]
}
 800714e:	46c0      	nop			; (mov r8, r8)
 8007150:	46bd      	mov	sp, r7
 8007152:	b010      	add	sp, #64	; 0x40
 8007154:	bd80      	pop	{r7, pc}
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	fffffedf 	.word	0xfffffedf

0800715c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007164:	46c0      	nop			; (mov r8, r8)
 8007166:	46bd      	mov	sp, r7
 8007168:	b002      	add	sp, #8
 800716a:	bd80      	pop	{r7, pc}

0800716c <__errno>:
 800716c:	4b01      	ldr	r3, [pc, #4]	; (8007174 <__errno+0x8>)
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	4770      	bx	lr
 8007172:	46c0      	nop			; (mov r8, r8)
 8007174:	20000030 	.word	0x20000030

08007178 <__libc_init_array>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	2600      	movs	r6, #0
 800717c:	4d0c      	ldr	r5, [pc, #48]	; (80071b0 <__libc_init_array+0x38>)
 800717e:	4c0d      	ldr	r4, [pc, #52]	; (80071b4 <__libc_init_array+0x3c>)
 8007180:	1b64      	subs	r4, r4, r5
 8007182:	10a4      	asrs	r4, r4, #2
 8007184:	42a6      	cmp	r6, r4
 8007186:	d109      	bne.n	800719c <__libc_init_array+0x24>
 8007188:	2600      	movs	r6, #0
 800718a:	f004 fd47 	bl	800bc1c <_init>
 800718e:	4d0a      	ldr	r5, [pc, #40]	; (80071b8 <__libc_init_array+0x40>)
 8007190:	4c0a      	ldr	r4, [pc, #40]	; (80071bc <__libc_init_array+0x44>)
 8007192:	1b64      	subs	r4, r4, r5
 8007194:	10a4      	asrs	r4, r4, #2
 8007196:	42a6      	cmp	r6, r4
 8007198:	d105      	bne.n	80071a6 <__libc_init_array+0x2e>
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	00b3      	lsls	r3, r6, #2
 800719e:	58eb      	ldr	r3, [r5, r3]
 80071a0:	4798      	blx	r3
 80071a2:	3601      	adds	r6, #1
 80071a4:	e7ee      	b.n	8007184 <__libc_init_array+0xc>
 80071a6:	00b3      	lsls	r3, r6, #2
 80071a8:	58eb      	ldr	r3, [r5, r3]
 80071aa:	4798      	blx	r3
 80071ac:	3601      	adds	r6, #1
 80071ae:	e7f2      	b.n	8007196 <__libc_init_array+0x1e>
 80071b0:	0800c34c 	.word	0x0800c34c
 80071b4:	0800c34c 	.word	0x0800c34c
 80071b8:	0800c34c 	.word	0x0800c34c
 80071bc:	0800c350 	.word	0x0800c350

080071c0 <memset>:
 80071c0:	0003      	movs	r3, r0
 80071c2:	1882      	adds	r2, r0, r2
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d100      	bne.n	80071ca <memset+0xa>
 80071c8:	4770      	bx	lr
 80071ca:	7019      	strb	r1, [r3, #0]
 80071cc:	3301      	adds	r3, #1
 80071ce:	e7f9      	b.n	80071c4 <memset+0x4>

080071d0 <__cvt>:
 80071d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071d2:	001e      	movs	r6, r3
 80071d4:	2300      	movs	r3, #0
 80071d6:	0014      	movs	r4, r2
 80071d8:	b08b      	sub	sp, #44	; 0x2c
 80071da:	429e      	cmp	r6, r3
 80071dc:	da04      	bge.n	80071e8 <__cvt+0x18>
 80071de:	2180      	movs	r1, #128	; 0x80
 80071e0:	0609      	lsls	r1, r1, #24
 80071e2:	1873      	adds	r3, r6, r1
 80071e4:	001e      	movs	r6, r3
 80071e6:	232d      	movs	r3, #45	; 0x2d
 80071e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80071ec:	7013      	strb	r3, [r2, #0]
 80071ee:	2320      	movs	r3, #32
 80071f0:	2203      	movs	r2, #3
 80071f2:	439f      	bics	r7, r3
 80071f4:	2f46      	cmp	r7, #70	; 0x46
 80071f6:	d007      	beq.n	8007208 <__cvt+0x38>
 80071f8:	003b      	movs	r3, r7
 80071fa:	3b45      	subs	r3, #69	; 0x45
 80071fc:	4259      	negs	r1, r3
 80071fe:	414b      	adcs	r3, r1
 8007200:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007202:	3a01      	subs	r2, #1
 8007204:	18cb      	adds	r3, r1, r3
 8007206:	9310      	str	r3, [sp, #64]	; 0x40
 8007208:	ab09      	add	r3, sp, #36	; 0x24
 800720a:	9304      	str	r3, [sp, #16]
 800720c:	ab08      	add	r3, sp, #32
 800720e:	9303      	str	r3, [sp, #12]
 8007210:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007212:	9200      	str	r2, [sp, #0]
 8007214:	9302      	str	r3, [sp, #8]
 8007216:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007218:	0022      	movs	r2, r4
 800721a:	9301      	str	r3, [sp, #4]
 800721c:	0033      	movs	r3, r6
 800721e:	f001 fdc3 	bl	8008da8 <_dtoa_r>
 8007222:	0005      	movs	r5, r0
 8007224:	2f47      	cmp	r7, #71	; 0x47
 8007226:	d102      	bne.n	800722e <__cvt+0x5e>
 8007228:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800722a:	07db      	lsls	r3, r3, #31
 800722c:	d528      	bpl.n	8007280 <__cvt+0xb0>
 800722e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007230:	18eb      	adds	r3, r5, r3
 8007232:	9307      	str	r3, [sp, #28]
 8007234:	2f46      	cmp	r7, #70	; 0x46
 8007236:	d114      	bne.n	8007262 <__cvt+0x92>
 8007238:	782b      	ldrb	r3, [r5, #0]
 800723a:	2b30      	cmp	r3, #48	; 0x30
 800723c:	d10c      	bne.n	8007258 <__cvt+0x88>
 800723e:	2200      	movs	r2, #0
 8007240:	2300      	movs	r3, #0
 8007242:	0020      	movs	r0, r4
 8007244:	0031      	movs	r1, r6
 8007246:	f7f9 f901 	bl	800044c <__aeabi_dcmpeq>
 800724a:	2800      	cmp	r0, #0
 800724c:	d104      	bne.n	8007258 <__cvt+0x88>
 800724e:	2301      	movs	r3, #1
 8007250:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007252:	1a9b      	subs	r3, r3, r2
 8007254:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800725a:	9a07      	ldr	r2, [sp, #28]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	18d3      	adds	r3, r2, r3
 8007260:	9307      	str	r3, [sp, #28]
 8007262:	2200      	movs	r2, #0
 8007264:	2300      	movs	r3, #0
 8007266:	0020      	movs	r0, r4
 8007268:	0031      	movs	r1, r6
 800726a:	f7f9 f8ef 	bl	800044c <__aeabi_dcmpeq>
 800726e:	2800      	cmp	r0, #0
 8007270:	d001      	beq.n	8007276 <__cvt+0xa6>
 8007272:	9b07      	ldr	r3, [sp, #28]
 8007274:	9309      	str	r3, [sp, #36]	; 0x24
 8007276:	2230      	movs	r2, #48	; 0x30
 8007278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800727a:	9907      	ldr	r1, [sp, #28]
 800727c:	428b      	cmp	r3, r1
 800727e:	d306      	bcc.n	800728e <__cvt+0xbe>
 8007280:	0028      	movs	r0, r5
 8007282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007284:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007286:	1b5b      	subs	r3, r3, r5
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	b00b      	add	sp, #44	; 0x2c
 800728c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800728e:	1c59      	adds	r1, r3, #1
 8007290:	9109      	str	r1, [sp, #36]	; 0x24
 8007292:	701a      	strb	r2, [r3, #0]
 8007294:	e7f0      	b.n	8007278 <__cvt+0xa8>

08007296 <__exponent>:
 8007296:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007298:	1c83      	adds	r3, r0, #2
 800729a:	b087      	sub	sp, #28
 800729c:	9303      	str	r3, [sp, #12]
 800729e:	0005      	movs	r5, r0
 80072a0:	000c      	movs	r4, r1
 80072a2:	232b      	movs	r3, #43	; 0x2b
 80072a4:	7002      	strb	r2, [r0, #0]
 80072a6:	2900      	cmp	r1, #0
 80072a8:	da01      	bge.n	80072ae <__exponent+0x18>
 80072aa:	424c      	negs	r4, r1
 80072ac:	3302      	adds	r3, #2
 80072ae:	706b      	strb	r3, [r5, #1]
 80072b0:	2c09      	cmp	r4, #9
 80072b2:	dd31      	ble.n	8007318 <__exponent+0x82>
 80072b4:	270a      	movs	r7, #10
 80072b6:	ab04      	add	r3, sp, #16
 80072b8:	1dde      	adds	r6, r3, #7
 80072ba:	0020      	movs	r0, r4
 80072bc:	0039      	movs	r1, r7
 80072be:	9601      	str	r6, [sp, #4]
 80072c0:	f7f9 f8ae 	bl	8000420 <__aeabi_idivmod>
 80072c4:	3e01      	subs	r6, #1
 80072c6:	3130      	adds	r1, #48	; 0x30
 80072c8:	0020      	movs	r0, r4
 80072ca:	7031      	strb	r1, [r6, #0]
 80072cc:	0039      	movs	r1, r7
 80072ce:	9402      	str	r4, [sp, #8]
 80072d0:	f7f8 ffc0 	bl	8000254 <__divsi3>
 80072d4:	9b02      	ldr	r3, [sp, #8]
 80072d6:	0004      	movs	r4, r0
 80072d8:	2b63      	cmp	r3, #99	; 0x63
 80072da:	dcee      	bgt.n	80072ba <__exponent+0x24>
 80072dc:	9b01      	ldr	r3, [sp, #4]
 80072de:	3430      	adds	r4, #48	; 0x30
 80072e0:	1e9a      	subs	r2, r3, #2
 80072e2:	0013      	movs	r3, r2
 80072e4:	9903      	ldr	r1, [sp, #12]
 80072e6:	7014      	strb	r4, [r2, #0]
 80072e8:	a804      	add	r0, sp, #16
 80072ea:	3007      	adds	r0, #7
 80072ec:	4298      	cmp	r0, r3
 80072ee:	d80e      	bhi.n	800730e <__exponent+0x78>
 80072f0:	ab04      	add	r3, sp, #16
 80072f2:	3307      	adds	r3, #7
 80072f4:	2000      	movs	r0, #0
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d804      	bhi.n	8007304 <__exponent+0x6e>
 80072fa:	ab04      	add	r3, sp, #16
 80072fc:	3009      	adds	r0, #9
 80072fe:	18c0      	adds	r0, r0, r3
 8007300:	9b01      	ldr	r3, [sp, #4]
 8007302:	1ac0      	subs	r0, r0, r3
 8007304:	9b03      	ldr	r3, [sp, #12]
 8007306:	1818      	adds	r0, r3, r0
 8007308:	1b40      	subs	r0, r0, r5
 800730a:	b007      	add	sp, #28
 800730c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800730e:	7818      	ldrb	r0, [r3, #0]
 8007310:	3301      	adds	r3, #1
 8007312:	7008      	strb	r0, [r1, #0]
 8007314:	3101      	adds	r1, #1
 8007316:	e7e7      	b.n	80072e8 <__exponent+0x52>
 8007318:	2330      	movs	r3, #48	; 0x30
 800731a:	18e4      	adds	r4, r4, r3
 800731c:	70ab      	strb	r3, [r5, #2]
 800731e:	1d28      	adds	r0, r5, #4
 8007320:	70ec      	strb	r4, [r5, #3]
 8007322:	e7f1      	b.n	8007308 <__exponent+0x72>

08007324 <_printf_float>:
 8007324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007326:	b095      	sub	sp, #84	; 0x54
 8007328:	000c      	movs	r4, r1
 800732a:	9209      	str	r2, [sp, #36]	; 0x24
 800732c:	001e      	movs	r6, r3
 800732e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007330:	0007      	movs	r7, r0
 8007332:	f002 fec7 	bl	800a0c4 <_localeconv_r>
 8007336:	6803      	ldr	r3, [r0, #0]
 8007338:	0018      	movs	r0, r3
 800733a:	930c      	str	r3, [sp, #48]	; 0x30
 800733c:	f7f8 fee4 	bl	8000108 <strlen>
 8007340:	2300      	movs	r3, #0
 8007342:	9312      	str	r3, [sp, #72]	; 0x48
 8007344:	7e23      	ldrb	r3, [r4, #24]
 8007346:	2207      	movs	r2, #7
 8007348:	930a      	str	r3, [sp, #40]	; 0x28
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	900e      	str	r0, [sp, #56]	; 0x38
 800734e:	930d      	str	r3, [sp, #52]	; 0x34
 8007350:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007352:	682b      	ldr	r3, [r5, #0]
 8007354:	05c9      	lsls	r1, r1, #23
 8007356:	d547      	bpl.n	80073e8 <_printf_float+0xc4>
 8007358:	189b      	adds	r3, r3, r2
 800735a:	4393      	bics	r3, r2
 800735c:	001a      	movs	r2, r3
 800735e:	3208      	adds	r2, #8
 8007360:	602a      	str	r2, [r5, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	64a2      	str	r2, [r4, #72]	; 0x48
 8007368:	64e3      	str	r3, [r4, #76]	; 0x4c
 800736a:	2201      	movs	r2, #1
 800736c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800736e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007370:	930b      	str	r3, [sp, #44]	; 0x2c
 8007372:	006b      	lsls	r3, r5, #1
 8007374:	085b      	lsrs	r3, r3, #1
 8007376:	930f      	str	r3, [sp, #60]	; 0x3c
 8007378:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800737a:	4ba7      	ldr	r3, [pc, #668]	; (8007618 <_printf_float+0x2f4>)
 800737c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800737e:	4252      	negs	r2, r2
 8007380:	f7fa ff28 	bl	80021d4 <__aeabi_dcmpun>
 8007384:	2800      	cmp	r0, #0
 8007386:	d131      	bne.n	80073ec <_printf_float+0xc8>
 8007388:	2201      	movs	r2, #1
 800738a:	4ba3      	ldr	r3, [pc, #652]	; (8007618 <_printf_float+0x2f4>)
 800738c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800738e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007390:	4252      	negs	r2, r2
 8007392:	f7f9 f86b 	bl	800046c <__aeabi_dcmple>
 8007396:	2800      	cmp	r0, #0
 8007398:	d128      	bne.n	80073ec <_printf_float+0xc8>
 800739a:	2200      	movs	r2, #0
 800739c:	2300      	movs	r3, #0
 800739e:	0029      	movs	r1, r5
 80073a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80073a2:	f7f9 f859 	bl	8000458 <__aeabi_dcmplt>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d003      	beq.n	80073b2 <_printf_float+0x8e>
 80073aa:	0023      	movs	r3, r4
 80073ac:	222d      	movs	r2, #45	; 0x2d
 80073ae:	3343      	adds	r3, #67	; 0x43
 80073b0:	701a      	strb	r2, [r3, #0]
 80073b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b4:	4d99      	ldr	r5, [pc, #612]	; (800761c <_printf_float+0x2f8>)
 80073b6:	2b47      	cmp	r3, #71	; 0x47
 80073b8:	d900      	bls.n	80073bc <_printf_float+0x98>
 80073ba:	4d99      	ldr	r5, [pc, #612]	; (8007620 <_printf_float+0x2fc>)
 80073bc:	2303      	movs	r3, #3
 80073be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073c0:	6123      	str	r3, [r4, #16]
 80073c2:	3301      	adds	r3, #1
 80073c4:	439a      	bics	r2, r3
 80073c6:	2300      	movs	r3, #0
 80073c8:	6022      	str	r2, [r4, #0]
 80073ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80073cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ce:	0021      	movs	r1, r4
 80073d0:	0038      	movs	r0, r7
 80073d2:	9600      	str	r6, [sp, #0]
 80073d4:	aa13      	add	r2, sp, #76	; 0x4c
 80073d6:	f000 f9e7 	bl	80077a8 <_printf_common>
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	d000      	beq.n	80073e0 <_printf_float+0xbc>
 80073de:	e0a2      	b.n	8007526 <_printf_float+0x202>
 80073e0:	2001      	movs	r0, #1
 80073e2:	4240      	negs	r0, r0
 80073e4:	b015      	add	sp, #84	; 0x54
 80073e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073e8:	3307      	adds	r3, #7
 80073ea:	e7b6      	b.n	800735a <_printf_float+0x36>
 80073ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073ee:	002b      	movs	r3, r5
 80073f0:	0010      	movs	r0, r2
 80073f2:	0029      	movs	r1, r5
 80073f4:	f7fa feee 	bl	80021d4 <__aeabi_dcmpun>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d00b      	beq.n	8007414 <_printf_float+0xf0>
 80073fc:	2d00      	cmp	r5, #0
 80073fe:	da03      	bge.n	8007408 <_printf_float+0xe4>
 8007400:	0023      	movs	r3, r4
 8007402:	222d      	movs	r2, #45	; 0x2d
 8007404:	3343      	adds	r3, #67	; 0x43
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800740a:	4d86      	ldr	r5, [pc, #536]	; (8007624 <_printf_float+0x300>)
 800740c:	2b47      	cmp	r3, #71	; 0x47
 800740e:	d9d5      	bls.n	80073bc <_printf_float+0x98>
 8007410:	4d85      	ldr	r5, [pc, #532]	; (8007628 <_printf_float+0x304>)
 8007412:	e7d3      	b.n	80073bc <_printf_float+0x98>
 8007414:	2220      	movs	r2, #32
 8007416:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007418:	6863      	ldr	r3, [r4, #4]
 800741a:	4391      	bics	r1, r2
 800741c:	910f      	str	r1, [sp, #60]	; 0x3c
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	d149      	bne.n	80074b6 <_printf_float+0x192>
 8007422:	3307      	adds	r3, #7
 8007424:	6063      	str	r3, [r4, #4]
 8007426:	2380      	movs	r3, #128	; 0x80
 8007428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	4313      	orrs	r3, r2
 800742e:	2200      	movs	r2, #0
 8007430:	9206      	str	r2, [sp, #24]
 8007432:	aa12      	add	r2, sp, #72	; 0x48
 8007434:	9205      	str	r2, [sp, #20]
 8007436:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007438:	a908      	add	r1, sp, #32
 800743a:	9204      	str	r2, [sp, #16]
 800743c:	aa11      	add	r2, sp, #68	; 0x44
 800743e:	9203      	str	r2, [sp, #12]
 8007440:	2223      	movs	r2, #35	; 0x23
 8007442:	6023      	str	r3, [r4, #0]
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	6863      	ldr	r3, [r4, #4]
 8007448:	1852      	adds	r2, r2, r1
 800744a:	9202      	str	r2, [sp, #8]
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	0038      	movs	r0, r7
 8007450:	002b      	movs	r3, r5
 8007452:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007454:	f7ff febc 	bl	80071d0 <__cvt>
 8007458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800745a:	0005      	movs	r5, r0
 800745c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800745e:	2b47      	cmp	r3, #71	; 0x47
 8007460:	d108      	bne.n	8007474 <_printf_float+0x150>
 8007462:	1ccb      	adds	r3, r1, #3
 8007464:	db02      	blt.n	800746c <_printf_float+0x148>
 8007466:	6863      	ldr	r3, [r4, #4]
 8007468:	4299      	cmp	r1, r3
 800746a:	dd48      	ble.n	80074fe <_printf_float+0x1da>
 800746c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800746e:	3b02      	subs	r3, #2
 8007470:	b2db      	uxtb	r3, r3
 8007472:	930a      	str	r3, [sp, #40]	; 0x28
 8007474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007476:	2b65      	cmp	r3, #101	; 0x65
 8007478:	d824      	bhi.n	80074c4 <_printf_float+0x1a0>
 800747a:	0020      	movs	r0, r4
 800747c:	001a      	movs	r2, r3
 800747e:	3901      	subs	r1, #1
 8007480:	3050      	adds	r0, #80	; 0x50
 8007482:	9111      	str	r1, [sp, #68]	; 0x44
 8007484:	f7ff ff07 	bl	8007296 <__exponent>
 8007488:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800748a:	900b      	str	r0, [sp, #44]	; 0x2c
 800748c:	1813      	adds	r3, r2, r0
 800748e:	6123      	str	r3, [r4, #16]
 8007490:	2a01      	cmp	r2, #1
 8007492:	dc02      	bgt.n	800749a <_printf_float+0x176>
 8007494:	6822      	ldr	r2, [r4, #0]
 8007496:	07d2      	lsls	r2, r2, #31
 8007498:	d501      	bpl.n	800749e <_printf_float+0x17a>
 800749a:	3301      	adds	r3, #1
 800749c:	6123      	str	r3, [r4, #16]
 800749e:	2323      	movs	r3, #35	; 0x23
 80074a0:	aa08      	add	r2, sp, #32
 80074a2:	189b      	adds	r3, r3, r2
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d100      	bne.n	80074ac <_printf_float+0x188>
 80074aa:	e78f      	b.n	80073cc <_printf_float+0xa8>
 80074ac:	0023      	movs	r3, r4
 80074ae:	222d      	movs	r2, #45	; 0x2d
 80074b0:	3343      	adds	r3, #67	; 0x43
 80074b2:	701a      	strb	r2, [r3, #0]
 80074b4:	e78a      	b.n	80073cc <_printf_float+0xa8>
 80074b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074b8:	2a47      	cmp	r2, #71	; 0x47
 80074ba:	d1b4      	bne.n	8007426 <_printf_float+0x102>
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1b2      	bne.n	8007426 <_printf_float+0x102>
 80074c0:	3301      	adds	r3, #1
 80074c2:	e7af      	b.n	8007424 <_printf_float+0x100>
 80074c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c6:	2b66      	cmp	r3, #102	; 0x66
 80074c8:	d11b      	bne.n	8007502 <_printf_float+0x1de>
 80074ca:	6863      	ldr	r3, [r4, #4]
 80074cc:	2900      	cmp	r1, #0
 80074ce:	dd0d      	ble.n	80074ec <_printf_float+0x1c8>
 80074d0:	6121      	str	r1, [r4, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d102      	bne.n	80074dc <_printf_float+0x1b8>
 80074d6:	6822      	ldr	r2, [r4, #0]
 80074d8:	07d2      	lsls	r2, r2, #31
 80074da:	d502      	bpl.n	80074e2 <_printf_float+0x1be>
 80074dc:	3301      	adds	r3, #1
 80074de:	1859      	adds	r1, r3, r1
 80074e0:	6121      	str	r1, [r4, #16]
 80074e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074e4:	65a3      	str	r3, [r4, #88]	; 0x58
 80074e6:	2300      	movs	r3, #0
 80074e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074ea:	e7d8      	b.n	800749e <_printf_float+0x17a>
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d103      	bne.n	80074f8 <_printf_float+0x1d4>
 80074f0:	2201      	movs	r2, #1
 80074f2:	6821      	ldr	r1, [r4, #0]
 80074f4:	4211      	tst	r1, r2
 80074f6:	d000      	beq.n	80074fa <_printf_float+0x1d6>
 80074f8:	1c9a      	adds	r2, r3, #2
 80074fa:	6122      	str	r2, [r4, #16]
 80074fc:	e7f1      	b.n	80074e2 <_printf_float+0x1be>
 80074fe:	2367      	movs	r3, #103	; 0x67
 8007500:	930a      	str	r3, [sp, #40]	; 0x28
 8007502:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007504:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007506:	4293      	cmp	r3, r2
 8007508:	db06      	blt.n	8007518 <_printf_float+0x1f4>
 800750a:	6822      	ldr	r2, [r4, #0]
 800750c:	6123      	str	r3, [r4, #16]
 800750e:	07d2      	lsls	r2, r2, #31
 8007510:	d5e7      	bpl.n	80074e2 <_printf_float+0x1be>
 8007512:	3301      	adds	r3, #1
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	e7e4      	b.n	80074e2 <_printf_float+0x1be>
 8007518:	2101      	movs	r1, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	dc01      	bgt.n	8007522 <_printf_float+0x1fe>
 800751e:	1849      	adds	r1, r1, r1
 8007520:	1ac9      	subs	r1, r1, r3
 8007522:	1852      	adds	r2, r2, r1
 8007524:	e7e9      	b.n	80074fa <_printf_float+0x1d6>
 8007526:	6822      	ldr	r2, [r4, #0]
 8007528:	0553      	lsls	r3, r2, #21
 800752a:	d407      	bmi.n	800753c <_printf_float+0x218>
 800752c:	6923      	ldr	r3, [r4, #16]
 800752e:	002a      	movs	r2, r5
 8007530:	0038      	movs	r0, r7
 8007532:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007534:	47b0      	blx	r6
 8007536:	1c43      	adds	r3, r0, #1
 8007538:	d128      	bne.n	800758c <_printf_float+0x268>
 800753a:	e751      	b.n	80073e0 <_printf_float+0xbc>
 800753c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800753e:	2b65      	cmp	r3, #101	; 0x65
 8007540:	d800      	bhi.n	8007544 <_printf_float+0x220>
 8007542:	e0e1      	b.n	8007708 <_printf_float+0x3e4>
 8007544:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007546:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007548:	2200      	movs	r2, #0
 800754a:	2300      	movs	r3, #0
 800754c:	f7f8 ff7e 	bl	800044c <__aeabi_dcmpeq>
 8007550:	2800      	cmp	r0, #0
 8007552:	d031      	beq.n	80075b8 <_printf_float+0x294>
 8007554:	2301      	movs	r3, #1
 8007556:	0038      	movs	r0, r7
 8007558:	4a34      	ldr	r2, [pc, #208]	; (800762c <_printf_float+0x308>)
 800755a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800755c:	47b0      	blx	r6
 800755e:	1c43      	adds	r3, r0, #1
 8007560:	d100      	bne.n	8007564 <_printf_float+0x240>
 8007562:	e73d      	b.n	80073e0 <_printf_float+0xbc>
 8007564:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007566:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007568:	4293      	cmp	r3, r2
 800756a:	db02      	blt.n	8007572 <_printf_float+0x24e>
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	07db      	lsls	r3, r3, #31
 8007570:	d50c      	bpl.n	800758c <_printf_float+0x268>
 8007572:	0038      	movs	r0, r7
 8007574:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007578:	9909      	ldr	r1, [sp, #36]	; 0x24
 800757a:	47b0      	blx	r6
 800757c:	2500      	movs	r5, #0
 800757e:	1c43      	adds	r3, r0, #1
 8007580:	d100      	bne.n	8007584 <_printf_float+0x260>
 8007582:	e72d      	b.n	80073e0 <_printf_float+0xbc>
 8007584:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007586:	3b01      	subs	r3, #1
 8007588:	42ab      	cmp	r3, r5
 800758a:	dc0a      	bgt.n	80075a2 <_printf_float+0x27e>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	079b      	lsls	r3, r3, #30
 8007590:	d500      	bpl.n	8007594 <_printf_float+0x270>
 8007592:	e106      	b.n	80077a2 <_printf_float+0x47e>
 8007594:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007596:	68e0      	ldr	r0, [r4, #12]
 8007598:	4298      	cmp	r0, r3
 800759a:	db00      	blt.n	800759e <_printf_float+0x27a>
 800759c:	e722      	b.n	80073e4 <_printf_float+0xc0>
 800759e:	0018      	movs	r0, r3
 80075a0:	e720      	b.n	80073e4 <_printf_float+0xc0>
 80075a2:	0022      	movs	r2, r4
 80075a4:	2301      	movs	r3, #1
 80075a6:	0038      	movs	r0, r7
 80075a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075aa:	321a      	adds	r2, #26
 80075ac:	47b0      	blx	r6
 80075ae:	1c43      	adds	r3, r0, #1
 80075b0:	d100      	bne.n	80075b4 <_printf_float+0x290>
 80075b2:	e715      	b.n	80073e0 <_printf_float+0xbc>
 80075b4:	3501      	adds	r5, #1
 80075b6:	e7e5      	b.n	8007584 <_printf_float+0x260>
 80075b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	dc38      	bgt.n	8007630 <_printf_float+0x30c>
 80075be:	2301      	movs	r3, #1
 80075c0:	0038      	movs	r0, r7
 80075c2:	4a1a      	ldr	r2, [pc, #104]	; (800762c <_printf_float+0x308>)
 80075c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075c6:	47b0      	blx	r6
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	d100      	bne.n	80075ce <_printf_float+0x2aa>
 80075cc:	e708      	b.n	80073e0 <_printf_float+0xbc>
 80075ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075d2:	4313      	orrs	r3, r2
 80075d4:	d102      	bne.n	80075dc <_printf_float+0x2b8>
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	07db      	lsls	r3, r3, #31
 80075da:	d5d7      	bpl.n	800758c <_printf_float+0x268>
 80075dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075de:	0038      	movs	r0, r7
 80075e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075e4:	47b0      	blx	r6
 80075e6:	1c43      	adds	r3, r0, #1
 80075e8:	d100      	bne.n	80075ec <_printf_float+0x2c8>
 80075ea:	e6f9      	b.n	80073e0 <_printf_float+0xbc>
 80075ec:	2300      	movs	r3, #0
 80075ee:	930a      	str	r3, [sp, #40]	; 0x28
 80075f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075f4:	425b      	negs	r3, r3
 80075f6:	4293      	cmp	r3, r2
 80075f8:	dc01      	bgt.n	80075fe <_printf_float+0x2da>
 80075fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075fc:	e797      	b.n	800752e <_printf_float+0x20a>
 80075fe:	0022      	movs	r2, r4
 8007600:	2301      	movs	r3, #1
 8007602:	0038      	movs	r0, r7
 8007604:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007606:	321a      	adds	r2, #26
 8007608:	47b0      	blx	r6
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	d100      	bne.n	8007610 <_printf_float+0x2ec>
 800760e:	e6e7      	b.n	80073e0 <_printf_float+0xbc>
 8007610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007612:	3301      	adds	r3, #1
 8007614:	e7eb      	b.n	80075ee <_printf_float+0x2ca>
 8007616:	46c0      	nop			; (mov r8, r8)
 8007618:	7fefffff 	.word	0x7fefffff
 800761c:	0800beac 	.word	0x0800beac
 8007620:	0800beb0 	.word	0x0800beb0
 8007624:	0800beb4 	.word	0x0800beb4
 8007628:	0800beb8 	.word	0x0800beb8
 800762c:	0800bebc 	.word	0x0800bebc
 8007630:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007634:	920a      	str	r2, [sp, #40]	; 0x28
 8007636:	429a      	cmp	r2, r3
 8007638:	dd00      	ble.n	800763c <_printf_float+0x318>
 800763a:	930a      	str	r3, [sp, #40]	; 0x28
 800763c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800763e:	2b00      	cmp	r3, #0
 8007640:	dc3c      	bgt.n	80076bc <_printf_float+0x398>
 8007642:	2300      	movs	r3, #0
 8007644:	930d      	str	r3, [sp, #52]	; 0x34
 8007646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007648:	43db      	mvns	r3, r3
 800764a:	17db      	asrs	r3, r3, #31
 800764c:	930f      	str	r3, [sp, #60]	; 0x3c
 800764e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007650:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007652:	930b      	str	r3, [sp, #44]	; 0x2c
 8007654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007656:	4013      	ands	r3, r2
 8007658:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800765e:	4293      	cmp	r3, r2
 8007660:	dc34      	bgt.n	80076cc <_printf_float+0x3a8>
 8007662:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007664:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007666:	4293      	cmp	r3, r2
 8007668:	db3d      	blt.n	80076e6 <_printf_float+0x3c2>
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	07db      	lsls	r3, r3, #31
 800766e:	d43a      	bmi.n	80076e6 <_printf_float+0x3c2>
 8007670:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007674:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	1a52      	subs	r2, r2, r1
 800767a:	920a      	str	r2, [sp, #40]	; 0x28
 800767c:	429a      	cmp	r2, r3
 800767e:	dd00      	ble.n	8007682 <_printf_float+0x35e>
 8007680:	930a      	str	r3, [sp, #40]	; 0x28
 8007682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007684:	2b00      	cmp	r3, #0
 8007686:	dc36      	bgt.n	80076f6 <_printf_float+0x3d2>
 8007688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800768a:	2500      	movs	r5, #0
 800768c:	43db      	mvns	r3, r3
 800768e:	17db      	asrs	r3, r3, #31
 8007690:	930b      	str	r3, [sp, #44]	; 0x2c
 8007692:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007694:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007696:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007698:	1a9b      	subs	r3, r3, r2
 800769a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800769c:	400a      	ands	r2, r1
 800769e:	1a9b      	subs	r3, r3, r2
 80076a0:	42ab      	cmp	r3, r5
 80076a2:	dc00      	bgt.n	80076a6 <_printf_float+0x382>
 80076a4:	e772      	b.n	800758c <_printf_float+0x268>
 80076a6:	0022      	movs	r2, r4
 80076a8:	2301      	movs	r3, #1
 80076aa:	0038      	movs	r0, r7
 80076ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076ae:	321a      	adds	r2, #26
 80076b0:	47b0      	blx	r6
 80076b2:	1c43      	adds	r3, r0, #1
 80076b4:	d100      	bne.n	80076b8 <_printf_float+0x394>
 80076b6:	e693      	b.n	80073e0 <_printf_float+0xbc>
 80076b8:	3501      	adds	r5, #1
 80076ba:	e7ea      	b.n	8007692 <_printf_float+0x36e>
 80076bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076be:	002a      	movs	r2, r5
 80076c0:	0038      	movs	r0, r7
 80076c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076c4:	47b0      	blx	r6
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	d1bb      	bne.n	8007642 <_printf_float+0x31e>
 80076ca:	e689      	b.n	80073e0 <_printf_float+0xbc>
 80076cc:	0022      	movs	r2, r4
 80076ce:	2301      	movs	r3, #1
 80076d0:	0038      	movs	r0, r7
 80076d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076d4:	321a      	adds	r2, #26
 80076d6:	47b0      	blx	r6
 80076d8:	1c43      	adds	r3, r0, #1
 80076da:	d100      	bne.n	80076de <_printf_float+0x3ba>
 80076dc:	e680      	b.n	80073e0 <_printf_float+0xbc>
 80076de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076e0:	3301      	adds	r3, #1
 80076e2:	930d      	str	r3, [sp, #52]	; 0x34
 80076e4:	e7b3      	b.n	800764e <_printf_float+0x32a>
 80076e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076e8:	0038      	movs	r0, r7
 80076ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076ee:	47b0      	blx	r6
 80076f0:	1c43      	adds	r3, r0, #1
 80076f2:	d1bd      	bne.n	8007670 <_printf_float+0x34c>
 80076f4:	e674      	b.n	80073e0 <_printf_float+0xbc>
 80076f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076f8:	0038      	movs	r0, r7
 80076fa:	18ea      	adds	r2, r5, r3
 80076fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007700:	47b0      	blx	r6
 8007702:	1c43      	adds	r3, r0, #1
 8007704:	d1c0      	bne.n	8007688 <_printf_float+0x364>
 8007706:	e66b      	b.n	80073e0 <_printf_float+0xbc>
 8007708:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800770a:	2b01      	cmp	r3, #1
 800770c:	dc02      	bgt.n	8007714 <_printf_float+0x3f0>
 800770e:	2301      	movs	r3, #1
 8007710:	421a      	tst	r2, r3
 8007712:	d034      	beq.n	800777e <_printf_float+0x45a>
 8007714:	2301      	movs	r3, #1
 8007716:	002a      	movs	r2, r5
 8007718:	0038      	movs	r0, r7
 800771a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800771c:	47b0      	blx	r6
 800771e:	1c43      	adds	r3, r0, #1
 8007720:	d100      	bne.n	8007724 <_printf_float+0x400>
 8007722:	e65d      	b.n	80073e0 <_printf_float+0xbc>
 8007724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007726:	0038      	movs	r0, r7
 8007728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800772a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800772c:	47b0      	blx	r6
 800772e:	1c43      	adds	r3, r0, #1
 8007730:	d100      	bne.n	8007734 <_printf_float+0x410>
 8007732:	e655      	b.n	80073e0 <_printf_float+0xbc>
 8007734:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007736:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007738:	2200      	movs	r2, #0
 800773a:	2300      	movs	r3, #0
 800773c:	f7f8 fe86 	bl	800044c <__aeabi_dcmpeq>
 8007740:	2800      	cmp	r0, #0
 8007742:	d11a      	bne.n	800777a <_printf_float+0x456>
 8007744:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007746:	1c6a      	adds	r2, r5, #1
 8007748:	3b01      	subs	r3, #1
 800774a:	0038      	movs	r0, r7
 800774c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800774e:	47b0      	blx	r6
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	d10e      	bne.n	8007772 <_printf_float+0x44e>
 8007754:	e644      	b.n	80073e0 <_printf_float+0xbc>
 8007756:	0022      	movs	r2, r4
 8007758:	2301      	movs	r3, #1
 800775a:	0038      	movs	r0, r7
 800775c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800775e:	321a      	adds	r2, #26
 8007760:	47b0      	blx	r6
 8007762:	1c43      	adds	r3, r0, #1
 8007764:	d100      	bne.n	8007768 <_printf_float+0x444>
 8007766:	e63b      	b.n	80073e0 <_printf_float+0xbc>
 8007768:	3501      	adds	r5, #1
 800776a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800776c:	3b01      	subs	r3, #1
 800776e:	42ab      	cmp	r3, r5
 8007770:	dcf1      	bgt.n	8007756 <_printf_float+0x432>
 8007772:	0022      	movs	r2, r4
 8007774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007776:	3250      	adds	r2, #80	; 0x50
 8007778:	e6da      	b.n	8007530 <_printf_float+0x20c>
 800777a:	2500      	movs	r5, #0
 800777c:	e7f5      	b.n	800776a <_printf_float+0x446>
 800777e:	002a      	movs	r2, r5
 8007780:	e7e3      	b.n	800774a <_printf_float+0x426>
 8007782:	0022      	movs	r2, r4
 8007784:	2301      	movs	r3, #1
 8007786:	0038      	movs	r0, r7
 8007788:	9909      	ldr	r1, [sp, #36]	; 0x24
 800778a:	3219      	adds	r2, #25
 800778c:	47b0      	blx	r6
 800778e:	1c43      	adds	r3, r0, #1
 8007790:	d100      	bne.n	8007794 <_printf_float+0x470>
 8007792:	e625      	b.n	80073e0 <_printf_float+0xbc>
 8007794:	3501      	adds	r5, #1
 8007796:	68e3      	ldr	r3, [r4, #12]
 8007798:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800779a:	1a9b      	subs	r3, r3, r2
 800779c:	42ab      	cmp	r3, r5
 800779e:	dcf0      	bgt.n	8007782 <_printf_float+0x45e>
 80077a0:	e6f8      	b.n	8007594 <_printf_float+0x270>
 80077a2:	2500      	movs	r5, #0
 80077a4:	e7f7      	b.n	8007796 <_printf_float+0x472>
 80077a6:	46c0      	nop			; (mov r8, r8)

080077a8 <_printf_common>:
 80077a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077aa:	0015      	movs	r5, r2
 80077ac:	9301      	str	r3, [sp, #4]
 80077ae:	688a      	ldr	r2, [r1, #8]
 80077b0:	690b      	ldr	r3, [r1, #16]
 80077b2:	000c      	movs	r4, r1
 80077b4:	9000      	str	r0, [sp, #0]
 80077b6:	4293      	cmp	r3, r2
 80077b8:	da00      	bge.n	80077bc <_printf_common+0x14>
 80077ba:	0013      	movs	r3, r2
 80077bc:	0022      	movs	r2, r4
 80077be:	602b      	str	r3, [r5, #0]
 80077c0:	3243      	adds	r2, #67	; 0x43
 80077c2:	7812      	ldrb	r2, [r2, #0]
 80077c4:	2a00      	cmp	r2, #0
 80077c6:	d001      	beq.n	80077cc <_printf_common+0x24>
 80077c8:	3301      	adds	r3, #1
 80077ca:	602b      	str	r3, [r5, #0]
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	069b      	lsls	r3, r3, #26
 80077d0:	d502      	bpl.n	80077d8 <_printf_common+0x30>
 80077d2:	682b      	ldr	r3, [r5, #0]
 80077d4:	3302      	adds	r3, #2
 80077d6:	602b      	str	r3, [r5, #0]
 80077d8:	6822      	ldr	r2, [r4, #0]
 80077da:	2306      	movs	r3, #6
 80077dc:	0017      	movs	r7, r2
 80077de:	401f      	ands	r7, r3
 80077e0:	421a      	tst	r2, r3
 80077e2:	d027      	beq.n	8007834 <_printf_common+0x8c>
 80077e4:	0023      	movs	r3, r4
 80077e6:	3343      	adds	r3, #67	; 0x43
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	1e5a      	subs	r2, r3, #1
 80077ec:	4193      	sbcs	r3, r2
 80077ee:	6822      	ldr	r2, [r4, #0]
 80077f0:	0692      	lsls	r2, r2, #26
 80077f2:	d430      	bmi.n	8007856 <_printf_common+0xae>
 80077f4:	0022      	movs	r2, r4
 80077f6:	9901      	ldr	r1, [sp, #4]
 80077f8:	9800      	ldr	r0, [sp, #0]
 80077fa:	9e08      	ldr	r6, [sp, #32]
 80077fc:	3243      	adds	r2, #67	; 0x43
 80077fe:	47b0      	blx	r6
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	d025      	beq.n	8007850 <_printf_common+0xa8>
 8007804:	2306      	movs	r3, #6
 8007806:	6820      	ldr	r0, [r4, #0]
 8007808:	682a      	ldr	r2, [r5, #0]
 800780a:	68e1      	ldr	r1, [r4, #12]
 800780c:	2500      	movs	r5, #0
 800780e:	4003      	ands	r3, r0
 8007810:	2b04      	cmp	r3, #4
 8007812:	d103      	bne.n	800781c <_printf_common+0x74>
 8007814:	1a8d      	subs	r5, r1, r2
 8007816:	43eb      	mvns	r3, r5
 8007818:	17db      	asrs	r3, r3, #31
 800781a:	401d      	ands	r5, r3
 800781c:	68a3      	ldr	r3, [r4, #8]
 800781e:	6922      	ldr	r2, [r4, #16]
 8007820:	4293      	cmp	r3, r2
 8007822:	dd01      	ble.n	8007828 <_printf_common+0x80>
 8007824:	1a9b      	subs	r3, r3, r2
 8007826:	18ed      	adds	r5, r5, r3
 8007828:	2700      	movs	r7, #0
 800782a:	42bd      	cmp	r5, r7
 800782c:	d120      	bne.n	8007870 <_printf_common+0xc8>
 800782e:	2000      	movs	r0, #0
 8007830:	e010      	b.n	8007854 <_printf_common+0xac>
 8007832:	3701      	adds	r7, #1
 8007834:	68e3      	ldr	r3, [r4, #12]
 8007836:	682a      	ldr	r2, [r5, #0]
 8007838:	1a9b      	subs	r3, r3, r2
 800783a:	42bb      	cmp	r3, r7
 800783c:	ddd2      	ble.n	80077e4 <_printf_common+0x3c>
 800783e:	0022      	movs	r2, r4
 8007840:	2301      	movs	r3, #1
 8007842:	9901      	ldr	r1, [sp, #4]
 8007844:	9800      	ldr	r0, [sp, #0]
 8007846:	9e08      	ldr	r6, [sp, #32]
 8007848:	3219      	adds	r2, #25
 800784a:	47b0      	blx	r6
 800784c:	1c43      	adds	r3, r0, #1
 800784e:	d1f0      	bne.n	8007832 <_printf_common+0x8a>
 8007850:	2001      	movs	r0, #1
 8007852:	4240      	negs	r0, r0
 8007854:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007856:	2030      	movs	r0, #48	; 0x30
 8007858:	18e1      	adds	r1, r4, r3
 800785a:	3143      	adds	r1, #67	; 0x43
 800785c:	7008      	strb	r0, [r1, #0]
 800785e:	0021      	movs	r1, r4
 8007860:	1c5a      	adds	r2, r3, #1
 8007862:	3145      	adds	r1, #69	; 0x45
 8007864:	7809      	ldrb	r1, [r1, #0]
 8007866:	18a2      	adds	r2, r4, r2
 8007868:	3243      	adds	r2, #67	; 0x43
 800786a:	3302      	adds	r3, #2
 800786c:	7011      	strb	r1, [r2, #0]
 800786e:	e7c1      	b.n	80077f4 <_printf_common+0x4c>
 8007870:	0022      	movs	r2, r4
 8007872:	2301      	movs	r3, #1
 8007874:	9901      	ldr	r1, [sp, #4]
 8007876:	9800      	ldr	r0, [sp, #0]
 8007878:	9e08      	ldr	r6, [sp, #32]
 800787a:	321a      	adds	r2, #26
 800787c:	47b0      	blx	r6
 800787e:	1c43      	adds	r3, r0, #1
 8007880:	d0e6      	beq.n	8007850 <_printf_common+0xa8>
 8007882:	3701      	adds	r7, #1
 8007884:	e7d1      	b.n	800782a <_printf_common+0x82>
	...

08007888 <_printf_i>:
 8007888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800788a:	b08b      	sub	sp, #44	; 0x2c
 800788c:	9206      	str	r2, [sp, #24]
 800788e:	000a      	movs	r2, r1
 8007890:	3243      	adds	r2, #67	; 0x43
 8007892:	9307      	str	r3, [sp, #28]
 8007894:	9005      	str	r0, [sp, #20]
 8007896:	9204      	str	r2, [sp, #16]
 8007898:	7e0a      	ldrb	r2, [r1, #24]
 800789a:	000c      	movs	r4, r1
 800789c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800789e:	2a78      	cmp	r2, #120	; 0x78
 80078a0:	d807      	bhi.n	80078b2 <_printf_i+0x2a>
 80078a2:	2a62      	cmp	r2, #98	; 0x62
 80078a4:	d809      	bhi.n	80078ba <_printf_i+0x32>
 80078a6:	2a00      	cmp	r2, #0
 80078a8:	d100      	bne.n	80078ac <_printf_i+0x24>
 80078aa:	e0c1      	b.n	8007a30 <_printf_i+0x1a8>
 80078ac:	2a58      	cmp	r2, #88	; 0x58
 80078ae:	d100      	bne.n	80078b2 <_printf_i+0x2a>
 80078b0:	e08c      	b.n	80079cc <_printf_i+0x144>
 80078b2:	0026      	movs	r6, r4
 80078b4:	3642      	adds	r6, #66	; 0x42
 80078b6:	7032      	strb	r2, [r6, #0]
 80078b8:	e022      	b.n	8007900 <_printf_i+0x78>
 80078ba:	0010      	movs	r0, r2
 80078bc:	3863      	subs	r0, #99	; 0x63
 80078be:	2815      	cmp	r0, #21
 80078c0:	d8f7      	bhi.n	80078b2 <_printf_i+0x2a>
 80078c2:	f7f8 fc33 	bl	800012c <__gnu_thumb1_case_shi>
 80078c6:	0016      	.short	0x0016
 80078c8:	fff6001f 	.word	0xfff6001f
 80078cc:	fff6fff6 	.word	0xfff6fff6
 80078d0:	001ffff6 	.word	0x001ffff6
 80078d4:	fff6fff6 	.word	0xfff6fff6
 80078d8:	fff6fff6 	.word	0xfff6fff6
 80078dc:	003600a8 	.word	0x003600a8
 80078e0:	fff6009a 	.word	0xfff6009a
 80078e4:	00b9fff6 	.word	0x00b9fff6
 80078e8:	0036fff6 	.word	0x0036fff6
 80078ec:	fff6fff6 	.word	0xfff6fff6
 80078f0:	009e      	.short	0x009e
 80078f2:	0026      	movs	r6, r4
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	3642      	adds	r6, #66	; 0x42
 80078f8:	1d11      	adds	r1, r2, #4
 80078fa:	6019      	str	r1, [r3, #0]
 80078fc:	6813      	ldr	r3, [r2, #0]
 80078fe:	7033      	strb	r3, [r6, #0]
 8007900:	2301      	movs	r3, #1
 8007902:	e0a7      	b.n	8007a54 <_printf_i+0x1cc>
 8007904:	6808      	ldr	r0, [r1, #0]
 8007906:	6819      	ldr	r1, [r3, #0]
 8007908:	1d0a      	adds	r2, r1, #4
 800790a:	0605      	lsls	r5, r0, #24
 800790c:	d50b      	bpl.n	8007926 <_printf_i+0x9e>
 800790e:	680d      	ldr	r5, [r1, #0]
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	2d00      	cmp	r5, #0
 8007914:	da03      	bge.n	800791e <_printf_i+0x96>
 8007916:	232d      	movs	r3, #45	; 0x2d
 8007918:	9a04      	ldr	r2, [sp, #16]
 800791a:	426d      	negs	r5, r5
 800791c:	7013      	strb	r3, [r2, #0]
 800791e:	4b61      	ldr	r3, [pc, #388]	; (8007aa4 <_printf_i+0x21c>)
 8007920:	270a      	movs	r7, #10
 8007922:	9303      	str	r3, [sp, #12]
 8007924:	e01b      	b.n	800795e <_printf_i+0xd6>
 8007926:	680d      	ldr	r5, [r1, #0]
 8007928:	601a      	str	r2, [r3, #0]
 800792a:	0641      	lsls	r1, r0, #25
 800792c:	d5f1      	bpl.n	8007912 <_printf_i+0x8a>
 800792e:	b22d      	sxth	r5, r5
 8007930:	e7ef      	b.n	8007912 <_printf_i+0x8a>
 8007932:	680d      	ldr	r5, [r1, #0]
 8007934:	6819      	ldr	r1, [r3, #0]
 8007936:	1d08      	adds	r0, r1, #4
 8007938:	6018      	str	r0, [r3, #0]
 800793a:	062e      	lsls	r6, r5, #24
 800793c:	d501      	bpl.n	8007942 <_printf_i+0xba>
 800793e:	680d      	ldr	r5, [r1, #0]
 8007940:	e003      	b.n	800794a <_printf_i+0xc2>
 8007942:	066d      	lsls	r5, r5, #25
 8007944:	d5fb      	bpl.n	800793e <_printf_i+0xb6>
 8007946:	680d      	ldr	r5, [r1, #0]
 8007948:	b2ad      	uxth	r5, r5
 800794a:	4b56      	ldr	r3, [pc, #344]	; (8007aa4 <_printf_i+0x21c>)
 800794c:	2708      	movs	r7, #8
 800794e:	9303      	str	r3, [sp, #12]
 8007950:	2a6f      	cmp	r2, #111	; 0x6f
 8007952:	d000      	beq.n	8007956 <_printf_i+0xce>
 8007954:	3702      	adds	r7, #2
 8007956:	0023      	movs	r3, r4
 8007958:	2200      	movs	r2, #0
 800795a:	3343      	adds	r3, #67	; 0x43
 800795c:	701a      	strb	r2, [r3, #0]
 800795e:	6863      	ldr	r3, [r4, #4]
 8007960:	60a3      	str	r3, [r4, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	db03      	blt.n	800796e <_printf_i+0xe6>
 8007966:	2204      	movs	r2, #4
 8007968:	6821      	ldr	r1, [r4, #0]
 800796a:	4391      	bics	r1, r2
 800796c:	6021      	str	r1, [r4, #0]
 800796e:	2d00      	cmp	r5, #0
 8007970:	d102      	bne.n	8007978 <_printf_i+0xf0>
 8007972:	9e04      	ldr	r6, [sp, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00c      	beq.n	8007992 <_printf_i+0x10a>
 8007978:	9e04      	ldr	r6, [sp, #16]
 800797a:	0028      	movs	r0, r5
 800797c:	0039      	movs	r1, r7
 800797e:	f7f8 fc65 	bl	800024c <__aeabi_uidivmod>
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	3e01      	subs	r6, #1
 8007986:	5c5b      	ldrb	r3, [r3, r1]
 8007988:	7033      	strb	r3, [r6, #0]
 800798a:	002b      	movs	r3, r5
 800798c:	0005      	movs	r5, r0
 800798e:	429f      	cmp	r7, r3
 8007990:	d9f3      	bls.n	800797a <_printf_i+0xf2>
 8007992:	2f08      	cmp	r7, #8
 8007994:	d109      	bne.n	80079aa <_printf_i+0x122>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	07db      	lsls	r3, r3, #31
 800799a:	d506      	bpl.n	80079aa <_printf_i+0x122>
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	6922      	ldr	r2, [r4, #16]
 80079a0:	4293      	cmp	r3, r2
 80079a2:	dc02      	bgt.n	80079aa <_printf_i+0x122>
 80079a4:	2330      	movs	r3, #48	; 0x30
 80079a6:	3e01      	subs	r6, #1
 80079a8:	7033      	strb	r3, [r6, #0]
 80079aa:	9b04      	ldr	r3, [sp, #16]
 80079ac:	1b9b      	subs	r3, r3, r6
 80079ae:	6123      	str	r3, [r4, #16]
 80079b0:	9b07      	ldr	r3, [sp, #28]
 80079b2:	0021      	movs	r1, r4
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	9805      	ldr	r0, [sp, #20]
 80079b8:	9b06      	ldr	r3, [sp, #24]
 80079ba:	aa09      	add	r2, sp, #36	; 0x24
 80079bc:	f7ff fef4 	bl	80077a8 <_printf_common>
 80079c0:	1c43      	adds	r3, r0, #1
 80079c2:	d14c      	bne.n	8007a5e <_printf_i+0x1d6>
 80079c4:	2001      	movs	r0, #1
 80079c6:	4240      	negs	r0, r0
 80079c8:	b00b      	add	sp, #44	; 0x2c
 80079ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079cc:	3145      	adds	r1, #69	; 0x45
 80079ce:	700a      	strb	r2, [r1, #0]
 80079d0:	4a34      	ldr	r2, [pc, #208]	; (8007aa4 <_printf_i+0x21c>)
 80079d2:	9203      	str	r2, [sp, #12]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	6821      	ldr	r1, [r4, #0]
 80079d8:	ca20      	ldmia	r2!, {r5}
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	0608      	lsls	r0, r1, #24
 80079de:	d516      	bpl.n	8007a0e <_printf_i+0x186>
 80079e0:	07cb      	lsls	r3, r1, #31
 80079e2:	d502      	bpl.n	80079ea <_printf_i+0x162>
 80079e4:	2320      	movs	r3, #32
 80079e6:	4319      	orrs	r1, r3
 80079e8:	6021      	str	r1, [r4, #0]
 80079ea:	2710      	movs	r7, #16
 80079ec:	2d00      	cmp	r5, #0
 80079ee:	d1b2      	bne.n	8007956 <_printf_i+0xce>
 80079f0:	2320      	movs	r3, #32
 80079f2:	6822      	ldr	r2, [r4, #0]
 80079f4:	439a      	bics	r2, r3
 80079f6:	6022      	str	r2, [r4, #0]
 80079f8:	e7ad      	b.n	8007956 <_printf_i+0xce>
 80079fa:	2220      	movs	r2, #32
 80079fc:	6809      	ldr	r1, [r1, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	6022      	str	r2, [r4, #0]
 8007a02:	0022      	movs	r2, r4
 8007a04:	2178      	movs	r1, #120	; 0x78
 8007a06:	3245      	adds	r2, #69	; 0x45
 8007a08:	7011      	strb	r1, [r2, #0]
 8007a0a:	4a27      	ldr	r2, [pc, #156]	; (8007aa8 <_printf_i+0x220>)
 8007a0c:	e7e1      	b.n	80079d2 <_printf_i+0x14a>
 8007a0e:	0648      	lsls	r0, r1, #25
 8007a10:	d5e6      	bpl.n	80079e0 <_printf_i+0x158>
 8007a12:	b2ad      	uxth	r5, r5
 8007a14:	e7e4      	b.n	80079e0 <_printf_i+0x158>
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	680d      	ldr	r5, [r1, #0]
 8007a1a:	1d10      	adds	r0, r2, #4
 8007a1c:	6949      	ldr	r1, [r1, #20]
 8007a1e:	6018      	str	r0, [r3, #0]
 8007a20:	6813      	ldr	r3, [r2, #0]
 8007a22:	062e      	lsls	r6, r5, #24
 8007a24:	d501      	bpl.n	8007a2a <_printf_i+0x1a2>
 8007a26:	6019      	str	r1, [r3, #0]
 8007a28:	e002      	b.n	8007a30 <_printf_i+0x1a8>
 8007a2a:	066d      	lsls	r5, r5, #25
 8007a2c:	d5fb      	bpl.n	8007a26 <_printf_i+0x19e>
 8007a2e:	8019      	strh	r1, [r3, #0]
 8007a30:	2300      	movs	r3, #0
 8007a32:	9e04      	ldr	r6, [sp, #16]
 8007a34:	6123      	str	r3, [r4, #16]
 8007a36:	e7bb      	b.n	80079b0 <_printf_i+0x128>
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	1d11      	adds	r1, r2, #4
 8007a3c:	6019      	str	r1, [r3, #0]
 8007a3e:	6816      	ldr	r6, [r2, #0]
 8007a40:	2100      	movs	r1, #0
 8007a42:	0030      	movs	r0, r6
 8007a44:	6862      	ldr	r2, [r4, #4]
 8007a46:	f002 fb5d 	bl	800a104 <memchr>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	d001      	beq.n	8007a52 <_printf_i+0x1ca>
 8007a4e:	1b80      	subs	r0, r0, r6
 8007a50:	6060      	str	r0, [r4, #4]
 8007a52:	6863      	ldr	r3, [r4, #4]
 8007a54:	6123      	str	r3, [r4, #16]
 8007a56:	2300      	movs	r3, #0
 8007a58:	9a04      	ldr	r2, [sp, #16]
 8007a5a:	7013      	strb	r3, [r2, #0]
 8007a5c:	e7a8      	b.n	80079b0 <_printf_i+0x128>
 8007a5e:	6923      	ldr	r3, [r4, #16]
 8007a60:	0032      	movs	r2, r6
 8007a62:	9906      	ldr	r1, [sp, #24]
 8007a64:	9805      	ldr	r0, [sp, #20]
 8007a66:	9d07      	ldr	r5, [sp, #28]
 8007a68:	47a8      	blx	r5
 8007a6a:	1c43      	adds	r3, r0, #1
 8007a6c:	d0aa      	beq.n	80079c4 <_printf_i+0x13c>
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	079b      	lsls	r3, r3, #30
 8007a72:	d415      	bmi.n	8007aa0 <_printf_i+0x218>
 8007a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a76:	68e0      	ldr	r0, [r4, #12]
 8007a78:	4298      	cmp	r0, r3
 8007a7a:	daa5      	bge.n	80079c8 <_printf_i+0x140>
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	e7a3      	b.n	80079c8 <_printf_i+0x140>
 8007a80:	0022      	movs	r2, r4
 8007a82:	2301      	movs	r3, #1
 8007a84:	9906      	ldr	r1, [sp, #24]
 8007a86:	9805      	ldr	r0, [sp, #20]
 8007a88:	9e07      	ldr	r6, [sp, #28]
 8007a8a:	3219      	adds	r2, #25
 8007a8c:	47b0      	blx	r6
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	d098      	beq.n	80079c4 <_printf_i+0x13c>
 8007a92:	3501      	adds	r5, #1
 8007a94:	68e3      	ldr	r3, [r4, #12]
 8007a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a98:	1a9b      	subs	r3, r3, r2
 8007a9a:	42ab      	cmp	r3, r5
 8007a9c:	dcf0      	bgt.n	8007a80 <_printf_i+0x1f8>
 8007a9e:	e7e9      	b.n	8007a74 <_printf_i+0x1ec>
 8007aa0:	2500      	movs	r5, #0
 8007aa2:	e7f7      	b.n	8007a94 <_printf_i+0x20c>
 8007aa4:	0800bebe 	.word	0x0800bebe
 8007aa8:	0800becf 	.word	0x0800becf

08007aac <_scanf_float>:
 8007aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aae:	b08b      	sub	sp, #44	; 0x2c
 8007ab0:	0015      	movs	r5, r2
 8007ab2:	9001      	str	r0, [sp, #4]
 8007ab4:	22ae      	movs	r2, #174	; 0xae
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	9306      	str	r3, [sp, #24]
 8007aba:	688b      	ldr	r3, [r1, #8]
 8007abc:	000e      	movs	r6, r1
 8007abe:	1e59      	subs	r1, r3, #1
 8007ac0:	0052      	lsls	r2, r2, #1
 8007ac2:	9005      	str	r0, [sp, #20]
 8007ac4:	4291      	cmp	r1, r2
 8007ac6:	d905      	bls.n	8007ad4 <_scanf_float+0x28>
 8007ac8:	3b5e      	subs	r3, #94	; 0x5e
 8007aca:	3bff      	subs	r3, #255	; 0xff
 8007acc:	9305      	str	r3, [sp, #20]
 8007ace:	235e      	movs	r3, #94	; 0x5e
 8007ad0:	33ff      	adds	r3, #255	; 0xff
 8007ad2:	60b3      	str	r3, [r6, #8]
 8007ad4:	23f0      	movs	r3, #240	; 0xf0
 8007ad6:	6832      	ldr	r2, [r6, #0]
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	4313      	orrs	r3, r2
 8007adc:	6033      	str	r3, [r6, #0]
 8007ade:	0033      	movs	r3, r6
 8007ae0:	2400      	movs	r4, #0
 8007ae2:	331c      	adds	r3, #28
 8007ae4:	001f      	movs	r7, r3
 8007ae6:	9303      	str	r3, [sp, #12]
 8007ae8:	9402      	str	r4, [sp, #8]
 8007aea:	9408      	str	r4, [sp, #32]
 8007aec:	9407      	str	r4, [sp, #28]
 8007aee:	9400      	str	r4, [sp, #0]
 8007af0:	9404      	str	r4, [sp, #16]
 8007af2:	68b2      	ldr	r2, [r6, #8]
 8007af4:	2a00      	cmp	r2, #0
 8007af6:	d00a      	beq.n	8007b0e <_scanf_float+0x62>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2b4e      	cmp	r3, #78	; 0x4e
 8007afe:	d844      	bhi.n	8007b8a <_scanf_float+0xde>
 8007b00:	0018      	movs	r0, r3
 8007b02:	2b40      	cmp	r3, #64	; 0x40
 8007b04:	d82c      	bhi.n	8007b60 <_scanf_float+0xb4>
 8007b06:	382b      	subs	r0, #43	; 0x2b
 8007b08:	b2c1      	uxtb	r1, r0
 8007b0a:	290e      	cmp	r1, #14
 8007b0c:	d92a      	bls.n	8007b64 <_scanf_float+0xb8>
 8007b0e:	9b00      	ldr	r3, [sp, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d003      	beq.n	8007b1c <_scanf_float+0x70>
 8007b14:	6832      	ldr	r2, [r6, #0]
 8007b16:	4ba4      	ldr	r3, [pc, #656]	; (8007da8 <_scanf_float+0x2fc>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	6033      	str	r3, [r6, #0]
 8007b1c:	9b02      	ldr	r3, [sp, #8]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d900      	bls.n	8007b26 <_scanf_float+0x7a>
 8007b24:	e0f9      	b.n	8007d1a <_scanf_float+0x26e>
 8007b26:	24be      	movs	r4, #190	; 0xbe
 8007b28:	0064      	lsls	r4, r4, #1
 8007b2a:	9b03      	ldr	r3, [sp, #12]
 8007b2c:	429f      	cmp	r7, r3
 8007b2e:	d900      	bls.n	8007b32 <_scanf_float+0x86>
 8007b30:	e0e9      	b.n	8007d06 <_scanf_float+0x25a>
 8007b32:	2301      	movs	r3, #1
 8007b34:	9302      	str	r3, [sp, #8]
 8007b36:	e185      	b.n	8007e44 <_scanf_float+0x398>
 8007b38:	0018      	movs	r0, r3
 8007b3a:	3861      	subs	r0, #97	; 0x61
 8007b3c:	280d      	cmp	r0, #13
 8007b3e:	d8e6      	bhi.n	8007b0e <_scanf_float+0x62>
 8007b40:	f7f8 faf4 	bl	800012c <__gnu_thumb1_case_shi>
 8007b44:	ffe50083 	.word	0xffe50083
 8007b48:	ffe5ffe5 	.word	0xffe5ffe5
 8007b4c:	00a200b6 	.word	0x00a200b6
 8007b50:	ffe5ffe5 	.word	0xffe5ffe5
 8007b54:	ffe50089 	.word	0xffe50089
 8007b58:	ffe5ffe5 	.word	0xffe5ffe5
 8007b5c:	0065ffe5 	.word	0x0065ffe5
 8007b60:	3841      	subs	r0, #65	; 0x41
 8007b62:	e7eb      	b.n	8007b3c <_scanf_float+0x90>
 8007b64:	280e      	cmp	r0, #14
 8007b66:	d8d2      	bhi.n	8007b0e <_scanf_float+0x62>
 8007b68:	f7f8 fae0 	bl	800012c <__gnu_thumb1_case_shi>
 8007b6c:	ffd1004b 	.word	0xffd1004b
 8007b70:	0098004b 	.word	0x0098004b
 8007b74:	0020ffd1 	.word	0x0020ffd1
 8007b78:	00400040 	.word	0x00400040
 8007b7c:	00400040 	.word	0x00400040
 8007b80:	00400040 	.word	0x00400040
 8007b84:	00400040 	.word	0x00400040
 8007b88:	0040      	.short	0x0040
 8007b8a:	2b6e      	cmp	r3, #110	; 0x6e
 8007b8c:	d809      	bhi.n	8007ba2 <_scanf_float+0xf6>
 8007b8e:	2b60      	cmp	r3, #96	; 0x60
 8007b90:	d8d2      	bhi.n	8007b38 <_scanf_float+0x8c>
 8007b92:	2b54      	cmp	r3, #84	; 0x54
 8007b94:	d07d      	beq.n	8007c92 <_scanf_float+0x1e6>
 8007b96:	2b59      	cmp	r3, #89	; 0x59
 8007b98:	d1b9      	bne.n	8007b0e <_scanf_float+0x62>
 8007b9a:	2c07      	cmp	r4, #7
 8007b9c:	d1b7      	bne.n	8007b0e <_scanf_float+0x62>
 8007b9e:	2408      	movs	r4, #8
 8007ba0:	e02c      	b.n	8007bfc <_scanf_float+0x150>
 8007ba2:	2b74      	cmp	r3, #116	; 0x74
 8007ba4:	d075      	beq.n	8007c92 <_scanf_float+0x1e6>
 8007ba6:	2b79      	cmp	r3, #121	; 0x79
 8007ba8:	d0f7      	beq.n	8007b9a <_scanf_float+0xee>
 8007baa:	e7b0      	b.n	8007b0e <_scanf_float+0x62>
 8007bac:	6831      	ldr	r1, [r6, #0]
 8007bae:	05c8      	lsls	r0, r1, #23
 8007bb0:	d51c      	bpl.n	8007bec <_scanf_float+0x140>
 8007bb2:	2380      	movs	r3, #128	; 0x80
 8007bb4:	4399      	bics	r1, r3
 8007bb6:	9b00      	ldr	r3, [sp, #0]
 8007bb8:	6031      	str	r1, [r6, #0]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	9b05      	ldr	r3, [sp, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d003      	beq.n	8007bcc <_scanf_float+0x120>
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	3201      	adds	r2, #1
 8007bc8:	9305      	str	r3, [sp, #20]
 8007bca:	60b2      	str	r2, [r6, #8]
 8007bcc:	68b3      	ldr	r3, [r6, #8]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	60b3      	str	r3, [r6, #8]
 8007bd2:	6933      	ldr	r3, [r6, #16]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	6133      	str	r3, [r6, #16]
 8007bd8:	686b      	ldr	r3, [r5, #4]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	606b      	str	r3, [r5, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	dc00      	bgt.n	8007be4 <_scanf_float+0x138>
 8007be2:	e086      	b.n	8007cf2 <_scanf_float+0x246>
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	3301      	adds	r3, #1
 8007be8:	602b      	str	r3, [r5, #0]
 8007bea:	e782      	b.n	8007af2 <_scanf_float+0x46>
 8007bec:	9a02      	ldr	r2, [sp, #8]
 8007bee:	1912      	adds	r2, r2, r4
 8007bf0:	2a00      	cmp	r2, #0
 8007bf2:	d18c      	bne.n	8007b0e <_scanf_float+0x62>
 8007bf4:	4a6d      	ldr	r2, [pc, #436]	; (8007dac <_scanf_float+0x300>)
 8007bf6:	6831      	ldr	r1, [r6, #0]
 8007bf8:	400a      	ands	r2, r1
 8007bfa:	6032      	str	r2, [r6, #0]
 8007bfc:	703b      	strb	r3, [r7, #0]
 8007bfe:	3701      	adds	r7, #1
 8007c00:	e7e4      	b.n	8007bcc <_scanf_float+0x120>
 8007c02:	2180      	movs	r1, #128	; 0x80
 8007c04:	6832      	ldr	r2, [r6, #0]
 8007c06:	420a      	tst	r2, r1
 8007c08:	d081      	beq.n	8007b0e <_scanf_float+0x62>
 8007c0a:	438a      	bics	r2, r1
 8007c0c:	e7f5      	b.n	8007bfa <_scanf_float+0x14e>
 8007c0e:	9a02      	ldr	r2, [sp, #8]
 8007c10:	2a00      	cmp	r2, #0
 8007c12:	d10f      	bne.n	8007c34 <_scanf_float+0x188>
 8007c14:	9a00      	ldr	r2, [sp, #0]
 8007c16:	2a00      	cmp	r2, #0
 8007c18:	d10f      	bne.n	8007c3a <_scanf_float+0x18e>
 8007c1a:	6832      	ldr	r2, [r6, #0]
 8007c1c:	21e0      	movs	r1, #224	; 0xe0
 8007c1e:	0010      	movs	r0, r2
 8007c20:	00c9      	lsls	r1, r1, #3
 8007c22:	4008      	ands	r0, r1
 8007c24:	4288      	cmp	r0, r1
 8007c26:	d108      	bne.n	8007c3a <_scanf_float+0x18e>
 8007c28:	4961      	ldr	r1, [pc, #388]	; (8007db0 <_scanf_float+0x304>)
 8007c2a:	400a      	ands	r2, r1
 8007c2c:	6032      	str	r2, [r6, #0]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	9202      	str	r2, [sp, #8]
 8007c32:	e7e3      	b.n	8007bfc <_scanf_float+0x150>
 8007c34:	9a02      	ldr	r2, [sp, #8]
 8007c36:	2a02      	cmp	r2, #2
 8007c38:	d059      	beq.n	8007cee <_scanf_float+0x242>
 8007c3a:	2c01      	cmp	r4, #1
 8007c3c:	d002      	beq.n	8007c44 <_scanf_float+0x198>
 8007c3e:	2c04      	cmp	r4, #4
 8007c40:	d000      	beq.n	8007c44 <_scanf_float+0x198>
 8007c42:	e764      	b.n	8007b0e <_scanf_float+0x62>
 8007c44:	3401      	adds	r4, #1
 8007c46:	b2e4      	uxtb	r4, r4
 8007c48:	e7d8      	b.n	8007bfc <_scanf_float+0x150>
 8007c4a:	9a02      	ldr	r2, [sp, #8]
 8007c4c:	2a01      	cmp	r2, #1
 8007c4e:	d000      	beq.n	8007c52 <_scanf_float+0x1a6>
 8007c50:	e75d      	b.n	8007b0e <_scanf_float+0x62>
 8007c52:	2202      	movs	r2, #2
 8007c54:	e7ec      	b.n	8007c30 <_scanf_float+0x184>
 8007c56:	2c00      	cmp	r4, #0
 8007c58:	d110      	bne.n	8007c7c <_scanf_float+0x1d0>
 8007c5a:	9a00      	ldr	r2, [sp, #0]
 8007c5c:	2a00      	cmp	r2, #0
 8007c5e:	d000      	beq.n	8007c62 <_scanf_float+0x1b6>
 8007c60:	e758      	b.n	8007b14 <_scanf_float+0x68>
 8007c62:	6832      	ldr	r2, [r6, #0]
 8007c64:	21e0      	movs	r1, #224	; 0xe0
 8007c66:	0010      	movs	r0, r2
 8007c68:	00c9      	lsls	r1, r1, #3
 8007c6a:	4008      	ands	r0, r1
 8007c6c:	4288      	cmp	r0, r1
 8007c6e:	d000      	beq.n	8007c72 <_scanf_float+0x1c6>
 8007c70:	e754      	b.n	8007b1c <_scanf_float+0x70>
 8007c72:	494f      	ldr	r1, [pc, #316]	; (8007db0 <_scanf_float+0x304>)
 8007c74:	3401      	adds	r4, #1
 8007c76:	400a      	ands	r2, r1
 8007c78:	6032      	str	r2, [r6, #0]
 8007c7a:	e7bf      	b.n	8007bfc <_scanf_float+0x150>
 8007c7c:	21fd      	movs	r1, #253	; 0xfd
 8007c7e:	1ee2      	subs	r2, r4, #3
 8007c80:	420a      	tst	r2, r1
 8007c82:	d000      	beq.n	8007c86 <_scanf_float+0x1da>
 8007c84:	e743      	b.n	8007b0e <_scanf_float+0x62>
 8007c86:	e7dd      	b.n	8007c44 <_scanf_float+0x198>
 8007c88:	2c02      	cmp	r4, #2
 8007c8a:	d000      	beq.n	8007c8e <_scanf_float+0x1e2>
 8007c8c:	e73f      	b.n	8007b0e <_scanf_float+0x62>
 8007c8e:	2403      	movs	r4, #3
 8007c90:	e7b4      	b.n	8007bfc <_scanf_float+0x150>
 8007c92:	2c06      	cmp	r4, #6
 8007c94:	d000      	beq.n	8007c98 <_scanf_float+0x1ec>
 8007c96:	e73a      	b.n	8007b0e <_scanf_float+0x62>
 8007c98:	2407      	movs	r4, #7
 8007c9a:	e7af      	b.n	8007bfc <_scanf_float+0x150>
 8007c9c:	6832      	ldr	r2, [r6, #0]
 8007c9e:	0591      	lsls	r1, r2, #22
 8007ca0:	d400      	bmi.n	8007ca4 <_scanf_float+0x1f8>
 8007ca2:	e734      	b.n	8007b0e <_scanf_float+0x62>
 8007ca4:	4943      	ldr	r1, [pc, #268]	; (8007db4 <_scanf_float+0x308>)
 8007ca6:	400a      	ands	r2, r1
 8007ca8:	6032      	str	r2, [r6, #0]
 8007caa:	9a00      	ldr	r2, [sp, #0]
 8007cac:	9204      	str	r2, [sp, #16]
 8007cae:	e7a5      	b.n	8007bfc <_scanf_float+0x150>
 8007cb0:	21a0      	movs	r1, #160	; 0xa0
 8007cb2:	2080      	movs	r0, #128	; 0x80
 8007cb4:	6832      	ldr	r2, [r6, #0]
 8007cb6:	00c9      	lsls	r1, r1, #3
 8007cb8:	4011      	ands	r1, r2
 8007cba:	00c0      	lsls	r0, r0, #3
 8007cbc:	4281      	cmp	r1, r0
 8007cbe:	d006      	beq.n	8007cce <_scanf_float+0x222>
 8007cc0:	4202      	tst	r2, r0
 8007cc2:	d100      	bne.n	8007cc6 <_scanf_float+0x21a>
 8007cc4:	e723      	b.n	8007b0e <_scanf_float+0x62>
 8007cc6:	9900      	ldr	r1, [sp, #0]
 8007cc8:	2900      	cmp	r1, #0
 8007cca:	d100      	bne.n	8007cce <_scanf_float+0x222>
 8007ccc:	e726      	b.n	8007b1c <_scanf_float+0x70>
 8007cce:	0591      	lsls	r1, r2, #22
 8007cd0:	d404      	bmi.n	8007cdc <_scanf_float+0x230>
 8007cd2:	9900      	ldr	r1, [sp, #0]
 8007cd4:	9804      	ldr	r0, [sp, #16]
 8007cd6:	9708      	str	r7, [sp, #32]
 8007cd8:	1a09      	subs	r1, r1, r0
 8007cda:	9107      	str	r1, [sp, #28]
 8007cdc:	4934      	ldr	r1, [pc, #208]	; (8007db0 <_scanf_float+0x304>)
 8007cde:	400a      	ands	r2, r1
 8007ce0:	21c0      	movs	r1, #192	; 0xc0
 8007ce2:	0049      	lsls	r1, r1, #1
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	6032      	str	r2, [r6, #0]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	9200      	str	r2, [sp, #0]
 8007cec:	e786      	b.n	8007bfc <_scanf_float+0x150>
 8007cee:	2203      	movs	r2, #3
 8007cf0:	e79e      	b.n	8007c30 <_scanf_float+0x184>
 8007cf2:	23c0      	movs	r3, #192	; 0xc0
 8007cf4:	005b      	lsls	r3, r3, #1
 8007cf6:	0029      	movs	r1, r5
 8007cf8:	58f3      	ldr	r3, [r6, r3]
 8007cfa:	9801      	ldr	r0, [sp, #4]
 8007cfc:	4798      	blx	r3
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d100      	bne.n	8007d04 <_scanf_float+0x258>
 8007d02:	e6f6      	b.n	8007af2 <_scanf_float+0x46>
 8007d04:	e703      	b.n	8007b0e <_scanf_float+0x62>
 8007d06:	3f01      	subs	r7, #1
 8007d08:	5933      	ldr	r3, [r6, r4]
 8007d0a:	002a      	movs	r2, r5
 8007d0c:	7839      	ldrb	r1, [r7, #0]
 8007d0e:	9801      	ldr	r0, [sp, #4]
 8007d10:	4798      	blx	r3
 8007d12:	6933      	ldr	r3, [r6, #16]
 8007d14:	3b01      	subs	r3, #1
 8007d16:	6133      	str	r3, [r6, #16]
 8007d18:	e707      	b.n	8007b2a <_scanf_float+0x7e>
 8007d1a:	1e63      	subs	r3, r4, #1
 8007d1c:	2b06      	cmp	r3, #6
 8007d1e:	d80e      	bhi.n	8007d3e <_scanf_float+0x292>
 8007d20:	9702      	str	r7, [sp, #8]
 8007d22:	2c02      	cmp	r4, #2
 8007d24:	d920      	bls.n	8007d68 <_scanf_float+0x2bc>
 8007d26:	1be3      	subs	r3, r4, r7
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	9305      	str	r3, [sp, #20]
 8007d2c:	9b02      	ldr	r3, [sp, #8]
 8007d2e:	9a05      	ldr	r2, [sp, #20]
 8007d30:	189b      	adds	r3, r3, r2
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	d827      	bhi.n	8007d88 <_scanf_float+0x2dc>
 8007d38:	3c03      	subs	r4, #3
 8007d3a:	b2e4      	uxtb	r4, r4
 8007d3c:	1b3f      	subs	r7, r7, r4
 8007d3e:	6833      	ldr	r3, [r6, #0]
 8007d40:	05da      	lsls	r2, r3, #23
 8007d42:	d554      	bpl.n	8007dee <_scanf_float+0x342>
 8007d44:	055b      	lsls	r3, r3, #21
 8007d46:	d537      	bpl.n	8007db8 <_scanf_float+0x30c>
 8007d48:	24be      	movs	r4, #190	; 0xbe
 8007d4a:	0064      	lsls	r4, r4, #1
 8007d4c:	9b03      	ldr	r3, [sp, #12]
 8007d4e:	429f      	cmp	r7, r3
 8007d50:	d800      	bhi.n	8007d54 <_scanf_float+0x2a8>
 8007d52:	e6ee      	b.n	8007b32 <_scanf_float+0x86>
 8007d54:	3f01      	subs	r7, #1
 8007d56:	5933      	ldr	r3, [r6, r4]
 8007d58:	002a      	movs	r2, r5
 8007d5a:	7839      	ldrb	r1, [r7, #0]
 8007d5c:	9801      	ldr	r0, [sp, #4]
 8007d5e:	4798      	blx	r3
 8007d60:	6933      	ldr	r3, [r6, #16]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	6133      	str	r3, [r6, #16]
 8007d66:	e7f1      	b.n	8007d4c <_scanf_float+0x2a0>
 8007d68:	24be      	movs	r4, #190	; 0xbe
 8007d6a:	0064      	lsls	r4, r4, #1
 8007d6c:	9b03      	ldr	r3, [sp, #12]
 8007d6e:	429f      	cmp	r7, r3
 8007d70:	d800      	bhi.n	8007d74 <_scanf_float+0x2c8>
 8007d72:	e6de      	b.n	8007b32 <_scanf_float+0x86>
 8007d74:	3f01      	subs	r7, #1
 8007d76:	5933      	ldr	r3, [r6, r4]
 8007d78:	002a      	movs	r2, r5
 8007d7a:	7839      	ldrb	r1, [r7, #0]
 8007d7c:	9801      	ldr	r0, [sp, #4]
 8007d7e:	4798      	blx	r3
 8007d80:	6933      	ldr	r3, [r6, #16]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	6133      	str	r3, [r6, #16]
 8007d86:	e7f1      	b.n	8007d6c <_scanf_float+0x2c0>
 8007d88:	9b02      	ldr	r3, [sp, #8]
 8007d8a:	002a      	movs	r2, r5
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	7819      	ldrb	r1, [r3, #0]
 8007d90:	9302      	str	r3, [sp, #8]
 8007d92:	23be      	movs	r3, #190	; 0xbe
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	58f3      	ldr	r3, [r6, r3]
 8007d98:	9801      	ldr	r0, [sp, #4]
 8007d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d9c:	4798      	blx	r3
 8007d9e:	6933      	ldr	r3, [r6, #16]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	6133      	str	r3, [r6, #16]
 8007da4:	e7c2      	b.n	8007d2c <_scanf_float+0x280>
 8007da6:	46c0      	nop			; (mov r8, r8)
 8007da8:	fffffeff 	.word	0xfffffeff
 8007dac:	fffffe7f 	.word	0xfffffe7f
 8007db0:	fffff87f 	.word	0xfffff87f
 8007db4:	fffffd7f 	.word	0xfffffd7f
 8007db8:	6933      	ldr	r3, [r6, #16]
 8007dba:	1e7c      	subs	r4, r7, #1
 8007dbc:	7821      	ldrb	r1, [r4, #0]
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	6133      	str	r3, [r6, #16]
 8007dc2:	2965      	cmp	r1, #101	; 0x65
 8007dc4:	d00c      	beq.n	8007de0 <_scanf_float+0x334>
 8007dc6:	2945      	cmp	r1, #69	; 0x45
 8007dc8:	d00a      	beq.n	8007de0 <_scanf_float+0x334>
 8007dca:	23be      	movs	r3, #190	; 0xbe
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	58f3      	ldr	r3, [r6, r3]
 8007dd0:	002a      	movs	r2, r5
 8007dd2:	9801      	ldr	r0, [sp, #4]
 8007dd4:	4798      	blx	r3
 8007dd6:	6933      	ldr	r3, [r6, #16]
 8007dd8:	1ebc      	subs	r4, r7, #2
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	7821      	ldrb	r1, [r4, #0]
 8007dde:	6133      	str	r3, [r6, #16]
 8007de0:	23be      	movs	r3, #190	; 0xbe
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	002a      	movs	r2, r5
 8007de6:	58f3      	ldr	r3, [r6, r3]
 8007de8:	9801      	ldr	r0, [sp, #4]
 8007dea:	4798      	blx	r3
 8007dec:	0027      	movs	r7, r4
 8007dee:	6832      	ldr	r2, [r6, #0]
 8007df0:	2310      	movs	r3, #16
 8007df2:	0011      	movs	r1, r2
 8007df4:	4019      	ands	r1, r3
 8007df6:	9102      	str	r1, [sp, #8]
 8007df8:	421a      	tst	r2, r3
 8007dfa:	d158      	bne.n	8007eae <_scanf_float+0x402>
 8007dfc:	23c0      	movs	r3, #192	; 0xc0
 8007dfe:	7039      	strb	r1, [r7, #0]
 8007e00:	6832      	ldr	r2, [r6, #0]
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	4013      	ands	r3, r2
 8007e06:	2280      	movs	r2, #128	; 0x80
 8007e08:	00d2      	lsls	r2, r2, #3
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d11d      	bne.n	8007e4a <_scanf_float+0x39e>
 8007e0e:	9b04      	ldr	r3, [sp, #16]
 8007e10:	9a00      	ldr	r2, [sp, #0]
 8007e12:	9900      	ldr	r1, [sp, #0]
 8007e14:	1a9a      	subs	r2, r3, r2
 8007e16:	428b      	cmp	r3, r1
 8007e18:	d124      	bne.n	8007e64 <_scanf_float+0x3b8>
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	9903      	ldr	r1, [sp, #12]
 8007e1e:	9801      	ldr	r0, [sp, #4]
 8007e20:	f000 fe9c 	bl	8008b5c <_strtod_r>
 8007e24:	9b06      	ldr	r3, [sp, #24]
 8007e26:	000d      	movs	r5, r1
 8007e28:	6831      	ldr	r1, [r6, #0]
 8007e2a:	0004      	movs	r4, r0
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	078a      	lsls	r2, r1, #30
 8007e30:	d525      	bpl.n	8007e7e <_scanf_float+0x3d2>
 8007e32:	1d1a      	adds	r2, r3, #4
 8007e34:	9906      	ldr	r1, [sp, #24]
 8007e36:	600a      	str	r2, [r1, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	601c      	str	r4, [r3, #0]
 8007e3c:	605d      	str	r5, [r3, #4]
 8007e3e:	68f3      	ldr	r3, [r6, #12]
 8007e40:	3301      	adds	r3, #1
 8007e42:	60f3      	str	r3, [r6, #12]
 8007e44:	9802      	ldr	r0, [sp, #8]
 8007e46:	b00b      	add	sp, #44	; 0x2c
 8007e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e4a:	9b07      	ldr	r3, [sp, #28]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d0e4      	beq.n	8007e1a <_scanf_float+0x36e>
 8007e50:	9b08      	ldr	r3, [sp, #32]
 8007e52:	9a02      	ldr	r2, [sp, #8]
 8007e54:	1c59      	adds	r1, r3, #1
 8007e56:	9801      	ldr	r0, [sp, #4]
 8007e58:	230a      	movs	r3, #10
 8007e5a:	f000 ff15 	bl	8008c88 <_strtol_r>
 8007e5e:	9b07      	ldr	r3, [sp, #28]
 8007e60:	9f08      	ldr	r7, [sp, #32]
 8007e62:	1ac2      	subs	r2, r0, r3
 8007e64:	0033      	movs	r3, r6
 8007e66:	3370      	adds	r3, #112	; 0x70
 8007e68:	33ff      	adds	r3, #255	; 0xff
 8007e6a:	429f      	cmp	r7, r3
 8007e6c:	d302      	bcc.n	8007e74 <_scanf_float+0x3c8>
 8007e6e:	0037      	movs	r7, r6
 8007e70:	376f      	adds	r7, #111	; 0x6f
 8007e72:	37ff      	adds	r7, #255	; 0xff
 8007e74:	0038      	movs	r0, r7
 8007e76:	490f      	ldr	r1, [pc, #60]	; (8007eb4 <_scanf_float+0x408>)
 8007e78:	f000 f824 	bl	8007ec4 <siprintf>
 8007e7c:	e7cd      	b.n	8007e1a <_scanf_float+0x36e>
 8007e7e:	1d1a      	adds	r2, r3, #4
 8007e80:	0749      	lsls	r1, r1, #29
 8007e82:	d4d7      	bmi.n	8007e34 <_scanf_float+0x388>
 8007e84:	9906      	ldr	r1, [sp, #24]
 8007e86:	0020      	movs	r0, r4
 8007e88:	600a      	str	r2, [r1, #0]
 8007e8a:	681f      	ldr	r7, [r3, #0]
 8007e8c:	0022      	movs	r2, r4
 8007e8e:	002b      	movs	r3, r5
 8007e90:	0029      	movs	r1, r5
 8007e92:	f7fa f99f 	bl	80021d4 <__aeabi_dcmpun>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d004      	beq.n	8007ea4 <_scanf_float+0x3f8>
 8007e9a:	4807      	ldr	r0, [pc, #28]	; (8007eb8 <_scanf_float+0x40c>)
 8007e9c:	f000 f80e 	bl	8007ebc <nanf>
 8007ea0:	6038      	str	r0, [r7, #0]
 8007ea2:	e7cc      	b.n	8007e3e <_scanf_float+0x392>
 8007ea4:	0020      	movs	r0, r4
 8007ea6:	0029      	movs	r1, r5
 8007ea8:	f7fa fa86 	bl	80023b8 <__aeabi_d2f>
 8007eac:	e7f8      	b.n	8007ea0 <_scanf_float+0x3f4>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e640      	b.n	8007b34 <_scanf_float+0x88>
 8007eb2:	46c0      	nop			; (mov r8, r8)
 8007eb4:	0800bee0 	.word	0x0800bee0
 8007eb8:	0800c2e8 	.word	0x0800c2e8

08007ebc <nanf>:
 8007ebc:	4800      	ldr	r0, [pc, #0]	; (8007ec0 <nanf+0x4>)
 8007ebe:	4770      	bx	lr
 8007ec0:	7fc00000 	.word	0x7fc00000

08007ec4 <siprintf>:
 8007ec4:	b40e      	push	{r1, r2, r3}
 8007ec6:	b500      	push	{lr}
 8007ec8:	490b      	ldr	r1, [pc, #44]	; (8007ef8 <siprintf+0x34>)
 8007eca:	b09c      	sub	sp, #112	; 0x70
 8007ecc:	ab1d      	add	r3, sp, #116	; 0x74
 8007ece:	9002      	str	r0, [sp, #8]
 8007ed0:	9006      	str	r0, [sp, #24]
 8007ed2:	9107      	str	r1, [sp, #28]
 8007ed4:	9104      	str	r1, [sp, #16]
 8007ed6:	4809      	ldr	r0, [pc, #36]	; (8007efc <siprintf+0x38>)
 8007ed8:	4909      	ldr	r1, [pc, #36]	; (8007f00 <siprintf+0x3c>)
 8007eda:	cb04      	ldmia	r3!, {r2}
 8007edc:	9105      	str	r1, [sp, #20]
 8007ede:	6800      	ldr	r0, [r0, #0]
 8007ee0:	a902      	add	r1, sp, #8
 8007ee2:	9301      	str	r3, [sp, #4]
 8007ee4:	f002 ff5c 	bl	800ada0 <_svfiprintf_r>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	9a02      	ldr	r2, [sp, #8]
 8007eec:	7013      	strb	r3, [r2, #0]
 8007eee:	b01c      	add	sp, #112	; 0x70
 8007ef0:	bc08      	pop	{r3}
 8007ef2:	b003      	add	sp, #12
 8007ef4:	4718      	bx	r3
 8007ef6:	46c0      	nop			; (mov r8, r8)
 8007ef8:	7fffffff 	.word	0x7fffffff
 8007efc:	20000030 	.word	0x20000030
 8007f00:	ffff0208 	.word	0xffff0208

08007f04 <sulp>:
 8007f04:	b570      	push	{r4, r5, r6, lr}
 8007f06:	0016      	movs	r6, r2
 8007f08:	000d      	movs	r5, r1
 8007f0a:	f002 fc93 	bl	800a834 <__ulp>
 8007f0e:	2e00      	cmp	r6, #0
 8007f10:	d00d      	beq.n	8007f2e <sulp+0x2a>
 8007f12:	236b      	movs	r3, #107	; 0x6b
 8007f14:	006a      	lsls	r2, r5, #1
 8007f16:	0d52      	lsrs	r2, r2, #21
 8007f18:	1a9b      	subs	r3, r3, r2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	dd07      	ble.n	8007f2e <sulp+0x2a>
 8007f1e:	2400      	movs	r4, #0
 8007f20:	4a03      	ldr	r2, [pc, #12]	; (8007f30 <sulp+0x2c>)
 8007f22:	051b      	lsls	r3, r3, #20
 8007f24:	189d      	adds	r5, r3, r2
 8007f26:	002b      	movs	r3, r5
 8007f28:	0022      	movs	r2, r4
 8007f2a:	f7f9 fb55 	bl	80015d8 <__aeabi_dmul>
 8007f2e:	bd70      	pop	{r4, r5, r6, pc}
 8007f30:	3ff00000 	.word	0x3ff00000

08007f34 <_strtod_l>:
 8007f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f36:	001d      	movs	r5, r3
 8007f38:	2300      	movs	r3, #0
 8007f3a:	b0a5      	sub	sp, #148	; 0x94
 8007f3c:	9320      	str	r3, [sp, #128]	; 0x80
 8007f3e:	4bac      	ldr	r3, [pc, #688]	; (80081f0 <_strtod_l+0x2bc>)
 8007f40:	9005      	str	r0, [sp, #20]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	9108      	str	r1, [sp, #32]
 8007f46:	0018      	movs	r0, r3
 8007f48:	9307      	str	r3, [sp, #28]
 8007f4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8007f4c:	f7f8 f8dc 	bl	8000108 <strlen>
 8007f50:	2600      	movs	r6, #0
 8007f52:	0004      	movs	r4, r0
 8007f54:	2700      	movs	r7, #0
 8007f56:	9b08      	ldr	r3, [sp, #32]
 8007f58:	931f      	str	r3, [sp, #124]	; 0x7c
 8007f5a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007f5c:	7813      	ldrb	r3, [r2, #0]
 8007f5e:	2b2b      	cmp	r3, #43	; 0x2b
 8007f60:	d058      	beq.n	8008014 <_strtod_l+0xe0>
 8007f62:	d844      	bhi.n	8007fee <_strtod_l+0xba>
 8007f64:	2b0d      	cmp	r3, #13
 8007f66:	d83d      	bhi.n	8007fe4 <_strtod_l+0xb0>
 8007f68:	2b08      	cmp	r3, #8
 8007f6a:	d83d      	bhi.n	8007fe8 <_strtod_l+0xb4>
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d047      	beq.n	8008000 <_strtod_l+0xcc>
 8007f70:	2300      	movs	r3, #0
 8007f72:	930e      	str	r3, [sp, #56]	; 0x38
 8007f74:	2200      	movs	r2, #0
 8007f76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f78:	920a      	str	r2, [sp, #40]	; 0x28
 8007f7a:	9306      	str	r3, [sp, #24]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b30      	cmp	r3, #48	; 0x30
 8007f80:	d000      	beq.n	8007f84 <_strtod_l+0x50>
 8007f82:	e07f      	b.n	8008084 <_strtod_l+0x150>
 8007f84:	9b06      	ldr	r3, [sp, #24]
 8007f86:	3220      	adds	r2, #32
 8007f88:	785b      	ldrb	r3, [r3, #1]
 8007f8a:	4393      	bics	r3, r2
 8007f8c:	2b58      	cmp	r3, #88	; 0x58
 8007f8e:	d000      	beq.n	8007f92 <_strtod_l+0x5e>
 8007f90:	e06e      	b.n	8008070 <_strtod_l+0x13c>
 8007f92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f94:	9502      	str	r5, [sp, #8]
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	ab20      	add	r3, sp, #128	; 0x80
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	4a95      	ldr	r2, [pc, #596]	; (80081f4 <_strtod_l+0x2c0>)
 8007f9e:	ab21      	add	r3, sp, #132	; 0x84
 8007fa0:	9805      	ldr	r0, [sp, #20]
 8007fa2:	a91f      	add	r1, sp, #124	; 0x7c
 8007fa4:	f001 fd84 	bl	8009ab0 <__gethex>
 8007fa8:	2307      	movs	r3, #7
 8007faa:	0005      	movs	r5, r0
 8007fac:	0004      	movs	r4, r0
 8007fae:	401d      	ands	r5, r3
 8007fb0:	4218      	tst	r0, r3
 8007fb2:	d006      	beq.n	8007fc2 <_strtod_l+0x8e>
 8007fb4:	2d06      	cmp	r5, #6
 8007fb6:	d12f      	bne.n	8008018 <_strtod_l+0xe4>
 8007fb8:	9b06      	ldr	r3, [sp, #24]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	931f      	str	r3, [sp, #124]	; 0x7c
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	930e      	str	r3, [sp, #56]	; 0x38
 8007fc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <_strtod_l+0x9a>
 8007fc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d01c      	beq.n	800800e <_strtod_l+0xda>
 8007fd4:	2380      	movs	r3, #128	; 0x80
 8007fd6:	0032      	movs	r2, r6
 8007fd8:	061b      	lsls	r3, r3, #24
 8007fda:	18fb      	adds	r3, r7, r3
 8007fdc:	0010      	movs	r0, r2
 8007fde:	0019      	movs	r1, r3
 8007fe0:	b025      	add	sp, #148	; 0x94
 8007fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fe4:	2b20      	cmp	r3, #32
 8007fe6:	d1c3      	bne.n	8007f70 <_strtod_l+0x3c>
 8007fe8:	3201      	adds	r2, #1
 8007fea:	921f      	str	r2, [sp, #124]	; 0x7c
 8007fec:	e7b5      	b.n	8007f5a <_strtod_l+0x26>
 8007fee:	2b2d      	cmp	r3, #45	; 0x2d
 8007ff0:	d1be      	bne.n	8007f70 <_strtod_l+0x3c>
 8007ff2:	3b2c      	subs	r3, #44	; 0x2c
 8007ff4:	930e      	str	r3, [sp, #56]	; 0x38
 8007ff6:	1c53      	adds	r3, r2, #1
 8007ff8:	931f      	str	r3, [sp, #124]	; 0x7c
 8007ffa:	7853      	ldrb	r3, [r2, #1]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1b9      	bne.n	8007f74 <_strtod_l+0x40>
 8008000:	9b08      	ldr	r3, [sp, #32]
 8008002:	931f      	str	r3, [sp, #124]	; 0x7c
 8008004:	2300      	movs	r3, #0
 8008006:	930e      	str	r3, [sp, #56]	; 0x38
 8008008:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1dc      	bne.n	8007fc8 <_strtod_l+0x94>
 800800e:	0032      	movs	r2, r6
 8008010:	003b      	movs	r3, r7
 8008012:	e7e3      	b.n	8007fdc <_strtod_l+0xa8>
 8008014:	2300      	movs	r3, #0
 8008016:	e7ed      	b.n	8007ff4 <_strtod_l+0xc0>
 8008018:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800801a:	2a00      	cmp	r2, #0
 800801c:	d007      	beq.n	800802e <_strtod_l+0xfa>
 800801e:	2135      	movs	r1, #53	; 0x35
 8008020:	a822      	add	r0, sp, #136	; 0x88
 8008022:	f002 fd08 	bl	800aa36 <__copybits>
 8008026:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008028:	9805      	ldr	r0, [sp, #20]
 800802a:	f002 f8c3 	bl	800a1b4 <_Bfree>
 800802e:	1e68      	subs	r0, r5, #1
 8008030:	2804      	cmp	r0, #4
 8008032:	d806      	bhi.n	8008042 <_strtod_l+0x10e>
 8008034:	f7f8 f870 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008038:	1816030b 	.word	0x1816030b
 800803c:	0b          	.byte	0x0b
 800803d:	00          	.byte	0x00
 800803e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8008040:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8008042:	0723      	lsls	r3, r4, #28
 8008044:	d5bd      	bpl.n	8007fc2 <_strtod_l+0x8e>
 8008046:	2380      	movs	r3, #128	; 0x80
 8008048:	061b      	lsls	r3, r3, #24
 800804a:	431f      	orrs	r7, r3
 800804c:	e7b9      	b.n	8007fc2 <_strtod_l+0x8e>
 800804e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008050:	4a69      	ldr	r2, [pc, #420]	; (80081f8 <_strtod_l+0x2c4>)
 8008052:	496a      	ldr	r1, [pc, #424]	; (80081fc <_strtod_l+0x2c8>)
 8008054:	401a      	ands	r2, r3
 8008056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008058:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800805a:	185b      	adds	r3, r3, r1
 800805c:	051b      	lsls	r3, r3, #20
 800805e:	431a      	orrs	r2, r3
 8008060:	0017      	movs	r7, r2
 8008062:	e7ee      	b.n	8008042 <_strtod_l+0x10e>
 8008064:	4f66      	ldr	r7, [pc, #408]	; (8008200 <_strtod_l+0x2cc>)
 8008066:	e7ec      	b.n	8008042 <_strtod_l+0x10e>
 8008068:	2601      	movs	r6, #1
 800806a:	4f66      	ldr	r7, [pc, #408]	; (8008204 <_strtod_l+0x2d0>)
 800806c:	4276      	negs	r6, r6
 800806e:	e7e8      	b.n	8008042 <_strtod_l+0x10e>
 8008070:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	921f      	str	r2, [sp, #124]	; 0x7c
 8008076:	785b      	ldrb	r3, [r3, #1]
 8008078:	2b30      	cmp	r3, #48	; 0x30
 800807a:	d0f9      	beq.n	8008070 <_strtod_l+0x13c>
 800807c:	2b00      	cmp	r3, #0
 800807e:	d0a0      	beq.n	8007fc2 <_strtod_l+0x8e>
 8008080:	2301      	movs	r3, #1
 8008082:	930a      	str	r3, [sp, #40]	; 0x28
 8008084:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008086:	220a      	movs	r2, #10
 8008088:	9310      	str	r3, [sp, #64]	; 0x40
 800808a:	2300      	movs	r3, #0
 800808c:	930f      	str	r3, [sp, #60]	; 0x3c
 800808e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008090:	9309      	str	r3, [sp, #36]	; 0x24
 8008092:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008094:	7805      	ldrb	r5, [r0, #0]
 8008096:	002b      	movs	r3, r5
 8008098:	3b30      	subs	r3, #48	; 0x30
 800809a:	b2d9      	uxtb	r1, r3
 800809c:	2909      	cmp	r1, #9
 800809e:	d927      	bls.n	80080f0 <_strtod_l+0x1bc>
 80080a0:	0022      	movs	r2, r4
 80080a2:	9907      	ldr	r1, [sp, #28]
 80080a4:	f002 ff94 	bl	800afd0 <strncmp>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d033      	beq.n	8008114 <_strtod_l+0x1e0>
 80080ac:	2000      	movs	r0, #0
 80080ae:	002b      	movs	r3, r5
 80080b0:	4684      	mov	ip, r0
 80080b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080b4:	900c      	str	r0, [sp, #48]	; 0x30
 80080b6:	9206      	str	r2, [sp, #24]
 80080b8:	2220      	movs	r2, #32
 80080ba:	0019      	movs	r1, r3
 80080bc:	4391      	bics	r1, r2
 80080be:	000a      	movs	r2, r1
 80080c0:	2100      	movs	r1, #0
 80080c2:	9107      	str	r1, [sp, #28]
 80080c4:	2a45      	cmp	r2, #69	; 0x45
 80080c6:	d000      	beq.n	80080ca <_strtod_l+0x196>
 80080c8:	e0c5      	b.n	8008256 <_strtod_l+0x322>
 80080ca:	9b06      	ldr	r3, [sp, #24]
 80080cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080ce:	4303      	orrs	r3, r0
 80080d0:	4313      	orrs	r3, r2
 80080d2:	428b      	cmp	r3, r1
 80080d4:	d094      	beq.n	8008000 <_strtod_l+0xcc>
 80080d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80080d8:	9308      	str	r3, [sp, #32]
 80080da:	3301      	adds	r3, #1
 80080dc:	931f      	str	r3, [sp, #124]	; 0x7c
 80080de:	9b08      	ldr	r3, [sp, #32]
 80080e0:	785b      	ldrb	r3, [r3, #1]
 80080e2:	2b2b      	cmp	r3, #43	; 0x2b
 80080e4:	d076      	beq.n	80081d4 <_strtod_l+0x2a0>
 80080e6:	000c      	movs	r4, r1
 80080e8:	2b2d      	cmp	r3, #45	; 0x2d
 80080ea:	d179      	bne.n	80081e0 <_strtod_l+0x2ac>
 80080ec:	2401      	movs	r4, #1
 80080ee:	e072      	b.n	80081d6 <_strtod_l+0x2a2>
 80080f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080f2:	2908      	cmp	r1, #8
 80080f4:	dc09      	bgt.n	800810a <_strtod_l+0x1d6>
 80080f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080f8:	4351      	muls	r1, r2
 80080fa:	185b      	adds	r3, r3, r1
 80080fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80080fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008100:	3001      	adds	r0, #1
 8008102:	3301      	adds	r3, #1
 8008104:	9309      	str	r3, [sp, #36]	; 0x24
 8008106:	901f      	str	r0, [sp, #124]	; 0x7c
 8008108:	e7c3      	b.n	8008092 <_strtod_l+0x15e>
 800810a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800810c:	4351      	muls	r1, r2
 800810e:	185b      	adds	r3, r3, r1
 8008110:	930f      	str	r3, [sp, #60]	; 0x3c
 8008112:	e7f4      	b.n	80080fe <_strtod_l+0x1ca>
 8008114:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008118:	191c      	adds	r4, r3, r4
 800811a:	941f      	str	r4, [sp, #124]	; 0x7c
 800811c:	7823      	ldrb	r3, [r4, #0]
 800811e:	2a00      	cmp	r2, #0
 8008120:	d039      	beq.n	8008196 <_strtod_l+0x262>
 8008122:	900c      	str	r0, [sp, #48]	; 0x30
 8008124:	9206      	str	r2, [sp, #24]
 8008126:	001a      	movs	r2, r3
 8008128:	3a30      	subs	r2, #48	; 0x30
 800812a:	2a09      	cmp	r2, #9
 800812c:	d912      	bls.n	8008154 <_strtod_l+0x220>
 800812e:	2201      	movs	r2, #1
 8008130:	4694      	mov	ip, r2
 8008132:	e7c1      	b.n	80080b8 <_strtod_l+0x184>
 8008134:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008136:	3001      	adds	r0, #1
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	921f      	str	r2, [sp, #124]	; 0x7c
 800813c:	785b      	ldrb	r3, [r3, #1]
 800813e:	2b30      	cmp	r3, #48	; 0x30
 8008140:	d0f8      	beq.n	8008134 <_strtod_l+0x200>
 8008142:	001a      	movs	r2, r3
 8008144:	3a31      	subs	r2, #49	; 0x31
 8008146:	2a08      	cmp	r2, #8
 8008148:	d83f      	bhi.n	80081ca <_strtod_l+0x296>
 800814a:	900c      	str	r0, [sp, #48]	; 0x30
 800814c:	2000      	movs	r0, #0
 800814e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008150:	9006      	str	r0, [sp, #24]
 8008152:	9210      	str	r2, [sp, #64]	; 0x40
 8008154:	001a      	movs	r2, r3
 8008156:	1c41      	adds	r1, r0, #1
 8008158:	3a30      	subs	r2, #48	; 0x30
 800815a:	2b30      	cmp	r3, #48	; 0x30
 800815c:	d015      	beq.n	800818a <_strtod_l+0x256>
 800815e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008160:	185b      	adds	r3, r3, r1
 8008162:	210a      	movs	r1, #10
 8008164:	930c      	str	r3, [sp, #48]	; 0x30
 8008166:	9b06      	ldr	r3, [sp, #24]
 8008168:	18c4      	adds	r4, r0, r3
 800816a:	42a3      	cmp	r3, r4
 800816c:	d115      	bne.n	800819a <_strtod_l+0x266>
 800816e:	9906      	ldr	r1, [sp, #24]
 8008170:	9b06      	ldr	r3, [sp, #24]
 8008172:	3101      	adds	r1, #1
 8008174:	1809      	adds	r1, r1, r0
 8008176:	181b      	adds	r3, r3, r0
 8008178:	9106      	str	r1, [sp, #24]
 800817a:	2b08      	cmp	r3, #8
 800817c:	dc1b      	bgt.n	80081b6 <_strtod_l+0x282>
 800817e:	230a      	movs	r3, #10
 8008180:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008182:	434b      	muls	r3, r1
 8008184:	2100      	movs	r1, #0
 8008186:	18d3      	adds	r3, r2, r3
 8008188:	930b      	str	r3, [sp, #44]	; 0x2c
 800818a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800818c:	0008      	movs	r0, r1
 800818e:	1c5a      	adds	r2, r3, #1
 8008190:	921f      	str	r2, [sp, #124]	; 0x7c
 8008192:	785b      	ldrb	r3, [r3, #1]
 8008194:	e7c7      	b.n	8008126 <_strtod_l+0x1f2>
 8008196:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008198:	e7d1      	b.n	800813e <_strtod_l+0x20a>
 800819a:	2b08      	cmp	r3, #8
 800819c:	dc04      	bgt.n	80081a8 <_strtod_l+0x274>
 800819e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80081a0:	434d      	muls	r5, r1
 80081a2:	950b      	str	r5, [sp, #44]	; 0x2c
 80081a4:	3301      	adds	r3, #1
 80081a6:	e7e0      	b.n	800816a <_strtod_l+0x236>
 80081a8:	1c5d      	adds	r5, r3, #1
 80081aa:	2d10      	cmp	r5, #16
 80081ac:	dcfa      	bgt.n	80081a4 <_strtod_l+0x270>
 80081ae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80081b0:	434d      	muls	r5, r1
 80081b2:	950f      	str	r5, [sp, #60]	; 0x3c
 80081b4:	e7f6      	b.n	80081a4 <_strtod_l+0x270>
 80081b6:	9b06      	ldr	r3, [sp, #24]
 80081b8:	2100      	movs	r1, #0
 80081ba:	2b10      	cmp	r3, #16
 80081bc:	dce5      	bgt.n	800818a <_strtod_l+0x256>
 80081be:	230a      	movs	r3, #10
 80081c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80081c2:	4343      	muls	r3, r0
 80081c4:	18d3      	adds	r3, r2, r3
 80081c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80081c8:	e7df      	b.n	800818a <_strtod_l+0x256>
 80081ca:	2200      	movs	r2, #0
 80081cc:	920c      	str	r2, [sp, #48]	; 0x30
 80081ce:	9206      	str	r2, [sp, #24]
 80081d0:	3201      	adds	r2, #1
 80081d2:	e7ad      	b.n	8008130 <_strtod_l+0x1fc>
 80081d4:	2400      	movs	r4, #0
 80081d6:	9b08      	ldr	r3, [sp, #32]
 80081d8:	3302      	adds	r3, #2
 80081da:	931f      	str	r3, [sp, #124]	; 0x7c
 80081dc:	9b08      	ldr	r3, [sp, #32]
 80081de:	789b      	ldrb	r3, [r3, #2]
 80081e0:	001a      	movs	r2, r3
 80081e2:	3a30      	subs	r2, #48	; 0x30
 80081e4:	2a09      	cmp	r2, #9
 80081e6:	d913      	bls.n	8008210 <_strtod_l+0x2dc>
 80081e8:	9a08      	ldr	r2, [sp, #32]
 80081ea:	921f      	str	r2, [sp, #124]	; 0x7c
 80081ec:	2200      	movs	r2, #0
 80081ee:	e031      	b.n	8008254 <_strtod_l+0x320>
 80081f0:	0800c130 	.word	0x0800c130
 80081f4:	0800bee8 	.word	0x0800bee8
 80081f8:	ffefffff 	.word	0xffefffff
 80081fc:	00000433 	.word	0x00000433
 8008200:	7ff00000 	.word	0x7ff00000
 8008204:	7fffffff 	.word	0x7fffffff
 8008208:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	921f      	str	r2, [sp, #124]	; 0x7c
 800820e:	785b      	ldrb	r3, [r3, #1]
 8008210:	2b30      	cmp	r3, #48	; 0x30
 8008212:	d0f9      	beq.n	8008208 <_strtod_l+0x2d4>
 8008214:	2200      	movs	r2, #0
 8008216:	9207      	str	r2, [sp, #28]
 8008218:	001a      	movs	r2, r3
 800821a:	3a31      	subs	r2, #49	; 0x31
 800821c:	2a08      	cmp	r2, #8
 800821e:	d81a      	bhi.n	8008256 <_strtod_l+0x322>
 8008220:	3b30      	subs	r3, #48	; 0x30
 8008222:	001a      	movs	r2, r3
 8008224:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008226:	9307      	str	r3, [sp, #28]
 8008228:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800822a:	1c59      	adds	r1, r3, #1
 800822c:	911f      	str	r1, [sp, #124]	; 0x7c
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	001d      	movs	r5, r3
 8008232:	3d30      	subs	r5, #48	; 0x30
 8008234:	2d09      	cmp	r5, #9
 8008236:	d939      	bls.n	80082ac <_strtod_l+0x378>
 8008238:	9d07      	ldr	r5, [sp, #28]
 800823a:	1b49      	subs	r1, r1, r5
 800823c:	4db0      	ldr	r5, [pc, #704]	; (8008500 <_strtod_l+0x5cc>)
 800823e:	9507      	str	r5, [sp, #28]
 8008240:	2908      	cmp	r1, #8
 8008242:	dc03      	bgt.n	800824c <_strtod_l+0x318>
 8008244:	9207      	str	r2, [sp, #28]
 8008246:	42aa      	cmp	r2, r5
 8008248:	dd00      	ble.n	800824c <_strtod_l+0x318>
 800824a:	9507      	str	r5, [sp, #28]
 800824c:	2c00      	cmp	r4, #0
 800824e:	d002      	beq.n	8008256 <_strtod_l+0x322>
 8008250:	9a07      	ldr	r2, [sp, #28]
 8008252:	4252      	negs	r2, r2
 8008254:	9207      	str	r2, [sp, #28]
 8008256:	9a06      	ldr	r2, [sp, #24]
 8008258:	2a00      	cmp	r2, #0
 800825a:	d14b      	bne.n	80082f4 <_strtod_l+0x3c0>
 800825c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800825e:	4310      	orrs	r0, r2
 8008260:	d000      	beq.n	8008264 <_strtod_l+0x330>
 8008262:	e6ae      	b.n	8007fc2 <_strtod_l+0x8e>
 8008264:	4662      	mov	r2, ip
 8008266:	2a00      	cmp	r2, #0
 8008268:	d000      	beq.n	800826c <_strtod_l+0x338>
 800826a:	e6c9      	b.n	8008000 <_strtod_l+0xcc>
 800826c:	2b69      	cmp	r3, #105	; 0x69
 800826e:	d025      	beq.n	80082bc <_strtod_l+0x388>
 8008270:	dc21      	bgt.n	80082b6 <_strtod_l+0x382>
 8008272:	2b49      	cmp	r3, #73	; 0x49
 8008274:	d022      	beq.n	80082bc <_strtod_l+0x388>
 8008276:	2b4e      	cmp	r3, #78	; 0x4e
 8008278:	d000      	beq.n	800827c <_strtod_l+0x348>
 800827a:	e6c1      	b.n	8008000 <_strtod_l+0xcc>
 800827c:	49a1      	ldr	r1, [pc, #644]	; (8008504 <_strtod_l+0x5d0>)
 800827e:	a81f      	add	r0, sp, #124	; 0x7c
 8008280:	f001 fe64 	bl	8009f4c <__match>
 8008284:	2800      	cmp	r0, #0
 8008286:	d100      	bne.n	800828a <_strtod_l+0x356>
 8008288:	e6ba      	b.n	8008000 <_strtod_l+0xcc>
 800828a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	2b28      	cmp	r3, #40	; 0x28
 8008290:	d12a      	bne.n	80082e8 <_strtod_l+0x3b4>
 8008292:	499d      	ldr	r1, [pc, #628]	; (8008508 <_strtod_l+0x5d4>)
 8008294:	aa22      	add	r2, sp, #136	; 0x88
 8008296:	a81f      	add	r0, sp, #124	; 0x7c
 8008298:	f001 fe6c 	bl	8009f74 <__hexnan>
 800829c:	2805      	cmp	r0, #5
 800829e:	d123      	bne.n	80082e8 <_strtod_l+0x3b4>
 80082a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082a2:	4a9a      	ldr	r2, [pc, #616]	; (800850c <_strtod_l+0x5d8>)
 80082a4:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80082a6:	431a      	orrs	r2, r3
 80082a8:	0017      	movs	r7, r2
 80082aa:	e68a      	b.n	8007fc2 <_strtod_l+0x8e>
 80082ac:	210a      	movs	r1, #10
 80082ae:	434a      	muls	r2, r1
 80082b0:	18d2      	adds	r2, r2, r3
 80082b2:	3a30      	subs	r2, #48	; 0x30
 80082b4:	e7b8      	b.n	8008228 <_strtod_l+0x2f4>
 80082b6:	2b6e      	cmp	r3, #110	; 0x6e
 80082b8:	d0e0      	beq.n	800827c <_strtod_l+0x348>
 80082ba:	e6a1      	b.n	8008000 <_strtod_l+0xcc>
 80082bc:	4994      	ldr	r1, [pc, #592]	; (8008510 <_strtod_l+0x5dc>)
 80082be:	a81f      	add	r0, sp, #124	; 0x7c
 80082c0:	f001 fe44 	bl	8009f4c <__match>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d100      	bne.n	80082ca <_strtod_l+0x396>
 80082c8:	e69a      	b.n	8008000 <_strtod_l+0xcc>
 80082ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80082cc:	4991      	ldr	r1, [pc, #580]	; (8008514 <_strtod_l+0x5e0>)
 80082ce:	3b01      	subs	r3, #1
 80082d0:	a81f      	add	r0, sp, #124	; 0x7c
 80082d2:	931f      	str	r3, [sp, #124]	; 0x7c
 80082d4:	f001 fe3a 	bl	8009f4c <__match>
 80082d8:	2800      	cmp	r0, #0
 80082da:	d102      	bne.n	80082e2 <_strtod_l+0x3ae>
 80082dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80082de:	3301      	adds	r3, #1
 80082e0:	931f      	str	r3, [sp, #124]	; 0x7c
 80082e2:	2600      	movs	r6, #0
 80082e4:	4f89      	ldr	r7, [pc, #548]	; (800850c <_strtod_l+0x5d8>)
 80082e6:	e66c      	b.n	8007fc2 <_strtod_l+0x8e>
 80082e8:	488b      	ldr	r0, [pc, #556]	; (8008518 <_strtod_l+0x5e4>)
 80082ea:	f002 fe59 	bl	800afa0 <nan>
 80082ee:	0006      	movs	r6, r0
 80082f0:	000f      	movs	r7, r1
 80082f2:	e666      	b.n	8007fc2 <_strtod_l+0x8e>
 80082f4:	9b07      	ldr	r3, [sp, #28]
 80082f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082f8:	1a9b      	subs	r3, r3, r2
 80082fa:	930a      	str	r3, [sp, #40]	; 0x28
 80082fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <_strtod_l+0x3d2>
 8008302:	9b06      	ldr	r3, [sp, #24]
 8008304:	9309      	str	r3, [sp, #36]	; 0x24
 8008306:	9c06      	ldr	r4, [sp, #24]
 8008308:	2c10      	cmp	r4, #16
 800830a:	dd00      	ble.n	800830e <_strtod_l+0x3da>
 800830c:	2410      	movs	r4, #16
 800830e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008310:	f7f9 ffe4 	bl	80022dc <__aeabi_ui2d>
 8008314:	9b06      	ldr	r3, [sp, #24]
 8008316:	0006      	movs	r6, r0
 8008318:	000f      	movs	r7, r1
 800831a:	2b09      	cmp	r3, #9
 800831c:	dd15      	ble.n	800834a <_strtod_l+0x416>
 800831e:	0022      	movs	r2, r4
 8008320:	4b7e      	ldr	r3, [pc, #504]	; (800851c <_strtod_l+0x5e8>)
 8008322:	3a09      	subs	r2, #9
 8008324:	00d2      	lsls	r2, r2, #3
 8008326:	189b      	adds	r3, r3, r2
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f7f9 f954 	bl	80015d8 <__aeabi_dmul>
 8008330:	0006      	movs	r6, r0
 8008332:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008334:	000f      	movs	r7, r1
 8008336:	f7f9 ffd1 	bl	80022dc <__aeabi_ui2d>
 800833a:	0002      	movs	r2, r0
 800833c:	000b      	movs	r3, r1
 800833e:	0030      	movs	r0, r6
 8008340:	0039      	movs	r1, r7
 8008342:	f7f8 fa0b 	bl	800075c <__aeabi_dadd>
 8008346:	0006      	movs	r6, r0
 8008348:	000f      	movs	r7, r1
 800834a:	9b06      	ldr	r3, [sp, #24]
 800834c:	2b0f      	cmp	r3, #15
 800834e:	dc39      	bgt.n	80083c4 <_strtod_l+0x490>
 8008350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008352:	2b00      	cmp	r3, #0
 8008354:	d100      	bne.n	8008358 <_strtod_l+0x424>
 8008356:	e634      	b.n	8007fc2 <_strtod_l+0x8e>
 8008358:	dd24      	ble.n	80083a4 <_strtod_l+0x470>
 800835a:	2b16      	cmp	r3, #22
 800835c:	dc09      	bgt.n	8008372 <_strtod_l+0x43e>
 800835e:	496f      	ldr	r1, [pc, #444]	; (800851c <_strtod_l+0x5e8>)
 8008360:	00db      	lsls	r3, r3, #3
 8008362:	18c9      	adds	r1, r1, r3
 8008364:	0032      	movs	r2, r6
 8008366:	6808      	ldr	r0, [r1, #0]
 8008368:	6849      	ldr	r1, [r1, #4]
 800836a:	003b      	movs	r3, r7
 800836c:	f7f9 f934 	bl	80015d8 <__aeabi_dmul>
 8008370:	e7bd      	b.n	80082ee <_strtod_l+0x3ba>
 8008372:	2325      	movs	r3, #37	; 0x25
 8008374:	9a06      	ldr	r2, [sp, #24]
 8008376:	1a9b      	subs	r3, r3, r2
 8008378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800837a:	4293      	cmp	r3, r2
 800837c:	db22      	blt.n	80083c4 <_strtod_l+0x490>
 800837e:	240f      	movs	r4, #15
 8008380:	9b06      	ldr	r3, [sp, #24]
 8008382:	4d66      	ldr	r5, [pc, #408]	; (800851c <_strtod_l+0x5e8>)
 8008384:	1ae4      	subs	r4, r4, r3
 8008386:	00e1      	lsls	r1, r4, #3
 8008388:	1869      	adds	r1, r5, r1
 800838a:	0032      	movs	r2, r6
 800838c:	6808      	ldr	r0, [r1, #0]
 800838e:	6849      	ldr	r1, [r1, #4]
 8008390:	003b      	movs	r3, r7
 8008392:	f7f9 f921 	bl	80015d8 <__aeabi_dmul>
 8008396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008398:	1b1c      	subs	r4, r3, r4
 800839a:	00e4      	lsls	r4, r4, #3
 800839c:	192c      	adds	r4, r5, r4
 800839e:	6822      	ldr	r2, [r4, #0]
 80083a0:	6863      	ldr	r3, [r4, #4]
 80083a2:	e7e3      	b.n	800836c <_strtod_l+0x438>
 80083a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a6:	3316      	adds	r3, #22
 80083a8:	db0c      	blt.n	80083c4 <_strtod_l+0x490>
 80083aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083ac:	9a07      	ldr	r2, [sp, #28]
 80083ae:	0030      	movs	r0, r6
 80083b0:	1a9a      	subs	r2, r3, r2
 80083b2:	4b5a      	ldr	r3, [pc, #360]	; (800851c <_strtod_l+0x5e8>)
 80083b4:	00d2      	lsls	r2, r2, #3
 80083b6:	189b      	adds	r3, r3, r2
 80083b8:	0039      	movs	r1, r7
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f7f8 fd09 	bl	8000dd4 <__aeabi_ddiv>
 80083c2:	e794      	b.n	80082ee <_strtod_l+0x3ba>
 80083c4:	9b06      	ldr	r3, [sp, #24]
 80083c6:	1b1c      	subs	r4, r3, r4
 80083c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ca:	18e4      	adds	r4, r4, r3
 80083cc:	2c00      	cmp	r4, #0
 80083ce:	dd72      	ble.n	80084b6 <_strtod_l+0x582>
 80083d0:	230f      	movs	r3, #15
 80083d2:	0021      	movs	r1, r4
 80083d4:	4019      	ands	r1, r3
 80083d6:	421c      	tst	r4, r3
 80083d8:	d00a      	beq.n	80083f0 <_strtod_l+0x4bc>
 80083da:	00cb      	lsls	r3, r1, #3
 80083dc:	494f      	ldr	r1, [pc, #316]	; (800851c <_strtod_l+0x5e8>)
 80083de:	0032      	movs	r2, r6
 80083e0:	18c9      	adds	r1, r1, r3
 80083e2:	6808      	ldr	r0, [r1, #0]
 80083e4:	6849      	ldr	r1, [r1, #4]
 80083e6:	003b      	movs	r3, r7
 80083e8:	f7f9 f8f6 	bl	80015d8 <__aeabi_dmul>
 80083ec:	0006      	movs	r6, r0
 80083ee:	000f      	movs	r7, r1
 80083f0:	230f      	movs	r3, #15
 80083f2:	439c      	bics	r4, r3
 80083f4:	d04a      	beq.n	800848c <_strtod_l+0x558>
 80083f6:	3326      	adds	r3, #38	; 0x26
 80083f8:	33ff      	adds	r3, #255	; 0xff
 80083fa:	429c      	cmp	r4, r3
 80083fc:	dd22      	ble.n	8008444 <_strtod_l+0x510>
 80083fe:	2300      	movs	r3, #0
 8008400:	9306      	str	r3, [sp, #24]
 8008402:	9307      	str	r3, [sp, #28]
 8008404:	930b      	str	r3, [sp, #44]	; 0x2c
 8008406:	9309      	str	r3, [sp, #36]	; 0x24
 8008408:	2322      	movs	r3, #34	; 0x22
 800840a:	2600      	movs	r6, #0
 800840c:	9a05      	ldr	r2, [sp, #20]
 800840e:	4f3f      	ldr	r7, [pc, #252]	; (800850c <_strtod_l+0x5d8>)
 8008410:	6013      	str	r3, [r2, #0]
 8008412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008414:	42b3      	cmp	r3, r6
 8008416:	d100      	bne.n	800841a <_strtod_l+0x4e6>
 8008418:	e5d3      	b.n	8007fc2 <_strtod_l+0x8e>
 800841a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800841c:	9805      	ldr	r0, [sp, #20]
 800841e:	f001 fec9 	bl	800a1b4 <_Bfree>
 8008422:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008424:	9805      	ldr	r0, [sp, #20]
 8008426:	f001 fec5 	bl	800a1b4 <_Bfree>
 800842a:	9907      	ldr	r1, [sp, #28]
 800842c:	9805      	ldr	r0, [sp, #20]
 800842e:	f001 fec1 	bl	800a1b4 <_Bfree>
 8008432:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008434:	9805      	ldr	r0, [sp, #20]
 8008436:	f001 febd 	bl	800a1b4 <_Bfree>
 800843a:	9906      	ldr	r1, [sp, #24]
 800843c:	9805      	ldr	r0, [sp, #20]
 800843e:	f001 feb9 	bl	800a1b4 <_Bfree>
 8008442:	e5be      	b.n	8007fc2 <_strtod_l+0x8e>
 8008444:	2300      	movs	r3, #0
 8008446:	0030      	movs	r0, r6
 8008448:	0039      	movs	r1, r7
 800844a:	4d35      	ldr	r5, [pc, #212]	; (8008520 <_strtod_l+0x5ec>)
 800844c:	1124      	asrs	r4, r4, #4
 800844e:	9308      	str	r3, [sp, #32]
 8008450:	2c01      	cmp	r4, #1
 8008452:	dc1e      	bgt.n	8008492 <_strtod_l+0x55e>
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <_strtod_l+0x528>
 8008458:	0006      	movs	r6, r0
 800845a:	000f      	movs	r7, r1
 800845c:	4b31      	ldr	r3, [pc, #196]	; (8008524 <_strtod_l+0x5f0>)
 800845e:	0032      	movs	r2, r6
 8008460:	18ff      	adds	r7, r7, r3
 8008462:	9b08      	ldr	r3, [sp, #32]
 8008464:	00dd      	lsls	r5, r3, #3
 8008466:	4b2e      	ldr	r3, [pc, #184]	; (8008520 <_strtod_l+0x5ec>)
 8008468:	195d      	adds	r5, r3, r5
 800846a:	6828      	ldr	r0, [r5, #0]
 800846c:	6869      	ldr	r1, [r5, #4]
 800846e:	003b      	movs	r3, r7
 8008470:	f7f9 f8b2 	bl	80015d8 <__aeabi_dmul>
 8008474:	4b25      	ldr	r3, [pc, #148]	; (800850c <_strtod_l+0x5d8>)
 8008476:	4a2c      	ldr	r2, [pc, #176]	; (8008528 <_strtod_l+0x5f4>)
 8008478:	0006      	movs	r6, r0
 800847a:	400b      	ands	r3, r1
 800847c:	4293      	cmp	r3, r2
 800847e:	d8be      	bhi.n	80083fe <_strtod_l+0x4ca>
 8008480:	4a2a      	ldr	r2, [pc, #168]	; (800852c <_strtod_l+0x5f8>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d913      	bls.n	80084ae <_strtod_l+0x57a>
 8008486:	2601      	movs	r6, #1
 8008488:	4f29      	ldr	r7, [pc, #164]	; (8008530 <_strtod_l+0x5fc>)
 800848a:	4276      	negs	r6, r6
 800848c:	2300      	movs	r3, #0
 800848e:	9308      	str	r3, [sp, #32]
 8008490:	e087      	b.n	80085a2 <_strtod_l+0x66e>
 8008492:	2201      	movs	r2, #1
 8008494:	4214      	tst	r4, r2
 8008496:	d004      	beq.n	80084a2 <_strtod_l+0x56e>
 8008498:	682a      	ldr	r2, [r5, #0]
 800849a:	686b      	ldr	r3, [r5, #4]
 800849c:	f7f9 f89c 	bl	80015d8 <__aeabi_dmul>
 80084a0:	2301      	movs	r3, #1
 80084a2:	9a08      	ldr	r2, [sp, #32]
 80084a4:	1064      	asrs	r4, r4, #1
 80084a6:	3201      	adds	r2, #1
 80084a8:	9208      	str	r2, [sp, #32]
 80084aa:	3508      	adds	r5, #8
 80084ac:	e7d0      	b.n	8008450 <_strtod_l+0x51c>
 80084ae:	23d4      	movs	r3, #212	; 0xd4
 80084b0:	049b      	lsls	r3, r3, #18
 80084b2:	18cf      	adds	r7, r1, r3
 80084b4:	e7ea      	b.n	800848c <_strtod_l+0x558>
 80084b6:	2c00      	cmp	r4, #0
 80084b8:	d0e8      	beq.n	800848c <_strtod_l+0x558>
 80084ba:	4264      	negs	r4, r4
 80084bc:	220f      	movs	r2, #15
 80084be:	0023      	movs	r3, r4
 80084c0:	4013      	ands	r3, r2
 80084c2:	4214      	tst	r4, r2
 80084c4:	d00a      	beq.n	80084dc <_strtod_l+0x5a8>
 80084c6:	00da      	lsls	r2, r3, #3
 80084c8:	4b14      	ldr	r3, [pc, #80]	; (800851c <_strtod_l+0x5e8>)
 80084ca:	0030      	movs	r0, r6
 80084cc:	189b      	adds	r3, r3, r2
 80084ce:	0039      	movs	r1, r7
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f7f8 fc7e 	bl	8000dd4 <__aeabi_ddiv>
 80084d8:	0006      	movs	r6, r0
 80084da:	000f      	movs	r7, r1
 80084dc:	1124      	asrs	r4, r4, #4
 80084de:	d0d5      	beq.n	800848c <_strtod_l+0x558>
 80084e0:	2c1f      	cmp	r4, #31
 80084e2:	dd27      	ble.n	8008534 <_strtod_l+0x600>
 80084e4:	2300      	movs	r3, #0
 80084e6:	9306      	str	r3, [sp, #24]
 80084e8:	9307      	str	r3, [sp, #28]
 80084ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80084ec:	9309      	str	r3, [sp, #36]	; 0x24
 80084ee:	2322      	movs	r3, #34	; 0x22
 80084f0:	9a05      	ldr	r2, [sp, #20]
 80084f2:	2600      	movs	r6, #0
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084f8:	2700      	movs	r7, #0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d18d      	bne.n	800841a <_strtod_l+0x4e6>
 80084fe:	e560      	b.n	8007fc2 <_strtod_l+0x8e>
 8008500:	00004e1f 	.word	0x00004e1f
 8008504:	0800beb9 	.word	0x0800beb9
 8008508:	0800befc 	.word	0x0800befc
 800850c:	7ff00000 	.word	0x7ff00000
 8008510:	0800beb1 	.word	0x0800beb1
 8008514:	0800c03c 	.word	0x0800c03c
 8008518:	0800c2e8 	.word	0x0800c2e8
 800851c:	0800c1c8 	.word	0x0800c1c8
 8008520:	0800c1a0 	.word	0x0800c1a0
 8008524:	fcb00000 	.word	0xfcb00000
 8008528:	7ca00000 	.word	0x7ca00000
 800852c:	7c900000 	.word	0x7c900000
 8008530:	7fefffff 	.word	0x7fefffff
 8008534:	2310      	movs	r3, #16
 8008536:	0022      	movs	r2, r4
 8008538:	401a      	ands	r2, r3
 800853a:	9208      	str	r2, [sp, #32]
 800853c:	421c      	tst	r4, r3
 800853e:	d001      	beq.n	8008544 <_strtod_l+0x610>
 8008540:	335a      	adds	r3, #90	; 0x5a
 8008542:	9308      	str	r3, [sp, #32]
 8008544:	0030      	movs	r0, r6
 8008546:	0039      	movs	r1, r7
 8008548:	2300      	movs	r3, #0
 800854a:	4dc5      	ldr	r5, [pc, #788]	; (8008860 <_strtod_l+0x92c>)
 800854c:	2201      	movs	r2, #1
 800854e:	4214      	tst	r4, r2
 8008550:	d004      	beq.n	800855c <_strtod_l+0x628>
 8008552:	682a      	ldr	r2, [r5, #0]
 8008554:	686b      	ldr	r3, [r5, #4]
 8008556:	f7f9 f83f 	bl	80015d8 <__aeabi_dmul>
 800855a:	2301      	movs	r3, #1
 800855c:	1064      	asrs	r4, r4, #1
 800855e:	3508      	adds	r5, #8
 8008560:	2c00      	cmp	r4, #0
 8008562:	d1f3      	bne.n	800854c <_strtod_l+0x618>
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <_strtod_l+0x638>
 8008568:	0006      	movs	r6, r0
 800856a:	000f      	movs	r7, r1
 800856c:	9b08      	ldr	r3, [sp, #32]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00f      	beq.n	8008592 <_strtod_l+0x65e>
 8008572:	236b      	movs	r3, #107	; 0x6b
 8008574:	007a      	lsls	r2, r7, #1
 8008576:	0d52      	lsrs	r2, r2, #21
 8008578:	0039      	movs	r1, r7
 800857a:	1a9b      	subs	r3, r3, r2
 800857c:	2b00      	cmp	r3, #0
 800857e:	dd08      	ble.n	8008592 <_strtod_l+0x65e>
 8008580:	2b1f      	cmp	r3, #31
 8008582:	dc00      	bgt.n	8008586 <_strtod_l+0x652>
 8008584:	e124      	b.n	80087d0 <_strtod_l+0x89c>
 8008586:	2600      	movs	r6, #0
 8008588:	2b34      	cmp	r3, #52	; 0x34
 800858a:	dc00      	bgt.n	800858e <_strtod_l+0x65a>
 800858c:	e119      	b.n	80087c2 <_strtod_l+0x88e>
 800858e:	27dc      	movs	r7, #220	; 0xdc
 8008590:	04bf      	lsls	r7, r7, #18
 8008592:	2200      	movs	r2, #0
 8008594:	2300      	movs	r3, #0
 8008596:	0030      	movs	r0, r6
 8008598:	0039      	movs	r1, r7
 800859a:	f7f7 ff57 	bl	800044c <__aeabi_dcmpeq>
 800859e:	2800      	cmp	r0, #0
 80085a0:	d1a0      	bne.n	80084e4 <_strtod_l+0x5b0>
 80085a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80085aa:	9b06      	ldr	r3, [sp, #24]
 80085ac:	9805      	ldr	r0, [sp, #20]
 80085ae:	f001 fe69 	bl	800a284 <__s2b>
 80085b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d100      	bne.n	80085ba <_strtod_l+0x686>
 80085b8:	e721      	b.n	80083fe <_strtod_l+0x4ca>
 80085ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085bc:	9907      	ldr	r1, [sp, #28]
 80085be:	17da      	asrs	r2, r3, #31
 80085c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085c2:	1a5b      	subs	r3, r3, r1
 80085c4:	401a      	ands	r2, r3
 80085c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c8:	9215      	str	r2, [sp, #84]	; 0x54
 80085ca:	43db      	mvns	r3, r3
 80085cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ce:	17db      	asrs	r3, r3, #31
 80085d0:	401a      	ands	r2, r3
 80085d2:	2300      	movs	r3, #0
 80085d4:	921a      	str	r2, [sp, #104]	; 0x68
 80085d6:	9306      	str	r3, [sp, #24]
 80085d8:	9307      	str	r3, [sp, #28]
 80085da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085dc:	9805      	ldr	r0, [sp, #20]
 80085de:	6859      	ldr	r1, [r3, #4]
 80085e0:	f001 fda4 	bl	800a12c <_Balloc>
 80085e4:	9009      	str	r0, [sp, #36]	; 0x24
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d100      	bne.n	80085ec <_strtod_l+0x6b8>
 80085ea:	e70d      	b.n	8008408 <_strtod_l+0x4d4>
 80085ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	310c      	adds	r1, #12
 80085f4:	1c9a      	adds	r2, r3, #2
 80085f6:	0092      	lsls	r2, r2, #2
 80085f8:	300c      	adds	r0, #12
 80085fa:	930c      	str	r3, [sp, #48]	; 0x30
 80085fc:	f001 fd8d 	bl	800a11a <memcpy>
 8008600:	ab22      	add	r3, sp, #136	; 0x88
 8008602:	9301      	str	r3, [sp, #4]
 8008604:	ab21      	add	r3, sp, #132	; 0x84
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	0032      	movs	r2, r6
 800860a:	003b      	movs	r3, r7
 800860c:	9805      	ldr	r0, [sp, #20]
 800860e:	9612      	str	r6, [sp, #72]	; 0x48
 8008610:	9713      	str	r7, [sp, #76]	; 0x4c
 8008612:	f002 f983 	bl	800a91c <__d2b>
 8008616:	9020      	str	r0, [sp, #128]	; 0x80
 8008618:	2800      	cmp	r0, #0
 800861a:	d100      	bne.n	800861e <_strtod_l+0x6ea>
 800861c:	e6f4      	b.n	8008408 <_strtod_l+0x4d4>
 800861e:	2101      	movs	r1, #1
 8008620:	9805      	ldr	r0, [sp, #20]
 8008622:	f001 fec3 	bl	800a3ac <__i2b>
 8008626:	9007      	str	r0, [sp, #28]
 8008628:	2800      	cmp	r0, #0
 800862a:	d100      	bne.n	800862e <_strtod_l+0x6fa>
 800862c:	e6ec      	b.n	8008408 <_strtod_l+0x4d4>
 800862e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008630:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008632:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008634:	1ad4      	subs	r4, r2, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	db01      	blt.n	800863e <_strtod_l+0x70a>
 800863a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800863c:	195d      	adds	r5, r3, r5
 800863e:	9908      	ldr	r1, [sp, #32]
 8008640:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008642:	1a5b      	subs	r3, r3, r1
 8008644:	2136      	movs	r1, #54	; 0x36
 8008646:	189b      	adds	r3, r3, r2
 8008648:	1a8a      	subs	r2, r1, r2
 800864a:	4986      	ldr	r1, [pc, #536]	; (8008864 <_strtod_l+0x930>)
 800864c:	2001      	movs	r0, #1
 800864e:	468c      	mov	ip, r1
 8008650:	2100      	movs	r1, #0
 8008652:	3b01      	subs	r3, #1
 8008654:	9110      	str	r1, [sp, #64]	; 0x40
 8008656:	9014      	str	r0, [sp, #80]	; 0x50
 8008658:	4563      	cmp	r3, ip
 800865a:	da07      	bge.n	800866c <_strtod_l+0x738>
 800865c:	4661      	mov	r1, ip
 800865e:	1ac9      	subs	r1, r1, r3
 8008660:	1a52      	subs	r2, r2, r1
 8008662:	291f      	cmp	r1, #31
 8008664:	dd00      	ble.n	8008668 <_strtod_l+0x734>
 8008666:	e0b8      	b.n	80087da <_strtod_l+0x8a6>
 8008668:	4088      	lsls	r0, r1
 800866a:	9014      	str	r0, [sp, #80]	; 0x50
 800866c:	18ab      	adds	r3, r5, r2
 800866e:	930c      	str	r3, [sp, #48]	; 0x30
 8008670:	18a4      	adds	r4, r4, r2
 8008672:	9b08      	ldr	r3, [sp, #32]
 8008674:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008676:	191c      	adds	r4, r3, r4
 8008678:	002b      	movs	r3, r5
 800867a:	4295      	cmp	r5, r2
 800867c:	dd00      	ble.n	8008680 <_strtod_l+0x74c>
 800867e:	0013      	movs	r3, r2
 8008680:	42a3      	cmp	r3, r4
 8008682:	dd00      	ble.n	8008686 <_strtod_l+0x752>
 8008684:	0023      	movs	r3, r4
 8008686:	2b00      	cmp	r3, #0
 8008688:	dd04      	ble.n	8008694 <_strtod_l+0x760>
 800868a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800868c:	1ae4      	subs	r4, r4, r3
 800868e:	1ad2      	subs	r2, r2, r3
 8008690:	920c      	str	r2, [sp, #48]	; 0x30
 8008692:	1aed      	subs	r5, r5, r3
 8008694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008696:	2b00      	cmp	r3, #0
 8008698:	dd17      	ble.n	80086ca <_strtod_l+0x796>
 800869a:	001a      	movs	r2, r3
 800869c:	9907      	ldr	r1, [sp, #28]
 800869e:	9805      	ldr	r0, [sp, #20]
 80086a0:	f001 ff4a 	bl	800a538 <__pow5mult>
 80086a4:	9007      	str	r0, [sp, #28]
 80086a6:	2800      	cmp	r0, #0
 80086a8:	d100      	bne.n	80086ac <_strtod_l+0x778>
 80086aa:	e6ad      	b.n	8008408 <_strtod_l+0x4d4>
 80086ac:	0001      	movs	r1, r0
 80086ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80086b0:	9805      	ldr	r0, [sp, #20]
 80086b2:	f001 fe91 	bl	800a3d8 <__multiply>
 80086b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d100      	bne.n	80086be <_strtod_l+0x78a>
 80086bc:	e6a4      	b.n	8008408 <_strtod_l+0x4d4>
 80086be:	9920      	ldr	r1, [sp, #128]	; 0x80
 80086c0:	9805      	ldr	r0, [sp, #20]
 80086c2:	f001 fd77 	bl	800a1b4 <_Bfree>
 80086c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086c8:	9320      	str	r3, [sp, #128]	; 0x80
 80086ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	dd00      	ble.n	80086d2 <_strtod_l+0x79e>
 80086d0:	e089      	b.n	80087e6 <_strtod_l+0x8b2>
 80086d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	dd08      	ble.n	80086ea <_strtod_l+0x7b6>
 80086d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80086da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086dc:	9805      	ldr	r0, [sp, #20]
 80086de:	f001 ff2b 	bl	800a538 <__pow5mult>
 80086e2:	9009      	str	r0, [sp, #36]	; 0x24
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d100      	bne.n	80086ea <_strtod_l+0x7b6>
 80086e8:	e68e      	b.n	8008408 <_strtod_l+0x4d4>
 80086ea:	2c00      	cmp	r4, #0
 80086ec:	dd08      	ble.n	8008700 <_strtod_l+0x7cc>
 80086ee:	0022      	movs	r2, r4
 80086f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086f2:	9805      	ldr	r0, [sp, #20]
 80086f4:	f001 ff7c 	bl	800a5f0 <__lshift>
 80086f8:	9009      	str	r0, [sp, #36]	; 0x24
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d100      	bne.n	8008700 <_strtod_l+0x7cc>
 80086fe:	e683      	b.n	8008408 <_strtod_l+0x4d4>
 8008700:	2d00      	cmp	r5, #0
 8008702:	dd08      	ble.n	8008716 <_strtod_l+0x7e2>
 8008704:	002a      	movs	r2, r5
 8008706:	9907      	ldr	r1, [sp, #28]
 8008708:	9805      	ldr	r0, [sp, #20]
 800870a:	f001 ff71 	bl	800a5f0 <__lshift>
 800870e:	9007      	str	r0, [sp, #28]
 8008710:	2800      	cmp	r0, #0
 8008712:	d100      	bne.n	8008716 <_strtod_l+0x7e2>
 8008714:	e678      	b.n	8008408 <_strtod_l+0x4d4>
 8008716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008718:	9920      	ldr	r1, [sp, #128]	; 0x80
 800871a:	9805      	ldr	r0, [sp, #20]
 800871c:	f001 fff2 	bl	800a704 <__mdiff>
 8008720:	9006      	str	r0, [sp, #24]
 8008722:	2800      	cmp	r0, #0
 8008724:	d100      	bne.n	8008728 <_strtod_l+0x7f4>
 8008726:	e66f      	b.n	8008408 <_strtod_l+0x4d4>
 8008728:	2200      	movs	r2, #0
 800872a:	68c3      	ldr	r3, [r0, #12]
 800872c:	9907      	ldr	r1, [sp, #28]
 800872e:	60c2      	str	r2, [r0, #12]
 8008730:	930f      	str	r3, [sp, #60]	; 0x3c
 8008732:	f001 ffcb 	bl	800a6cc <__mcmp>
 8008736:	2800      	cmp	r0, #0
 8008738:	da5f      	bge.n	80087fa <_strtod_l+0x8c6>
 800873a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800873c:	4333      	orrs	r3, r6
 800873e:	d000      	beq.n	8008742 <_strtod_l+0x80e>
 8008740:	e08a      	b.n	8008858 <_strtod_l+0x924>
 8008742:	033b      	lsls	r3, r7, #12
 8008744:	d000      	beq.n	8008748 <_strtod_l+0x814>
 8008746:	e087      	b.n	8008858 <_strtod_l+0x924>
 8008748:	22d6      	movs	r2, #214	; 0xd6
 800874a:	4b47      	ldr	r3, [pc, #284]	; (8008868 <_strtod_l+0x934>)
 800874c:	04d2      	lsls	r2, r2, #19
 800874e:	403b      	ands	r3, r7
 8008750:	4293      	cmp	r3, r2
 8008752:	d800      	bhi.n	8008756 <_strtod_l+0x822>
 8008754:	e080      	b.n	8008858 <_strtod_l+0x924>
 8008756:	9b06      	ldr	r3, [sp, #24]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	930a      	str	r3, [sp, #40]	; 0x28
 800875c:	2b00      	cmp	r3, #0
 800875e:	d104      	bne.n	800876a <_strtod_l+0x836>
 8008760:	9b06      	ldr	r3, [sp, #24]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	930a      	str	r3, [sp, #40]	; 0x28
 8008766:	2b01      	cmp	r3, #1
 8008768:	dd76      	ble.n	8008858 <_strtod_l+0x924>
 800876a:	9906      	ldr	r1, [sp, #24]
 800876c:	2201      	movs	r2, #1
 800876e:	9805      	ldr	r0, [sp, #20]
 8008770:	f001 ff3e 	bl	800a5f0 <__lshift>
 8008774:	9907      	ldr	r1, [sp, #28]
 8008776:	9006      	str	r0, [sp, #24]
 8008778:	f001 ffa8 	bl	800a6cc <__mcmp>
 800877c:	2800      	cmp	r0, #0
 800877e:	dd6b      	ble.n	8008858 <_strtod_l+0x924>
 8008780:	9908      	ldr	r1, [sp, #32]
 8008782:	003b      	movs	r3, r7
 8008784:	4a38      	ldr	r2, [pc, #224]	; (8008868 <_strtod_l+0x934>)
 8008786:	2900      	cmp	r1, #0
 8008788:	d100      	bne.n	800878c <_strtod_l+0x858>
 800878a:	e092      	b.n	80088b2 <_strtod_l+0x97e>
 800878c:	0011      	movs	r1, r2
 800878e:	20d6      	movs	r0, #214	; 0xd6
 8008790:	4039      	ands	r1, r7
 8008792:	04c0      	lsls	r0, r0, #19
 8008794:	4281      	cmp	r1, r0
 8008796:	dd00      	ble.n	800879a <_strtod_l+0x866>
 8008798:	e08b      	b.n	80088b2 <_strtod_l+0x97e>
 800879a:	23dc      	movs	r3, #220	; 0xdc
 800879c:	049b      	lsls	r3, r3, #18
 800879e:	4299      	cmp	r1, r3
 80087a0:	dc00      	bgt.n	80087a4 <_strtod_l+0x870>
 80087a2:	e6a4      	b.n	80084ee <_strtod_l+0x5ba>
 80087a4:	0030      	movs	r0, r6
 80087a6:	0039      	movs	r1, r7
 80087a8:	2200      	movs	r2, #0
 80087aa:	4b30      	ldr	r3, [pc, #192]	; (800886c <_strtod_l+0x938>)
 80087ac:	f7f8 ff14 	bl	80015d8 <__aeabi_dmul>
 80087b0:	0006      	movs	r6, r0
 80087b2:	000f      	movs	r7, r1
 80087b4:	4308      	orrs	r0, r1
 80087b6:	d000      	beq.n	80087ba <_strtod_l+0x886>
 80087b8:	e62f      	b.n	800841a <_strtod_l+0x4e6>
 80087ba:	2322      	movs	r3, #34	; 0x22
 80087bc:	9a05      	ldr	r2, [sp, #20]
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	e62b      	b.n	800841a <_strtod_l+0x4e6>
 80087c2:	234b      	movs	r3, #75	; 0x4b
 80087c4:	1a9a      	subs	r2, r3, r2
 80087c6:	3b4c      	subs	r3, #76	; 0x4c
 80087c8:	4093      	lsls	r3, r2
 80087ca:	4019      	ands	r1, r3
 80087cc:	000f      	movs	r7, r1
 80087ce:	e6e0      	b.n	8008592 <_strtod_l+0x65e>
 80087d0:	2201      	movs	r2, #1
 80087d2:	4252      	negs	r2, r2
 80087d4:	409a      	lsls	r2, r3
 80087d6:	4016      	ands	r6, r2
 80087d8:	e6db      	b.n	8008592 <_strtod_l+0x65e>
 80087da:	4925      	ldr	r1, [pc, #148]	; (8008870 <_strtod_l+0x93c>)
 80087dc:	1acb      	subs	r3, r1, r3
 80087de:	0001      	movs	r1, r0
 80087e0:	4099      	lsls	r1, r3
 80087e2:	9110      	str	r1, [sp, #64]	; 0x40
 80087e4:	e741      	b.n	800866a <_strtod_l+0x736>
 80087e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087e8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80087ea:	9805      	ldr	r0, [sp, #20]
 80087ec:	f001 ff00 	bl	800a5f0 <__lshift>
 80087f0:	9020      	str	r0, [sp, #128]	; 0x80
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d000      	beq.n	80087f8 <_strtod_l+0x8c4>
 80087f6:	e76c      	b.n	80086d2 <_strtod_l+0x79e>
 80087f8:	e606      	b.n	8008408 <_strtod_l+0x4d4>
 80087fa:	970c      	str	r7, [sp, #48]	; 0x30
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d176      	bne.n	80088ee <_strtod_l+0x9ba>
 8008800:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008802:	033b      	lsls	r3, r7, #12
 8008804:	0b1b      	lsrs	r3, r3, #12
 8008806:	2a00      	cmp	r2, #0
 8008808:	d038      	beq.n	800887c <_strtod_l+0x948>
 800880a:	4a1a      	ldr	r2, [pc, #104]	; (8008874 <_strtod_l+0x940>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d138      	bne.n	8008882 <_strtod_l+0x94e>
 8008810:	2201      	movs	r2, #1
 8008812:	9b08      	ldr	r3, [sp, #32]
 8008814:	4252      	negs	r2, r2
 8008816:	0031      	movs	r1, r6
 8008818:	0010      	movs	r0, r2
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00b      	beq.n	8008836 <_strtod_l+0x902>
 800881e:	24d4      	movs	r4, #212	; 0xd4
 8008820:	4b11      	ldr	r3, [pc, #68]	; (8008868 <_strtod_l+0x934>)
 8008822:	0010      	movs	r0, r2
 8008824:	403b      	ands	r3, r7
 8008826:	04e4      	lsls	r4, r4, #19
 8008828:	42a3      	cmp	r3, r4
 800882a:	d804      	bhi.n	8008836 <_strtod_l+0x902>
 800882c:	306c      	adds	r0, #108	; 0x6c
 800882e:	0d1b      	lsrs	r3, r3, #20
 8008830:	1ac3      	subs	r3, r0, r3
 8008832:	409a      	lsls	r2, r3
 8008834:	0010      	movs	r0, r2
 8008836:	4281      	cmp	r1, r0
 8008838:	d123      	bne.n	8008882 <_strtod_l+0x94e>
 800883a:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <_strtod_l+0x944>)
 800883c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800883e:	429a      	cmp	r2, r3
 8008840:	d102      	bne.n	8008848 <_strtod_l+0x914>
 8008842:	1c4b      	adds	r3, r1, #1
 8008844:	d100      	bne.n	8008848 <_strtod_l+0x914>
 8008846:	e5df      	b.n	8008408 <_strtod_l+0x4d4>
 8008848:	4b07      	ldr	r3, [pc, #28]	; (8008868 <_strtod_l+0x934>)
 800884a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800884c:	2600      	movs	r6, #0
 800884e:	401a      	ands	r2, r3
 8008850:	0013      	movs	r3, r2
 8008852:	2280      	movs	r2, #128	; 0x80
 8008854:	0352      	lsls	r2, r2, #13
 8008856:	189f      	adds	r7, r3, r2
 8008858:	9b08      	ldr	r3, [sp, #32]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1a2      	bne.n	80087a4 <_strtod_l+0x870>
 800885e:	e5dc      	b.n	800841a <_strtod_l+0x4e6>
 8008860:	0800bf10 	.word	0x0800bf10
 8008864:	fffffc02 	.word	0xfffffc02
 8008868:	7ff00000 	.word	0x7ff00000
 800886c:	39500000 	.word	0x39500000
 8008870:	fffffbe2 	.word	0xfffffbe2
 8008874:	000fffff 	.word	0x000fffff
 8008878:	7fefffff 	.word	0x7fefffff
 800887c:	4333      	orrs	r3, r6
 800887e:	d100      	bne.n	8008882 <_strtod_l+0x94e>
 8008880:	e77e      	b.n	8008780 <_strtod_l+0x84c>
 8008882:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008884:	2b00      	cmp	r3, #0
 8008886:	d01d      	beq.n	80088c4 <_strtod_l+0x990>
 8008888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800888a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800888c:	4213      	tst	r3, r2
 800888e:	d0e3      	beq.n	8008858 <_strtod_l+0x924>
 8008890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008892:	0030      	movs	r0, r6
 8008894:	0039      	movs	r1, r7
 8008896:	9a08      	ldr	r2, [sp, #32]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d017      	beq.n	80088cc <_strtod_l+0x998>
 800889c:	f7ff fb32 	bl	8007f04 <sulp>
 80088a0:	0002      	movs	r2, r0
 80088a2:	000b      	movs	r3, r1
 80088a4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80088a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80088a8:	f7f7 ff58 	bl	800075c <__aeabi_dadd>
 80088ac:	0006      	movs	r6, r0
 80088ae:	000f      	movs	r7, r1
 80088b0:	e7d2      	b.n	8008858 <_strtod_l+0x924>
 80088b2:	2601      	movs	r6, #1
 80088b4:	4013      	ands	r3, r2
 80088b6:	4a99      	ldr	r2, [pc, #612]	; (8008b1c <_strtod_l+0xbe8>)
 80088b8:	4276      	negs	r6, r6
 80088ba:	189b      	adds	r3, r3, r2
 80088bc:	4a98      	ldr	r2, [pc, #608]	; (8008b20 <_strtod_l+0xbec>)
 80088be:	431a      	orrs	r2, r3
 80088c0:	0017      	movs	r7, r2
 80088c2:	e7c9      	b.n	8008858 <_strtod_l+0x924>
 80088c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088c6:	4233      	tst	r3, r6
 80088c8:	d0c6      	beq.n	8008858 <_strtod_l+0x924>
 80088ca:	e7e1      	b.n	8008890 <_strtod_l+0x95c>
 80088cc:	f7ff fb1a 	bl	8007f04 <sulp>
 80088d0:	0002      	movs	r2, r0
 80088d2:	000b      	movs	r3, r1
 80088d4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80088d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80088d8:	f7f9 f8ea 	bl	8001ab0 <__aeabi_dsub>
 80088dc:	2200      	movs	r2, #0
 80088de:	2300      	movs	r3, #0
 80088e0:	0006      	movs	r6, r0
 80088e2:	000f      	movs	r7, r1
 80088e4:	f7f7 fdb2 	bl	800044c <__aeabi_dcmpeq>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d0b5      	beq.n	8008858 <_strtod_l+0x924>
 80088ec:	e5ff      	b.n	80084ee <_strtod_l+0x5ba>
 80088ee:	9907      	ldr	r1, [sp, #28]
 80088f0:	9806      	ldr	r0, [sp, #24]
 80088f2:	f002 f877 	bl	800a9e4 <__ratio>
 80088f6:	2380      	movs	r3, #128	; 0x80
 80088f8:	2200      	movs	r2, #0
 80088fa:	05db      	lsls	r3, r3, #23
 80088fc:	0004      	movs	r4, r0
 80088fe:	000d      	movs	r5, r1
 8008900:	f7f7 fdb4 	bl	800046c <__aeabi_dcmple>
 8008904:	2800      	cmp	r0, #0
 8008906:	d075      	beq.n	80089f4 <_strtod_l+0xac0>
 8008908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800890a:	2b00      	cmp	r3, #0
 800890c:	d047      	beq.n	800899e <_strtod_l+0xa6a>
 800890e:	2300      	movs	r3, #0
 8008910:	4c84      	ldr	r4, [pc, #528]	; (8008b24 <_strtod_l+0xbf0>)
 8008912:	2500      	movs	r5, #0
 8008914:	9310      	str	r3, [sp, #64]	; 0x40
 8008916:	9411      	str	r4, [sp, #68]	; 0x44
 8008918:	4c82      	ldr	r4, [pc, #520]	; (8008b24 <_strtod_l+0xbf0>)
 800891a:	4a83      	ldr	r2, [pc, #524]	; (8008b28 <_strtod_l+0xbf4>)
 800891c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800891e:	4013      	ands	r3, r2
 8008920:	9314      	str	r3, [sp, #80]	; 0x50
 8008922:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008924:	4b81      	ldr	r3, [pc, #516]	; (8008b2c <_strtod_l+0xbf8>)
 8008926:	429a      	cmp	r2, r3
 8008928:	d000      	beq.n	800892c <_strtod_l+0x9f8>
 800892a:	e0ac      	b.n	8008a86 <_strtod_l+0xb52>
 800892c:	4a80      	ldr	r2, [pc, #512]	; (8008b30 <_strtod_l+0xbfc>)
 800892e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008930:	4694      	mov	ip, r2
 8008932:	4463      	add	r3, ip
 8008934:	001f      	movs	r7, r3
 8008936:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800893a:	0030      	movs	r0, r6
 800893c:	0039      	movs	r1, r7
 800893e:	920c      	str	r2, [sp, #48]	; 0x30
 8008940:	930d      	str	r3, [sp, #52]	; 0x34
 8008942:	f001 ff77 	bl	800a834 <__ulp>
 8008946:	0002      	movs	r2, r0
 8008948:	000b      	movs	r3, r1
 800894a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800894c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800894e:	f7f8 fe43 	bl	80015d8 <__aeabi_dmul>
 8008952:	0032      	movs	r2, r6
 8008954:	003b      	movs	r3, r7
 8008956:	f7f7 ff01 	bl	800075c <__aeabi_dadd>
 800895a:	4a73      	ldr	r2, [pc, #460]	; (8008b28 <_strtod_l+0xbf4>)
 800895c:	4b75      	ldr	r3, [pc, #468]	; (8008b34 <_strtod_l+0xc00>)
 800895e:	0006      	movs	r6, r0
 8008960:	400a      	ands	r2, r1
 8008962:	429a      	cmp	r2, r3
 8008964:	d95e      	bls.n	8008a24 <_strtod_l+0xaf0>
 8008966:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008968:	4b73      	ldr	r3, [pc, #460]	; (8008b38 <_strtod_l+0xc04>)
 800896a:	429a      	cmp	r2, r3
 800896c:	d103      	bne.n	8008976 <_strtod_l+0xa42>
 800896e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008970:	3301      	adds	r3, #1
 8008972:	d100      	bne.n	8008976 <_strtod_l+0xa42>
 8008974:	e548      	b.n	8008408 <_strtod_l+0x4d4>
 8008976:	2601      	movs	r6, #1
 8008978:	4f6f      	ldr	r7, [pc, #444]	; (8008b38 <_strtod_l+0xc04>)
 800897a:	4276      	negs	r6, r6
 800897c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800897e:	9805      	ldr	r0, [sp, #20]
 8008980:	f001 fc18 	bl	800a1b4 <_Bfree>
 8008984:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008986:	9805      	ldr	r0, [sp, #20]
 8008988:	f001 fc14 	bl	800a1b4 <_Bfree>
 800898c:	9907      	ldr	r1, [sp, #28]
 800898e:	9805      	ldr	r0, [sp, #20]
 8008990:	f001 fc10 	bl	800a1b4 <_Bfree>
 8008994:	9906      	ldr	r1, [sp, #24]
 8008996:	9805      	ldr	r0, [sp, #20]
 8008998:	f001 fc0c 	bl	800a1b4 <_Bfree>
 800899c:	e61d      	b.n	80085da <_strtod_l+0x6a6>
 800899e:	2e00      	cmp	r6, #0
 80089a0:	d11c      	bne.n	80089dc <_strtod_l+0xaa8>
 80089a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089a4:	031b      	lsls	r3, r3, #12
 80089a6:	d11f      	bne.n	80089e8 <_strtod_l+0xab4>
 80089a8:	2200      	movs	r2, #0
 80089aa:	0020      	movs	r0, r4
 80089ac:	0029      	movs	r1, r5
 80089ae:	4b5d      	ldr	r3, [pc, #372]	; (8008b24 <_strtod_l+0xbf0>)
 80089b0:	f7f7 fd52 	bl	8000458 <__aeabi_dcmplt>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d11a      	bne.n	80089ee <_strtod_l+0xaba>
 80089b8:	0020      	movs	r0, r4
 80089ba:	0029      	movs	r1, r5
 80089bc:	2200      	movs	r2, #0
 80089be:	4b5f      	ldr	r3, [pc, #380]	; (8008b3c <_strtod_l+0xc08>)
 80089c0:	f7f8 fe0a 	bl	80015d8 <__aeabi_dmul>
 80089c4:	0005      	movs	r5, r0
 80089c6:	000c      	movs	r4, r1
 80089c8:	2380      	movs	r3, #128	; 0x80
 80089ca:	061b      	lsls	r3, r3, #24
 80089cc:	18e3      	adds	r3, r4, r3
 80089ce:	951c      	str	r5, [sp, #112]	; 0x70
 80089d0:	931d      	str	r3, [sp, #116]	; 0x74
 80089d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80089d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089d6:	9210      	str	r2, [sp, #64]	; 0x40
 80089d8:	9311      	str	r3, [sp, #68]	; 0x44
 80089da:	e79e      	b.n	800891a <_strtod_l+0x9e6>
 80089dc:	2e01      	cmp	r6, #1
 80089de:	d103      	bne.n	80089e8 <_strtod_l+0xab4>
 80089e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d100      	bne.n	80089e8 <_strtod_l+0xab4>
 80089e6:	e582      	b.n	80084ee <_strtod_l+0x5ba>
 80089e8:	2300      	movs	r3, #0
 80089ea:	4c55      	ldr	r4, [pc, #340]	; (8008b40 <_strtod_l+0xc0c>)
 80089ec:	e791      	b.n	8008912 <_strtod_l+0x9de>
 80089ee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80089f0:	4c52      	ldr	r4, [pc, #328]	; (8008b3c <_strtod_l+0xc08>)
 80089f2:	e7e9      	b.n	80089c8 <_strtod_l+0xa94>
 80089f4:	2200      	movs	r2, #0
 80089f6:	0020      	movs	r0, r4
 80089f8:	0029      	movs	r1, r5
 80089fa:	4b50      	ldr	r3, [pc, #320]	; (8008b3c <_strtod_l+0xc08>)
 80089fc:	f7f8 fdec 	bl	80015d8 <__aeabi_dmul>
 8008a00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a02:	0005      	movs	r5, r0
 8008a04:	000b      	movs	r3, r1
 8008a06:	000c      	movs	r4, r1
 8008a08:	2a00      	cmp	r2, #0
 8008a0a:	d107      	bne.n	8008a1c <_strtod_l+0xae8>
 8008a0c:	2280      	movs	r2, #128	; 0x80
 8008a0e:	0612      	lsls	r2, r2, #24
 8008a10:	188b      	adds	r3, r1, r2
 8008a12:	9016      	str	r0, [sp, #88]	; 0x58
 8008a14:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a16:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008a18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a1a:	e7dc      	b.n	80089d6 <_strtod_l+0xaa2>
 8008a1c:	0002      	movs	r2, r0
 8008a1e:	9216      	str	r2, [sp, #88]	; 0x58
 8008a20:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a22:	e7f8      	b.n	8008a16 <_strtod_l+0xae2>
 8008a24:	23d4      	movs	r3, #212	; 0xd4
 8008a26:	049b      	lsls	r3, r3, #18
 8008a28:	18cf      	adds	r7, r1, r3
 8008a2a:	9b08      	ldr	r3, [sp, #32]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1a5      	bne.n	800897c <_strtod_l+0xa48>
 8008a30:	4b3d      	ldr	r3, [pc, #244]	; (8008b28 <_strtod_l+0xbf4>)
 8008a32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a34:	403b      	ands	r3, r7
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d1a0      	bne.n	800897c <_strtod_l+0xa48>
 8008a3a:	0028      	movs	r0, r5
 8008a3c:	0021      	movs	r1, r4
 8008a3e:	f7f7 fd8b 	bl	8000558 <__aeabi_d2lz>
 8008a42:	f7f7 fdc5 	bl	80005d0 <__aeabi_l2d>
 8008a46:	0002      	movs	r2, r0
 8008a48:	000b      	movs	r3, r1
 8008a4a:	0028      	movs	r0, r5
 8008a4c:	0021      	movs	r1, r4
 8008a4e:	f7f9 f82f 	bl	8001ab0 <__aeabi_dsub>
 8008a52:	033b      	lsls	r3, r7, #12
 8008a54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a56:	0b1b      	lsrs	r3, r3, #12
 8008a58:	4333      	orrs	r3, r6
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	0004      	movs	r4, r0
 8008a5e:	000d      	movs	r5, r1
 8008a60:	4a38      	ldr	r2, [pc, #224]	; (8008b44 <_strtod_l+0xc10>)
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d055      	beq.n	8008b12 <_strtod_l+0xbde>
 8008a66:	4b38      	ldr	r3, [pc, #224]	; (8008b48 <_strtod_l+0xc14>)
 8008a68:	f7f7 fcf6 	bl	8000458 <__aeabi_dcmplt>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d000      	beq.n	8008a72 <_strtod_l+0xb3e>
 8008a70:	e4d3      	b.n	800841a <_strtod_l+0x4e6>
 8008a72:	0020      	movs	r0, r4
 8008a74:	0029      	movs	r1, r5
 8008a76:	4a35      	ldr	r2, [pc, #212]	; (8008b4c <_strtod_l+0xc18>)
 8008a78:	4b30      	ldr	r3, [pc, #192]	; (8008b3c <_strtod_l+0xc08>)
 8008a7a:	f7f7 fd01 	bl	8000480 <__aeabi_dcmpgt>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d100      	bne.n	8008a84 <_strtod_l+0xb50>
 8008a82:	e77b      	b.n	800897c <_strtod_l+0xa48>
 8008a84:	e4c9      	b.n	800841a <_strtod_l+0x4e6>
 8008a86:	9b08      	ldr	r3, [sp, #32]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d02b      	beq.n	8008ae4 <_strtod_l+0xbb0>
 8008a8c:	23d4      	movs	r3, #212	; 0xd4
 8008a8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a90:	04db      	lsls	r3, r3, #19
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d826      	bhi.n	8008ae4 <_strtod_l+0xbb0>
 8008a96:	0028      	movs	r0, r5
 8008a98:	0021      	movs	r1, r4
 8008a9a:	4a2d      	ldr	r2, [pc, #180]	; (8008b50 <_strtod_l+0xc1c>)
 8008a9c:	4b2d      	ldr	r3, [pc, #180]	; (8008b54 <_strtod_l+0xc20>)
 8008a9e:	f7f7 fce5 	bl	800046c <__aeabi_dcmple>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d017      	beq.n	8008ad6 <_strtod_l+0xba2>
 8008aa6:	0028      	movs	r0, r5
 8008aa8:	0021      	movs	r1, r4
 8008aaa:	f7f7 fd37 	bl	800051c <__aeabi_d2uiz>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d100      	bne.n	8008ab4 <_strtod_l+0xb80>
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	f7f9 fc12 	bl	80022dc <__aeabi_ui2d>
 8008ab8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008aba:	0005      	movs	r5, r0
 8008abc:	000b      	movs	r3, r1
 8008abe:	000c      	movs	r4, r1
 8008ac0:	2a00      	cmp	r2, #0
 8008ac2:	d122      	bne.n	8008b0a <_strtod_l+0xbd6>
 8008ac4:	2280      	movs	r2, #128	; 0x80
 8008ac6:	0612      	lsls	r2, r2, #24
 8008ac8:	188b      	adds	r3, r1, r2
 8008aca:	9018      	str	r0, [sp, #96]	; 0x60
 8008acc:	9319      	str	r3, [sp, #100]	; 0x64
 8008ace:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ad0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ad2:	9210      	str	r2, [sp, #64]	; 0x40
 8008ad4:	9311      	str	r3, [sp, #68]	; 0x44
 8008ad6:	22d6      	movs	r2, #214	; 0xd6
 8008ad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ada:	04d2      	lsls	r2, r2, #19
 8008adc:	189b      	adds	r3, r3, r2
 8008ade:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ae0:	1a9b      	subs	r3, r3, r2
 8008ae2:	9311      	str	r3, [sp, #68]	; 0x44
 8008ae4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008ae6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008ae8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8008aea:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8008aec:	f001 fea2 	bl	800a834 <__ulp>
 8008af0:	0002      	movs	r2, r0
 8008af2:	000b      	movs	r3, r1
 8008af4:	0030      	movs	r0, r6
 8008af6:	0039      	movs	r1, r7
 8008af8:	f7f8 fd6e 	bl	80015d8 <__aeabi_dmul>
 8008afc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008afe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b00:	f7f7 fe2c 	bl	800075c <__aeabi_dadd>
 8008b04:	0006      	movs	r6, r0
 8008b06:	000f      	movs	r7, r1
 8008b08:	e78f      	b.n	8008a2a <_strtod_l+0xaf6>
 8008b0a:	0002      	movs	r2, r0
 8008b0c:	9218      	str	r2, [sp, #96]	; 0x60
 8008b0e:	9319      	str	r3, [sp, #100]	; 0x64
 8008b10:	e7dd      	b.n	8008ace <_strtod_l+0xb9a>
 8008b12:	4b11      	ldr	r3, [pc, #68]	; (8008b58 <_strtod_l+0xc24>)
 8008b14:	f7f7 fca0 	bl	8000458 <__aeabi_dcmplt>
 8008b18:	e7b1      	b.n	8008a7e <_strtod_l+0xb4a>
 8008b1a:	46c0      	nop			; (mov r8, r8)
 8008b1c:	fff00000 	.word	0xfff00000
 8008b20:	000fffff 	.word	0x000fffff
 8008b24:	3ff00000 	.word	0x3ff00000
 8008b28:	7ff00000 	.word	0x7ff00000
 8008b2c:	7fe00000 	.word	0x7fe00000
 8008b30:	fcb00000 	.word	0xfcb00000
 8008b34:	7c9fffff 	.word	0x7c9fffff
 8008b38:	7fefffff 	.word	0x7fefffff
 8008b3c:	3fe00000 	.word	0x3fe00000
 8008b40:	bff00000 	.word	0xbff00000
 8008b44:	94a03595 	.word	0x94a03595
 8008b48:	3fdfffff 	.word	0x3fdfffff
 8008b4c:	35afe535 	.word	0x35afe535
 8008b50:	ffc00000 	.word	0xffc00000
 8008b54:	41dfffff 	.word	0x41dfffff
 8008b58:	3fcfffff 	.word	0x3fcfffff

08008b5c <_strtod_r>:
 8008b5c:	b510      	push	{r4, lr}
 8008b5e:	4b02      	ldr	r3, [pc, #8]	; (8008b68 <_strtod_r+0xc>)
 8008b60:	f7ff f9e8 	bl	8007f34 <_strtod_l>
 8008b64:	bd10      	pop	{r4, pc}
 8008b66:	46c0      	nop			; (mov r8, r8)
 8008b68:	20000098 	.word	0x20000098

08008b6c <_strtol_l.constprop.0>:
 8008b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	001e      	movs	r6, r3
 8008b72:	9005      	str	r0, [sp, #20]
 8008b74:	9101      	str	r1, [sp, #4]
 8008b76:	9202      	str	r2, [sp, #8]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d045      	beq.n	8008c08 <_strtol_l.constprop.0+0x9c>
 8008b7c:	000b      	movs	r3, r1
 8008b7e:	2e24      	cmp	r6, #36	; 0x24
 8008b80:	d842      	bhi.n	8008c08 <_strtol_l.constprop.0+0x9c>
 8008b82:	4a3f      	ldr	r2, [pc, #252]	; (8008c80 <_strtol_l.constprop.0+0x114>)
 8008b84:	2108      	movs	r1, #8
 8008b86:	4694      	mov	ip, r2
 8008b88:	001a      	movs	r2, r3
 8008b8a:	4660      	mov	r0, ip
 8008b8c:	7814      	ldrb	r4, [r2, #0]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	5d00      	ldrb	r0, [r0, r4]
 8008b92:	001d      	movs	r5, r3
 8008b94:	0007      	movs	r7, r0
 8008b96:	400f      	ands	r7, r1
 8008b98:	4208      	tst	r0, r1
 8008b9a:	d1f5      	bne.n	8008b88 <_strtol_l.constprop.0+0x1c>
 8008b9c:	2c2d      	cmp	r4, #45	; 0x2d
 8008b9e:	d13a      	bne.n	8008c16 <_strtol_l.constprop.0+0xaa>
 8008ba0:	2701      	movs	r7, #1
 8008ba2:	781c      	ldrb	r4, [r3, #0]
 8008ba4:	1c95      	adds	r5, r2, #2
 8008ba6:	2e00      	cmp	r6, #0
 8008ba8:	d065      	beq.n	8008c76 <_strtol_l.constprop.0+0x10a>
 8008baa:	2e10      	cmp	r6, #16
 8008bac:	d109      	bne.n	8008bc2 <_strtol_l.constprop.0+0x56>
 8008bae:	2c30      	cmp	r4, #48	; 0x30
 8008bb0:	d107      	bne.n	8008bc2 <_strtol_l.constprop.0+0x56>
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	782b      	ldrb	r3, [r5, #0]
 8008bb6:	4393      	bics	r3, r2
 8008bb8:	2b58      	cmp	r3, #88	; 0x58
 8008bba:	d157      	bne.n	8008c6c <_strtol_l.constprop.0+0x100>
 8008bbc:	2610      	movs	r6, #16
 8008bbe:	786c      	ldrb	r4, [r5, #1]
 8008bc0:	3502      	adds	r5, #2
 8008bc2:	4b30      	ldr	r3, [pc, #192]	; (8008c84 <_strtol_l.constprop.0+0x118>)
 8008bc4:	0031      	movs	r1, r6
 8008bc6:	18fb      	adds	r3, r7, r3
 8008bc8:	0018      	movs	r0, r3
 8008bca:	9303      	str	r3, [sp, #12]
 8008bcc:	f7f7 fb3e 	bl	800024c <__aeabi_uidivmod>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	4684      	mov	ip, r0
 8008bd6:	0018      	movs	r0, r3
 8008bd8:	9104      	str	r1, [sp, #16]
 8008bda:	4252      	negs	r2, r2
 8008bdc:	0021      	movs	r1, r4
 8008bde:	3930      	subs	r1, #48	; 0x30
 8008be0:	2909      	cmp	r1, #9
 8008be2:	d81d      	bhi.n	8008c20 <_strtol_l.constprop.0+0xb4>
 8008be4:	000c      	movs	r4, r1
 8008be6:	42a6      	cmp	r6, r4
 8008be8:	dd28      	ble.n	8008c3c <_strtol_l.constprop.0+0xd0>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	db24      	blt.n	8008c38 <_strtol_l.constprop.0+0xcc>
 8008bee:	0013      	movs	r3, r2
 8008bf0:	4584      	cmp	ip, r0
 8008bf2:	d306      	bcc.n	8008c02 <_strtol_l.constprop.0+0x96>
 8008bf4:	d102      	bne.n	8008bfc <_strtol_l.constprop.0+0x90>
 8008bf6:	9904      	ldr	r1, [sp, #16]
 8008bf8:	42a1      	cmp	r1, r4
 8008bfa:	db02      	blt.n	8008c02 <_strtol_l.constprop.0+0x96>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	4370      	muls	r0, r6
 8008c00:	1820      	adds	r0, r4, r0
 8008c02:	782c      	ldrb	r4, [r5, #0]
 8008c04:	3501      	adds	r5, #1
 8008c06:	e7e9      	b.n	8008bdc <_strtol_l.constprop.0+0x70>
 8008c08:	f7fe fab0 	bl	800716c <__errno>
 8008c0c:	2316      	movs	r3, #22
 8008c0e:	6003      	str	r3, [r0, #0]
 8008c10:	2000      	movs	r0, #0
 8008c12:	b007      	add	sp, #28
 8008c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c16:	2c2b      	cmp	r4, #43	; 0x2b
 8008c18:	d1c5      	bne.n	8008ba6 <_strtol_l.constprop.0+0x3a>
 8008c1a:	781c      	ldrb	r4, [r3, #0]
 8008c1c:	1c95      	adds	r5, r2, #2
 8008c1e:	e7c2      	b.n	8008ba6 <_strtol_l.constprop.0+0x3a>
 8008c20:	0021      	movs	r1, r4
 8008c22:	3941      	subs	r1, #65	; 0x41
 8008c24:	2919      	cmp	r1, #25
 8008c26:	d801      	bhi.n	8008c2c <_strtol_l.constprop.0+0xc0>
 8008c28:	3c37      	subs	r4, #55	; 0x37
 8008c2a:	e7dc      	b.n	8008be6 <_strtol_l.constprop.0+0x7a>
 8008c2c:	0021      	movs	r1, r4
 8008c2e:	3961      	subs	r1, #97	; 0x61
 8008c30:	2919      	cmp	r1, #25
 8008c32:	d803      	bhi.n	8008c3c <_strtol_l.constprop.0+0xd0>
 8008c34:	3c57      	subs	r4, #87	; 0x57
 8008c36:	e7d6      	b.n	8008be6 <_strtol_l.constprop.0+0x7a>
 8008c38:	0013      	movs	r3, r2
 8008c3a:	e7e2      	b.n	8008c02 <_strtol_l.constprop.0+0x96>
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	da09      	bge.n	8008c54 <_strtol_l.constprop.0+0xe8>
 8008c40:	2322      	movs	r3, #34	; 0x22
 8008c42:	9a05      	ldr	r2, [sp, #20]
 8008c44:	9803      	ldr	r0, [sp, #12]
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	9b02      	ldr	r3, [sp, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d0e1      	beq.n	8008c12 <_strtol_l.constprop.0+0xa6>
 8008c4e:	1e6b      	subs	r3, r5, #1
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	e007      	b.n	8008c64 <_strtol_l.constprop.0+0xf8>
 8008c54:	2f00      	cmp	r7, #0
 8008c56:	d000      	beq.n	8008c5a <_strtol_l.constprop.0+0xee>
 8008c58:	4240      	negs	r0, r0
 8008c5a:	9a02      	ldr	r2, [sp, #8]
 8008c5c:	2a00      	cmp	r2, #0
 8008c5e:	d0d8      	beq.n	8008c12 <_strtol_l.constprop.0+0xa6>
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1f4      	bne.n	8008c4e <_strtol_l.constprop.0+0xe2>
 8008c64:	9b02      	ldr	r3, [sp, #8]
 8008c66:	9a01      	ldr	r2, [sp, #4]
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	e7d2      	b.n	8008c12 <_strtol_l.constprop.0+0xa6>
 8008c6c:	2430      	movs	r4, #48	; 0x30
 8008c6e:	2e00      	cmp	r6, #0
 8008c70:	d1a7      	bne.n	8008bc2 <_strtol_l.constprop.0+0x56>
 8008c72:	3608      	adds	r6, #8
 8008c74:	e7a5      	b.n	8008bc2 <_strtol_l.constprop.0+0x56>
 8008c76:	2c30      	cmp	r4, #48	; 0x30
 8008c78:	d09b      	beq.n	8008bb2 <_strtol_l.constprop.0+0x46>
 8008c7a:	260a      	movs	r6, #10
 8008c7c:	e7a1      	b.n	8008bc2 <_strtol_l.constprop.0+0x56>
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	0800bf39 	.word	0x0800bf39
 8008c84:	7fffffff 	.word	0x7fffffff

08008c88 <_strtol_r>:
 8008c88:	b510      	push	{r4, lr}
 8008c8a:	f7ff ff6f 	bl	8008b6c <_strtol_l.constprop.0>
 8008c8e:	bd10      	pop	{r4, pc}

08008c90 <quorem>:
 8008c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c92:	0006      	movs	r6, r0
 8008c94:	690b      	ldr	r3, [r1, #16]
 8008c96:	6932      	ldr	r2, [r6, #16]
 8008c98:	b087      	sub	sp, #28
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	9103      	str	r1, [sp, #12]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	db65      	blt.n	8008d6e <quorem+0xde>
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	009c      	lsls	r4, r3, #2
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	000b      	movs	r3, r1
 8008caa:	3314      	adds	r3, #20
 8008cac:	9305      	str	r3, [sp, #20]
 8008cae:	191b      	adds	r3, r3, r4
 8008cb0:	9304      	str	r3, [sp, #16]
 8008cb2:	0033      	movs	r3, r6
 8008cb4:	3314      	adds	r3, #20
 8008cb6:	9302      	str	r3, [sp, #8]
 8008cb8:	191c      	adds	r4, r3, r4
 8008cba:	9b04      	ldr	r3, [sp, #16]
 8008cbc:	6827      	ldr	r7, [r4, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	0038      	movs	r0, r7
 8008cc2:	1c5d      	adds	r5, r3, #1
 8008cc4:	0029      	movs	r1, r5
 8008cc6:	9301      	str	r3, [sp, #4]
 8008cc8:	f7f7 fa3a 	bl	8000140 <__udivsi3>
 8008ccc:	9001      	str	r0, [sp, #4]
 8008cce:	42af      	cmp	r7, r5
 8008cd0:	d324      	bcc.n	8008d1c <quorem+0x8c>
 8008cd2:	2500      	movs	r5, #0
 8008cd4:	46ac      	mov	ip, r5
 8008cd6:	9802      	ldr	r0, [sp, #8]
 8008cd8:	9f05      	ldr	r7, [sp, #20]
 8008cda:	cf08      	ldmia	r7!, {r3}
 8008cdc:	9a01      	ldr	r2, [sp, #4]
 8008cde:	b299      	uxth	r1, r3
 8008ce0:	4351      	muls	r1, r2
 8008ce2:	0c1b      	lsrs	r3, r3, #16
 8008ce4:	4353      	muls	r3, r2
 8008ce6:	1949      	adds	r1, r1, r5
 8008ce8:	0c0a      	lsrs	r2, r1, #16
 8008cea:	189b      	adds	r3, r3, r2
 8008cec:	6802      	ldr	r2, [r0, #0]
 8008cee:	b289      	uxth	r1, r1
 8008cf0:	b292      	uxth	r2, r2
 8008cf2:	4462      	add	r2, ip
 8008cf4:	1a52      	subs	r2, r2, r1
 8008cf6:	6801      	ldr	r1, [r0, #0]
 8008cf8:	0c1d      	lsrs	r5, r3, #16
 8008cfa:	0c09      	lsrs	r1, r1, #16
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	1acb      	subs	r3, r1, r3
 8008d00:	1411      	asrs	r1, r2, #16
 8008d02:	185b      	adds	r3, r3, r1
 8008d04:	1419      	asrs	r1, r3, #16
 8008d06:	b292      	uxth	r2, r2
 8008d08:	041b      	lsls	r3, r3, #16
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	9b04      	ldr	r3, [sp, #16]
 8008d0e:	468c      	mov	ip, r1
 8008d10:	c004      	stmia	r0!, {r2}
 8008d12:	42bb      	cmp	r3, r7
 8008d14:	d2e1      	bcs.n	8008cda <quorem+0x4a>
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d030      	beq.n	8008d7e <quorem+0xee>
 8008d1c:	0030      	movs	r0, r6
 8008d1e:	9903      	ldr	r1, [sp, #12]
 8008d20:	f001 fcd4 	bl	800a6cc <__mcmp>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	db21      	blt.n	8008d6c <quorem+0xdc>
 8008d28:	0030      	movs	r0, r6
 8008d2a:	2400      	movs	r4, #0
 8008d2c:	9b01      	ldr	r3, [sp, #4]
 8008d2e:	9903      	ldr	r1, [sp, #12]
 8008d30:	3301      	adds	r3, #1
 8008d32:	9301      	str	r3, [sp, #4]
 8008d34:	3014      	adds	r0, #20
 8008d36:	3114      	adds	r1, #20
 8008d38:	6803      	ldr	r3, [r0, #0]
 8008d3a:	c920      	ldmia	r1!, {r5}
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	1914      	adds	r4, r2, r4
 8008d40:	b2aa      	uxth	r2, r5
 8008d42:	1aa2      	subs	r2, r4, r2
 8008d44:	0c1b      	lsrs	r3, r3, #16
 8008d46:	0c2d      	lsrs	r5, r5, #16
 8008d48:	1414      	asrs	r4, r2, #16
 8008d4a:	1b5b      	subs	r3, r3, r5
 8008d4c:	191b      	adds	r3, r3, r4
 8008d4e:	141c      	asrs	r4, r3, #16
 8008d50:	b292      	uxth	r2, r2
 8008d52:	041b      	lsls	r3, r3, #16
 8008d54:	4313      	orrs	r3, r2
 8008d56:	c008      	stmia	r0!, {r3}
 8008d58:	9b04      	ldr	r3, [sp, #16]
 8008d5a:	428b      	cmp	r3, r1
 8008d5c:	d2ec      	bcs.n	8008d38 <quorem+0xa8>
 8008d5e:	9b00      	ldr	r3, [sp, #0]
 8008d60:	9a02      	ldr	r2, [sp, #8]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	18d3      	adds	r3, r2, r3
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	2a00      	cmp	r2, #0
 8008d6a:	d015      	beq.n	8008d98 <quorem+0x108>
 8008d6c:	9801      	ldr	r0, [sp, #4]
 8008d6e:	b007      	add	sp, #28
 8008d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d106      	bne.n	8008d86 <quorem+0xf6>
 8008d78:	9b00      	ldr	r3, [sp, #0]
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	9b02      	ldr	r3, [sp, #8]
 8008d80:	3c04      	subs	r4, #4
 8008d82:	42a3      	cmp	r3, r4
 8008d84:	d3f5      	bcc.n	8008d72 <quorem+0xe2>
 8008d86:	9b00      	ldr	r3, [sp, #0]
 8008d88:	6133      	str	r3, [r6, #16]
 8008d8a:	e7c7      	b.n	8008d1c <quorem+0x8c>
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	2a00      	cmp	r2, #0
 8008d90:	d106      	bne.n	8008da0 <quorem+0x110>
 8008d92:	9a00      	ldr	r2, [sp, #0]
 8008d94:	3a01      	subs	r2, #1
 8008d96:	9200      	str	r2, [sp, #0]
 8008d98:	9a02      	ldr	r2, [sp, #8]
 8008d9a:	3b04      	subs	r3, #4
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d3f5      	bcc.n	8008d8c <quorem+0xfc>
 8008da0:	9b00      	ldr	r3, [sp, #0]
 8008da2:	6133      	str	r3, [r6, #16]
 8008da4:	e7e2      	b.n	8008d6c <quorem+0xdc>
	...

08008da8 <_dtoa_r>:
 8008da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008daa:	b09d      	sub	sp, #116	; 0x74
 8008dac:	9202      	str	r2, [sp, #8]
 8008dae:	9303      	str	r3, [sp, #12]
 8008db0:	9b02      	ldr	r3, [sp, #8]
 8008db2:	9c03      	ldr	r4, [sp, #12]
 8008db4:	9308      	str	r3, [sp, #32]
 8008db6:	9409      	str	r4, [sp, #36]	; 0x24
 8008db8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008dba:	0007      	movs	r7, r0
 8008dbc:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008dbe:	2c00      	cmp	r4, #0
 8008dc0:	d10e      	bne.n	8008de0 <_dtoa_r+0x38>
 8008dc2:	2010      	movs	r0, #16
 8008dc4:	f001 f982 	bl	800a0cc <malloc>
 8008dc8:	1e02      	subs	r2, r0, #0
 8008dca:	6278      	str	r0, [r7, #36]	; 0x24
 8008dcc:	d104      	bne.n	8008dd8 <_dtoa_r+0x30>
 8008dce:	21ea      	movs	r1, #234	; 0xea
 8008dd0:	4bc7      	ldr	r3, [pc, #796]	; (80090f0 <_dtoa_r+0x348>)
 8008dd2:	48c8      	ldr	r0, [pc, #800]	; (80090f4 <_dtoa_r+0x34c>)
 8008dd4:	f002 f91c 	bl	800b010 <__assert_func>
 8008dd8:	6044      	str	r4, [r0, #4]
 8008dda:	6084      	str	r4, [r0, #8]
 8008ddc:	6004      	str	r4, [r0, #0]
 8008dde:	60c4      	str	r4, [r0, #12]
 8008de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de2:	6819      	ldr	r1, [r3, #0]
 8008de4:	2900      	cmp	r1, #0
 8008de6:	d00a      	beq.n	8008dfe <_dtoa_r+0x56>
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	2301      	movs	r3, #1
 8008dec:	4093      	lsls	r3, r2
 8008dee:	604a      	str	r2, [r1, #4]
 8008df0:	608b      	str	r3, [r1, #8]
 8008df2:	0038      	movs	r0, r7
 8008df4:	f001 f9de 	bl	800a1b4 <_Bfree>
 8008df8:	2200      	movs	r2, #0
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	da20      	bge.n	8008e46 <_dtoa_r+0x9e>
 8008e04:	2301      	movs	r3, #1
 8008e06:	602b      	str	r3, [r5, #0]
 8008e08:	9b03      	ldr	r3, [sp, #12]
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	085b      	lsrs	r3, r3, #1
 8008e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e10:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008e12:	4bb9      	ldr	r3, [pc, #740]	; (80090f8 <_dtoa_r+0x350>)
 8008e14:	4ab8      	ldr	r2, [pc, #736]	; (80090f8 <_dtoa_r+0x350>)
 8008e16:	402b      	ands	r3, r5
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d117      	bne.n	8008e4c <_dtoa_r+0xa4>
 8008e1c:	4bb7      	ldr	r3, [pc, #732]	; (80090fc <_dtoa_r+0x354>)
 8008e1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008e20:	0328      	lsls	r0, r5, #12
 8008e22:	6013      	str	r3, [r2, #0]
 8008e24:	9b02      	ldr	r3, [sp, #8]
 8008e26:	0b00      	lsrs	r0, r0, #12
 8008e28:	4318      	orrs	r0, r3
 8008e2a:	d101      	bne.n	8008e30 <_dtoa_r+0x88>
 8008e2c:	f000 fdbf 	bl	80099ae <_dtoa_r+0xc06>
 8008e30:	48b3      	ldr	r0, [pc, #716]	; (8009100 <_dtoa_r+0x358>)
 8008e32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e34:	9006      	str	r0, [sp, #24]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <_dtoa_r+0x98>
 8008e3a:	4bb2      	ldr	r3, [pc, #712]	; (8009104 <_dtoa_r+0x35c>)
 8008e3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	9806      	ldr	r0, [sp, #24]
 8008e42:	b01d      	add	sp, #116	; 0x74
 8008e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e46:	2300      	movs	r3, #0
 8008e48:	602b      	str	r3, [r5, #0]
 8008e4a:	e7e1      	b.n	8008e10 <_dtoa_r+0x68>
 8008e4c:	9b08      	ldr	r3, [sp, #32]
 8008e4e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008e50:	9312      	str	r3, [sp, #72]	; 0x48
 8008e52:	9413      	str	r4, [sp, #76]	; 0x4c
 8008e54:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008e56:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008e58:	2200      	movs	r2, #0
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	f7f7 faf6 	bl	800044c <__aeabi_dcmpeq>
 8008e60:	1e04      	subs	r4, r0, #0
 8008e62:	d009      	beq.n	8008e78 <_dtoa_r+0xd0>
 8008e64:	2301      	movs	r3, #1
 8008e66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008e68:	6013      	str	r3, [r2, #0]
 8008e6a:	4ba7      	ldr	r3, [pc, #668]	; (8009108 <_dtoa_r+0x360>)
 8008e6c:	9306      	str	r3, [sp, #24]
 8008e6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d0e5      	beq.n	8008e40 <_dtoa_r+0x98>
 8008e74:	4ba5      	ldr	r3, [pc, #660]	; (800910c <_dtoa_r+0x364>)
 8008e76:	e7e1      	b.n	8008e3c <_dtoa_r+0x94>
 8008e78:	ab1a      	add	r3, sp, #104	; 0x68
 8008e7a:	9301      	str	r3, [sp, #4]
 8008e7c:	ab1b      	add	r3, sp, #108	; 0x6c
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	0038      	movs	r0, r7
 8008e82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e86:	f001 fd49 	bl	800a91c <__d2b>
 8008e8a:	006e      	lsls	r6, r5, #1
 8008e8c:	9005      	str	r0, [sp, #20]
 8008e8e:	0d76      	lsrs	r6, r6, #21
 8008e90:	d100      	bne.n	8008e94 <_dtoa_r+0xec>
 8008e92:	e07c      	b.n	8008f8e <_dtoa_r+0x1e6>
 8008e94:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008e96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008e98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e9a:	4a9d      	ldr	r2, [pc, #628]	; (8009110 <_dtoa_r+0x368>)
 8008e9c:	031b      	lsls	r3, r3, #12
 8008e9e:	0b1b      	lsrs	r3, r3, #12
 8008ea0:	431a      	orrs	r2, r3
 8008ea2:	0011      	movs	r1, r2
 8008ea4:	4b9b      	ldr	r3, [pc, #620]	; (8009114 <_dtoa_r+0x36c>)
 8008ea6:	9418      	str	r4, [sp, #96]	; 0x60
 8008ea8:	18f6      	adds	r6, r6, r3
 8008eaa:	2200      	movs	r2, #0
 8008eac:	4b9a      	ldr	r3, [pc, #616]	; (8009118 <_dtoa_r+0x370>)
 8008eae:	f7f8 fdff 	bl	8001ab0 <__aeabi_dsub>
 8008eb2:	4a9a      	ldr	r2, [pc, #616]	; (800911c <_dtoa_r+0x374>)
 8008eb4:	4b9a      	ldr	r3, [pc, #616]	; (8009120 <_dtoa_r+0x378>)
 8008eb6:	f7f8 fb8f 	bl	80015d8 <__aeabi_dmul>
 8008eba:	4a9a      	ldr	r2, [pc, #616]	; (8009124 <_dtoa_r+0x37c>)
 8008ebc:	4b9a      	ldr	r3, [pc, #616]	; (8009128 <_dtoa_r+0x380>)
 8008ebe:	f7f7 fc4d 	bl	800075c <__aeabi_dadd>
 8008ec2:	0004      	movs	r4, r0
 8008ec4:	0030      	movs	r0, r6
 8008ec6:	000d      	movs	r5, r1
 8008ec8:	f7f9 f9d8 	bl	800227c <__aeabi_i2d>
 8008ecc:	4a97      	ldr	r2, [pc, #604]	; (800912c <_dtoa_r+0x384>)
 8008ece:	4b98      	ldr	r3, [pc, #608]	; (8009130 <_dtoa_r+0x388>)
 8008ed0:	f7f8 fb82 	bl	80015d8 <__aeabi_dmul>
 8008ed4:	0002      	movs	r2, r0
 8008ed6:	000b      	movs	r3, r1
 8008ed8:	0020      	movs	r0, r4
 8008eda:	0029      	movs	r1, r5
 8008edc:	f7f7 fc3e 	bl	800075c <__aeabi_dadd>
 8008ee0:	0004      	movs	r4, r0
 8008ee2:	000d      	movs	r5, r1
 8008ee4:	f7f9 f994 	bl	8002210 <__aeabi_d2iz>
 8008ee8:	2200      	movs	r2, #0
 8008eea:	9002      	str	r0, [sp, #8]
 8008eec:	2300      	movs	r3, #0
 8008eee:	0020      	movs	r0, r4
 8008ef0:	0029      	movs	r1, r5
 8008ef2:	f7f7 fab1 	bl	8000458 <__aeabi_dcmplt>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d00b      	beq.n	8008f12 <_dtoa_r+0x16a>
 8008efa:	9802      	ldr	r0, [sp, #8]
 8008efc:	f7f9 f9be 	bl	800227c <__aeabi_i2d>
 8008f00:	002b      	movs	r3, r5
 8008f02:	0022      	movs	r2, r4
 8008f04:	f7f7 faa2 	bl	800044c <__aeabi_dcmpeq>
 8008f08:	4243      	negs	r3, r0
 8008f0a:	4158      	adcs	r0, r3
 8008f0c:	9b02      	ldr	r3, [sp, #8]
 8008f0e:	1a1b      	subs	r3, r3, r0
 8008f10:	9302      	str	r3, [sp, #8]
 8008f12:	2301      	movs	r3, #1
 8008f14:	9316      	str	r3, [sp, #88]	; 0x58
 8008f16:	9b02      	ldr	r3, [sp, #8]
 8008f18:	2b16      	cmp	r3, #22
 8008f1a:	d80f      	bhi.n	8008f3c <_dtoa_r+0x194>
 8008f1c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008f1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008f20:	00da      	lsls	r2, r3, #3
 8008f22:	4b84      	ldr	r3, [pc, #528]	; (8009134 <_dtoa_r+0x38c>)
 8008f24:	189b      	adds	r3, r3, r2
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f7f7 fa95 	bl	8000458 <__aeabi_dcmplt>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d049      	beq.n	8008fc6 <_dtoa_r+0x21e>
 8008f32:	9b02      	ldr	r3, [sp, #8]
 8008f34:	3b01      	subs	r3, #1
 8008f36:	9302      	str	r3, [sp, #8]
 8008f38:	2300      	movs	r3, #0
 8008f3a:	9316      	str	r3, [sp, #88]	; 0x58
 8008f3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008f3e:	1b9e      	subs	r6, r3, r6
 8008f40:	2300      	movs	r3, #0
 8008f42:	930a      	str	r3, [sp, #40]	; 0x28
 8008f44:	0033      	movs	r3, r6
 8008f46:	3b01      	subs	r3, #1
 8008f48:	930d      	str	r3, [sp, #52]	; 0x34
 8008f4a:	d504      	bpl.n	8008f56 <_dtoa_r+0x1ae>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	1b9b      	subs	r3, r3, r6
 8008f50:	930a      	str	r3, [sp, #40]	; 0x28
 8008f52:	2300      	movs	r3, #0
 8008f54:	930d      	str	r3, [sp, #52]	; 0x34
 8008f56:	9b02      	ldr	r3, [sp, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	db36      	blt.n	8008fca <_dtoa_r+0x222>
 8008f5c:	9a02      	ldr	r2, [sp, #8]
 8008f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f60:	4694      	mov	ip, r2
 8008f62:	4463      	add	r3, ip
 8008f64:	930d      	str	r3, [sp, #52]	; 0x34
 8008f66:	2300      	movs	r3, #0
 8008f68:	9215      	str	r2, [sp, #84]	; 0x54
 8008f6a:	930e      	str	r3, [sp, #56]	; 0x38
 8008f6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f6e:	2401      	movs	r4, #1
 8008f70:	2b09      	cmp	r3, #9
 8008f72:	d864      	bhi.n	800903e <_dtoa_r+0x296>
 8008f74:	2b05      	cmp	r3, #5
 8008f76:	dd02      	ble.n	8008f7e <_dtoa_r+0x1d6>
 8008f78:	2400      	movs	r4, #0
 8008f7a:	3b04      	subs	r3, #4
 8008f7c:	9322      	str	r3, [sp, #136]	; 0x88
 8008f7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f80:	1e98      	subs	r0, r3, #2
 8008f82:	2803      	cmp	r0, #3
 8008f84:	d864      	bhi.n	8009050 <_dtoa_r+0x2a8>
 8008f86:	f7f7 f8c7 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008f8a:	3829      	.short	0x3829
 8008f8c:	5836      	.short	0x5836
 8008f8e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008f90:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008f92:	189e      	adds	r6, r3, r2
 8008f94:	4b68      	ldr	r3, [pc, #416]	; (8009138 <_dtoa_r+0x390>)
 8008f96:	18f2      	adds	r2, r6, r3
 8008f98:	2a20      	cmp	r2, #32
 8008f9a:	dd0f      	ble.n	8008fbc <_dtoa_r+0x214>
 8008f9c:	2340      	movs	r3, #64	; 0x40
 8008f9e:	1a9b      	subs	r3, r3, r2
 8008fa0:	409d      	lsls	r5, r3
 8008fa2:	4b66      	ldr	r3, [pc, #408]	; (800913c <_dtoa_r+0x394>)
 8008fa4:	9802      	ldr	r0, [sp, #8]
 8008fa6:	18f3      	adds	r3, r6, r3
 8008fa8:	40d8      	lsrs	r0, r3
 8008faa:	4328      	orrs	r0, r5
 8008fac:	f7f9 f996 	bl	80022dc <__aeabi_ui2d>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	4c63      	ldr	r4, [pc, #396]	; (8009140 <_dtoa_r+0x398>)
 8008fb4:	3e01      	subs	r6, #1
 8008fb6:	1909      	adds	r1, r1, r4
 8008fb8:	9318      	str	r3, [sp, #96]	; 0x60
 8008fba:	e776      	b.n	8008eaa <_dtoa_r+0x102>
 8008fbc:	2320      	movs	r3, #32
 8008fbe:	9802      	ldr	r0, [sp, #8]
 8008fc0:	1a9b      	subs	r3, r3, r2
 8008fc2:	4098      	lsls	r0, r3
 8008fc4:	e7f2      	b.n	8008fac <_dtoa_r+0x204>
 8008fc6:	9016      	str	r0, [sp, #88]	; 0x58
 8008fc8:	e7b8      	b.n	8008f3c <_dtoa_r+0x194>
 8008fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fcc:	9a02      	ldr	r2, [sp, #8]
 8008fce:	1a9b      	subs	r3, r3, r2
 8008fd0:	930a      	str	r3, [sp, #40]	; 0x28
 8008fd2:	4253      	negs	r3, r2
 8008fd4:	930e      	str	r3, [sp, #56]	; 0x38
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	9315      	str	r3, [sp, #84]	; 0x54
 8008fda:	e7c7      	b.n	8008f6c <_dtoa_r+0x1c4>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fe0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008fe2:	930c      	str	r3, [sp, #48]	; 0x30
 8008fe4:	9307      	str	r3, [sp, #28]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	dc13      	bgt.n	8009012 <_dtoa_r+0x26a>
 8008fea:	2301      	movs	r3, #1
 8008fec:	001a      	movs	r2, r3
 8008fee:	930c      	str	r3, [sp, #48]	; 0x30
 8008ff0:	9307      	str	r3, [sp, #28]
 8008ff2:	9223      	str	r2, [sp, #140]	; 0x8c
 8008ff4:	e00d      	b.n	8009012 <_dtoa_r+0x26a>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e7f1      	b.n	8008fde <_dtoa_r+0x236>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009000:	4694      	mov	ip, r2
 8009002:	9b02      	ldr	r3, [sp, #8]
 8009004:	4463      	add	r3, ip
 8009006:	930c      	str	r3, [sp, #48]	; 0x30
 8009008:	3301      	adds	r3, #1
 800900a:	9307      	str	r3, [sp, #28]
 800900c:	2b00      	cmp	r3, #0
 800900e:	dc00      	bgt.n	8009012 <_dtoa_r+0x26a>
 8009010:	2301      	movs	r3, #1
 8009012:	2200      	movs	r2, #0
 8009014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009016:	6042      	str	r2, [r0, #4]
 8009018:	3204      	adds	r2, #4
 800901a:	0015      	movs	r5, r2
 800901c:	3514      	adds	r5, #20
 800901e:	6841      	ldr	r1, [r0, #4]
 8009020:	429d      	cmp	r5, r3
 8009022:	d919      	bls.n	8009058 <_dtoa_r+0x2b0>
 8009024:	0038      	movs	r0, r7
 8009026:	f001 f881 	bl	800a12c <_Balloc>
 800902a:	9006      	str	r0, [sp, #24]
 800902c:	2800      	cmp	r0, #0
 800902e:	d117      	bne.n	8009060 <_dtoa_r+0x2b8>
 8009030:	21d5      	movs	r1, #213	; 0xd5
 8009032:	0002      	movs	r2, r0
 8009034:	4b43      	ldr	r3, [pc, #268]	; (8009144 <_dtoa_r+0x39c>)
 8009036:	0049      	lsls	r1, r1, #1
 8009038:	e6cb      	b.n	8008dd2 <_dtoa_r+0x2a>
 800903a:	2301      	movs	r3, #1
 800903c:	e7de      	b.n	8008ffc <_dtoa_r+0x254>
 800903e:	2300      	movs	r3, #0
 8009040:	940f      	str	r4, [sp, #60]	; 0x3c
 8009042:	9322      	str	r3, [sp, #136]	; 0x88
 8009044:	3b01      	subs	r3, #1
 8009046:	930c      	str	r3, [sp, #48]	; 0x30
 8009048:	9307      	str	r3, [sp, #28]
 800904a:	2200      	movs	r2, #0
 800904c:	3313      	adds	r3, #19
 800904e:	e7d0      	b.n	8008ff2 <_dtoa_r+0x24a>
 8009050:	2301      	movs	r3, #1
 8009052:	930f      	str	r3, [sp, #60]	; 0x3c
 8009054:	3b02      	subs	r3, #2
 8009056:	e7f6      	b.n	8009046 <_dtoa_r+0x29e>
 8009058:	3101      	adds	r1, #1
 800905a:	6041      	str	r1, [r0, #4]
 800905c:	0052      	lsls	r2, r2, #1
 800905e:	e7dc      	b.n	800901a <_dtoa_r+0x272>
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	9a06      	ldr	r2, [sp, #24]
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	9b07      	ldr	r3, [sp, #28]
 8009068:	2b0e      	cmp	r3, #14
 800906a:	d900      	bls.n	800906e <_dtoa_r+0x2c6>
 800906c:	e0eb      	b.n	8009246 <_dtoa_r+0x49e>
 800906e:	2c00      	cmp	r4, #0
 8009070:	d100      	bne.n	8009074 <_dtoa_r+0x2cc>
 8009072:	e0e8      	b.n	8009246 <_dtoa_r+0x49e>
 8009074:	9b02      	ldr	r3, [sp, #8]
 8009076:	2b00      	cmp	r3, #0
 8009078:	dd68      	ble.n	800914c <_dtoa_r+0x3a4>
 800907a:	001a      	movs	r2, r3
 800907c:	210f      	movs	r1, #15
 800907e:	4b2d      	ldr	r3, [pc, #180]	; (8009134 <_dtoa_r+0x38c>)
 8009080:	400a      	ands	r2, r1
 8009082:	00d2      	lsls	r2, r2, #3
 8009084:	189b      	adds	r3, r3, r2
 8009086:	681d      	ldr	r5, [r3, #0]
 8009088:	685e      	ldr	r6, [r3, #4]
 800908a:	9b02      	ldr	r3, [sp, #8]
 800908c:	111c      	asrs	r4, r3, #4
 800908e:	2302      	movs	r3, #2
 8009090:	9310      	str	r3, [sp, #64]	; 0x40
 8009092:	9b02      	ldr	r3, [sp, #8]
 8009094:	05db      	lsls	r3, r3, #23
 8009096:	d50b      	bpl.n	80090b0 <_dtoa_r+0x308>
 8009098:	4b2b      	ldr	r3, [pc, #172]	; (8009148 <_dtoa_r+0x3a0>)
 800909a:	400c      	ands	r4, r1
 800909c:	6a1a      	ldr	r2, [r3, #32]
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80090a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80090a4:	f7f7 fe96 	bl	8000dd4 <__aeabi_ddiv>
 80090a8:	2303      	movs	r3, #3
 80090aa:	9008      	str	r0, [sp, #32]
 80090ac:	9109      	str	r1, [sp, #36]	; 0x24
 80090ae:	9310      	str	r3, [sp, #64]	; 0x40
 80090b0:	4b25      	ldr	r3, [pc, #148]	; (8009148 <_dtoa_r+0x3a0>)
 80090b2:	9314      	str	r3, [sp, #80]	; 0x50
 80090b4:	2c00      	cmp	r4, #0
 80090b6:	d108      	bne.n	80090ca <_dtoa_r+0x322>
 80090b8:	9808      	ldr	r0, [sp, #32]
 80090ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090bc:	002a      	movs	r2, r5
 80090be:	0033      	movs	r3, r6
 80090c0:	f7f7 fe88 	bl	8000dd4 <__aeabi_ddiv>
 80090c4:	9008      	str	r0, [sp, #32]
 80090c6:	9109      	str	r1, [sp, #36]	; 0x24
 80090c8:	e05c      	b.n	8009184 <_dtoa_r+0x3dc>
 80090ca:	2301      	movs	r3, #1
 80090cc:	421c      	tst	r4, r3
 80090ce:	d00b      	beq.n	80090e8 <_dtoa_r+0x340>
 80090d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090d2:	0028      	movs	r0, r5
 80090d4:	3301      	adds	r3, #1
 80090d6:	9310      	str	r3, [sp, #64]	; 0x40
 80090d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090da:	0031      	movs	r1, r6
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	f7f8 fa7a 	bl	80015d8 <__aeabi_dmul>
 80090e4:	0005      	movs	r5, r0
 80090e6:	000e      	movs	r6, r1
 80090e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090ea:	1064      	asrs	r4, r4, #1
 80090ec:	3308      	adds	r3, #8
 80090ee:	e7e0      	b.n	80090b2 <_dtoa_r+0x30a>
 80090f0:	0800c046 	.word	0x0800c046
 80090f4:	0800c05d 	.word	0x0800c05d
 80090f8:	7ff00000 	.word	0x7ff00000
 80090fc:	0000270f 	.word	0x0000270f
 8009100:	0800c042 	.word	0x0800c042
 8009104:	0800c045 	.word	0x0800c045
 8009108:	0800bebc 	.word	0x0800bebc
 800910c:	0800bebd 	.word	0x0800bebd
 8009110:	3ff00000 	.word	0x3ff00000
 8009114:	fffffc01 	.word	0xfffffc01
 8009118:	3ff80000 	.word	0x3ff80000
 800911c:	636f4361 	.word	0x636f4361
 8009120:	3fd287a7 	.word	0x3fd287a7
 8009124:	8b60c8b3 	.word	0x8b60c8b3
 8009128:	3fc68a28 	.word	0x3fc68a28
 800912c:	509f79fb 	.word	0x509f79fb
 8009130:	3fd34413 	.word	0x3fd34413
 8009134:	0800c1c8 	.word	0x0800c1c8
 8009138:	00000432 	.word	0x00000432
 800913c:	00000412 	.word	0x00000412
 8009140:	fe100000 	.word	0xfe100000
 8009144:	0800c0b8 	.word	0x0800c0b8
 8009148:	0800c1a0 	.word	0x0800c1a0
 800914c:	2302      	movs	r3, #2
 800914e:	9310      	str	r3, [sp, #64]	; 0x40
 8009150:	9b02      	ldr	r3, [sp, #8]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d016      	beq.n	8009184 <_dtoa_r+0x3dc>
 8009156:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009158:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800915a:	425c      	negs	r4, r3
 800915c:	230f      	movs	r3, #15
 800915e:	4ab6      	ldr	r2, [pc, #728]	; (8009438 <_dtoa_r+0x690>)
 8009160:	4023      	ands	r3, r4
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	18d3      	adds	r3, r2, r3
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f7f8 fa35 	bl	80015d8 <__aeabi_dmul>
 800916e:	2601      	movs	r6, #1
 8009170:	2300      	movs	r3, #0
 8009172:	9008      	str	r0, [sp, #32]
 8009174:	9109      	str	r1, [sp, #36]	; 0x24
 8009176:	4db1      	ldr	r5, [pc, #708]	; (800943c <_dtoa_r+0x694>)
 8009178:	1124      	asrs	r4, r4, #4
 800917a:	2c00      	cmp	r4, #0
 800917c:	d000      	beq.n	8009180 <_dtoa_r+0x3d8>
 800917e:	e094      	b.n	80092aa <_dtoa_r+0x502>
 8009180:	2b00      	cmp	r3, #0
 8009182:	d19f      	bne.n	80090c4 <_dtoa_r+0x31c>
 8009184:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009186:	2b00      	cmp	r3, #0
 8009188:	d100      	bne.n	800918c <_dtoa_r+0x3e4>
 800918a:	e09b      	b.n	80092c4 <_dtoa_r+0x51c>
 800918c:	9c08      	ldr	r4, [sp, #32]
 800918e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009190:	2200      	movs	r2, #0
 8009192:	0020      	movs	r0, r4
 8009194:	0029      	movs	r1, r5
 8009196:	4baa      	ldr	r3, [pc, #680]	; (8009440 <_dtoa_r+0x698>)
 8009198:	f7f7 f95e 	bl	8000458 <__aeabi_dcmplt>
 800919c:	2800      	cmp	r0, #0
 800919e:	d100      	bne.n	80091a2 <_dtoa_r+0x3fa>
 80091a0:	e090      	b.n	80092c4 <_dtoa_r+0x51c>
 80091a2:	9b07      	ldr	r3, [sp, #28]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d100      	bne.n	80091aa <_dtoa_r+0x402>
 80091a8:	e08c      	b.n	80092c4 <_dtoa_r+0x51c>
 80091aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	dd46      	ble.n	800923e <_dtoa_r+0x496>
 80091b0:	9b02      	ldr	r3, [sp, #8]
 80091b2:	2200      	movs	r2, #0
 80091b4:	0020      	movs	r0, r4
 80091b6:	0029      	movs	r1, r5
 80091b8:	1e5e      	subs	r6, r3, #1
 80091ba:	4ba2      	ldr	r3, [pc, #648]	; (8009444 <_dtoa_r+0x69c>)
 80091bc:	f7f8 fa0c 	bl	80015d8 <__aeabi_dmul>
 80091c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091c2:	9008      	str	r0, [sp, #32]
 80091c4:	9109      	str	r1, [sp, #36]	; 0x24
 80091c6:	3301      	adds	r3, #1
 80091c8:	9310      	str	r3, [sp, #64]	; 0x40
 80091ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80091ce:	9c08      	ldr	r4, [sp, #32]
 80091d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80091d2:	9314      	str	r3, [sp, #80]	; 0x50
 80091d4:	f7f9 f852 	bl	800227c <__aeabi_i2d>
 80091d8:	0022      	movs	r2, r4
 80091da:	002b      	movs	r3, r5
 80091dc:	f7f8 f9fc 	bl	80015d8 <__aeabi_dmul>
 80091e0:	2200      	movs	r2, #0
 80091e2:	4b99      	ldr	r3, [pc, #612]	; (8009448 <_dtoa_r+0x6a0>)
 80091e4:	f7f7 faba 	bl	800075c <__aeabi_dadd>
 80091e8:	9010      	str	r0, [sp, #64]	; 0x40
 80091ea:	9111      	str	r1, [sp, #68]	; 0x44
 80091ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091f0:	9208      	str	r2, [sp, #32]
 80091f2:	9309      	str	r3, [sp, #36]	; 0x24
 80091f4:	4a95      	ldr	r2, [pc, #596]	; (800944c <_dtoa_r+0x6a4>)
 80091f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091f8:	4694      	mov	ip, r2
 80091fa:	4463      	add	r3, ip
 80091fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80091fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009200:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009202:	2b00      	cmp	r3, #0
 8009204:	d161      	bne.n	80092ca <_dtoa_r+0x522>
 8009206:	2200      	movs	r2, #0
 8009208:	0020      	movs	r0, r4
 800920a:	0029      	movs	r1, r5
 800920c:	4b90      	ldr	r3, [pc, #576]	; (8009450 <_dtoa_r+0x6a8>)
 800920e:	f7f8 fc4f 	bl	8001ab0 <__aeabi_dsub>
 8009212:	9a08      	ldr	r2, [sp, #32]
 8009214:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009216:	0004      	movs	r4, r0
 8009218:	000d      	movs	r5, r1
 800921a:	f7f7 f931 	bl	8000480 <__aeabi_dcmpgt>
 800921e:	2800      	cmp	r0, #0
 8009220:	d000      	beq.n	8009224 <_dtoa_r+0x47c>
 8009222:	e2af      	b.n	8009784 <_dtoa_r+0x9dc>
 8009224:	488b      	ldr	r0, [pc, #556]	; (8009454 <_dtoa_r+0x6ac>)
 8009226:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009228:	4684      	mov	ip, r0
 800922a:	4461      	add	r1, ip
 800922c:	000b      	movs	r3, r1
 800922e:	0020      	movs	r0, r4
 8009230:	0029      	movs	r1, r5
 8009232:	9a08      	ldr	r2, [sp, #32]
 8009234:	f7f7 f910 	bl	8000458 <__aeabi_dcmplt>
 8009238:	2800      	cmp	r0, #0
 800923a:	d000      	beq.n	800923e <_dtoa_r+0x496>
 800923c:	e29f      	b.n	800977e <_dtoa_r+0x9d6>
 800923e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009240:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009242:	9308      	str	r3, [sp, #32]
 8009244:	9409      	str	r4, [sp, #36]	; 0x24
 8009246:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009248:	2b00      	cmp	r3, #0
 800924a:	da00      	bge.n	800924e <_dtoa_r+0x4a6>
 800924c:	e172      	b.n	8009534 <_dtoa_r+0x78c>
 800924e:	9a02      	ldr	r2, [sp, #8]
 8009250:	2a0e      	cmp	r2, #14
 8009252:	dd00      	ble.n	8009256 <_dtoa_r+0x4ae>
 8009254:	e16e      	b.n	8009534 <_dtoa_r+0x78c>
 8009256:	4b78      	ldr	r3, [pc, #480]	; (8009438 <_dtoa_r+0x690>)
 8009258:	00d2      	lsls	r2, r2, #3
 800925a:	189b      	adds	r3, r3, r2
 800925c:	685c      	ldr	r4, [r3, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	930a      	str	r3, [sp, #40]	; 0x28
 8009262:	940b      	str	r4, [sp, #44]	; 0x2c
 8009264:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009266:	2b00      	cmp	r3, #0
 8009268:	db00      	blt.n	800926c <_dtoa_r+0x4c4>
 800926a:	e0f7      	b.n	800945c <_dtoa_r+0x6b4>
 800926c:	9b07      	ldr	r3, [sp, #28]
 800926e:	2b00      	cmp	r3, #0
 8009270:	dd00      	ble.n	8009274 <_dtoa_r+0x4cc>
 8009272:	e0f3      	b.n	800945c <_dtoa_r+0x6b4>
 8009274:	d000      	beq.n	8009278 <_dtoa_r+0x4d0>
 8009276:	e282      	b.n	800977e <_dtoa_r+0x9d6>
 8009278:	980a      	ldr	r0, [sp, #40]	; 0x28
 800927a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800927c:	2200      	movs	r2, #0
 800927e:	4b74      	ldr	r3, [pc, #464]	; (8009450 <_dtoa_r+0x6a8>)
 8009280:	f7f8 f9aa 	bl	80015d8 <__aeabi_dmul>
 8009284:	9a08      	ldr	r2, [sp, #32]
 8009286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009288:	f7f7 f904 	bl	8000494 <__aeabi_dcmpge>
 800928c:	9e07      	ldr	r6, [sp, #28]
 800928e:	0035      	movs	r5, r6
 8009290:	2800      	cmp	r0, #0
 8009292:	d000      	beq.n	8009296 <_dtoa_r+0x4ee>
 8009294:	e259      	b.n	800974a <_dtoa_r+0x9a2>
 8009296:	9b06      	ldr	r3, [sp, #24]
 8009298:	9a06      	ldr	r2, [sp, #24]
 800929a:	3301      	adds	r3, #1
 800929c:	9308      	str	r3, [sp, #32]
 800929e:	2331      	movs	r3, #49	; 0x31
 80092a0:	7013      	strb	r3, [r2, #0]
 80092a2:	9b02      	ldr	r3, [sp, #8]
 80092a4:	3301      	adds	r3, #1
 80092a6:	9302      	str	r3, [sp, #8]
 80092a8:	e254      	b.n	8009754 <_dtoa_r+0x9ac>
 80092aa:	4234      	tst	r4, r6
 80092ac:	d007      	beq.n	80092be <_dtoa_r+0x516>
 80092ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092b0:	3301      	adds	r3, #1
 80092b2:	9310      	str	r3, [sp, #64]	; 0x40
 80092b4:	682a      	ldr	r2, [r5, #0]
 80092b6:	686b      	ldr	r3, [r5, #4]
 80092b8:	f7f8 f98e 	bl	80015d8 <__aeabi_dmul>
 80092bc:	0033      	movs	r3, r6
 80092be:	1064      	asrs	r4, r4, #1
 80092c0:	3508      	adds	r5, #8
 80092c2:	e75a      	b.n	800917a <_dtoa_r+0x3d2>
 80092c4:	9e02      	ldr	r6, [sp, #8]
 80092c6:	9b07      	ldr	r3, [sp, #28]
 80092c8:	e780      	b.n	80091cc <_dtoa_r+0x424>
 80092ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092ce:	1e5a      	subs	r2, r3, #1
 80092d0:	4b59      	ldr	r3, [pc, #356]	; (8009438 <_dtoa_r+0x690>)
 80092d2:	00d2      	lsls	r2, r2, #3
 80092d4:	189b      	adds	r3, r3, r2
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	2900      	cmp	r1, #0
 80092dc:	d051      	beq.n	8009382 <_dtoa_r+0x5da>
 80092de:	2000      	movs	r0, #0
 80092e0:	495d      	ldr	r1, [pc, #372]	; (8009458 <_dtoa_r+0x6b0>)
 80092e2:	f7f7 fd77 	bl	8000dd4 <__aeabi_ddiv>
 80092e6:	9a08      	ldr	r2, [sp, #32]
 80092e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ea:	f7f8 fbe1 	bl	8001ab0 <__aeabi_dsub>
 80092ee:	9a06      	ldr	r2, [sp, #24]
 80092f0:	9b06      	ldr	r3, [sp, #24]
 80092f2:	4694      	mov	ip, r2
 80092f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80092f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092f8:	9010      	str	r0, [sp, #64]	; 0x40
 80092fa:	9111      	str	r1, [sp, #68]	; 0x44
 80092fc:	4463      	add	r3, ip
 80092fe:	9319      	str	r3, [sp, #100]	; 0x64
 8009300:	0029      	movs	r1, r5
 8009302:	0020      	movs	r0, r4
 8009304:	f7f8 ff84 	bl	8002210 <__aeabi_d2iz>
 8009308:	9014      	str	r0, [sp, #80]	; 0x50
 800930a:	f7f8 ffb7 	bl	800227c <__aeabi_i2d>
 800930e:	0002      	movs	r2, r0
 8009310:	000b      	movs	r3, r1
 8009312:	0020      	movs	r0, r4
 8009314:	0029      	movs	r1, r5
 8009316:	f7f8 fbcb 	bl	8001ab0 <__aeabi_dsub>
 800931a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800931c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800931e:	3301      	adds	r3, #1
 8009320:	9308      	str	r3, [sp, #32]
 8009322:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009324:	0004      	movs	r4, r0
 8009326:	3330      	adds	r3, #48	; 0x30
 8009328:	7013      	strb	r3, [r2, #0]
 800932a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800932c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800932e:	000d      	movs	r5, r1
 8009330:	f7f7 f892 	bl	8000458 <__aeabi_dcmplt>
 8009334:	2800      	cmp	r0, #0
 8009336:	d175      	bne.n	8009424 <_dtoa_r+0x67c>
 8009338:	0022      	movs	r2, r4
 800933a:	002b      	movs	r3, r5
 800933c:	2000      	movs	r0, #0
 800933e:	4940      	ldr	r1, [pc, #256]	; (8009440 <_dtoa_r+0x698>)
 8009340:	f7f8 fbb6 	bl	8001ab0 <__aeabi_dsub>
 8009344:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009346:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009348:	f7f7 f886 	bl	8000458 <__aeabi_dcmplt>
 800934c:	2800      	cmp	r0, #0
 800934e:	d000      	beq.n	8009352 <_dtoa_r+0x5aa>
 8009350:	e0d2      	b.n	80094f8 <_dtoa_r+0x750>
 8009352:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009354:	9a08      	ldr	r2, [sp, #32]
 8009356:	4293      	cmp	r3, r2
 8009358:	d100      	bne.n	800935c <_dtoa_r+0x5b4>
 800935a:	e770      	b.n	800923e <_dtoa_r+0x496>
 800935c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800935e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009360:	2200      	movs	r2, #0
 8009362:	4b38      	ldr	r3, [pc, #224]	; (8009444 <_dtoa_r+0x69c>)
 8009364:	f7f8 f938 	bl	80015d8 <__aeabi_dmul>
 8009368:	4b36      	ldr	r3, [pc, #216]	; (8009444 <_dtoa_r+0x69c>)
 800936a:	9010      	str	r0, [sp, #64]	; 0x40
 800936c:	9111      	str	r1, [sp, #68]	; 0x44
 800936e:	2200      	movs	r2, #0
 8009370:	0020      	movs	r0, r4
 8009372:	0029      	movs	r1, r5
 8009374:	f7f8 f930 	bl	80015d8 <__aeabi_dmul>
 8009378:	9b08      	ldr	r3, [sp, #32]
 800937a:	0004      	movs	r4, r0
 800937c:	000d      	movs	r5, r1
 800937e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009380:	e7be      	b.n	8009300 <_dtoa_r+0x558>
 8009382:	9808      	ldr	r0, [sp, #32]
 8009384:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009386:	f7f8 f927 	bl	80015d8 <__aeabi_dmul>
 800938a:	9a06      	ldr	r2, [sp, #24]
 800938c:	9b06      	ldr	r3, [sp, #24]
 800938e:	4694      	mov	ip, r2
 8009390:	9308      	str	r3, [sp, #32]
 8009392:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009394:	9010      	str	r0, [sp, #64]	; 0x40
 8009396:	9111      	str	r1, [sp, #68]	; 0x44
 8009398:	4463      	add	r3, ip
 800939a:	9319      	str	r3, [sp, #100]	; 0x64
 800939c:	0029      	movs	r1, r5
 800939e:	0020      	movs	r0, r4
 80093a0:	f7f8 ff36 	bl	8002210 <__aeabi_d2iz>
 80093a4:	9017      	str	r0, [sp, #92]	; 0x5c
 80093a6:	f7f8 ff69 	bl	800227c <__aeabi_i2d>
 80093aa:	0002      	movs	r2, r0
 80093ac:	000b      	movs	r3, r1
 80093ae:	0020      	movs	r0, r4
 80093b0:	0029      	movs	r1, r5
 80093b2:	f7f8 fb7d 	bl	8001ab0 <__aeabi_dsub>
 80093b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093b8:	9a08      	ldr	r2, [sp, #32]
 80093ba:	3330      	adds	r3, #48	; 0x30
 80093bc:	7013      	strb	r3, [r2, #0]
 80093be:	0013      	movs	r3, r2
 80093c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80093c2:	3301      	adds	r3, #1
 80093c4:	0004      	movs	r4, r0
 80093c6:	000d      	movs	r5, r1
 80093c8:	9308      	str	r3, [sp, #32]
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d12c      	bne.n	8009428 <_dtoa_r+0x680>
 80093ce:	9810      	ldr	r0, [sp, #64]	; 0x40
 80093d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80093d2:	9a06      	ldr	r2, [sp, #24]
 80093d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093d6:	4694      	mov	ip, r2
 80093d8:	4463      	add	r3, ip
 80093da:	2200      	movs	r2, #0
 80093dc:	9308      	str	r3, [sp, #32]
 80093de:	4b1e      	ldr	r3, [pc, #120]	; (8009458 <_dtoa_r+0x6b0>)
 80093e0:	f7f7 f9bc 	bl	800075c <__aeabi_dadd>
 80093e4:	0002      	movs	r2, r0
 80093e6:	000b      	movs	r3, r1
 80093e8:	0020      	movs	r0, r4
 80093ea:	0029      	movs	r1, r5
 80093ec:	f7f7 f848 	bl	8000480 <__aeabi_dcmpgt>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d000      	beq.n	80093f6 <_dtoa_r+0x64e>
 80093f4:	e080      	b.n	80094f8 <_dtoa_r+0x750>
 80093f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80093f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093fa:	2000      	movs	r0, #0
 80093fc:	4916      	ldr	r1, [pc, #88]	; (8009458 <_dtoa_r+0x6b0>)
 80093fe:	f7f8 fb57 	bl	8001ab0 <__aeabi_dsub>
 8009402:	0002      	movs	r2, r0
 8009404:	000b      	movs	r3, r1
 8009406:	0020      	movs	r0, r4
 8009408:	0029      	movs	r1, r5
 800940a:	f7f7 f825 	bl	8000458 <__aeabi_dcmplt>
 800940e:	2800      	cmp	r0, #0
 8009410:	d100      	bne.n	8009414 <_dtoa_r+0x66c>
 8009412:	e714      	b.n	800923e <_dtoa_r+0x496>
 8009414:	9b08      	ldr	r3, [sp, #32]
 8009416:	001a      	movs	r2, r3
 8009418:	3a01      	subs	r2, #1
 800941a:	9208      	str	r2, [sp, #32]
 800941c:	7812      	ldrb	r2, [r2, #0]
 800941e:	2a30      	cmp	r2, #48	; 0x30
 8009420:	d0f8      	beq.n	8009414 <_dtoa_r+0x66c>
 8009422:	9308      	str	r3, [sp, #32]
 8009424:	9602      	str	r6, [sp, #8]
 8009426:	e055      	b.n	80094d4 <_dtoa_r+0x72c>
 8009428:	2200      	movs	r2, #0
 800942a:	4b06      	ldr	r3, [pc, #24]	; (8009444 <_dtoa_r+0x69c>)
 800942c:	f7f8 f8d4 	bl	80015d8 <__aeabi_dmul>
 8009430:	0004      	movs	r4, r0
 8009432:	000d      	movs	r5, r1
 8009434:	e7b2      	b.n	800939c <_dtoa_r+0x5f4>
 8009436:	46c0      	nop			; (mov r8, r8)
 8009438:	0800c1c8 	.word	0x0800c1c8
 800943c:	0800c1a0 	.word	0x0800c1a0
 8009440:	3ff00000 	.word	0x3ff00000
 8009444:	40240000 	.word	0x40240000
 8009448:	401c0000 	.word	0x401c0000
 800944c:	fcc00000 	.word	0xfcc00000
 8009450:	40140000 	.word	0x40140000
 8009454:	7cc00000 	.word	0x7cc00000
 8009458:	3fe00000 	.word	0x3fe00000
 800945c:	9b07      	ldr	r3, [sp, #28]
 800945e:	9e06      	ldr	r6, [sp, #24]
 8009460:	3b01      	subs	r3, #1
 8009462:	199b      	adds	r3, r3, r6
 8009464:	930c      	str	r3, [sp, #48]	; 0x30
 8009466:	9c08      	ldr	r4, [sp, #32]
 8009468:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800946a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800946c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800946e:	0020      	movs	r0, r4
 8009470:	0029      	movs	r1, r5
 8009472:	f7f7 fcaf 	bl	8000dd4 <__aeabi_ddiv>
 8009476:	f7f8 fecb 	bl	8002210 <__aeabi_d2iz>
 800947a:	9007      	str	r0, [sp, #28]
 800947c:	f7f8 fefe 	bl	800227c <__aeabi_i2d>
 8009480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009484:	f7f8 f8a8 	bl	80015d8 <__aeabi_dmul>
 8009488:	0002      	movs	r2, r0
 800948a:	000b      	movs	r3, r1
 800948c:	0020      	movs	r0, r4
 800948e:	0029      	movs	r1, r5
 8009490:	f7f8 fb0e 	bl	8001ab0 <__aeabi_dsub>
 8009494:	0033      	movs	r3, r6
 8009496:	9a07      	ldr	r2, [sp, #28]
 8009498:	3601      	adds	r6, #1
 800949a:	3230      	adds	r2, #48	; 0x30
 800949c:	701a      	strb	r2, [r3, #0]
 800949e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094a0:	9608      	str	r6, [sp, #32]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d139      	bne.n	800951a <_dtoa_r+0x772>
 80094a6:	0002      	movs	r2, r0
 80094a8:	000b      	movs	r3, r1
 80094aa:	f7f7 f957 	bl	800075c <__aeabi_dadd>
 80094ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094b2:	0004      	movs	r4, r0
 80094b4:	000d      	movs	r5, r1
 80094b6:	f7f6 ffe3 	bl	8000480 <__aeabi_dcmpgt>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d11b      	bne.n	80094f6 <_dtoa_r+0x74e>
 80094be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c2:	0020      	movs	r0, r4
 80094c4:	0029      	movs	r1, r5
 80094c6:	f7f6 ffc1 	bl	800044c <__aeabi_dcmpeq>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d002      	beq.n	80094d4 <_dtoa_r+0x72c>
 80094ce:	9b07      	ldr	r3, [sp, #28]
 80094d0:	07db      	lsls	r3, r3, #31
 80094d2:	d410      	bmi.n	80094f6 <_dtoa_r+0x74e>
 80094d4:	0038      	movs	r0, r7
 80094d6:	9905      	ldr	r1, [sp, #20]
 80094d8:	f000 fe6c 	bl	800a1b4 <_Bfree>
 80094dc:	2300      	movs	r3, #0
 80094de:	9a08      	ldr	r2, [sp, #32]
 80094e0:	9802      	ldr	r0, [sp, #8]
 80094e2:	7013      	strb	r3, [r2, #0]
 80094e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80094e6:	3001      	adds	r0, #1
 80094e8:	6018      	str	r0, [r3, #0]
 80094ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d100      	bne.n	80094f2 <_dtoa_r+0x74a>
 80094f0:	e4a6      	b.n	8008e40 <_dtoa_r+0x98>
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	e4a4      	b.n	8008e40 <_dtoa_r+0x98>
 80094f6:	9e02      	ldr	r6, [sp, #8]
 80094f8:	9b08      	ldr	r3, [sp, #32]
 80094fa:	9308      	str	r3, [sp, #32]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	781a      	ldrb	r2, [r3, #0]
 8009500:	2a39      	cmp	r2, #57	; 0x39
 8009502:	d106      	bne.n	8009512 <_dtoa_r+0x76a>
 8009504:	9a06      	ldr	r2, [sp, #24]
 8009506:	429a      	cmp	r2, r3
 8009508:	d1f7      	bne.n	80094fa <_dtoa_r+0x752>
 800950a:	2230      	movs	r2, #48	; 0x30
 800950c:	9906      	ldr	r1, [sp, #24]
 800950e:	3601      	adds	r6, #1
 8009510:	700a      	strb	r2, [r1, #0]
 8009512:	781a      	ldrb	r2, [r3, #0]
 8009514:	3201      	adds	r2, #1
 8009516:	701a      	strb	r2, [r3, #0]
 8009518:	e784      	b.n	8009424 <_dtoa_r+0x67c>
 800951a:	2200      	movs	r2, #0
 800951c:	4baa      	ldr	r3, [pc, #680]	; (80097c8 <_dtoa_r+0xa20>)
 800951e:	f7f8 f85b 	bl	80015d8 <__aeabi_dmul>
 8009522:	2200      	movs	r2, #0
 8009524:	2300      	movs	r3, #0
 8009526:	0004      	movs	r4, r0
 8009528:	000d      	movs	r5, r1
 800952a:	f7f6 ff8f 	bl	800044c <__aeabi_dcmpeq>
 800952e:	2800      	cmp	r0, #0
 8009530:	d09b      	beq.n	800946a <_dtoa_r+0x6c2>
 8009532:	e7cf      	b.n	80094d4 <_dtoa_r+0x72c>
 8009534:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009536:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009538:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800953a:	2d00      	cmp	r5, #0
 800953c:	d012      	beq.n	8009564 <_dtoa_r+0x7bc>
 800953e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009540:	2a01      	cmp	r2, #1
 8009542:	dc66      	bgt.n	8009612 <_dtoa_r+0x86a>
 8009544:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009546:	2a00      	cmp	r2, #0
 8009548:	d05d      	beq.n	8009606 <_dtoa_r+0x85e>
 800954a:	4aa0      	ldr	r2, [pc, #640]	; (80097cc <_dtoa_r+0xa24>)
 800954c:	189b      	adds	r3, r3, r2
 800954e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009550:	2101      	movs	r1, #1
 8009552:	18d2      	adds	r2, r2, r3
 8009554:	920a      	str	r2, [sp, #40]	; 0x28
 8009556:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009558:	0038      	movs	r0, r7
 800955a:	18d3      	adds	r3, r2, r3
 800955c:	930d      	str	r3, [sp, #52]	; 0x34
 800955e:	f000 ff25 	bl	800a3ac <__i2b>
 8009562:	0005      	movs	r5, r0
 8009564:	2c00      	cmp	r4, #0
 8009566:	dd0e      	ble.n	8009586 <_dtoa_r+0x7de>
 8009568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800956a:	2b00      	cmp	r3, #0
 800956c:	dd0b      	ble.n	8009586 <_dtoa_r+0x7de>
 800956e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009570:	0023      	movs	r3, r4
 8009572:	4294      	cmp	r4, r2
 8009574:	dd00      	ble.n	8009578 <_dtoa_r+0x7d0>
 8009576:	0013      	movs	r3, r2
 8009578:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800957a:	1ae4      	subs	r4, r4, r3
 800957c:	1ad2      	subs	r2, r2, r3
 800957e:	920a      	str	r2, [sp, #40]	; 0x28
 8009580:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	930d      	str	r3, [sp, #52]	; 0x34
 8009586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009588:	2b00      	cmp	r3, #0
 800958a:	d01f      	beq.n	80095cc <_dtoa_r+0x824>
 800958c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800958e:	2b00      	cmp	r3, #0
 8009590:	d054      	beq.n	800963c <_dtoa_r+0x894>
 8009592:	2e00      	cmp	r6, #0
 8009594:	dd11      	ble.n	80095ba <_dtoa_r+0x812>
 8009596:	0029      	movs	r1, r5
 8009598:	0032      	movs	r2, r6
 800959a:	0038      	movs	r0, r7
 800959c:	f000 ffcc 	bl	800a538 <__pow5mult>
 80095a0:	9a05      	ldr	r2, [sp, #20]
 80095a2:	0001      	movs	r1, r0
 80095a4:	0005      	movs	r5, r0
 80095a6:	0038      	movs	r0, r7
 80095a8:	f000 ff16 	bl	800a3d8 <__multiply>
 80095ac:	9905      	ldr	r1, [sp, #20]
 80095ae:	9014      	str	r0, [sp, #80]	; 0x50
 80095b0:	0038      	movs	r0, r7
 80095b2:	f000 fdff 	bl	800a1b4 <_Bfree>
 80095b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095b8:	9305      	str	r3, [sp, #20]
 80095ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095bc:	1b9a      	subs	r2, r3, r6
 80095be:	42b3      	cmp	r3, r6
 80095c0:	d004      	beq.n	80095cc <_dtoa_r+0x824>
 80095c2:	0038      	movs	r0, r7
 80095c4:	9905      	ldr	r1, [sp, #20]
 80095c6:	f000 ffb7 	bl	800a538 <__pow5mult>
 80095ca:	9005      	str	r0, [sp, #20]
 80095cc:	2101      	movs	r1, #1
 80095ce:	0038      	movs	r0, r7
 80095d0:	f000 feec 	bl	800a3ac <__i2b>
 80095d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095d6:	0006      	movs	r6, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	dd31      	ble.n	8009640 <_dtoa_r+0x898>
 80095dc:	001a      	movs	r2, r3
 80095de:	0001      	movs	r1, r0
 80095e0:	0038      	movs	r0, r7
 80095e2:	f000 ffa9 	bl	800a538 <__pow5mult>
 80095e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095e8:	0006      	movs	r6, r0
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	dd2d      	ble.n	800964a <_dtoa_r+0x8a2>
 80095ee:	2300      	movs	r3, #0
 80095f0:	930e      	str	r3, [sp, #56]	; 0x38
 80095f2:	6933      	ldr	r3, [r6, #16]
 80095f4:	3303      	adds	r3, #3
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	18f3      	adds	r3, r6, r3
 80095fa:	6858      	ldr	r0, [r3, #4]
 80095fc:	f000 fe8e 	bl	800a31c <__hi0bits>
 8009600:	2320      	movs	r3, #32
 8009602:	1a18      	subs	r0, r3, r0
 8009604:	e039      	b.n	800967a <_dtoa_r+0x8d2>
 8009606:	2336      	movs	r3, #54	; 0x36
 8009608:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800960a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800960c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800960e:	1a9b      	subs	r3, r3, r2
 8009610:	e79d      	b.n	800954e <_dtoa_r+0x7a6>
 8009612:	9b07      	ldr	r3, [sp, #28]
 8009614:	1e5e      	subs	r6, r3, #1
 8009616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009618:	42b3      	cmp	r3, r6
 800961a:	db07      	blt.n	800962c <_dtoa_r+0x884>
 800961c:	1b9e      	subs	r6, r3, r6
 800961e:	9b07      	ldr	r3, [sp, #28]
 8009620:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009622:	2b00      	cmp	r3, #0
 8009624:	da93      	bge.n	800954e <_dtoa_r+0x7a6>
 8009626:	1ae4      	subs	r4, r4, r3
 8009628:	2300      	movs	r3, #0
 800962a:	e790      	b.n	800954e <_dtoa_r+0x7a6>
 800962c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800962e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009630:	1af3      	subs	r3, r6, r3
 8009632:	18d3      	adds	r3, r2, r3
 8009634:	960e      	str	r6, [sp, #56]	; 0x38
 8009636:	9315      	str	r3, [sp, #84]	; 0x54
 8009638:	2600      	movs	r6, #0
 800963a:	e7f0      	b.n	800961e <_dtoa_r+0x876>
 800963c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800963e:	e7c0      	b.n	80095c2 <_dtoa_r+0x81a>
 8009640:	2300      	movs	r3, #0
 8009642:	930e      	str	r3, [sp, #56]	; 0x38
 8009644:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009646:	2b01      	cmp	r3, #1
 8009648:	dc13      	bgt.n	8009672 <_dtoa_r+0x8ca>
 800964a:	2300      	movs	r3, #0
 800964c:	930e      	str	r3, [sp, #56]	; 0x38
 800964e:	9b08      	ldr	r3, [sp, #32]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10e      	bne.n	8009672 <_dtoa_r+0x8ca>
 8009654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009656:	031b      	lsls	r3, r3, #12
 8009658:	d10b      	bne.n	8009672 <_dtoa_r+0x8ca>
 800965a:	4b5d      	ldr	r3, [pc, #372]	; (80097d0 <_dtoa_r+0xa28>)
 800965c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800965e:	4213      	tst	r3, r2
 8009660:	d007      	beq.n	8009672 <_dtoa_r+0x8ca>
 8009662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009664:	3301      	adds	r3, #1
 8009666:	930a      	str	r3, [sp, #40]	; 0x28
 8009668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800966a:	3301      	adds	r3, #1
 800966c:	930d      	str	r3, [sp, #52]	; 0x34
 800966e:	2301      	movs	r3, #1
 8009670:	930e      	str	r3, [sp, #56]	; 0x38
 8009672:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009674:	2001      	movs	r0, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1bb      	bne.n	80095f2 <_dtoa_r+0x84a>
 800967a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800967c:	221f      	movs	r2, #31
 800967e:	1818      	adds	r0, r3, r0
 8009680:	0003      	movs	r3, r0
 8009682:	4013      	ands	r3, r2
 8009684:	4210      	tst	r0, r2
 8009686:	d046      	beq.n	8009716 <_dtoa_r+0x96e>
 8009688:	3201      	adds	r2, #1
 800968a:	1ad2      	subs	r2, r2, r3
 800968c:	2a04      	cmp	r2, #4
 800968e:	dd3f      	ble.n	8009710 <_dtoa_r+0x968>
 8009690:	221c      	movs	r2, #28
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009696:	18e4      	adds	r4, r4, r3
 8009698:	18d2      	adds	r2, r2, r3
 800969a:	920a      	str	r2, [sp, #40]	; 0x28
 800969c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800969e:	18d3      	adds	r3, r2, r3
 80096a0:	930d      	str	r3, [sp, #52]	; 0x34
 80096a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	dd05      	ble.n	80096b4 <_dtoa_r+0x90c>
 80096a8:	001a      	movs	r2, r3
 80096aa:	0038      	movs	r0, r7
 80096ac:	9905      	ldr	r1, [sp, #20]
 80096ae:	f000 ff9f 	bl	800a5f0 <__lshift>
 80096b2:	9005      	str	r0, [sp, #20]
 80096b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	dd05      	ble.n	80096c6 <_dtoa_r+0x91e>
 80096ba:	0031      	movs	r1, r6
 80096bc:	001a      	movs	r2, r3
 80096be:	0038      	movs	r0, r7
 80096c0:	f000 ff96 	bl	800a5f0 <__lshift>
 80096c4:	0006      	movs	r6, r0
 80096c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d026      	beq.n	800971a <_dtoa_r+0x972>
 80096cc:	0031      	movs	r1, r6
 80096ce:	9805      	ldr	r0, [sp, #20]
 80096d0:	f000 fffc 	bl	800a6cc <__mcmp>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	da20      	bge.n	800971a <_dtoa_r+0x972>
 80096d8:	9b02      	ldr	r3, [sp, #8]
 80096da:	220a      	movs	r2, #10
 80096dc:	3b01      	subs	r3, #1
 80096de:	9302      	str	r3, [sp, #8]
 80096e0:	0038      	movs	r0, r7
 80096e2:	2300      	movs	r3, #0
 80096e4:	9905      	ldr	r1, [sp, #20]
 80096e6:	f000 fd89 	bl	800a1fc <__multadd>
 80096ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096ec:	9005      	str	r0, [sp, #20]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d100      	bne.n	80096f4 <_dtoa_r+0x94c>
 80096f2:	e166      	b.n	80099c2 <_dtoa_r+0xc1a>
 80096f4:	2300      	movs	r3, #0
 80096f6:	0029      	movs	r1, r5
 80096f8:	220a      	movs	r2, #10
 80096fa:	0038      	movs	r0, r7
 80096fc:	f000 fd7e 	bl	800a1fc <__multadd>
 8009700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009702:	0005      	movs	r5, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	dc47      	bgt.n	8009798 <_dtoa_r+0x9f0>
 8009708:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800970a:	2b02      	cmp	r3, #2
 800970c:	dc0d      	bgt.n	800972a <_dtoa_r+0x982>
 800970e:	e043      	b.n	8009798 <_dtoa_r+0x9f0>
 8009710:	2a04      	cmp	r2, #4
 8009712:	d0c6      	beq.n	80096a2 <_dtoa_r+0x8fa>
 8009714:	0013      	movs	r3, r2
 8009716:	331c      	adds	r3, #28
 8009718:	e7bc      	b.n	8009694 <_dtoa_r+0x8ec>
 800971a:	9b07      	ldr	r3, [sp, #28]
 800971c:	2b00      	cmp	r3, #0
 800971e:	dc35      	bgt.n	800978c <_dtoa_r+0x9e4>
 8009720:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009722:	2b02      	cmp	r3, #2
 8009724:	dd32      	ble.n	800978c <_dtoa_r+0x9e4>
 8009726:	9b07      	ldr	r3, [sp, #28]
 8009728:	930c      	str	r3, [sp, #48]	; 0x30
 800972a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10c      	bne.n	800974a <_dtoa_r+0x9a2>
 8009730:	0031      	movs	r1, r6
 8009732:	2205      	movs	r2, #5
 8009734:	0038      	movs	r0, r7
 8009736:	f000 fd61 	bl	800a1fc <__multadd>
 800973a:	0006      	movs	r6, r0
 800973c:	0001      	movs	r1, r0
 800973e:	9805      	ldr	r0, [sp, #20]
 8009740:	f000 ffc4 	bl	800a6cc <__mcmp>
 8009744:	2800      	cmp	r0, #0
 8009746:	dd00      	ble.n	800974a <_dtoa_r+0x9a2>
 8009748:	e5a5      	b.n	8009296 <_dtoa_r+0x4ee>
 800974a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800974c:	43db      	mvns	r3, r3
 800974e:	9302      	str	r3, [sp, #8]
 8009750:	9b06      	ldr	r3, [sp, #24]
 8009752:	9308      	str	r3, [sp, #32]
 8009754:	2400      	movs	r4, #0
 8009756:	0031      	movs	r1, r6
 8009758:	0038      	movs	r0, r7
 800975a:	f000 fd2b 	bl	800a1b4 <_Bfree>
 800975e:	2d00      	cmp	r5, #0
 8009760:	d100      	bne.n	8009764 <_dtoa_r+0x9bc>
 8009762:	e6b7      	b.n	80094d4 <_dtoa_r+0x72c>
 8009764:	2c00      	cmp	r4, #0
 8009766:	d005      	beq.n	8009774 <_dtoa_r+0x9cc>
 8009768:	42ac      	cmp	r4, r5
 800976a:	d003      	beq.n	8009774 <_dtoa_r+0x9cc>
 800976c:	0021      	movs	r1, r4
 800976e:	0038      	movs	r0, r7
 8009770:	f000 fd20 	bl	800a1b4 <_Bfree>
 8009774:	0029      	movs	r1, r5
 8009776:	0038      	movs	r0, r7
 8009778:	f000 fd1c 	bl	800a1b4 <_Bfree>
 800977c:	e6aa      	b.n	80094d4 <_dtoa_r+0x72c>
 800977e:	2600      	movs	r6, #0
 8009780:	0035      	movs	r5, r6
 8009782:	e7e2      	b.n	800974a <_dtoa_r+0x9a2>
 8009784:	9602      	str	r6, [sp, #8]
 8009786:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009788:	0035      	movs	r5, r6
 800978a:	e584      	b.n	8009296 <_dtoa_r+0x4ee>
 800978c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800978e:	2b00      	cmp	r3, #0
 8009790:	d100      	bne.n	8009794 <_dtoa_r+0x9ec>
 8009792:	e0ce      	b.n	8009932 <_dtoa_r+0xb8a>
 8009794:	9b07      	ldr	r3, [sp, #28]
 8009796:	930c      	str	r3, [sp, #48]	; 0x30
 8009798:	2c00      	cmp	r4, #0
 800979a:	dd05      	ble.n	80097a8 <_dtoa_r+0xa00>
 800979c:	0029      	movs	r1, r5
 800979e:	0022      	movs	r2, r4
 80097a0:	0038      	movs	r0, r7
 80097a2:	f000 ff25 	bl	800a5f0 <__lshift>
 80097a6:	0005      	movs	r5, r0
 80097a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097aa:	0028      	movs	r0, r5
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d022      	beq.n	80097f6 <_dtoa_r+0xa4e>
 80097b0:	0038      	movs	r0, r7
 80097b2:	6869      	ldr	r1, [r5, #4]
 80097b4:	f000 fcba 	bl	800a12c <_Balloc>
 80097b8:	1e04      	subs	r4, r0, #0
 80097ba:	d10f      	bne.n	80097dc <_dtoa_r+0xa34>
 80097bc:	0002      	movs	r2, r0
 80097be:	4b05      	ldr	r3, [pc, #20]	; (80097d4 <_dtoa_r+0xa2c>)
 80097c0:	4905      	ldr	r1, [pc, #20]	; (80097d8 <_dtoa_r+0xa30>)
 80097c2:	f7ff fb06 	bl	8008dd2 <_dtoa_r+0x2a>
 80097c6:	46c0      	nop			; (mov r8, r8)
 80097c8:	40240000 	.word	0x40240000
 80097cc:	00000433 	.word	0x00000433
 80097d0:	7ff00000 	.word	0x7ff00000
 80097d4:	0800c0b8 	.word	0x0800c0b8
 80097d8:	000002ea 	.word	0x000002ea
 80097dc:	0029      	movs	r1, r5
 80097de:	692b      	ldr	r3, [r5, #16]
 80097e0:	310c      	adds	r1, #12
 80097e2:	1c9a      	adds	r2, r3, #2
 80097e4:	0092      	lsls	r2, r2, #2
 80097e6:	300c      	adds	r0, #12
 80097e8:	f000 fc97 	bl	800a11a <memcpy>
 80097ec:	2201      	movs	r2, #1
 80097ee:	0021      	movs	r1, r4
 80097f0:	0038      	movs	r0, r7
 80097f2:	f000 fefd 	bl	800a5f0 <__lshift>
 80097f6:	9b06      	ldr	r3, [sp, #24]
 80097f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097fa:	930a      	str	r3, [sp, #40]	; 0x28
 80097fc:	3b01      	subs	r3, #1
 80097fe:	189b      	adds	r3, r3, r2
 8009800:	2201      	movs	r2, #1
 8009802:	002c      	movs	r4, r5
 8009804:	0005      	movs	r5, r0
 8009806:	9314      	str	r3, [sp, #80]	; 0x50
 8009808:	9b08      	ldr	r3, [sp, #32]
 800980a:	4013      	ands	r3, r2
 800980c:	930f      	str	r3, [sp, #60]	; 0x3c
 800980e:	0031      	movs	r1, r6
 8009810:	9805      	ldr	r0, [sp, #20]
 8009812:	f7ff fa3d 	bl	8008c90 <quorem>
 8009816:	0003      	movs	r3, r0
 8009818:	0021      	movs	r1, r4
 800981a:	3330      	adds	r3, #48	; 0x30
 800981c:	900d      	str	r0, [sp, #52]	; 0x34
 800981e:	9805      	ldr	r0, [sp, #20]
 8009820:	9307      	str	r3, [sp, #28]
 8009822:	f000 ff53 	bl	800a6cc <__mcmp>
 8009826:	002a      	movs	r2, r5
 8009828:	900e      	str	r0, [sp, #56]	; 0x38
 800982a:	0031      	movs	r1, r6
 800982c:	0038      	movs	r0, r7
 800982e:	f000 ff69 	bl	800a704 <__mdiff>
 8009832:	68c3      	ldr	r3, [r0, #12]
 8009834:	9008      	str	r0, [sp, #32]
 8009836:	9310      	str	r3, [sp, #64]	; 0x40
 8009838:	2301      	movs	r3, #1
 800983a:	930c      	str	r3, [sp, #48]	; 0x30
 800983c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800983e:	2b00      	cmp	r3, #0
 8009840:	d104      	bne.n	800984c <_dtoa_r+0xaa4>
 8009842:	0001      	movs	r1, r0
 8009844:	9805      	ldr	r0, [sp, #20]
 8009846:	f000 ff41 	bl	800a6cc <__mcmp>
 800984a:	900c      	str	r0, [sp, #48]	; 0x30
 800984c:	0038      	movs	r0, r7
 800984e:	9908      	ldr	r1, [sp, #32]
 8009850:	f000 fcb0 	bl	800a1b4 <_Bfree>
 8009854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009856:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009858:	3301      	adds	r3, #1
 800985a:	9308      	str	r3, [sp, #32]
 800985c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800985e:	4313      	orrs	r3, r2
 8009860:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009862:	4313      	orrs	r3, r2
 8009864:	d10c      	bne.n	8009880 <_dtoa_r+0xad8>
 8009866:	9b07      	ldr	r3, [sp, #28]
 8009868:	2b39      	cmp	r3, #57	; 0x39
 800986a:	d026      	beq.n	80098ba <_dtoa_r+0xb12>
 800986c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800986e:	2b00      	cmp	r3, #0
 8009870:	dd02      	ble.n	8009878 <_dtoa_r+0xad0>
 8009872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009874:	3331      	adds	r3, #49	; 0x31
 8009876:	9307      	str	r3, [sp, #28]
 8009878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800987a:	9a07      	ldr	r2, [sp, #28]
 800987c:	701a      	strb	r2, [r3, #0]
 800987e:	e76a      	b.n	8009756 <_dtoa_r+0x9ae>
 8009880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009882:	2b00      	cmp	r3, #0
 8009884:	db04      	blt.n	8009890 <_dtoa_r+0xae8>
 8009886:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009888:	4313      	orrs	r3, r2
 800988a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800988c:	4313      	orrs	r3, r2
 800988e:	d11f      	bne.n	80098d0 <_dtoa_r+0xb28>
 8009890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009892:	2b00      	cmp	r3, #0
 8009894:	ddf0      	ble.n	8009878 <_dtoa_r+0xad0>
 8009896:	9905      	ldr	r1, [sp, #20]
 8009898:	2201      	movs	r2, #1
 800989a:	0038      	movs	r0, r7
 800989c:	f000 fea8 	bl	800a5f0 <__lshift>
 80098a0:	0031      	movs	r1, r6
 80098a2:	9005      	str	r0, [sp, #20]
 80098a4:	f000 ff12 	bl	800a6cc <__mcmp>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	dc03      	bgt.n	80098b4 <_dtoa_r+0xb0c>
 80098ac:	d1e4      	bne.n	8009878 <_dtoa_r+0xad0>
 80098ae:	9b07      	ldr	r3, [sp, #28]
 80098b0:	07db      	lsls	r3, r3, #31
 80098b2:	d5e1      	bpl.n	8009878 <_dtoa_r+0xad0>
 80098b4:	9b07      	ldr	r3, [sp, #28]
 80098b6:	2b39      	cmp	r3, #57	; 0x39
 80098b8:	d1db      	bne.n	8009872 <_dtoa_r+0xaca>
 80098ba:	2339      	movs	r3, #57	; 0x39
 80098bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098be:	7013      	strb	r3, [r2, #0]
 80098c0:	9b08      	ldr	r3, [sp, #32]
 80098c2:	9308      	str	r3, [sp, #32]
 80098c4:	3b01      	subs	r3, #1
 80098c6:	781a      	ldrb	r2, [r3, #0]
 80098c8:	2a39      	cmp	r2, #57	; 0x39
 80098ca:	d068      	beq.n	800999e <_dtoa_r+0xbf6>
 80098cc:	3201      	adds	r2, #1
 80098ce:	e7d5      	b.n	800987c <_dtoa_r+0xad4>
 80098d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	dd07      	ble.n	80098e6 <_dtoa_r+0xb3e>
 80098d6:	9b07      	ldr	r3, [sp, #28]
 80098d8:	2b39      	cmp	r3, #57	; 0x39
 80098da:	d0ee      	beq.n	80098ba <_dtoa_r+0xb12>
 80098dc:	9b07      	ldr	r3, [sp, #28]
 80098de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098e0:	3301      	adds	r3, #1
 80098e2:	7013      	strb	r3, [r2, #0]
 80098e4:	e737      	b.n	8009756 <_dtoa_r+0x9ae>
 80098e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098e8:	9a07      	ldr	r2, [sp, #28]
 80098ea:	701a      	strb	r2, [r3, #0]
 80098ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d03e      	beq.n	8009972 <_dtoa_r+0xbca>
 80098f4:	2300      	movs	r3, #0
 80098f6:	220a      	movs	r2, #10
 80098f8:	9905      	ldr	r1, [sp, #20]
 80098fa:	0038      	movs	r0, r7
 80098fc:	f000 fc7e 	bl	800a1fc <__multadd>
 8009900:	2300      	movs	r3, #0
 8009902:	9005      	str	r0, [sp, #20]
 8009904:	220a      	movs	r2, #10
 8009906:	0021      	movs	r1, r4
 8009908:	0038      	movs	r0, r7
 800990a:	42ac      	cmp	r4, r5
 800990c:	d106      	bne.n	800991c <_dtoa_r+0xb74>
 800990e:	f000 fc75 	bl	800a1fc <__multadd>
 8009912:	0004      	movs	r4, r0
 8009914:	0005      	movs	r5, r0
 8009916:	9b08      	ldr	r3, [sp, #32]
 8009918:	930a      	str	r3, [sp, #40]	; 0x28
 800991a:	e778      	b.n	800980e <_dtoa_r+0xa66>
 800991c:	f000 fc6e 	bl	800a1fc <__multadd>
 8009920:	0029      	movs	r1, r5
 8009922:	0004      	movs	r4, r0
 8009924:	2300      	movs	r3, #0
 8009926:	220a      	movs	r2, #10
 8009928:	0038      	movs	r0, r7
 800992a:	f000 fc67 	bl	800a1fc <__multadd>
 800992e:	0005      	movs	r5, r0
 8009930:	e7f1      	b.n	8009916 <_dtoa_r+0xb6e>
 8009932:	9b07      	ldr	r3, [sp, #28]
 8009934:	930c      	str	r3, [sp, #48]	; 0x30
 8009936:	2400      	movs	r4, #0
 8009938:	0031      	movs	r1, r6
 800993a:	9805      	ldr	r0, [sp, #20]
 800993c:	f7ff f9a8 	bl	8008c90 <quorem>
 8009940:	9b06      	ldr	r3, [sp, #24]
 8009942:	3030      	adds	r0, #48	; 0x30
 8009944:	5518      	strb	r0, [r3, r4]
 8009946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009948:	3401      	adds	r4, #1
 800994a:	9007      	str	r0, [sp, #28]
 800994c:	42a3      	cmp	r3, r4
 800994e:	dd07      	ble.n	8009960 <_dtoa_r+0xbb8>
 8009950:	2300      	movs	r3, #0
 8009952:	220a      	movs	r2, #10
 8009954:	0038      	movs	r0, r7
 8009956:	9905      	ldr	r1, [sp, #20]
 8009958:	f000 fc50 	bl	800a1fc <__multadd>
 800995c:	9005      	str	r0, [sp, #20]
 800995e:	e7eb      	b.n	8009938 <_dtoa_r+0xb90>
 8009960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009962:	2001      	movs	r0, #1
 8009964:	2b00      	cmp	r3, #0
 8009966:	dd00      	ble.n	800996a <_dtoa_r+0xbc2>
 8009968:	0018      	movs	r0, r3
 800996a:	2400      	movs	r4, #0
 800996c:	9b06      	ldr	r3, [sp, #24]
 800996e:	181b      	adds	r3, r3, r0
 8009970:	9308      	str	r3, [sp, #32]
 8009972:	9905      	ldr	r1, [sp, #20]
 8009974:	2201      	movs	r2, #1
 8009976:	0038      	movs	r0, r7
 8009978:	f000 fe3a 	bl	800a5f0 <__lshift>
 800997c:	0031      	movs	r1, r6
 800997e:	9005      	str	r0, [sp, #20]
 8009980:	f000 fea4 	bl	800a6cc <__mcmp>
 8009984:	2800      	cmp	r0, #0
 8009986:	dc9b      	bgt.n	80098c0 <_dtoa_r+0xb18>
 8009988:	d102      	bne.n	8009990 <_dtoa_r+0xbe8>
 800998a:	9b07      	ldr	r3, [sp, #28]
 800998c:	07db      	lsls	r3, r3, #31
 800998e:	d497      	bmi.n	80098c0 <_dtoa_r+0xb18>
 8009990:	9b08      	ldr	r3, [sp, #32]
 8009992:	9308      	str	r3, [sp, #32]
 8009994:	3b01      	subs	r3, #1
 8009996:	781a      	ldrb	r2, [r3, #0]
 8009998:	2a30      	cmp	r2, #48	; 0x30
 800999a:	d0fa      	beq.n	8009992 <_dtoa_r+0xbea>
 800999c:	e6db      	b.n	8009756 <_dtoa_r+0x9ae>
 800999e:	9a06      	ldr	r2, [sp, #24]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d18e      	bne.n	80098c2 <_dtoa_r+0xb1a>
 80099a4:	9b02      	ldr	r3, [sp, #8]
 80099a6:	3301      	adds	r3, #1
 80099a8:	9302      	str	r3, [sp, #8]
 80099aa:	2331      	movs	r3, #49	; 0x31
 80099ac:	e799      	b.n	80098e2 <_dtoa_r+0xb3a>
 80099ae:	4b09      	ldr	r3, [pc, #36]	; (80099d4 <_dtoa_r+0xc2c>)
 80099b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80099b2:	9306      	str	r3, [sp, #24]
 80099b4:	4b08      	ldr	r3, [pc, #32]	; (80099d8 <_dtoa_r+0xc30>)
 80099b6:	2a00      	cmp	r2, #0
 80099b8:	d001      	beq.n	80099be <_dtoa_r+0xc16>
 80099ba:	f7ff fa3f 	bl	8008e3c <_dtoa_r+0x94>
 80099be:	f7ff fa3f 	bl	8008e40 <_dtoa_r+0x98>
 80099c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	dcb6      	bgt.n	8009936 <_dtoa_r+0xb8e>
 80099c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	dd00      	ble.n	80099d0 <_dtoa_r+0xc28>
 80099ce:	e6ac      	b.n	800972a <_dtoa_r+0x982>
 80099d0:	e7b1      	b.n	8009936 <_dtoa_r+0xb8e>
 80099d2:	46c0      	nop			; (mov r8, r8)
 80099d4:	0800c039 	.word	0x0800c039
 80099d8:	0800c041 	.word	0x0800c041

080099dc <rshift>:
 80099dc:	0002      	movs	r2, r0
 80099de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099e0:	6904      	ldr	r4, [r0, #16]
 80099e2:	3214      	adds	r2, #20
 80099e4:	0013      	movs	r3, r2
 80099e6:	b085      	sub	sp, #20
 80099e8:	114f      	asrs	r7, r1, #5
 80099ea:	42bc      	cmp	r4, r7
 80099ec:	dd31      	ble.n	8009a52 <rshift+0x76>
 80099ee:	00bb      	lsls	r3, r7, #2
 80099f0:	18d3      	adds	r3, r2, r3
 80099f2:	261f      	movs	r6, #31
 80099f4:	9301      	str	r3, [sp, #4]
 80099f6:	000b      	movs	r3, r1
 80099f8:	00a5      	lsls	r5, r4, #2
 80099fa:	4033      	ands	r3, r6
 80099fc:	1955      	adds	r5, r2, r5
 80099fe:	9302      	str	r3, [sp, #8]
 8009a00:	4231      	tst	r1, r6
 8009a02:	d10c      	bne.n	8009a1e <rshift+0x42>
 8009a04:	0016      	movs	r6, r2
 8009a06:	9901      	ldr	r1, [sp, #4]
 8009a08:	428d      	cmp	r5, r1
 8009a0a:	d838      	bhi.n	8009a7e <rshift+0xa2>
 8009a0c:	9901      	ldr	r1, [sp, #4]
 8009a0e:	2300      	movs	r3, #0
 8009a10:	3903      	subs	r1, #3
 8009a12:	428d      	cmp	r5, r1
 8009a14:	d301      	bcc.n	8009a1a <rshift+0x3e>
 8009a16:	1be3      	subs	r3, r4, r7
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	18d3      	adds	r3, r2, r3
 8009a1c:	e019      	b.n	8009a52 <rshift+0x76>
 8009a1e:	2120      	movs	r1, #32
 8009a20:	9b02      	ldr	r3, [sp, #8]
 8009a22:	9e01      	ldr	r6, [sp, #4]
 8009a24:	1acb      	subs	r3, r1, r3
 8009a26:	9303      	str	r3, [sp, #12]
 8009a28:	ce02      	ldmia	r6!, {r1}
 8009a2a:	9b02      	ldr	r3, [sp, #8]
 8009a2c:	4694      	mov	ip, r2
 8009a2e:	40d9      	lsrs	r1, r3
 8009a30:	9100      	str	r1, [sp, #0]
 8009a32:	42b5      	cmp	r5, r6
 8009a34:	d816      	bhi.n	8009a64 <rshift+0x88>
 8009a36:	9e01      	ldr	r6, [sp, #4]
 8009a38:	2300      	movs	r3, #0
 8009a3a:	3601      	adds	r6, #1
 8009a3c:	42b5      	cmp	r5, r6
 8009a3e:	d302      	bcc.n	8009a46 <rshift+0x6a>
 8009a40:	1be3      	subs	r3, r4, r7
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	3b04      	subs	r3, #4
 8009a46:	9900      	ldr	r1, [sp, #0]
 8009a48:	18d3      	adds	r3, r2, r3
 8009a4a:	6019      	str	r1, [r3, #0]
 8009a4c:	2900      	cmp	r1, #0
 8009a4e:	d000      	beq.n	8009a52 <rshift+0x76>
 8009a50:	3304      	adds	r3, #4
 8009a52:	1a99      	subs	r1, r3, r2
 8009a54:	1089      	asrs	r1, r1, #2
 8009a56:	6101      	str	r1, [r0, #16]
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d101      	bne.n	8009a60 <rshift+0x84>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	6143      	str	r3, [r0, #20]
 8009a60:	b005      	add	sp, #20
 8009a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a64:	6833      	ldr	r3, [r6, #0]
 8009a66:	9903      	ldr	r1, [sp, #12]
 8009a68:	408b      	lsls	r3, r1
 8009a6a:	9900      	ldr	r1, [sp, #0]
 8009a6c:	4319      	orrs	r1, r3
 8009a6e:	4663      	mov	r3, ip
 8009a70:	c302      	stmia	r3!, {r1}
 8009a72:	469c      	mov	ip, r3
 8009a74:	ce02      	ldmia	r6!, {r1}
 8009a76:	9b02      	ldr	r3, [sp, #8]
 8009a78:	40d9      	lsrs	r1, r3
 8009a7a:	9100      	str	r1, [sp, #0]
 8009a7c:	e7d9      	b.n	8009a32 <rshift+0x56>
 8009a7e:	c908      	ldmia	r1!, {r3}
 8009a80:	c608      	stmia	r6!, {r3}
 8009a82:	e7c1      	b.n	8009a08 <rshift+0x2c>

08009a84 <__hexdig_fun>:
 8009a84:	0002      	movs	r2, r0
 8009a86:	3a30      	subs	r2, #48	; 0x30
 8009a88:	0003      	movs	r3, r0
 8009a8a:	2a09      	cmp	r2, #9
 8009a8c:	d802      	bhi.n	8009a94 <__hexdig_fun+0x10>
 8009a8e:	3b20      	subs	r3, #32
 8009a90:	b2d8      	uxtb	r0, r3
 8009a92:	4770      	bx	lr
 8009a94:	0002      	movs	r2, r0
 8009a96:	3a61      	subs	r2, #97	; 0x61
 8009a98:	2a05      	cmp	r2, #5
 8009a9a:	d801      	bhi.n	8009aa0 <__hexdig_fun+0x1c>
 8009a9c:	3b47      	subs	r3, #71	; 0x47
 8009a9e:	e7f7      	b.n	8009a90 <__hexdig_fun+0xc>
 8009aa0:	001a      	movs	r2, r3
 8009aa2:	3a41      	subs	r2, #65	; 0x41
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	2a05      	cmp	r2, #5
 8009aa8:	d8f3      	bhi.n	8009a92 <__hexdig_fun+0xe>
 8009aaa:	3b27      	subs	r3, #39	; 0x27
 8009aac:	e7f0      	b.n	8009a90 <__hexdig_fun+0xc>
	...

08009ab0 <__gethex>:
 8009ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ab2:	b08d      	sub	sp, #52	; 0x34
 8009ab4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ab6:	4bbf      	ldr	r3, [pc, #764]	; (8009db4 <__gethex+0x304>)
 8009ab8:	9005      	str	r0, [sp, #20]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	9109      	str	r1, [sp, #36]	; 0x24
 8009abe:	0018      	movs	r0, r3
 8009ac0:	9202      	str	r2, [sp, #8]
 8009ac2:	9307      	str	r3, [sp, #28]
 8009ac4:	f7f6 fb20 	bl	8000108 <strlen>
 8009ac8:	2202      	movs	r2, #2
 8009aca:	9b07      	ldr	r3, [sp, #28]
 8009acc:	4252      	negs	r2, r2
 8009ace:	181b      	adds	r3, r3, r0
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	9003      	str	r0, [sp, #12]
 8009ad6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ada:	6819      	ldr	r1, [r3, #0]
 8009adc:	1c8b      	adds	r3, r1, #2
 8009ade:	1a52      	subs	r2, r2, r1
 8009ae0:	18d1      	adds	r1, r2, r3
 8009ae2:	9301      	str	r3, [sp, #4]
 8009ae4:	9108      	str	r1, [sp, #32]
 8009ae6:	9901      	ldr	r1, [sp, #4]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	7808      	ldrb	r0, [r1, #0]
 8009aec:	2830      	cmp	r0, #48	; 0x30
 8009aee:	d0f7      	beq.n	8009ae0 <__gethex+0x30>
 8009af0:	f7ff ffc8 	bl	8009a84 <__hexdig_fun>
 8009af4:	2300      	movs	r3, #0
 8009af6:	001c      	movs	r4, r3
 8009af8:	9304      	str	r3, [sp, #16]
 8009afa:	4298      	cmp	r0, r3
 8009afc:	d11f      	bne.n	8009b3e <__gethex+0x8e>
 8009afe:	9a03      	ldr	r2, [sp, #12]
 8009b00:	9907      	ldr	r1, [sp, #28]
 8009b02:	9801      	ldr	r0, [sp, #4]
 8009b04:	f001 fa64 	bl	800afd0 <strncmp>
 8009b08:	0007      	movs	r7, r0
 8009b0a:	42a0      	cmp	r0, r4
 8009b0c:	d000      	beq.n	8009b10 <__gethex+0x60>
 8009b0e:	e06b      	b.n	8009be8 <__gethex+0x138>
 8009b10:	9b01      	ldr	r3, [sp, #4]
 8009b12:	9a03      	ldr	r2, [sp, #12]
 8009b14:	5c98      	ldrb	r0, [r3, r2]
 8009b16:	189d      	adds	r5, r3, r2
 8009b18:	f7ff ffb4 	bl	8009a84 <__hexdig_fun>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	9304      	str	r3, [sp, #16]
 8009b20:	42a0      	cmp	r0, r4
 8009b22:	d030      	beq.n	8009b86 <__gethex+0xd6>
 8009b24:	9501      	str	r5, [sp, #4]
 8009b26:	9b01      	ldr	r3, [sp, #4]
 8009b28:	7818      	ldrb	r0, [r3, #0]
 8009b2a:	2830      	cmp	r0, #48	; 0x30
 8009b2c:	d009      	beq.n	8009b42 <__gethex+0x92>
 8009b2e:	f7ff ffa9 	bl	8009a84 <__hexdig_fun>
 8009b32:	4242      	negs	r2, r0
 8009b34:	4142      	adcs	r2, r0
 8009b36:	2301      	movs	r3, #1
 8009b38:	002c      	movs	r4, r5
 8009b3a:	9204      	str	r2, [sp, #16]
 8009b3c:	9308      	str	r3, [sp, #32]
 8009b3e:	9d01      	ldr	r5, [sp, #4]
 8009b40:	e004      	b.n	8009b4c <__gethex+0x9c>
 8009b42:	9b01      	ldr	r3, [sp, #4]
 8009b44:	3301      	adds	r3, #1
 8009b46:	9301      	str	r3, [sp, #4]
 8009b48:	e7ed      	b.n	8009b26 <__gethex+0x76>
 8009b4a:	3501      	adds	r5, #1
 8009b4c:	7828      	ldrb	r0, [r5, #0]
 8009b4e:	f7ff ff99 	bl	8009a84 <__hexdig_fun>
 8009b52:	1e07      	subs	r7, r0, #0
 8009b54:	d1f9      	bne.n	8009b4a <__gethex+0x9a>
 8009b56:	0028      	movs	r0, r5
 8009b58:	9a03      	ldr	r2, [sp, #12]
 8009b5a:	9907      	ldr	r1, [sp, #28]
 8009b5c:	f001 fa38 	bl	800afd0 <strncmp>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d10e      	bne.n	8009b82 <__gethex+0xd2>
 8009b64:	2c00      	cmp	r4, #0
 8009b66:	d107      	bne.n	8009b78 <__gethex+0xc8>
 8009b68:	9b03      	ldr	r3, [sp, #12]
 8009b6a:	18ed      	adds	r5, r5, r3
 8009b6c:	002c      	movs	r4, r5
 8009b6e:	7828      	ldrb	r0, [r5, #0]
 8009b70:	f7ff ff88 	bl	8009a84 <__hexdig_fun>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d102      	bne.n	8009b7e <__gethex+0xce>
 8009b78:	1b64      	subs	r4, r4, r5
 8009b7a:	00a7      	lsls	r7, r4, #2
 8009b7c:	e003      	b.n	8009b86 <__gethex+0xd6>
 8009b7e:	3501      	adds	r5, #1
 8009b80:	e7f5      	b.n	8009b6e <__gethex+0xbe>
 8009b82:	2c00      	cmp	r4, #0
 8009b84:	d1f8      	bne.n	8009b78 <__gethex+0xc8>
 8009b86:	2220      	movs	r2, #32
 8009b88:	782b      	ldrb	r3, [r5, #0]
 8009b8a:	002e      	movs	r6, r5
 8009b8c:	4393      	bics	r3, r2
 8009b8e:	2b50      	cmp	r3, #80	; 0x50
 8009b90:	d11d      	bne.n	8009bce <__gethex+0x11e>
 8009b92:	786b      	ldrb	r3, [r5, #1]
 8009b94:	2b2b      	cmp	r3, #43	; 0x2b
 8009b96:	d02c      	beq.n	8009bf2 <__gethex+0x142>
 8009b98:	2b2d      	cmp	r3, #45	; 0x2d
 8009b9a:	d02e      	beq.n	8009bfa <__gethex+0x14a>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	1c6e      	adds	r6, r5, #1
 8009ba0:	9306      	str	r3, [sp, #24]
 8009ba2:	7830      	ldrb	r0, [r6, #0]
 8009ba4:	f7ff ff6e 	bl	8009a84 <__hexdig_fun>
 8009ba8:	1e43      	subs	r3, r0, #1
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b18      	cmp	r3, #24
 8009bae:	d82b      	bhi.n	8009c08 <__gethex+0x158>
 8009bb0:	3810      	subs	r0, #16
 8009bb2:	0004      	movs	r4, r0
 8009bb4:	7870      	ldrb	r0, [r6, #1]
 8009bb6:	f7ff ff65 	bl	8009a84 <__hexdig_fun>
 8009bba:	1e43      	subs	r3, r0, #1
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	3601      	adds	r6, #1
 8009bc0:	2b18      	cmp	r3, #24
 8009bc2:	d91c      	bls.n	8009bfe <__gethex+0x14e>
 8009bc4:	9b06      	ldr	r3, [sp, #24]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d000      	beq.n	8009bcc <__gethex+0x11c>
 8009bca:	4264      	negs	r4, r4
 8009bcc:	193f      	adds	r7, r7, r4
 8009bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd0:	601e      	str	r6, [r3, #0]
 8009bd2:	9b04      	ldr	r3, [sp, #16]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d019      	beq.n	8009c0c <__gethex+0x15c>
 8009bd8:	2600      	movs	r6, #0
 8009bda:	9b08      	ldr	r3, [sp, #32]
 8009bdc:	42b3      	cmp	r3, r6
 8009bde:	d100      	bne.n	8009be2 <__gethex+0x132>
 8009be0:	3606      	adds	r6, #6
 8009be2:	0030      	movs	r0, r6
 8009be4:	b00d      	add	sp, #52	; 0x34
 8009be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009be8:	2301      	movs	r3, #1
 8009bea:	2700      	movs	r7, #0
 8009bec:	9d01      	ldr	r5, [sp, #4]
 8009bee:	9304      	str	r3, [sp, #16]
 8009bf0:	e7c9      	b.n	8009b86 <__gethex+0xd6>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	9306      	str	r3, [sp, #24]
 8009bf6:	1cae      	adds	r6, r5, #2
 8009bf8:	e7d3      	b.n	8009ba2 <__gethex+0xf2>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e7fa      	b.n	8009bf4 <__gethex+0x144>
 8009bfe:	230a      	movs	r3, #10
 8009c00:	435c      	muls	r4, r3
 8009c02:	1824      	adds	r4, r4, r0
 8009c04:	3c10      	subs	r4, #16
 8009c06:	e7d5      	b.n	8009bb4 <__gethex+0x104>
 8009c08:	002e      	movs	r6, r5
 8009c0a:	e7e0      	b.n	8009bce <__gethex+0x11e>
 8009c0c:	9b01      	ldr	r3, [sp, #4]
 8009c0e:	9904      	ldr	r1, [sp, #16]
 8009c10:	1aeb      	subs	r3, r5, r3
 8009c12:	3b01      	subs	r3, #1
 8009c14:	2b07      	cmp	r3, #7
 8009c16:	dc0a      	bgt.n	8009c2e <__gethex+0x17e>
 8009c18:	9805      	ldr	r0, [sp, #20]
 8009c1a:	f000 fa87 	bl	800a12c <_Balloc>
 8009c1e:	1e04      	subs	r4, r0, #0
 8009c20:	d108      	bne.n	8009c34 <__gethex+0x184>
 8009c22:	0002      	movs	r2, r0
 8009c24:	21de      	movs	r1, #222	; 0xde
 8009c26:	4b64      	ldr	r3, [pc, #400]	; (8009db8 <__gethex+0x308>)
 8009c28:	4864      	ldr	r0, [pc, #400]	; (8009dbc <__gethex+0x30c>)
 8009c2a:	f001 f9f1 	bl	800b010 <__assert_func>
 8009c2e:	3101      	adds	r1, #1
 8009c30:	105b      	asrs	r3, r3, #1
 8009c32:	e7ef      	b.n	8009c14 <__gethex+0x164>
 8009c34:	0003      	movs	r3, r0
 8009c36:	3314      	adds	r3, #20
 8009c38:	9304      	str	r3, [sp, #16]
 8009c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	001e      	movs	r6, r3
 8009c40:	9306      	str	r3, [sp, #24]
 8009c42:	9b01      	ldr	r3, [sp, #4]
 8009c44:	42ab      	cmp	r3, r5
 8009c46:	d340      	bcc.n	8009cca <__gethex+0x21a>
 8009c48:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009c4a:	9b04      	ldr	r3, [sp, #16]
 8009c4c:	c540      	stmia	r5!, {r6}
 8009c4e:	1aed      	subs	r5, r5, r3
 8009c50:	10ad      	asrs	r5, r5, #2
 8009c52:	0030      	movs	r0, r6
 8009c54:	6125      	str	r5, [r4, #16]
 8009c56:	f000 fb61 	bl	800a31c <__hi0bits>
 8009c5a:	9b02      	ldr	r3, [sp, #8]
 8009c5c:	016d      	lsls	r5, r5, #5
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	1a2e      	subs	r6, r5, r0
 8009c62:	9301      	str	r3, [sp, #4]
 8009c64:	429e      	cmp	r6, r3
 8009c66:	dd5a      	ble.n	8009d1e <__gethex+0x26e>
 8009c68:	1af6      	subs	r6, r6, r3
 8009c6a:	0031      	movs	r1, r6
 8009c6c:	0020      	movs	r0, r4
 8009c6e:	f000 ff03 	bl	800aa78 <__any_on>
 8009c72:	1e05      	subs	r5, r0, #0
 8009c74:	d016      	beq.n	8009ca4 <__gethex+0x1f4>
 8009c76:	2501      	movs	r5, #1
 8009c78:	211f      	movs	r1, #31
 8009c7a:	0028      	movs	r0, r5
 8009c7c:	1e73      	subs	r3, r6, #1
 8009c7e:	4019      	ands	r1, r3
 8009c80:	4088      	lsls	r0, r1
 8009c82:	0001      	movs	r1, r0
 8009c84:	115a      	asrs	r2, r3, #5
 8009c86:	9804      	ldr	r0, [sp, #16]
 8009c88:	0092      	lsls	r2, r2, #2
 8009c8a:	5812      	ldr	r2, [r2, r0]
 8009c8c:	420a      	tst	r2, r1
 8009c8e:	d009      	beq.n	8009ca4 <__gethex+0x1f4>
 8009c90:	42ab      	cmp	r3, r5
 8009c92:	dd06      	ble.n	8009ca2 <__gethex+0x1f2>
 8009c94:	0020      	movs	r0, r4
 8009c96:	1eb1      	subs	r1, r6, #2
 8009c98:	f000 feee 	bl	800aa78 <__any_on>
 8009c9c:	3502      	adds	r5, #2
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	d100      	bne.n	8009ca4 <__gethex+0x1f4>
 8009ca2:	2502      	movs	r5, #2
 8009ca4:	0031      	movs	r1, r6
 8009ca6:	0020      	movs	r0, r4
 8009ca8:	f7ff fe98 	bl	80099dc <rshift>
 8009cac:	19bf      	adds	r7, r7, r6
 8009cae:	9b02      	ldr	r3, [sp, #8]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	9303      	str	r3, [sp, #12]
 8009cb4:	42bb      	cmp	r3, r7
 8009cb6:	da42      	bge.n	8009d3e <__gethex+0x28e>
 8009cb8:	0021      	movs	r1, r4
 8009cba:	9805      	ldr	r0, [sp, #20]
 8009cbc:	f000 fa7a 	bl	800a1b4 <_Bfree>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cc4:	26a3      	movs	r6, #163	; 0xa3
 8009cc6:	6013      	str	r3, [r2, #0]
 8009cc8:	e78b      	b.n	8009be2 <__gethex+0x132>
 8009cca:	1e6b      	subs	r3, r5, #1
 8009ccc:	9308      	str	r3, [sp, #32]
 8009cce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d014      	beq.n	8009d00 <__gethex+0x250>
 8009cd6:	9b06      	ldr	r3, [sp, #24]
 8009cd8:	2b20      	cmp	r3, #32
 8009cda:	d104      	bne.n	8009ce6 <__gethex+0x236>
 8009cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cde:	c340      	stmia	r3!, {r6}
 8009ce0:	2600      	movs	r6, #0
 8009ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce4:	9606      	str	r6, [sp, #24]
 8009ce6:	9b08      	ldr	r3, [sp, #32]
 8009ce8:	7818      	ldrb	r0, [r3, #0]
 8009cea:	f7ff fecb 	bl	8009a84 <__hexdig_fun>
 8009cee:	230f      	movs	r3, #15
 8009cf0:	4018      	ands	r0, r3
 8009cf2:	9b06      	ldr	r3, [sp, #24]
 8009cf4:	9d08      	ldr	r5, [sp, #32]
 8009cf6:	4098      	lsls	r0, r3
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	4306      	orrs	r6, r0
 8009cfc:	9306      	str	r3, [sp, #24]
 8009cfe:	e7a0      	b.n	8009c42 <__gethex+0x192>
 8009d00:	2301      	movs	r3, #1
 8009d02:	9a03      	ldr	r2, [sp, #12]
 8009d04:	1a9d      	subs	r5, r3, r2
 8009d06:	9b08      	ldr	r3, [sp, #32]
 8009d08:	195d      	adds	r5, r3, r5
 8009d0a:	9b01      	ldr	r3, [sp, #4]
 8009d0c:	429d      	cmp	r5, r3
 8009d0e:	d3e2      	bcc.n	8009cd6 <__gethex+0x226>
 8009d10:	0028      	movs	r0, r5
 8009d12:	9907      	ldr	r1, [sp, #28]
 8009d14:	f001 f95c 	bl	800afd0 <strncmp>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d1dc      	bne.n	8009cd6 <__gethex+0x226>
 8009d1c:	e791      	b.n	8009c42 <__gethex+0x192>
 8009d1e:	9b01      	ldr	r3, [sp, #4]
 8009d20:	2500      	movs	r5, #0
 8009d22:	429e      	cmp	r6, r3
 8009d24:	dac3      	bge.n	8009cae <__gethex+0x1fe>
 8009d26:	1b9e      	subs	r6, r3, r6
 8009d28:	0021      	movs	r1, r4
 8009d2a:	0032      	movs	r2, r6
 8009d2c:	9805      	ldr	r0, [sp, #20]
 8009d2e:	f000 fc5f 	bl	800a5f0 <__lshift>
 8009d32:	0003      	movs	r3, r0
 8009d34:	3314      	adds	r3, #20
 8009d36:	0004      	movs	r4, r0
 8009d38:	1bbf      	subs	r7, r7, r6
 8009d3a:	9304      	str	r3, [sp, #16]
 8009d3c:	e7b7      	b.n	8009cae <__gethex+0x1fe>
 8009d3e:	9b02      	ldr	r3, [sp, #8]
 8009d40:	685e      	ldr	r6, [r3, #4]
 8009d42:	42be      	cmp	r6, r7
 8009d44:	dd71      	ble.n	8009e2a <__gethex+0x37a>
 8009d46:	9b01      	ldr	r3, [sp, #4]
 8009d48:	1bf6      	subs	r6, r6, r7
 8009d4a:	42b3      	cmp	r3, r6
 8009d4c:	dc38      	bgt.n	8009dc0 <__gethex+0x310>
 8009d4e:	9b02      	ldr	r3, [sp, #8]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	d026      	beq.n	8009da4 <__gethex+0x2f4>
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d028      	beq.n	8009dac <__gethex+0x2fc>
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d119      	bne.n	8009d92 <__gethex+0x2e2>
 8009d5e:	9b01      	ldr	r3, [sp, #4]
 8009d60:	42b3      	cmp	r3, r6
 8009d62:	d116      	bne.n	8009d92 <__gethex+0x2e2>
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d10d      	bne.n	8009d84 <__gethex+0x2d4>
 8009d68:	9b02      	ldr	r3, [sp, #8]
 8009d6a:	2662      	movs	r6, #98	; 0x62
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	9301      	str	r3, [sp, #4]
 8009d70:	9a01      	ldr	r2, [sp, #4]
 8009d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d74:	601a      	str	r2, [r3, #0]
 8009d76:	2301      	movs	r3, #1
 8009d78:	9a04      	ldr	r2, [sp, #16]
 8009d7a:	6123      	str	r3, [r4, #16]
 8009d7c:	6013      	str	r3, [r2, #0]
 8009d7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d80:	601c      	str	r4, [r3, #0]
 8009d82:	e72e      	b.n	8009be2 <__gethex+0x132>
 8009d84:	9901      	ldr	r1, [sp, #4]
 8009d86:	0020      	movs	r0, r4
 8009d88:	3901      	subs	r1, #1
 8009d8a:	f000 fe75 	bl	800aa78 <__any_on>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d1ea      	bne.n	8009d68 <__gethex+0x2b8>
 8009d92:	0021      	movs	r1, r4
 8009d94:	9805      	ldr	r0, [sp, #20]
 8009d96:	f000 fa0d 	bl	800a1b4 <_Bfree>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d9e:	2650      	movs	r6, #80	; 0x50
 8009da0:	6013      	str	r3, [r2, #0]
 8009da2:	e71e      	b.n	8009be2 <__gethex+0x132>
 8009da4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1f3      	bne.n	8009d92 <__gethex+0x2e2>
 8009daa:	e7dd      	b.n	8009d68 <__gethex+0x2b8>
 8009dac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1da      	bne.n	8009d68 <__gethex+0x2b8>
 8009db2:	e7ee      	b.n	8009d92 <__gethex+0x2e2>
 8009db4:	0800c130 	.word	0x0800c130
 8009db8:	0800c0b8 	.word	0x0800c0b8
 8009dbc:	0800c0c9 	.word	0x0800c0c9
 8009dc0:	1e77      	subs	r7, r6, #1
 8009dc2:	2d00      	cmp	r5, #0
 8009dc4:	d12f      	bne.n	8009e26 <__gethex+0x376>
 8009dc6:	2f00      	cmp	r7, #0
 8009dc8:	d004      	beq.n	8009dd4 <__gethex+0x324>
 8009dca:	0039      	movs	r1, r7
 8009dcc:	0020      	movs	r0, r4
 8009dce:	f000 fe53 	bl	800aa78 <__any_on>
 8009dd2:	0005      	movs	r5, r0
 8009dd4:	231f      	movs	r3, #31
 8009dd6:	117a      	asrs	r2, r7, #5
 8009dd8:	401f      	ands	r7, r3
 8009dda:	3b1e      	subs	r3, #30
 8009ddc:	40bb      	lsls	r3, r7
 8009dde:	9904      	ldr	r1, [sp, #16]
 8009de0:	0092      	lsls	r2, r2, #2
 8009de2:	5852      	ldr	r2, [r2, r1]
 8009de4:	421a      	tst	r2, r3
 8009de6:	d001      	beq.n	8009dec <__gethex+0x33c>
 8009de8:	2302      	movs	r3, #2
 8009dea:	431d      	orrs	r5, r3
 8009dec:	9b01      	ldr	r3, [sp, #4]
 8009dee:	0031      	movs	r1, r6
 8009df0:	1b9b      	subs	r3, r3, r6
 8009df2:	2602      	movs	r6, #2
 8009df4:	0020      	movs	r0, r4
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	f7ff fdf0 	bl	80099dc <rshift>
 8009dfc:	9b02      	ldr	r3, [sp, #8]
 8009dfe:	685f      	ldr	r7, [r3, #4]
 8009e00:	2d00      	cmp	r5, #0
 8009e02:	d041      	beq.n	8009e88 <__gethex+0x3d8>
 8009e04:	9b02      	ldr	r3, [sp, #8]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d010      	beq.n	8009e2e <__gethex+0x37e>
 8009e0c:	2b03      	cmp	r3, #3
 8009e0e:	d012      	beq.n	8009e36 <__gethex+0x386>
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d106      	bne.n	8009e22 <__gethex+0x372>
 8009e14:	07aa      	lsls	r2, r5, #30
 8009e16:	d504      	bpl.n	8009e22 <__gethex+0x372>
 8009e18:	9a04      	ldr	r2, [sp, #16]
 8009e1a:	6810      	ldr	r0, [r2, #0]
 8009e1c:	4305      	orrs	r5, r0
 8009e1e:	421d      	tst	r5, r3
 8009e20:	d10c      	bne.n	8009e3c <__gethex+0x38c>
 8009e22:	2310      	movs	r3, #16
 8009e24:	e02f      	b.n	8009e86 <__gethex+0x3d6>
 8009e26:	2501      	movs	r5, #1
 8009e28:	e7d4      	b.n	8009dd4 <__gethex+0x324>
 8009e2a:	2601      	movs	r6, #1
 8009e2c:	e7e8      	b.n	8009e00 <__gethex+0x350>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e32:	1a9b      	subs	r3, r3, r2
 8009e34:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d0f2      	beq.n	8009e22 <__gethex+0x372>
 8009e3c:	6923      	ldr	r3, [r4, #16]
 8009e3e:	2000      	movs	r0, #0
 8009e40:	9303      	str	r3, [sp, #12]
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	9304      	str	r3, [sp, #16]
 8009e46:	0023      	movs	r3, r4
 8009e48:	9a04      	ldr	r2, [sp, #16]
 8009e4a:	3314      	adds	r3, #20
 8009e4c:	1899      	adds	r1, r3, r2
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	1c55      	adds	r5, r2, #1
 8009e52:	d01e      	beq.n	8009e92 <__gethex+0x3e2>
 8009e54:	3201      	adds	r2, #1
 8009e56:	601a      	str	r2, [r3, #0]
 8009e58:	0023      	movs	r3, r4
 8009e5a:	3314      	adds	r3, #20
 8009e5c:	2e02      	cmp	r6, #2
 8009e5e:	d140      	bne.n	8009ee2 <__gethex+0x432>
 8009e60:	9a02      	ldr	r2, [sp, #8]
 8009e62:	9901      	ldr	r1, [sp, #4]
 8009e64:	6812      	ldr	r2, [r2, #0]
 8009e66:	3a01      	subs	r2, #1
 8009e68:	428a      	cmp	r2, r1
 8009e6a:	d10b      	bne.n	8009e84 <__gethex+0x3d4>
 8009e6c:	114a      	asrs	r2, r1, #5
 8009e6e:	211f      	movs	r1, #31
 8009e70:	9801      	ldr	r0, [sp, #4]
 8009e72:	0092      	lsls	r2, r2, #2
 8009e74:	4001      	ands	r1, r0
 8009e76:	2001      	movs	r0, #1
 8009e78:	0005      	movs	r5, r0
 8009e7a:	408d      	lsls	r5, r1
 8009e7c:	58d3      	ldr	r3, [r2, r3]
 8009e7e:	422b      	tst	r3, r5
 8009e80:	d000      	beq.n	8009e84 <__gethex+0x3d4>
 8009e82:	2601      	movs	r6, #1
 8009e84:	2320      	movs	r3, #32
 8009e86:	431e      	orrs	r6, r3
 8009e88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e8a:	601c      	str	r4, [r3, #0]
 8009e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e8e:	601f      	str	r7, [r3, #0]
 8009e90:	e6a7      	b.n	8009be2 <__gethex+0x132>
 8009e92:	c301      	stmia	r3!, {r0}
 8009e94:	4299      	cmp	r1, r3
 8009e96:	d8da      	bhi.n	8009e4e <__gethex+0x39e>
 8009e98:	9b03      	ldr	r3, [sp, #12]
 8009e9a:	68a2      	ldr	r2, [r4, #8]
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	db17      	blt.n	8009ed0 <__gethex+0x420>
 8009ea0:	6863      	ldr	r3, [r4, #4]
 8009ea2:	9805      	ldr	r0, [sp, #20]
 8009ea4:	1c59      	adds	r1, r3, #1
 8009ea6:	f000 f941 	bl	800a12c <_Balloc>
 8009eaa:	1e05      	subs	r5, r0, #0
 8009eac:	d103      	bne.n	8009eb6 <__gethex+0x406>
 8009eae:	0002      	movs	r2, r0
 8009eb0:	2184      	movs	r1, #132	; 0x84
 8009eb2:	4b1c      	ldr	r3, [pc, #112]	; (8009f24 <__gethex+0x474>)
 8009eb4:	e6b8      	b.n	8009c28 <__gethex+0x178>
 8009eb6:	0021      	movs	r1, r4
 8009eb8:	6923      	ldr	r3, [r4, #16]
 8009eba:	310c      	adds	r1, #12
 8009ebc:	1c9a      	adds	r2, r3, #2
 8009ebe:	0092      	lsls	r2, r2, #2
 8009ec0:	300c      	adds	r0, #12
 8009ec2:	f000 f92a 	bl	800a11a <memcpy>
 8009ec6:	0021      	movs	r1, r4
 8009ec8:	9805      	ldr	r0, [sp, #20]
 8009eca:	f000 f973 	bl	800a1b4 <_Bfree>
 8009ece:	002c      	movs	r4, r5
 8009ed0:	6923      	ldr	r3, [r4, #16]
 8009ed2:	1c5a      	adds	r2, r3, #1
 8009ed4:	6122      	str	r2, [r4, #16]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	3304      	adds	r3, #4
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	18e3      	adds	r3, r4, r3
 8009ede:	605a      	str	r2, [r3, #4]
 8009ee0:	e7ba      	b.n	8009e58 <__gethex+0x3a8>
 8009ee2:	6922      	ldr	r2, [r4, #16]
 8009ee4:	9903      	ldr	r1, [sp, #12]
 8009ee6:	428a      	cmp	r2, r1
 8009ee8:	dd09      	ble.n	8009efe <__gethex+0x44e>
 8009eea:	2101      	movs	r1, #1
 8009eec:	0020      	movs	r0, r4
 8009eee:	f7ff fd75 	bl	80099dc <rshift>
 8009ef2:	9b02      	ldr	r3, [sp, #8]
 8009ef4:	3701      	adds	r7, #1
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	42bb      	cmp	r3, r7
 8009efa:	dac2      	bge.n	8009e82 <__gethex+0x3d2>
 8009efc:	e6dc      	b.n	8009cb8 <__gethex+0x208>
 8009efe:	221f      	movs	r2, #31
 8009f00:	9d01      	ldr	r5, [sp, #4]
 8009f02:	9901      	ldr	r1, [sp, #4]
 8009f04:	2601      	movs	r6, #1
 8009f06:	4015      	ands	r5, r2
 8009f08:	4211      	tst	r1, r2
 8009f0a:	d0bb      	beq.n	8009e84 <__gethex+0x3d4>
 8009f0c:	9a04      	ldr	r2, [sp, #16]
 8009f0e:	189b      	adds	r3, r3, r2
 8009f10:	3b04      	subs	r3, #4
 8009f12:	6818      	ldr	r0, [r3, #0]
 8009f14:	f000 fa02 	bl	800a31c <__hi0bits>
 8009f18:	2320      	movs	r3, #32
 8009f1a:	1b5d      	subs	r5, r3, r5
 8009f1c:	42a8      	cmp	r0, r5
 8009f1e:	dbe4      	blt.n	8009eea <__gethex+0x43a>
 8009f20:	e7b0      	b.n	8009e84 <__gethex+0x3d4>
 8009f22:	46c0      	nop			; (mov r8, r8)
 8009f24:	0800c0b8 	.word	0x0800c0b8

08009f28 <L_shift>:
 8009f28:	2308      	movs	r3, #8
 8009f2a:	b570      	push	{r4, r5, r6, lr}
 8009f2c:	2520      	movs	r5, #32
 8009f2e:	1a9a      	subs	r2, r3, r2
 8009f30:	0092      	lsls	r2, r2, #2
 8009f32:	1aad      	subs	r5, r5, r2
 8009f34:	6843      	ldr	r3, [r0, #4]
 8009f36:	6806      	ldr	r6, [r0, #0]
 8009f38:	001c      	movs	r4, r3
 8009f3a:	40ac      	lsls	r4, r5
 8009f3c:	40d3      	lsrs	r3, r2
 8009f3e:	4334      	orrs	r4, r6
 8009f40:	6004      	str	r4, [r0, #0]
 8009f42:	6043      	str	r3, [r0, #4]
 8009f44:	3004      	adds	r0, #4
 8009f46:	4288      	cmp	r0, r1
 8009f48:	d3f4      	bcc.n	8009f34 <L_shift+0xc>
 8009f4a:	bd70      	pop	{r4, r5, r6, pc}

08009f4c <__match>:
 8009f4c:	b530      	push	{r4, r5, lr}
 8009f4e:	6803      	ldr	r3, [r0, #0]
 8009f50:	780c      	ldrb	r4, [r1, #0]
 8009f52:	3301      	adds	r3, #1
 8009f54:	2c00      	cmp	r4, #0
 8009f56:	d102      	bne.n	8009f5e <__match+0x12>
 8009f58:	6003      	str	r3, [r0, #0]
 8009f5a:	2001      	movs	r0, #1
 8009f5c:	bd30      	pop	{r4, r5, pc}
 8009f5e:	781a      	ldrb	r2, [r3, #0]
 8009f60:	0015      	movs	r5, r2
 8009f62:	3d41      	subs	r5, #65	; 0x41
 8009f64:	2d19      	cmp	r5, #25
 8009f66:	d800      	bhi.n	8009f6a <__match+0x1e>
 8009f68:	3220      	adds	r2, #32
 8009f6a:	3101      	adds	r1, #1
 8009f6c:	42a2      	cmp	r2, r4
 8009f6e:	d0ef      	beq.n	8009f50 <__match+0x4>
 8009f70:	2000      	movs	r0, #0
 8009f72:	e7f3      	b.n	8009f5c <__match+0x10>

08009f74 <__hexnan>:
 8009f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f76:	680b      	ldr	r3, [r1, #0]
 8009f78:	b08b      	sub	sp, #44	; 0x2c
 8009f7a:	9201      	str	r2, [sp, #4]
 8009f7c:	9901      	ldr	r1, [sp, #4]
 8009f7e:	115a      	asrs	r2, r3, #5
 8009f80:	0092      	lsls	r2, r2, #2
 8009f82:	188a      	adds	r2, r1, r2
 8009f84:	9202      	str	r2, [sp, #8]
 8009f86:	0019      	movs	r1, r3
 8009f88:	221f      	movs	r2, #31
 8009f8a:	4011      	ands	r1, r2
 8009f8c:	9008      	str	r0, [sp, #32]
 8009f8e:	9106      	str	r1, [sp, #24]
 8009f90:	4213      	tst	r3, r2
 8009f92:	d002      	beq.n	8009f9a <__hexnan+0x26>
 8009f94:	9b02      	ldr	r3, [sp, #8]
 8009f96:	3304      	adds	r3, #4
 8009f98:	9302      	str	r3, [sp, #8]
 8009f9a:	9b02      	ldr	r3, [sp, #8]
 8009f9c:	2500      	movs	r5, #0
 8009f9e:	1f1e      	subs	r6, r3, #4
 8009fa0:	0037      	movs	r7, r6
 8009fa2:	0034      	movs	r4, r6
 8009fa4:	9b08      	ldr	r3, [sp, #32]
 8009fa6:	6035      	str	r5, [r6, #0]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	9507      	str	r5, [sp, #28]
 8009fac:	9305      	str	r3, [sp, #20]
 8009fae:	9503      	str	r5, [sp, #12]
 8009fb0:	9b05      	ldr	r3, [sp, #20]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb6:	9b05      	ldr	r3, [sp, #20]
 8009fb8:	785b      	ldrb	r3, [r3, #1]
 8009fba:	9304      	str	r3, [sp, #16]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d028      	beq.n	800a012 <__hexnan+0x9e>
 8009fc0:	9804      	ldr	r0, [sp, #16]
 8009fc2:	f7ff fd5f 	bl	8009a84 <__hexdig_fun>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	d154      	bne.n	800a074 <__hexnan+0x100>
 8009fca:	9b04      	ldr	r3, [sp, #16]
 8009fcc:	2b20      	cmp	r3, #32
 8009fce:	d819      	bhi.n	800a004 <__hexnan+0x90>
 8009fd0:	9b03      	ldr	r3, [sp, #12]
 8009fd2:	9a07      	ldr	r2, [sp, #28]
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	dd12      	ble.n	8009ffe <__hexnan+0x8a>
 8009fd8:	42bc      	cmp	r4, r7
 8009fda:	d206      	bcs.n	8009fea <__hexnan+0x76>
 8009fdc:	2d07      	cmp	r5, #7
 8009fde:	dc04      	bgt.n	8009fea <__hexnan+0x76>
 8009fe0:	002a      	movs	r2, r5
 8009fe2:	0039      	movs	r1, r7
 8009fe4:	0020      	movs	r0, r4
 8009fe6:	f7ff ff9f 	bl	8009f28 <L_shift>
 8009fea:	9b01      	ldr	r3, [sp, #4]
 8009fec:	2508      	movs	r5, #8
 8009fee:	429c      	cmp	r4, r3
 8009ff0:	d905      	bls.n	8009ffe <__hexnan+0x8a>
 8009ff2:	1f27      	subs	r7, r4, #4
 8009ff4:	2500      	movs	r5, #0
 8009ff6:	003c      	movs	r4, r7
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	603d      	str	r5, [r7, #0]
 8009ffc:	9307      	str	r3, [sp, #28]
 8009ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a000:	9305      	str	r3, [sp, #20]
 800a002:	e7d5      	b.n	8009fb0 <__hexnan+0x3c>
 800a004:	9b04      	ldr	r3, [sp, #16]
 800a006:	2b29      	cmp	r3, #41	; 0x29
 800a008:	d159      	bne.n	800a0be <__hexnan+0x14a>
 800a00a:	9b05      	ldr	r3, [sp, #20]
 800a00c:	9a08      	ldr	r2, [sp, #32]
 800a00e:	3302      	adds	r3, #2
 800a010:	6013      	str	r3, [r2, #0]
 800a012:	9b03      	ldr	r3, [sp, #12]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d052      	beq.n	800a0be <__hexnan+0x14a>
 800a018:	42bc      	cmp	r4, r7
 800a01a:	d206      	bcs.n	800a02a <__hexnan+0xb6>
 800a01c:	2d07      	cmp	r5, #7
 800a01e:	dc04      	bgt.n	800a02a <__hexnan+0xb6>
 800a020:	002a      	movs	r2, r5
 800a022:	0039      	movs	r1, r7
 800a024:	0020      	movs	r0, r4
 800a026:	f7ff ff7f 	bl	8009f28 <L_shift>
 800a02a:	9b01      	ldr	r3, [sp, #4]
 800a02c:	429c      	cmp	r4, r3
 800a02e:	d935      	bls.n	800a09c <__hexnan+0x128>
 800a030:	001a      	movs	r2, r3
 800a032:	0023      	movs	r3, r4
 800a034:	cb02      	ldmia	r3!, {r1}
 800a036:	c202      	stmia	r2!, {r1}
 800a038:	429e      	cmp	r6, r3
 800a03a:	d2fb      	bcs.n	800a034 <__hexnan+0xc0>
 800a03c:	9b02      	ldr	r3, [sp, #8]
 800a03e:	1c61      	adds	r1, r4, #1
 800a040:	1eda      	subs	r2, r3, #3
 800a042:	2304      	movs	r3, #4
 800a044:	4291      	cmp	r1, r2
 800a046:	d805      	bhi.n	800a054 <__hexnan+0xe0>
 800a048:	9b02      	ldr	r3, [sp, #8]
 800a04a:	3b04      	subs	r3, #4
 800a04c:	1b1b      	subs	r3, r3, r4
 800a04e:	089b      	lsrs	r3, r3, #2
 800a050:	3301      	adds	r3, #1
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	9a01      	ldr	r2, [sp, #4]
 800a056:	18d3      	adds	r3, r2, r3
 800a058:	2200      	movs	r2, #0
 800a05a:	c304      	stmia	r3!, {r2}
 800a05c:	429e      	cmp	r6, r3
 800a05e:	d2fc      	bcs.n	800a05a <__hexnan+0xe6>
 800a060:	6833      	ldr	r3, [r6, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d104      	bne.n	800a070 <__hexnan+0xfc>
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	429e      	cmp	r6, r3
 800a06a:	d126      	bne.n	800a0ba <__hexnan+0x146>
 800a06c:	2301      	movs	r3, #1
 800a06e:	6033      	str	r3, [r6, #0]
 800a070:	2005      	movs	r0, #5
 800a072:	e025      	b.n	800a0c0 <__hexnan+0x14c>
 800a074:	9b03      	ldr	r3, [sp, #12]
 800a076:	3501      	adds	r5, #1
 800a078:	3301      	adds	r3, #1
 800a07a:	9303      	str	r3, [sp, #12]
 800a07c:	2d08      	cmp	r5, #8
 800a07e:	dd06      	ble.n	800a08e <__hexnan+0x11a>
 800a080:	9b01      	ldr	r3, [sp, #4]
 800a082:	429c      	cmp	r4, r3
 800a084:	d9bb      	bls.n	8009ffe <__hexnan+0x8a>
 800a086:	2300      	movs	r3, #0
 800a088:	2501      	movs	r5, #1
 800a08a:	3c04      	subs	r4, #4
 800a08c:	6023      	str	r3, [r4, #0]
 800a08e:	220f      	movs	r2, #15
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	4010      	ands	r0, r2
 800a094:	011b      	lsls	r3, r3, #4
 800a096:	4318      	orrs	r0, r3
 800a098:	6020      	str	r0, [r4, #0]
 800a09a:	e7b0      	b.n	8009ffe <__hexnan+0x8a>
 800a09c:	9b06      	ldr	r3, [sp, #24]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d0de      	beq.n	800a060 <__hexnan+0xec>
 800a0a2:	2120      	movs	r1, #32
 800a0a4:	9a06      	ldr	r2, [sp, #24]
 800a0a6:	9b02      	ldr	r3, [sp, #8]
 800a0a8:	1a89      	subs	r1, r1, r2
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	4252      	negs	r2, r2
 800a0ae:	40ca      	lsrs	r2, r1
 800a0b0:	3b04      	subs	r3, #4
 800a0b2:	6819      	ldr	r1, [r3, #0]
 800a0b4:	400a      	ands	r2, r1
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	e7d2      	b.n	800a060 <__hexnan+0xec>
 800a0ba:	3e04      	subs	r6, #4
 800a0bc:	e7d0      	b.n	800a060 <__hexnan+0xec>
 800a0be:	2004      	movs	r0, #4
 800a0c0:	b00b      	add	sp, #44	; 0x2c
 800a0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a0c4 <_localeconv_r>:
 800a0c4:	4800      	ldr	r0, [pc, #0]	; (800a0c8 <_localeconv_r+0x4>)
 800a0c6:	4770      	bx	lr
 800a0c8:	20000188 	.word	0x20000188

0800a0cc <malloc>:
 800a0cc:	b510      	push	{r4, lr}
 800a0ce:	4b03      	ldr	r3, [pc, #12]	; (800a0dc <malloc+0x10>)
 800a0d0:	0001      	movs	r1, r0
 800a0d2:	6818      	ldr	r0, [r3, #0]
 800a0d4:	f000 fd8c 	bl	800abf0 <_malloc_r>
 800a0d8:	bd10      	pop	{r4, pc}
 800a0da:	46c0      	nop			; (mov r8, r8)
 800a0dc:	20000030 	.word	0x20000030

0800a0e0 <__ascii_mbtowc>:
 800a0e0:	b082      	sub	sp, #8
 800a0e2:	2900      	cmp	r1, #0
 800a0e4:	d100      	bne.n	800a0e8 <__ascii_mbtowc+0x8>
 800a0e6:	a901      	add	r1, sp, #4
 800a0e8:	1e10      	subs	r0, r2, #0
 800a0ea:	d006      	beq.n	800a0fa <__ascii_mbtowc+0x1a>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d006      	beq.n	800a0fe <__ascii_mbtowc+0x1e>
 800a0f0:	7813      	ldrb	r3, [r2, #0]
 800a0f2:	600b      	str	r3, [r1, #0]
 800a0f4:	7810      	ldrb	r0, [r2, #0]
 800a0f6:	1e43      	subs	r3, r0, #1
 800a0f8:	4198      	sbcs	r0, r3
 800a0fa:	b002      	add	sp, #8
 800a0fc:	4770      	bx	lr
 800a0fe:	2002      	movs	r0, #2
 800a100:	4240      	negs	r0, r0
 800a102:	e7fa      	b.n	800a0fa <__ascii_mbtowc+0x1a>

0800a104 <memchr>:
 800a104:	b2c9      	uxtb	r1, r1
 800a106:	1882      	adds	r2, r0, r2
 800a108:	4290      	cmp	r0, r2
 800a10a:	d101      	bne.n	800a110 <memchr+0xc>
 800a10c:	2000      	movs	r0, #0
 800a10e:	4770      	bx	lr
 800a110:	7803      	ldrb	r3, [r0, #0]
 800a112:	428b      	cmp	r3, r1
 800a114:	d0fb      	beq.n	800a10e <memchr+0xa>
 800a116:	3001      	adds	r0, #1
 800a118:	e7f6      	b.n	800a108 <memchr+0x4>

0800a11a <memcpy>:
 800a11a:	2300      	movs	r3, #0
 800a11c:	b510      	push	{r4, lr}
 800a11e:	429a      	cmp	r2, r3
 800a120:	d100      	bne.n	800a124 <memcpy+0xa>
 800a122:	bd10      	pop	{r4, pc}
 800a124:	5ccc      	ldrb	r4, [r1, r3]
 800a126:	54c4      	strb	r4, [r0, r3]
 800a128:	3301      	adds	r3, #1
 800a12a:	e7f8      	b.n	800a11e <memcpy+0x4>

0800a12c <_Balloc>:
 800a12c:	b570      	push	{r4, r5, r6, lr}
 800a12e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a130:	0006      	movs	r6, r0
 800a132:	000c      	movs	r4, r1
 800a134:	2d00      	cmp	r5, #0
 800a136:	d10e      	bne.n	800a156 <_Balloc+0x2a>
 800a138:	2010      	movs	r0, #16
 800a13a:	f7ff ffc7 	bl	800a0cc <malloc>
 800a13e:	1e02      	subs	r2, r0, #0
 800a140:	6270      	str	r0, [r6, #36]	; 0x24
 800a142:	d104      	bne.n	800a14e <_Balloc+0x22>
 800a144:	2166      	movs	r1, #102	; 0x66
 800a146:	4b19      	ldr	r3, [pc, #100]	; (800a1ac <_Balloc+0x80>)
 800a148:	4819      	ldr	r0, [pc, #100]	; (800a1b0 <_Balloc+0x84>)
 800a14a:	f000 ff61 	bl	800b010 <__assert_func>
 800a14e:	6045      	str	r5, [r0, #4]
 800a150:	6085      	str	r5, [r0, #8]
 800a152:	6005      	str	r5, [r0, #0]
 800a154:	60c5      	str	r5, [r0, #12]
 800a156:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800a158:	68eb      	ldr	r3, [r5, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d013      	beq.n	800a186 <_Balloc+0x5a>
 800a15e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a160:	00a2      	lsls	r2, r4, #2
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	189b      	adds	r3, r3, r2
 800a166:	6818      	ldr	r0, [r3, #0]
 800a168:	2800      	cmp	r0, #0
 800a16a:	d118      	bne.n	800a19e <_Balloc+0x72>
 800a16c:	2101      	movs	r1, #1
 800a16e:	000d      	movs	r5, r1
 800a170:	40a5      	lsls	r5, r4
 800a172:	1d6a      	adds	r2, r5, #5
 800a174:	0030      	movs	r0, r6
 800a176:	0092      	lsls	r2, r2, #2
 800a178:	f000 fca1 	bl	800aabe <_calloc_r>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d00c      	beq.n	800a19a <_Balloc+0x6e>
 800a180:	6044      	str	r4, [r0, #4]
 800a182:	6085      	str	r5, [r0, #8]
 800a184:	e00d      	b.n	800a1a2 <_Balloc+0x76>
 800a186:	2221      	movs	r2, #33	; 0x21
 800a188:	2104      	movs	r1, #4
 800a18a:	0030      	movs	r0, r6
 800a18c:	f000 fc97 	bl	800aabe <_calloc_r>
 800a190:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a192:	60e8      	str	r0, [r5, #12]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1e1      	bne.n	800a15e <_Balloc+0x32>
 800a19a:	2000      	movs	r0, #0
 800a19c:	bd70      	pop	{r4, r5, r6, pc}
 800a19e:	6802      	ldr	r2, [r0, #0]
 800a1a0:	601a      	str	r2, [r3, #0]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	6103      	str	r3, [r0, #16]
 800a1a6:	60c3      	str	r3, [r0, #12]
 800a1a8:	e7f8      	b.n	800a19c <_Balloc+0x70>
 800a1aa:	46c0      	nop			; (mov r8, r8)
 800a1ac:	0800c046 	.word	0x0800c046
 800a1b0:	0800c144 	.word	0x0800c144

0800a1b4 <_Bfree>:
 800a1b4:	b570      	push	{r4, r5, r6, lr}
 800a1b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1b8:	0005      	movs	r5, r0
 800a1ba:	000c      	movs	r4, r1
 800a1bc:	2e00      	cmp	r6, #0
 800a1be:	d10e      	bne.n	800a1de <_Bfree+0x2a>
 800a1c0:	2010      	movs	r0, #16
 800a1c2:	f7ff ff83 	bl	800a0cc <malloc>
 800a1c6:	1e02      	subs	r2, r0, #0
 800a1c8:	6268      	str	r0, [r5, #36]	; 0x24
 800a1ca:	d104      	bne.n	800a1d6 <_Bfree+0x22>
 800a1cc:	218a      	movs	r1, #138	; 0x8a
 800a1ce:	4b09      	ldr	r3, [pc, #36]	; (800a1f4 <_Bfree+0x40>)
 800a1d0:	4809      	ldr	r0, [pc, #36]	; (800a1f8 <_Bfree+0x44>)
 800a1d2:	f000 ff1d 	bl	800b010 <__assert_func>
 800a1d6:	6046      	str	r6, [r0, #4]
 800a1d8:	6086      	str	r6, [r0, #8]
 800a1da:	6006      	str	r6, [r0, #0]
 800a1dc:	60c6      	str	r6, [r0, #12]
 800a1de:	2c00      	cmp	r4, #0
 800a1e0:	d007      	beq.n	800a1f2 <_Bfree+0x3e>
 800a1e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1e4:	6862      	ldr	r2, [r4, #4]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	0092      	lsls	r2, r2, #2
 800a1ea:	189b      	adds	r3, r3, r2
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	6022      	str	r2, [r4, #0]
 800a1f0:	601c      	str	r4, [r3, #0]
 800a1f2:	bd70      	pop	{r4, r5, r6, pc}
 800a1f4:	0800c046 	.word	0x0800c046
 800a1f8:	0800c144 	.word	0x0800c144

0800a1fc <__multadd>:
 800a1fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1fe:	000e      	movs	r6, r1
 800a200:	9001      	str	r0, [sp, #4]
 800a202:	000c      	movs	r4, r1
 800a204:	001d      	movs	r5, r3
 800a206:	2000      	movs	r0, #0
 800a208:	690f      	ldr	r7, [r1, #16]
 800a20a:	3614      	adds	r6, #20
 800a20c:	6833      	ldr	r3, [r6, #0]
 800a20e:	3001      	adds	r0, #1
 800a210:	b299      	uxth	r1, r3
 800a212:	4351      	muls	r1, r2
 800a214:	0c1b      	lsrs	r3, r3, #16
 800a216:	4353      	muls	r3, r2
 800a218:	1949      	adds	r1, r1, r5
 800a21a:	0c0d      	lsrs	r5, r1, #16
 800a21c:	195b      	adds	r3, r3, r5
 800a21e:	0c1d      	lsrs	r5, r3, #16
 800a220:	b289      	uxth	r1, r1
 800a222:	041b      	lsls	r3, r3, #16
 800a224:	185b      	adds	r3, r3, r1
 800a226:	c608      	stmia	r6!, {r3}
 800a228:	4287      	cmp	r7, r0
 800a22a:	dcef      	bgt.n	800a20c <__multadd+0x10>
 800a22c:	2d00      	cmp	r5, #0
 800a22e:	d022      	beq.n	800a276 <__multadd+0x7a>
 800a230:	68a3      	ldr	r3, [r4, #8]
 800a232:	42bb      	cmp	r3, r7
 800a234:	dc19      	bgt.n	800a26a <__multadd+0x6e>
 800a236:	6863      	ldr	r3, [r4, #4]
 800a238:	9801      	ldr	r0, [sp, #4]
 800a23a:	1c59      	adds	r1, r3, #1
 800a23c:	f7ff ff76 	bl	800a12c <_Balloc>
 800a240:	1e06      	subs	r6, r0, #0
 800a242:	d105      	bne.n	800a250 <__multadd+0x54>
 800a244:	0002      	movs	r2, r0
 800a246:	21b5      	movs	r1, #181	; 0xb5
 800a248:	4b0c      	ldr	r3, [pc, #48]	; (800a27c <__multadd+0x80>)
 800a24a:	480d      	ldr	r0, [pc, #52]	; (800a280 <__multadd+0x84>)
 800a24c:	f000 fee0 	bl	800b010 <__assert_func>
 800a250:	0021      	movs	r1, r4
 800a252:	6923      	ldr	r3, [r4, #16]
 800a254:	310c      	adds	r1, #12
 800a256:	1c9a      	adds	r2, r3, #2
 800a258:	0092      	lsls	r2, r2, #2
 800a25a:	300c      	adds	r0, #12
 800a25c:	f7ff ff5d 	bl	800a11a <memcpy>
 800a260:	0021      	movs	r1, r4
 800a262:	9801      	ldr	r0, [sp, #4]
 800a264:	f7ff ffa6 	bl	800a1b4 <_Bfree>
 800a268:	0034      	movs	r4, r6
 800a26a:	1d3b      	adds	r3, r7, #4
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	18e3      	adds	r3, r4, r3
 800a270:	605d      	str	r5, [r3, #4]
 800a272:	1c7b      	adds	r3, r7, #1
 800a274:	6123      	str	r3, [r4, #16]
 800a276:	0020      	movs	r0, r4
 800a278:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a27a:	46c0      	nop			; (mov r8, r8)
 800a27c:	0800c0b8 	.word	0x0800c0b8
 800a280:	0800c144 	.word	0x0800c144

0800a284 <__s2b>:
 800a284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a286:	0006      	movs	r6, r0
 800a288:	0018      	movs	r0, r3
 800a28a:	000c      	movs	r4, r1
 800a28c:	3008      	adds	r0, #8
 800a28e:	2109      	movs	r1, #9
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	0015      	movs	r5, r2
 800a294:	f7f5 ffde 	bl	8000254 <__divsi3>
 800a298:	2301      	movs	r3, #1
 800a29a:	2100      	movs	r1, #0
 800a29c:	4283      	cmp	r3, r0
 800a29e:	db0a      	blt.n	800a2b6 <__s2b+0x32>
 800a2a0:	0030      	movs	r0, r6
 800a2a2:	f7ff ff43 	bl	800a12c <_Balloc>
 800a2a6:	1e01      	subs	r1, r0, #0
 800a2a8:	d108      	bne.n	800a2bc <__s2b+0x38>
 800a2aa:	0002      	movs	r2, r0
 800a2ac:	4b19      	ldr	r3, [pc, #100]	; (800a314 <__s2b+0x90>)
 800a2ae:	481a      	ldr	r0, [pc, #104]	; (800a318 <__s2b+0x94>)
 800a2b0:	31ce      	adds	r1, #206	; 0xce
 800a2b2:	f000 fead 	bl	800b010 <__assert_func>
 800a2b6:	005b      	lsls	r3, r3, #1
 800a2b8:	3101      	adds	r1, #1
 800a2ba:	e7ef      	b.n	800a29c <__s2b+0x18>
 800a2bc:	9b08      	ldr	r3, [sp, #32]
 800a2be:	6143      	str	r3, [r0, #20]
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	6103      	str	r3, [r0, #16]
 800a2c4:	2d09      	cmp	r5, #9
 800a2c6:	dd18      	ble.n	800a2fa <__s2b+0x76>
 800a2c8:	0023      	movs	r3, r4
 800a2ca:	3309      	adds	r3, #9
 800a2cc:	001f      	movs	r7, r3
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	1964      	adds	r4, r4, r5
 800a2d2:	783b      	ldrb	r3, [r7, #0]
 800a2d4:	220a      	movs	r2, #10
 800a2d6:	0030      	movs	r0, r6
 800a2d8:	3b30      	subs	r3, #48	; 0x30
 800a2da:	f7ff ff8f 	bl	800a1fc <__multadd>
 800a2de:	3701      	adds	r7, #1
 800a2e0:	0001      	movs	r1, r0
 800a2e2:	42a7      	cmp	r7, r4
 800a2e4:	d1f5      	bne.n	800a2d2 <__s2b+0x4e>
 800a2e6:	002c      	movs	r4, r5
 800a2e8:	9b00      	ldr	r3, [sp, #0]
 800a2ea:	3c08      	subs	r4, #8
 800a2ec:	191c      	adds	r4, r3, r4
 800a2ee:	002f      	movs	r7, r5
 800a2f0:	9b01      	ldr	r3, [sp, #4]
 800a2f2:	429f      	cmp	r7, r3
 800a2f4:	db04      	blt.n	800a300 <__s2b+0x7c>
 800a2f6:	0008      	movs	r0, r1
 800a2f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2fa:	2509      	movs	r5, #9
 800a2fc:	340a      	adds	r4, #10
 800a2fe:	e7f6      	b.n	800a2ee <__s2b+0x6a>
 800a300:	1b63      	subs	r3, r4, r5
 800a302:	5ddb      	ldrb	r3, [r3, r7]
 800a304:	220a      	movs	r2, #10
 800a306:	0030      	movs	r0, r6
 800a308:	3b30      	subs	r3, #48	; 0x30
 800a30a:	f7ff ff77 	bl	800a1fc <__multadd>
 800a30e:	3701      	adds	r7, #1
 800a310:	0001      	movs	r1, r0
 800a312:	e7ed      	b.n	800a2f0 <__s2b+0x6c>
 800a314:	0800c0b8 	.word	0x0800c0b8
 800a318:	0800c144 	.word	0x0800c144

0800a31c <__hi0bits>:
 800a31c:	0003      	movs	r3, r0
 800a31e:	0c02      	lsrs	r2, r0, #16
 800a320:	2000      	movs	r0, #0
 800a322:	4282      	cmp	r2, r0
 800a324:	d101      	bne.n	800a32a <__hi0bits+0xe>
 800a326:	041b      	lsls	r3, r3, #16
 800a328:	3010      	adds	r0, #16
 800a32a:	0e1a      	lsrs	r2, r3, #24
 800a32c:	d101      	bne.n	800a332 <__hi0bits+0x16>
 800a32e:	3008      	adds	r0, #8
 800a330:	021b      	lsls	r3, r3, #8
 800a332:	0f1a      	lsrs	r2, r3, #28
 800a334:	d101      	bne.n	800a33a <__hi0bits+0x1e>
 800a336:	3004      	adds	r0, #4
 800a338:	011b      	lsls	r3, r3, #4
 800a33a:	0f9a      	lsrs	r2, r3, #30
 800a33c:	d101      	bne.n	800a342 <__hi0bits+0x26>
 800a33e:	3002      	adds	r0, #2
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	2b00      	cmp	r3, #0
 800a344:	db03      	blt.n	800a34e <__hi0bits+0x32>
 800a346:	3001      	adds	r0, #1
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	d400      	bmi.n	800a34e <__hi0bits+0x32>
 800a34c:	2020      	movs	r0, #32
 800a34e:	4770      	bx	lr

0800a350 <__lo0bits>:
 800a350:	6803      	ldr	r3, [r0, #0]
 800a352:	0002      	movs	r2, r0
 800a354:	2107      	movs	r1, #7
 800a356:	0018      	movs	r0, r3
 800a358:	4008      	ands	r0, r1
 800a35a:	420b      	tst	r3, r1
 800a35c:	d00d      	beq.n	800a37a <__lo0bits+0x2a>
 800a35e:	3906      	subs	r1, #6
 800a360:	2000      	movs	r0, #0
 800a362:	420b      	tst	r3, r1
 800a364:	d105      	bne.n	800a372 <__lo0bits+0x22>
 800a366:	3002      	adds	r0, #2
 800a368:	4203      	tst	r3, r0
 800a36a:	d003      	beq.n	800a374 <__lo0bits+0x24>
 800a36c:	40cb      	lsrs	r3, r1
 800a36e:	0008      	movs	r0, r1
 800a370:	6013      	str	r3, [r2, #0]
 800a372:	4770      	bx	lr
 800a374:	089b      	lsrs	r3, r3, #2
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	e7fb      	b.n	800a372 <__lo0bits+0x22>
 800a37a:	b299      	uxth	r1, r3
 800a37c:	2900      	cmp	r1, #0
 800a37e:	d101      	bne.n	800a384 <__lo0bits+0x34>
 800a380:	2010      	movs	r0, #16
 800a382:	0c1b      	lsrs	r3, r3, #16
 800a384:	b2d9      	uxtb	r1, r3
 800a386:	2900      	cmp	r1, #0
 800a388:	d101      	bne.n	800a38e <__lo0bits+0x3e>
 800a38a:	3008      	adds	r0, #8
 800a38c:	0a1b      	lsrs	r3, r3, #8
 800a38e:	0719      	lsls	r1, r3, #28
 800a390:	d101      	bne.n	800a396 <__lo0bits+0x46>
 800a392:	3004      	adds	r0, #4
 800a394:	091b      	lsrs	r3, r3, #4
 800a396:	0799      	lsls	r1, r3, #30
 800a398:	d101      	bne.n	800a39e <__lo0bits+0x4e>
 800a39a:	3002      	adds	r0, #2
 800a39c:	089b      	lsrs	r3, r3, #2
 800a39e:	07d9      	lsls	r1, r3, #31
 800a3a0:	d4e9      	bmi.n	800a376 <__lo0bits+0x26>
 800a3a2:	3001      	adds	r0, #1
 800a3a4:	085b      	lsrs	r3, r3, #1
 800a3a6:	d1e6      	bne.n	800a376 <__lo0bits+0x26>
 800a3a8:	2020      	movs	r0, #32
 800a3aa:	e7e2      	b.n	800a372 <__lo0bits+0x22>

0800a3ac <__i2b>:
 800a3ac:	b510      	push	{r4, lr}
 800a3ae:	000c      	movs	r4, r1
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	f7ff febb 	bl	800a12c <_Balloc>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d106      	bne.n	800a3c8 <__i2b+0x1c>
 800a3ba:	21a0      	movs	r1, #160	; 0xa0
 800a3bc:	0002      	movs	r2, r0
 800a3be:	4b04      	ldr	r3, [pc, #16]	; (800a3d0 <__i2b+0x24>)
 800a3c0:	4804      	ldr	r0, [pc, #16]	; (800a3d4 <__i2b+0x28>)
 800a3c2:	0049      	lsls	r1, r1, #1
 800a3c4:	f000 fe24 	bl	800b010 <__assert_func>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	6144      	str	r4, [r0, #20]
 800a3cc:	6103      	str	r3, [r0, #16]
 800a3ce:	bd10      	pop	{r4, pc}
 800a3d0:	0800c0b8 	.word	0x0800c0b8
 800a3d4:	0800c144 	.word	0x0800c144

0800a3d8 <__multiply>:
 800a3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3da:	690b      	ldr	r3, [r1, #16]
 800a3dc:	0014      	movs	r4, r2
 800a3de:	6912      	ldr	r2, [r2, #16]
 800a3e0:	000d      	movs	r5, r1
 800a3e2:	b089      	sub	sp, #36	; 0x24
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	da01      	bge.n	800a3ec <__multiply+0x14>
 800a3e8:	0025      	movs	r5, r4
 800a3ea:	000c      	movs	r4, r1
 800a3ec:	692f      	ldr	r7, [r5, #16]
 800a3ee:	6926      	ldr	r6, [r4, #16]
 800a3f0:	6869      	ldr	r1, [r5, #4]
 800a3f2:	19bb      	adds	r3, r7, r6
 800a3f4:	9302      	str	r3, [sp, #8]
 800a3f6:	68ab      	ldr	r3, [r5, #8]
 800a3f8:	19ba      	adds	r2, r7, r6
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	da00      	bge.n	800a400 <__multiply+0x28>
 800a3fe:	3101      	adds	r1, #1
 800a400:	f7ff fe94 	bl	800a12c <_Balloc>
 800a404:	9001      	str	r0, [sp, #4]
 800a406:	2800      	cmp	r0, #0
 800a408:	d106      	bne.n	800a418 <__multiply+0x40>
 800a40a:	215e      	movs	r1, #94	; 0x5e
 800a40c:	0002      	movs	r2, r0
 800a40e:	4b48      	ldr	r3, [pc, #288]	; (800a530 <__multiply+0x158>)
 800a410:	4848      	ldr	r0, [pc, #288]	; (800a534 <__multiply+0x15c>)
 800a412:	31ff      	adds	r1, #255	; 0xff
 800a414:	f000 fdfc 	bl	800b010 <__assert_func>
 800a418:	9b01      	ldr	r3, [sp, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	3314      	adds	r3, #20
 800a41e:	469c      	mov	ip, r3
 800a420:	19bb      	adds	r3, r7, r6
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4463      	add	r3, ip
 800a426:	9303      	str	r3, [sp, #12]
 800a428:	4663      	mov	r3, ip
 800a42a:	9903      	ldr	r1, [sp, #12]
 800a42c:	428b      	cmp	r3, r1
 800a42e:	d32c      	bcc.n	800a48a <__multiply+0xb2>
 800a430:	002b      	movs	r3, r5
 800a432:	0022      	movs	r2, r4
 800a434:	3314      	adds	r3, #20
 800a436:	00bf      	lsls	r7, r7, #2
 800a438:	3214      	adds	r2, #20
 800a43a:	9306      	str	r3, [sp, #24]
 800a43c:	00b6      	lsls	r6, r6, #2
 800a43e:	19db      	adds	r3, r3, r7
 800a440:	9304      	str	r3, [sp, #16]
 800a442:	1993      	adds	r3, r2, r6
 800a444:	9307      	str	r3, [sp, #28]
 800a446:	2304      	movs	r3, #4
 800a448:	9305      	str	r3, [sp, #20]
 800a44a:	002b      	movs	r3, r5
 800a44c:	9904      	ldr	r1, [sp, #16]
 800a44e:	3315      	adds	r3, #21
 800a450:	9200      	str	r2, [sp, #0]
 800a452:	4299      	cmp	r1, r3
 800a454:	d305      	bcc.n	800a462 <__multiply+0x8a>
 800a456:	1b4b      	subs	r3, r1, r5
 800a458:	3b15      	subs	r3, #21
 800a45a:	089b      	lsrs	r3, r3, #2
 800a45c:	3301      	adds	r3, #1
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	9305      	str	r3, [sp, #20]
 800a462:	9b07      	ldr	r3, [sp, #28]
 800a464:	9a00      	ldr	r2, [sp, #0]
 800a466:	429a      	cmp	r2, r3
 800a468:	d311      	bcc.n	800a48e <__multiply+0xb6>
 800a46a:	9b02      	ldr	r3, [sp, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	dd06      	ble.n	800a47e <__multiply+0xa6>
 800a470:	9b03      	ldr	r3, [sp, #12]
 800a472:	3b04      	subs	r3, #4
 800a474:	9303      	str	r3, [sp, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d053      	beq.n	800a526 <__multiply+0x14e>
 800a47e:	9b01      	ldr	r3, [sp, #4]
 800a480:	9a02      	ldr	r2, [sp, #8]
 800a482:	0018      	movs	r0, r3
 800a484:	611a      	str	r2, [r3, #16]
 800a486:	b009      	add	sp, #36	; 0x24
 800a488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a48a:	c304      	stmia	r3!, {r2}
 800a48c:	e7cd      	b.n	800a42a <__multiply+0x52>
 800a48e:	9b00      	ldr	r3, [sp, #0]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	b298      	uxth	r0, r3
 800a494:	2800      	cmp	r0, #0
 800a496:	d01b      	beq.n	800a4d0 <__multiply+0xf8>
 800a498:	4667      	mov	r7, ip
 800a49a:	2400      	movs	r4, #0
 800a49c:	9e06      	ldr	r6, [sp, #24]
 800a49e:	ce02      	ldmia	r6!, {r1}
 800a4a0:	683a      	ldr	r2, [r7, #0]
 800a4a2:	b28b      	uxth	r3, r1
 800a4a4:	4343      	muls	r3, r0
 800a4a6:	b292      	uxth	r2, r2
 800a4a8:	189b      	adds	r3, r3, r2
 800a4aa:	191b      	adds	r3, r3, r4
 800a4ac:	0c0c      	lsrs	r4, r1, #16
 800a4ae:	4344      	muls	r4, r0
 800a4b0:	683a      	ldr	r2, [r7, #0]
 800a4b2:	0c11      	lsrs	r1, r2, #16
 800a4b4:	1861      	adds	r1, r4, r1
 800a4b6:	0c1c      	lsrs	r4, r3, #16
 800a4b8:	1909      	adds	r1, r1, r4
 800a4ba:	0c0c      	lsrs	r4, r1, #16
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	0409      	lsls	r1, r1, #16
 800a4c0:	430b      	orrs	r3, r1
 800a4c2:	c708      	stmia	r7!, {r3}
 800a4c4:	9b04      	ldr	r3, [sp, #16]
 800a4c6:	42b3      	cmp	r3, r6
 800a4c8:	d8e9      	bhi.n	800a49e <__multiply+0xc6>
 800a4ca:	4663      	mov	r3, ip
 800a4cc:	9a05      	ldr	r2, [sp, #20]
 800a4ce:	509c      	str	r4, [r3, r2]
 800a4d0:	9b00      	ldr	r3, [sp, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	0c1e      	lsrs	r6, r3, #16
 800a4d6:	d020      	beq.n	800a51a <__multiply+0x142>
 800a4d8:	4663      	mov	r3, ip
 800a4da:	002c      	movs	r4, r5
 800a4dc:	4660      	mov	r0, ip
 800a4de:	2700      	movs	r7, #0
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3414      	adds	r4, #20
 800a4e4:	6822      	ldr	r2, [r4, #0]
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	b291      	uxth	r1, r2
 800a4ea:	4371      	muls	r1, r6
 800a4ec:	6802      	ldr	r2, [r0, #0]
 800a4ee:	0c12      	lsrs	r2, r2, #16
 800a4f0:	1889      	adds	r1, r1, r2
 800a4f2:	19cf      	adds	r7, r1, r7
 800a4f4:	0439      	lsls	r1, r7, #16
 800a4f6:	430b      	orrs	r3, r1
 800a4f8:	6003      	str	r3, [r0, #0]
 800a4fa:	cc02      	ldmia	r4!, {r1}
 800a4fc:	6843      	ldr	r3, [r0, #4]
 800a4fe:	0c09      	lsrs	r1, r1, #16
 800a500:	4371      	muls	r1, r6
 800a502:	b29b      	uxth	r3, r3
 800a504:	0c3f      	lsrs	r7, r7, #16
 800a506:	18cb      	adds	r3, r1, r3
 800a508:	9a04      	ldr	r2, [sp, #16]
 800a50a:	19db      	adds	r3, r3, r7
 800a50c:	0c1f      	lsrs	r7, r3, #16
 800a50e:	3004      	adds	r0, #4
 800a510:	42a2      	cmp	r2, r4
 800a512:	d8e7      	bhi.n	800a4e4 <__multiply+0x10c>
 800a514:	4662      	mov	r2, ip
 800a516:	9905      	ldr	r1, [sp, #20]
 800a518:	5053      	str	r3, [r2, r1]
 800a51a:	9b00      	ldr	r3, [sp, #0]
 800a51c:	3304      	adds	r3, #4
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	2304      	movs	r3, #4
 800a522:	449c      	add	ip, r3
 800a524:	e79d      	b.n	800a462 <__multiply+0x8a>
 800a526:	9b02      	ldr	r3, [sp, #8]
 800a528:	3b01      	subs	r3, #1
 800a52a:	9302      	str	r3, [sp, #8]
 800a52c:	e79d      	b.n	800a46a <__multiply+0x92>
 800a52e:	46c0      	nop			; (mov r8, r8)
 800a530:	0800c0b8 	.word	0x0800c0b8
 800a534:	0800c144 	.word	0x0800c144

0800a538 <__pow5mult>:
 800a538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a53a:	2303      	movs	r3, #3
 800a53c:	0015      	movs	r5, r2
 800a53e:	0007      	movs	r7, r0
 800a540:	000e      	movs	r6, r1
 800a542:	401a      	ands	r2, r3
 800a544:	421d      	tst	r5, r3
 800a546:	d008      	beq.n	800a55a <__pow5mult+0x22>
 800a548:	4925      	ldr	r1, [pc, #148]	; (800a5e0 <__pow5mult+0xa8>)
 800a54a:	3a01      	subs	r2, #1
 800a54c:	0092      	lsls	r2, r2, #2
 800a54e:	5852      	ldr	r2, [r2, r1]
 800a550:	2300      	movs	r3, #0
 800a552:	0031      	movs	r1, r6
 800a554:	f7ff fe52 	bl	800a1fc <__multadd>
 800a558:	0006      	movs	r6, r0
 800a55a:	10ad      	asrs	r5, r5, #2
 800a55c:	d03d      	beq.n	800a5da <__pow5mult+0xa2>
 800a55e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a560:	2c00      	cmp	r4, #0
 800a562:	d10f      	bne.n	800a584 <__pow5mult+0x4c>
 800a564:	2010      	movs	r0, #16
 800a566:	f7ff fdb1 	bl	800a0cc <malloc>
 800a56a:	1e02      	subs	r2, r0, #0
 800a56c:	6278      	str	r0, [r7, #36]	; 0x24
 800a56e:	d105      	bne.n	800a57c <__pow5mult+0x44>
 800a570:	21d7      	movs	r1, #215	; 0xd7
 800a572:	4b1c      	ldr	r3, [pc, #112]	; (800a5e4 <__pow5mult+0xac>)
 800a574:	481c      	ldr	r0, [pc, #112]	; (800a5e8 <__pow5mult+0xb0>)
 800a576:	0049      	lsls	r1, r1, #1
 800a578:	f000 fd4a 	bl	800b010 <__assert_func>
 800a57c:	6044      	str	r4, [r0, #4]
 800a57e:	6084      	str	r4, [r0, #8]
 800a580:	6004      	str	r4, [r0, #0]
 800a582:	60c4      	str	r4, [r0, #12]
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	689c      	ldr	r4, [r3, #8]
 800a588:	9301      	str	r3, [sp, #4]
 800a58a:	2c00      	cmp	r4, #0
 800a58c:	d108      	bne.n	800a5a0 <__pow5mult+0x68>
 800a58e:	0038      	movs	r0, r7
 800a590:	4916      	ldr	r1, [pc, #88]	; (800a5ec <__pow5mult+0xb4>)
 800a592:	f7ff ff0b 	bl	800a3ac <__i2b>
 800a596:	9b01      	ldr	r3, [sp, #4]
 800a598:	0004      	movs	r4, r0
 800a59a:	6098      	str	r0, [r3, #8]
 800a59c:	2300      	movs	r3, #0
 800a59e:	6003      	str	r3, [r0, #0]
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	421d      	tst	r5, r3
 800a5a4:	d00a      	beq.n	800a5bc <__pow5mult+0x84>
 800a5a6:	0031      	movs	r1, r6
 800a5a8:	0022      	movs	r2, r4
 800a5aa:	0038      	movs	r0, r7
 800a5ac:	f7ff ff14 	bl	800a3d8 <__multiply>
 800a5b0:	0031      	movs	r1, r6
 800a5b2:	9001      	str	r0, [sp, #4]
 800a5b4:	0038      	movs	r0, r7
 800a5b6:	f7ff fdfd 	bl	800a1b4 <_Bfree>
 800a5ba:	9e01      	ldr	r6, [sp, #4]
 800a5bc:	106d      	asrs	r5, r5, #1
 800a5be:	d00c      	beq.n	800a5da <__pow5mult+0xa2>
 800a5c0:	6820      	ldr	r0, [r4, #0]
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	d107      	bne.n	800a5d6 <__pow5mult+0x9e>
 800a5c6:	0022      	movs	r2, r4
 800a5c8:	0021      	movs	r1, r4
 800a5ca:	0038      	movs	r0, r7
 800a5cc:	f7ff ff04 	bl	800a3d8 <__multiply>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	6020      	str	r0, [r4, #0]
 800a5d4:	6003      	str	r3, [r0, #0]
 800a5d6:	0004      	movs	r4, r0
 800a5d8:	e7e2      	b.n	800a5a0 <__pow5mult+0x68>
 800a5da:	0030      	movs	r0, r6
 800a5dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5de:	46c0      	nop			; (mov r8, r8)
 800a5e0:	0800c290 	.word	0x0800c290
 800a5e4:	0800c046 	.word	0x0800c046
 800a5e8:	0800c144 	.word	0x0800c144
 800a5ec:	00000271 	.word	0x00000271

0800a5f0 <__lshift>:
 800a5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5f2:	000c      	movs	r4, r1
 800a5f4:	0017      	movs	r7, r2
 800a5f6:	6923      	ldr	r3, [r4, #16]
 800a5f8:	1155      	asrs	r5, r2, #5
 800a5fa:	b087      	sub	sp, #28
 800a5fc:	18eb      	adds	r3, r5, r3
 800a5fe:	9302      	str	r3, [sp, #8]
 800a600:	3301      	adds	r3, #1
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	6849      	ldr	r1, [r1, #4]
 800a606:	68a3      	ldr	r3, [r4, #8]
 800a608:	9004      	str	r0, [sp, #16]
 800a60a:	9a01      	ldr	r2, [sp, #4]
 800a60c:	4293      	cmp	r3, r2
 800a60e:	db10      	blt.n	800a632 <__lshift+0x42>
 800a610:	9804      	ldr	r0, [sp, #16]
 800a612:	f7ff fd8b 	bl	800a12c <_Balloc>
 800a616:	2300      	movs	r3, #0
 800a618:	0002      	movs	r2, r0
 800a61a:	0006      	movs	r6, r0
 800a61c:	0019      	movs	r1, r3
 800a61e:	3214      	adds	r2, #20
 800a620:	4298      	cmp	r0, r3
 800a622:	d10c      	bne.n	800a63e <__lshift+0x4e>
 800a624:	21da      	movs	r1, #218	; 0xda
 800a626:	0002      	movs	r2, r0
 800a628:	4b26      	ldr	r3, [pc, #152]	; (800a6c4 <__lshift+0xd4>)
 800a62a:	4827      	ldr	r0, [pc, #156]	; (800a6c8 <__lshift+0xd8>)
 800a62c:	31ff      	adds	r1, #255	; 0xff
 800a62e:	f000 fcef 	bl	800b010 <__assert_func>
 800a632:	3101      	adds	r1, #1
 800a634:	005b      	lsls	r3, r3, #1
 800a636:	e7e8      	b.n	800a60a <__lshift+0x1a>
 800a638:	0098      	lsls	r0, r3, #2
 800a63a:	5011      	str	r1, [r2, r0]
 800a63c:	3301      	adds	r3, #1
 800a63e:	42ab      	cmp	r3, r5
 800a640:	dbfa      	blt.n	800a638 <__lshift+0x48>
 800a642:	43eb      	mvns	r3, r5
 800a644:	17db      	asrs	r3, r3, #31
 800a646:	401d      	ands	r5, r3
 800a648:	211f      	movs	r1, #31
 800a64a:	0023      	movs	r3, r4
 800a64c:	0038      	movs	r0, r7
 800a64e:	00ad      	lsls	r5, r5, #2
 800a650:	1955      	adds	r5, r2, r5
 800a652:	6922      	ldr	r2, [r4, #16]
 800a654:	3314      	adds	r3, #20
 800a656:	0092      	lsls	r2, r2, #2
 800a658:	4008      	ands	r0, r1
 800a65a:	4684      	mov	ip, r0
 800a65c:	189a      	adds	r2, r3, r2
 800a65e:	420f      	tst	r7, r1
 800a660:	d02a      	beq.n	800a6b8 <__lshift+0xc8>
 800a662:	3101      	adds	r1, #1
 800a664:	1a09      	subs	r1, r1, r0
 800a666:	9105      	str	r1, [sp, #20]
 800a668:	2100      	movs	r1, #0
 800a66a:	9503      	str	r5, [sp, #12]
 800a66c:	4667      	mov	r7, ip
 800a66e:	6818      	ldr	r0, [r3, #0]
 800a670:	40b8      	lsls	r0, r7
 800a672:	4301      	orrs	r1, r0
 800a674:	9803      	ldr	r0, [sp, #12]
 800a676:	c002      	stmia	r0!, {r1}
 800a678:	cb02      	ldmia	r3!, {r1}
 800a67a:	9003      	str	r0, [sp, #12]
 800a67c:	9805      	ldr	r0, [sp, #20]
 800a67e:	40c1      	lsrs	r1, r0
 800a680:	429a      	cmp	r2, r3
 800a682:	d8f3      	bhi.n	800a66c <__lshift+0x7c>
 800a684:	0020      	movs	r0, r4
 800a686:	3015      	adds	r0, #21
 800a688:	2304      	movs	r3, #4
 800a68a:	4282      	cmp	r2, r0
 800a68c:	d304      	bcc.n	800a698 <__lshift+0xa8>
 800a68e:	1b13      	subs	r3, r2, r4
 800a690:	3b15      	subs	r3, #21
 800a692:	089b      	lsrs	r3, r3, #2
 800a694:	3301      	adds	r3, #1
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	50e9      	str	r1, [r5, r3]
 800a69a:	2900      	cmp	r1, #0
 800a69c:	d002      	beq.n	800a6a4 <__lshift+0xb4>
 800a69e:	9b02      	ldr	r3, [sp, #8]
 800a6a0:	3302      	adds	r3, #2
 800a6a2:	9301      	str	r3, [sp, #4]
 800a6a4:	9b01      	ldr	r3, [sp, #4]
 800a6a6:	9804      	ldr	r0, [sp, #16]
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	0021      	movs	r1, r4
 800a6ac:	6133      	str	r3, [r6, #16]
 800a6ae:	f7ff fd81 	bl	800a1b4 <_Bfree>
 800a6b2:	0030      	movs	r0, r6
 800a6b4:	b007      	add	sp, #28
 800a6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6b8:	cb02      	ldmia	r3!, {r1}
 800a6ba:	c502      	stmia	r5!, {r1}
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d8fb      	bhi.n	800a6b8 <__lshift+0xc8>
 800a6c0:	e7f0      	b.n	800a6a4 <__lshift+0xb4>
 800a6c2:	46c0      	nop			; (mov r8, r8)
 800a6c4:	0800c0b8 	.word	0x0800c0b8
 800a6c8:	0800c144 	.word	0x0800c144

0800a6cc <__mcmp>:
 800a6cc:	6902      	ldr	r2, [r0, #16]
 800a6ce:	690b      	ldr	r3, [r1, #16]
 800a6d0:	b530      	push	{r4, r5, lr}
 800a6d2:	0004      	movs	r4, r0
 800a6d4:	1ad0      	subs	r0, r2, r3
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d10d      	bne.n	800a6f6 <__mcmp+0x2a>
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	3414      	adds	r4, #20
 800a6de:	3114      	adds	r1, #20
 800a6e0:	18e2      	adds	r2, r4, r3
 800a6e2:	18c9      	adds	r1, r1, r3
 800a6e4:	3a04      	subs	r2, #4
 800a6e6:	3904      	subs	r1, #4
 800a6e8:	6815      	ldr	r5, [r2, #0]
 800a6ea:	680b      	ldr	r3, [r1, #0]
 800a6ec:	429d      	cmp	r5, r3
 800a6ee:	d003      	beq.n	800a6f8 <__mcmp+0x2c>
 800a6f0:	2001      	movs	r0, #1
 800a6f2:	429d      	cmp	r5, r3
 800a6f4:	d303      	bcc.n	800a6fe <__mcmp+0x32>
 800a6f6:	bd30      	pop	{r4, r5, pc}
 800a6f8:	4294      	cmp	r4, r2
 800a6fa:	d3f3      	bcc.n	800a6e4 <__mcmp+0x18>
 800a6fc:	e7fb      	b.n	800a6f6 <__mcmp+0x2a>
 800a6fe:	4240      	negs	r0, r0
 800a700:	e7f9      	b.n	800a6f6 <__mcmp+0x2a>
	...

0800a704 <__mdiff>:
 800a704:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a706:	000e      	movs	r6, r1
 800a708:	0007      	movs	r7, r0
 800a70a:	0011      	movs	r1, r2
 800a70c:	0030      	movs	r0, r6
 800a70e:	b087      	sub	sp, #28
 800a710:	0014      	movs	r4, r2
 800a712:	f7ff ffdb 	bl	800a6cc <__mcmp>
 800a716:	1e05      	subs	r5, r0, #0
 800a718:	d110      	bne.n	800a73c <__mdiff+0x38>
 800a71a:	0001      	movs	r1, r0
 800a71c:	0038      	movs	r0, r7
 800a71e:	f7ff fd05 	bl	800a12c <_Balloc>
 800a722:	1e02      	subs	r2, r0, #0
 800a724:	d104      	bne.n	800a730 <__mdiff+0x2c>
 800a726:	4b40      	ldr	r3, [pc, #256]	; (800a828 <__mdiff+0x124>)
 800a728:	4940      	ldr	r1, [pc, #256]	; (800a82c <__mdiff+0x128>)
 800a72a:	4841      	ldr	r0, [pc, #260]	; (800a830 <__mdiff+0x12c>)
 800a72c:	f000 fc70 	bl	800b010 <__assert_func>
 800a730:	2301      	movs	r3, #1
 800a732:	6145      	str	r5, [r0, #20]
 800a734:	6103      	str	r3, [r0, #16]
 800a736:	0010      	movs	r0, r2
 800a738:	b007      	add	sp, #28
 800a73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a73c:	2301      	movs	r3, #1
 800a73e:	9301      	str	r3, [sp, #4]
 800a740:	2800      	cmp	r0, #0
 800a742:	db04      	blt.n	800a74e <__mdiff+0x4a>
 800a744:	0023      	movs	r3, r4
 800a746:	0034      	movs	r4, r6
 800a748:	001e      	movs	r6, r3
 800a74a:	2300      	movs	r3, #0
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	0038      	movs	r0, r7
 800a750:	6861      	ldr	r1, [r4, #4]
 800a752:	f7ff fceb 	bl	800a12c <_Balloc>
 800a756:	1e02      	subs	r2, r0, #0
 800a758:	d103      	bne.n	800a762 <__mdiff+0x5e>
 800a75a:	2190      	movs	r1, #144	; 0x90
 800a75c:	4b32      	ldr	r3, [pc, #200]	; (800a828 <__mdiff+0x124>)
 800a75e:	0089      	lsls	r1, r1, #2
 800a760:	e7e3      	b.n	800a72a <__mdiff+0x26>
 800a762:	9b01      	ldr	r3, [sp, #4]
 800a764:	2700      	movs	r7, #0
 800a766:	60c3      	str	r3, [r0, #12]
 800a768:	6920      	ldr	r0, [r4, #16]
 800a76a:	3414      	adds	r4, #20
 800a76c:	9401      	str	r4, [sp, #4]
 800a76e:	9b01      	ldr	r3, [sp, #4]
 800a770:	0084      	lsls	r4, r0, #2
 800a772:	191b      	adds	r3, r3, r4
 800a774:	0034      	movs	r4, r6
 800a776:	9302      	str	r3, [sp, #8]
 800a778:	6933      	ldr	r3, [r6, #16]
 800a77a:	3414      	adds	r4, #20
 800a77c:	0099      	lsls	r1, r3, #2
 800a77e:	1863      	adds	r3, r4, r1
 800a780:	9303      	str	r3, [sp, #12]
 800a782:	0013      	movs	r3, r2
 800a784:	3314      	adds	r3, #20
 800a786:	469c      	mov	ip, r3
 800a788:	9305      	str	r3, [sp, #20]
 800a78a:	9b01      	ldr	r3, [sp, #4]
 800a78c:	9304      	str	r3, [sp, #16]
 800a78e:	9b04      	ldr	r3, [sp, #16]
 800a790:	cc02      	ldmia	r4!, {r1}
 800a792:	cb20      	ldmia	r3!, {r5}
 800a794:	9304      	str	r3, [sp, #16]
 800a796:	b2ab      	uxth	r3, r5
 800a798:	19df      	adds	r7, r3, r7
 800a79a:	b28b      	uxth	r3, r1
 800a79c:	1afb      	subs	r3, r7, r3
 800a79e:	0c09      	lsrs	r1, r1, #16
 800a7a0:	0c2d      	lsrs	r5, r5, #16
 800a7a2:	1a6d      	subs	r5, r5, r1
 800a7a4:	1419      	asrs	r1, r3, #16
 800a7a6:	186d      	adds	r5, r5, r1
 800a7a8:	4661      	mov	r1, ip
 800a7aa:	142f      	asrs	r7, r5, #16
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	042d      	lsls	r5, r5, #16
 800a7b0:	432b      	orrs	r3, r5
 800a7b2:	c108      	stmia	r1!, {r3}
 800a7b4:	9b03      	ldr	r3, [sp, #12]
 800a7b6:	468c      	mov	ip, r1
 800a7b8:	42a3      	cmp	r3, r4
 800a7ba:	d8e8      	bhi.n	800a78e <__mdiff+0x8a>
 800a7bc:	0031      	movs	r1, r6
 800a7be:	9c03      	ldr	r4, [sp, #12]
 800a7c0:	3115      	adds	r1, #21
 800a7c2:	2304      	movs	r3, #4
 800a7c4:	428c      	cmp	r4, r1
 800a7c6:	d304      	bcc.n	800a7d2 <__mdiff+0xce>
 800a7c8:	1ba3      	subs	r3, r4, r6
 800a7ca:	3b15      	subs	r3, #21
 800a7cc:	089b      	lsrs	r3, r3, #2
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	9901      	ldr	r1, [sp, #4]
 800a7d4:	18cc      	adds	r4, r1, r3
 800a7d6:	9905      	ldr	r1, [sp, #20]
 800a7d8:	0026      	movs	r6, r4
 800a7da:	18cb      	adds	r3, r1, r3
 800a7dc:	469c      	mov	ip, r3
 800a7de:	9902      	ldr	r1, [sp, #8]
 800a7e0:	428e      	cmp	r6, r1
 800a7e2:	d310      	bcc.n	800a806 <__mdiff+0x102>
 800a7e4:	9e02      	ldr	r6, [sp, #8]
 800a7e6:	1ee1      	subs	r1, r4, #3
 800a7e8:	2500      	movs	r5, #0
 800a7ea:	428e      	cmp	r6, r1
 800a7ec:	d304      	bcc.n	800a7f8 <__mdiff+0xf4>
 800a7ee:	0031      	movs	r1, r6
 800a7f0:	3103      	adds	r1, #3
 800a7f2:	1b0c      	subs	r4, r1, r4
 800a7f4:	08a4      	lsrs	r4, r4, #2
 800a7f6:	00a5      	lsls	r5, r4, #2
 800a7f8:	195b      	adds	r3, r3, r5
 800a7fa:	3b04      	subs	r3, #4
 800a7fc:	6819      	ldr	r1, [r3, #0]
 800a7fe:	2900      	cmp	r1, #0
 800a800:	d00f      	beq.n	800a822 <__mdiff+0x11e>
 800a802:	6110      	str	r0, [r2, #16]
 800a804:	e797      	b.n	800a736 <__mdiff+0x32>
 800a806:	ce02      	ldmia	r6!, {r1}
 800a808:	b28d      	uxth	r5, r1
 800a80a:	19ed      	adds	r5, r5, r7
 800a80c:	0c0f      	lsrs	r7, r1, #16
 800a80e:	1429      	asrs	r1, r5, #16
 800a810:	1879      	adds	r1, r7, r1
 800a812:	140f      	asrs	r7, r1, #16
 800a814:	b2ad      	uxth	r5, r5
 800a816:	0409      	lsls	r1, r1, #16
 800a818:	430d      	orrs	r5, r1
 800a81a:	4661      	mov	r1, ip
 800a81c:	c120      	stmia	r1!, {r5}
 800a81e:	468c      	mov	ip, r1
 800a820:	e7dd      	b.n	800a7de <__mdiff+0xda>
 800a822:	3801      	subs	r0, #1
 800a824:	e7e9      	b.n	800a7fa <__mdiff+0xf6>
 800a826:	46c0      	nop			; (mov r8, r8)
 800a828:	0800c0b8 	.word	0x0800c0b8
 800a82c:	00000232 	.word	0x00000232
 800a830:	0800c144 	.word	0x0800c144

0800a834 <__ulp>:
 800a834:	4b0f      	ldr	r3, [pc, #60]	; (800a874 <__ulp+0x40>)
 800a836:	4019      	ands	r1, r3
 800a838:	4b0f      	ldr	r3, [pc, #60]	; (800a878 <__ulp+0x44>)
 800a83a:	18c9      	adds	r1, r1, r3
 800a83c:	2900      	cmp	r1, #0
 800a83e:	dd04      	ble.n	800a84a <__ulp+0x16>
 800a840:	2200      	movs	r2, #0
 800a842:	000b      	movs	r3, r1
 800a844:	0010      	movs	r0, r2
 800a846:	0019      	movs	r1, r3
 800a848:	4770      	bx	lr
 800a84a:	4249      	negs	r1, r1
 800a84c:	2200      	movs	r2, #0
 800a84e:	2300      	movs	r3, #0
 800a850:	1509      	asrs	r1, r1, #20
 800a852:	2913      	cmp	r1, #19
 800a854:	dc04      	bgt.n	800a860 <__ulp+0x2c>
 800a856:	2080      	movs	r0, #128	; 0x80
 800a858:	0300      	lsls	r0, r0, #12
 800a85a:	4108      	asrs	r0, r1
 800a85c:	0003      	movs	r3, r0
 800a85e:	e7f1      	b.n	800a844 <__ulp+0x10>
 800a860:	3914      	subs	r1, #20
 800a862:	2001      	movs	r0, #1
 800a864:	291e      	cmp	r1, #30
 800a866:	dc02      	bgt.n	800a86e <__ulp+0x3a>
 800a868:	2080      	movs	r0, #128	; 0x80
 800a86a:	0600      	lsls	r0, r0, #24
 800a86c:	40c8      	lsrs	r0, r1
 800a86e:	0002      	movs	r2, r0
 800a870:	e7e8      	b.n	800a844 <__ulp+0x10>
 800a872:	46c0      	nop			; (mov r8, r8)
 800a874:	7ff00000 	.word	0x7ff00000
 800a878:	fcc00000 	.word	0xfcc00000

0800a87c <__b2d>:
 800a87c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a87e:	0006      	movs	r6, r0
 800a880:	6903      	ldr	r3, [r0, #16]
 800a882:	3614      	adds	r6, #20
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	18f3      	adds	r3, r6, r3
 800a888:	1f1d      	subs	r5, r3, #4
 800a88a:	682c      	ldr	r4, [r5, #0]
 800a88c:	000f      	movs	r7, r1
 800a88e:	0020      	movs	r0, r4
 800a890:	9301      	str	r3, [sp, #4]
 800a892:	f7ff fd43 	bl	800a31c <__hi0bits>
 800a896:	2320      	movs	r3, #32
 800a898:	1a1b      	subs	r3, r3, r0
 800a89a:	491f      	ldr	r1, [pc, #124]	; (800a918 <__b2d+0x9c>)
 800a89c:	603b      	str	r3, [r7, #0]
 800a89e:	280a      	cmp	r0, #10
 800a8a0:	dc16      	bgt.n	800a8d0 <__b2d+0x54>
 800a8a2:	230b      	movs	r3, #11
 800a8a4:	0027      	movs	r7, r4
 800a8a6:	1a1b      	subs	r3, r3, r0
 800a8a8:	40df      	lsrs	r7, r3
 800a8aa:	4339      	orrs	r1, r7
 800a8ac:	469c      	mov	ip, r3
 800a8ae:	000b      	movs	r3, r1
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	42ae      	cmp	r6, r5
 800a8b4:	d202      	bcs.n	800a8bc <__b2d+0x40>
 800a8b6:	9901      	ldr	r1, [sp, #4]
 800a8b8:	3908      	subs	r1, #8
 800a8ba:	6809      	ldr	r1, [r1, #0]
 800a8bc:	3015      	adds	r0, #21
 800a8be:	4084      	lsls	r4, r0
 800a8c0:	4660      	mov	r0, ip
 800a8c2:	40c1      	lsrs	r1, r0
 800a8c4:	430c      	orrs	r4, r1
 800a8c6:	0022      	movs	r2, r4
 800a8c8:	0010      	movs	r0, r2
 800a8ca:	0019      	movs	r1, r3
 800a8cc:	b003      	add	sp, #12
 800a8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8d0:	2700      	movs	r7, #0
 800a8d2:	42ae      	cmp	r6, r5
 800a8d4:	d202      	bcs.n	800a8dc <__b2d+0x60>
 800a8d6:	9d01      	ldr	r5, [sp, #4]
 800a8d8:	3d08      	subs	r5, #8
 800a8da:	682f      	ldr	r7, [r5, #0]
 800a8dc:	230b      	movs	r3, #11
 800a8de:	425b      	negs	r3, r3
 800a8e0:	469c      	mov	ip, r3
 800a8e2:	4484      	add	ip, r0
 800a8e4:	280b      	cmp	r0, #11
 800a8e6:	d013      	beq.n	800a910 <__b2d+0x94>
 800a8e8:	4663      	mov	r3, ip
 800a8ea:	2020      	movs	r0, #32
 800a8ec:	409c      	lsls	r4, r3
 800a8ee:	1ac0      	subs	r0, r0, r3
 800a8f0:	003b      	movs	r3, r7
 800a8f2:	40c3      	lsrs	r3, r0
 800a8f4:	431c      	orrs	r4, r3
 800a8f6:	4321      	orrs	r1, r4
 800a8f8:	000b      	movs	r3, r1
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	42b5      	cmp	r5, r6
 800a8fe:	d901      	bls.n	800a904 <__b2d+0x88>
 800a900:	3d04      	subs	r5, #4
 800a902:	6829      	ldr	r1, [r5, #0]
 800a904:	4664      	mov	r4, ip
 800a906:	40c1      	lsrs	r1, r0
 800a908:	40a7      	lsls	r7, r4
 800a90a:	430f      	orrs	r7, r1
 800a90c:	003a      	movs	r2, r7
 800a90e:	e7db      	b.n	800a8c8 <__b2d+0x4c>
 800a910:	4321      	orrs	r1, r4
 800a912:	000b      	movs	r3, r1
 800a914:	e7fa      	b.n	800a90c <__b2d+0x90>
 800a916:	46c0      	nop			; (mov r8, r8)
 800a918:	3ff00000 	.word	0x3ff00000

0800a91c <__d2b>:
 800a91c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a91e:	2101      	movs	r1, #1
 800a920:	0014      	movs	r4, r2
 800a922:	001e      	movs	r6, r3
 800a924:	9f08      	ldr	r7, [sp, #32]
 800a926:	f7ff fc01 	bl	800a12c <_Balloc>
 800a92a:	1e05      	subs	r5, r0, #0
 800a92c:	d105      	bne.n	800a93a <__d2b+0x1e>
 800a92e:	0002      	movs	r2, r0
 800a930:	4b26      	ldr	r3, [pc, #152]	; (800a9cc <__d2b+0xb0>)
 800a932:	4927      	ldr	r1, [pc, #156]	; (800a9d0 <__d2b+0xb4>)
 800a934:	4827      	ldr	r0, [pc, #156]	; (800a9d4 <__d2b+0xb8>)
 800a936:	f000 fb6b 	bl	800b010 <__assert_func>
 800a93a:	0333      	lsls	r3, r6, #12
 800a93c:	0076      	lsls	r6, r6, #1
 800a93e:	0b1b      	lsrs	r3, r3, #12
 800a940:	0d76      	lsrs	r6, r6, #21
 800a942:	d124      	bne.n	800a98e <__d2b+0x72>
 800a944:	9301      	str	r3, [sp, #4]
 800a946:	2c00      	cmp	r4, #0
 800a948:	d027      	beq.n	800a99a <__d2b+0x7e>
 800a94a:	4668      	mov	r0, sp
 800a94c:	9400      	str	r4, [sp, #0]
 800a94e:	f7ff fcff 	bl	800a350 <__lo0bits>
 800a952:	9c00      	ldr	r4, [sp, #0]
 800a954:	2800      	cmp	r0, #0
 800a956:	d01e      	beq.n	800a996 <__d2b+0x7a>
 800a958:	9b01      	ldr	r3, [sp, #4]
 800a95a:	2120      	movs	r1, #32
 800a95c:	001a      	movs	r2, r3
 800a95e:	1a09      	subs	r1, r1, r0
 800a960:	408a      	lsls	r2, r1
 800a962:	40c3      	lsrs	r3, r0
 800a964:	4322      	orrs	r2, r4
 800a966:	616a      	str	r2, [r5, #20]
 800a968:	9301      	str	r3, [sp, #4]
 800a96a:	9c01      	ldr	r4, [sp, #4]
 800a96c:	61ac      	str	r4, [r5, #24]
 800a96e:	1e63      	subs	r3, r4, #1
 800a970:	419c      	sbcs	r4, r3
 800a972:	3401      	adds	r4, #1
 800a974:	612c      	str	r4, [r5, #16]
 800a976:	2e00      	cmp	r6, #0
 800a978:	d018      	beq.n	800a9ac <__d2b+0x90>
 800a97a:	4b17      	ldr	r3, [pc, #92]	; (800a9d8 <__d2b+0xbc>)
 800a97c:	18f6      	adds	r6, r6, r3
 800a97e:	2335      	movs	r3, #53	; 0x35
 800a980:	1836      	adds	r6, r6, r0
 800a982:	1a18      	subs	r0, r3, r0
 800a984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a986:	603e      	str	r6, [r7, #0]
 800a988:	6018      	str	r0, [r3, #0]
 800a98a:	0028      	movs	r0, r5
 800a98c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a98e:	2280      	movs	r2, #128	; 0x80
 800a990:	0352      	lsls	r2, r2, #13
 800a992:	4313      	orrs	r3, r2
 800a994:	e7d6      	b.n	800a944 <__d2b+0x28>
 800a996:	616c      	str	r4, [r5, #20]
 800a998:	e7e7      	b.n	800a96a <__d2b+0x4e>
 800a99a:	a801      	add	r0, sp, #4
 800a99c:	f7ff fcd8 	bl	800a350 <__lo0bits>
 800a9a0:	2401      	movs	r4, #1
 800a9a2:	9b01      	ldr	r3, [sp, #4]
 800a9a4:	612c      	str	r4, [r5, #16]
 800a9a6:	616b      	str	r3, [r5, #20]
 800a9a8:	3020      	adds	r0, #32
 800a9aa:	e7e4      	b.n	800a976 <__d2b+0x5a>
 800a9ac:	4b0b      	ldr	r3, [pc, #44]	; (800a9dc <__d2b+0xc0>)
 800a9ae:	18c0      	adds	r0, r0, r3
 800a9b0:	4b0b      	ldr	r3, [pc, #44]	; (800a9e0 <__d2b+0xc4>)
 800a9b2:	6038      	str	r0, [r7, #0]
 800a9b4:	18e3      	adds	r3, r4, r3
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	18eb      	adds	r3, r5, r3
 800a9ba:	6958      	ldr	r0, [r3, #20]
 800a9bc:	f7ff fcae 	bl	800a31c <__hi0bits>
 800a9c0:	0164      	lsls	r4, r4, #5
 800a9c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9c4:	1a24      	subs	r4, r4, r0
 800a9c6:	601c      	str	r4, [r3, #0]
 800a9c8:	e7df      	b.n	800a98a <__d2b+0x6e>
 800a9ca:	46c0      	nop			; (mov r8, r8)
 800a9cc:	0800c0b8 	.word	0x0800c0b8
 800a9d0:	0000030a 	.word	0x0000030a
 800a9d4:	0800c144 	.word	0x0800c144
 800a9d8:	fffffbcd 	.word	0xfffffbcd
 800a9dc:	fffffbce 	.word	0xfffffbce
 800a9e0:	3fffffff 	.word	0x3fffffff

0800a9e4 <__ratio>:
 800a9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9e6:	b087      	sub	sp, #28
 800a9e8:	000f      	movs	r7, r1
 800a9ea:	a904      	add	r1, sp, #16
 800a9ec:	0006      	movs	r6, r0
 800a9ee:	f7ff ff45 	bl	800a87c <__b2d>
 800a9f2:	9000      	str	r0, [sp, #0]
 800a9f4:	9101      	str	r1, [sp, #4]
 800a9f6:	9c00      	ldr	r4, [sp, #0]
 800a9f8:	9d01      	ldr	r5, [sp, #4]
 800a9fa:	0038      	movs	r0, r7
 800a9fc:	a905      	add	r1, sp, #20
 800a9fe:	f7ff ff3d 	bl	800a87c <__b2d>
 800aa02:	9002      	str	r0, [sp, #8]
 800aa04:	9103      	str	r1, [sp, #12]
 800aa06:	9a02      	ldr	r2, [sp, #8]
 800aa08:	9b03      	ldr	r3, [sp, #12]
 800aa0a:	6931      	ldr	r1, [r6, #16]
 800aa0c:	6938      	ldr	r0, [r7, #16]
 800aa0e:	9e05      	ldr	r6, [sp, #20]
 800aa10:	1a08      	subs	r0, r1, r0
 800aa12:	9904      	ldr	r1, [sp, #16]
 800aa14:	0140      	lsls	r0, r0, #5
 800aa16:	1b89      	subs	r1, r1, r6
 800aa18:	1841      	adds	r1, r0, r1
 800aa1a:	0508      	lsls	r0, r1, #20
 800aa1c:	2900      	cmp	r1, #0
 800aa1e:	dd07      	ble.n	800aa30 <__ratio+0x4c>
 800aa20:	9901      	ldr	r1, [sp, #4]
 800aa22:	1845      	adds	r5, r0, r1
 800aa24:	0020      	movs	r0, r4
 800aa26:	0029      	movs	r1, r5
 800aa28:	f7f6 f9d4 	bl	8000dd4 <__aeabi_ddiv>
 800aa2c:	b007      	add	sp, #28
 800aa2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa30:	9903      	ldr	r1, [sp, #12]
 800aa32:	1a0b      	subs	r3, r1, r0
 800aa34:	e7f6      	b.n	800aa24 <__ratio+0x40>

0800aa36 <__copybits>:
 800aa36:	b570      	push	{r4, r5, r6, lr}
 800aa38:	0014      	movs	r4, r2
 800aa3a:	0005      	movs	r5, r0
 800aa3c:	3901      	subs	r1, #1
 800aa3e:	6913      	ldr	r3, [r2, #16]
 800aa40:	1149      	asrs	r1, r1, #5
 800aa42:	3101      	adds	r1, #1
 800aa44:	0089      	lsls	r1, r1, #2
 800aa46:	3414      	adds	r4, #20
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	1841      	adds	r1, r0, r1
 800aa4c:	18e3      	adds	r3, r4, r3
 800aa4e:	42a3      	cmp	r3, r4
 800aa50:	d80d      	bhi.n	800aa6e <__copybits+0x38>
 800aa52:	0014      	movs	r4, r2
 800aa54:	3411      	adds	r4, #17
 800aa56:	2500      	movs	r5, #0
 800aa58:	429c      	cmp	r4, r3
 800aa5a:	d803      	bhi.n	800aa64 <__copybits+0x2e>
 800aa5c:	1a9b      	subs	r3, r3, r2
 800aa5e:	3b11      	subs	r3, #17
 800aa60:	089b      	lsrs	r3, r3, #2
 800aa62:	009d      	lsls	r5, r3, #2
 800aa64:	2300      	movs	r3, #0
 800aa66:	1940      	adds	r0, r0, r5
 800aa68:	4281      	cmp	r1, r0
 800aa6a:	d803      	bhi.n	800aa74 <__copybits+0x3e>
 800aa6c:	bd70      	pop	{r4, r5, r6, pc}
 800aa6e:	cc40      	ldmia	r4!, {r6}
 800aa70:	c540      	stmia	r5!, {r6}
 800aa72:	e7ec      	b.n	800aa4e <__copybits+0x18>
 800aa74:	c008      	stmia	r0!, {r3}
 800aa76:	e7f7      	b.n	800aa68 <__copybits+0x32>

0800aa78 <__any_on>:
 800aa78:	0002      	movs	r2, r0
 800aa7a:	6900      	ldr	r0, [r0, #16]
 800aa7c:	b510      	push	{r4, lr}
 800aa7e:	3214      	adds	r2, #20
 800aa80:	114b      	asrs	r3, r1, #5
 800aa82:	4298      	cmp	r0, r3
 800aa84:	db13      	blt.n	800aaae <__any_on+0x36>
 800aa86:	dd0c      	ble.n	800aaa2 <__any_on+0x2a>
 800aa88:	241f      	movs	r4, #31
 800aa8a:	0008      	movs	r0, r1
 800aa8c:	4020      	ands	r0, r4
 800aa8e:	4221      	tst	r1, r4
 800aa90:	d007      	beq.n	800aaa2 <__any_on+0x2a>
 800aa92:	0099      	lsls	r1, r3, #2
 800aa94:	588c      	ldr	r4, [r1, r2]
 800aa96:	0021      	movs	r1, r4
 800aa98:	40c1      	lsrs	r1, r0
 800aa9a:	4081      	lsls	r1, r0
 800aa9c:	2001      	movs	r0, #1
 800aa9e:	428c      	cmp	r4, r1
 800aaa0:	d104      	bne.n	800aaac <__any_on+0x34>
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	18d3      	adds	r3, r2, r3
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d803      	bhi.n	800aab2 <__any_on+0x3a>
 800aaaa:	2000      	movs	r0, #0
 800aaac:	bd10      	pop	{r4, pc}
 800aaae:	0003      	movs	r3, r0
 800aab0:	e7f7      	b.n	800aaa2 <__any_on+0x2a>
 800aab2:	3b04      	subs	r3, #4
 800aab4:	6819      	ldr	r1, [r3, #0]
 800aab6:	2900      	cmp	r1, #0
 800aab8:	d0f5      	beq.n	800aaa6 <__any_on+0x2e>
 800aaba:	2001      	movs	r0, #1
 800aabc:	e7f6      	b.n	800aaac <__any_on+0x34>

0800aabe <_calloc_r>:
 800aabe:	b570      	push	{r4, r5, r6, lr}
 800aac0:	0c13      	lsrs	r3, r2, #16
 800aac2:	0c0d      	lsrs	r5, r1, #16
 800aac4:	d11e      	bne.n	800ab04 <_calloc_r+0x46>
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d10c      	bne.n	800aae4 <_calloc_r+0x26>
 800aaca:	b289      	uxth	r1, r1
 800aacc:	b294      	uxth	r4, r2
 800aace:	434c      	muls	r4, r1
 800aad0:	0021      	movs	r1, r4
 800aad2:	f000 f88d 	bl	800abf0 <_malloc_r>
 800aad6:	1e05      	subs	r5, r0, #0
 800aad8:	d01b      	beq.n	800ab12 <_calloc_r+0x54>
 800aada:	0022      	movs	r2, r4
 800aadc:	2100      	movs	r1, #0
 800aade:	f7fc fb6f 	bl	80071c0 <memset>
 800aae2:	e016      	b.n	800ab12 <_calloc_r+0x54>
 800aae4:	1c1d      	adds	r5, r3, #0
 800aae6:	1c0b      	adds	r3, r1, #0
 800aae8:	b292      	uxth	r2, r2
 800aaea:	b289      	uxth	r1, r1
 800aaec:	b29c      	uxth	r4, r3
 800aaee:	4351      	muls	r1, r2
 800aaf0:	b2ab      	uxth	r3, r5
 800aaf2:	4363      	muls	r3, r4
 800aaf4:	0c0c      	lsrs	r4, r1, #16
 800aaf6:	191c      	adds	r4, r3, r4
 800aaf8:	0c22      	lsrs	r2, r4, #16
 800aafa:	d107      	bne.n	800ab0c <_calloc_r+0x4e>
 800aafc:	0424      	lsls	r4, r4, #16
 800aafe:	b289      	uxth	r1, r1
 800ab00:	430c      	orrs	r4, r1
 800ab02:	e7e5      	b.n	800aad0 <_calloc_r+0x12>
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d101      	bne.n	800ab0c <_calloc_r+0x4e>
 800ab08:	1c13      	adds	r3, r2, #0
 800ab0a:	e7ed      	b.n	800aae8 <_calloc_r+0x2a>
 800ab0c:	230c      	movs	r3, #12
 800ab0e:	2500      	movs	r5, #0
 800ab10:	6003      	str	r3, [r0, #0]
 800ab12:	0028      	movs	r0, r5
 800ab14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab18 <_free_r>:
 800ab18:	b570      	push	{r4, r5, r6, lr}
 800ab1a:	0005      	movs	r5, r0
 800ab1c:	2900      	cmp	r1, #0
 800ab1e:	d010      	beq.n	800ab42 <_free_r+0x2a>
 800ab20:	1f0c      	subs	r4, r1, #4
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	da00      	bge.n	800ab2a <_free_r+0x12>
 800ab28:	18e4      	adds	r4, r4, r3
 800ab2a:	0028      	movs	r0, r5
 800ab2c:	f000 fab2 	bl	800b094 <__malloc_lock>
 800ab30:	4a1d      	ldr	r2, [pc, #116]	; (800aba8 <_free_r+0x90>)
 800ab32:	6813      	ldr	r3, [r2, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d105      	bne.n	800ab44 <_free_r+0x2c>
 800ab38:	6063      	str	r3, [r4, #4]
 800ab3a:	6014      	str	r4, [r2, #0]
 800ab3c:	0028      	movs	r0, r5
 800ab3e:	f000 fab1 	bl	800b0a4 <__malloc_unlock>
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	42a3      	cmp	r3, r4
 800ab46:	d908      	bls.n	800ab5a <_free_r+0x42>
 800ab48:	6821      	ldr	r1, [r4, #0]
 800ab4a:	1860      	adds	r0, r4, r1
 800ab4c:	4283      	cmp	r3, r0
 800ab4e:	d1f3      	bne.n	800ab38 <_free_r+0x20>
 800ab50:	6818      	ldr	r0, [r3, #0]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	1841      	adds	r1, r0, r1
 800ab56:	6021      	str	r1, [r4, #0]
 800ab58:	e7ee      	b.n	800ab38 <_free_r+0x20>
 800ab5a:	001a      	movs	r2, r3
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <_free_r+0x4e>
 800ab62:	42a3      	cmp	r3, r4
 800ab64:	d9f9      	bls.n	800ab5a <_free_r+0x42>
 800ab66:	6811      	ldr	r1, [r2, #0]
 800ab68:	1850      	adds	r0, r2, r1
 800ab6a:	42a0      	cmp	r0, r4
 800ab6c:	d10b      	bne.n	800ab86 <_free_r+0x6e>
 800ab6e:	6820      	ldr	r0, [r4, #0]
 800ab70:	1809      	adds	r1, r1, r0
 800ab72:	1850      	adds	r0, r2, r1
 800ab74:	6011      	str	r1, [r2, #0]
 800ab76:	4283      	cmp	r3, r0
 800ab78:	d1e0      	bne.n	800ab3c <_free_r+0x24>
 800ab7a:	6818      	ldr	r0, [r3, #0]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	1841      	adds	r1, r0, r1
 800ab80:	6011      	str	r1, [r2, #0]
 800ab82:	6053      	str	r3, [r2, #4]
 800ab84:	e7da      	b.n	800ab3c <_free_r+0x24>
 800ab86:	42a0      	cmp	r0, r4
 800ab88:	d902      	bls.n	800ab90 <_free_r+0x78>
 800ab8a:	230c      	movs	r3, #12
 800ab8c:	602b      	str	r3, [r5, #0]
 800ab8e:	e7d5      	b.n	800ab3c <_free_r+0x24>
 800ab90:	6821      	ldr	r1, [r4, #0]
 800ab92:	1860      	adds	r0, r4, r1
 800ab94:	4283      	cmp	r3, r0
 800ab96:	d103      	bne.n	800aba0 <_free_r+0x88>
 800ab98:	6818      	ldr	r0, [r3, #0]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	1841      	adds	r1, r0, r1
 800ab9e:	6021      	str	r1, [r4, #0]
 800aba0:	6063      	str	r3, [r4, #4]
 800aba2:	6054      	str	r4, [r2, #4]
 800aba4:	e7ca      	b.n	800ab3c <_free_r+0x24>
 800aba6:	46c0      	nop			; (mov r8, r8)
 800aba8:	20000468 	.word	0x20000468

0800abac <sbrk_aligned>:
 800abac:	b570      	push	{r4, r5, r6, lr}
 800abae:	4e0f      	ldr	r6, [pc, #60]	; (800abec <sbrk_aligned+0x40>)
 800abb0:	000d      	movs	r5, r1
 800abb2:	6831      	ldr	r1, [r6, #0]
 800abb4:	0004      	movs	r4, r0
 800abb6:	2900      	cmp	r1, #0
 800abb8:	d102      	bne.n	800abc0 <sbrk_aligned+0x14>
 800abba:	f000 f9f7 	bl	800afac <_sbrk_r>
 800abbe:	6030      	str	r0, [r6, #0]
 800abc0:	0029      	movs	r1, r5
 800abc2:	0020      	movs	r0, r4
 800abc4:	f000 f9f2 	bl	800afac <_sbrk_r>
 800abc8:	1c43      	adds	r3, r0, #1
 800abca:	d00a      	beq.n	800abe2 <sbrk_aligned+0x36>
 800abcc:	2303      	movs	r3, #3
 800abce:	1cc5      	adds	r5, r0, #3
 800abd0:	439d      	bics	r5, r3
 800abd2:	42a8      	cmp	r0, r5
 800abd4:	d007      	beq.n	800abe6 <sbrk_aligned+0x3a>
 800abd6:	1a29      	subs	r1, r5, r0
 800abd8:	0020      	movs	r0, r4
 800abda:	f000 f9e7 	bl	800afac <_sbrk_r>
 800abde:	1c43      	adds	r3, r0, #1
 800abe0:	d101      	bne.n	800abe6 <sbrk_aligned+0x3a>
 800abe2:	2501      	movs	r5, #1
 800abe4:	426d      	negs	r5, r5
 800abe6:	0028      	movs	r0, r5
 800abe8:	bd70      	pop	{r4, r5, r6, pc}
 800abea:	46c0      	nop			; (mov r8, r8)
 800abec:	2000046c 	.word	0x2000046c

0800abf0 <_malloc_r>:
 800abf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abf2:	2203      	movs	r2, #3
 800abf4:	1ccb      	adds	r3, r1, #3
 800abf6:	4393      	bics	r3, r2
 800abf8:	3308      	adds	r3, #8
 800abfa:	0006      	movs	r6, r0
 800abfc:	001f      	movs	r7, r3
 800abfe:	2b0c      	cmp	r3, #12
 800ac00:	d232      	bcs.n	800ac68 <_malloc_r+0x78>
 800ac02:	270c      	movs	r7, #12
 800ac04:	42b9      	cmp	r1, r7
 800ac06:	d831      	bhi.n	800ac6c <_malloc_r+0x7c>
 800ac08:	0030      	movs	r0, r6
 800ac0a:	f000 fa43 	bl	800b094 <__malloc_lock>
 800ac0e:	4d32      	ldr	r5, [pc, #200]	; (800acd8 <_malloc_r+0xe8>)
 800ac10:	682b      	ldr	r3, [r5, #0]
 800ac12:	001c      	movs	r4, r3
 800ac14:	2c00      	cmp	r4, #0
 800ac16:	d12e      	bne.n	800ac76 <_malloc_r+0x86>
 800ac18:	0039      	movs	r1, r7
 800ac1a:	0030      	movs	r0, r6
 800ac1c:	f7ff ffc6 	bl	800abac <sbrk_aligned>
 800ac20:	0004      	movs	r4, r0
 800ac22:	1c43      	adds	r3, r0, #1
 800ac24:	d11e      	bne.n	800ac64 <_malloc_r+0x74>
 800ac26:	682c      	ldr	r4, [r5, #0]
 800ac28:	0025      	movs	r5, r4
 800ac2a:	2d00      	cmp	r5, #0
 800ac2c:	d14a      	bne.n	800acc4 <_malloc_r+0xd4>
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	0029      	movs	r1, r5
 800ac32:	18e3      	adds	r3, r4, r3
 800ac34:	0030      	movs	r0, r6
 800ac36:	9301      	str	r3, [sp, #4]
 800ac38:	f000 f9b8 	bl	800afac <_sbrk_r>
 800ac3c:	9b01      	ldr	r3, [sp, #4]
 800ac3e:	4283      	cmp	r3, r0
 800ac40:	d143      	bne.n	800acca <_malloc_r+0xda>
 800ac42:	6823      	ldr	r3, [r4, #0]
 800ac44:	3703      	adds	r7, #3
 800ac46:	1aff      	subs	r7, r7, r3
 800ac48:	2303      	movs	r3, #3
 800ac4a:	439f      	bics	r7, r3
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	2f0c      	cmp	r7, #12
 800ac50:	d200      	bcs.n	800ac54 <_malloc_r+0x64>
 800ac52:	270c      	movs	r7, #12
 800ac54:	0039      	movs	r1, r7
 800ac56:	0030      	movs	r0, r6
 800ac58:	f7ff ffa8 	bl	800abac <sbrk_aligned>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d034      	beq.n	800acca <_malloc_r+0xda>
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	19df      	adds	r7, r3, r7
 800ac64:	6027      	str	r7, [r4, #0]
 800ac66:	e013      	b.n	800ac90 <_malloc_r+0xa0>
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	dacb      	bge.n	800ac04 <_malloc_r+0x14>
 800ac6c:	230c      	movs	r3, #12
 800ac6e:	2500      	movs	r5, #0
 800ac70:	6033      	str	r3, [r6, #0]
 800ac72:	0028      	movs	r0, r5
 800ac74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac76:	6822      	ldr	r2, [r4, #0]
 800ac78:	1bd1      	subs	r1, r2, r7
 800ac7a:	d420      	bmi.n	800acbe <_malloc_r+0xce>
 800ac7c:	290b      	cmp	r1, #11
 800ac7e:	d917      	bls.n	800acb0 <_malloc_r+0xc0>
 800ac80:	19e2      	adds	r2, r4, r7
 800ac82:	6027      	str	r7, [r4, #0]
 800ac84:	42a3      	cmp	r3, r4
 800ac86:	d111      	bne.n	800acac <_malloc_r+0xbc>
 800ac88:	602a      	str	r2, [r5, #0]
 800ac8a:	6863      	ldr	r3, [r4, #4]
 800ac8c:	6011      	str	r1, [r2, #0]
 800ac8e:	6053      	str	r3, [r2, #4]
 800ac90:	0030      	movs	r0, r6
 800ac92:	0025      	movs	r5, r4
 800ac94:	f000 fa06 	bl	800b0a4 <__malloc_unlock>
 800ac98:	2207      	movs	r2, #7
 800ac9a:	350b      	adds	r5, #11
 800ac9c:	1d23      	adds	r3, r4, #4
 800ac9e:	4395      	bics	r5, r2
 800aca0:	1aea      	subs	r2, r5, r3
 800aca2:	429d      	cmp	r5, r3
 800aca4:	d0e5      	beq.n	800ac72 <_malloc_r+0x82>
 800aca6:	1b5b      	subs	r3, r3, r5
 800aca8:	50a3      	str	r3, [r4, r2]
 800acaa:	e7e2      	b.n	800ac72 <_malloc_r+0x82>
 800acac:	605a      	str	r2, [r3, #4]
 800acae:	e7ec      	b.n	800ac8a <_malloc_r+0x9a>
 800acb0:	6862      	ldr	r2, [r4, #4]
 800acb2:	42a3      	cmp	r3, r4
 800acb4:	d101      	bne.n	800acba <_malloc_r+0xca>
 800acb6:	602a      	str	r2, [r5, #0]
 800acb8:	e7ea      	b.n	800ac90 <_malloc_r+0xa0>
 800acba:	605a      	str	r2, [r3, #4]
 800acbc:	e7e8      	b.n	800ac90 <_malloc_r+0xa0>
 800acbe:	0023      	movs	r3, r4
 800acc0:	6864      	ldr	r4, [r4, #4]
 800acc2:	e7a7      	b.n	800ac14 <_malloc_r+0x24>
 800acc4:	002c      	movs	r4, r5
 800acc6:	686d      	ldr	r5, [r5, #4]
 800acc8:	e7af      	b.n	800ac2a <_malloc_r+0x3a>
 800acca:	230c      	movs	r3, #12
 800accc:	0030      	movs	r0, r6
 800acce:	6033      	str	r3, [r6, #0]
 800acd0:	f000 f9e8 	bl	800b0a4 <__malloc_unlock>
 800acd4:	e7cd      	b.n	800ac72 <_malloc_r+0x82>
 800acd6:	46c0      	nop			; (mov r8, r8)
 800acd8:	20000468 	.word	0x20000468

0800acdc <__ssputs_r>:
 800acdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acde:	688e      	ldr	r6, [r1, #8]
 800ace0:	b085      	sub	sp, #20
 800ace2:	0007      	movs	r7, r0
 800ace4:	000c      	movs	r4, r1
 800ace6:	9203      	str	r2, [sp, #12]
 800ace8:	9301      	str	r3, [sp, #4]
 800acea:	429e      	cmp	r6, r3
 800acec:	d83c      	bhi.n	800ad68 <__ssputs_r+0x8c>
 800acee:	2390      	movs	r3, #144	; 0x90
 800acf0:	898a      	ldrh	r2, [r1, #12]
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	421a      	tst	r2, r3
 800acf6:	d034      	beq.n	800ad62 <__ssputs_r+0x86>
 800acf8:	6909      	ldr	r1, [r1, #16]
 800acfa:	6823      	ldr	r3, [r4, #0]
 800acfc:	6960      	ldr	r0, [r4, #20]
 800acfe:	1a5b      	subs	r3, r3, r1
 800ad00:	9302      	str	r3, [sp, #8]
 800ad02:	2303      	movs	r3, #3
 800ad04:	4343      	muls	r3, r0
 800ad06:	0fdd      	lsrs	r5, r3, #31
 800ad08:	18ed      	adds	r5, r5, r3
 800ad0a:	9b01      	ldr	r3, [sp, #4]
 800ad0c:	9802      	ldr	r0, [sp, #8]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	181b      	adds	r3, r3, r0
 800ad12:	106d      	asrs	r5, r5, #1
 800ad14:	42ab      	cmp	r3, r5
 800ad16:	d900      	bls.n	800ad1a <__ssputs_r+0x3e>
 800ad18:	001d      	movs	r5, r3
 800ad1a:	0553      	lsls	r3, r2, #21
 800ad1c:	d532      	bpl.n	800ad84 <__ssputs_r+0xa8>
 800ad1e:	0029      	movs	r1, r5
 800ad20:	0038      	movs	r0, r7
 800ad22:	f7ff ff65 	bl	800abf0 <_malloc_r>
 800ad26:	1e06      	subs	r6, r0, #0
 800ad28:	d109      	bne.n	800ad3e <__ssputs_r+0x62>
 800ad2a:	230c      	movs	r3, #12
 800ad2c:	603b      	str	r3, [r7, #0]
 800ad2e:	2340      	movs	r3, #64	; 0x40
 800ad30:	2001      	movs	r0, #1
 800ad32:	89a2      	ldrh	r2, [r4, #12]
 800ad34:	4240      	negs	r0, r0
 800ad36:	4313      	orrs	r3, r2
 800ad38:	81a3      	strh	r3, [r4, #12]
 800ad3a:	b005      	add	sp, #20
 800ad3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad3e:	9a02      	ldr	r2, [sp, #8]
 800ad40:	6921      	ldr	r1, [r4, #16]
 800ad42:	f7ff f9ea 	bl	800a11a <memcpy>
 800ad46:	89a3      	ldrh	r3, [r4, #12]
 800ad48:	4a14      	ldr	r2, [pc, #80]	; (800ad9c <__ssputs_r+0xc0>)
 800ad4a:	401a      	ands	r2, r3
 800ad4c:	2380      	movs	r3, #128	; 0x80
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	81a3      	strh	r3, [r4, #12]
 800ad52:	9b02      	ldr	r3, [sp, #8]
 800ad54:	6126      	str	r6, [r4, #16]
 800ad56:	18f6      	adds	r6, r6, r3
 800ad58:	6026      	str	r6, [r4, #0]
 800ad5a:	6165      	str	r5, [r4, #20]
 800ad5c:	9e01      	ldr	r6, [sp, #4]
 800ad5e:	1aed      	subs	r5, r5, r3
 800ad60:	60a5      	str	r5, [r4, #8]
 800ad62:	9b01      	ldr	r3, [sp, #4]
 800ad64:	429e      	cmp	r6, r3
 800ad66:	d900      	bls.n	800ad6a <__ssputs_r+0x8e>
 800ad68:	9e01      	ldr	r6, [sp, #4]
 800ad6a:	0032      	movs	r2, r6
 800ad6c:	9903      	ldr	r1, [sp, #12]
 800ad6e:	6820      	ldr	r0, [r4, #0]
 800ad70:	f000 f97c 	bl	800b06c <memmove>
 800ad74:	68a3      	ldr	r3, [r4, #8]
 800ad76:	2000      	movs	r0, #0
 800ad78:	1b9b      	subs	r3, r3, r6
 800ad7a:	60a3      	str	r3, [r4, #8]
 800ad7c:	6823      	ldr	r3, [r4, #0]
 800ad7e:	199e      	adds	r6, r3, r6
 800ad80:	6026      	str	r6, [r4, #0]
 800ad82:	e7da      	b.n	800ad3a <__ssputs_r+0x5e>
 800ad84:	002a      	movs	r2, r5
 800ad86:	0038      	movs	r0, r7
 800ad88:	f000 f994 	bl	800b0b4 <_realloc_r>
 800ad8c:	1e06      	subs	r6, r0, #0
 800ad8e:	d1e0      	bne.n	800ad52 <__ssputs_r+0x76>
 800ad90:	0038      	movs	r0, r7
 800ad92:	6921      	ldr	r1, [r4, #16]
 800ad94:	f7ff fec0 	bl	800ab18 <_free_r>
 800ad98:	e7c7      	b.n	800ad2a <__ssputs_r+0x4e>
 800ad9a:	46c0      	nop			; (mov r8, r8)
 800ad9c:	fffffb7f 	.word	0xfffffb7f

0800ada0 <_svfiprintf_r>:
 800ada0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ada2:	b0a1      	sub	sp, #132	; 0x84
 800ada4:	9003      	str	r0, [sp, #12]
 800ada6:	001d      	movs	r5, r3
 800ada8:	898b      	ldrh	r3, [r1, #12]
 800adaa:	000f      	movs	r7, r1
 800adac:	0016      	movs	r6, r2
 800adae:	061b      	lsls	r3, r3, #24
 800adb0:	d511      	bpl.n	800add6 <_svfiprintf_r+0x36>
 800adb2:	690b      	ldr	r3, [r1, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10e      	bne.n	800add6 <_svfiprintf_r+0x36>
 800adb8:	2140      	movs	r1, #64	; 0x40
 800adba:	f7ff ff19 	bl	800abf0 <_malloc_r>
 800adbe:	6038      	str	r0, [r7, #0]
 800adc0:	6138      	str	r0, [r7, #16]
 800adc2:	2800      	cmp	r0, #0
 800adc4:	d105      	bne.n	800add2 <_svfiprintf_r+0x32>
 800adc6:	230c      	movs	r3, #12
 800adc8:	9a03      	ldr	r2, [sp, #12]
 800adca:	3801      	subs	r0, #1
 800adcc:	6013      	str	r3, [r2, #0]
 800adce:	b021      	add	sp, #132	; 0x84
 800add0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800add2:	2340      	movs	r3, #64	; 0x40
 800add4:	617b      	str	r3, [r7, #20]
 800add6:	2300      	movs	r3, #0
 800add8:	ac08      	add	r4, sp, #32
 800adda:	6163      	str	r3, [r4, #20]
 800addc:	3320      	adds	r3, #32
 800adde:	7663      	strb	r3, [r4, #25]
 800ade0:	3310      	adds	r3, #16
 800ade2:	76a3      	strb	r3, [r4, #26]
 800ade4:	9507      	str	r5, [sp, #28]
 800ade6:	0035      	movs	r5, r6
 800ade8:	782b      	ldrb	r3, [r5, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d001      	beq.n	800adf2 <_svfiprintf_r+0x52>
 800adee:	2b25      	cmp	r3, #37	; 0x25
 800adf0:	d147      	bne.n	800ae82 <_svfiprintf_r+0xe2>
 800adf2:	1bab      	subs	r3, r5, r6
 800adf4:	9305      	str	r3, [sp, #20]
 800adf6:	42b5      	cmp	r5, r6
 800adf8:	d00c      	beq.n	800ae14 <_svfiprintf_r+0x74>
 800adfa:	0032      	movs	r2, r6
 800adfc:	0039      	movs	r1, r7
 800adfe:	9803      	ldr	r0, [sp, #12]
 800ae00:	f7ff ff6c 	bl	800acdc <__ssputs_r>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d100      	bne.n	800ae0a <_svfiprintf_r+0x6a>
 800ae08:	e0ae      	b.n	800af68 <_svfiprintf_r+0x1c8>
 800ae0a:	6962      	ldr	r2, [r4, #20]
 800ae0c:	9b05      	ldr	r3, [sp, #20]
 800ae0e:	4694      	mov	ip, r2
 800ae10:	4463      	add	r3, ip
 800ae12:	6163      	str	r3, [r4, #20]
 800ae14:	782b      	ldrb	r3, [r5, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d100      	bne.n	800ae1c <_svfiprintf_r+0x7c>
 800ae1a:	e0a5      	b.n	800af68 <_svfiprintf_r+0x1c8>
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	2300      	movs	r3, #0
 800ae20:	4252      	negs	r2, r2
 800ae22:	6062      	str	r2, [r4, #4]
 800ae24:	a904      	add	r1, sp, #16
 800ae26:	3254      	adds	r2, #84	; 0x54
 800ae28:	1852      	adds	r2, r2, r1
 800ae2a:	1c6e      	adds	r6, r5, #1
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	60e3      	str	r3, [r4, #12]
 800ae30:	60a3      	str	r3, [r4, #8]
 800ae32:	7013      	strb	r3, [r2, #0]
 800ae34:	65a3      	str	r3, [r4, #88]	; 0x58
 800ae36:	2205      	movs	r2, #5
 800ae38:	7831      	ldrb	r1, [r6, #0]
 800ae3a:	4854      	ldr	r0, [pc, #336]	; (800af8c <_svfiprintf_r+0x1ec>)
 800ae3c:	f7ff f962 	bl	800a104 <memchr>
 800ae40:	1c75      	adds	r5, r6, #1
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d11f      	bne.n	800ae86 <_svfiprintf_r+0xe6>
 800ae46:	6822      	ldr	r2, [r4, #0]
 800ae48:	06d3      	lsls	r3, r2, #27
 800ae4a:	d504      	bpl.n	800ae56 <_svfiprintf_r+0xb6>
 800ae4c:	2353      	movs	r3, #83	; 0x53
 800ae4e:	a904      	add	r1, sp, #16
 800ae50:	185b      	adds	r3, r3, r1
 800ae52:	2120      	movs	r1, #32
 800ae54:	7019      	strb	r1, [r3, #0]
 800ae56:	0713      	lsls	r3, r2, #28
 800ae58:	d504      	bpl.n	800ae64 <_svfiprintf_r+0xc4>
 800ae5a:	2353      	movs	r3, #83	; 0x53
 800ae5c:	a904      	add	r1, sp, #16
 800ae5e:	185b      	adds	r3, r3, r1
 800ae60:	212b      	movs	r1, #43	; 0x2b
 800ae62:	7019      	strb	r1, [r3, #0]
 800ae64:	7833      	ldrb	r3, [r6, #0]
 800ae66:	2b2a      	cmp	r3, #42	; 0x2a
 800ae68:	d016      	beq.n	800ae98 <_svfiprintf_r+0xf8>
 800ae6a:	0035      	movs	r5, r6
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	200a      	movs	r0, #10
 800ae70:	68e3      	ldr	r3, [r4, #12]
 800ae72:	782a      	ldrb	r2, [r5, #0]
 800ae74:	1c6e      	adds	r6, r5, #1
 800ae76:	3a30      	subs	r2, #48	; 0x30
 800ae78:	2a09      	cmp	r2, #9
 800ae7a:	d94e      	bls.n	800af1a <_svfiprintf_r+0x17a>
 800ae7c:	2900      	cmp	r1, #0
 800ae7e:	d111      	bne.n	800aea4 <_svfiprintf_r+0x104>
 800ae80:	e017      	b.n	800aeb2 <_svfiprintf_r+0x112>
 800ae82:	3501      	adds	r5, #1
 800ae84:	e7b0      	b.n	800ade8 <_svfiprintf_r+0x48>
 800ae86:	4b41      	ldr	r3, [pc, #260]	; (800af8c <_svfiprintf_r+0x1ec>)
 800ae88:	6822      	ldr	r2, [r4, #0]
 800ae8a:	1ac0      	subs	r0, r0, r3
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	4083      	lsls	r3, r0
 800ae90:	4313      	orrs	r3, r2
 800ae92:	002e      	movs	r6, r5
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	e7ce      	b.n	800ae36 <_svfiprintf_r+0x96>
 800ae98:	9b07      	ldr	r3, [sp, #28]
 800ae9a:	1d19      	adds	r1, r3, #4
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	9107      	str	r1, [sp, #28]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	db01      	blt.n	800aea8 <_svfiprintf_r+0x108>
 800aea4:	930b      	str	r3, [sp, #44]	; 0x2c
 800aea6:	e004      	b.n	800aeb2 <_svfiprintf_r+0x112>
 800aea8:	425b      	negs	r3, r3
 800aeaa:	60e3      	str	r3, [r4, #12]
 800aeac:	2302      	movs	r3, #2
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	782b      	ldrb	r3, [r5, #0]
 800aeb4:	2b2e      	cmp	r3, #46	; 0x2e
 800aeb6:	d10a      	bne.n	800aece <_svfiprintf_r+0x12e>
 800aeb8:	786b      	ldrb	r3, [r5, #1]
 800aeba:	2b2a      	cmp	r3, #42	; 0x2a
 800aebc:	d135      	bne.n	800af2a <_svfiprintf_r+0x18a>
 800aebe:	9b07      	ldr	r3, [sp, #28]
 800aec0:	3502      	adds	r5, #2
 800aec2:	1d1a      	adds	r2, r3, #4
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	9207      	str	r2, [sp, #28]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	db2b      	blt.n	800af24 <_svfiprintf_r+0x184>
 800aecc:	9309      	str	r3, [sp, #36]	; 0x24
 800aece:	4e30      	ldr	r6, [pc, #192]	; (800af90 <_svfiprintf_r+0x1f0>)
 800aed0:	2203      	movs	r2, #3
 800aed2:	0030      	movs	r0, r6
 800aed4:	7829      	ldrb	r1, [r5, #0]
 800aed6:	f7ff f915 	bl	800a104 <memchr>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	d006      	beq.n	800aeec <_svfiprintf_r+0x14c>
 800aede:	2340      	movs	r3, #64	; 0x40
 800aee0:	1b80      	subs	r0, r0, r6
 800aee2:	4083      	lsls	r3, r0
 800aee4:	6822      	ldr	r2, [r4, #0]
 800aee6:	3501      	adds	r5, #1
 800aee8:	4313      	orrs	r3, r2
 800aeea:	6023      	str	r3, [r4, #0]
 800aeec:	7829      	ldrb	r1, [r5, #0]
 800aeee:	2206      	movs	r2, #6
 800aef0:	4828      	ldr	r0, [pc, #160]	; (800af94 <_svfiprintf_r+0x1f4>)
 800aef2:	1c6e      	adds	r6, r5, #1
 800aef4:	7621      	strb	r1, [r4, #24]
 800aef6:	f7ff f905 	bl	800a104 <memchr>
 800aefa:	2800      	cmp	r0, #0
 800aefc:	d03c      	beq.n	800af78 <_svfiprintf_r+0x1d8>
 800aefe:	4b26      	ldr	r3, [pc, #152]	; (800af98 <_svfiprintf_r+0x1f8>)
 800af00:	2b00      	cmp	r3, #0
 800af02:	d125      	bne.n	800af50 <_svfiprintf_r+0x1b0>
 800af04:	2207      	movs	r2, #7
 800af06:	9b07      	ldr	r3, [sp, #28]
 800af08:	3307      	adds	r3, #7
 800af0a:	4393      	bics	r3, r2
 800af0c:	3308      	adds	r3, #8
 800af0e:	9307      	str	r3, [sp, #28]
 800af10:	6963      	ldr	r3, [r4, #20]
 800af12:	9a04      	ldr	r2, [sp, #16]
 800af14:	189b      	adds	r3, r3, r2
 800af16:	6163      	str	r3, [r4, #20]
 800af18:	e765      	b.n	800ade6 <_svfiprintf_r+0x46>
 800af1a:	4343      	muls	r3, r0
 800af1c:	0035      	movs	r5, r6
 800af1e:	2101      	movs	r1, #1
 800af20:	189b      	adds	r3, r3, r2
 800af22:	e7a6      	b.n	800ae72 <_svfiprintf_r+0xd2>
 800af24:	2301      	movs	r3, #1
 800af26:	425b      	negs	r3, r3
 800af28:	e7d0      	b.n	800aecc <_svfiprintf_r+0x12c>
 800af2a:	2300      	movs	r3, #0
 800af2c:	200a      	movs	r0, #10
 800af2e:	001a      	movs	r2, r3
 800af30:	3501      	adds	r5, #1
 800af32:	6063      	str	r3, [r4, #4]
 800af34:	7829      	ldrb	r1, [r5, #0]
 800af36:	1c6e      	adds	r6, r5, #1
 800af38:	3930      	subs	r1, #48	; 0x30
 800af3a:	2909      	cmp	r1, #9
 800af3c:	d903      	bls.n	800af46 <_svfiprintf_r+0x1a6>
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d0c5      	beq.n	800aece <_svfiprintf_r+0x12e>
 800af42:	9209      	str	r2, [sp, #36]	; 0x24
 800af44:	e7c3      	b.n	800aece <_svfiprintf_r+0x12e>
 800af46:	4342      	muls	r2, r0
 800af48:	0035      	movs	r5, r6
 800af4a:	2301      	movs	r3, #1
 800af4c:	1852      	adds	r2, r2, r1
 800af4e:	e7f1      	b.n	800af34 <_svfiprintf_r+0x194>
 800af50:	ab07      	add	r3, sp, #28
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	003a      	movs	r2, r7
 800af56:	0021      	movs	r1, r4
 800af58:	4b10      	ldr	r3, [pc, #64]	; (800af9c <_svfiprintf_r+0x1fc>)
 800af5a:	9803      	ldr	r0, [sp, #12]
 800af5c:	f7fc f9e2 	bl	8007324 <_printf_float>
 800af60:	9004      	str	r0, [sp, #16]
 800af62:	9b04      	ldr	r3, [sp, #16]
 800af64:	3301      	adds	r3, #1
 800af66:	d1d3      	bne.n	800af10 <_svfiprintf_r+0x170>
 800af68:	89bb      	ldrh	r3, [r7, #12]
 800af6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800af6c:	065b      	lsls	r3, r3, #25
 800af6e:	d400      	bmi.n	800af72 <_svfiprintf_r+0x1d2>
 800af70:	e72d      	b.n	800adce <_svfiprintf_r+0x2e>
 800af72:	2001      	movs	r0, #1
 800af74:	4240      	negs	r0, r0
 800af76:	e72a      	b.n	800adce <_svfiprintf_r+0x2e>
 800af78:	ab07      	add	r3, sp, #28
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	003a      	movs	r2, r7
 800af7e:	0021      	movs	r1, r4
 800af80:	4b06      	ldr	r3, [pc, #24]	; (800af9c <_svfiprintf_r+0x1fc>)
 800af82:	9803      	ldr	r0, [sp, #12]
 800af84:	f7fc fc80 	bl	8007888 <_printf_i>
 800af88:	e7ea      	b.n	800af60 <_svfiprintf_r+0x1c0>
 800af8a:	46c0      	nop			; (mov r8, r8)
 800af8c:	0800c29c 	.word	0x0800c29c
 800af90:	0800c2a2 	.word	0x0800c2a2
 800af94:	0800c2a6 	.word	0x0800c2a6
 800af98:	08007325 	.word	0x08007325
 800af9c:	0800acdd 	.word	0x0800acdd

0800afa0 <nan>:
 800afa0:	2000      	movs	r0, #0
 800afa2:	4901      	ldr	r1, [pc, #4]	; (800afa8 <nan+0x8>)
 800afa4:	4770      	bx	lr
 800afa6:	46c0      	nop			; (mov r8, r8)
 800afa8:	7ff80000 	.word	0x7ff80000

0800afac <_sbrk_r>:
 800afac:	2300      	movs	r3, #0
 800afae:	b570      	push	{r4, r5, r6, lr}
 800afb0:	4d06      	ldr	r5, [pc, #24]	; (800afcc <_sbrk_r+0x20>)
 800afb2:	0004      	movs	r4, r0
 800afb4:	0008      	movs	r0, r1
 800afb6:	602b      	str	r3, [r5, #0]
 800afb8:	f7f8 feea 	bl	8003d90 <_sbrk>
 800afbc:	1c43      	adds	r3, r0, #1
 800afbe:	d103      	bne.n	800afc8 <_sbrk_r+0x1c>
 800afc0:	682b      	ldr	r3, [r5, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d000      	beq.n	800afc8 <_sbrk_r+0x1c>
 800afc6:	6023      	str	r3, [r4, #0]
 800afc8:	bd70      	pop	{r4, r5, r6, pc}
 800afca:	46c0      	nop			; (mov r8, r8)
 800afcc:	20000470 	.word	0x20000470

0800afd0 <strncmp>:
 800afd0:	b530      	push	{r4, r5, lr}
 800afd2:	0005      	movs	r5, r0
 800afd4:	1e10      	subs	r0, r2, #0
 800afd6:	d008      	beq.n	800afea <strncmp+0x1a>
 800afd8:	2400      	movs	r4, #0
 800afda:	3a01      	subs	r2, #1
 800afdc:	5d2b      	ldrb	r3, [r5, r4]
 800afde:	5d08      	ldrb	r0, [r1, r4]
 800afe0:	4283      	cmp	r3, r0
 800afe2:	d101      	bne.n	800afe8 <strncmp+0x18>
 800afe4:	4294      	cmp	r4, r2
 800afe6:	d101      	bne.n	800afec <strncmp+0x1c>
 800afe8:	1a18      	subs	r0, r3, r0
 800afea:	bd30      	pop	{r4, r5, pc}
 800afec:	3401      	adds	r4, #1
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1f4      	bne.n	800afdc <strncmp+0xc>
 800aff2:	e7f9      	b.n	800afe8 <strncmp+0x18>

0800aff4 <__ascii_wctomb>:
 800aff4:	0003      	movs	r3, r0
 800aff6:	1e08      	subs	r0, r1, #0
 800aff8:	d005      	beq.n	800b006 <__ascii_wctomb+0x12>
 800affa:	2aff      	cmp	r2, #255	; 0xff
 800affc:	d904      	bls.n	800b008 <__ascii_wctomb+0x14>
 800affe:	228a      	movs	r2, #138	; 0x8a
 800b000:	2001      	movs	r0, #1
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	4240      	negs	r0, r0
 800b006:	4770      	bx	lr
 800b008:	2001      	movs	r0, #1
 800b00a:	700a      	strb	r2, [r1, #0]
 800b00c:	e7fb      	b.n	800b006 <__ascii_wctomb+0x12>
	...

0800b010 <__assert_func>:
 800b010:	b530      	push	{r4, r5, lr}
 800b012:	0014      	movs	r4, r2
 800b014:	001a      	movs	r2, r3
 800b016:	4b09      	ldr	r3, [pc, #36]	; (800b03c <__assert_func+0x2c>)
 800b018:	0005      	movs	r5, r0
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	b085      	sub	sp, #20
 800b01e:	68d8      	ldr	r0, [r3, #12]
 800b020:	4b07      	ldr	r3, [pc, #28]	; (800b040 <__assert_func+0x30>)
 800b022:	2c00      	cmp	r4, #0
 800b024:	d101      	bne.n	800b02a <__assert_func+0x1a>
 800b026:	4b07      	ldr	r3, [pc, #28]	; (800b044 <__assert_func+0x34>)
 800b028:	001c      	movs	r4, r3
 800b02a:	9301      	str	r3, [sp, #4]
 800b02c:	9100      	str	r1, [sp, #0]
 800b02e:	002b      	movs	r3, r5
 800b030:	4905      	ldr	r1, [pc, #20]	; (800b048 <__assert_func+0x38>)
 800b032:	9402      	str	r4, [sp, #8]
 800b034:	f000 f80a 	bl	800b04c <fiprintf>
 800b038:	f000 fa9a 	bl	800b570 <abort>
 800b03c:	20000030 	.word	0x20000030
 800b040:	0800c2ad 	.word	0x0800c2ad
 800b044:	0800c2e8 	.word	0x0800c2e8
 800b048:	0800c2ba 	.word	0x0800c2ba

0800b04c <fiprintf>:
 800b04c:	b40e      	push	{r1, r2, r3}
 800b04e:	b503      	push	{r0, r1, lr}
 800b050:	0001      	movs	r1, r0
 800b052:	ab03      	add	r3, sp, #12
 800b054:	4804      	ldr	r0, [pc, #16]	; (800b068 <fiprintf+0x1c>)
 800b056:	cb04      	ldmia	r3!, {r2}
 800b058:	6800      	ldr	r0, [r0, #0]
 800b05a:	9301      	str	r3, [sp, #4]
 800b05c:	f000 f880 	bl	800b160 <_vfiprintf_r>
 800b060:	b002      	add	sp, #8
 800b062:	bc08      	pop	{r3}
 800b064:	b003      	add	sp, #12
 800b066:	4718      	bx	r3
 800b068:	20000030 	.word	0x20000030

0800b06c <memmove>:
 800b06c:	b510      	push	{r4, lr}
 800b06e:	4288      	cmp	r0, r1
 800b070:	d902      	bls.n	800b078 <memmove+0xc>
 800b072:	188b      	adds	r3, r1, r2
 800b074:	4298      	cmp	r0, r3
 800b076:	d303      	bcc.n	800b080 <memmove+0x14>
 800b078:	2300      	movs	r3, #0
 800b07a:	e007      	b.n	800b08c <memmove+0x20>
 800b07c:	5c8b      	ldrb	r3, [r1, r2]
 800b07e:	5483      	strb	r3, [r0, r2]
 800b080:	3a01      	subs	r2, #1
 800b082:	d2fb      	bcs.n	800b07c <memmove+0x10>
 800b084:	bd10      	pop	{r4, pc}
 800b086:	5ccc      	ldrb	r4, [r1, r3]
 800b088:	54c4      	strb	r4, [r0, r3]
 800b08a:	3301      	adds	r3, #1
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d1fa      	bne.n	800b086 <memmove+0x1a>
 800b090:	e7f8      	b.n	800b084 <memmove+0x18>
	...

0800b094 <__malloc_lock>:
 800b094:	b510      	push	{r4, lr}
 800b096:	4802      	ldr	r0, [pc, #8]	; (800b0a0 <__malloc_lock+0xc>)
 800b098:	f000 fc41 	bl	800b91e <__retarget_lock_acquire_recursive>
 800b09c:	bd10      	pop	{r4, pc}
 800b09e:	46c0      	nop			; (mov r8, r8)
 800b0a0:	20000474 	.word	0x20000474

0800b0a4 <__malloc_unlock>:
 800b0a4:	b510      	push	{r4, lr}
 800b0a6:	4802      	ldr	r0, [pc, #8]	; (800b0b0 <__malloc_unlock+0xc>)
 800b0a8:	f000 fc3a 	bl	800b920 <__retarget_lock_release_recursive>
 800b0ac:	bd10      	pop	{r4, pc}
 800b0ae:	46c0      	nop			; (mov r8, r8)
 800b0b0:	20000474 	.word	0x20000474

0800b0b4 <_realloc_r>:
 800b0b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0b6:	0007      	movs	r7, r0
 800b0b8:	000e      	movs	r6, r1
 800b0ba:	0014      	movs	r4, r2
 800b0bc:	2900      	cmp	r1, #0
 800b0be:	d105      	bne.n	800b0cc <_realloc_r+0x18>
 800b0c0:	0011      	movs	r1, r2
 800b0c2:	f7ff fd95 	bl	800abf0 <_malloc_r>
 800b0c6:	0005      	movs	r5, r0
 800b0c8:	0028      	movs	r0, r5
 800b0ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b0cc:	2a00      	cmp	r2, #0
 800b0ce:	d103      	bne.n	800b0d8 <_realloc_r+0x24>
 800b0d0:	f7ff fd22 	bl	800ab18 <_free_r>
 800b0d4:	0025      	movs	r5, r4
 800b0d6:	e7f7      	b.n	800b0c8 <_realloc_r+0x14>
 800b0d8:	f000 fc90 	bl	800b9fc <_malloc_usable_size_r>
 800b0dc:	9001      	str	r0, [sp, #4]
 800b0de:	4284      	cmp	r4, r0
 800b0e0:	d803      	bhi.n	800b0ea <_realloc_r+0x36>
 800b0e2:	0035      	movs	r5, r6
 800b0e4:	0843      	lsrs	r3, r0, #1
 800b0e6:	42a3      	cmp	r3, r4
 800b0e8:	d3ee      	bcc.n	800b0c8 <_realloc_r+0x14>
 800b0ea:	0021      	movs	r1, r4
 800b0ec:	0038      	movs	r0, r7
 800b0ee:	f7ff fd7f 	bl	800abf0 <_malloc_r>
 800b0f2:	1e05      	subs	r5, r0, #0
 800b0f4:	d0e8      	beq.n	800b0c8 <_realloc_r+0x14>
 800b0f6:	9b01      	ldr	r3, [sp, #4]
 800b0f8:	0022      	movs	r2, r4
 800b0fa:	429c      	cmp	r4, r3
 800b0fc:	d900      	bls.n	800b100 <_realloc_r+0x4c>
 800b0fe:	001a      	movs	r2, r3
 800b100:	0031      	movs	r1, r6
 800b102:	0028      	movs	r0, r5
 800b104:	f7ff f809 	bl	800a11a <memcpy>
 800b108:	0031      	movs	r1, r6
 800b10a:	0038      	movs	r0, r7
 800b10c:	f7ff fd04 	bl	800ab18 <_free_r>
 800b110:	e7da      	b.n	800b0c8 <_realloc_r+0x14>

0800b112 <__sfputc_r>:
 800b112:	6893      	ldr	r3, [r2, #8]
 800b114:	b510      	push	{r4, lr}
 800b116:	3b01      	subs	r3, #1
 800b118:	6093      	str	r3, [r2, #8]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	da04      	bge.n	800b128 <__sfputc_r+0x16>
 800b11e:	6994      	ldr	r4, [r2, #24]
 800b120:	42a3      	cmp	r3, r4
 800b122:	db07      	blt.n	800b134 <__sfputc_r+0x22>
 800b124:	290a      	cmp	r1, #10
 800b126:	d005      	beq.n	800b134 <__sfputc_r+0x22>
 800b128:	6813      	ldr	r3, [r2, #0]
 800b12a:	1c58      	adds	r0, r3, #1
 800b12c:	6010      	str	r0, [r2, #0]
 800b12e:	7019      	strb	r1, [r3, #0]
 800b130:	0008      	movs	r0, r1
 800b132:	bd10      	pop	{r4, pc}
 800b134:	f000 f94e 	bl	800b3d4 <__swbuf_r>
 800b138:	0001      	movs	r1, r0
 800b13a:	e7f9      	b.n	800b130 <__sfputc_r+0x1e>

0800b13c <__sfputs_r>:
 800b13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13e:	0006      	movs	r6, r0
 800b140:	000f      	movs	r7, r1
 800b142:	0014      	movs	r4, r2
 800b144:	18d5      	adds	r5, r2, r3
 800b146:	42ac      	cmp	r4, r5
 800b148:	d101      	bne.n	800b14e <__sfputs_r+0x12>
 800b14a:	2000      	movs	r0, #0
 800b14c:	e007      	b.n	800b15e <__sfputs_r+0x22>
 800b14e:	7821      	ldrb	r1, [r4, #0]
 800b150:	003a      	movs	r2, r7
 800b152:	0030      	movs	r0, r6
 800b154:	f7ff ffdd 	bl	800b112 <__sfputc_r>
 800b158:	3401      	adds	r4, #1
 800b15a:	1c43      	adds	r3, r0, #1
 800b15c:	d1f3      	bne.n	800b146 <__sfputs_r+0xa>
 800b15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b160 <_vfiprintf_r>:
 800b160:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b162:	b0a1      	sub	sp, #132	; 0x84
 800b164:	0006      	movs	r6, r0
 800b166:	000c      	movs	r4, r1
 800b168:	001f      	movs	r7, r3
 800b16a:	9203      	str	r2, [sp, #12]
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d004      	beq.n	800b17a <_vfiprintf_r+0x1a>
 800b170:	6983      	ldr	r3, [r0, #24]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d101      	bne.n	800b17a <_vfiprintf_r+0x1a>
 800b176:	f000 fb31 	bl	800b7dc <__sinit>
 800b17a:	4b8e      	ldr	r3, [pc, #568]	; (800b3b4 <_vfiprintf_r+0x254>)
 800b17c:	429c      	cmp	r4, r3
 800b17e:	d11c      	bne.n	800b1ba <_vfiprintf_r+0x5a>
 800b180:	6874      	ldr	r4, [r6, #4]
 800b182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b184:	07db      	lsls	r3, r3, #31
 800b186:	d405      	bmi.n	800b194 <_vfiprintf_r+0x34>
 800b188:	89a3      	ldrh	r3, [r4, #12]
 800b18a:	059b      	lsls	r3, r3, #22
 800b18c:	d402      	bmi.n	800b194 <_vfiprintf_r+0x34>
 800b18e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b190:	f000 fbc5 	bl	800b91e <__retarget_lock_acquire_recursive>
 800b194:	89a3      	ldrh	r3, [r4, #12]
 800b196:	071b      	lsls	r3, r3, #28
 800b198:	d502      	bpl.n	800b1a0 <_vfiprintf_r+0x40>
 800b19a:	6923      	ldr	r3, [r4, #16]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d11d      	bne.n	800b1dc <_vfiprintf_r+0x7c>
 800b1a0:	0021      	movs	r1, r4
 800b1a2:	0030      	movs	r0, r6
 800b1a4:	f000 f96c 	bl	800b480 <__swsetup_r>
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	d017      	beq.n	800b1dc <_vfiprintf_r+0x7c>
 800b1ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1ae:	07db      	lsls	r3, r3, #31
 800b1b0:	d50d      	bpl.n	800b1ce <_vfiprintf_r+0x6e>
 800b1b2:	2001      	movs	r0, #1
 800b1b4:	4240      	negs	r0, r0
 800b1b6:	b021      	add	sp, #132	; 0x84
 800b1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1ba:	4b7f      	ldr	r3, [pc, #508]	; (800b3b8 <_vfiprintf_r+0x258>)
 800b1bc:	429c      	cmp	r4, r3
 800b1be:	d101      	bne.n	800b1c4 <_vfiprintf_r+0x64>
 800b1c0:	68b4      	ldr	r4, [r6, #8]
 800b1c2:	e7de      	b.n	800b182 <_vfiprintf_r+0x22>
 800b1c4:	4b7d      	ldr	r3, [pc, #500]	; (800b3bc <_vfiprintf_r+0x25c>)
 800b1c6:	429c      	cmp	r4, r3
 800b1c8:	d1db      	bne.n	800b182 <_vfiprintf_r+0x22>
 800b1ca:	68f4      	ldr	r4, [r6, #12]
 800b1cc:	e7d9      	b.n	800b182 <_vfiprintf_r+0x22>
 800b1ce:	89a3      	ldrh	r3, [r4, #12]
 800b1d0:	059b      	lsls	r3, r3, #22
 800b1d2:	d4ee      	bmi.n	800b1b2 <_vfiprintf_r+0x52>
 800b1d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1d6:	f000 fba3 	bl	800b920 <__retarget_lock_release_recursive>
 800b1da:	e7ea      	b.n	800b1b2 <_vfiprintf_r+0x52>
 800b1dc:	2300      	movs	r3, #0
 800b1de:	ad08      	add	r5, sp, #32
 800b1e0:	616b      	str	r3, [r5, #20]
 800b1e2:	3320      	adds	r3, #32
 800b1e4:	766b      	strb	r3, [r5, #25]
 800b1e6:	3310      	adds	r3, #16
 800b1e8:	76ab      	strb	r3, [r5, #26]
 800b1ea:	9707      	str	r7, [sp, #28]
 800b1ec:	9f03      	ldr	r7, [sp, #12]
 800b1ee:	783b      	ldrb	r3, [r7, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d001      	beq.n	800b1f8 <_vfiprintf_r+0x98>
 800b1f4:	2b25      	cmp	r3, #37	; 0x25
 800b1f6:	d14e      	bne.n	800b296 <_vfiprintf_r+0x136>
 800b1f8:	9b03      	ldr	r3, [sp, #12]
 800b1fa:	1afb      	subs	r3, r7, r3
 800b1fc:	9305      	str	r3, [sp, #20]
 800b1fe:	9b03      	ldr	r3, [sp, #12]
 800b200:	429f      	cmp	r7, r3
 800b202:	d00d      	beq.n	800b220 <_vfiprintf_r+0xc0>
 800b204:	9b05      	ldr	r3, [sp, #20]
 800b206:	0021      	movs	r1, r4
 800b208:	0030      	movs	r0, r6
 800b20a:	9a03      	ldr	r2, [sp, #12]
 800b20c:	f7ff ff96 	bl	800b13c <__sfputs_r>
 800b210:	1c43      	adds	r3, r0, #1
 800b212:	d100      	bne.n	800b216 <_vfiprintf_r+0xb6>
 800b214:	e0b5      	b.n	800b382 <_vfiprintf_r+0x222>
 800b216:	696a      	ldr	r2, [r5, #20]
 800b218:	9b05      	ldr	r3, [sp, #20]
 800b21a:	4694      	mov	ip, r2
 800b21c:	4463      	add	r3, ip
 800b21e:	616b      	str	r3, [r5, #20]
 800b220:	783b      	ldrb	r3, [r7, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d100      	bne.n	800b228 <_vfiprintf_r+0xc8>
 800b226:	e0ac      	b.n	800b382 <_vfiprintf_r+0x222>
 800b228:	2201      	movs	r2, #1
 800b22a:	1c7b      	adds	r3, r7, #1
 800b22c:	9303      	str	r3, [sp, #12]
 800b22e:	2300      	movs	r3, #0
 800b230:	4252      	negs	r2, r2
 800b232:	606a      	str	r2, [r5, #4]
 800b234:	a904      	add	r1, sp, #16
 800b236:	3254      	adds	r2, #84	; 0x54
 800b238:	1852      	adds	r2, r2, r1
 800b23a:	602b      	str	r3, [r5, #0]
 800b23c:	60eb      	str	r3, [r5, #12]
 800b23e:	60ab      	str	r3, [r5, #8]
 800b240:	7013      	strb	r3, [r2, #0]
 800b242:	65ab      	str	r3, [r5, #88]	; 0x58
 800b244:	9b03      	ldr	r3, [sp, #12]
 800b246:	2205      	movs	r2, #5
 800b248:	7819      	ldrb	r1, [r3, #0]
 800b24a:	485d      	ldr	r0, [pc, #372]	; (800b3c0 <_vfiprintf_r+0x260>)
 800b24c:	f7fe ff5a 	bl	800a104 <memchr>
 800b250:	9b03      	ldr	r3, [sp, #12]
 800b252:	1c5f      	adds	r7, r3, #1
 800b254:	2800      	cmp	r0, #0
 800b256:	d120      	bne.n	800b29a <_vfiprintf_r+0x13a>
 800b258:	682a      	ldr	r2, [r5, #0]
 800b25a:	06d3      	lsls	r3, r2, #27
 800b25c:	d504      	bpl.n	800b268 <_vfiprintf_r+0x108>
 800b25e:	2353      	movs	r3, #83	; 0x53
 800b260:	a904      	add	r1, sp, #16
 800b262:	185b      	adds	r3, r3, r1
 800b264:	2120      	movs	r1, #32
 800b266:	7019      	strb	r1, [r3, #0]
 800b268:	0713      	lsls	r3, r2, #28
 800b26a:	d504      	bpl.n	800b276 <_vfiprintf_r+0x116>
 800b26c:	2353      	movs	r3, #83	; 0x53
 800b26e:	a904      	add	r1, sp, #16
 800b270:	185b      	adds	r3, r3, r1
 800b272:	212b      	movs	r1, #43	; 0x2b
 800b274:	7019      	strb	r1, [r3, #0]
 800b276:	9b03      	ldr	r3, [sp, #12]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	2b2a      	cmp	r3, #42	; 0x2a
 800b27c:	d016      	beq.n	800b2ac <_vfiprintf_r+0x14c>
 800b27e:	2100      	movs	r1, #0
 800b280:	68eb      	ldr	r3, [r5, #12]
 800b282:	9f03      	ldr	r7, [sp, #12]
 800b284:	783a      	ldrb	r2, [r7, #0]
 800b286:	1c78      	adds	r0, r7, #1
 800b288:	3a30      	subs	r2, #48	; 0x30
 800b28a:	4684      	mov	ip, r0
 800b28c:	2a09      	cmp	r2, #9
 800b28e:	d94f      	bls.n	800b330 <_vfiprintf_r+0x1d0>
 800b290:	2900      	cmp	r1, #0
 800b292:	d111      	bne.n	800b2b8 <_vfiprintf_r+0x158>
 800b294:	e017      	b.n	800b2c6 <_vfiprintf_r+0x166>
 800b296:	3701      	adds	r7, #1
 800b298:	e7a9      	b.n	800b1ee <_vfiprintf_r+0x8e>
 800b29a:	4b49      	ldr	r3, [pc, #292]	; (800b3c0 <_vfiprintf_r+0x260>)
 800b29c:	682a      	ldr	r2, [r5, #0]
 800b29e:	1ac0      	subs	r0, r0, r3
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	4083      	lsls	r3, r0
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	602b      	str	r3, [r5, #0]
 800b2a8:	9703      	str	r7, [sp, #12]
 800b2aa:	e7cb      	b.n	800b244 <_vfiprintf_r+0xe4>
 800b2ac:	9b07      	ldr	r3, [sp, #28]
 800b2ae:	1d19      	adds	r1, r3, #4
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	9107      	str	r1, [sp, #28]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	db01      	blt.n	800b2bc <_vfiprintf_r+0x15c>
 800b2b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2ba:	e004      	b.n	800b2c6 <_vfiprintf_r+0x166>
 800b2bc:	425b      	negs	r3, r3
 800b2be:	60eb      	str	r3, [r5, #12]
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	602b      	str	r3, [r5, #0]
 800b2c6:	783b      	ldrb	r3, [r7, #0]
 800b2c8:	2b2e      	cmp	r3, #46	; 0x2e
 800b2ca:	d10a      	bne.n	800b2e2 <_vfiprintf_r+0x182>
 800b2cc:	787b      	ldrb	r3, [r7, #1]
 800b2ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b2d0:	d137      	bne.n	800b342 <_vfiprintf_r+0x1e2>
 800b2d2:	9b07      	ldr	r3, [sp, #28]
 800b2d4:	3702      	adds	r7, #2
 800b2d6:	1d1a      	adds	r2, r3, #4
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	9207      	str	r2, [sp, #28]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	db2d      	blt.n	800b33c <_vfiprintf_r+0x1dc>
 800b2e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e2:	2203      	movs	r2, #3
 800b2e4:	7839      	ldrb	r1, [r7, #0]
 800b2e6:	4837      	ldr	r0, [pc, #220]	; (800b3c4 <_vfiprintf_r+0x264>)
 800b2e8:	f7fe ff0c 	bl	800a104 <memchr>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d007      	beq.n	800b300 <_vfiprintf_r+0x1a0>
 800b2f0:	4b34      	ldr	r3, [pc, #208]	; (800b3c4 <_vfiprintf_r+0x264>)
 800b2f2:	682a      	ldr	r2, [r5, #0]
 800b2f4:	1ac0      	subs	r0, r0, r3
 800b2f6:	2340      	movs	r3, #64	; 0x40
 800b2f8:	4083      	lsls	r3, r0
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	3701      	adds	r7, #1
 800b2fe:	602b      	str	r3, [r5, #0]
 800b300:	7839      	ldrb	r1, [r7, #0]
 800b302:	1c7b      	adds	r3, r7, #1
 800b304:	2206      	movs	r2, #6
 800b306:	4830      	ldr	r0, [pc, #192]	; (800b3c8 <_vfiprintf_r+0x268>)
 800b308:	9303      	str	r3, [sp, #12]
 800b30a:	7629      	strb	r1, [r5, #24]
 800b30c:	f7fe fefa 	bl	800a104 <memchr>
 800b310:	2800      	cmp	r0, #0
 800b312:	d045      	beq.n	800b3a0 <_vfiprintf_r+0x240>
 800b314:	4b2d      	ldr	r3, [pc, #180]	; (800b3cc <_vfiprintf_r+0x26c>)
 800b316:	2b00      	cmp	r3, #0
 800b318:	d127      	bne.n	800b36a <_vfiprintf_r+0x20a>
 800b31a:	2207      	movs	r2, #7
 800b31c:	9b07      	ldr	r3, [sp, #28]
 800b31e:	3307      	adds	r3, #7
 800b320:	4393      	bics	r3, r2
 800b322:	3308      	adds	r3, #8
 800b324:	9307      	str	r3, [sp, #28]
 800b326:	696b      	ldr	r3, [r5, #20]
 800b328:	9a04      	ldr	r2, [sp, #16]
 800b32a:	189b      	adds	r3, r3, r2
 800b32c:	616b      	str	r3, [r5, #20]
 800b32e:	e75d      	b.n	800b1ec <_vfiprintf_r+0x8c>
 800b330:	210a      	movs	r1, #10
 800b332:	434b      	muls	r3, r1
 800b334:	4667      	mov	r7, ip
 800b336:	189b      	adds	r3, r3, r2
 800b338:	3909      	subs	r1, #9
 800b33a:	e7a3      	b.n	800b284 <_vfiprintf_r+0x124>
 800b33c:	2301      	movs	r3, #1
 800b33e:	425b      	negs	r3, r3
 800b340:	e7ce      	b.n	800b2e0 <_vfiprintf_r+0x180>
 800b342:	2300      	movs	r3, #0
 800b344:	001a      	movs	r2, r3
 800b346:	3701      	adds	r7, #1
 800b348:	606b      	str	r3, [r5, #4]
 800b34a:	7839      	ldrb	r1, [r7, #0]
 800b34c:	1c78      	adds	r0, r7, #1
 800b34e:	3930      	subs	r1, #48	; 0x30
 800b350:	4684      	mov	ip, r0
 800b352:	2909      	cmp	r1, #9
 800b354:	d903      	bls.n	800b35e <_vfiprintf_r+0x1fe>
 800b356:	2b00      	cmp	r3, #0
 800b358:	d0c3      	beq.n	800b2e2 <_vfiprintf_r+0x182>
 800b35a:	9209      	str	r2, [sp, #36]	; 0x24
 800b35c:	e7c1      	b.n	800b2e2 <_vfiprintf_r+0x182>
 800b35e:	230a      	movs	r3, #10
 800b360:	435a      	muls	r2, r3
 800b362:	4667      	mov	r7, ip
 800b364:	1852      	adds	r2, r2, r1
 800b366:	3b09      	subs	r3, #9
 800b368:	e7ef      	b.n	800b34a <_vfiprintf_r+0x1ea>
 800b36a:	ab07      	add	r3, sp, #28
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	0022      	movs	r2, r4
 800b370:	0029      	movs	r1, r5
 800b372:	0030      	movs	r0, r6
 800b374:	4b16      	ldr	r3, [pc, #88]	; (800b3d0 <_vfiprintf_r+0x270>)
 800b376:	f7fb ffd5 	bl	8007324 <_printf_float>
 800b37a:	9004      	str	r0, [sp, #16]
 800b37c:	9b04      	ldr	r3, [sp, #16]
 800b37e:	3301      	adds	r3, #1
 800b380:	d1d1      	bne.n	800b326 <_vfiprintf_r+0x1c6>
 800b382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b384:	07db      	lsls	r3, r3, #31
 800b386:	d405      	bmi.n	800b394 <_vfiprintf_r+0x234>
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	059b      	lsls	r3, r3, #22
 800b38c:	d402      	bmi.n	800b394 <_vfiprintf_r+0x234>
 800b38e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b390:	f000 fac6 	bl	800b920 <__retarget_lock_release_recursive>
 800b394:	89a3      	ldrh	r3, [r4, #12]
 800b396:	065b      	lsls	r3, r3, #25
 800b398:	d500      	bpl.n	800b39c <_vfiprintf_r+0x23c>
 800b39a:	e70a      	b.n	800b1b2 <_vfiprintf_r+0x52>
 800b39c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b39e:	e70a      	b.n	800b1b6 <_vfiprintf_r+0x56>
 800b3a0:	ab07      	add	r3, sp, #28
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	0022      	movs	r2, r4
 800b3a6:	0029      	movs	r1, r5
 800b3a8:	0030      	movs	r0, r6
 800b3aa:	4b09      	ldr	r3, [pc, #36]	; (800b3d0 <_vfiprintf_r+0x270>)
 800b3ac:	f7fc fa6c 	bl	8007888 <_printf_i>
 800b3b0:	e7e3      	b.n	800b37a <_vfiprintf_r+0x21a>
 800b3b2:	46c0      	nop			; (mov r8, r8)
 800b3b4:	0800c30c 	.word	0x0800c30c
 800b3b8:	0800c32c 	.word	0x0800c32c
 800b3bc:	0800c2ec 	.word	0x0800c2ec
 800b3c0:	0800c29c 	.word	0x0800c29c
 800b3c4:	0800c2a2 	.word	0x0800c2a2
 800b3c8:	0800c2a6 	.word	0x0800c2a6
 800b3cc:	08007325 	.word	0x08007325
 800b3d0:	0800b13d 	.word	0x0800b13d

0800b3d4 <__swbuf_r>:
 800b3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d6:	0005      	movs	r5, r0
 800b3d8:	000e      	movs	r6, r1
 800b3da:	0014      	movs	r4, r2
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d004      	beq.n	800b3ea <__swbuf_r+0x16>
 800b3e0:	6983      	ldr	r3, [r0, #24]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d101      	bne.n	800b3ea <__swbuf_r+0x16>
 800b3e6:	f000 f9f9 	bl	800b7dc <__sinit>
 800b3ea:	4b22      	ldr	r3, [pc, #136]	; (800b474 <__swbuf_r+0xa0>)
 800b3ec:	429c      	cmp	r4, r3
 800b3ee:	d12e      	bne.n	800b44e <__swbuf_r+0x7a>
 800b3f0:	686c      	ldr	r4, [r5, #4]
 800b3f2:	69a3      	ldr	r3, [r4, #24]
 800b3f4:	60a3      	str	r3, [r4, #8]
 800b3f6:	89a3      	ldrh	r3, [r4, #12]
 800b3f8:	071b      	lsls	r3, r3, #28
 800b3fa:	d532      	bpl.n	800b462 <__swbuf_r+0x8e>
 800b3fc:	6923      	ldr	r3, [r4, #16]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d02f      	beq.n	800b462 <__swbuf_r+0x8e>
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	6922      	ldr	r2, [r4, #16]
 800b406:	b2f7      	uxtb	r7, r6
 800b408:	1a98      	subs	r0, r3, r2
 800b40a:	6963      	ldr	r3, [r4, #20]
 800b40c:	b2f6      	uxtb	r6, r6
 800b40e:	4283      	cmp	r3, r0
 800b410:	dc05      	bgt.n	800b41e <__swbuf_r+0x4a>
 800b412:	0021      	movs	r1, r4
 800b414:	0028      	movs	r0, r5
 800b416:	f000 f93f 	bl	800b698 <_fflush_r>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	d127      	bne.n	800b46e <__swbuf_r+0x9a>
 800b41e:	68a3      	ldr	r3, [r4, #8]
 800b420:	3001      	adds	r0, #1
 800b422:	3b01      	subs	r3, #1
 800b424:	60a3      	str	r3, [r4, #8]
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	1c5a      	adds	r2, r3, #1
 800b42a:	6022      	str	r2, [r4, #0]
 800b42c:	701f      	strb	r7, [r3, #0]
 800b42e:	6963      	ldr	r3, [r4, #20]
 800b430:	4283      	cmp	r3, r0
 800b432:	d004      	beq.n	800b43e <__swbuf_r+0x6a>
 800b434:	89a3      	ldrh	r3, [r4, #12]
 800b436:	07db      	lsls	r3, r3, #31
 800b438:	d507      	bpl.n	800b44a <__swbuf_r+0x76>
 800b43a:	2e0a      	cmp	r6, #10
 800b43c:	d105      	bne.n	800b44a <__swbuf_r+0x76>
 800b43e:	0021      	movs	r1, r4
 800b440:	0028      	movs	r0, r5
 800b442:	f000 f929 	bl	800b698 <_fflush_r>
 800b446:	2800      	cmp	r0, #0
 800b448:	d111      	bne.n	800b46e <__swbuf_r+0x9a>
 800b44a:	0030      	movs	r0, r6
 800b44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b44e:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <__swbuf_r+0xa4>)
 800b450:	429c      	cmp	r4, r3
 800b452:	d101      	bne.n	800b458 <__swbuf_r+0x84>
 800b454:	68ac      	ldr	r4, [r5, #8]
 800b456:	e7cc      	b.n	800b3f2 <__swbuf_r+0x1e>
 800b458:	4b08      	ldr	r3, [pc, #32]	; (800b47c <__swbuf_r+0xa8>)
 800b45a:	429c      	cmp	r4, r3
 800b45c:	d1c9      	bne.n	800b3f2 <__swbuf_r+0x1e>
 800b45e:	68ec      	ldr	r4, [r5, #12]
 800b460:	e7c7      	b.n	800b3f2 <__swbuf_r+0x1e>
 800b462:	0021      	movs	r1, r4
 800b464:	0028      	movs	r0, r5
 800b466:	f000 f80b 	bl	800b480 <__swsetup_r>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d0c9      	beq.n	800b402 <__swbuf_r+0x2e>
 800b46e:	2601      	movs	r6, #1
 800b470:	4276      	negs	r6, r6
 800b472:	e7ea      	b.n	800b44a <__swbuf_r+0x76>
 800b474:	0800c30c 	.word	0x0800c30c
 800b478:	0800c32c 	.word	0x0800c32c
 800b47c:	0800c2ec 	.word	0x0800c2ec

0800b480 <__swsetup_r>:
 800b480:	4b37      	ldr	r3, [pc, #220]	; (800b560 <__swsetup_r+0xe0>)
 800b482:	b570      	push	{r4, r5, r6, lr}
 800b484:	681d      	ldr	r5, [r3, #0]
 800b486:	0006      	movs	r6, r0
 800b488:	000c      	movs	r4, r1
 800b48a:	2d00      	cmp	r5, #0
 800b48c:	d005      	beq.n	800b49a <__swsetup_r+0x1a>
 800b48e:	69ab      	ldr	r3, [r5, #24]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d102      	bne.n	800b49a <__swsetup_r+0x1a>
 800b494:	0028      	movs	r0, r5
 800b496:	f000 f9a1 	bl	800b7dc <__sinit>
 800b49a:	4b32      	ldr	r3, [pc, #200]	; (800b564 <__swsetup_r+0xe4>)
 800b49c:	429c      	cmp	r4, r3
 800b49e:	d10f      	bne.n	800b4c0 <__swsetup_r+0x40>
 800b4a0:	686c      	ldr	r4, [r5, #4]
 800b4a2:	230c      	movs	r3, #12
 800b4a4:	5ee2      	ldrsh	r2, [r4, r3]
 800b4a6:	b293      	uxth	r3, r2
 800b4a8:	0711      	lsls	r1, r2, #28
 800b4aa:	d42d      	bmi.n	800b508 <__swsetup_r+0x88>
 800b4ac:	06d9      	lsls	r1, r3, #27
 800b4ae:	d411      	bmi.n	800b4d4 <__swsetup_r+0x54>
 800b4b0:	2309      	movs	r3, #9
 800b4b2:	2001      	movs	r0, #1
 800b4b4:	6033      	str	r3, [r6, #0]
 800b4b6:	3337      	adds	r3, #55	; 0x37
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	81a3      	strh	r3, [r4, #12]
 800b4bc:	4240      	negs	r0, r0
 800b4be:	bd70      	pop	{r4, r5, r6, pc}
 800b4c0:	4b29      	ldr	r3, [pc, #164]	; (800b568 <__swsetup_r+0xe8>)
 800b4c2:	429c      	cmp	r4, r3
 800b4c4:	d101      	bne.n	800b4ca <__swsetup_r+0x4a>
 800b4c6:	68ac      	ldr	r4, [r5, #8]
 800b4c8:	e7eb      	b.n	800b4a2 <__swsetup_r+0x22>
 800b4ca:	4b28      	ldr	r3, [pc, #160]	; (800b56c <__swsetup_r+0xec>)
 800b4cc:	429c      	cmp	r4, r3
 800b4ce:	d1e8      	bne.n	800b4a2 <__swsetup_r+0x22>
 800b4d0:	68ec      	ldr	r4, [r5, #12]
 800b4d2:	e7e6      	b.n	800b4a2 <__swsetup_r+0x22>
 800b4d4:	075b      	lsls	r3, r3, #29
 800b4d6:	d513      	bpl.n	800b500 <__swsetup_r+0x80>
 800b4d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4da:	2900      	cmp	r1, #0
 800b4dc:	d008      	beq.n	800b4f0 <__swsetup_r+0x70>
 800b4de:	0023      	movs	r3, r4
 800b4e0:	3344      	adds	r3, #68	; 0x44
 800b4e2:	4299      	cmp	r1, r3
 800b4e4:	d002      	beq.n	800b4ec <__swsetup_r+0x6c>
 800b4e6:	0030      	movs	r0, r6
 800b4e8:	f7ff fb16 	bl	800ab18 <_free_r>
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	6363      	str	r3, [r4, #52]	; 0x34
 800b4f0:	2224      	movs	r2, #36	; 0x24
 800b4f2:	89a3      	ldrh	r3, [r4, #12]
 800b4f4:	4393      	bics	r3, r2
 800b4f6:	81a3      	strh	r3, [r4, #12]
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	6063      	str	r3, [r4, #4]
 800b4fc:	6923      	ldr	r3, [r4, #16]
 800b4fe:	6023      	str	r3, [r4, #0]
 800b500:	2308      	movs	r3, #8
 800b502:	89a2      	ldrh	r2, [r4, #12]
 800b504:	4313      	orrs	r3, r2
 800b506:	81a3      	strh	r3, [r4, #12]
 800b508:	6923      	ldr	r3, [r4, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10b      	bne.n	800b526 <__swsetup_r+0xa6>
 800b50e:	21a0      	movs	r1, #160	; 0xa0
 800b510:	2280      	movs	r2, #128	; 0x80
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	0089      	lsls	r1, r1, #2
 800b516:	0092      	lsls	r2, r2, #2
 800b518:	400b      	ands	r3, r1
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d003      	beq.n	800b526 <__swsetup_r+0xa6>
 800b51e:	0021      	movs	r1, r4
 800b520:	0030      	movs	r0, r6
 800b522:	f000 fa27 	bl	800b974 <__smakebuf_r>
 800b526:	220c      	movs	r2, #12
 800b528:	5ea3      	ldrsh	r3, [r4, r2]
 800b52a:	2001      	movs	r0, #1
 800b52c:	001a      	movs	r2, r3
 800b52e:	b299      	uxth	r1, r3
 800b530:	4002      	ands	r2, r0
 800b532:	4203      	tst	r3, r0
 800b534:	d00f      	beq.n	800b556 <__swsetup_r+0xd6>
 800b536:	2200      	movs	r2, #0
 800b538:	60a2      	str	r2, [r4, #8]
 800b53a:	6962      	ldr	r2, [r4, #20]
 800b53c:	4252      	negs	r2, r2
 800b53e:	61a2      	str	r2, [r4, #24]
 800b540:	2000      	movs	r0, #0
 800b542:	6922      	ldr	r2, [r4, #16]
 800b544:	4282      	cmp	r2, r0
 800b546:	d1ba      	bne.n	800b4be <__swsetup_r+0x3e>
 800b548:	060a      	lsls	r2, r1, #24
 800b54a:	d5b8      	bpl.n	800b4be <__swsetup_r+0x3e>
 800b54c:	2240      	movs	r2, #64	; 0x40
 800b54e:	4313      	orrs	r3, r2
 800b550:	81a3      	strh	r3, [r4, #12]
 800b552:	3801      	subs	r0, #1
 800b554:	e7b3      	b.n	800b4be <__swsetup_r+0x3e>
 800b556:	0788      	lsls	r0, r1, #30
 800b558:	d400      	bmi.n	800b55c <__swsetup_r+0xdc>
 800b55a:	6962      	ldr	r2, [r4, #20]
 800b55c:	60a2      	str	r2, [r4, #8]
 800b55e:	e7ef      	b.n	800b540 <__swsetup_r+0xc0>
 800b560:	20000030 	.word	0x20000030
 800b564:	0800c30c 	.word	0x0800c30c
 800b568:	0800c32c 	.word	0x0800c32c
 800b56c:	0800c2ec 	.word	0x0800c2ec

0800b570 <abort>:
 800b570:	2006      	movs	r0, #6
 800b572:	b510      	push	{r4, lr}
 800b574:	f000 fa74 	bl	800ba60 <raise>
 800b578:	2001      	movs	r0, #1
 800b57a:	f7f8 fb97 	bl	8003cac <_exit>
	...

0800b580 <__sflush_r>:
 800b580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b582:	898b      	ldrh	r3, [r1, #12]
 800b584:	0005      	movs	r5, r0
 800b586:	000c      	movs	r4, r1
 800b588:	071a      	lsls	r2, r3, #28
 800b58a:	d45f      	bmi.n	800b64c <__sflush_r+0xcc>
 800b58c:	684a      	ldr	r2, [r1, #4]
 800b58e:	2a00      	cmp	r2, #0
 800b590:	dc04      	bgt.n	800b59c <__sflush_r+0x1c>
 800b592:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b594:	2a00      	cmp	r2, #0
 800b596:	dc01      	bgt.n	800b59c <__sflush_r+0x1c>
 800b598:	2000      	movs	r0, #0
 800b59a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b59c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b59e:	2f00      	cmp	r7, #0
 800b5a0:	d0fa      	beq.n	800b598 <__sflush_r+0x18>
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	2180      	movs	r1, #128	; 0x80
 800b5a6:	682e      	ldr	r6, [r5, #0]
 800b5a8:	602a      	str	r2, [r5, #0]
 800b5aa:	001a      	movs	r2, r3
 800b5ac:	0149      	lsls	r1, r1, #5
 800b5ae:	400a      	ands	r2, r1
 800b5b0:	420b      	tst	r3, r1
 800b5b2:	d034      	beq.n	800b61e <__sflush_r+0x9e>
 800b5b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5b6:	89a3      	ldrh	r3, [r4, #12]
 800b5b8:	075b      	lsls	r3, r3, #29
 800b5ba:	d506      	bpl.n	800b5ca <__sflush_r+0x4a>
 800b5bc:	6863      	ldr	r3, [r4, #4]
 800b5be:	1ac0      	subs	r0, r0, r3
 800b5c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d001      	beq.n	800b5ca <__sflush_r+0x4a>
 800b5c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5c8:	1ac0      	subs	r0, r0, r3
 800b5ca:	0002      	movs	r2, r0
 800b5cc:	6a21      	ldr	r1, [r4, #32]
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	0028      	movs	r0, r5
 800b5d2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b5d4:	47b8      	blx	r7
 800b5d6:	89a1      	ldrh	r1, [r4, #12]
 800b5d8:	1c43      	adds	r3, r0, #1
 800b5da:	d106      	bne.n	800b5ea <__sflush_r+0x6a>
 800b5dc:	682b      	ldr	r3, [r5, #0]
 800b5de:	2b1d      	cmp	r3, #29
 800b5e0:	d831      	bhi.n	800b646 <__sflush_r+0xc6>
 800b5e2:	4a2c      	ldr	r2, [pc, #176]	; (800b694 <__sflush_r+0x114>)
 800b5e4:	40da      	lsrs	r2, r3
 800b5e6:	07d3      	lsls	r3, r2, #31
 800b5e8:	d52d      	bpl.n	800b646 <__sflush_r+0xc6>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	6063      	str	r3, [r4, #4]
 800b5ee:	6923      	ldr	r3, [r4, #16]
 800b5f0:	6023      	str	r3, [r4, #0]
 800b5f2:	04cb      	lsls	r3, r1, #19
 800b5f4:	d505      	bpl.n	800b602 <__sflush_r+0x82>
 800b5f6:	1c43      	adds	r3, r0, #1
 800b5f8:	d102      	bne.n	800b600 <__sflush_r+0x80>
 800b5fa:	682b      	ldr	r3, [r5, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d100      	bne.n	800b602 <__sflush_r+0x82>
 800b600:	6560      	str	r0, [r4, #84]	; 0x54
 800b602:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b604:	602e      	str	r6, [r5, #0]
 800b606:	2900      	cmp	r1, #0
 800b608:	d0c6      	beq.n	800b598 <__sflush_r+0x18>
 800b60a:	0023      	movs	r3, r4
 800b60c:	3344      	adds	r3, #68	; 0x44
 800b60e:	4299      	cmp	r1, r3
 800b610:	d002      	beq.n	800b618 <__sflush_r+0x98>
 800b612:	0028      	movs	r0, r5
 800b614:	f7ff fa80 	bl	800ab18 <_free_r>
 800b618:	2000      	movs	r0, #0
 800b61a:	6360      	str	r0, [r4, #52]	; 0x34
 800b61c:	e7bd      	b.n	800b59a <__sflush_r+0x1a>
 800b61e:	2301      	movs	r3, #1
 800b620:	0028      	movs	r0, r5
 800b622:	6a21      	ldr	r1, [r4, #32]
 800b624:	47b8      	blx	r7
 800b626:	1c43      	adds	r3, r0, #1
 800b628:	d1c5      	bne.n	800b5b6 <__sflush_r+0x36>
 800b62a:	682b      	ldr	r3, [r5, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d0c2      	beq.n	800b5b6 <__sflush_r+0x36>
 800b630:	2b1d      	cmp	r3, #29
 800b632:	d001      	beq.n	800b638 <__sflush_r+0xb8>
 800b634:	2b16      	cmp	r3, #22
 800b636:	d101      	bne.n	800b63c <__sflush_r+0xbc>
 800b638:	602e      	str	r6, [r5, #0]
 800b63a:	e7ad      	b.n	800b598 <__sflush_r+0x18>
 800b63c:	2340      	movs	r3, #64	; 0x40
 800b63e:	89a2      	ldrh	r2, [r4, #12]
 800b640:	4313      	orrs	r3, r2
 800b642:	81a3      	strh	r3, [r4, #12]
 800b644:	e7a9      	b.n	800b59a <__sflush_r+0x1a>
 800b646:	2340      	movs	r3, #64	; 0x40
 800b648:	430b      	orrs	r3, r1
 800b64a:	e7fa      	b.n	800b642 <__sflush_r+0xc2>
 800b64c:	690f      	ldr	r7, [r1, #16]
 800b64e:	2f00      	cmp	r7, #0
 800b650:	d0a2      	beq.n	800b598 <__sflush_r+0x18>
 800b652:	680a      	ldr	r2, [r1, #0]
 800b654:	600f      	str	r7, [r1, #0]
 800b656:	1bd2      	subs	r2, r2, r7
 800b658:	9201      	str	r2, [sp, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	079b      	lsls	r3, r3, #30
 800b65e:	d100      	bne.n	800b662 <__sflush_r+0xe2>
 800b660:	694a      	ldr	r2, [r1, #20]
 800b662:	60a2      	str	r2, [r4, #8]
 800b664:	9b01      	ldr	r3, [sp, #4]
 800b666:	2b00      	cmp	r3, #0
 800b668:	dc00      	bgt.n	800b66c <__sflush_r+0xec>
 800b66a:	e795      	b.n	800b598 <__sflush_r+0x18>
 800b66c:	003a      	movs	r2, r7
 800b66e:	0028      	movs	r0, r5
 800b670:	9b01      	ldr	r3, [sp, #4]
 800b672:	6a21      	ldr	r1, [r4, #32]
 800b674:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b676:	47b0      	blx	r6
 800b678:	2800      	cmp	r0, #0
 800b67a:	dc06      	bgt.n	800b68a <__sflush_r+0x10a>
 800b67c:	2340      	movs	r3, #64	; 0x40
 800b67e:	2001      	movs	r0, #1
 800b680:	89a2      	ldrh	r2, [r4, #12]
 800b682:	4240      	negs	r0, r0
 800b684:	4313      	orrs	r3, r2
 800b686:	81a3      	strh	r3, [r4, #12]
 800b688:	e787      	b.n	800b59a <__sflush_r+0x1a>
 800b68a:	9b01      	ldr	r3, [sp, #4]
 800b68c:	183f      	adds	r7, r7, r0
 800b68e:	1a1b      	subs	r3, r3, r0
 800b690:	9301      	str	r3, [sp, #4]
 800b692:	e7e7      	b.n	800b664 <__sflush_r+0xe4>
 800b694:	20400001 	.word	0x20400001

0800b698 <_fflush_r>:
 800b698:	690b      	ldr	r3, [r1, #16]
 800b69a:	b570      	push	{r4, r5, r6, lr}
 800b69c:	0005      	movs	r5, r0
 800b69e:	000c      	movs	r4, r1
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d102      	bne.n	800b6aa <_fflush_r+0x12>
 800b6a4:	2500      	movs	r5, #0
 800b6a6:	0028      	movs	r0, r5
 800b6a8:	bd70      	pop	{r4, r5, r6, pc}
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	d004      	beq.n	800b6b8 <_fflush_r+0x20>
 800b6ae:	6983      	ldr	r3, [r0, #24]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d101      	bne.n	800b6b8 <_fflush_r+0x20>
 800b6b4:	f000 f892 	bl	800b7dc <__sinit>
 800b6b8:	4b14      	ldr	r3, [pc, #80]	; (800b70c <_fflush_r+0x74>)
 800b6ba:	429c      	cmp	r4, r3
 800b6bc:	d11b      	bne.n	800b6f6 <_fflush_r+0x5e>
 800b6be:	686c      	ldr	r4, [r5, #4]
 800b6c0:	220c      	movs	r2, #12
 800b6c2:	5ea3      	ldrsh	r3, [r4, r2]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d0ed      	beq.n	800b6a4 <_fflush_r+0xc>
 800b6c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6ca:	07d2      	lsls	r2, r2, #31
 800b6cc:	d404      	bmi.n	800b6d8 <_fflush_r+0x40>
 800b6ce:	059b      	lsls	r3, r3, #22
 800b6d0:	d402      	bmi.n	800b6d8 <_fflush_r+0x40>
 800b6d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6d4:	f000 f923 	bl	800b91e <__retarget_lock_acquire_recursive>
 800b6d8:	0028      	movs	r0, r5
 800b6da:	0021      	movs	r1, r4
 800b6dc:	f7ff ff50 	bl	800b580 <__sflush_r>
 800b6e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6e2:	0005      	movs	r5, r0
 800b6e4:	07db      	lsls	r3, r3, #31
 800b6e6:	d4de      	bmi.n	800b6a6 <_fflush_r+0xe>
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	059b      	lsls	r3, r3, #22
 800b6ec:	d4db      	bmi.n	800b6a6 <_fflush_r+0xe>
 800b6ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6f0:	f000 f916 	bl	800b920 <__retarget_lock_release_recursive>
 800b6f4:	e7d7      	b.n	800b6a6 <_fflush_r+0xe>
 800b6f6:	4b06      	ldr	r3, [pc, #24]	; (800b710 <_fflush_r+0x78>)
 800b6f8:	429c      	cmp	r4, r3
 800b6fa:	d101      	bne.n	800b700 <_fflush_r+0x68>
 800b6fc:	68ac      	ldr	r4, [r5, #8]
 800b6fe:	e7df      	b.n	800b6c0 <_fflush_r+0x28>
 800b700:	4b04      	ldr	r3, [pc, #16]	; (800b714 <_fflush_r+0x7c>)
 800b702:	429c      	cmp	r4, r3
 800b704:	d1dc      	bne.n	800b6c0 <_fflush_r+0x28>
 800b706:	68ec      	ldr	r4, [r5, #12]
 800b708:	e7da      	b.n	800b6c0 <_fflush_r+0x28>
 800b70a:	46c0      	nop			; (mov r8, r8)
 800b70c:	0800c30c 	.word	0x0800c30c
 800b710:	0800c32c 	.word	0x0800c32c
 800b714:	0800c2ec 	.word	0x0800c2ec

0800b718 <std>:
 800b718:	2300      	movs	r3, #0
 800b71a:	b510      	push	{r4, lr}
 800b71c:	0004      	movs	r4, r0
 800b71e:	6003      	str	r3, [r0, #0]
 800b720:	6043      	str	r3, [r0, #4]
 800b722:	6083      	str	r3, [r0, #8]
 800b724:	8181      	strh	r1, [r0, #12]
 800b726:	6643      	str	r3, [r0, #100]	; 0x64
 800b728:	0019      	movs	r1, r3
 800b72a:	81c2      	strh	r2, [r0, #14]
 800b72c:	6103      	str	r3, [r0, #16]
 800b72e:	6143      	str	r3, [r0, #20]
 800b730:	6183      	str	r3, [r0, #24]
 800b732:	2208      	movs	r2, #8
 800b734:	305c      	adds	r0, #92	; 0x5c
 800b736:	f7fb fd43 	bl	80071c0 <memset>
 800b73a:	4b05      	ldr	r3, [pc, #20]	; (800b750 <std+0x38>)
 800b73c:	6224      	str	r4, [r4, #32]
 800b73e:	6263      	str	r3, [r4, #36]	; 0x24
 800b740:	4b04      	ldr	r3, [pc, #16]	; (800b754 <std+0x3c>)
 800b742:	62a3      	str	r3, [r4, #40]	; 0x28
 800b744:	4b04      	ldr	r3, [pc, #16]	; (800b758 <std+0x40>)
 800b746:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b748:	4b04      	ldr	r3, [pc, #16]	; (800b75c <std+0x44>)
 800b74a:	6323      	str	r3, [r4, #48]	; 0x30
 800b74c:	bd10      	pop	{r4, pc}
 800b74e:	46c0      	nop			; (mov r8, r8)
 800b750:	0800baa1 	.word	0x0800baa1
 800b754:	0800bac9 	.word	0x0800bac9
 800b758:	0800bb01 	.word	0x0800bb01
 800b75c:	0800bb2d 	.word	0x0800bb2d

0800b760 <_cleanup_r>:
 800b760:	b510      	push	{r4, lr}
 800b762:	4902      	ldr	r1, [pc, #8]	; (800b76c <_cleanup_r+0xc>)
 800b764:	f000 f8ba 	bl	800b8dc <_fwalk_reent>
 800b768:	bd10      	pop	{r4, pc}
 800b76a:	46c0      	nop			; (mov r8, r8)
 800b76c:	0800b699 	.word	0x0800b699

0800b770 <__sfmoreglue>:
 800b770:	b570      	push	{r4, r5, r6, lr}
 800b772:	2568      	movs	r5, #104	; 0x68
 800b774:	1e4a      	subs	r2, r1, #1
 800b776:	4355      	muls	r5, r2
 800b778:	000e      	movs	r6, r1
 800b77a:	0029      	movs	r1, r5
 800b77c:	3174      	adds	r1, #116	; 0x74
 800b77e:	f7ff fa37 	bl	800abf0 <_malloc_r>
 800b782:	1e04      	subs	r4, r0, #0
 800b784:	d008      	beq.n	800b798 <__sfmoreglue+0x28>
 800b786:	2100      	movs	r1, #0
 800b788:	002a      	movs	r2, r5
 800b78a:	6001      	str	r1, [r0, #0]
 800b78c:	6046      	str	r6, [r0, #4]
 800b78e:	300c      	adds	r0, #12
 800b790:	60a0      	str	r0, [r4, #8]
 800b792:	3268      	adds	r2, #104	; 0x68
 800b794:	f7fb fd14 	bl	80071c0 <memset>
 800b798:	0020      	movs	r0, r4
 800b79a:	bd70      	pop	{r4, r5, r6, pc}

0800b79c <__sfp_lock_acquire>:
 800b79c:	b510      	push	{r4, lr}
 800b79e:	4802      	ldr	r0, [pc, #8]	; (800b7a8 <__sfp_lock_acquire+0xc>)
 800b7a0:	f000 f8bd 	bl	800b91e <__retarget_lock_acquire_recursive>
 800b7a4:	bd10      	pop	{r4, pc}
 800b7a6:	46c0      	nop			; (mov r8, r8)
 800b7a8:	20000475 	.word	0x20000475

0800b7ac <__sfp_lock_release>:
 800b7ac:	b510      	push	{r4, lr}
 800b7ae:	4802      	ldr	r0, [pc, #8]	; (800b7b8 <__sfp_lock_release+0xc>)
 800b7b0:	f000 f8b6 	bl	800b920 <__retarget_lock_release_recursive>
 800b7b4:	bd10      	pop	{r4, pc}
 800b7b6:	46c0      	nop			; (mov r8, r8)
 800b7b8:	20000475 	.word	0x20000475

0800b7bc <__sinit_lock_acquire>:
 800b7bc:	b510      	push	{r4, lr}
 800b7be:	4802      	ldr	r0, [pc, #8]	; (800b7c8 <__sinit_lock_acquire+0xc>)
 800b7c0:	f000 f8ad 	bl	800b91e <__retarget_lock_acquire_recursive>
 800b7c4:	bd10      	pop	{r4, pc}
 800b7c6:	46c0      	nop			; (mov r8, r8)
 800b7c8:	20000476 	.word	0x20000476

0800b7cc <__sinit_lock_release>:
 800b7cc:	b510      	push	{r4, lr}
 800b7ce:	4802      	ldr	r0, [pc, #8]	; (800b7d8 <__sinit_lock_release+0xc>)
 800b7d0:	f000 f8a6 	bl	800b920 <__retarget_lock_release_recursive>
 800b7d4:	bd10      	pop	{r4, pc}
 800b7d6:	46c0      	nop			; (mov r8, r8)
 800b7d8:	20000476 	.word	0x20000476

0800b7dc <__sinit>:
 800b7dc:	b513      	push	{r0, r1, r4, lr}
 800b7de:	0004      	movs	r4, r0
 800b7e0:	f7ff ffec 	bl	800b7bc <__sinit_lock_acquire>
 800b7e4:	69a3      	ldr	r3, [r4, #24]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d002      	beq.n	800b7f0 <__sinit+0x14>
 800b7ea:	f7ff ffef 	bl	800b7cc <__sinit_lock_release>
 800b7ee:	bd13      	pop	{r0, r1, r4, pc}
 800b7f0:	64a3      	str	r3, [r4, #72]	; 0x48
 800b7f2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b7f4:	6523      	str	r3, [r4, #80]	; 0x50
 800b7f6:	4b13      	ldr	r3, [pc, #76]	; (800b844 <__sinit+0x68>)
 800b7f8:	4a13      	ldr	r2, [pc, #76]	; (800b848 <__sinit+0x6c>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b7fe:	9301      	str	r3, [sp, #4]
 800b800:	42a3      	cmp	r3, r4
 800b802:	d101      	bne.n	800b808 <__sinit+0x2c>
 800b804:	2301      	movs	r3, #1
 800b806:	61a3      	str	r3, [r4, #24]
 800b808:	0020      	movs	r0, r4
 800b80a:	f000 f81f 	bl	800b84c <__sfp>
 800b80e:	6060      	str	r0, [r4, #4]
 800b810:	0020      	movs	r0, r4
 800b812:	f000 f81b 	bl	800b84c <__sfp>
 800b816:	60a0      	str	r0, [r4, #8]
 800b818:	0020      	movs	r0, r4
 800b81a:	f000 f817 	bl	800b84c <__sfp>
 800b81e:	2200      	movs	r2, #0
 800b820:	2104      	movs	r1, #4
 800b822:	60e0      	str	r0, [r4, #12]
 800b824:	6860      	ldr	r0, [r4, #4]
 800b826:	f7ff ff77 	bl	800b718 <std>
 800b82a:	2201      	movs	r2, #1
 800b82c:	2109      	movs	r1, #9
 800b82e:	68a0      	ldr	r0, [r4, #8]
 800b830:	f7ff ff72 	bl	800b718 <std>
 800b834:	2202      	movs	r2, #2
 800b836:	2112      	movs	r1, #18
 800b838:	68e0      	ldr	r0, [r4, #12]
 800b83a:	f7ff ff6d 	bl	800b718 <std>
 800b83e:	2301      	movs	r3, #1
 800b840:	61a3      	str	r3, [r4, #24]
 800b842:	e7d2      	b.n	800b7ea <__sinit+0xe>
 800b844:	0800bea8 	.word	0x0800bea8
 800b848:	0800b761 	.word	0x0800b761

0800b84c <__sfp>:
 800b84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84e:	0007      	movs	r7, r0
 800b850:	f7ff ffa4 	bl	800b79c <__sfp_lock_acquire>
 800b854:	4b1f      	ldr	r3, [pc, #124]	; (800b8d4 <__sfp+0x88>)
 800b856:	681e      	ldr	r6, [r3, #0]
 800b858:	69b3      	ldr	r3, [r6, #24]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d102      	bne.n	800b864 <__sfp+0x18>
 800b85e:	0030      	movs	r0, r6
 800b860:	f7ff ffbc 	bl	800b7dc <__sinit>
 800b864:	3648      	adds	r6, #72	; 0x48
 800b866:	68b4      	ldr	r4, [r6, #8]
 800b868:	6873      	ldr	r3, [r6, #4]
 800b86a:	3b01      	subs	r3, #1
 800b86c:	d504      	bpl.n	800b878 <__sfp+0x2c>
 800b86e:	6833      	ldr	r3, [r6, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d022      	beq.n	800b8ba <__sfp+0x6e>
 800b874:	6836      	ldr	r6, [r6, #0]
 800b876:	e7f6      	b.n	800b866 <__sfp+0x1a>
 800b878:	220c      	movs	r2, #12
 800b87a:	5ea5      	ldrsh	r5, [r4, r2]
 800b87c:	2d00      	cmp	r5, #0
 800b87e:	d11a      	bne.n	800b8b6 <__sfp+0x6a>
 800b880:	0020      	movs	r0, r4
 800b882:	4b15      	ldr	r3, [pc, #84]	; (800b8d8 <__sfp+0x8c>)
 800b884:	3058      	adds	r0, #88	; 0x58
 800b886:	60e3      	str	r3, [r4, #12]
 800b888:	6665      	str	r5, [r4, #100]	; 0x64
 800b88a:	f000 f847 	bl	800b91c <__retarget_lock_init_recursive>
 800b88e:	f7ff ff8d 	bl	800b7ac <__sfp_lock_release>
 800b892:	0020      	movs	r0, r4
 800b894:	2208      	movs	r2, #8
 800b896:	0029      	movs	r1, r5
 800b898:	6025      	str	r5, [r4, #0]
 800b89a:	60a5      	str	r5, [r4, #8]
 800b89c:	6065      	str	r5, [r4, #4]
 800b89e:	6125      	str	r5, [r4, #16]
 800b8a0:	6165      	str	r5, [r4, #20]
 800b8a2:	61a5      	str	r5, [r4, #24]
 800b8a4:	305c      	adds	r0, #92	; 0x5c
 800b8a6:	f7fb fc8b 	bl	80071c0 <memset>
 800b8aa:	6365      	str	r5, [r4, #52]	; 0x34
 800b8ac:	63a5      	str	r5, [r4, #56]	; 0x38
 800b8ae:	64a5      	str	r5, [r4, #72]	; 0x48
 800b8b0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b8b2:	0020      	movs	r0, r4
 800b8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8b6:	3468      	adds	r4, #104	; 0x68
 800b8b8:	e7d7      	b.n	800b86a <__sfp+0x1e>
 800b8ba:	2104      	movs	r1, #4
 800b8bc:	0038      	movs	r0, r7
 800b8be:	f7ff ff57 	bl	800b770 <__sfmoreglue>
 800b8c2:	1e04      	subs	r4, r0, #0
 800b8c4:	6030      	str	r0, [r6, #0]
 800b8c6:	d1d5      	bne.n	800b874 <__sfp+0x28>
 800b8c8:	f7ff ff70 	bl	800b7ac <__sfp_lock_release>
 800b8cc:	230c      	movs	r3, #12
 800b8ce:	603b      	str	r3, [r7, #0]
 800b8d0:	e7ef      	b.n	800b8b2 <__sfp+0x66>
 800b8d2:	46c0      	nop			; (mov r8, r8)
 800b8d4:	0800bea8 	.word	0x0800bea8
 800b8d8:	ffff0001 	.word	0xffff0001

0800b8dc <_fwalk_reent>:
 800b8dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8de:	0004      	movs	r4, r0
 800b8e0:	0006      	movs	r6, r0
 800b8e2:	2700      	movs	r7, #0
 800b8e4:	9101      	str	r1, [sp, #4]
 800b8e6:	3448      	adds	r4, #72	; 0x48
 800b8e8:	6863      	ldr	r3, [r4, #4]
 800b8ea:	68a5      	ldr	r5, [r4, #8]
 800b8ec:	9300      	str	r3, [sp, #0]
 800b8ee:	9b00      	ldr	r3, [sp, #0]
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	9300      	str	r3, [sp, #0]
 800b8f4:	d504      	bpl.n	800b900 <_fwalk_reent+0x24>
 800b8f6:	6824      	ldr	r4, [r4, #0]
 800b8f8:	2c00      	cmp	r4, #0
 800b8fa:	d1f5      	bne.n	800b8e8 <_fwalk_reent+0xc>
 800b8fc:	0038      	movs	r0, r7
 800b8fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b900:	89ab      	ldrh	r3, [r5, #12]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d908      	bls.n	800b918 <_fwalk_reent+0x3c>
 800b906:	220e      	movs	r2, #14
 800b908:	5eab      	ldrsh	r3, [r5, r2]
 800b90a:	3301      	adds	r3, #1
 800b90c:	d004      	beq.n	800b918 <_fwalk_reent+0x3c>
 800b90e:	0029      	movs	r1, r5
 800b910:	0030      	movs	r0, r6
 800b912:	9b01      	ldr	r3, [sp, #4]
 800b914:	4798      	blx	r3
 800b916:	4307      	orrs	r7, r0
 800b918:	3568      	adds	r5, #104	; 0x68
 800b91a:	e7e8      	b.n	800b8ee <_fwalk_reent+0x12>

0800b91c <__retarget_lock_init_recursive>:
 800b91c:	4770      	bx	lr

0800b91e <__retarget_lock_acquire_recursive>:
 800b91e:	4770      	bx	lr

0800b920 <__retarget_lock_release_recursive>:
 800b920:	4770      	bx	lr
	...

0800b924 <__swhatbuf_r>:
 800b924:	b570      	push	{r4, r5, r6, lr}
 800b926:	000e      	movs	r6, r1
 800b928:	001d      	movs	r5, r3
 800b92a:	230e      	movs	r3, #14
 800b92c:	5ec9      	ldrsh	r1, [r1, r3]
 800b92e:	0014      	movs	r4, r2
 800b930:	b096      	sub	sp, #88	; 0x58
 800b932:	2900      	cmp	r1, #0
 800b934:	da08      	bge.n	800b948 <__swhatbuf_r+0x24>
 800b936:	220c      	movs	r2, #12
 800b938:	5eb3      	ldrsh	r3, [r6, r2]
 800b93a:	2200      	movs	r2, #0
 800b93c:	602a      	str	r2, [r5, #0]
 800b93e:	061b      	lsls	r3, r3, #24
 800b940:	d411      	bmi.n	800b966 <__swhatbuf_r+0x42>
 800b942:	2380      	movs	r3, #128	; 0x80
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	e00f      	b.n	800b968 <__swhatbuf_r+0x44>
 800b948:	466a      	mov	r2, sp
 800b94a:	f000 f91b 	bl	800bb84 <_fstat_r>
 800b94e:	2800      	cmp	r0, #0
 800b950:	dbf1      	blt.n	800b936 <__swhatbuf_r+0x12>
 800b952:	23f0      	movs	r3, #240	; 0xf0
 800b954:	9901      	ldr	r1, [sp, #4]
 800b956:	021b      	lsls	r3, r3, #8
 800b958:	4019      	ands	r1, r3
 800b95a:	4b05      	ldr	r3, [pc, #20]	; (800b970 <__swhatbuf_r+0x4c>)
 800b95c:	18c9      	adds	r1, r1, r3
 800b95e:	424b      	negs	r3, r1
 800b960:	4159      	adcs	r1, r3
 800b962:	6029      	str	r1, [r5, #0]
 800b964:	e7ed      	b.n	800b942 <__swhatbuf_r+0x1e>
 800b966:	2340      	movs	r3, #64	; 0x40
 800b968:	2000      	movs	r0, #0
 800b96a:	6023      	str	r3, [r4, #0]
 800b96c:	b016      	add	sp, #88	; 0x58
 800b96e:	bd70      	pop	{r4, r5, r6, pc}
 800b970:	ffffe000 	.word	0xffffe000

0800b974 <__smakebuf_r>:
 800b974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b976:	2602      	movs	r6, #2
 800b978:	898b      	ldrh	r3, [r1, #12]
 800b97a:	0005      	movs	r5, r0
 800b97c:	000c      	movs	r4, r1
 800b97e:	4233      	tst	r3, r6
 800b980:	d006      	beq.n	800b990 <__smakebuf_r+0x1c>
 800b982:	0023      	movs	r3, r4
 800b984:	3347      	adds	r3, #71	; 0x47
 800b986:	6023      	str	r3, [r4, #0]
 800b988:	6123      	str	r3, [r4, #16]
 800b98a:	2301      	movs	r3, #1
 800b98c:	6163      	str	r3, [r4, #20]
 800b98e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b990:	466a      	mov	r2, sp
 800b992:	ab01      	add	r3, sp, #4
 800b994:	f7ff ffc6 	bl	800b924 <__swhatbuf_r>
 800b998:	9900      	ldr	r1, [sp, #0]
 800b99a:	0007      	movs	r7, r0
 800b99c:	0028      	movs	r0, r5
 800b99e:	f7ff f927 	bl	800abf0 <_malloc_r>
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	d108      	bne.n	800b9b8 <__smakebuf_r+0x44>
 800b9a6:	220c      	movs	r2, #12
 800b9a8:	5ea3      	ldrsh	r3, [r4, r2]
 800b9aa:	059a      	lsls	r2, r3, #22
 800b9ac:	d4ef      	bmi.n	800b98e <__smakebuf_r+0x1a>
 800b9ae:	2203      	movs	r2, #3
 800b9b0:	4393      	bics	r3, r2
 800b9b2:	431e      	orrs	r6, r3
 800b9b4:	81a6      	strh	r6, [r4, #12]
 800b9b6:	e7e4      	b.n	800b982 <__smakebuf_r+0xe>
 800b9b8:	4b0f      	ldr	r3, [pc, #60]	; (800b9f8 <__smakebuf_r+0x84>)
 800b9ba:	62ab      	str	r3, [r5, #40]	; 0x28
 800b9bc:	2380      	movs	r3, #128	; 0x80
 800b9be:	89a2      	ldrh	r2, [r4, #12]
 800b9c0:	6020      	str	r0, [r4, #0]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	81a3      	strh	r3, [r4, #12]
 800b9c6:	9b00      	ldr	r3, [sp, #0]
 800b9c8:	6120      	str	r0, [r4, #16]
 800b9ca:	6163      	str	r3, [r4, #20]
 800b9cc:	9b01      	ldr	r3, [sp, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d00d      	beq.n	800b9ee <__smakebuf_r+0x7a>
 800b9d2:	0028      	movs	r0, r5
 800b9d4:	230e      	movs	r3, #14
 800b9d6:	5ee1      	ldrsh	r1, [r4, r3]
 800b9d8:	f000 f8e6 	bl	800bba8 <_isatty_r>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	d006      	beq.n	800b9ee <__smakebuf_r+0x7a>
 800b9e0:	2203      	movs	r2, #3
 800b9e2:	89a3      	ldrh	r3, [r4, #12]
 800b9e4:	4393      	bics	r3, r2
 800b9e6:	001a      	movs	r2, r3
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	81a3      	strh	r3, [r4, #12]
 800b9ee:	89a0      	ldrh	r0, [r4, #12]
 800b9f0:	4307      	orrs	r7, r0
 800b9f2:	81a7      	strh	r7, [r4, #12]
 800b9f4:	e7cb      	b.n	800b98e <__smakebuf_r+0x1a>
 800b9f6:	46c0      	nop			; (mov r8, r8)
 800b9f8:	0800b761 	.word	0x0800b761

0800b9fc <_malloc_usable_size_r>:
 800b9fc:	1f0b      	subs	r3, r1, #4
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	1f18      	subs	r0, r3, #4
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	da01      	bge.n	800ba0a <_malloc_usable_size_r+0xe>
 800ba06:	580b      	ldr	r3, [r1, r0]
 800ba08:	18c0      	adds	r0, r0, r3
 800ba0a:	4770      	bx	lr

0800ba0c <_raise_r>:
 800ba0c:	b570      	push	{r4, r5, r6, lr}
 800ba0e:	0004      	movs	r4, r0
 800ba10:	000d      	movs	r5, r1
 800ba12:	291f      	cmp	r1, #31
 800ba14:	d904      	bls.n	800ba20 <_raise_r+0x14>
 800ba16:	2316      	movs	r3, #22
 800ba18:	6003      	str	r3, [r0, #0]
 800ba1a:	2001      	movs	r0, #1
 800ba1c:	4240      	negs	r0, r0
 800ba1e:	bd70      	pop	{r4, r5, r6, pc}
 800ba20:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d004      	beq.n	800ba30 <_raise_r+0x24>
 800ba26:	008a      	lsls	r2, r1, #2
 800ba28:	189b      	adds	r3, r3, r2
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	2a00      	cmp	r2, #0
 800ba2e:	d108      	bne.n	800ba42 <_raise_r+0x36>
 800ba30:	0020      	movs	r0, r4
 800ba32:	f000 f831 	bl	800ba98 <_getpid_r>
 800ba36:	002a      	movs	r2, r5
 800ba38:	0001      	movs	r1, r0
 800ba3a:	0020      	movs	r0, r4
 800ba3c:	f000 f81a 	bl	800ba74 <_kill_r>
 800ba40:	e7ed      	b.n	800ba1e <_raise_r+0x12>
 800ba42:	2000      	movs	r0, #0
 800ba44:	2a01      	cmp	r2, #1
 800ba46:	d0ea      	beq.n	800ba1e <_raise_r+0x12>
 800ba48:	1c51      	adds	r1, r2, #1
 800ba4a:	d103      	bne.n	800ba54 <_raise_r+0x48>
 800ba4c:	2316      	movs	r3, #22
 800ba4e:	3001      	adds	r0, #1
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	e7e4      	b.n	800ba1e <_raise_r+0x12>
 800ba54:	2400      	movs	r4, #0
 800ba56:	0028      	movs	r0, r5
 800ba58:	601c      	str	r4, [r3, #0]
 800ba5a:	4790      	blx	r2
 800ba5c:	0020      	movs	r0, r4
 800ba5e:	e7de      	b.n	800ba1e <_raise_r+0x12>

0800ba60 <raise>:
 800ba60:	b510      	push	{r4, lr}
 800ba62:	4b03      	ldr	r3, [pc, #12]	; (800ba70 <raise+0x10>)
 800ba64:	0001      	movs	r1, r0
 800ba66:	6818      	ldr	r0, [r3, #0]
 800ba68:	f7ff ffd0 	bl	800ba0c <_raise_r>
 800ba6c:	bd10      	pop	{r4, pc}
 800ba6e:	46c0      	nop			; (mov r8, r8)
 800ba70:	20000030 	.word	0x20000030

0800ba74 <_kill_r>:
 800ba74:	2300      	movs	r3, #0
 800ba76:	b570      	push	{r4, r5, r6, lr}
 800ba78:	4d06      	ldr	r5, [pc, #24]	; (800ba94 <_kill_r+0x20>)
 800ba7a:	0004      	movs	r4, r0
 800ba7c:	0008      	movs	r0, r1
 800ba7e:	0011      	movs	r1, r2
 800ba80:	602b      	str	r3, [r5, #0]
 800ba82:	f7f8 f903 	bl	8003c8c <_kill>
 800ba86:	1c43      	adds	r3, r0, #1
 800ba88:	d103      	bne.n	800ba92 <_kill_r+0x1e>
 800ba8a:	682b      	ldr	r3, [r5, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d000      	beq.n	800ba92 <_kill_r+0x1e>
 800ba90:	6023      	str	r3, [r4, #0]
 800ba92:	bd70      	pop	{r4, r5, r6, pc}
 800ba94:	20000470 	.word	0x20000470

0800ba98 <_getpid_r>:
 800ba98:	b510      	push	{r4, lr}
 800ba9a:	f7f8 f8f1 	bl	8003c80 <_getpid>
 800ba9e:	bd10      	pop	{r4, pc}

0800baa0 <__sread>:
 800baa0:	b570      	push	{r4, r5, r6, lr}
 800baa2:	000c      	movs	r4, r1
 800baa4:	250e      	movs	r5, #14
 800baa6:	5f49      	ldrsh	r1, [r1, r5]
 800baa8:	f000 f8a4 	bl	800bbf4 <_read_r>
 800baac:	2800      	cmp	r0, #0
 800baae:	db03      	blt.n	800bab8 <__sread+0x18>
 800bab0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bab2:	181b      	adds	r3, r3, r0
 800bab4:	6563      	str	r3, [r4, #84]	; 0x54
 800bab6:	bd70      	pop	{r4, r5, r6, pc}
 800bab8:	89a3      	ldrh	r3, [r4, #12]
 800baba:	4a02      	ldr	r2, [pc, #8]	; (800bac4 <__sread+0x24>)
 800babc:	4013      	ands	r3, r2
 800babe:	81a3      	strh	r3, [r4, #12]
 800bac0:	e7f9      	b.n	800bab6 <__sread+0x16>
 800bac2:	46c0      	nop			; (mov r8, r8)
 800bac4:	ffffefff 	.word	0xffffefff

0800bac8 <__swrite>:
 800bac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baca:	001f      	movs	r7, r3
 800bacc:	898b      	ldrh	r3, [r1, #12]
 800bace:	0005      	movs	r5, r0
 800bad0:	000c      	movs	r4, r1
 800bad2:	0016      	movs	r6, r2
 800bad4:	05db      	lsls	r3, r3, #23
 800bad6:	d505      	bpl.n	800bae4 <__swrite+0x1c>
 800bad8:	230e      	movs	r3, #14
 800bada:	5ec9      	ldrsh	r1, [r1, r3]
 800badc:	2200      	movs	r2, #0
 800bade:	2302      	movs	r3, #2
 800bae0:	f000 f874 	bl	800bbcc <_lseek_r>
 800bae4:	89a3      	ldrh	r3, [r4, #12]
 800bae6:	4a05      	ldr	r2, [pc, #20]	; (800bafc <__swrite+0x34>)
 800bae8:	0028      	movs	r0, r5
 800baea:	4013      	ands	r3, r2
 800baec:	81a3      	strh	r3, [r4, #12]
 800baee:	0032      	movs	r2, r6
 800baf0:	230e      	movs	r3, #14
 800baf2:	5ee1      	ldrsh	r1, [r4, r3]
 800baf4:	003b      	movs	r3, r7
 800baf6:	f000 f81f 	bl	800bb38 <_write_r>
 800bafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bafc:	ffffefff 	.word	0xffffefff

0800bb00 <__sseek>:
 800bb00:	b570      	push	{r4, r5, r6, lr}
 800bb02:	000c      	movs	r4, r1
 800bb04:	250e      	movs	r5, #14
 800bb06:	5f49      	ldrsh	r1, [r1, r5]
 800bb08:	f000 f860 	bl	800bbcc <_lseek_r>
 800bb0c:	89a3      	ldrh	r3, [r4, #12]
 800bb0e:	1c42      	adds	r2, r0, #1
 800bb10:	d103      	bne.n	800bb1a <__sseek+0x1a>
 800bb12:	4a05      	ldr	r2, [pc, #20]	; (800bb28 <__sseek+0x28>)
 800bb14:	4013      	ands	r3, r2
 800bb16:	81a3      	strh	r3, [r4, #12]
 800bb18:	bd70      	pop	{r4, r5, r6, pc}
 800bb1a:	2280      	movs	r2, #128	; 0x80
 800bb1c:	0152      	lsls	r2, r2, #5
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	81a3      	strh	r3, [r4, #12]
 800bb22:	6560      	str	r0, [r4, #84]	; 0x54
 800bb24:	e7f8      	b.n	800bb18 <__sseek+0x18>
 800bb26:	46c0      	nop			; (mov r8, r8)
 800bb28:	ffffefff 	.word	0xffffefff

0800bb2c <__sclose>:
 800bb2c:	b510      	push	{r4, lr}
 800bb2e:	230e      	movs	r3, #14
 800bb30:	5ec9      	ldrsh	r1, [r1, r3]
 800bb32:	f000 f815 	bl	800bb60 <_close_r>
 800bb36:	bd10      	pop	{r4, pc}

0800bb38 <_write_r>:
 800bb38:	b570      	push	{r4, r5, r6, lr}
 800bb3a:	0004      	movs	r4, r0
 800bb3c:	0008      	movs	r0, r1
 800bb3e:	0011      	movs	r1, r2
 800bb40:	001a      	movs	r2, r3
 800bb42:	2300      	movs	r3, #0
 800bb44:	4d05      	ldr	r5, [pc, #20]	; (800bb5c <_write_r+0x24>)
 800bb46:	602b      	str	r3, [r5, #0]
 800bb48:	f7f8 f8d9 	bl	8003cfe <_write>
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	d103      	bne.n	800bb58 <_write_r+0x20>
 800bb50:	682b      	ldr	r3, [r5, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d000      	beq.n	800bb58 <_write_r+0x20>
 800bb56:	6023      	str	r3, [r4, #0]
 800bb58:	bd70      	pop	{r4, r5, r6, pc}
 800bb5a:	46c0      	nop			; (mov r8, r8)
 800bb5c:	20000470 	.word	0x20000470

0800bb60 <_close_r>:
 800bb60:	2300      	movs	r3, #0
 800bb62:	b570      	push	{r4, r5, r6, lr}
 800bb64:	4d06      	ldr	r5, [pc, #24]	; (800bb80 <_close_r+0x20>)
 800bb66:	0004      	movs	r4, r0
 800bb68:	0008      	movs	r0, r1
 800bb6a:	602b      	str	r3, [r5, #0]
 800bb6c:	f7f8 f8e3 	bl	8003d36 <_close>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d103      	bne.n	800bb7c <_close_r+0x1c>
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d000      	beq.n	800bb7c <_close_r+0x1c>
 800bb7a:	6023      	str	r3, [r4, #0]
 800bb7c:	bd70      	pop	{r4, r5, r6, pc}
 800bb7e:	46c0      	nop			; (mov r8, r8)
 800bb80:	20000470 	.word	0x20000470

0800bb84 <_fstat_r>:
 800bb84:	2300      	movs	r3, #0
 800bb86:	b570      	push	{r4, r5, r6, lr}
 800bb88:	4d06      	ldr	r5, [pc, #24]	; (800bba4 <_fstat_r+0x20>)
 800bb8a:	0004      	movs	r4, r0
 800bb8c:	0008      	movs	r0, r1
 800bb8e:	0011      	movs	r1, r2
 800bb90:	602b      	str	r3, [r5, #0]
 800bb92:	f7f8 f8da 	bl	8003d4a <_fstat>
 800bb96:	1c43      	adds	r3, r0, #1
 800bb98:	d103      	bne.n	800bba2 <_fstat_r+0x1e>
 800bb9a:	682b      	ldr	r3, [r5, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d000      	beq.n	800bba2 <_fstat_r+0x1e>
 800bba0:	6023      	str	r3, [r4, #0]
 800bba2:	bd70      	pop	{r4, r5, r6, pc}
 800bba4:	20000470 	.word	0x20000470

0800bba8 <_isatty_r>:
 800bba8:	2300      	movs	r3, #0
 800bbaa:	b570      	push	{r4, r5, r6, lr}
 800bbac:	4d06      	ldr	r5, [pc, #24]	; (800bbc8 <_isatty_r+0x20>)
 800bbae:	0004      	movs	r4, r0
 800bbb0:	0008      	movs	r0, r1
 800bbb2:	602b      	str	r3, [r5, #0]
 800bbb4:	f7f8 f8d7 	bl	8003d66 <_isatty>
 800bbb8:	1c43      	adds	r3, r0, #1
 800bbba:	d103      	bne.n	800bbc4 <_isatty_r+0x1c>
 800bbbc:	682b      	ldr	r3, [r5, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d000      	beq.n	800bbc4 <_isatty_r+0x1c>
 800bbc2:	6023      	str	r3, [r4, #0]
 800bbc4:	bd70      	pop	{r4, r5, r6, pc}
 800bbc6:	46c0      	nop			; (mov r8, r8)
 800bbc8:	20000470 	.word	0x20000470

0800bbcc <_lseek_r>:
 800bbcc:	b570      	push	{r4, r5, r6, lr}
 800bbce:	0004      	movs	r4, r0
 800bbd0:	0008      	movs	r0, r1
 800bbd2:	0011      	movs	r1, r2
 800bbd4:	001a      	movs	r2, r3
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	4d05      	ldr	r5, [pc, #20]	; (800bbf0 <_lseek_r+0x24>)
 800bbda:	602b      	str	r3, [r5, #0]
 800bbdc:	f7f8 f8cc 	bl	8003d78 <_lseek>
 800bbe0:	1c43      	adds	r3, r0, #1
 800bbe2:	d103      	bne.n	800bbec <_lseek_r+0x20>
 800bbe4:	682b      	ldr	r3, [r5, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d000      	beq.n	800bbec <_lseek_r+0x20>
 800bbea:	6023      	str	r3, [r4, #0]
 800bbec:	bd70      	pop	{r4, r5, r6, pc}
 800bbee:	46c0      	nop			; (mov r8, r8)
 800bbf0:	20000470 	.word	0x20000470

0800bbf4 <_read_r>:
 800bbf4:	b570      	push	{r4, r5, r6, lr}
 800bbf6:	0004      	movs	r4, r0
 800bbf8:	0008      	movs	r0, r1
 800bbfa:	0011      	movs	r1, r2
 800bbfc:	001a      	movs	r2, r3
 800bbfe:	2300      	movs	r3, #0
 800bc00:	4d05      	ldr	r5, [pc, #20]	; (800bc18 <_read_r+0x24>)
 800bc02:	602b      	str	r3, [r5, #0]
 800bc04:	f7f8 f85e 	bl	8003cc4 <_read>
 800bc08:	1c43      	adds	r3, r0, #1
 800bc0a:	d103      	bne.n	800bc14 <_read_r+0x20>
 800bc0c:	682b      	ldr	r3, [r5, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d000      	beq.n	800bc14 <_read_r+0x20>
 800bc12:	6023      	str	r3, [r4, #0]
 800bc14:	bd70      	pop	{r4, r5, r6, pc}
 800bc16:	46c0      	nop			; (mov r8, r8)
 800bc18:	20000470 	.word	0x20000470

0800bc1c <_init>:
 800bc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1e:	46c0      	nop			; (mov r8, r8)
 800bc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc22:	bc08      	pop	{r3}
 800bc24:	469e      	mov	lr, r3
 800bc26:	4770      	bx	lr

0800bc28 <_fini>:
 800bc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2a:	46c0      	nop			; (mov r8, r8)
 800bc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc2e:	bc08      	pop	{r3}
 800bc30:	469e      	mov	lr, r3
 800bc32:	4770      	bx	lr
