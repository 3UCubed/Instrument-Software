
Quick-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c10  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002cd0  08002cd0  00012cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d48  08002d48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d48  08002d48  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d48  08002d48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d48  08002d48  00012d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d4c  08002d4c  00012d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08002d5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08002d5c  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000911a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001855  00000000  00000000  0002914e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0002a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000628  00000000  00000000  0002b068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010d33  00000000  00000000  0002b690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096c0  00000000  00000000  0003c3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064dc7  00000000  00000000  00045a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aa84a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001678  00000000  00000000  000aa89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002cb8 	.word	0x08002cb8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002cb8 	.word	0x08002cb8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a16      	ldr	r2, [pc, #88]	; (8000288 <HAL_UART_RxCpltCallback+0x68>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d126      	bne.n	8000280 <HAL_UART_RxCpltCallback+0x60>
		rx_index = rx_index % 100;
 8000232:	4b16      	ldr	r3, [pc, #88]	; (800028c <HAL_UART_RxCpltCallback+0x6c>)
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	2164      	movs	r1, #100	; 0x64
 8000238:	0018      	movs	r0, r3
 800023a:	f7ff ffeb 	bl	8000214 <__aeabi_uidivmod>
 800023e:	000b      	movs	r3, r1
 8000240:	b2da      	uxtb	r2, r3
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <HAL_UART_RxCpltCallback+0x6c>)
 8000244:	701a      	strb	r2, [r3, #0]
		 HAL_UART_Transmit(&huart1, rx_buf, 100, 100);
 8000246:	4912      	ldr	r1, [pc, #72]	; (8000290 <HAL_UART_RxCpltCallback+0x70>)
 8000248:	4812      	ldr	r0, [pc, #72]	; (8000294 <HAL_UART_RxCpltCallback+0x74>)
 800024a:	2364      	movs	r3, #100	; 0x64
 800024c:	2264      	movs	r2, #100	; 0x64
 800024e:	f001 fb59 	bl	8001904 <HAL_UART_Transmit>
		 HAL_UART_Receive_IT(&huart1, rx_buf, 100);
 8000252:	490f      	ldr	r1, [pc, #60]	; (8000290 <HAL_UART_RxCpltCallback+0x70>)
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <HAL_UART_RxCpltCallback+0x74>)
 8000256:	2264      	movs	r2, #100	; 0x64
 8000258:	0018      	movs	r0, r3
 800025a:	f001 fbfc 	bl	8001a56 <HAL_UART_Receive_IT>
		 if (rx_buf[0] == 'K') {
 800025e:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <HAL_UART_RxCpltCallback+0x70>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b4b      	cmp	r3, #75	; 0x4b
 8000264:	d10c      	bne.n	8000280 <HAL_UART_RxCpltCallback+0x60>
			 gpio_count == 7 ? gpio_count = 0 : gpio_count++;
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <HAL_UART_RxCpltCallback+0x78>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2b07      	cmp	r3, #7
 800026c:	d103      	bne.n	8000276 <HAL_UART_RxCpltCallback+0x56>
 800026e:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <HAL_UART_RxCpltCallback+0x78>)
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
		 }

	}
}
 8000274:	e004      	b.n	8000280 <HAL_UART_RxCpltCallback+0x60>
			 gpio_count == 7 ? gpio_count = 0 : gpio_count++;
 8000276:	4b08      	ldr	r3, [pc, #32]	; (8000298 <HAL_UART_RxCpltCallback+0x78>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	1c5a      	adds	r2, r3, #1
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <HAL_UART_RxCpltCallback+0x78>)
 800027e:	601a      	str	r2, [r3, #0]
}
 8000280:	46c0      	nop			; (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	b002      	add	sp, #8
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40013800 	.word	0x40013800
 800028c:	20000110 	.word	0x20000110
 8000290:	200000ac 	.word	0x200000ac
 8000294:	20000028 	.word	0x20000028
 8000298:	20000114 	.word	0x20000114

0800029c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a0:	f000 fa06 	bl	80006b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a4:	f000 f836 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a8:	f000 f8bc 	bl	8000424 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002ac:	f000 f88a 	bl	80003c4 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Receive_IT(&huart1, rx_buf, 100);
 80002b0:	4914      	ldr	r1, [pc, #80]	; (8000304 <main+0x68>)
 80002b2:	4b15      	ldr	r3, [pc, #84]	; (8000308 <main+0x6c>)
 80002b4:	2264      	movs	r2, #100	; 0x64
 80002b6:	0018      	movs	r0, r3
 80002b8:	f001 fbcd 	bl	8001a56 <HAL_UART_Receive_IT>

  while (1)
  {
	 HAL_GPIO_TogglePin(gpios[gpio_count].gpio, gpios[gpio_count].pin);
 80002bc:	4b13      	ldr	r3, [pc, #76]	; (800030c <main+0x70>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <main+0x74>)
 80002c2:	00d2      	lsls	r2, r2, #3
 80002c4:	58d0      	ldr	r0, [r2, r3]
 80002c6:	4b11      	ldr	r3, [pc, #68]	; (800030c <main+0x70>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a11      	ldr	r2, [pc, #68]	; (8000310 <main+0x74>)
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	18d3      	adds	r3, r2, r3
 80002d0:	3304      	adds	r3, #4
 80002d2:	881b      	ldrh	r3, [r3, #0]
 80002d4:	0019      	movs	r1, r3
 80002d6:	f000 fd5c 	bl	8000d92 <HAL_GPIO_TogglePin>
	 HAL_Delay(500);
 80002da:	23fa      	movs	r3, #250	; 0xfa
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	0018      	movs	r0, r3
 80002e0:	f000 fa4a 	bl	8000778 <HAL_Delay>
	 HAL_GPIO_TogglePin(gpios[gpio_count].gpio, gpios[gpio_count].pin);
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <main+0x70>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	4b09      	ldr	r3, [pc, #36]	; (8000310 <main+0x74>)
 80002ea:	00d2      	lsls	r2, r2, #3
 80002ec:	58d0      	ldr	r0, [r2, r3]
 80002ee:	4b07      	ldr	r3, [pc, #28]	; (800030c <main+0x70>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <main+0x74>)
 80002f4:	00db      	lsls	r3, r3, #3
 80002f6:	18d3      	adds	r3, r2, r3
 80002f8:	3304      	adds	r3, #4
 80002fa:	881b      	ldrh	r3, [r3, #0]
 80002fc:	0019      	movs	r1, r3
 80002fe:	f000 fd48 	bl	8000d92 <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(gpios[gpio_count].gpio, gpios[gpio_count].pin);
 8000302:	e7db      	b.n	80002bc <main+0x20>
 8000304:	200000ac 	.word	0x200000ac
 8000308:	20000028 	.word	0x20000028
 800030c:	20000114 	.word	0x20000114
 8000310:	08002cf0 	.word	0x08002cf0

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b097      	sub	sp, #92	; 0x5c
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	2428      	movs	r4, #40	; 0x28
 800031c:	193b      	adds	r3, r7, r4
 800031e:	0018      	movs	r0, r3
 8000320:	2330      	movs	r3, #48	; 0x30
 8000322:	001a      	movs	r2, r3
 8000324:	2100      	movs	r1, #0
 8000326:	f002 fcbf 	bl	8002ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032a:	2318      	movs	r3, #24
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	0018      	movs	r0, r3
 8000330:	2310      	movs	r3, #16
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f002 fcb7 	bl	8002ca8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	0018      	movs	r0, r3
 800033e:	2314      	movs	r3, #20
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f002 fcb0 	bl	8002ca8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000348:	0021      	movs	r1, r4
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2202      	movs	r2, #2
 800034e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2201      	movs	r2, #1
 8000354:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2210      	movs	r2, #16
 800035a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2200      	movs	r2, #0
 8000360:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	187b      	adds	r3, r7, r1
 8000364:	0018      	movs	r0, r3
 8000366:	f000 fd2f 	bl	8000dc8 <HAL_RCC_OscConfig>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800036e:	f000 f8cb 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000372:	2118      	movs	r1, #24
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2207      	movs	r2, #7
 8000378:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2200      	movs	r2, #0
 800038a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2100      	movs	r1, #0
 8000390:	0018      	movs	r0, r3
 8000392:	f001 f833 	bl	80013fc <HAL_RCC_ClockConfig>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800039a:	f000 f8b5 	bl	8000508 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2201      	movs	r2, #1
 80003a2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	0018      	movs	r0, r3
 80003ae:	f001 f977 	bl	80016a0 <HAL_RCCEx_PeriphCLKConfig>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003b6:	f000 f8a7 	bl	8000508 <Error_Handler>
  }
}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	b017      	add	sp, #92	; 0x5c
 80003c0:	bd90      	pop	{r4, r7, pc}
	...

080003c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <MX_USART1_UART_Init+0x58>)
 80003ca:	4a15      	ldr	r2, [pc, #84]	; (8000420 <MX_USART1_UART_Init+0x5c>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ce:	4b13      	ldr	r3, [pc, #76]	; (800041c <MX_USART1_UART_Init+0x58>)
 80003d0:	22e1      	movs	r2, #225	; 0xe1
 80003d2:	0252      	lsls	r2, r2, #9
 80003d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_USART1_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_USART1_UART_Init+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_USART1_UART_Init+0x58>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_USART1_UART_Init+0x58>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_USART1_UART_Init+0x58>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_USART1_UART_Init+0x58>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_USART1_UART_Init+0x58>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_USART1_UART_Init+0x58>)
 8000402:	2200      	movs	r2, #0
 8000404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000406:	4b05      	ldr	r3, [pc, #20]	; (800041c <MX_USART1_UART_Init+0x58>)
 8000408:	0018      	movs	r0, r3
 800040a:	f001 fa27 	bl	800185c <HAL_UART_Init>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000412:	f000 f879 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000028 	.word	0x20000028
 8000420:	40013800 	.word	0x40013800

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b089      	sub	sp, #36	; 0x24
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	240c      	movs	r4, #12
 800042c:	193b      	adds	r3, r7, r4
 800042e:	0018      	movs	r0, r3
 8000430:	2314      	movs	r3, #20
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	f002 fc37 	bl	8002ca8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043a:	4b30      	ldr	r3, [pc, #192]	; (80004fc <MX_GPIO_Init+0xd8>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b2f      	ldr	r3, [pc, #188]	; (80004fc <MX_GPIO_Init+0xd8>)
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	0309      	lsls	r1, r1, #12
 8000444:	430a      	orrs	r2, r1
 8000446:	615a      	str	r2, [r3, #20]
 8000448:	4b2c      	ldr	r3, [pc, #176]	; (80004fc <MX_GPIO_Init+0xd8>)
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	031b      	lsls	r3, r3, #12
 8000450:	4013      	ands	r3, r2
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000456:	4b29      	ldr	r3, [pc, #164]	; (80004fc <MX_GPIO_Init+0xd8>)
 8000458:	695a      	ldr	r2, [r3, #20]
 800045a:	4b28      	ldr	r3, [pc, #160]	; (80004fc <MX_GPIO_Init+0xd8>)
 800045c:	2180      	movs	r1, #128	; 0x80
 800045e:	0289      	lsls	r1, r1, #10
 8000460:	430a      	orrs	r2, r1
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	4b25      	ldr	r3, [pc, #148]	; (80004fc <MX_GPIO_Init+0xd8>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	029b      	lsls	r3, r3, #10
 800046c:	4013      	ands	r3, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000472:	4b22      	ldr	r3, [pc, #136]	; (80004fc <MX_GPIO_Init+0xd8>)
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	4b21      	ldr	r3, [pc, #132]	; (80004fc <MX_GPIO_Init+0xd8>)
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	03c9      	lsls	r1, r1, #15
 800047c:	430a      	orrs	r2, r1
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <MX_GPIO_Init+0xd8>)
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	03db      	lsls	r3, r3, #15
 8000488:	4013      	ands	r3, r2
 800048a:	603b      	str	r3, [r7, #0]
 800048c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800048e:	239f      	movs	r3, #159	; 0x9f
 8000490:	019b      	lsls	r3, r3, #6
 8000492:	481b      	ldr	r0, [pc, #108]	; (8000500 <MX_GPIO_Init+0xdc>)
 8000494:	2200      	movs	r2, #0
 8000496:	0019      	movs	r1, r3
 8000498:	f000 fc5e 	bl	8000d58 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800049c:	4b19      	ldr	r3, [pc, #100]	; (8000504 <MX_GPIO_Init+0xe0>)
 800049e:	2200      	movs	r2, #0
 80004a0:	21c0      	movs	r1, #192	; 0xc0
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 fc58 	bl	8000d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	229f      	movs	r2, #159	; 0x9f
 80004ac:	0192      	lsls	r2, r2, #6
 80004ae:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2201      	movs	r2, #1
 80004b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2200      	movs	r2, #0
 80004c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <MX_GPIO_Init+0xdc>)
 80004c6:	0019      	movs	r1, r3
 80004c8:	0010      	movs	r0, r2
 80004ca:	f000 fad5 	bl	8000a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004ce:	0021      	movs	r1, r4
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	22c0      	movs	r2, #192	; 0xc0
 80004d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2201      	movs	r2, #1
 80004da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	4a06      	ldr	r2, [pc, #24]	; (8000504 <MX_GPIO_Init+0xe0>)
 80004ec:	0019      	movs	r1, r3
 80004ee:	0010      	movs	r0, r2
 80004f0:	f000 fac2 	bl	8000a78 <HAL_GPIO_Init>

}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b009      	add	sp, #36	; 0x24
 80004fa:	bd90      	pop	{r4, r7, pc}
 80004fc:	40021000 	.word	0x40021000
 8000500:	48000800 	.word	0x48000800
 8000504:	48001400 	.word	0x48001400

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x8>
	...

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <HAL_MspInit+0x44>)
 800051c:	699a      	ldr	r2, [r3, #24]
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <HAL_MspInit+0x44>)
 8000520:	2101      	movs	r1, #1
 8000522:	430a      	orrs	r2, r1
 8000524:	619a      	str	r2, [r3, #24]
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <HAL_MspInit+0x44>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	2201      	movs	r2, #1
 800052c:	4013      	ands	r3, r2
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <HAL_MspInit+0x44>)
 8000534:	69da      	ldr	r2, [r3, #28]
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_MspInit+0x44>)
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	0549      	lsls	r1, r1, #21
 800053c:	430a      	orrs	r2, r1
 800053e:	61da      	str	r2, [r3, #28]
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <HAL_MspInit+0x44>)
 8000542:	69da      	ldr	r2, [r3, #28]
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	055b      	lsls	r3, r3, #21
 8000548:	4013      	ands	r3, r2
 800054a:	603b      	str	r3, [r7, #0]
 800054c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	b002      	add	sp, #8
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40021000 	.word	0x40021000

0800055c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b08b      	sub	sp, #44	; 0x2c
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	2414      	movs	r4, #20
 8000566:	193b      	adds	r3, r7, r4
 8000568:	0018      	movs	r0, r3
 800056a:	2314      	movs	r3, #20
 800056c:	001a      	movs	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	f002 fb9a 	bl	8002ca8 <memset>
  if(huart->Instance==USART1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	; (8000600 <HAL_UART_MspInit+0xa4>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d13b      	bne.n	80005f6 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800057e:	4b21      	ldr	r3, [pc, #132]	; (8000604 <HAL_UART_MspInit+0xa8>)
 8000580:	699a      	ldr	r2, [r3, #24]
 8000582:	4b20      	ldr	r3, [pc, #128]	; (8000604 <HAL_UART_MspInit+0xa8>)
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	01c9      	lsls	r1, r1, #7
 8000588:	430a      	orrs	r2, r1
 800058a:	619a      	str	r2, [r3, #24]
 800058c:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <HAL_UART_MspInit+0xa8>)
 800058e:	699a      	ldr	r2, [r3, #24]
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	01db      	lsls	r3, r3, #7
 8000594:	4013      	ands	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <HAL_UART_MspInit+0xa8>)
 800059c:	695a      	ldr	r2, [r3, #20]
 800059e:	4b19      	ldr	r3, [pc, #100]	; (8000604 <HAL_UART_MspInit+0xa8>)
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	0289      	lsls	r1, r1, #10
 80005a4:	430a      	orrs	r2, r1
 80005a6:	615a      	str	r2, [r3, #20]
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <HAL_UART_MspInit+0xa8>)
 80005aa:	695a      	ldr	r2, [r3, #20]
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	029b      	lsls	r3, r3, #10
 80005b0:	4013      	ands	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	22c0      	movs	r2, #192	; 0xc0
 80005ba:	00d2      	lsls	r2, r2, #3
 80005bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	0021      	movs	r1, r4
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2202      	movs	r2, #2
 80005c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2203      	movs	r2, #3
 80005d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2201      	movs	r2, #1
 80005d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	187a      	adds	r2, r7, r1
 80005da:	2390      	movs	r3, #144	; 0x90
 80005dc:	05db      	lsls	r3, r3, #23
 80005de:	0011      	movs	r1, r2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 fa49 	bl	8000a78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	201b      	movs	r0, #27
 80005ec:	f000 f994 	bl	8000918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005f0:	201b      	movs	r0, #27
 80005f2:	f000 f9a6 	bl	8000942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b00b      	add	sp, #44	; 0x2c
 80005fc:	bd90      	pop	{r4, r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	40013800 	.word	0x40013800
 8000604:	40021000 	.word	0x40021000

08000608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800060c:	e7fe      	b.n	800060c <NMI_Handler+0x4>

0800060e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <HardFault_Handler+0x4>

08000614 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062c:	f000 f888 	bl	8000740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <USART1_IRQHandler+0x14>)
 800063e:	0018      	movs	r0, r3
 8000640:	f001 fa6a 	bl	8001b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	20000028 	.word	0x20000028

08000650 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <LoopForever+0x6>)
  ldr r1, =_edata
 8000662:	490e      	ldr	r1, [pc, #56]	; (800069c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000664:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <LoopForever+0xe>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000668:	e002      	b.n	8000670 <LoopCopyDataInit>

0800066a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800066c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066e:	3304      	adds	r3, #4

08000670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000674:	d3f9      	bcc.n	800066a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000676:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000678:	4c0b      	ldr	r4, [pc, #44]	; (80006a8 <LoopForever+0x16>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800067c:	e001      	b.n	8000682 <LoopFillZerobss>

0800067e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000680:	3204      	adds	r2, #4

08000682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000684:	d3fb      	bcc.n	800067e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000686:	f7ff ffe3 	bl	8000650 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800068a:	f002 fae9 	bl	8002c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fe05 	bl	800029c <main>

08000692 <LoopForever>:

LoopForever:
    b LoopForever
 8000692:	e7fe      	b.n	8000692 <LoopForever>
  ldr   r0, =_estack
 8000694:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800069c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006a0:	08002d50 	.word	0x08002d50
  ldr r2, =_sbss
 80006a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006a8:	2000011c 	.word	0x2000011c

080006ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC1_COMP_IRQHandler>
	...

080006b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <HAL_Init+0x24>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_Init+0x24>)
 80006ba:	2110      	movs	r1, #16
 80006bc:	430a      	orrs	r2, r1
 80006be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006c0:	2003      	movs	r0, #3
 80006c2:	f000 f809 	bl	80006d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c6:	f7ff ff25 	bl	8000514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	0018      	movs	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	40022000 	.word	0x40022000

080006d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <HAL_InitTick+0x5c>)
 80006e2:	681c      	ldr	r4, [r3, #0]
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <HAL_InitTick+0x60>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	0019      	movs	r1, r3
 80006ea:	23fa      	movs	r3, #250	; 0xfa
 80006ec:	0098      	lsls	r0, r3, #2
 80006ee:	f7ff fd0b 	bl	8000108 <__udivsi3>
 80006f2:	0003      	movs	r3, r0
 80006f4:	0019      	movs	r1, r3
 80006f6:	0020      	movs	r0, r4
 80006f8:	f7ff fd06 	bl	8000108 <__udivsi3>
 80006fc:	0003      	movs	r3, r0
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 f92f 	bl	8000962 <HAL_SYSTICK_Config>
 8000704:	1e03      	subs	r3, r0, #0
 8000706:	d001      	beq.n	800070c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000708:	2301      	movs	r3, #1
 800070a:	e00f      	b.n	800072c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b03      	cmp	r3, #3
 8000710:	d80b      	bhi.n	800072a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	2301      	movs	r3, #1
 8000716:	425b      	negs	r3, r3
 8000718:	2200      	movs	r2, #0
 800071a:	0018      	movs	r0, r3
 800071c:	f000 f8fc 	bl	8000918 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_InitTick+0x64>)
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000726:	2300      	movs	r3, #0
 8000728:	e000      	b.n	800072c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
}
 800072c:	0018      	movs	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	b003      	add	sp, #12
 8000732:	bd90      	pop	{r4, r7, pc}
 8000734:	20000000 	.word	0x20000000
 8000738:	20000008 	.word	0x20000008
 800073c:	20000004 	.word	0x20000004

08000740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_IncTick+0x1c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	001a      	movs	r2, r3
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_IncTick+0x20>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	18d2      	adds	r2, r2, r3
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <HAL_IncTick+0x20>)
 8000752:	601a      	str	r2, [r3, #0]
}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	20000008 	.word	0x20000008
 8000760:	20000118 	.word	0x20000118

08000764 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  return uwTick;
 8000768:	4b02      	ldr	r3, [pc, #8]	; (8000774 <HAL_GetTick+0x10>)
 800076a:	681b      	ldr	r3, [r3, #0]
}
 800076c:	0018      	movs	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	20000118 	.word	0x20000118

08000778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000780:	f7ff fff0 	bl	8000764 <HAL_GetTick>
 8000784:	0003      	movs	r3, r0
 8000786:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3301      	adds	r3, #1
 8000790:	d005      	beq.n	800079e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_Delay+0x44>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	001a      	movs	r2, r3
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	189b      	adds	r3, r3, r2
 800079c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	f7ff ffe0 	bl	8000764 <HAL_GetTick>
 80007a4:	0002      	movs	r2, r0
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d8f7      	bhi.n	80007a0 <HAL_Delay+0x28>
  {
  }
}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b004      	add	sp, #16
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	20000008 	.word	0x20000008

080007c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	0002      	movs	r2, r0
 80007c8:	1dfb      	adds	r3, r7, #7
 80007ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b7f      	cmp	r3, #127	; 0x7f
 80007d2:	d809      	bhi.n	80007e8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	001a      	movs	r2, r3
 80007da:	231f      	movs	r3, #31
 80007dc:	401a      	ands	r2, r3
 80007de:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <__NVIC_EnableIRQ+0x30>)
 80007e0:	2101      	movs	r1, #1
 80007e2:	4091      	lsls	r1, r2
 80007e4:	000a      	movs	r2, r1
 80007e6:	601a      	str	r2, [r3, #0]
  }
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b002      	add	sp, #8
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	e000e100 	.word	0xe000e100

080007f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	0002      	movs	r2, r0
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b7f      	cmp	r3, #127	; 0x7f
 8000808:	d828      	bhi.n	800085c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080a:	4a2f      	ldr	r2, [pc, #188]	; (80008c8 <__NVIC_SetPriority+0xd4>)
 800080c:	1dfb      	adds	r3, r7, #7
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b25b      	sxtb	r3, r3
 8000812:	089b      	lsrs	r3, r3, #2
 8000814:	33c0      	adds	r3, #192	; 0xc0
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	589b      	ldr	r3, [r3, r2]
 800081a:	1dfa      	adds	r2, r7, #7
 800081c:	7812      	ldrb	r2, [r2, #0]
 800081e:	0011      	movs	r1, r2
 8000820:	2203      	movs	r2, #3
 8000822:	400a      	ands	r2, r1
 8000824:	00d2      	lsls	r2, r2, #3
 8000826:	21ff      	movs	r1, #255	; 0xff
 8000828:	4091      	lsls	r1, r2
 800082a:	000a      	movs	r2, r1
 800082c:	43d2      	mvns	r2, r2
 800082e:	401a      	ands	r2, r3
 8000830:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	019b      	lsls	r3, r3, #6
 8000836:	22ff      	movs	r2, #255	; 0xff
 8000838:	401a      	ands	r2, r3
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	0018      	movs	r0, r3
 8000840:	2303      	movs	r3, #3
 8000842:	4003      	ands	r3, r0
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000848:	481f      	ldr	r0, [pc, #124]	; (80008c8 <__NVIC_SetPriority+0xd4>)
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b25b      	sxtb	r3, r3
 8000850:	089b      	lsrs	r3, r3, #2
 8000852:	430a      	orrs	r2, r1
 8000854:	33c0      	adds	r3, #192	; 0xc0
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800085a:	e031      	b.n	80008c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <__NVIC_SetPriority+0xd8>)
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	0019      	movs	r1, r3
 8000864:	230f      	movs	r3, #15
 8000866:	400b      	ands	r3, r1
 8000868:	3b08      	subs	r3, #8
 800086a:	089b      	lsrs	r3, r3, #2
 800086c:	3306      	adds	r3, #6
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	18d3      	adds	r3, r2, r3
 8000872:	3304      	adds	r3, #4
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	1dfa      	adds	r2, r7, #7
 8000878:	7812      	ldrb	r2, [r2, #0]
 800087a:	0011      	movs	r1, r2
 800087c:	2203      	movs	r2, #3
 800087e:	400a      	ands	r2, r1
 8000880:	00d2      	lsls	r2, r2, #3
 8000882:	21ff      	movs	r1, #255	; 0xff
 8000884:	4091      	lsls	r1, r2
 8000886:	000a      	movs	r2, r1
 8000888:	43d2      	mvns	r2, r2
 800088a:	401a      	ands	r2, r3
 800088c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	22ff      	movs	r2, #255	; 0xff
 8000894:	401a      	ands	r2, r3
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	0018      	movs	r0, r3
 800089c:	2303      	movs	r3, #3
 800089e:	4003      	ands	r3, r0
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <__NVIC_SetPriority+0xd8>)
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	001c      	movs	r4, r3
 80008ac:	230f      	movs	r3, #15
 80008ae:	4023      	ands	r3, r4
 80008b0:	3b08      	subs	r3, #8
 80008b2:	089b      	lsrs	r3, r3, #2
 80008b4:	430a      	orrs	r2, r1
 80008b6:	3306      	adds	r3, #6
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	18c3      	adds	r3, r0, r3
 80008bc:	3304      	adds	r3, #4
 80008be:	601a      	str	r2, [r3, #0]
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b003      	add	sp, #12
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	e000e100 	.word	0xe000e100
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	1e5a      	subs	r2, r3, #1
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	045b      	lsls	r3, r3, #17
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d301      	bcc.n	80008e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e4:	2301      	movs	r3, #1
 80008e6:	e010      	b.n	800090a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <SysTick_Config+0x44>)
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	3a01      	subs	r2, #1
 80008ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f0:	2301      	movs	r3, #1
 80008f2:	425b      	negs	r3, r3
 80008f4:	2103      	movs	r1, #3
 80008f6:	0018      	movs	r0, r3
 80008f8:	f7ff ff7c 	bl	80007f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <SysTick_Config+0x44>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <SysTick_Config+0x44>)
 8000904:	2207      	movs	r2, #7
 8000906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000908:	2300      	movs	r3, #0
}
 800090a:	0018      	movs	r0, r3
 800090c:	46bd      	mov	sp, r7
 800090e:	b002      	add	sp, #8
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	e000e010 	.word	0xe000e010

08000918 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	210f      	movs	r1, #15
 8000924:	187b      	adds	r3, r7, r1
 8000926:	1c02      	adds	r2, r0, #0
 8000928:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	187b      	adds	r3, r7, r1
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b25b      	sxtb	r3, r3
 8000932:	0011      	movs	r1, r2
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff ff5d 	bl	80007f4 <__NVIC_SetPriority>
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b004      	add	sp, #16
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	0002      	movs	r2, r0
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b25b      	sxtb	r3, r3
 8000954:	0018      	movs	r0, r3
 8000956:	f7ff ff33 	bl	80007c0 <__NVIC_EnableIRQ>
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b002      	add	sp, #8
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff ffaf 	bl	80008d0 <SysTick_Config>
 8000972:	0003      	movs	r3, r0
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	b002      	add	sp, #8
 800097a:	bd80      	pop	{r7, pc}

0800097c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2221      	movs	r2, #33	; 0x21
 8000988:	5c9b      	ldrb	r3, [r3, r2]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b02      	cmp	r3, #2
 800098e:	d008      	beq.n	80009a2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2204      	movs	r2, #4
 8000994:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2220      	movs	r2, #32
 800099a:	2100      	movs	r1, #0
 800099c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e020      	b.n	80009e4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	210e      	movs	r1, #14
 80009ae:	438a      	bics	r2, r1
 80009b0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2101      	movs	r1, #1
 80009be:	438a      	bics	r2, r1
 80009c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ca:	2101      	movs	r1, #1
 80009cc:	4091      	lsls	r1, r2
 80009ce:	000a      	movs	r2, r1
 80009d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2221      	movs	r2, #33	; 0x21
 80009d6:	2101      	movs	r1, #1
 80009d8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2220      	movs	r2, #32
 80009de:	2100      	movs	r1, #0
 80009e0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	0018      	movs	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b002      	add	sp, #8
 80009ea:	bd80      	pop	{r7, pc}

080009ec <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009f4:	210f      	movs	r1, #15
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2221      	movs	r2, #33	; 0x21
 8000a00:	5c9b      	ldrb	r3, [r3, r2]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d006      	beq.n	8000a16 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
 8000a14:	e028      	b.n	8000a68 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	210e      	movs	r1, #14
 8000a22:	438a      	bics	r2, r1
 8000a24:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2101      	movs	r1, #1
 8000a32:	438a      	bics	r2, r1
 8000a34:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a3e:	2101      	movs	r1, #1
 8000a40:	4091      	lsls	r1, r2
 8000a42:	000a      	movs	r2, r1
 8000a44:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2221      	movs	r2, #33	; 0x21
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2220      	movs	r2, #32
 8000a52:	2100      	movs	r1, #0
 8000a54:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d004      	beq.n	8000a68 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	0010      	movs	r0, r2
 8000a66:	4798      	blx	r3
    } 
  }
  return status;
 8000a68:	230f      	movs	r3, #15
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	781b      	ldrb	r3, [r3, #0]
}
 8000a6e:	0018      	movs	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b004      	add	sp, #16
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a86:	e14f      	b.n	8000d28 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	4091      	lsls	r1, r2
 8000a92:	000a      	movs	r2, r1
 8000a94:	4013      	ands	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d100      	bne.n	8000aa0 <HAL_GPIO_Init+0x28>
 8000a9e:	e140      	b.n	8000d22 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d005      	beq.n	8000ab8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d130      	bne.n	8000b1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	409a      	lsls	r2, r3
 8000ac6:	0013      	movs	r3, r2
 8000ac8:	43da      	mvns	r2, r3
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	409a      	lsls	r2, r3
 8000ada:	0013      	movs	r3, r2
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aee:	2201      	movs	r2, #1
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
 8000af4:	0013      	movs	r3, r2
 8000af6:	43da      	mvns	r2, r3
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	091b      	lsrs	r3, r3, #4
 8000b04:	2201      	movs	r2, #1
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
 8000b0c:	0013      	movs	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	2203      	movs	r2, #3
 8000b20:	4013      	ands	r3, r2
 8000b22:	2b03      	cmp	r3, #3
 8000b24:	d017      	beq.n	8000b56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2203      	movs	r2, #3
 8000b32:	409a      	lsls	r2, r3
 8000b34:	0013      	movs	r3, r2
 8000b36:	43da      	mvns	r2, r3
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	409a      	lsls	r2, r3
 8000b48:	0013      	movs	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d123      	bne.n	8000baa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	08da      	lsrs	r2, r3, #3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3208      	adds	r2, #8
 8000b6a:	0092      	lsls	r2, r2, #2
 8000b6c:	58d3      	ldr	r3, [r2, r3]
 8000b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	2207      	movs	r2, #7
 8000b74:	4013      	ands	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	220f      	movs	r2, #15
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	691a      	ldr	r2, [r3, #16]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	2107      	movs	r1, #7
 8000b8e:	400b      	ands	r3, r1
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	409a      	lsls	r2, r3
 8000b94:	0013      	movs	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	08da      	lsrs	r2, r3, #3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3208      	adds	r2, #8
 8000ba4:	0092      	lsls	r2, r2, #2
 8000ba6:	6939      	ldr	r1, [r7, #16]
 8000ba8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	409a      	lsls	r2, r3
 8000bb8:	0013      	movs	r3, r2
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	401a      	ands	r2, r3
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	409a      	lsls	r2, r3
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	23c0      	movs	r3, #192	; 0xc0
 8000be4:	029b      	lsls	r3, r3, #10
 8000be6:	4013      	ands	r3, r2
 8000be8:	d100      	bne.n	8000bec <HAL_GPIO_Init+0x174>
 8000bea:	e09a      	b.n	8000d22 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bec:	4b54      	ldr	r3, [pc, #336]	; (8000d40 <HAL_GPIO_Init+0x2c8>)
 8000bee:	699a      	ldr	r2, [r3, #24]
 8000bf0:	4b53      	ldr	r3, [pc, #332]	; (8000d40 <HAL_GPIO_Init+0x2c8>)
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	619a      	str	r2, [r3, #24]
 8000bf8:	4b51      	ldr	r3, [pc, #324]	; (8000d40 <HAL_GPIO_Init+0x2c8>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4013      	ands	r3, r2
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c04:	4a4f      	ldr	r2, [pc, #316]	; (8000d44 <HAL_GPIO_Init+0x2cc>)
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	089b      	lsrs	r3, r3, #2
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	589b      	ldr	r3, [r3, r2]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	2203      	movs	r2, #3
 8000c16:	4013      	ands	r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	409a      	lsls	r2, r3
 8000c1e:	0013      	movs	r3, r2
 8000c20:	43da      	mvns	r2, r3
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	2390      	movs	r3, #144	; 0x90
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d013      	beq.n	8000c5a <HAL_GPIO_Init+0x1e2>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a44      	ldr	r2, [pc, #272]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d00d      	beq.n	8000c56 <HAL_GPIO_Init+0x1de>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a43      	ldr	r2, [pc, #268]	; (8000d4c <HAL_GPIO_Init+0x2d4>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d007      	beq.n	8000c52 <HAL_GPIO_Init+0x1da>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a42      	ldr	r2, [pc, #264]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d101      	bne.n	8000c4e <HAL_GPIO_Init+0x1d6>
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e006      	b.n	8000c5c <HAL_GPIO_Init+0x1e4>
 8000c4e:	2305      	movs	r3, #5
 8000c50:	e004      	b.n	8000c5c <HAL_GPIO_Init+0x1e4>
 8000c52:	2302      	movs	r3, #2
 8000c54:	e002      	b.n	8000c5c <HAL_GPIO_Init+0x1e4>
 8000c56:	2301      	movs	r3, #1
 8000c58:	e000      	b.n	8000c5c <HAL_GPIO_Init+0x1e4>
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	2103      	movs	r1, #3
 8000c60:	400a      	ands	r2, r1
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	4093      	lsls	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c6c:	4935      	ldr	r1, [pc, #212]	; (8000d44 <HAL_GPIO_Init+0x2cc>)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	089b      	lsrs	r3, r3, #2
 8000c72:	3302      	adds	r3, #2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c7a:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <HAL_GPIO_Init+0x2dc>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	43da      	mvns	r2, r3
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	025b      	lsls	r3, r3, #9
 8000c92:	4013      	ands	r3, r2
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c9e:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <HAL_GPIO_Init+0x2dc>)
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	; (8000d54 <HAL_GPIO_Init+0x2dc>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	43da      	mvns	r2, r3
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	029b      	lsls	r3, r3, #10
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d003      	beq.n	8000cc8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <HAL_GPIO_Init+0x2dc>)
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <HAL_GPIO_Init+0x2dc>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	035b      	lsls	r3, r3, #13
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <HAL_GPIO_Init+0x2dc>)
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_GPIO_Init+0x2dc>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	43da      	mvns	r2, r3
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	039b      	lsls	r3, r3, #14
 8000d10:	4013      	ands	r3, r2
 8000d12:	d003      	beq.n	8000d1c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_GPIO_Init+0x2dc>)
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	40da      	lsrs	r2, r3
 8000d30:	1e13      	subs	r3, r2, #0
 8000d32:	d000      	beq.n	8000d36 <HAL_GPIO_Init+0x2be>
 8000d34:	e6a8      	b.n	8000a88 <HAL_GPIO_Init+0x10>
  } 
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b006      	add	sp, #24
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010000 	.word	0x40010000
 8000d48:	48000400 	.word	0x48000400
 8000d4c:	48000800 	.word	0x48000800
 8000d50:	48000c00 	.word	0x48000c00
 8000d54:	40010400 	.word	0x40010400

08000d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	0008      	movs	r0, r1
 8000d62:	0011      	movs	r1, r2
 8000d64:	1cbb      	adds	r3, r7, #2
 8000d66:	1c02      	adds	r2, r0, #0
 8000d68:	801a      	strh	r2, [r3, #0]
 8000d6a:	1c7b      	adds	r3, r7, #1
 8000d6c:	1c0a      	adds	r2, r1, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d70:	1c7b      	adds	r3, r7, #1
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d004      	beq.n	8000d82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d78:	1cbb      	adds	r3, r7, #2
 8000d7a:	881a      	ldrh	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d80:	e003      	b.n	8000d8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d82:	1cbb      	adds	r3, r7, #2
 8000d84:	881a      	ldrh	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	000a      	movs	r2, r1
 8000d9c:	1cbb      	adds	r3, r7, #2
 8000d9e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000da6:	1cbb      	adds	r3, r7, #2
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4013      	ands	r3, r2
 8000dae:	041a      	lsls	r2, r3, #16
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	1cb9      	adds	r1, r7, #2
 8000db6:	8809      	ldrh	r1, [r1, #0]
 8000db8:	400b      	ands	r3, r1
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	619a      	str	r2, [r3, #24]
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b004      	add	sp, #16
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e301      	b.n	80013de <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2201      	movs	r2, #1
 8000de0:	4013      	ands	r3, r2
 8000de2:	d100      	bne.n	8000de6 <HAL_RCC_OscConfig+0x1e>
 8000de4:	e08d      	b.n	8000f02 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000de6:	4bc3      	ldr	r3, [pc, #780]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	220c      	movs	r2, #12
 8000dec:	4013      	ands	r3, r2
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	d00e      	beq.n	8000e10 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000df2:	4bc0      	ldr	r3, [pc, #768]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	220c      	movs	r2, #12
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2b08      	cmp	r3, #8
 8000dfc:	d116      	bne.n	8000e2c <HAL_RCC_OscConfig+0x64>
 8000dfe:	4bbd      	ldr	r3, [pc, #756]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	025b      	lsls	r3, r3, #9
 8000e06:	401a      	ands	r2, r3
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	025b      	lsls	r3, r3, #9
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d10d      	bne.n	8000e2c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e10:	4bb8      	ldr	r3, [pc, #736]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	029b      	lsls	r3, r3, #10
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d100      	bne.n	8000e1e <HAL_RCC_OscConfig+0x56>
 8000e1c:	e070      	b.n	8000f00 <HAL_RCC_OscConfig+0x138>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d000      	beq.n	8000e28 <HAL_RCC_OscConfig+0x60>
 8000e26:	e06b      	b.n	8000f00 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e2d8      	b.n	80013de <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d107      	bne.n	8000e44 <HAL_RCC_OscConfig+0x7c>
 8000e34:	4baf      	ldr	r3, [pc, #700]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4bae      	ldr	r3, [pc, #696]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e3a:	2180      	movs	r1, #128	; 0x80
 8000e3c:	0249      	lsls	r1, r1, #9
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	e02f      	b.n	8000ea4 <HAL_RCC_OscConfig+0xdc>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d10c      	bne.n	8000e66 <HAL_RCC_OscConfig+0x9e>
 8000e4c:	4ba9      	ldr	r3, [pc, #676]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4ba8      	ldr	r3, [pc, #672]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e52:	49a9      	ldr	r1, [pc, #676]	; (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000e54:	400a      	ands	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	4ba6      	ldr	r3, [pc, #664]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4ba5      	ldr	r3, [pc, #660]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e5e:	49a7      	ldr	r1, [pc, #668]	; (80010fc <HAL_RCC_OscConfig+0x334>)
 8000e60:	400a      	ands	r2, r1
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	e01e      	b.n	8000ea4 <HAL_RCC_OscConfig+0xdc>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b05      	cmp	r3, #5
 8000e6c:	d10e      	bne.n	8000e8c <HAL_RCC_OscConfig+0xc4>
 8000e6e:	4ba1      	ldr	r3, [pc, #644]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4ba0      	ldr	r3, [pc, #640]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	02c9      	lsls	r1, r1, #11
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	4b9d      	ldr	r3, [pc, #628]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b9c      	ldr	r3, [pc, #624]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	0249      	lsls	r1, r1, #9
 8000e86:	430a      	orrs	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	e00b      	b.n	8000ea4 <HAL_RCC_OscConfig+0xdc>
 8000e8c:	4b99      	ldr	r3, [pc, #612]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b98      	ldr	r3, [pc, #608]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e92:	4999      	ldr	r1, [pc, #612]	; (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000e94:	400a      	ands	r2, r1
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	4b96      	ldr	r3, [pc, #600]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b95      	ldr	r3, [pc, #596]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	4997      	ldr	r1, [pc, #604]	; (80010fc <HAL_RCC_OscConfig+0x334>)
 8000ea0:	400a      	ands	r2, r1
 8000ea2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d014      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eac:	f7ff fc5a 	bl	8000764 <HAL_GetTick>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eb6:	f7ff fc55 	bl	8000764 <HAL_GetTick>
 8000eba:	0002      	movs	r2, r0
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b64      	cmp	r3, #100	; 0x64
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e28a      	b.n	80013de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec8:	4b8a      	ldr	r3, [pc, #552]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	029b      	lsls	r3, r3, #10
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d0f0      	beq.n	8000eb6 <HAL_RCC_OscConfig+0xee>
 8000ed4:	e015      	b.n	8000f02 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed6:	f7ff fc45 	bl	8000764 <HAL_GetTick>
 8000eda:	0003      	movs	r3, r0
 8000edc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee0:	f7ff fc40 	bl	8000764 <HAL_GetTick>
 8000ee4:	0002      	movs	r2, r0
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b64      	cmp	r3, #100	; 0x64
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e275      	b.n	80013de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef2:	4b80      	ldr	r3, [pc, #512]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	029b      	lsls	r3, r3, #10
 8000efa:	4013      	ands	r3, r2
 8000efc:	d1f0      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x118>
 8000efe:	e000      	b.n	8000f02 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f00:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2202      	movs	r2, #2
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d100      	bne.n	8000f0e <HAL_RCC_OscConfig+0x146>
 8000f0c:	e069      	b.n	8000fe2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f0e:	4b79      	ldr	r3, [pc, #484]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	220c      	movs	r2, #12
 8000f14:	4013      	ands	r3, r2
 8000f16:	d00b      	beq.n	8000f30 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f18:	4b76      	ldr	r3, [pc, #472]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	220c      	movs	r2, #12
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d11c      	bne.n	8000f5e <HAL_RCC_OscConfig+0x196>
 8000f24:	4b73      	ldr	r3, [pc, #460]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	025b      	lsls	r3, r3, #9
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d116      	bne.n	8000f5e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f30:	4b70      	ldr	r3, [pc, #448]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2202      	movs	r2, #2
 8000f36:	4013      	ands	r3, r2
 8000f38:	d005      	beq.n	8000f46 <HAL_RCC_OscConfig+0x17e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d001      	beq.n	8000f46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e24b      	b.n	80013de <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f46:	4b6b      	ldr	r3, [pc, #428]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	22f8      	movs	r2, #248	; 0xf8
 8000f4c:	4393      	bics	r3, r2
 8000f4e:	0019      	movs	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	00da      	lsls	r2, r3, #3
 8000f56:	4b67      	ldr	r3, [pc, #412]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f5c:	e041      	b.n	8000fe2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d024      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f66:	4b63      	ldr	r3, [pc, #396]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4b62      	ldr	r3, [pc, #392]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f72:	f7ff fbf7 	bl	8000764 <HAL_GetTick>
 8000f76:	0003      	movs	r3, r0
 8000f78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f7c:	f7ff fbf2 	bl	8000764 <HAL_GetTick>
 8000f80:	0002      	movs	r2, r0
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e227      	b.n	80013de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8e:	4b59      	ldr	r3, [pc, #356]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2202      	movs	r2, #2
 8000f94:	4013      	ands	r3, r2
 8000f96:	d0f1      	beq.n	8000f7c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f98:	4b56      	ldr	r3, [pc, #344]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	22f8      	movs	r2, #248	; 0xf8
 8000f9e:	4393      	bics	r3, r2
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	00da      	lsls	r2, r3, #3
 8000fa8:	4b52      	ldr	r3, [pc, #328]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000faa:	430a      	orrs	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	e018      	b.n	8000fe2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fb0:	4b50      	ldr	r3, [pc, #320]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b4f      	ldr	r3, [pc, #316]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	438a      	bics	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fbd2 	bl	8000764 <HAL_GetTick>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fc6:	f7ff fbcd 	bl	8000764 <HAL_GetTick>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e202      	b.n	80013de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd8:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2202      	movs	r2, #2
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d1f1      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2208      	movs	r2, #8
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d036      	beq.n	800105a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d019      	beq.n	8001028 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ff4:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ff8:	4b3e      	ldr	r3, [pc, #248]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001000:	f7ff fbb0 	bl	8000764 <HAL_GetTick>
 8001004:	0003      	movs	r3, r0
 8001006:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001008:	e008      	b.n	800101c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800100a:	f7ff fbab 	bl	8000764 <HAL_GetTick>
 800100e:	0002      	movs	r2, r0
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d901      	bls.n	800101c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e1e0      	b.n	80013de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101c:	4b35      	ldr	r3, [pc, #212]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	2202      	movs	r2, #2
 8001022:	4013      	ands	r3, r2
 8001024:	d0f1      	beq.n	800100a <HAL_RCC_OscConfig+0x242>
 8001026:	e018      	b.n	800105a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001028:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 800102a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800102c:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 800102e:	2101      	movs	r1, #1
 8001030:	438a      	bics	r2, r1
 8001032:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001034:	f7ff fb96 	bl	8000764 <HAL_GetTick>
 8001038:	0003      	movs	r3, r0
 800103a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800103e:	f7ff fb91 	bl	8000764 <HAL_GetTick>
 8001042:	0002      	movs	r2, r0
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e1c6      	b.n	80013de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	2202      	movs	r2, #2
 8001056:	4013      	ands	r3, r2
 8001058:	d1f1      	bne.n	800103e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2204      	movs	r2, #4
 8001060:	4013      	ands	r3, r2
 8001062:	d100      	bne.n	8001066 <HAL_RCC_OscConfig+0x29e>
 8001064:	e0b4      	b.n	80011d0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001066:	201f      	movs	r0, #31
 8001068:	183b      	adds	r3, r7, r0
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8001070:	69da      	ldr	r2, [r3, #28]
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	055b      	lsls	r3, r3, #21
 8001076:	4013      	ands	r3, r2
 8001078:	d110      	bne.n	800109c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 800107c:	69da      	ldr	r2, [r3, #28]
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	0549      	lsls	r1, r1, #21
 8001084:	430a      	orrs	r2, r1
 8001086:	61da      	str	r2, [r3, #28]
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 800108a:	69da      	ldr	r2, [r3, #28]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	055b      	lsls	r3, r3, #21
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001096:	183b      	adds	r3, r7, r0
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <HAL_RCC_OscConfig+0x338>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4013      	ands	r3, r2
 80010a6:	d11a      	bne.n	80010de <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_RCC_OscConfig+0x338>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_RCC_OscConfig+0x338>)
 80010ae:	2180      	movs	r1, #128	; 0x80
 80010b0:	0049      	lsls	r1, r1, #1
 80010b2:	430a      	orrs	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010b6:	f7ff fb55 	bl	8000764 <HAL_GetTick>
 80010ba:	0003      	movs	r3, r0
 80010bc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c0:	f7ff fb50 	bl	8000764 <HAL_GetTick>
 80010c4:	0002      	movs	r2, r0
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b64      	cmp	r3, #100	; 0x64
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e185      	b.n	80013de <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_RCC_OscConfig+0x338>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4013      	ands	r3, r2
 80010dc:	d0f0      	beq.n	80010c0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d10e      	bne.n	8001104 <HAL_RCC_OscConfig+0x33c>
 80010e6:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 80010e8:	6a1a      	ldr	r2, [r3, #32]
 80010ea:	4b02      	ldr	r3, [pc, #8]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 80010ec:	2101      	movs	r1, #1
 80010ee:	430a      	orrs	r2, r1
 80010f0:	621a      	str	r2, [r3, #32]
 80010f2:	e035      	b.n	8001160 <HAL_RCC_OscConfig+0x398>
 80010f4:	40021000 	.word	0x40021000
 80010f8:	fffeffff 	.word	0xfffeffff
 80010fc:	fffbffff 	.word	0xfffbffff
 8001100:	40007000 	.word	0x40007000
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10c      	bne.n	8001126 <HAL_RCC_OscConfig+0x35e>
 800110c:	4bb6      	ldr	r3, [pc, #728]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 800110e:	6a1a      	ldr	r2, [r3, #32]
 8001110:	4bb5      	ldr	r3, [pc, #724]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001112:	2101      	movs	r1, #1
 8001114:	438a      	bics	r2, r1
 8001116:	621a      	str	r2, [r3, #32]
 8001118:	4bb3      	ldr	r3, [pc, #716]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 800111a:	6a1a      	ldr	r2, [r3, #32]
 800111c:	4bb2      	ldr	r3, [pc, #712]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 800111e:	2104      	movs	r1, #4
 8001120:	438a      	bics	r2, r1
 8001122:	621a      	str	r2, [r3, #32]
 8001124:	e01c      	b.n	8001160 <HAL_RCC_OscConfig+0x398>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b05      	cmp	r3, #5
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x380>
 800112e:	4bae      	ldr	r3, [pc, #696]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001130:	6a1a      	ldr	r2, [r3, #32]
 8001132:	4bad      	ldr	r3, [pc, #692]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001134:	2104      	movs	r1, #4
 8001136:	430a      	orrs	r2, r1
 8001138:	621a      	str	r2, [r3, #32]
 800113a:	4bab      	ldr	r3, [pc, #684]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 800113c:	6a1a      	ldr	r2, [r3, #32]
 800113e:	4baa      	ldr	r3, [pc, #680]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001140:	2101      	movs	r1, #1
 8001142:	430a      	orrs	r2, r1
 8001144:	621a      	str	r2, [r3, #32]
 8001146:	e00b      	b.n	8001160 <HAL_RCC_OscConfig+0x398>
 8001148:	4ba7      	ldr	r3, [pc, #668]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 800114a:	6a1a      	ldr	r2, [r3, #32]
 800114c:	4ba6      	ldr	r3, [pc, #664]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 800114e:	2101      	movs	r1, #1
 8001150:	438a      	bics	r2, r1
 8001152:	621a      	str	r2, [r3, #32]
 8001154:	4ba4      	ldr	r3, [pc, #656]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001156:	6a1a      	ldr	r2, [r3, #32]
 8001158:	4ba3      	ldr	r3, [pc, #652]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 800115a:	2104      	movs	r1, #4
 800115c:	438a      	bics	r2, r1
 800115e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d014      	beq.n	8001192 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001168:	f7ff fafc 	bl	8000764 <HAL_GetTick>
 800116c:	0003      	movs	r3, r0
 800116e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001170:	e009      	b.n	8001186 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001172:	f7ff faf7 	bl	8000764 <HAL_GetTick>
 8001176:	0002      	movs	r2, r0
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	4a9b      	ldr	r2, [pc, #620]	; (80013ec <HAL_RCC_OscConfig+0x624>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e12b      	b.n	80013de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001186:	4b98      	ldr	r3, [pc, #608]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	2202      	movs	r2, #2
 800118c:	4013      	ands	r3, r2
 800118e:	d0f0      	beq.n	8001172 <HAL_RCC_OscConfig+0x3aa>
 8001190:	e013      	b.n	80011ba <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001192:	f7ff fae7 	bl	8000764 <HAL_GetTick>
 8001196:	0003      	movs	r3, r0
 8001198:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800119a:	e009      	b.n	80011b0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800119c:	f7ff fae2 	bl	8000764 <HAL_GetTick>
 80011a0:	0002      	movs	r2, r0
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	4a91      	ldr	r2, [pc, #580]	; (80013ec <HAL_RCC_OscConfig+0x624>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e116      	b.n	80013de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b0:	4b8d      	ldr	r3, [pc, #564]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	2202      	movs	r2, #2
 80011b6:	4013      	ands	r3, r2
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011ba:	231f      	movs	r3, #31
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d105      	bne.n	80011d0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c4:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 80011c6:	69da      	ldr	r2, [r3, #28]
 80011c8:	4b87      	ldr	r3, [pc, #540]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 80011ca:	4989      	ldr	r1, [pc, #548]	; (80013f0 <HAL_RCC_OscConfig+0x628>)
 80011cc:	400a      	ands	r2, r1
 80011ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2210      	movs	r2, #16
 80011d6:	4013      	ands	r3, r2
 80011d8:	d063      	beq.n	80012a2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d12a      	bne.n	8001238 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011e2:	4b81      	ldr	r3, [pc, #516]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 80011e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e6:	4b80      	ldr	r3, [pc, #512]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 80011e8:	2104      	movs	r1, #4
 80011ea:	430a      	orrs	r2, r1
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80011ee:	4b7e      	ldr	r3, [pc, #504]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 80011f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011f2:	4b7d      	ldr	r3, [pc, #500]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 80011f4:	2101      	movs	r1, #1
 80011f6:	430a      	orrs	r2, r1
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fab3 	bl	8000764 <HAL_GetTick>
 80011fe:	0003      	movs	r3, r0
 8001200:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001204:	f7ff faae 	bl	8000764 <HAL_GetTick>
 8001208:	0002      	movs	r2, r0
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e0e3      	b.n	80013de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001216:	4b74      	ldr	r3, [pc, #464]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121a:	2202      	movs	r2, #2
 800121c:	4013      	ands	r3, r2
 800121e:	d0f1      	beq.n	8001204 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001220:	4b71      	ldr	r3, [pc, #452]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001224:	22f8      	movs	r2, #248	; 0xf8
 8001226:	4393      	bics	r3, r2
 8001228:	0019      	movs	r1, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	00da      	lsls	r2, r3, #3
 8001230:	4b6d      	ldr	r3, [pc, #436]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001232:	430a      	orrs	r2, r1
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
 8001236:	e034      	b.n	80012a2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	3305      	adds	r3, #5
 800123e:	d111      	bne.n	8001264 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001240:	4b69      	ldr	r3, [pc, #420]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001244:	4b68      	ldr	r3, [pc, #416]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001246:	2104      	movs	r1, #4
 8001248:	438a      	bics	r2, r1
 800124a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800124c:	4b66      	ldr	r3, [pc, #408]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 800124e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001250:	22f8      	movs	r2, #248	; 0xf8
 8001252:	4393      	bics	r3, r2
 8001254:	0019      	movs	r1, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	00da      	lsls	r2, r3, #3
 800125c:	4b62      	ldr	r3, [pc, #392]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 800125e:	430a      	orrs	r2, r1
 8001260:	635a      	str	r2, [r3, #52]	; 0x34
 8001262:	e01e      	b.n	80012a2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001264:	4b60      	ldr	r3, [pc, #384]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001268:	4b5f      	ldr	r3, [pc, #380]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 800126a:	2104      	movs	r1, #4
 800126c:	430a      	orrs	r2, r1
 800126e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001270:	4b5d      	ldr	r3, [pc, #372]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001274:	4b5c      	ldr	r3, [pc, #368]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001276:	2101      	movs	r1, #1
 8001278:	438a      	bics	r2, r1
 800127a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127c:	f7ff fa72 	bl	8000764 <HAL_GetTick>
 8001280:	0003      	movs	r3, r0
 8001282:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001286:	f7ff fa6d 	bl	8000764 <HAL_GetTick>
 800128a:	0002      	movs	r2, r0
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e0a2      	b.n	80013de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001298:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 800129a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129c:	2202      	movs	r2, #2
 800129e:	4013      	ands	r3, r2
 80012a0:	d1f1      	bne.n	8001286 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d100      	bne.n	80012ac <HAL_RCC_OscConfig+0x4e4>
 80012aa:	e097      	b.n	80013dc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012ac:	4b4e      	ldr	r3, [pc, #312]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	220c      	movs	r2, #12
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d100      	bne.n	80012ba <HAL_RCC_OscConfig+0x4f2>
 80012b8:	e06b      	b.n	8001392 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d14c      	bne.n	800135c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c2:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b48      	ldr	r3, [pc, #288]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 80012c8:	494a      	ldr	r1, [pc, #296]	; (80013f4 <HAL_RCC_OscConfig+0x62c>)
 80012ca:	400a      	ands	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ce:	f7ff fa49 	bl	8000764 <HAL_GetTick>
 80012d2:	0003      	movs	r3, r0
 80012d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d8:	f7ff fa44 	bl	8000764 <HAL_GetTick>
 80012dc:	0002      	movs	r2, r0
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e079      	b.n	80013de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ea:	4b3f      	ldr	r3, [pc, #252]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	049b      	lsls	r3, r3, #18
 80012f2:	4013      	ands	r3, r2
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012f6:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 80012f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fa:	220f      	movs	r2, #15
 80012fc:	4393      	bics	r3, r2
 80012fe:	0019      	movs	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001304:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001306:	430a      	orrs	r2, r1
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4a3a      	ldr	r2, [pc, #232]	; (80013f8 <HAL_RCC_OscConfig+0x630>)
 8001310:	4013      	ands	r3, r2
 8001312:	0019      	movs	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	431a      	orrs	r2, r3
 800131e:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001320:	430a      	orrs	r2, r1
 8001322:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001324:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	0449      	lsls	r1, r1, #17
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001332:	f7ff fa17 	bl	8000764 <HAL_GetTick>
 8001336:	0003      	movs	r3, r0
 8001338:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133c:	f7ff fa12 	bl	8000764 <HAL_GetTick>
 8001340:	0002      	movs	r2, r0
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e047      	b.n	80013de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	049b      	lsls	r3, r3, #18
 8001356:	4013      	ands	r3, r2
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0x574>
 800135a:	e03f      	b.n	80013dc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001362:	4924      	ldr	r1, [pc, #144]	; (80013f4 <HAL_RCC_OscConfig+0x62c>)
 8001364:	400a      	ands	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff f9fc 	bl	8000764 <HAL_GetTick>
 800136c:	0003      	movs	r3, r0
 800136e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001372:	f7ff f9f7 	bl	8000764 <HAL_GetTick>
 8001376:	0002      	movs	r2, r0
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e02c      	b.n	80013de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	049b      	lsls	r3, r3, #18
 800138c:	4013      	ands	r3, r2
 800138e:	d1f0      	bne.n	8001372 <HAL_RCC_OscConfig+0x5aa>
 8001390:	e024      	b.n	80013dc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e01f      	b.n	80013de <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <HAL_RCC_OscConfig+0x620>)
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	025b      	lsls	r3, r3, #9
 80013b0:	401a      	ands	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d10e      	bne.n	80013d8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	220f      	movs	r2, #15
 80013be:	401a      	ands	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d107      	bne.n	80013d8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	23f0      	movs	r3, #240	; 0xf0
 80013cc:	039b      	lsls	r3, r3, #14
 80013ce:	401a      	ands	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d001      	beq.n	80013dc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	0018      	movs	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b008      	add	sp, #32
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	40021000 	.word	0x40021000
 80013ec:	00001388 	.word	0x00001388
 80013f0:	efffffff 	.word	0xefffffff
 80013f4:	feffffff 	.word	0xfeffffff
 80013f8:	ffc2ffff 	.word	0xffc2ffff

080013fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0b3      	b.n	8001578 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001410:	4b5b      	ldr	r3, [pc, #364]	; (8001580 <HAL_RCC_ClockConfig+0x184>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2201      	movs	r2, #1
 8001416:	4013      	ands	r3, r2
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d911      	bls.n	8001442 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141e:	4b58      	ldr	r3, [pc, #352]	; (8001580 <HAL_RCC_ClockConfig+0x184>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2201      	movs	r2, #1
 8001424:	4393      	bics	r3, r2
 8001426:	0019      	movs	r1, r3
 8001428:	4b55      	ldr	r3, [pc, #340]	; (8001580 <HAL_RCC_ClockConfig+0x184>)
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001430:	4b53      	ldr	r3, [pc, #332]	; (8001580 <HAL_RCC_ClockConfig+0x184>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2201      	movs	r2, #1
 8001436:	4013      	ands	r3, r2
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d001      	beq.n	8001442 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e09a      	b.n	8001578 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2202      	movs	r2, #2
 8001448:	4013      	ands	r3, r2
 800144a:	d015      	beq.n	8001478 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2204      	movs	r2, #4
 8001452:	4013      	ands	r3, r2
 8001454:	d006      	beq.n	8001464 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001456:	4b4b      	ldr	r3, [pc, #300]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	4b4a      	ldr	r3, [pc, #296]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 800145c:	21e0      	movs	r1, #224	; 0xe0
 800145e:	00c9      	lsls	r1, r1, #3
 8001460:	430a      	orrs	r2, r1
 8001462:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001464:	4b47      	ldr	r3, [pc, #284]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	22f0      	movs	r2, #240	; 0xf0
 800146a:	4393      	bics	r3, r2
 800146c:	0019      	movs	r1, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	4b44      	ldr	r3, [pc, #272]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 8001474:	430a      	orrs	r2, r1
 8001476:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2201      	movs	r2, #1
 800147e:	4013      	ands	r3, r2
 8001480:	d040      	beq.n	8001504 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d107      	bne.n	800149a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148a:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	029b      	lsls	r3, r3, #10
 8001492:	4013      	ands	r3, r2
 8001494:	d114      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e06e      	b.n	8001578 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a2:	4b38      	ldr	r3, [pc, #224]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	049b      	lsls	r3, r3, #18
 80014aa:	4013      	ands	r3, r2
 80014ac:	d108      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e062      	b.n	8001578 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2202      	movs	r2, #2
 80014b8:	4013      	ands	r3, r2
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e05b      	b.n	8001578 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c0:	4b30      	ldr	r3, [pc, #192]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2203      	movs	r2, #3
 80014c6:	4393      	bics	r3, r2
 80014c8:	0019      	movs	r1, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 80014d0:	430a      	orrs	r2, r1
 80014d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d4:	f7ff f946 	bl	8000764 <HAL_GetTick>
 80014d8:	0003      	movs	r3, r0
 80014da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014dc:	e009      	b.n	80014f2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014de:	f7ff f941 	bl	8000764 <HAL_GetTick>
 80014e2:	0002      	movs	r2, r0
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	4a27      	ldr	r2, [pc, #156]	; (8001588 <HAL_RCC_ClockConfig+0x18c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e042      	b.n	8001578 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f2:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	220c      	movs	r2, #12
 80014f8:	401a      	ands	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	429a      	cmp	r2, r3
 8001502:	d1ec      	bne.n	80014de <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_RCC_ClockConfig+0x184>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2201      	movs	r2, #1
 800150a:	4013      	ands	r3, r2
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d211      	bcs.n	8001536 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_RCC_ClockConfig+0x184>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2201      	movs	r2, #1
 8001518:	4393      	bics	r3, r2
 800151a:	0019      	movs	r1, r3
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_RCC_ClockConfig+0x184>)
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_RCC_ClockConfig+0x184>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4013      	ands	r3, r2
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d001      	beq.n	8001536 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e020      	b.n	8001578 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2204      	movs	r2, #4
 800153c:	4013      	ands	r3, r2
 800153e:	d009      	beq.n	8001554 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a11      	ldr	r2, [pc, #68]	; (800158c <HAL_RCC_ClockConfig+0x190>)
 8001546:	4013      	ands	r3, r2
 8001548:	0019      	movs	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 8001550:	430a      	orrs	r2, r1
 8001552:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001554:	f000 f820 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 8001558:	0001      	movs	r1, r0
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	220f      	movs	r2, #15
 8001562:	4013      	ands	r3, r2
 8001564:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_RCC_ClockConfig+0x194>)
 8001566:	5cd3      	ldrb	r3, [r2, r3]
 8001568:	000a      	movs	r2, r1
 800156a:	40da      	lsrs	r2, r3
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_RCC_ClockConfig+0x198>)
 800156e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001570:	2003      	movs	r0, #3
 8001572:	f7ff f8b1 	bl	80006d8 <HAL_InitTick>
  
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b004      	add	sp, #16
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40022000 	.word	0x40022000
 8001584:	40021000 	.word	0x40021000
 8001588:	00001388 	.word	0x00001388
 800158c:	fffff8ff 	.word	0xfffff8ff
 8001590:	08002d30 	.word	0x08002d30
 8001594:	20000000 	.word	0x20000000

08001598 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b08f      	sub	sp, #60	; 0x3c
 800159c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800159e:	2314      	movs	r3, #20
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	4a2b      	ldr	r2, [pc, #172]	; (8001650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015a6:	c313      	stmia	r3!, {r0, r1, r4}
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4a29      	ldr	r2, [pc, #164]	; (8001654 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015b2:	c313      	stmia	r3!, {r0, r1, r4}
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c0:	2300      	movs	r3, #0
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d4:	220c      	movs	r2, #12
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d002      	beq.n	80015e2 <HAL_RCC_GetSysClockFreq+0x4a>
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d003      	beq.n	80015e8 <HAL_RCC_GetSysClockFreq+0x50>
 80015e0:	e02d      	b.n	800163e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <HAL_RCC_GetSysClockFreq+0xc4>)
 80015e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015e6:	e02d      	b.n	8001644 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ea:	0c9b      	lsrs	r3, r3, #18
 80015ec:	220f      	movs	r2, #15
 80015ee:	4013      	ands	r3, r2
 80015f0:	2214      	movs	r2, #20
 80015f2:	18ba      	adds	r2, r7, r2
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	220f      	movs	r2, #15
 80015fe:	4013      	ands	r3, r2
 8001600:	1d3a      	adds	r2, r7, #4
 8001602:	5cd3      	ldrb	r3, [r2, r3]
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	025b      	lsls	r3, r3, #9
 800160c:	4013      	ands	r3, r2
 800160e:	d009      	beq.n	8001624 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001612:	4812      	ldr	r0, [pc, #72]	; (800165c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001614:	f7fe fd78 	bl	8000108 <__udivsi3>
 8001618:	0003      	movs	r3, r0
 800161a:	001a      	movs	r2, r3
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	4353      	muls	r3, r2
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
 8001622:	e009      	b.n	8001638 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001626:	000a      	movs	r2, r1
 8001628:	0152      	lsls	r2, r2, #5
 800162a:	1a52      	subs	r2, r2, r1
 800162c:	0193      	lsls	r3, r2, #6
 800162e:	1a9b      	subs	r3, r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	185b      	adds	r3, r3, r1
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800163c:	e002      	b.n	8001644 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001640:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001642:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	b00f      	add	sp, #60	; 0x3c
 800164c:	bd90      	pop	{r4, r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	08002cd0 	.word	0x08002cd0
 8001654:	08002ce0 	.word	0x08002ce0
 8001658:	40021000 	.word	0x40021000
 800165c:	007a1200 	.word	0x007a1200

08001660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001664:	4b02      	ldr	r3, [pc, #8]	; (8001670 <HAL_RCC_GetHCLKFreq+0x10>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	20000000 	.word	0x20000000

08001674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001678:	f7ff fff2 	bl	8001660 <HAL_RCC_GetHCLKFreq>
 800167c:	0001      	movs	r1, r0
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	2207      	movs	r2, #7
 8001686:	4013      	ands	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_RCC_GetPCLK1Freq+0x28>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	40d9      	lsrs	r1, r3
 800168e:	000b      	movs	r3, r1
}    
 8001690:	0018      	movs	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	40021000 	.word	0x40021000
 800169c:	08002d40 	.word	0x08002d40

080016a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	025b      	lsls	r3, r3, #9
 80016b8:	4013      	ands	r3, r2
 80016ba:	d100      	bne.n	80016be <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80016bc:	e08e      	b.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80016be:	2017      	movs	r0, #23
 80016c0:	183b      	adds	r3, r7, r0
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c6:	4b5f      	ldr	r3, [pc, #380]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	055b      	lsls	r3, r3, #21
 80016ce:	4013      	ands	r3, r2
 80016d0:	d110      	bne.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b5c      	ldr	r3, [pc, #368]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016d4:	69da      	ldr	r2, [r3, #28]
 80016d6:	4b5b      	ldr	r3, [pc, #364]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016d8:	2180      	movs	r1, #128	; 0x80
 80016da:	0549      	lsls	r1, r1, #21
 80016dc:	430a      	orrs	r2, r1
 80016de:	61da      	str	r2, [r3, #28]
 80016e0:	4b58      	ldr	r3, [pc, #352]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016e2:	69da      	ldr	r2, [r3, #28]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	055b      	lsls	r3, r3, #21
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ee:	183b      	adds	r3, r7, r0
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	4b54      	ldr	r3, [pc, #336]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4013      	ands	r3, r2
 80016fe:	d11a      	bne.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001700:	4b51      	ldr	r3, [pc, #324]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b50      	ldr	r3, [pc, #320]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	0049      	lsls	r1, r1, #1
 800170a:	430a      	orrs	r2, r1
 800170c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170e:	f7ff f829 	bl	8000764 <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001716:	e008      	b.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001718:	f7ff f824 	bl	8000764 <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	; 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e087      	b.n	800183a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172a:	4b47      	ldr	r3, [pc, #284]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4013      	ands	r3, r2
 8001734:	d0f0      	beq.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001736:	4b43      	ldr	r3, [pc, #268]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001738:	6a1a      	ldr	r2, [r3, #32]
 800173a:	23c0      	movs	r3, #192	; 0xc0
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4013      	ands	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d034      	beq.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	23c0      	movs	r3, #192	; 0xc0
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4013      	ands	r3, r2
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d02c      	beq.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001758:	4b3a      	ldr	r3, [pc, #232]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4a3b      	ldr	r2, [pc, #236]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800175e:	4013      	ands	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001762:	4b38      	ldr	r3, [pc, #224]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001764:	6a1a      	ldr	r2, [r3, #32]
 8001766:	4b37      	ldr	r3, [pc, #220]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	0249      	lsls	r1, r1, #9
 800176c:	430a      	orrs	r2, r1
 800176e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001770:	4b34      	ldr	r3, [pc, #208]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001772:	6a1a      	ldr	r2, [r3, #32]
 8001774:	4b33      	ldr	r3, [pc, #204]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001776:	4936      	ldr	r1, [pc, #216]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001778:	400a      	ands	r2, r1
 800177a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800177c:	4b31      	ldr	r3, [pc, #196]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2201      	movs	r2, #1
 8001786:	4013      	ands	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7fe ffeb 	bl	8000764 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001792:	e009      	b.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7fe ffe6 	bl	8000764 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	4a2d      	ldr	r2, [pc, #180]	; (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e048      	b.n	800183a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a8:	4b26      	ldr	r3, [pc, #152]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	2202      	movs	r2, #2
 80017ae:	4013      	ands	r3, r2
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	4a25      	ldr	r2, [pc, #148]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4b20      	ldr	r3, [pc, #128]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017c2:	430a      	orrs	r2, r1
 80017c4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017c6:	2317      	movs	r3, #23
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d0:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017d2:	69da      	ldr	r2, [r3, #28]
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017d6:	4920      	ldr	r1, [pc, #128]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80017d8:	400a      	ands	r2, r1
 80017da:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2201      	movs	r2, #1
 80017e2:	4013      	ands	r3, r2
 80017e4:	d009      	beq.n	80017fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	2203      	movs	r2, #3
 80017ec:	4393      	bics	r3, r2
 80017ee:	0019      	movs	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017f6:	430a      	orrs	r2, r1
 80017f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2220      	movs	r2, #32
 8001800:	4013      	ands	r3, r2
 8001802:	d009      	beq.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	2210      	movs	r2, #16
 800180a:	4393      	bics	r3, r2
 800180c:	0019      	movs	r1, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001814:	430a      	orrs	r2, r1
 8001816:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4013      	ands	r3, r2
 8001822:	d009      	beq.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	2240      	movs	r2, #64	; 0x40
 800182a:	4393      	bics	r3, r2
 800182c:	0019      	movs	r1, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001834:	430a      	orrs	r2, r1
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	0018      	movs	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	b006      	add	sp, #24
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	40021000 	.word	0x40021000
 8001848:	40007000 	.word	0x40007000
 800184c:	fffffcff 	.word	0xfffffcff
 8001850:	fffeffff 	.word	0xfffeffff
 8001854:	00001388 	.word	0x00001388
 8001858:	efffffff 	.word	0xefffffff

0800185c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e044      	b.n	80018f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001872:	2b00      	cmp	r3, #0
 8001874:	d107      	bne.n	8001886 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2274      	movs	r2, #116	; 0x74
 800187a:	2100      	movs	r1, #0
 800187c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	0018      	movs	r0, r3
 8001882:	f7fe fe6b 	bl	800055c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2224      	movs	r2, #36	; 0x24
 800188a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2101      	movs	r1, #1
 8001898:	438a      	bics	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 fc2e 	bl	8002100 <UART_SetConfig>
 80018a4:	0003      	movs	r3, r0
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e024      	b.n	80018f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f000 fd61 	bl	8002380 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	490d      	ldr	r1, [pc, #52]	; (8001900 <HAL_UART_Init+0xa4>)
 80018ca:	400a      	ands	r2, r1
 80018cc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	212a      	movs	r1, #42	; 0x2a
 80018da:	438a      	bics	r2, r1
 80018dc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2101      	movs	r1, #1
 80018ea:	430a      	orrs	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	0018      	movs	r0, r3
 80018f2:	f000 fdf9 	bl	80024e8 <UART_CheckIdleState>
 80018f6:	0003      	movs	r3, r0
}
 80018f8:	0018      	movs	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b002      	add	sp, #8
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	ffffb7ff 	.word	0xffffb7ff

08001904 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af02      	add	r7, sp, #8
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	1dbb      	adds	r3, r7, #6
 8001912:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001918:	2b20      	cmp	r3, #32
 800191a:	d000      	beq.n	800191e <HAL_UART_Transmit+0x1a>
 800191c:	e096      	b.n	8001a4c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_UART_Transmit+0x28>
 8001924:	1dbb      	adds	r3, r7, #6
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e08e      	b.n	8001a4e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	015b      	lsls	r3, r3, #5
 8001938:	429a      	cmp	r2, r3
 800193a:	d109      	bne.n	8001950 <HAL_UART_Transmit+0x4c>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d105      	bne.n	8001950 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2201      	movs	r2, #1
 8001948:	4013      	ands	r3, r2
 800194a:	d001      	beq.n	8001950 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e07e      	b.n	8001a4e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2274      	movs	r2, #116	; 0x74
 8001954:	5c9b      	ldrb	r3, [r3, r2]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_UART_Transmit+0x5a>
 800195a:	2302      	movs	r3, #2
 800195c:	e077      	b.n	8001a4e <HAL_UART_Transmit+0x14a>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2274      	movs	r2, #116	; 0x74
 8001962:	2101      	movs	r1, #1
 8001964:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	2100      	movs	r1, #0
 800196c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2221      	movs	r2, #33	; 0x21
 8001972:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001974:	f7fe fef6 	bl	8000764 <HAL_GetTick>
 8001978:	0003      	movs	r3, r0
 800197a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1dba      	adds	r2, r7, #6
 8001980:	2150      	movs	r1, #80	; 0x50
 8001982:	8812      	ldrh	r2, [r2, #0]
 8001984:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1dba      	adds	r2, r7, #6
 800198a:	2152      	movs	r1, #82	; 0x52
 800198c:	8812      	ldrh	r2, [r2, #0]
 800198e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	015b      	lsls	r3, r3, #5
 8001998:	429a      	cmp	r2, r3
 800199a:	d108      	bne.n	80019ae <HAL_UART_Transmit+0xaa>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d104      	bne.n	80019ae <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	e003      	b.n	80019b6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2274      	movs	r2, #116	; 0x74
 80019ba:	2100      	movs	r1, #0
 80019bc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80019be:	e02d      	b.n	8001a1c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	0013      	movs	r3, r2
 80019ca:	2200      	movs	r2, #0
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	f000 fdd3 	bl	8002578 <UART_WaitOnFlagUntilTimeout>
 80019d2:	1e03      	subs	r3, r0, #0
 80019d4:	d001      	beq.n	80019da <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e039      	b.n	8001a4e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10b      	bne.n	80019f8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	881a      	ldrh	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	05d2      	lsls	r2, r2, #23
 80019ea:	0dd2      	lsrs	r2, r2, #23
 80019ec:	b292      	uxth	r2, r2
 80019ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	3302      	adds	r3, #2
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	e008      	b.n	8001a0a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	b292      	uxth	r2, r2
 8001a02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	3301      	adds	r3, #1
 8001a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2252      	movs	r2, #82	; 0x52
 8001a0e:	5a9b      	ldrh	r3, [r3, r2]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b299      	uxth	r1, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2252      	movs	r2, #82	; 0x52
 8001a1a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2252      	movs	r2, #82	; 0x52
 8001a20:	5a9b      	ldrh	r3, [r3, r2]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1cb      	bne.n	80019c0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	0013      	movs	r3, r2
 8001a32:	2200      	movs	r2, #0
 8001a34:	2140      	movs	r1, #64	; 0x40
 8001a36:	f000 fd9f 	bl	8002578 <UART_WaitOnFlagUntilTimeout>
 8001a3a:	1e03      	subs	r3, r0, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e005      	b.n	8001a4e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2220      	movs	r2, #32
 8001a46:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e000      	b.n	8001a4e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001a4c:	2302      	movs	r3, #2
  }
}
 8001a4e:	0018      	movs	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b008      	add	sp, #32
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b088      	sub	sp, #32
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	1dbb      	adds	r3, r7, #6
 8001a62:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a68:	2b20      	cmp	r3, #32
 8001a6a:	d150      	bne.n	8001b0e <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_UART_Receive_IT+0x24>
 8001a72:	1dbb      	adds	r3, r7, #6
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e048      	b.n	8001b10 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	015b      	lsls	r3, r3, #5
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d109      	bne.n	8001a9e <HAL_UART_Receive_IT+0x48>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d105      	bne.n	8001a9e <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2201      	movs	r2, #1
 8001a96:	4013      	ands	r3, r2
 8001a98:	d001      	beq.n	8001a9e <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e038      	b.n	8001b10 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2274      	movs	r2, #116	; 0x74
 8001aa2:	5c9b      	ldrb	r3, [r3, r2]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_UART_Receive_IT+0x56>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e031      	b.n	8001b10 <HAL_UART_Receive_IT+0xba>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2274      	movs	r2, #116	; 0x74
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	041b      	lsls	r3, r3, #16
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d019      	beq.n	8001afc <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8001acc:	613b      	str	r3, [r7, #16]
  return(result);
 8001ace:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f383 8810 	msr	PRIMASK, r3
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2180      	movs	r1, #128	; 0x80
 8001aea:	04c9      	lsls	r1, r1, #19
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	f383 8810 	msr	PRIMASK, r3
}
 8001afa:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001afc:	1dbb      	adds	r3, r7, #6
 8001afe:	881a      	ldrh	r2, [r3, #0]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f000 fdfb 	bl	8002700 <UART_Start_Receive_IT>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	e000      	b.n	8001b10 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8001b0e:	2302      	movs	r3, #2
  }
}
 8001b10:	0018      	movs	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b008      	add	sp, #32
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b0ab      	sub	sp, #172	; 0xac
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	22a4      	movs	r2, #164	; 0xa4
 8001b28:	18b9      	adds	r1, r7, r2
 8001b2a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	20a0      	movs	r0, #160	; 0xa0
 8001b34:	1839      	adds	r1, r7, r0
 8001b36:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	219c      	movs	r1, #156	; 0x9c
 8001b40:	1879      	adds	r1, r7, r1
 8001b42:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001b44:	0011      	movs	r1, r2
 8001b46:	18bb      	adds	r3, r7, r2
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a99      	ldr	r2, [pc, #612]	; (8001db0 <HAL_UART_IRQHandler+0x298>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2298      	movs	r2, #152	; 0x98
 8001b50:	18bc      	adds	r4, r7, r2
 8001b52:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001b54:	18bb      	adds	r3, r7, r2
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d114      	bne.n	8001b86 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001b5c:	187b      	adds	r3, r7, r1
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2220      	movs	r2, #32
 8001b62:	4013      	ands	r3, r2
 8001b64:	d00f      	beq.n	8001b86 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001b66:	183b      	adds	r3, r7, r0
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d00a      	beq.n	8001b86 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d100      	bne.n	8001b7a <HAL_UART_IRQHandler+0x62>
 8001b78:	e296      	b.n	80020a8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	0010      	movs	r0, r2
 8001b82:	4798      	blx	r3
      }
      return;
 8001b84:	e290      	b.n	80020a8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001b86:	2398      	movs	r3, #152	; 0x98
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d100      	bne.n	8001b92 <HAL_UART_IRQHandler+0x7a>
 8001b90:	e114      	b.n	8001dbc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001b92:	239c      	movs	r3, #156	; 0x9c
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d106      	bne.n	8001bac <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001b9e:	23a0      	movs	r3, #160	; 0xa0
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a83      	ldr	r2, [pc, #524]	; (8001db4 <HAL_UART_IRQHandler+0x29c>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d100      	bne.n	8001bac <HAL_UART_IRQHandler+0x94>
 8001baa:	e107      	b.n	8001dbc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001bac:	23a4      	movs	r3, #164	; 0xa4
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d012      	beq.n	8001bde <HAL_UART_IRQHandler+0xc6>
 8001bb8:	23a0      	movs	r3, #160	; 0xa0
 8001bba:	18fb      	adds	r3, r7, r3
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d00b      	beq.n	8001bde <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2280      	movs	r2, #128	; 0x80
 8001bd2:	589b      	ldr	r3, [r3, r2]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001bde:	23a4      	movs	r3, #164	; 0xa4
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2202      	movs	r2, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	d011      	beq.n	8001c0e <HAL_UART_IRQHandler+0xf6>
 8001bea:	239c      	movs	r3, #156	; 0x9c
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d00b      	beq.n	8001c0e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	589b      	ldr	r3, [r3, r2]
 8001c04:	2204      	movs	r2, #4
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2180      	movs	r1, #128	; 0x80
 8001c0c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001c0e:	23a4      	movs	r3, #164	; 0xa4
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2204      	movs	r2, #4
 8001c16:	4013      	ands	r3, r2
 8001c18:	d011      	beq.n	8001c3e <HAL_UART_IRQHandler+0x126>
 8001c1a:	239c      	movs	r3, #156	; 0x9c
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2201      	movs	r2, #1
 8001c22:	4013      	ands	r3, r2
 8001c24:	d00b      	beq.n	8001c3e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2280      	movs	r2, #128	; 0x80
 8001c32:	589b      	ldr	r3, [r3, r2]
 8001c34:	2202      	movs	r2, #2
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001c3e:	23a4      	movs	r3, #164	; 0xa4
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2208      	movs	r2, #8
 8001c46:	4013      	ands	r3, r2
 8001c48:	d017      	beq.n	8001c7a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001c4a:	23a0      	movs	r3, #160	; 0xa0
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2220      	movs	r2, #32
 8001c52:	4013      	ands	r3, r2
 8001c54:	d105      	bne.n	8001c62 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001c56:	239c      	movs	r3, #156	; 0x9c
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001c60:	d00b      	beq.n	8001c7a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2208      	movs	r2, #8
 8001c68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2280      	movs	r2, #128	; 0x80
 8001c6e:	589b      	ldr	r3, [r3, r2]
 8001c70:	2208      	movs	r2, #8
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2180      	movs	r1, #128	; 0x80
 8001c78:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001c7a:	23a4      	movs	r3, #164	; 0xa4
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	4013      	ands	r3, r2
 8001c86:	d013      	beq.n	8001cb0 <HAL_UART_IRQHandler+0x198>
 8001c88:	23a0      	movs	r3, #160	; 0xa0
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	04db      	lsls	r3, r3, #19
 8001c92:	4013      	ands	r3, r2
 8001c94:	d00c      	beq.n	8001cb0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2280      	movs	r2, #128	; 0x80
 8001ca4:	589b      	ldr	r3, [r3, r2]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2180      	movs	r1, #128	; 0x80
 8001cae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2280      	movs	r2, #128	; 0x80
 8001cb4:	589b      	ldr	r3, [r3, r2]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <HAL_UART_IRQHandler+0x1a4>
 8001cba:	e1f7      	b.n	80020ac <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001cbc:	23a4      	movs	r3, #164	; 0xa4
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d00e      	beq.n	8001ce6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001cc8:	23a0      	movs	r3, #160	; 0xa0
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d008      	beq.n	8001ce6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	0010      	movs	r0, r2
 8001ce4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	589b      	ldr	r3, [r3, r2]
 8001cec:	2194      	movs	r1, #148	; 0x94
 8001cee:	187a      	adds	r2, r7, r1
 8001cf0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2240      	movs	r2, #64	; 0x40
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b40      	cmp	r3, #64	; 0x40
 8001cfe:	d004      	beq.n	8001d0a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2228      	movs	r2, #40	; 0x28
 8001d06:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d08:	d047      	beq.n	8001d9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f000 fd93 	bl	8002838 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2240      	movs	r2, #64	; 0x40
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b40      	cmp	r3, #64	; 0x40
 8001d1e:	d137      	bne.n	8001d90 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d20:	f3ef 8310 	mrs	r3, PRIMASK
 8001d24:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001d26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d28:	2090      	movs	r0, #144	; 0x90
 8001d2a:	183a      	adds	r2, r7, r0
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d34:	f383 8810 	msr	PRIMASK, r3
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2140      	movs	r1, #64	; 0x40
 8001d46:	438a      	bics	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	183b      	adds	r3, r7, r0
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d52:	f383 8810 	msr	PRIMASK, r3
}
 8001d56:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d012      	beq.n	8001d86 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_UART_IRQHandler+0x2a0>)
 8001d66:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7fe fe3d 	bl	80009ec <HAL_DMA_Abort_IT>
 8001d72:	1e03      	subs	r3, r0, #0
 8001d74:	d01a      	beq.n	8001dac <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d80:	0018      	movs	r0, r3
 8001d82:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d84:	e012      	b.n	8001dac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 f9a5 	bl	80020d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d8e:	e00d      	b.n	8001dac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	0018      	movs	r0, r3
 8001d94:	f000 f9a0 	bl	80020d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d98:	e008      	b.n	8001dac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f000 f99b 	bl	80020d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2280      	movs	r2, #128	; 0x80
 8001da6:	2100      	movs	r1, #0
 8001da8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001daa:	e17f      	b.n	80020ac <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dac:	46c0      	nop			; (mov r8, r8)
    return;
 8001dae:	e17d      	b.n	80020ac <HAL_UART_IRQHandler+0x594>
 8001db0:	0000080f 	.word	0x0000080f
 8001db4:	04000120 	.word	0x04000120
 8001db8:	080028fd 	.word	0x080028fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d000      	beq.n	8001dc6 <HAL_UART_IRQHandler+0x2ae>
 8001dc4:	e131      	b.n	800202a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001dc6:	23a4      	movs	r3, #164	; 0xa4
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2210      	movs	r2, #16
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d100      	bne.n	8001dd4 <HAL_UART_IRQHandler+0x2bc>
 8001dd2:	e12a      	b.n	800202a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001dd4:	23a0      	movs	r3, #160	; 0xa0
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2210      	movs	r2, #16
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d100      	bne.n	8001de2 <HAL_UART_IRQHandler+0x2ca>
 8001de0:	e123      	b.n	800202a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2210      	movs	r2, #16
 8001de8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2240      	movs	r2, #64	; 0x40
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b40      	cmp	r3, #64	; 0x40
 8001df6:	d000      	beq.n	8001dfa <HAL_UART_IRQHandler+0x2e2>
 8001df8:	e09b      	b.n	8001f32 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	217e      	movs	r1, #126	; 0x7e
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001e08:	187b      	adds	r3, r7, r1
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d100      	bne.n	8001e12 <HAL_UART_IRQHandler+0x2fa>
 8001e10:	e14e      	b.n	80020b0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2258      	movs	r2, #88	; 0x58
 8001e16:	5a9b      	ldrh	r3, [r3, r2]
 8001e18:	187a      	adds	r2, r7, r1
 8001e1a:	8812      	ldrh	r2, [r2, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d300      	bcc.n	8001e22 <HAL_UART_IRQHandler+0x30a>
 8001e20:	e146      	b.n	80020b0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	187a      	adds	r2, r7, r1
 8001e26:	215a      	movs	r1, #90	; 0x5a
 8001e28:	8812      	ldrh	r2, [r2, #0]
 8001e2a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b20      	cmp	r3, #32
 8001e34:	d06e      	beq.n	8001f14 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e36:	f3ef 8310 	mrs	r3, PRIMASK
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e40:	2301      	movs	r3, #1
 8001e42:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e46:	f383 8810 	msr	PRIMASK, r3
}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	499a      	ldr	r1, [pc, #616]	; (80020c0 <HAL_UART_IRQHandler+0x5a8>)
 8001e58:	400a      	ands	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e62:	f383 8810 	msr	PRIMASK, r3
}
 8001e66:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e68:	f3ef 8310 	mrs	r3, PRIMASK
 8001e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e70:	677b      	str	r3, [r7, #116]	; 0x74
 8001e72:	2301      	movs	r3, #1
 8001e74:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e78:	f383 8810 	msr	PRIMASK, r3
}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	438a      	bics	r2, r1
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e90:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e94:	f383 8810 	msr	PRIMASK, r3
}
 8001e98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ea2:	673b      	str	r3, [r7, #112]	; 0x70
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eaa:	f383 8810 	msr	PRIMASK, r3
}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2140      	movs	r1, #64	; 0x40
 8001ebc:	438a      	bics	r2, r1
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ec2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ec6:	f383 8810 	msr	PRIMASK, r3
}
 8001eca:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8001edc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ee8:	f383 8810 	msr	PRIMASK, r3
}
 8001eec:	46c0      	nop			; (mov r8, r8)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2110      	movs	r1, #16
 8001efa:	438a      	bics	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f00:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f04:	f383 8810 	msr	PRIMASK, r3
}
 8001f08:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f7fe fd34 	bl	800097c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2258      	movs	r2, #88	; 0x58
 8001f18:	5a9a      	ldrh	r2, [r3, r2]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	215a      	movs	r1, #90	; 0x5a
 8001f1e:	5a5b      	ldrh	r3, [r3, r1]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	0011      	movs	r1, r2
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f000 f8dc 	bl	80020e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001f30:	e0be      	b.n	80020b0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2258      	movs	r2, #88	; 0x58
 8001f36:	5a99      	ldrh	r1, [r3, r2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	225a      	movs	r2, #90	; 0x5a
 8001f3c:	5a9b      	ldrh	r3, [r3, r2]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	208e      	movs	r0, #142	; 0x8e
 8001f42:	183b      	adds	r3, r7, r0
 8001f44:	1a8a      	subs	r2, r1, r2
 8001f46:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	225a      	movs	r2, #90	; 0x5a
 8001f4c:	5a9b      	ldrh	r3, [r3, r2]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d100      	bne.n	8001f56 <HAL_UART_IRQHandler+0x43e>
 8001f54:	e0ae      	b.n	80020b4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8001f56:	183b      	adds	r3, r7, r0
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d100      	bne.n	8001f60 <HAL_UART_IRQHandler+0x448>
 8001f5e:	e0a9      	b.n	80020b4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f60:	f3ef 8310 	mrs	r3, PRIMASK
 8001f64:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f66:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f68:	2488      	movs	r4, #136	; 0x88
 8001f6a:	193a      	adds	r2, r7, r4
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	2301      	movs	r3, #1
 8001f70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	f383 8810 	msr	PRIMASK, r3
}
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	494f      	ldr	r1, [pc, #316]	; (80020c4 <HAL_UART_IRQHandler+0x5ac>)
 8001f86:	400a      	ands	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	193b      	adds	r3, r7, r4
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f383 8810 	msr	PRIMASK, r3
}
 8001f96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f98:	f3ef 8310 	mrs	r3, PRIMASK
 8001f9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8001f9e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fa0:	2484      	movs	r4, #132	; 0x84
 8001fa2:	193a      	adds	r2, r7, r4
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f383 8810 	msr	PRIMASK, r3
}
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	438a      	bics	r2, r1
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	193b      	adds	r3, r7, r4
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	f383 8810 	msr	PRIMASK, r3
}
 8001fce:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fea:	2480      	movs	r4, #128	; 0x80
 8001fec:	193a      	adds	r2, r7, r4
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff6:	f383 8810 	msr	PRIMASK, r3
}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2110      	movs	r1, #16
 8002008:	438a      	bics	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	193b      	adds	r3, r7, r4
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002014:	f383 8810 	msr	PRIMASK, r3
}
 8002018:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800201a:	183b      	adds	r3, r7, r0
 800201c:	881a      	ldrh	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0011      	movs	r1, r2
 8002022:	0018      	movs	r0, r3
 8002024:	f000 f860 	bl	80020e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002028:	e044      	b.n	80020b4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800202a:	23a4      	movs	r3, #164	; 0xa4
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	035b      	lsls	r3, r3, #13
 8002034:	4013      	ands	r3, r2
 8002036:	d010      	beq.n	800205a <HAL_UART_IRQHandler+0x542>
 8002038:	239c      	movs	r3, #156	; 0x9c
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	03db      	lsls	r3, r3, #15
 8002042:	4013      	ands	r3, r2
 8002044:	d009      	beq.n	800205a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2280      	movs	r2, #128	; 0x80
 800204c:	0352      	lsls	r2, r2, #13
 800204e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	0018      	movs	r0, r3
 8002054:	f000 fdfc 	bl	8002c50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002058:	e02f      	b.n	80020ba <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800205a:	23a4      	movs	r3, #164	; 0xa4
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2280      	movs	r2, #128	; 0x80
 8002062:	4013      	ands	r3, r2
 8002064:	d00f      	beq.n	8002086 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002066:	23a0      	movs	r3, #160	; 0xa0
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2280      	movs	r2, #128	; 0x80
 800206e:	4013      	ands	r3, r2
 8002070:	d009      	beq.n	8002086 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002076:	2b00      	cmp	r3, #0
 8002078:	d01e      	beq.n	80020b8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	0010      	movs	r0, r2
 8002082:	4798      	blx	r3
    }
    return;
 8002084:	e018      	b.n	80020b8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002086:	23a4      	movs	r3, #164	; 0xa4
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2240      	movs	r2, #64	; 0x40
 800208e:	4013      	ands	r3, r2
 8002090:	d013      	beq.n	80020ba <HAL_UART_IRQHandler+0x5a2>
 8002092:	23a0      	movs	r3, #160	; 0xa0
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2240      	movs	r2, #64	; 0x40
 800209a:	4013      	ands	r3, r2
 800209c:	d00d      	beq.n	80020ba <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f000 fc42 	bl	800292a <UART_EndTransmit_IT>
    return;
 80020a6:	e008      	b.n	80020ba <HAL_UART_IRQHandler+0x5a2>
      return;
 80020a8:	46c0      	nop			; (mov r8, r8)
 80020aa:	e006      	b.n	80020ba <HAL_UART_IRQHandler+0x5a2>
    return;
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	e004      	b.n	80020ba <HAL_UART_IRQHandler+0x5a2>
      return;
 80020b0:	46c0      	nop			; (mov r8, r8)
 80020b2:	e002      	b.n	80020ba <HAL_UART_IRQHandler+0x5a2>
      return;
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	e000      	b.n	80020ba <HAL_UART_IRQHandler+0x5a2>
    return;
 80020b8:	46c0      	nop			; (mov r8, r8)
  }

}
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b02b      	add	sp, #172	; 0xac
 80020be:	bd90      	pop	{r4, r7, pc}
 80020c0:	fffffeff 	.word	0xfffffeff
 80020c4:	fffffedf 	.word	0xfffffedf

080020c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b002      	add	sp, #8
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b002      	add	sp, #8
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	000a      	movs	r2, r1
 80020f2:	1cbb      	adds	r3, r7, #2
 80020f4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b002      	add	sp, #8
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002108:	231e      	movs	r3, #30
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	4313      	orrs	r3, r2
 8002126:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a8d      	ldr	r2, [pc, #564]	; (8002364 <UART_SetConfig+0x264>)
 8002130:	4013      	ands	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a88      	ldr	r2, [pc, #544]	; (8002368 <UART_SetConfig+0x268>)
 8002146:	4013      	ands	r3, r2
 8002148:	0019      	movs	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	4313      	orrs	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4a7f      	ldr	r2, [pc, #508]	; (800236c <UART_SetConfig+0x26c>)
 800216e:	4013      	ands	r3, r2
 8002170:	0019      	movs	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	430a      	orrs	r2, r1
 800217a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a7b      	ldr	r2, [pc, #492]	; (8002370 <UART_SetConfig+0x270>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d127      	bne.n	80021d6 <UART_SetConfig+0xd6>
 8002186:	4b7b      	ldr	r3, [pc, #492]	; (8002374 <UART_SetConfig+0x274>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	2203      	movs	r2, #3
 800218c:	4013      	ands	r3, r2
 800218e:	2b03      	cmp	r3, #3
 8002190:	d00d      	beq.n	80021ae <UART_SetConfig+0xae>
 8002192:	d81b      	bhi.n	80021cc <UART_SetConfig+0xcc>
 8002194:	2b02      	cmp	r3, #2
 8002196:	d014      	beq.n	80021c2 <UART_SetConfig+0xc2>
 8002198:	d818      	bhi.n	80021cc <UART_SetConfig+0xcc>
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <UART_SetConfig+0xa4>
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d00a      	beq.n	80021b8 <UART_SetConfig+0xb8>
 80021a2:	e013      	b.n	80021cc <UART_SetConfig+0xcc>
 80021a4:	231f      	movs	r3, #31
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	e021      	b.n	80021f2 <UART_SetConfig+0xf2>
 80021ae:	231f      	movs	r3, #31
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2202      	movs	r2, #2
 80021b4:	701a      	strb	r2, [r3, #0]
 80021b6:	e01c      	b.n	80021f2 <UART_SetConfig+0xf2>
 80021b8:	231f      	movs	r3, #31
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	2204      	movs	r2, #4
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	e017      	b.n	80021f2 <UART_SetConfig+0xf2>
 80021c2:	231f      	movs	r3, #31
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	2208      	movs	r2, #8
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e012      	b.n	80021f2 <UART_SetConfig+0xf2>
 80021cc:	231f      	movs	r3, #31
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	2210      	movs	r2, #16
 80021d2:	701a      	strb	r2, [r3, #0]
 80021d4:	e00d      	b.n	80021f2 <UART_SetConfig+0xf2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a67      	ldr	r2, [pc, #412]	; (8002378 <UART_SetConfig+0x278>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d104      	bne.n	80021ea <UART_SetConfig+0xea>
 80021e0:	231f      	movs	r3, #31
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	e003      	b.n	80021f2 <UART_SetConfig+0xf2>
 80021ea:	231f      	movs	r3, #31
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	2210      	movs	r2, #16
 80021f0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69da      	ldr	r2, [r3, #28]
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d15d      	bne.n	80022ba <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80021fe:	231f      	movs	r3, #31
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b08      	cmp	r3, #8
 8002206:	d015      	beq.n	8002234 <UART_SetConfig+0x134>
 8002208:	dc18      	bgt.n	800223c <UART_SetConfig+0x13c>
 800220a:	2b04      	cmp	r3, #4
 800220c:	d00d      	beq.n	800222a <UART_SetConfig+0x12a>
 800220e:	dc15      	bgt.n	800223c <UART_SetConfig+0x13c>
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <UART_SetConfig+0x11a>
 8002214:	2b02      	cmp	r3, #2
 8002216:	d005      	beq.n	8002224 <UART_SetConfig+0x124>
 8002218:	e010      	b.n	800223c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800221a:	f7ff fa2b 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 800221e:	0003      	movs	r3, r0
 8002220:	61bb      	str	r3, [r7, #24]
        break;
 8002222:	e012      	b.n	800224a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002224:	4b55      	ldr	r3, [pc, #340]	; (800237c <UART_SetConfig+0x27c>)
 8002226:	61bb      	str	r3, [r7, #24]
        break;
 8002228:	e00f      	b.n	800224a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800222a:	f7ff f9b5 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 800222e:	0003      	movs	r3, r0
 8002230:	61bb      	str	r3, [r7, #24]
        break;
 8002232:	e00a      	b.n	800224a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	61bb      	str	r3, [r7, #24]
        break;
 800223a:	e006      	b.n	800224a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002240:	231e      	movs	r3, #30
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
        break;
 8002248:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d100      	bne.n	8002252 <UART_SetConfig+0x152>
 8002250:	e07b      	b.n	800234a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	005a      	lsls	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	085b      	lsrs	r3, r3, #1
 800225c:	18d2      	adds	r2, r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	0019      	movs	r1, r3
 8002264:	0010      	movs	r0, r2
 8002266:	f7fd ff4f 	bl	8000108 <__udivsi3>
 800226a:	0003      	movs	r3, r0
 800226c:	b29b      	uxth	r3, r3
 800226e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2b0f      	cmp	r3, #15
 8002274:	d91c      	bls.n	80022b0 <UART_SetConfig+0x1b0>
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	025b      	lsls	r3, r3, #9
 800227c:	429a      	cmp	r2, r3
 800227e:	d217      	bcs.n	80022b0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	b29a      	uxth	r2, r3
 8002284:	200e      	movs	r0, #14
 8002286:	183b      	adds	r3, r7, r0
 8002288:	210f      	movs	r1, #15
 800228a:	438a      	bics	r2, r1
 800228c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	085b      	lsrs	r3, r3, #1
 8002292:	b29b      	uxth	r3, r3
 8002294:	2207      	movs	r2, #7
 8002296:	4013      	ands	r3, r2
 8002298:	b299      	uxth	r1, r3
 800229a:	183b      	adds	r3, r7, r0
 800229c:	183a      	adds	r2, r7, r0
 800229e:	8812      	ldrh	r2, [r2, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	183a      	adds	r2, r7, r0
 80022aa:	8812      	ldrh	r2, [r2, #0]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	e04c      	b.n	800234a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80022b0:	231e      	movs	r3, #30
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	e047      	b.n	800234a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80022ba:	231f      	movs	r3, #31
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d015      	beq.n	80022f0 <UART_SetConfig+0x1f0>
 80022c4:	dc18      	bgt.n	80022f8 <UART_SetConfig+0x1f8>
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d00d      	beq.n	80022e6 <UART_SetConfig+0x1e6>
 80022ca:	dc15      	bgt.n	80022f8 <UART_SetConfig+0x1f8>
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <UART_SetConfig+0x1d6>
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d005      	beq.n	80022e0 <UART_SetConfig+0x1e0>
 80022d4:	e010      	b.n	80022f8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022d6:	f7ff f9cd 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 80022da:	0003      	movs	r3, r0
 80022dc:	61bb      	str	r3, [r7, #24]
        break;
 80022de:	e012      	b.n	8002306 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022e0:	4b26      	ldr	r3, [pc, #152]	; (800237c <UART_SetConfig+0x27c>)
 80022e2:	61bb      	str	r3, [r7, #24]
        break;
 80022e4:	e00f      	b.n	8002306 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022e6:	f7ff f957 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 80022ea:	0003      	movs	r3, r0
 80022ec:	61bb      	str	r3, [r7, #24]
        break;
 80022ee:	e00a      	b.n	8002306 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	61bb      	str	r3, [r7, #24]
        break;
 80022f6:	e006      	b.n	8002306 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80022fc:	231e      	movs	r3, #30
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	2201      	movs	r2, #1
 8002302:	701a      	strb	r2, [r3, #0]
        break;
 8002304:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01e      	beq.n	800234a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	085a      	lsrs	r2, r3, #1
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	18d2      	adds	r2, r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	0019      	movs	r1, r3
 800231c:	0010      	movs	r0, r2
 800231e:	f7fd fef3 	bl	8000108 <__udivsi3>
 8002322:	0003      	movs	r3, r0
 8002324:	b29b      	uxth	r3, r3
 8002326:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	2b0f      	cmp	r3, #15
 800232c:	d909      	bls.n	8002342 <UART_SetConfig+0x242>
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	025b      	lsls	r3, r3, #9
 8002334:	429a      	cmp	r2, r3
 8002336:	d204      	bcs.n	8002342 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	60da      	str	r2, [r3, #12]
 8002340:	e003      	b.n	800234a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002342:	231e      	movs	r3, #30
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002356:	231e      	movs	r3, #30
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	781b      	ldrb	r3, [r3, #0]
}
 800235c:	0018      	movs	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	b008      	add	sp, #32
 8002362:	bd80      	pop	{r7, pc}
 8002364:	ffff69f3 	.word	0xffff69f3
 8002368:	ffffcfff 	.word	0xffffcfff
 800236c:	fffff4ff 	.word	0xfffff4ff
 8002370:	40013800 	.word	0x40013800
 8002374:	40021000 	.word	0x40021000
 8002378:	40004400 	.word	0x40004400
 800237c:	007a1200 	.word	0x007a1200

08002380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	2201      	movs	r2, #1
 800238e:	4013      	ands	r3, r2
 8002390:	d00b      	beq.n	80023aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4a4a      	ldr	r2, [pc, #296]	; (80024c4 <UART_AdvFeatureConfig+0x144>)
 800239a:	4013      	ands	r3, r2
 800239c:	0019      	movs	r1, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	2202      	movs	r2, #2
 80023b0:	4013      	ands	r3, r2
 80023b2:	d00b      	beq.n	80023cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4a43      	ldr	r2, [pc, #268]	; (80024c8 <UART_AdvFeatureConfig+0x148>)
 80023bc:	4013      	ands	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	2204      	movs	r2, #4
 80023d2:	4013      	ands	r3, r2
 80023d4:	d00b      	beq.n	80023ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a3b      	ldr	r2, [pc, #236]	; (80024cc <UART_AdvFeatureConfig+0x14c>)
 80023de:	4013      	ands	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	2208      	movs	r2, #8
 80023f4:	4013      	ands	r3, r2
 80023f6:	d00b      	beq.n	8002410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4a34      	ldr	r2, [pc, #208]	; (80024d0 <UART_AdvFeatureConfig+0x150>)
 8002400:	4013      	ands	r3, r2
 8002402:	0019      	movs	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	2210      	movs	r2, #16
 8002416:	4013      	ands	r3, r2
 8002418:	d00b      	beq.n	8002432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a2c      	ldr	r2, [pc, #176]	; (80024d4 <UART_AdvFeatureConfig+0x154>)
 8002422:	4013      	ands	r3, r2
 8002424:	0019      	movs	r1, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	2220      	movs	r2, #32
 8002438:	4013      	ands	r3, r2
 800243a:	d00b      	beq.n	8002454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	4a25      	ldr	r2, [pc, #148]	; (80024d8 <UART_AdvFeatureConfig+0x158>)
 8002444:	4013      	ands	r3, r2
 8002446:	0019      	movs	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	2240      	movs	r2, #64	; 0x40
 800245a:	4013      	ands	r3, r2
 800245c:	d01d      	beq.n	800249a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <UART_AdvFeatureConfig+0x15c>)
 8002466:	4013      	ands	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	035b      	lsls	r3, r3, #13
 800247e:	429a      	cmp	r2, r3
 8002480:	d10b      	bne.n	800249a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <UART_AdvFeatureConfig+0x160>)
 800248a:	4013      	ands	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	2280      	movs	r2, #128	; 0x80
 80024a0:	4013      	ands	r3, r2
 80024a2:	d00b      	beq.n	80024bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <UART_AdvFeatureConfig+0x164>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	0019      	movs	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
  }
}
 80024bc:	46c0      	nop			; (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	b002      	add	sp, #8
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	fffdffff 	.word	0xfffdffff
 80024c8:	fffeffff 	.word	0xfffeffff
 80024cc:	fffbffff 	.word	0xfffbffff
 80024d0:	ffff7fff 	.word	0xffff7fff
 80024d4:	ffffefff 	.word	0xffffefff
 80024d8:	ffffdfff 	.word	0xffffdfff
 80024dc:	ffefffff 	.word	0xffefffff
 80024e0:	ff9fffff 	.word	0xff9fffff
 80024e4:	fff7ffff 	.word	0xfff7ffff

080024e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2280      	movs	r2, #128	; 0x80
 80024f4:	2100      	movs	r1, #0
 80024f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80024f8:	f7fe f934 	bl	8000764 <HAL_GetTick>
 80024fc:	0003      	movs	r3, r0
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2208      	movs	r2, #8
 8002508:	4013      	ands	r3, r2
 800250a:	2b08      	cmp	r3, #8
 800250c:	d10c      	bne.n	8002528 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2280      	movs	r2, #128	; 0x80
 8002512:	0391      	lsls	r1, r2, #14
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4a17      	ldr	r2, [pc, #92]	; (8002574 <UART_CheckIdleState+0x8c>)
 8002518:	9200      	str	r2, [sp, #0]
 800251a:	2200      	movs	r2, #0
 800251c:	f000 f82c 	bl	8002578 <UART_WaitOnFlagUntilTimeout>
 8002520:	1e03      	subs	r3, r0, #0
 8002522:	d001      	beq.n	8002528 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e021      	b.n	800256c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2204      	movs	r2, #4
 8002530:	4013      	ands	r3, r2
 8002532:	2b04      	cmp	r3, #4
 8002534:	d10c      	bne.n	8002550 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2280      	movs	r2, #128	; 0x80
 800253a:	03d1      	lsls	r1, r2, #15
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <UART_CheckIdleState+0x8c>)
 8002540:	9200      	str	r2, [sp, #0]
 8002542:	2200      	movs	r2, #0
 8002544:	f000 f818 	bl	8002578 <UART_WaitOnFlagUntilTimeout>
 8002548:	1e03      	subs	r3, r0, #0
 800254a:	d001      	beq.n	8002550 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e00d      	b.n	800256c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2220      	movs	r2, #32
 8002554:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2220      	movs	r2, #32
 800255a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2274      	movs	r2, #116	; 0x74
 8002566:	2100      	movs	r1, #0
 8002568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	b004      	add	sp, #16
 8002572:	bd80      	pop	{r7, pc}
 8002574:	01ffffff 	.word	0x01ffffff

08002578 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b094      	sub	sp, #80	; 0x50
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	1dfb      	adds	r3, r7, #7
 8002586:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002588:	e0a3      	b.n	80026d2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800258c:	3301      	adds	r3, #1
 800258e:	d100      	bne.n	8002592 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002590:	e09f      	b.n	80026d2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002592:	f7fe f8e7 	bl	8000764 <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800259e:	429a      	cmp	r2, r3
 80025a0:	d302      	bcc.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80025a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d13d      	bne.n	8002624 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025a8:	f3ef 8310 	mrs	r3, PRIMASK
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80025ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025b0:	647b      	str	r3, [r7, #68]	; 0x44
 80025b2:	2301      	movs	r3, #1
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b8:	f383 8810 	msr	PRIMASK, r3
}
 80025bc:	46c0      	nop			; (mov r8, r8)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	494c      	ldr	r1, [pc, #304]	; (80026fc <UART_WaitOnFlagUntilTimeout+0x184>)
 80025ca:	400a      	ands	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	f383 8810 	msr	PRIMASK, r3
}
 80025d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025da:	f3ef 8310 	mrs	r3, PRIMASK
 80025de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80025e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e2:	643b      	str	r3, [r7, #64]	; 0x40
 80025e4:	2301      	movs	r3, #1
 80025e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ea:	f383 8810 	msr	PRIMASK, r3
}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2101      	movs	r1, #1
 80025fc:	438a      	bics	r2, r1
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002602:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002606:	f383 8810 	msr	PRIMASK, r3
}
 800260a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2220      	movs	r2, #32
 8002616:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2274      	movs	r2, #116	; 0x74
 800261c:	2100      	movs	r1, #0
 800261e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e067      	b.n	80026f4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2204      	movs	r2, #4
 800262c:	4013      	ands	r3, r2
 800262e:	d050      	beq.n	80026d2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	401a      	ands	r2, r3
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	429a      	cmp	r2, r3
 8002642:	d146      	bne.n	80026d2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	0112      	lsls	r2, r2, #4
 800264c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800264e:	f3ef 8310 	mrs	r3, PRIMASK
 8002652:	613b      	str	r3, [r7, #16]
  return(result);
 8002654:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002658:	2301      	movs	r3, #1
 800265a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f383 8810 	msr	PRIMASK, r3
}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4923      	ldr	r1, [pc, #140]	; (80026fc <UART_WaitOnFlagUntilTimeout+0x184>)
 8002670:	400a      	ands	r2, r1
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002676:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f383 8810 	msr	PRIMASK, r3
}
 800267e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002680:	f3ef 8310 	mrs	r3, PRIMASK
 8002684:	61fb      	str	r3, [r7, #28]
  return(result);
 8002686:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002688:	64bb      	str	r3, [r7, #72]	; 0x48
 800268a:	2301      	movs	r3, #1
 800268c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	f383 8810 	msr	PRIMASK, r3
}
 8002694:	46c0      	nop			; (mov r8, r8)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2101      	movs	r1, #1
 80026a2:	438a      	bics	r2, r1
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	f383 8810 	msr	PRIMASK, r3
}
 80026b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2220      	movs	r2, #32
 80026b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	2120      	movs	r1, #32
 80026c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2274      	movs	r2, #116	; 0x74
 80026ca:	2100      	movs	r1, #0
 80026cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e010      	b.n	80026f4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	4013      	ands	r3, r2
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	425a      	negs	r2, r3
 80026e2:	4153      	adcs	r3, r2
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	001a      	movs	r2, r3
 80026e8:	1dfb      	adds	r3, r7, #7
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d100      	bne.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80026f0:	e74b      	b.n	800258a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	0018      	movs	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b014      	add	sp, #80	; 0x50
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	fffffe5f 	.word	0xfffffe5f

08002700 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08c      	sub	sp, #48	; 0x30
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	1dbb      	adds	r3, r7, #6
 800270c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1dba      	adds	r2, r7, #6
 8002718:	2158      	movs	r1, #88	; 0x58
 800271a:	8812      	ldrh	r2, [r2, #0]
 800271c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1dba      	adds	r2, r7, #6
 8002722:	215a      	movs	r1, #90	; 0x5a
 8002724:	8812      	ldrh	r2, [r2, #0]
 8002726:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	015b      	lsls	r3, r3, #5
 8002736:	429a      	cmp	r2, r3
 8002738:	d10d      	bne.n	8002756 <UART_Start_Receive_IT+0x56>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d104      	bne.n	800274c <UART_Start_Receive_IT+0x4c>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	225c      	movs	r2, #92	; 0x5c
 8002746:	4939      	ldr	r1, [pc, #228]	; (800282c <UART_Start_Receive_IT+0x12c>)
 8002748:	5299      	strh	r1, [r3, r2]
 800274a:	e01a      	b.n	8002782 <UART_Start_Receive_IT+0x82>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	225c      	movs	r2, #92	; 0x5c
 8002750:	21ff      	movs	r1, #255	; 0xff
 8002752:	5299      	strh	r1, [r3, r2]
 8002754:	e015      	b.n	8002782 <UART_Start_Receive_IT+0x82>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10d      	bne.n	800277a <UART_Start_Receive_IT+0x7a>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d104      	bne.n	8002770 <UART_Start_Receive_IT+0x70>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	225c      	movs	r2, #92	; 0x5c
 800276a:	21ff      	movs	r1, #255	; 0xff
 800276c:	5299      	strh	r1, [r3, r2]
 800276e:	e008      	b.n	8002782 <UART_Start_Receive_IT+0x82>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	225c      	movs	r2, #92	; 0x5c
 8002774:	217f      	movs	r1, #127	; 0x7f
 8002776:	5299      	strh	r1, [r3, r2]
 8002778:	e003      	b.n	8002782 <UART_Start_Receive_IT+0x82>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	225c      	movs	r2, #92	; 0x5c
 800277e:	2100      	movs	r1, #0
 8002780:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	2100      	movs	r1, #0
 8002788:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2222      	movs	r2, #34	; 0x22
 800278e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002790:	f3ef 8310 	mrs	r3, PRIMASK
 8002794:	61fb      	str	r3, [r7, #28]
  return(result);
 8002796:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800279a:	2301      	movs	r3, #1
 800279c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	f383 8810 	msr	PRIMASK, r3
}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2101      	movs	r1, #1
 80027b2:	430a      	orrs	r2, r1
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	f383 8810 	msr	PRIMASK, r3
}
 80027c0:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	015b      	lsls	r3, r3, #5
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d107      	bne.n	80027de <UART_Start_Receive_IT+0xde>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4a15      	ldr	r2, [pc, #84]	; (8002830 <UART_Start_Receive_IT+0x130>)
 80027da:	665a      	str	r2, [r3, #100]	; 0x64
 80027dc:	e002      	b.n	80027e4 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4a14      	ldr	r2, [pc, #80]	; (8002834 <UART_Start_Receive_IT+0x134>)
 80027e2:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2274      	movs	r2, #116	; 0x74
 80027e8:	2100      	movs	r1, #0
 80027ea:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ec:	f3ef 8310 	mrs	r3, PRIMASK
 80027f0:	613b      	str	r3, [r7, #16]
  return(result);
 80027f2:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027f6:	2301      	movs	r3, #1
 80027f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f383 8810 	msr	PRIMASK, r3
}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2190      	movs	r1, #144	; 0x90
 800280e:	0049      	lsls	r1, r1, #1
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f383 8810 	msr	PRIMASK, r3
}
 800281e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	0018      	movs	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	b00c      	add	sp, #48	; 0x30
 8002828:	bd80      	pop	{r7, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	000001ff 	.word	0x000001ff
 8002830:	08002ae9 	.word	0x08002ae9
 8002834:	08002981 	.word	0x08002981

08002838 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08e      	sub	sp, #56	; 0x38
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002840:	f3ef 8310 	mrs	r3, PRIMASK
 8002844:	617b      	str	r3, [r7, #20]
  return(result);
 8002846:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	2301      	movs	r3, #1
 800284c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	f383 8810 	msr	PRIMASK, r3
}
 8002854:	46c0      	nop			; (mov r8, r8)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4925      	ldr	r1, [pc, #148]	; (80028f8 <UART_EndRxTransfer+0xc0>)
 8002862:	400a      	ands	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002868:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f383 8810 	msr	PRIMASK, r3
}
 8002870:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002872:	f3ef 8310 	mrs	r3, PRIMASK
 8002876:	623b      	str	r3, [r7, #32]
  return(result);
 8002878:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287a:	633b      	str	r3, [r7, #48]	; 0x30
 800287c:	2301      	movs	r3, #1
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	f383 8810 	msr	PRIMASK, r3
}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2101      	movs	r1, #1
 8002894:	438a      	bics	r2, r1
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	f383 8810 	msr	PRIMASK, r3
}
 80028a2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d118      	bne.n	80028de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ac:	f3ef 8310 	mrs	r3, PRIMASK
 80028b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80028b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b6:	2301      	movs	r3, #1
 80028b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f383 8810 	msr	PRIMASK, r3
}
 80028c0:	46c0      	nop			; (mov r8, r8)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2110      	movs	r1, #16
 80028ce:	438a      	bics	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f383 8810 	msr	PRIMASK, r3
}
 80028dc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	665a      	str	r2, [r3, #100]	; 0x64
}
 80028f0:	46c0      	nop			; (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b00e      	add	sp, #56	; 0x38
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	fffffedf 	.word	0xfffffedf

080028fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	225a      	movs	r2, #90	; 0x5a
 800290e:	2100      	movs	r1, #0
 8002910:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2252      	movs	r2, #82	; 0x52
 8002916:	2100      	movs	r1, #0
 8002918:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	0018      	movs	r0, r3
 800291e:	f7ff fbdb 	bl	80020d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	b004      	add	sp, #16
 8002928:	bd80      	pop	{r7, pc}

0800292a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002932:	f3ef 8310 	mrs	r3, PRIMASK
 8002936:	60bb      	str	r3, [r7, #8]
  return(result);
 8002938:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	2301      	movs	r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f383 8810 	msr	PRIMASK, r3
}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2140      	movs	r1, #64	; 0x40
 8002954:	438a      	bics	r2, r1
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f383 8810 	msr	PRIMASK, r3
}
 8002962:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	0018      	movs	r0, r3
 8002974:	f7ff fba8 	bl	80020c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b006      	add	sp, #24
 800297e:	bd80      	pop	{r7, pc}

08002980 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b090      	sub	sp, #64	; 0x40
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002988:	203e      	movs	r0, #62	; 0x3e
 800298a:	183b      	adds	r3, r7, r0
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	215c      	movs	r1, #92	; 0x5c
 8002990:	5a52      	ldrh	r2, [r2, r1]
 8002992:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002998:	2b22      	cmp	r3, #34	; 0x22
 800299a:	d000      	beq.n	800299e <UART_RxISR_8BIT+0x1e>
 800299c:	e095      	b.n	8002aca <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	213c      	movs	r1, #60	; 0x3c
 80029a4:	187b      	adds	r3, r7, r1
 80029a6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80029a8:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80029aa:	187b      	adds	r3, r7, r1
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	183b      	adds	r3, r7, r0
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	b2d9      	uxtb	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ba:	400a      	ands	r2, r1
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	225a      	movs	r2, #90	; 0x5a
 80029ce:	5a9b      	ldrh	r3, [r3, r2]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b299      	uxth	r1, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	225a      	movs	r2, #90	; 0x5a
 80029da:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	225a      	movs	r2, #90	; 0x5a
 80029e0:	5a9b      	ldrh	r3, [r3, r2]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d178      	bne.n	8002ada <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e8:	f3ef 8310 	mrs	r3, PRIMASK
 80029ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80029ee:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80029f2:	2301      	movs	r3, #1
 80029f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f383 8810 	msr	PRIMASK, r3
}
 80029fc:	46c0      	nop			; (mov r8, r8)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4936      	ldr	r1, [pc, #216]	; (8002ae4 <UART_RxISR_8BIT+0x164>)
 8002a0a:	400a      	ands	r2, r1
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a10:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	f383 8810 	msr	PRIMASK, r3
}
 8002a18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a22:	637b      	str	r3, [r7, #52]	; 0x34
 8002a24:	2301      	movs	r3, #1
 8002a26:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2a:	f383 8810 	msr	PRIMASK, r3
}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	438a      	bics	r2, r1
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	f383 8810 	msr	PRIMASK, r3
}
 8002a4a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d12f      	bne.n	8002ac0 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a66:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a6c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8002a70:	2301      	movs	r3, #1
 8002a72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f383 8810 	msr	PRIMASK, r3
}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2110      	movs	r1, #16
 8002a88:	438a      	bics	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f383 8810 	msr	PRIMASK, r3
}
 8002a96:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	2210      	movs	r2, #16
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b10      	cmp	r3, #16
 8002aa4:	d103      	bne.n	8002aae <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2210      	movs	r2, #16
 8002aac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2258      	movs	r2, #88	; 0x58
 8002ab2:	5a9a      	ldrh	r2, [r3, r2]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0011      	movs	r1, r2
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7ff fb15 	bl	80020e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002abe:	e00c      	b.n	8002ada <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f7fd fbac 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 8002ac8:	e007      	b.n	8002ada <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699a      	ldr	r2, [r3, #24]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2108      	movs	r1, #8
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	619a      	str	r2, [r3, #24]
}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b010      	add	sp, #64	; 0x40
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	fffffedf 	.word	0xfffffedf

08002ae8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b090      	sub	sp, #64	; 0x40
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002af0:	203e      	movs	r0, #62	; 0x3e
 8002af2:	183b      	adds	r3, r7, r0
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	215c      	movs	r1, #92	; 0x5c
 8002af8:	5a52      	ldrh	r2, [r2, r1]
 8002afa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b00:	2b22      	cmp	r3, #34	; 0x22
 8002b02:	d000      	beq.n	8002b06 <UART_RxISR_16BIT+0x1e>
 8002b04:	e095      	b.n	8002c32 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	213c      	movs	r1, #60	; 0x3c
 8002b0c:	187b      	adds	r3, r7, r1
 8002b0e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002b10:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b16:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8002b18:	187b      	adds	r3, r7, r1
 8002b1a:	183a      	adds	r2, r7, r0
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	8812      	ldrh	r2, [r2, #0]
 8002b20:	4013      	ands	r3, r2
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	1c9a      	adds	r2, r3, #2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	225a      	movs	r2, #90	; 0x5a
 8002b36:	5a9b      	ldrh	r3, [r3, r2]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b299      	uxth	r1, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	225a      	movs	r2, #90	; 0x5a
 8002b42:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	225a      	movs	r2, #90	; 0x5a
 8002b48:	5a9b      	ldrh	r3, [r3, r2]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d178      	bne.n	8002c42 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b50:	f3ef 8310 	mrs	r3, PRIMASK
 8002b54:	617b      	str	r3, [r7, #20]
  return(result);
 8002b56:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	f383 8810 	msr	PRIMASK, r3
}
 8002b64:	46c0      	nop			; (mov r8, r8)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4936      	ldr	r1, [pc, #216]	; (8002c4c <UART_RxISR_16BIT+0x164>)
 8002b72:	400a      	ands	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f383 8810 	msr	PRIMASK, r3
}
 8002b80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b82:	f3ef 8310 	mrs	r3, PRIMASK
 8002b86:	623b      	str	r3, [r7, #32]
  return(result);
 8002b88:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	f383 8810 	msr	PRIMASK, r3
}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	438a      	bics	r2, r1
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bae:	f383 8810 	msr	PRIMASK, r3
}
 8002bb2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d12f      	bne.n	8002c28 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bce:	f3ef 8310 	mrs	r3, PRIMASK
 8002bd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bd4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd8:	2301      	movs	r3, #1
 8002bda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f383 8810 	msr	PRIMASK, r3
}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2110      	movs	r1, #16
 8002bf0:	438a      	bics	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f383 8810 	msr	PRIMASK, r3
}
 8002bfe:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	2210      	movs	r2, #16
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d103      	bne.n	8002c16 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2210      	movs	r2, #16
 8002c14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2258      	movs	r2, #88	; 0x58
 8002c1a:	5a9a      	ldrh	r2, [r3, r2]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	0011      	movs	r1, r2
 8002c20:	0018      	movs	r0, r3
 8002c22:	f7ff fa61 	bl	80020e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002c26:	e00c      	b.n	8002c42 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f7fd faf8 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 8002c30:	e007      	b.n	8002c42 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2108      	movs	r1, #8
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	619a      	str	r2, [r3, #24]
}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b010      	add	sp, #64	; 0x40
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	fffffedf 	.word	0xfffffedf

08002c50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <__libc_init_array>:
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	2600      	movs	r6, #0
 8002c64:	4d0c      	ldr	r5, [pc, #48]	; (8002c98 <__libc_init_array+0x38>)
 8002c66:	4c0d      	ldr	r4, [pc, #52]	; (8002c9c <__libc_init_array+0x3c>)
 8002c68:	1b64      	subs	r4, r4, r5
 8002c6a:	10a4      	asrs	r4, r4, #2
 8002c6c:	42a6      	cmp	r6, r4
 8002c6e:	d109      	bne.n	8002c84 <__libc_init_array+0x24>
 8002c70:	2600      	movs	r6, #0
 8002c72:	f000 f821 	bl	8002cb8 <_init>
 8002c76:	4d0a      	ldr	r5, [pc, #40]	; (8002ca0 <__libc_init_array+0x40>)
 8002c78:	4c0a      	ldr	r4, [pc, #40]	; (8002ca4 <__libc_init_array+0x44>)
 8002c7a:	1b64      	subs	r4, r4, r5
 8002c7c:	10a4      	asrs	r4, r4, #2
 8002c7e:	42a6      	cmp	r6, r4
 8002c80:	d105      	bne.n	8002c8e <__libc_init_array+0x2e>
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	00b3      	lsls	r3, r6, #2
 8002c86:	58eb      	ldr	r3, [r5, r3]
 8002c88:	4798      	blx	r3
 8002c8a:	3601      	adds	r6, #1
 8002c8c:	e7ee      	b.n	8002c6c <__libc_init_array+0xc>
 8002c8e:	00b3      	lsls	r3, r6, #2
 8002c90:	58eb      	ldr	r3, [r5, r3]
 8002c92:	4798      	blx	r3
 8002c94:	3601      	adds	r6, #1
 8002c96:	e7f2      	b.n	8002c7e <__libc_init_array+0x1e>
 8002c98:	08002d48 	.word	0x08002d48
 8002c9c:	08002d48 	.word	0x08002d48
 8002ca0:	08002d48 	.word	0x08002d48
 8002ca4:	08002d4c 	.word	0x08002d4c

08002ca8 <memset>:
 8002ca8:	0003      	movs	r3, r0
 8002caa:	1882      	adds	r2, r0, r2
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d100      	bne.n	8002cb2 <memset+0xa>
 8002cb0:	4770      	bx	lr
 8002cb2:	7019      	strb	r1, [r3, #0]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	e7f9      	b.n	8002cac <memset+0x4>

08002cb8 <_init>:
 8002cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cbe:	bc08      	pop	{r3}
 8002cc0:	469e      	mov	lr, r3
 8002cc2:	4770      	bx	lr

08002cc4 <_fini>:
 8002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cca:	bc08      	pop	{r3}
 8002ccc:	469e      	mov	lr, r3
 8002cce:	4770      	bx	lr
