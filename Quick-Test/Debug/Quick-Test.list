
Quick-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  0800a868  0800a868  0001a868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae1c  0800ae1c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae1c  0800ae1c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae1c  0800ae1c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae1c  0800ae1c  0001ae1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae20  0800ae20  0001ae20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ae24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001e0  0800b004  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  0800b004  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af43  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d79  00000000  00000000  0002b14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0002cec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002d770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012e37  00000000  00000000  0002df50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbce  00000000  00000000  00040d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d197  00000000  00000000  0004c955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9aec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032ac  00000000  00000000  000b9b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a84c 	.word	0x0800a84c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800a84c 	.word	0x0800a84c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff7d 	bl	800133c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fecd 	bl	80011ec <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff6f 	bl	800133c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff65 	bl	800133c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fef5 	bl	8001270 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 feeb 	bl	8001270 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fdbd 	bl	800203c <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fa06 	bl	80018dc <__aeabi_dsub>
 80004d0:	f001 fdb4 	bl	800203c <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f000 ff6b 	bl	8001404 <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 fde8 	bl	8002108 <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f000 ff62 	bl	8001404 <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 f9c8 	bl	80018dc <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 fda1 	bl	80020a8 <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f000 ff4b 	bl	8001404 <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fdc8 	bl	8002108 <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_dadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	4646      	mov	r6, r8
 800058e:	46d6      	mov	lr, sl
 8000590:	000d      	movs	r5, r1
 8000592:	0004      	movs	r4, r0
 8000594:	b5c0      	push	{r6, r7, lr}
 8000596:	001f      	movs	r7, r3
 8000598:	0011      	movs	r1, r2
 800059a:	0328      	lsls	r0, r5, #12
 800059c:	0f62      	lsrs	r2, r4, #29
 800059e:	0a40      	lsrs	r0, r0, #9
 80005a0:	4310      	orrs	r0, r2
 80005a2:	007a      	lsls	r2, r7, #1
 80005a4:	0d52      	lsrs	r2, r2, #21
 80005a6:	00e3      	lsls	r3, r4, #3
 80005a8:	033c      	lsls	r4, r7, #12
 80005aa:	4691      	mov	r9, r2
 80005ac:	0a64      	lsrs	r4, r4, #9
 80005ae:	0ffa      	lsrs	r2, r7, #31
 80005b0:	0f4f      	lsrs	r7, r1, #29
 80005b2:	006e      	lsls	r6, r5, #1
 80005b4:	4327      	orrs	r7, r4
 80005b6:	4692      	mov	sl, r2
 80005b8:	46b8      	mov	r8, r7
 80005ba:	0d76      	lsrs	r6, r6, #21
 80005bc:	0fed      	lsrs	r5, r5, #31
 80005be:	00c9      	lsls	r1, r1, #3
 80005c0:	4295      	cmp	r5, r2
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x3e>
 80005c4:	e099      	b.n	80006fa <__aeabi_dadd+0x172>
 80005c6:	464c      	mov	r4, r9
 80005c8:	1b34      	subs	r4, r6, r4
 80005ca:	46a4      	mov	ip, r4
 80005cc:	2c00      	cmp	r4, #0
 80005ce:	dc00      	bgt.n	80005d2 <__aeabi_dadd+0x4a>
 80005d0:	e07c      	b.n	80006cc <__aeabi_dadd+0x144>
 80005d2:	464a      	mov	r2, r9
 80005d4:	2a00      	cmp	r2, #0
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x52>
 80005d8:	e0b8      	b.n	800074c <__aeabi_dadd+0x1c4>
 80005da:	4ac5      	ldr	r2, [pc, #788]	; (80008f0 <__aeabi_dadd+0x368>)
 80005dc:	4296      	cmp	r6, r2
 80005de:	d100      	bne.n	80005e2 <__aeabi_dadd+0x5a>
 80005e0:	e11c      	b.n	800081c <__aeabi_dadd+0x294>
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	003c      	movs	r4, r7
 80005e6:	0412      	lsls	r2, r2, #16
 80005e8:	4314      	orrs	r4, r2
 80005ea:	46a0      	mov	r8, r4
 80005ec:	4662      	mov	r2, ip
 80005ee:	2a38      	cmp	r2, #56	; 0x38
 80005f0:	dd00      	ble.n	80005f4 <__aeabi_dadd+0x6c>
 80005f2:	e161      	b.n	80008b8 <__aeabi_dadd+0x330>
 80005f4:	2a1f      	cmp	r2, #31
 80005f6:	dd00      	ble.n	80005fa <__aeabi_dadd+0x72>
 80005f8:	e1cc      	b.n	8000994 <__aeabi_dadd+0x40c>
 80005fa:	4664      	mov	r4, ip
 80005fc:	2220      	movs	r2, #32
 80005fe:	1b12      	subs	r2, r2, r4
 8000600:	4644      	mov	r4, r8
 8000602:	4094      	lsls	r4, r2
 8000604:	000f      	movs	r7, r1
 8000606:	46a1      	mov	r9, r4
 8000608:	4664      	mov	r4, ip
 800060a:	4091      	lsls	r1, r2
 800060c:	40e7      	lsrs	r7, r4
 800060e:	464c      	mov	r4, r9
 8000610:	1e4a      	subs	r2, r1, #1
 8000612:	4191      	sbcs	r1, r2
 8000614:	433c      	orrs	r4, r7
 8000616:	4642      	mov	r2, r8
 8000618:	4321      	orrs	r1, r4
 800061a:	4664      	mov	r4, ip
 800061c:	40e2      	lsrs	r2, r4
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	1a5c      	subs	r4, r3, r1
 8000622:	42a3      	cmp	r3, r4
 8000624:	419b      	sbcs	r3, r3
 8000626:	425f      	negs	r7, r3
 8000628:	1bc7      	subs	r7, r0, r7
 800062a:	023b      	lsls	r3, r7, #8
 800062c:	d400      	bmi.n	8000630 <__aeabi_dadd+0xa8>
 800062e:	e0d0      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000630:	027f      	lsls	r7, r7, #9
 8000632:	0a7f      	lsrs	r7, r7, #9
 8000634:	2f00      	cmp	r7, #0
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0xb2>
 8000638:	e0ff      	b.n	800083a <__aeabi_dadd+0x2b2>
 800063a:	0038      	movs	r0, r7
 800063c:	f001 fe5a 	bl	80022f4 <__clzsi2>
 8000640:	0001      	movs	r1, r0
 8000642:	3908      	subs	r1, #8
 8000644:	2320      	movs	r3, #32
 8000646:	0022      	movs	r2, r4
 8000648:	1a5b      	subs	r3, r3, r1
 800064a:	408f      	lsls	r7, r1
 800064c:	40da      	lsrs	r2, r3
 800064e:	408c      	lsls	r4, r1
 8000650:	4317      	orrs	r7, r2
 8000652:	42b1      	cmp	r1, r6
 8000654:	da00      	bge.n	8000658 <__aeabi_dadd+0xd0>
 8000656:	e0ff      	b.n	8000858 <__aeabi_dadd+0x2d0>
 8000658:	1b89      	subs	r1, r1, r6
 800065a:	1c4b      	adds	r3, r1, #1
 800065c:	2b1f      	cmp	r3, #31
 800065e:	dd00      	ble.n	8000662 <__aeabi_dadd+0xda>
 8000660:	e0a8      	b.n	80007b4 <__aeabi_dadd+0x22c>
 8000662:	2220      	movs	r2, #32
 8000664:	0039      	movs	r1, r7
 8000666:	1ad2      	subs	r2, r2, r3
 8000668:	0020      	movs	r0, r4
 800066a:	4094      	lsls	r4, r2
 800066c:	4091      	lsls	r1, r2
 800066e:	40d8      	lsrs	r0, r3
 8000670:	1e62      	subs	r2, r4, #1
 8000672:	4194      	sbcs	r4, r2
 8000674:	40df      	lsrs	r7, r3
 8000676:	2600      	movs	r6, #0
 8000678:	4301      	orrs	r1, r0
 800067a:	430c      	orrs	r4, r1
 800067c:	0763      	lsls	r3, r4, #29
 800067e:	d009      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000680:	230f      	movs	r3, #15
 8000682:	4023      	ands	r3, r4
 8000684:	2b04      	cmp	r3, #4
 8000686:	d005      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000688:	1d23      	adds	r3, r4, #4
 800068a:	42a3      	cmp	r3, r4
 800068c:	41a4      	sbcs	r4, r4
 800068e:	4264      	negs	r4, r4
 8000690:	193f      	adds	r7, r7, r4
 8000692:	001c      	movs	r4, r3
 8000694:	023b      	lsls	r3, r7, #8
 8000696:	d400      	bmi.n	800069a <__aeabi_dadd+0x112>
 8000698:	e09e      	b.n	80007d8 <__aeabi_dadd+0x250>
 800069a:	4b95      	ldr	r3, [pc, #596]	; (80008f0 <__aeabi_dadd+0x368>)
 800069c:	3601      	adds	r6, #1
 800069e:	429e      	cmp	r6, r3
 80006a0:	d100      	bne.n	80006a4 <__aeabi_dadd+0x11c>
 80006a2:	e0b7      	b.n	8000814 <__aeabi_dadd+0x28c>
 80006a4:	4a93      	ldr	r2, [pc, #588]	; (80008f4 <__aeabi_dadd+0x36c>)
 80006a6:	08e4      	lsrs	r4, r4, #3
 80006a8:	4017      	ands	r7, r2
 80006aa:	077b      	lsls	r3, r7, #29
 80006ac:	0571      	lsls	r1, r6, #21
 80006ae:	027f      	lsls	r7, r7, #9
 80006b0:	4323      	orrs	r3, r4
 80006b2:	0b3f      	lsrs	r7, r7, #12
 80006b4:	0d4a      	lsrs	r2, r1, #21
 80006b6:	0512      	lsls	r2, r2, #20
 80006b8:	433a      	orrs	r2, r7
 80006ba:	07ed      	lsls	r5, r5, #31
 80006bc:	432a      	orrs	r2, r5
 80006be:	0018      	movs	r0, r3
 80006c0:	0011      	movs	r1, r2
 80006c2:	bce0      	pop	{r5, r6, r7}
 80006c4:	46ba      	mov	sl, r7
 80006c6:	46b1      	mov	r9, r6
 80006c8:	46a8      	mov	r8, r5
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d04b      	beq.n	8000768 <__aeabi_dadd+0x1e0>
 80006d0:	464c      	mov	r4, r9
 80006d2:	1ba4      	subs	r4, r4, r6
 80006d4:	46a4      	mov	ip, r4
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_dadd+0x154>
 80006da:	e123      	b.n	8000924 <__aeabi_dadd+0x39c>
 80006dc:	0004      	movs	r4, r0
 80006de:	431c      	orrs	r4, r3
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dadd+0x15c>
 80006e2:	e1af      	b.n	8000a44 <__aeabi_dadd+0x4bc>
 80006e4:	4662      	mov	r2, ip
 80006e6:	1e54      	subs	r4, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x166>
 80006ec:	e215      	b.n	8000b1a <__aeabi_dadd+0x592>
 80006ee:	4d80      	ldr	r5, [pc, #512]	; (80008f0 <__aeabi_dadd+0x368>)
 80006f0:	45ac      	cmp	ip, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x16e>
 80006f4:	e1c8      	b.n	8000a88 <__aeabi_dadd+0x500>
 80006f6:	46a4      	mov	ip, r4
 80006f8:	e11b      	b.n	8000932 <__aeabi_dadd+0x3aa>
 80006fa:	464a      	mov	r2, r9
 80006fc:	1ab2      	subs	r2, r6, r2
 80006fe:	4694      	mov	ip, r2
 8000700:	2a00      	cmp	r2, #0
 8000702:	dc00      	bgt.n	8000706 <__aeabi_dadd+0x17e>
 8000704:	e0ac      	b.n	8000860 <__aeabi_dadd+0x2d8>
 8000706:	464a      	mov	r2, r9
 8000708:	2a00      	cmp	r2, #0
 800070a:	d043      	beq.n	8000794 <__aeabi_dadd+0x20c>
 800070c:	4a78      	ldr	r2, [pc, #480]	; (80008f0 <__aeabi_dadd+0x368>)
 800070e:	4296      	cmp	r6, r2
 8000710:	d100      	bne.n	8000714 <__aeabi_dadd+0x18c>
 8000712:	e1af      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	003c      	movs	r4, r7
 8000718:	0412      	lsls	r2, r2, #16
 800071a:	4314      	orrs	r4, r2
 800071c:	46a0      	mov	r8, r4
 800071e:	4662      	mov	r2, ip
 8000720:	2a38      	cmp	r2, #56	; 0x38
 8000722:	dc67      	bgt.n	80007f4 <__aeabi_dadd+0x26c>
 8000724:	2a1f      	cmp	r2, #31
 8000726:	dc00      	bgt.n	800072a <__aeabi_dadd+0x1a2>
 8000728:	e15f      	b.n	80009ea <__aeabi_dadd+0x462>
 800072a:	4647      	mov	r7, r8
 800072c:	3a20      	subs	r2, #32
 800072e:	40d7      	lsrs	r7, r2
 8000730:	4662      	mov	r2, ip
 8000732:	2a20      	cmp	r2, #32
 8000734:	d005      	beq.n	8000742 <__aeabi_dadd+0x1ba>
 8000736:	4664      	mov	r4, ip
 8000738:	2240      	movs	r2, #64	; 0x40
 800073a:	1b12      	subs	r2, r2, r4
 800073c:	4644      	mov	r4, r8
 800073e:	4094      	lsls	r4, r2
 8000740:	4321      	orrs	r1, r4
 8000742:	1e4a      	subs	r2, r1, #1
 8000744:	4191      	sbcs	r1, r2
 8000746:	000c      	movs	r4, r1
 8000748:	433c      	orrs	r4, r7
 800074a:	e057      	b.n	80007fc <__aeabi_dadd+0x274>
 800074c:	003a      	movs	r2, r7
 800074e:	430a      	orrs	r2, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_dadd+0x1cc>
 8000752:	e105      	b.n	8000960 <__aeabi_dadd+0x3d8>
 8000754:	0022      	movs	r2, r4
 8000756:	3a01      	subs	r2, #1
 8000758:	2c01      	cmp	r4, #1
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x1d6>
 800075c:	e182      	b.n	8000a64 <__aeabi_dadd+0x4dc>
 800075e:	4c64      	ldr	r4, [pc, #400]	; (80008f0 <__aeabi_dadd+0x368>)
 8000760:	45a4      	cmp	ip, r4
 8000762:	d05b      	beq.n	800081c <__aeabi_dadd+0x294>
 8000764:	4694      	mov	ip, r2
 8000766:	e741      	b.n	80005ec <__aeabi_dadd+0x64>
 8000768:	4c63      	ldr	r4, [pc, #396]	; (80008f8 <__aeabi_dadd+0x370>)
 800076a:	1c77      	adds	r7, r6, #1
 800076c:	4227      	tst	r7, r4
 800076e:	d000      	beq.n	8000772 <__aeabi_dadd+0x1ea>
 8000770:	e0c4      	b.n	80008fc <__aeabi_dadd+0x374>
 8000772:	0004      	movs	r4, r0
 8000774:	431c      	orrs	r4, r3
 8000776:	2e00      	cmp	r6, #0
 8000778:	d000      	beq.n	800077c <__aeabi_dadd+0x1f4>
 800077a:	e169      	b.n	8000a50 <__aeabi_dadd+0x4c8>
 800077c:	2c00      	cmp	r4, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0x1fa>
 8000780:	e1bf      	b.n	8000b02 <__aeabi_dadd+0x57a>
 8000782:	4644      	mov	r4, r8
 8000784:	430c      	orrs	r4, r1
 8000786:	d000      	beq.n	800078a <__aeabi_dadd+0x202>
 8000788:	e1d0      	b.n	8000b2c <__aeabi_dadd+0x5a4>
 800078a:	0742      	lsls	r2, r0, #29
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	4313      	orrs	r3, r2
 8000790:	08c0      	lsrs	r0, r0, #3
 8000792:	e029      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000794:	003a      	movs	r2, r7
 8000796:	430a      	orrs	r2, r1
 8000798:	d100      	bne.n	800079c <__aeabi_dadd+0x214>
 800079a:	e170      	b.n	8000a7e <__aeabi_dadd+0x4f6>
 800079c:	4662      	mov	r2, ip
 800079e:	4664      	mov	r4, ip
 80007a0:	3a01      	subs	r2, #1
 80007a2:	2c01      	cmp	r4, #1
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dadd+0x220>
 80007a6:	e0e0      	b.n	800096a <__aeabi_dadd+0x3e2>
 80007a8:	4c51      	ldr	r4, [pc, #324]	; (80008f0 <__aeabi_dadd+0x368>)
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x228>
 80007ae:	e161      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 80007b0:	4694      	mov	ip, r2
 80007b2:	e7b4      	b.n	800071e <__aeabi_dadd+0x196>
 80007b4:	003a      	movs	r2, r7
 80007b6:	391f      	subs	r1, #31
 80007b8:	40ca      	lsrs	r2, r1
 80007ba:	0011      	movs	r1, r2
 80007bc:	2b20      	cmp	r3, #32
 80007be:	d003      	beq.n	80007c8 <__aeabi_dadd+0x240>
 80007c0:	2240      	movs	r2, #64	; 0x40
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	409f      	lsls	r7, r3
 80007c6:	433c      	orrs	r4, r7
 80007c8:	1e63      	subs	r3, r4, #1
 80007ca:	419c      	sbcs	r4, r3
 80007cc:	2700      	movs	r7, #0
 80007ce:	2600      	movs	r6, #0
 80007d0:	430c      	orrs	r4, r1
 80007d2:	0763      	lsls	r3, r4, #29
 80007d4:	d000      	beq.n	80007d8 <__aeabi_dadd+0x250>
 80007d6:	e753      	b.n	8000680 <__aeabi_dadd+0xf8>
 80007d8:	46b4      	mov	ip, r6
 80007da:	08e4      	lsrs	r4, r4, #3
 80007dc:	077b      	lsls	r3, r7, #29
 80007de:	4323      	orrs	r3, r4
 80007e0:	08f8      	lsrs	r0, r7, #3
 80007e2:	4a43      	ldr	r2, [pc, #268]	; (80008f0 <__aeabi_dadd+0x368>)
 80007e4:	4594      	cmp	ip, r2
 80007e6:	d01d      	beq.n	8000824 <__aeabi_dadd+0x29c>
 80007e8:	4662      	mov	r2, ip
 80007ea:	0307      	lsls	r7, r0, #12
 80007ec:	0552      	lsls	r2, r2, #21
 80007ee:	0b3f      	lsrs	r7, r7, #12
 80007f0:	0d52      	lsrs	r2, r2, #21
 80007f2:	e760      	b.n	80006b6 <__aeabi_dadd+0x12e>
 80007f4:	4644      	mov	r4, r8
 80007f6:	430c      	orrs	r4, r1
 80007f8:	1e62      	subs	r2, r4, #1
 80007fa:	4194      	sbcs	r4, r2
 80007fc:	18e4      	adds	r4, r4, r3
 80007fe:	429c      	cmp	r4, r3
 8000800:	419b      	sbcs	r3, r3
 8000802:	425f      	negs	r7, r3
 8000804:	183f      	adds	r7, r7, r0
 8000806:	023b      	lsls	r3, r7, #8
 8000808:	d5e3      	bpl.n	80007d2 <__aeabi_dadd+0x24a>
 800080a:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <__aeabi_dadd+0x368>)
 800080c:	3601      	adds	r6, #1
 800080e:	429e      	cmp	r6, r3
 8000810:	d000      	beq.n	8000814 <__aeabi_dadd+0x28c>
 8000812:	e0b5      	b.n	8000980 <__aeabi_dadd+0x3f8>
 8000814:	0032      	movs	r2, r6
 8000816:	2700      	movs	r7, #0
 8000818:	2300      	movs	r3, #0
 800081a:	e74c      	b.n	80006b6 <__aeabi_dadd+0x12e>
 800081c:	0742      	lsls	r2, r0, #29
 800081e:	08db      	lsrs	r3, r3, #3
 8000820:	4313      	orrs	r3, r2
 8000822:	08c0      	lsrs	r0, r0, #3
 8000824:	001a      	movs	r2, r3
 8000826:	4302      	orrs	r2, r0
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x2a4>
 800082a:	e1e1      	b.n	8000bf0 <__aeabi_dadd+0x668>
 800082c:	2780      	movs	r7, #128	; 0x80
 800082e:	033f      	lsls	r7, r7, #12
 8000830:	4307      	orrs	r7, r0
 8000832:	033f      	lsls	r7, r7, #12
 8000834:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <__aeabi_dadd+0x368>)
 8000836:	0b3f      	lsrs	r7, r7, #12
 8000838:	e73d      	b.n	80006b6 <__aeabi_dadd+0x12e>
 800083a:	0020      	movs	r0, r4
 800083c:	f001 fd5a 	bl	80022f4 <__clzsi2>
 8000840:	0001      	movs	r1, r0
 8000842:	3118      	adds	r1, #24
 8000844:	291f      	cmp	r1, #31
 8000846:	dc00      	bgt.n	800084a <__aeabi_dadd+0x2c2>
 8000848:	e6fc      	b.n	8000644 <__aeabi_dadd+0xbc>
 800084a:	3808      	subs	r0, #8
 800084c:	4084      	lsls	r4, r0
 800084e:	0027      	movs	r7, r4
 8000850:	2400      	movs	r4, #0
 8000852:	42b1      	cmp	r1, r6
 8000854:	db00      	blt.n	8000858 <__aeabi_dadd+0x2d0>
 8000856:	e6ff      	b.n	8000658 <__aeabi_dadd+0xd0>
 8000858:	4a26      	ldr	r2, [pc, #152]	; (80008f4 <__aeabi_dadd+0x36c>)
 800085a:	1a76      	subs	r6, r6, r1
 800085c:	4017      	ands	r7, r2
 800085e:	e70d      	b.n	800067c <__aeabi_dadd+0xf4>
 8000860:	2a00      	cmp	r2, #0
 8000862:	d02f      	beq.n	80008c4 <__aeabi_dadd+0x33c>
 8000864:	464a      	mov	r2, r9
 8000866:	1b92      	subs	r2, r2, r6
 8000868:	4694      	mov	ip, r2
 800086a:	2e00      	cmp	r6, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x2e8>
 800086e:	e0ad      	b.n	80009cc <__aeabi_dadd+0x444>
 8000870:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <__aeabi_dadd+0x368>)
 8000872:	4591      	cmp	r9, r2
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x2f0>
 8000876:	e10f      	b.n	8000a98 <__aeabi_dadd+0x510>
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0412      	lsls	r2, r2, #16
 800087c:	4310      	orrs	r0, r2
 800087e:	4662      	mov	r2, ip
 8000880:	2a38      	cmp	r2, #56	; 0x38
 8000882:	dd00      	ble.n	8000886 <__aeabi_dadd+0x2fe>
 8000884:	e10f      	b.n	8000aa6 <__aeabi_dadd+0x51e>
 8000886:	2a1f      	cmp	r2, #31
 8000888:	dd00      	ble.n	800088c <__aeabi_dadd+0x304>
 800088a:	e180      	b.n	8000b8e <__aeabi_dadd+0x606>
 800088c:	4664      	mov	r4, ip
 800088e:	2220      	movs	r2, #32
 8000890:	001e      	movs	r6, r3
 8000892:	1b12      	subs	r2, r2, r4
 8000894:	4667      	mov	r7, ip
 8000896:	0004      	movs	r4, r0
 8000898:	4093      	lsls	r3, r2
 800089a:	4094      	lsls	r4, r2
 800089c:	40fe      	lsrs	r6, r7
 800089e:	1e5a      	subs	r2, r3, #1
 80008a0:	4193      	sbcs	r3, r2
 80008a2:	40f8      	lsrs	r0, r7
 80008a4:	4334      	orrs	r4, r6
 80008a6:	431c      	orrs	r4, r3
 80008a8:	4480      	add	r8, r0
 80008aa:	1864      	adds	r4, r4, r1
 80008ac:	428c      	cmp	r4, r1
 80008ae:	41bf      	sbcs	r7, r7
 80008b0:	427f      	negs	r7, r7
 80008b2:	464e      	mov	r6, r9
 80008b4:	4447      	add	r7, r8
 80008b6:	e7a6      	b.n	8000806 <__aeabi_dadd+0x27e>
 80008b8:	4642      	mov	r2, r8
 80008ba:	430a      	orrs	r2, r1
 80008bc:	0011      	movs	r1, r2
 80008be:	1e4a      	subs	r2, r1, #1
 80008c0:	4191      	sbcs	r1, r2
 80008c2:	e6ad      	b.n	8000620 <__aeabi_dadd+0x98>
 80008c4:	4c0c      	ldr	r4, [pc, #48]	; (80008f8 <__aeabi_dadd+0x370>)
 80008c6:	1c72      	adds	r2, r6, #1
 80008c8:	4222      	tst	r2, r4
 80008ca:	d000      	beq.n	80008ce <__aeabi_dadd+0x346>
 80008cc:	e0a1      	b.n	8000a12 <__aeabi_dadd+0x48a>
 80008ce:	0002      	movs	r2, r0
 80008d0:	431a      	orrs	r2, r3
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d000      	beq.n	80008d8 <__aeabi_dadd+0x350>
 80008d6:	e0fa      	b.n	8000ace <__aeabi_dadd+0x546>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x356>
 80008dc:	e145      	b.n	8000b6a <__aeabi_dadd+0x5e2>
 80008de:	003a      	movs	r2, r7
 80008e0:	430a      	orrs	r2, r1
 80008e2:	d000      	beq.n	80008e6 <__aeabi_dadd+0x35e>
 80008e4:	e146      	b.n	8000b74 <__aeabi_dadd+0x5ec>
 80008e6:	0742      	lsls	r2, r0, #29
 80008e8:	08db      	lsrs	r3, r3, #3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	08c0      	lsrs	r0, r0, #3
 80008ee:	e77b      	b.n	80007e8 <__aeabi_dadd+0x260>
 80008f0:	000007ff 	.word	0x000007ff
 80008f4:	ff7fffff 	.word	0xff7fffff
 80008f8:	000007fe 	.word	0x000007fe
 80008fc:	4647      	mov	r7, r8
 80008fe:	1a5c      	subs	r4, r3, r1
 8000900:	1bc2      	subs	r2, r0, r7
 8000902:	42a3      	cmp	r3, r4
 8000904:	41bf      	sbcs	r7, r7
 8000906:	427f      	negs	r7, r7
 8000908:	46b9      	mov	r9, r7
 800090a:	0017      	movs	r7, r2
 800090c:	464a      	mov	r2, r9
 800090e:	1abf      	subs	r7, r7, r2
 8000910:	023a      	lsls	r2, r7, #8
 8000912:	d500      	bpl.n	8000916 <__aeabi_dadd+0x38e>
 8000914:	e08d      	b.n	8000a32 <__aeabi_dadd+0x4aa>
 8000916:	0023      	movs	r3, r4
 8000918:	433b      	orrs	r3, r7
 800091a:	d000      	beq.n	800091e <__aeabi_dadd+0x396>
 800091c:	e68a      	b.n	8000634 <__aeabi_dadd+0xac>
 800091e:	2000      	movs	r0, #0
 8000920:	2500      	movs	r5, #0
 8000922:	e761      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000924:	4cb4      	ldr	r4, [pc, #720]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000926:	45a1      	cmp	r9, r4
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x3a4>
 800092a:	e0ad      	b.n	8000a88 <__aeabi_dadd+0x500>
 800092c:	2480      	movs	r4, #128	; 0x80
 800092e:	0424      	lsls	r4, r4, #16
 8000930:	4320      	orrs	r0, r4
 8000932:	4664      	mov	r4, ip
 8000934:	2c38      	cmp	r4, #56	; 0x38
 8000936:	dc3d      	bgt.n	80009b4 <__aeabi_dadd+0x42c>
 8000938:	4662      	mov	r2, ip
 800093a:	2c1f      	cmp	r4, #31
 800093c:	dd00      	ble.n	8000940 <__aeabi_dadd+0x3b8>
 800093e:	e0b7      	b.n	8000ab0 <__aeabi_dadd+0x528>
 8000940:	2520      	movs	r5, #32
 8000942:	001e      	movs	r6, r3
 8000944:	1b2d      	subs	r5, r5, r4
 8000946:	0004      	movs	r4, r0
 8000948:	40ab      	lsls	r3, r5
 800094a:	40ac      	lsls	r4, r5
 800094c:	40d6      	lsrs	r6, r2
 800094e:	40d0      	lsrs	r0, r2
 8000950:	4642      	mov	r2, r8
 8000952:	1e5d      	subs	r5, r3, #1
 8000954:	41ab      	sbcs	r3, r5
 8000956:	4334      	orrs	r4, r6
 8000958:	1a12      	subs	r2, r2, r0
 800095a:	4690      	mov	r8, r2
 800095c:	4323      	orrs	r3, r4
 800095e:	e02c      	b.n	80009ba <__aeabi_dadd+0x432>
 8000960:	0742      	lsls	r2, r0, #29
 8000962:	08db      	lsrs	r3, r3, #3
 8000964:	4313      	orrs	r3, r2
 8000966:	08c0      	lsrs	r0, r0, #3
 8000968:	e73b      	b.n	80007e2 <__aeabi_dadd+0x25a>
 800096a:	185c      	adds	r4, r3, r1
 800096c:	429c      	cmp	r4, r3
 800096e:	419b      	sbcs	r3, r3
 8000970:	4440      	add	r0, r8
 8000972:	425b      	negs	r3, r3
 8000974:	18c7      	adds	r7, r0, r3
 8000976:	2601      	movs	r6, #1
 8000978:	023b      	lsls	r3, r7, #8
 800097a:	d400      	bmi.n	800097e <__aeabi_dadd+0x3f6>
 800097c:	e729      	b.n	80007d2 <__aeabi_dadd+0x24a>
 800097e:	2602      	movs	r6, #2
 8000980:	4a9e      	ldr	r2, [pc, #632]	; (8000bfc <__aeabi_dadd+0x674>)
 8000982:	0863      	lsrs	r3, r4, #1
 8000984:	4017      	ands	r7, r2
 8000986:	2201      	movs	r2, #1
 8000988:	4014      	ands	r4, r2
 800098a:	431c      	orrs	r4, r3
 800098c:	07fb      	lsls	r3, r7, #31
 800098e:	431c      	orrs	r4, r3
 8000990:	087f      	lsrs	r7, r7, #1
 8000992:	e673      	b.n	800067c <__aeabi_dadd+0xf4>
 8000994:	4644      	mov	r4, r8
 8000996:	3a20      	subs	r2, #32
 8000998:	40d4      	lsrs	r4, r2
 800099a:	4662      	mov	r2, ip
 800099c:	2a20      	cmp	r2, #32
 800099e:	d005      	beq.n	80009ac <__aeabi_dadd+0x424>
 80009a0:	4667      	mov	r7, ip
 80009a2:	2240      	movs	r2, #64	; 0x40
 80009a4:	1bd2      	subs	r2, r2, r7
 80009a6:	4647      	mov	r7, r8
 80009a8:	4097      	lsls	r7, r2
 80009aa:	4339      	orrs	r1, r7
 80009ac:	1e4a      	subs	r2, r1, #1
 80009ae:	4191      	sbcs	r1, r2
 80009b0:	4321      	orrs	r1, r4
 80009b2:	e635      	b.n	8000620 <__aeabi_dadd+0x98>
 80009b4:	4303      	orrs	r3, r0
 80009b6:	1e58      	subs	r0, r3, #1
 80009b8:	4183      	sbcs	r3, r0
 80009ba:	1acc      	subs	r4, r1, r3
 80009bc:	42a1      	cmp	r1, r4
 80009be:	41bf      	sbcs	r7, r7
 80009c0:	4643      	mov	r3, r8
 80009c2:	427f      	negs	r7, r7
 80009c4:	4655      	mov	r5, sl
 80009c6:	464e      	mov	r6, r9
 80009c8:	1bdf      	subs	r7, r3, r7
 80009ca:	e62e      	b.n	800062a <__aeabi_dadd+0xa2>
 80009cc:	0002      	movs	r2, r0
 80009ce:	431a      	orrs	r2, r3
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x44c>
 80009d2:	e0bd      	b.n	8000b50 <__aeabi_dadd+0x5c8>
 80009d4:	4662      	mov	r2, ip
 80009d6:	4664      	mov	r4, ip
 80009d8:	3a01      	subs	r2, #1
 80009da:	2c01      	cmp	r4, #1
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x458>
 80009de:	e0e5      	b.n	8000bac <__aeabi_dadd+0x624>
 80009e0:	4c85      	ldr	r4, [pc, #532]	; (8000bf8 <__aeabi_dadd+0x670>)
 80009e2:	45a4      	cmp	ip, r4
 80009e4:	d058      	beq.n	8000a98 <__aeabi_dadd+0x510>
 80009e6:	4694      	mov	ip, r2
 80009e8:	e749      	b.n	800087e <__aeabi_dadd+0x2f6>
 80009ea:	4664      	mov	r4, ip
 80009ec:	2220      	movs	r2, #32
 80009ee:	1b12      	subs	r2, r2, r4
 80009f0:	4644      	mov	r4, r8
 80009f2:	4094      	lsls	r4, r2
 80009f4:	000f      	movs	r7, r1
 80009f6:	46a1      	mov	r9, r4
 80009f8:	4664      	mov	r4, ip
 80009fa:	4091      	lsls	r1, r2
 80009fc:	40e7      	lsrs	r7, r4
 80009fe:	464c      	mov	r4, r9
 8000a00:	1e4a      	subs	r2, r1, #1
 8000a02:	4191      	sbcs	r1, r2
 8000a04:	433c      	orrs	r4, r7
 8000a06:	4642      	mov	r2, r8
 8000a08:	430c      	orrs	r4, r1
 8000a0a:	4661      	mov	r1, ip
 8000a0c:	40ca      	lsrs	r2, r1
 8000a0e:	1880      	adds	r0, r0, r2
 8000a10:	e6f4      	b.n	80007fc <__aeabi_dadd+0x274>
 8000a12:	4c79      	ldr	r4, [pc, #484]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000a14:	42a2      	cmp	r2, r4
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dadd+0x492>
 8000a18:	e6fd      	b.n	8000816 <__aeabi_dadd+0x28e>
 8000a1a:	1859      	adds	r1, r3, r1
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	419b      	sbcs	r3, r3
 8000a20:	4440      	add	r0, r8
 8000a22:	425f      	negs	r7, r3
 8000a24:	19c7      	adds	r7, r0, r7
 8000a26:	07fc      	lsls	r4, r7, #31
 8000a28:	0849      	lsrs	r1, r1, #1
 8000a2a:	0016      	movs	r6, r2
 8000a2c:	430c      	orrs	r4, r1
 8000a2e:	087f      	lsrs	r7, r7, #1
 8000a30:	e6cf      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000a32:	1acc      	subs	r4, r1, r3
 8000a34:	42a1      	cmp	r1, r4
 8000a36:	41bf      	sbcs	r7, r7
 8000a38:	4643      	mov	r3, r8
 8000a3a:	427f      	negs	r7, r7
 8000a3c:	1a18      	subs	r0, r3, r0
 8000a3e:	4655      	mov	r5, sl
 8000a40:	1bc7      	subs	r7, r0, r7
 8000a42:	e5f7      	b.n	8000634 <__aeabi_dadd+0xac>
 8000a44:	08c9      	lsrs	r1, r1, #3
 8000a46:	077b      	lsls	r3, r7, #29
 8000a48:	4655      	mov	r5, sl
 8000a4a:	430b      	orrs	r3, r1
 8000a4c:	08f8      	lsrs	r0, r7, #3
 8000a4e:	e6c8      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000a50:	2c00      	cmp	r4, #0
 8000a52:	d000      	beq.n	8000a56 <__aeabi_dadd+0x4ce>
 8000a54:	e081      	b.n	8000b5a <__aeabi_dadd+0x5d2>
 8000a56:	4643      	mov	r3, r8
 8000a58:	430b      	orrs	r3, r1
 8000a5a:	d115      	bne.n	8000a88 <__aeabi_dadd+0x500>
 8000a5c:	2080      	movs	r0, #128	; 0x80
 8000a5e:	2500      	movs	r5, #0
 8000a60:	0300      	lsls	r0, r0, #12
 8000a62:	e6e3      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000a64:	1a5c      	subs	r4, r3, r1
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	419b      	sbcs	r3, r3
 8000a6a:	1bc7      	subs	r7, r0, r7
 8000a6c:	425b      	negs	r3, r3
 8000a6e:	2601      	movs	r6, #1
 8000a70:	1aff      	subs	r7, r7, r3
 8000a72:	e5da      	b.n	800062a <__aeabi_dadd+0xa2>
 8000a74:	0742      	lsls	r2, r0, #29
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	08c0      	lsrs	r0, r0, #3
 8000a7c:	e6d2      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000a7e:	0742      	lsls	r2, r0, #29
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	08c0      	lsrs	r0, r0, #3
 8000a86:	e6ac      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000a88:	4643      	mov	r3, r8
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	08c9      	lsrs	r1, r1, #3
 8000a8e:	075b      	lsls	r3, r3, #29
 8000a90:	4655      	mov	r5, sl
 8000a92:	430b      	orrs	r3, r1
 8000a94:	08d0      	lsrs	r0, r2, #3
 8000a96:	e6c5      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000a98:	4643      	mov	r3, r8
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	075b      	lsls	r3, r3, #29
 8000a9e:	08c9      	lsrs	r1, r1, #3
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	08d0      	lsrs	r0, r2, #3
 8000aa4:	e6be      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000aa6:	4303      	orrs	r3, r0
 8000aa8:	001c      	movs	r4, r3
 8000aaa:	1e63      	subs	r3, r4, #1
 8000aac:	419c      	sbcs	r4, r3
 8000aae:	e6fc      	b.n	80008aa <__aeabi_dadd+0x322>
 8000ab0:	0002      	movs	r2, r0
 8000ab2:	3c20      	subs	r4, #32
 8000ab4:	40e2      	lsrs	r2, r4
 8000ab6:	0014      	movs	r4, r2
 8000ab8:	4662      	mov	r2, ip
 8000aba:	2a20      	cmp	r2, #32
 8000abc:	d003      	beq.n	8000ac6 <__aeabi_dadd+0x53e>
 8000abe:	2540      	movs	r5, #64	; 0x40
 8000ac0:	1aad      	subs	r5, r5, r2
 8000ac2:	40a8      	lsls	r0, r5
 8000ac4:	4303      	orrs	r3, r0
 8000ac6:	1e58      	subs	r0, r3, #1
 8000ac8:	4183      	sbcs	r3, r0
 8000aca:	4323      	orrs	r3, r4
 8000acc:	e775      	b.n	80009ba <__aeabi_dadd+0x432>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d0e2      	beq.n	8000a98 <__aeabi_dadd+0x510>
 8000ad2:	003a      	movs	r2, r7
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	d0cd      	beq.n	8000a74 <__aeabi_dadd+0x4ec>
 8000ad8:	0742      	lsls	r2, r0, #29
 8000ada:	08db      	lsrs	r3, r3, #3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	08c0      	lsrs	r0, r0, #3
 8000ae2:	0312      	lsls	r2, r2, #12
 8000ae4:	4210      	tst	r0, r2
 8000ae6:	d006      	beq.n	8000af6 <__aeabi_dadd+0x56e>
 8000ae8:	08fc      	lsrs	r4, r7, #3
 8000aea:	4214      	tst	r4, r2
 8000aec:	d103      	bne.n	8000af6 <__aeabi_dadd+0x56e>
 8000aee:	0020      	movs	r0, r4
 8000af0:	08cb      	lsrs	r3, r1, #3
 8000af2:	077a      	lsls	r2, r7, #29
 8000af4:	4313      	orrs	r3, r2
 8000af6:	0f5a      	lsrs	r2, r3, #29
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	0752      	lsls	r2, r2, #29
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	e690      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000b02:	4643      	mov	r3, r8
 8000b04:	430b      	orrs	r3, r1
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x582>
 8000b08:	e709      	b.n	800091e <__aeabi_dadd+0x396>
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	08c9      	lsrs	r1, r1, #3
 8000b10:	075b      	lsls	r3, r3, #29
 8000b12:	4655      	mov	r5, sl
 8000b14:	430b      	orrs	r3, r1
 8000b16:	08d0      	lsrs	r0, r2, #3
 8000b18:	e666      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b1a:	1acc      	subs	r4, r1, r3
 8000b1c:	42a1      	cmp	r1, r4
 8000b1e:	4189      	sbcs	r1, r1
 8000b20:	1a3f      	subs	r7, r7, r0
 8000b22:	4249      	negs	r1, r1
 8000b24:	4655      	mov	r5, sl
 8000b26:	2601      	movs	r6, #1
 8000b28:	1a7f      	subs	r7, r7, r1
 8000b2a:	e57e      	b.n	800062a <__aeabi_dadd+0xa2>
 8000b2c:	4642      	mov	r2, r8
 8000b2e:	1a5c      	subs	r4, r3, r1
 8000b30:	1a87      	subs	r7, r0, r2
 8000b32:	42a3      	cmp	r3, r4
 8000b34:	4192      	sbcs	r2, r2
 8000b36:	4252      	negs	r2, r2
 8000b38:	1abf      	subs	r7, r7, r2
 8000b3a:	023a      	lsls	r2, r7, #8
 8000b3c:	d53d      	bpl.n	8000bba <__aeabi_dadd+0x632>
 8000b3e:	1acc      	subs	r4, r1, r3
 8000b40:	42a1      	cmp	r1, r4
 8000b42:	4189      	sbcs	r1, r1
 8000b44:	4643      	mov	r3, r8
 8000b46:	4249      	negs	r1, r1
 8000b48:	1a1f      	subs	r7, r3, r0
 8000b4a:	4655      	mov	r5, sl
 8000b4c:	1a7f      	subs	r7, r7, r1
 8000b4e:	e595      	b.n	800067c <__aeabi_dadd+0xf4>
 8000b50:	077b      	lsls	r3, r7, #29
 8000b52:	08c9      	lsrs	r1, r1, #3
 8000b54:	430b      	orrs	r3, r1
 8000b56:	08f8      	lsrs	r0, r7, #3
 8000b58:	e643      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000b5a:	4644      	mov	r4, r8
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	430c      	orrs	r4, r1
 8000b60:	d130      	bne.n	8000bc4 <__aeabi_dadd+0x63c>
 8000b62:	0742      	lsls	r2, r0, #29
 8000b64:	4313      	orrs	r3, r2
 8000b66:	08c0      	lsrs	r0, r0, #3
 8000b68:	e65c      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000b6a:	077b      	lsls	r3, r7, #29
 8000b6c:	08c9      	lsrs	r1, r1, #3
 8000b6e:	430b      	orrs	r3, r1
 8000b70:	08f8      	lsrs	r0, r7, #3
 8000b72:	e639      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b74:	185c      	adds	r4, r3, r1
 8000b76:	429c      	cmp	r4, r3
 8000b78:	419b      	sbcs	r3, r3
 8000b7a:	4440      	add	r0, r8
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	18c7      	adds	r7, r0, r3
 8000b80:	023b      	lsls	r3, r7, #8
 8000b82:	d400      	bmi.n	8000b86 <__aeabi_dadd+0x5fe>
 8000b84:	e625      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <__aeabi_dadd+0x674>)
 8000b88:	2601      	movs	r6, #1
 8000b8a:	401f      	ands	r7, r3
 8000b8c:	e621      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b8e:	0004      	movs	r4, r0
 8000b90:	3a20      	subs	r2, #32
 8000b92:	40d4      	lsrs	r4, r2
 8000b94:	4662      	mov	r2, ip
 8000b96:	2a20      	cmp	r2, #32
 8000b98:	d004      	beq.n	8000ba4 <__aeabi_dadd+0x61c>
 8000b9a:	2240      	movs	r2, #64	; 0x40
 8000b9c:	4666      	mov	r6, ip
 8000b9e:	1b92      	subs	r2, r2, r6
 8000ba0:	4090      	lsls	r0, r2
 8000ba2:	4303      	orrs	r3, r0
 8000ba4:	1e5a      	subs	r2, r3, #1
 8000ba6:	4193      	sbcs	r3, r2
 8000ba8:	431c      	orrs	r4, r3
 8000baa:	e67e      	b.n	80008aa <__aeabi_dadd+0x322>
 8000bac:	185c      	adds	r4, r3, r1
 8000bae:	428c      	cmp	r4, r1
 8000bb0:	4189      	sbcs	r1, r1
 8000bb2:	4440      	add	r0, r8
 8000bb4:	4249      	negs	r1, r1
 8000bb6:	1847      	adds	r7, r0, r1
 8000bb8:	e6dd      	b.n	8000976 <__aeabi_dadd+0x3ee>
 8000bba:	0023      	movs	r3, r4
 8000bbc:	433b      	orrs	r3, r7
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dadd+0x63a>
 8000bc0:	e6ad      	b.n	800091e <__aeabi_dadd+0x396>
 8000bc2:	e606      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000bc4:	0744      	lsls	r4, r0, #29
 8000bc6:	4323      	orrs	r3, r4
 8000bc8:	2480      	movs	r4, #128	; 0x80
 8000bca:	08c0      	lsrs	r0, r0, #3
 8000bcc:	0324      	lsls	r4, r4, #12
 8000bce:	4220      	tst	r0, r4
 8000bd0:	d008      	beq.n	8000be4 <__aeabi_dadd+0x65c>
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	08d6      	lsrs	r6, r2, #3
 8000bd6:	4226      	tst	r6, r4
 8000bd8:	d104      	bne.n	8000be4 <__aeabi_dadd+0x65c>
 8000bda:	4655      	mov	r5, sl
 8000bdc:	0030      	movs	r0, r6
 8000bde:	08cb      	lsrs	r3, r1, #3
 8000be0:	0751      	lsls	r1, r2, #29
 8000be2:	430b      	orrs	r3, r1
 8000be4:	0f5a      	lsrs	r2, r3, #29
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	0752      	lsls	r2, r2, #29
 8000bec:	4313      	orrs	r3, r2
 8000bee:	e619      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	4a01      	ldr	r2, [pc, #4]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000bf4:	001f      	movs	r7, r3
 8000bf6:	e55e      	b.n	80006b6 <__aeabi_dadd+0x12e>
 8000bf8:	000007ff 	.word	0x000007ff
 8000bfc:	ff7fffff 	.word	0xff7fffff

08000c00 <__aeabi_ddiv>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	4657      	mov	r7, sl
 8000c04:	464e      	mov	r6, r9
 8000c06:	4645      	mov	r5, r8
 8000c08:	46de      	mov	lr, fp
 8000c0a:	b5e0      	push	{r5, r6, r7, lr}
 8000c0c:	4681      	mov	r9, r0
 8000c0e:	0005      	movs	r5, r0
 8000c10:	030c      	lsls	r4, r1, #12
 8000c12:	0048      	lsls	r0, r1, #1
 8000c14:	4692      	mov	sl, r2
 8000c16:	001f      	movs	r7, r3
 8000c18:	b085      	sub	sp, #20
 8000c1a:	0b24      	lsrs	r4, r4, #12
 8000c1c:	0d40      	lsrs	r0, r0, #21
 8000c1e:	0fce      	lsrs	r6, r1, #31
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_ddiv+0x26>
 8000c24:	e156      	b.n	8000ed4 <__aeabi_ddiv+0x2d4>
 8000c26:	4bd4      	ldr	r3, [pc, #848]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_ddiv+0x2e>
 8000c2c:	e172      	b.n	8000f14 <__aeabi_ddiv+0x314>
 8000c2e:	0f6b      	lsrs	r3, r5, #29
 8000c30:	00e4      	lsls	r4, r4, #3
 8000c32:	431c      	orrs	r4, r3
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	4698      	mov	r8, r3
 8000c3c:	4bcf      	ldr	r3, [pc, #828]	; (8000f7c <__aeabi_ddiv+0x37c>)
 8000c3e:	00ed      	lsls	r5, r5, #3
 8000c40:	469b      	mov	fp, r3
 8000c42:	2300      	movs	r3, #0
 8000c44:	4699      	mov	r9, r3
 8000c46:	4483      	add	fp, r0
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	033c      	lsls	r4, r7, #12
 8000c4c:	007b      	lsls	r3, r7, #1
 8000c4e:	4650      	mov	r0, sl
 8000c50:	0b24      	lsrs	r4, r4, #12
 8000c52:	0d5b      	lsrs	r3, r3, #21
 8000c54:	0fff      	lsrs	r7, r7, #31
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_ddiv+0x5c>
 8000c5a:	e11f      	b.n	8000e9c <__aeabi_ddiv+0x29c>
 8000c5c:	4ac6      	ldr	r2, [pc, #792]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d100      	bne.n	8000c64 <__aeabi_ddiv+0x64>
 8000c62:	e162      	b.n	8000f2a <__aeabi_ddiv+0x32a>
 8000c64:	49c5      	ldr	r1, [pc, #788]	; (8000f7c <__aeabi_ddiv+0x37c>)
 8000c66:	0f42      	lsrs	r2, r0, #29
 8000c68:	468c      	mov	ip, r1
 8000c6a:	00e4      	lsls	r4, r4, #3
 8000c6c:	4659      	mov	r1, fp
 8000c6e:	4314      	orrs	r4, r2
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	4463      	add	r3, ip
 8000c74:	0412      	lsls	r2, r2, #16
 8000c76:	1acb      	subs	r3, r1, r3
 8000c78:	4314      	orrs	r4, r2
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	00c2      	lsls	r2, r0, #3
 8000c7e:	2000      	movs	r0, #0
 8000c80:	0033      	movs	r3, r6
 8000c82:	407b      	eors	r3, r7
 8000c84:	469a      	mov	sl, r3
 8000c86:	464b      	mov	r3, r9
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d827      	bhi.n	8000cdc <__aeabi_ddiv+0xdc>
 8000c8c:	49bc      	ldr	r1, [pc, #752]	; (8000f80 <__aeabi_ddiv+0x380>)
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	58cb      	ldr	r3, [r1, r3]
 8000c92:	469f      	mov	pc, r3
 8000c94:	46b2      	mov	sl, r6
 8000c96:	9b00      	ldr	r3, [sp, #0]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d016      	beq.n	8000cca <__aeabi_ddiv+0xca>
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_ddiv+0xa2>
 8000ca0:	e28e      	b.n	80011c0 <__aeabi_ddiv+0x5c0>
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_ddiv+0xa8>
 8000ca6:	e0d9      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2400      	movs	r4, #0
 8000cac:	2500      	movs	r5, #0
 8000cae:	4652      	mov	r2, sl
 8000cb0:	051b      	lsls	r3, r3, #20
 8000cb2:	4323      	orrs	r3, r4
 8000cb4:	07d2      	lsls	r2, r2, #31
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	0028      	movs	r0, r5
 8000cba:	0019      	movs	r1, r3
 8000cbc:	b005      	add	sp, #20
 8000cbe:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc0:	46bb      	mov	fp, r7
 8000cc2:	46b2      	mov	sl, r6
 8000cc4:	46a9      	mov	r9, r5
 8000cc6:	46a0      	mov	r8, r4
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cca:	2400      	movs	r4, #0
 8000ccc:	2500      	movs	r5, #0
 8000cce:	4baa      	ldr	r3, [pc, #680]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000cd0:	e7ed      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000cd2:	46ba      	mov	sl, r7
 8000cd4:	46a0      	mov	r8, r4
 8000cd6:	0015      	movs	r5, r2
 8000cd8:	9000      	str	r0, [sp, #0]
 8000cda:	e7dc      	b.n	8000c96 <__aeabi_ddiv+0x96>
 8000cdc:	4544      	cmp	r4, r8
 8000cde:	d200      	bcs.n	8000ce2 <__aeabi_ddiv+0xe2>
 8000ce0:	e1c7      	b.n	8001072 <__aeabi_ddiv+0x472>
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_ddiv+0xe6>
 8000ce4:	e1c2      	b.n	800106c <__aeabi_ddiv+0x46c>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	425b      	negs	r3, r3
 8000cea:	469c      	mov	ip, r3
 8000cec:	002e      	movs	r6, r5
 8000cee:	4640      	mov	r0, r8
 8000cf0:	2500      	movs	r5, #0
 8000cf2:	44e3      	add	fp, ip
 8000cf4:	0223      	lsls	r3, r4, #8
 8000cf6:	0e14      	lsrs	r4, r2, #24
 8000cf8:	431c      	orrs	r4, r3
 8000cfa:	0c1b      	lsrs	r3, r3, #16
 8000cfc:	4699      	mov	r9, r3
 8000cfe:	0423      	lsls	r3, r4, #16
 8000d00:	0c1f      	lsrs	r7, r3, #16
 8000d02:	0212      	lsls	r2, r2, #8
 8000d04:	4649      	mov	r1, r9
 8000d06:	9200      	str	r2, [sp, #0]
 8000d08:	9701      	str	r7, [sp, #4]
 8000d0a:	f7ff fa9f 	bl	800024c <__aeabi_uidivmod>
 8000d0e:	0002      	movs	r2, r0
 8000d10:	437a      	muls	r2, r7
 8000d12:	040b      	lsls	r3, r1, #16
 8000d14:	0c31      	lsrs	r1, r6, #16
 8000d16:	4680      	mov	r8, r0
 8000d18:	4319      	orrs	r1, r3
 8000d1a:	428a      	cmp	r2, r1
 8000d1c:	d907      	bls.n	8000d2e <__aeabi_ddiv+0x12e>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	425b      	negs	r3, r3
 8000d22:	469c      	mov	ip, r3
 8000d24:	1909      	adds	r1, r1, r4
 8000d26:	44e0      	add	r8, ip
 8000d28:	428c      	cmp	r4, r1
 8000d2a:	d800      	bhi.n	8000d2e <__aeabi_ddiv+0x12e>
 8000d2c:	e207      	b.n	800113e <__aeabi_ddiv+0x53e>
 8000d2e:	1a88      	subs	r0, r1, r2
 8000d30:	4649      	mov	r1, r9
 8000d32:	f7ff fa8b 	bl	800024c <__aeabi_uidivmod>
 8000d36:	0409      	lsls	r1, r1, #16
 8000d38:	468c      	mov	ip, r1
 8000d3a:	0431      	lsls	r1, r6, #16
 8000d3c:	4666      	mov	r6, ip
 8000d3e:	9a01      	ldr	r2, [sp, #4]
 8000d40:	0c09      	lsrs	r1, r1, #16
 8000d42:	4342      	muls	r2, r0
 8000d44:	0003      	movs	r3, r0
 8000d46:	4331      	orrs	r1, r6
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	d904      	bls.n	8000d56 <__aeabi_ddiv+0x156>
 8000d4c:	1909      	adds	r1, r1, r4
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	428c      	cmp	r4, r1
 8000d52:	d800      	bhi.n	8000d56 <__aeabi_ddiv+0x156>
 8000d54:	e1ed      	b.n	8001132 <__aeabi_ddiv+0x532>
 8000d56:	1a88      	subs	r0, r1, r2
 8000d58:	4642      	mov	r2, r8
 8000d5a:	0412      	lsls	r2, r2, #16
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	4690      	mov	r8, r2
 8000d60:	4641      	mov	r1, r8
 8000d62:	9b00      	ldr	r3, [sp, #0]
 8000d64:	040e      	lsls	r6, r1, #16
 8000d66:	0c1b      	lsrs	r3, r3, #16
 8000d68:	001f      	movs	r7, r3
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	9b00      	ldr	r3, [sp, #0]
 8000d6e:	0c36      	lsrs	r6, r6, #16
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	0c19      	lsrs	r1, r3, #16
 8000d74:	000b      	movs	r3, r1
 8000d76:	4373      	muls	r3, r6
 8000d78:	0c12      	lsrs	r2, r2, #16
 8000d7a:	437e      	muls	r6, r7
 8000d7c:	9103      	str	r1, [sp, #12]
 8000d7e:	4351      	muls	r1, r2
 8000d80:	437a      	muls	r2, r7
 8000d82:	0c1f      	lsrs	r7, r3, #16
 8000d84:	46bc      	mov	ip, r7
 8000d86:	1876      	adds	r6, r6, r1
 8000d88:	4466      	add	r6, ip
 8000d8a:	42b1      	cmp	r1, r6
 8000d8c:	d903      	bls.n	8000d96 <__aeabi_ddiv+0x196>
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	468c      	mov	ip, r1
 8000d94:	4462      	add	r2, ip
 8000d96:	0c31      	lsrs	r1, r6, #16
 8000d98:	188a      	adds	r2, r1, r2
 8000d9a:	0431      	lsls	r1, r6, #16
 8000d9c:	041e      	lsls	r6, r3, #16
 8000d9e:	0c36      	lsrs	r6, r6, #16
 8000da0:	198e      	adds	r6, r1, r6
 8000da2:	4290      	cmp	r0, r2
 8000da4:	d302      	bcc.n	8000dac <__aeabi_ddiv+0x1ac>
 8000da6:	d112      	bne.n	8000dce <__aeabi_ddiv+0x1ce>
 8000da8:	42b5      	cmp	r5, r6
 8000daa:	d210      	bcs.n	8000dce <__aeabi_ddiv+0x1ce>
 8000dac:	4643      	mov	r3, r8
 8000dae:	1e59      	subs	r1, r3, #1
 8000db0:	9b00      	ldr	r3, [sp, #0]
 8000db2:	469c      	mov	ip, r3
 8000db4:	4465      	add	r5, ip
 8000db6:	001f      	movs	r7, r3
 8000db8:	429d      	cmp	r5, r3
 8000dba:	419b      	sbcs	r3, r3
 8000dbc:	425b      	negs	r3, r3
 8000dbe:	191b      	adds	r3, r3, r4
 8000dc0:	18c0      	adds	r0, r0, r3
 8000dc2:	4284      	cmp	r4, r0
 8000dc4:	d200      	bcs.n	8000dc8 <__aeabi_ddiv+0x1c8>
 8000dc6:	e1a0      	b.n	800110a <__aeabi_ddiv+0x50a>
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_ddiv+0x1cc>
 8000dca:	e19b      	b.n	8001104 <__aeabi_ddiv+0x504>
 8000dcc:	4688      	mov	r8, r1
 8000dce:	1bae      	subs	r6, r5, r6
 8000dd0:	42b5      	cmp	r5, r6
 8000dd2:	41ad      	sbcs	r5, r5
 8000dd4:	1a80      	subs	r0, r0, r2
 8000dd6:	426d      	negs	r5, r5
 8000dd8:	1b40      	subs	r0, r0, r5
 8000dda:	4284      	cmp	r4, r0
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_ddiv+0x1e0>
 8000dde:	e1d5      	b.n	800118c <__aeabi_ddiv+0x58c>
 8000de0:	4649      	mov	r1, r9
 8000de2:	f7ff fa33 	bl	800024c <__aeabi_uidivmod>
 8000de6:	9a01      	ldr	r2, [sp, #4]
 8000de8:	040b      	lsls	r3, r1, #16
 8000dea:	4342      	muls	r2, r0
 8000dec:	0c31      	lsrs	r1, r6, #16
 8000dee:	0005      	movs	r5, r0
 8000df0:	4319      	orrs	r1, r3
 8000df2:	428a      	cmp	r2, r1
 8000df4:	d900      	bls.n	8000df8 <__aeabi_ddiv+0x1f8>
 8000df6:	e16c      	b.n	80010d2 <__aeabi_ddiv+0x4d2>
 8000df8:	1a88      	subs	r0, r1, r2
 8000dfa:	4649      	mov	r1, r9
 8000dfc:	f7ff fa26 	bl	800024c <__aeabi_uidivmod>
 8000e00:	9a01      	ldr	r2, [sp, #4]
 8000e02:	0436      	lsls	r6, r6, #16
 8000e04:	4342      	muls	r2, r0
 8000e06:	0409      	lsls	r1, r1, #16
 8000e08:	0c36      	lsrs	r6, r6, #16
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	430e      	orrs	r6, r1
 8000e0e:	42b2      	cmp	r2, r6
 8000e10:	d900      	bls.n	8000e14 <__aeabi_ddiv+0x214>
 8000e12:	e153      	b.n	80010bc <__aeabi_ddiv+0x4bc>
 8000e14:	9803      	ldr	r0, [sp, #12]
 8000e16:	1ab6      	subs	r6, r6, r2
 8000e18:	0002      	movs	r2, r0
 8000e1a:	042d      	lsls	r5, r5, #16
 8000e1c:	431d      	orrs	r5, r3
 8000e1e:	9f02      	ldr	r7, [sp, #8]
 8000e20:	042b      	lsls	r3, r5, #16
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	435a      	muls	r2, r3
 8000e26:	437b      	muls	r3, r7
 8000e28:	469c      	mov	ip, r3
 8000e2a:	0c29      	lsrs	r1, r5, #16
 8000e2c:	4348      	muls	r0, r1
 8000e2e:	0c13      	lsrs	r3, r2, #16
 8000e30:	4484      	add	ip, r0
 8000e32:	4463      	add	r3, ip
 8000e34:	4379      	muls	r1, r7
 8000e36:	4298      	cmp	r0, r3
 8000e38:	d903      	bls.n	8000e42 <__aeabi_ddiv+0x242>
 8000e3a:	2080      	movs	r0, #128	; 0x80
 8000e3c:	0240      	lsls	r0, r0, #9
 8000e3e:	4684      	mov	ip, r0
 8000e40:	4461      	add	r1, ip
 8000e42:	0c18      	lsrs	r0, r3, #16
 8000e44:	0412      	lsls	r2, r2, #16
 8000e46:	041b      	lsls	r3, r3, #16
 8000e48:	0c12      	lsrs	r2, r2, #16
 8000e4a:	1841      	adds	r1, r0, r1
 8000e4c:	189b      	adds	r3, r3, r2
 8000e4e:	428e      	cmp	r6, r1
 8000e50:	d200      	bcs.n	8000e54 <__aeabi_ddiv+0x254>
 8000e52:	e0ff      	b.n	8001054 <__aeabi_ddiv+0x454>
 8000e54:	d100      	bne.n	8000e58 <__aeabi_ddiv+0x258>
 8000e56:	e0fa      	b.n	800104e <__aeabi_ddiv+0x44e>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	431d      	orrs	r5, r3
 8000e5c:	4a49      	ldr	r2, [pc, #292]	; (8000f84 <__aeabi_ddiv+0x384>)
 8000e5e:	445a      	add	r2, fp
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	dc00      	bgt.n	8000e66 <__aeabi_ddiv+0x266>
 8000e64:	e0aa      	b.n	8000fbc <__aeabi_ddiv+0x3bc>
 8000e66:	076b      	lsls	r3, r5, #29
 8000e68:	d000      	beq.n	8000e6c <__aeabi_ddiv+0x26c>
 8000e6a:	e13d      	b.n	80010e8 <__aeabi_ddiv+0x4e8>
 8000e6c:	08ed      	lsrs	r5, r5, #3
 8000e6e:	4643      	mov	r3, r8
 8000e70:	01db      	lsls	r3, r3, #7
 8000e72:	d506      	bpl.n	8000e82 <__aeabi_ddiv+0x282>
 8000e74:	4642      	mov	r2, r8
 8000e76:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <__aeabi_ddiv+0x388>)
 8000e78:	401a      	ands	r2, r3
 8000e7a:	4690      	mov	r8, r2
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	00d2      	lsls	r2, r2, #3
 8000e80:	445a      	add	r2, fp
 8000e82:	4b42      	ldr	r3, [pc, #264]	; (8000f8c <__aeabi_ddiv+0x38c>)
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dd00      	ble.n	8000e8a <__aeabi_ddiv+0x28a>
 8000e88:	e71f      	b.n	8000cca <__aeabi_ddiv+0xca>
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	075b      	lsls	r3, r3, #29
 8000e8e:	431d      	orrs	r5, r3
 8000e90:	4643      	mov	r3, r8
 8000e92:	0552      	lsls	r2, r2, #21
 8000e94:	025c      	lsls	r4, r3, #9
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	0d53      	lsrs	r3, r2, #21
 8000e9a:	e708      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000e9c:	4652      	mov	r2, sl
 8000e9e:	4322      	orrs	r2, r4
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x2a4>
 8000ea2:	e07b      	b.n	8000f9c <__aeabi_ddiv+0x39c>
 8000ea4:	2c00      	cmp	r4, #0
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x2aa>
 8000ea8:	e0fa      	b.n	80010a0 <__aeabi_ddiv+0x4a0>
 8000eaa:	0020      	movs	r0, r4
 8000eac:	f001 fa22 	bl	80022f4 <__clzsi2>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	3a0b      	subs	r2, #11
 8000eb4:	231d      	movs	r3, #29
 8000eb6:	0001      	movs	r1, r0
 8000eb8:	1a9b      	subs	r3, r3, r2
 8000eba:	4652      	mov	r2, sl
 8000ebc:	3908      	subs	r1, #8
 8000ebe:	40da      	lsrs	r2, r3
 8000ec0:	408c      	lsls	r4, r1
 8000ec2:	4314      	orrs	r4, r2
 8000ec4:	4652      	mov	r2, sl
 8000ec6:	408a      	lsls	r2, r1
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <__aeabi_ddiv+0x390>)
 8000eca:	4458      	add	r0, fp
 8000ecc:	469b      	mov	fp, r3
 8000ece:	4483      	add	fp, r0
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	e6d5      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000ed4:	464b      	mov	r3, r9
 8000ed6:	4323      	orrs	r3, r4
 8000ed8:	4698      	mov	r8, r3
 8000eda:	d044      	beq.n	8000f66 <__aeabi_ddiv+0x366>
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x2e2>
 8000ee0:	e0ce      	b.n	8001080 <__aeabi_ddiv+0x480>
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f001 fa06 	bl	80022f4 <__clzsi2>
 8000ee8:	0001      	movs	r1, r0
 8000eea:	0002      	movs	r2, r0
 8000eec:	390b      	subs	r1, #11
 8000eee:	231d      	movs	r3, #29
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	0010      	movs	r0, r2
 8000ef6:	40d9      	lsrs	r1, r3
 8000ef8:	3808      	subs	r0, #8
 8000efa:	4084      	lsls	r4, r0
 8000efc:	000b      	movs	r3, r1
 8000efe:	464d      	mov	r5, r9
 8000f00:	4323      	orrs	r3, r4
 8000f02:	4698      	mov	r8, r3
 8000f04:	4085      	lsls	r5, r0
 8000f06:	4823      	ldr	r0, [pc, #140]	; (8000f94 <__aeabi_ddiv+0x394>)
 8000f08:	1a83      	subs	r3, r0, r2
 8000f0a:	469b      	mov	fp, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4699      	mov	r9, r3
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	e69a      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f14:	464b      	mov	r3, r9
 8000f16:	4323      	orrs	r3, r4
 8000f18:	4698      	mov	r8, r3
 8000f1a:	d11d      	bne.n	8000f58 <__aeabi_ddiv+0x358>
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	4699      	mov	r9, r3
 8000f20:	3b06      	subs	r3, #6
 8000f22:	2500      	movs	r5, #0
 8000f24:	4683      	mov	fp, r0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	e68f      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	4322      	orrs	r2, r4
 8000f2e:	d109      	bne.n	8000f44 <__aeabi_ddiv+0x344>
 8000f30:	2302      	movs	r3, #2
 8000f32:	4649      	mov	r1, r9
 8000f34:	4319      	orrs	r1, r3
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <__aeabi_ddiv+0x398>)
 8000f38:	4689      	mov	r9, r1
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	2002      	movs	r0, #2
 8000f40:	44e3      	add	fp, ip
 8000f42:	e69d      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000f44:	2303      	movs	r3, #3
 8000f46:	464a      	mov	r2, r9
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <__aeabi_ddiv+0x398>)
 8000f4c:	4691      	mov	r9, r2
 8000f4e:	469c      	mov	ip, r3
 8000f50:	4652      	mov	r2, sl
 8000f52:	2003      	movs	r0, #3
 8000f54:	44e3      	add	fp, ip
 8000f56:	e693      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000f58:	230c      	movs	r3, #12
 8000f5a:	4699      	mov	r9, r3
 8000f5c:	3b09      	subs	r3, #9
 8000f5e:	46a0      	mov	r8, r4
 8000f60:	4683      	mov	fp, r0
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	e671      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f66:	2304      	movs	r3, #4
 8000f68:	4699      	mov	r9, r3
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	469b      	mov	fp, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	2500      	movs	r5, #0
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	e669      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	000007ff 	.word	0x000007ff
 8000f7c:	fffffc01 	.word	0xfffffc01
 8000f80:	0800a8a0 	.word	0x0800a8a0
 8000f84:	000003ff 	.word	0x000003ff
 8000f88:	feffffff 	.word	0xfeffffff
 8000f8c:	000007fe 	.word	0x000007fe
 8000f90:	000003f3 	.word	0x000003f3
 8000f94:	fffffc0d 	.word	0xfffffc0d
 8000f98:	fffff801 	.word	0xfffff801
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	4319      	orrs	r1, r3
 8000fa2:	4689      	mov	r9, r1
 8000fa4:	2400      	movs	r4, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	e66a      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000faa:	2300      	movs	r3, #0
 8000fac:	2480      	movs	r4, #128	; 0x80
 8000fae:	469a      	mov	sl, r3
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	4b8a      	ldr	r3, [pc, #552]	; (80011dc <__aeabi_ddiv+0x5dc>)
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	e67a      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000fb8:	2501      	movs	r5, #1
 8000fba:	426d      	negs	r5, r5
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	2b38      	cmp	r3, #56	; 0x38
 8000fc2:	dd00      	ble.n	8000fc6 <__aeabi_ddiv+0x3c6>
 8000fc4:	e670      	b.n	8000ca8 <__aeabi_ddiv+0xa8>
 8000fc6:	2b1f      	cmp	r3, #31
 8000fc8:	dc00      	bgt.n	8000fcc <__aeabi_ddiv+0x3cc>
 8000fca:	e0bf      	b.n	800114c <__aeabi_ddiv+0x54c>
 8000fcc:	211f      	movs	r1, #31
 8000fce:	4249      	negs	r1, r1
 8000fd0:	1a8a      	subs	r2, r1, r2
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	40d1      	lsrs	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	2b20      	cmp	r3, #32
 8000fda:	d004      	beq.n	8000fe6 <__aeabi_ddiv+0x3e6>
 8000fdc:	4641      	mov	r1, r8
 8000fde:	4b80      	ldr	r3, [pc, #512]	; (80011e0 <__aeabi_ddiv+0x5e0>)
 8000fe0:	445b      	add	r3, fp
 8000fe2:	4099      	lsls	r1, r3
 8000fe4:	430d      	orrs	r5, r1
 8000fe6:	1e6b      	subs	r3, r5, #1
 8000fe8:	419d      	sbcs	r5, r3
 8000fea:	2307      	movs	r3, #7
 8000fec:	432a      	orrs	r2, r5
 8000fee:	001d      	movs	r5, r3
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	4015      	ands	r5, r2
 8000ff4:	4213      	tst	r3, r2
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0x3fa>
 8000ff8:	e0d4      	b.n	80011a4 <__aeabi_ddiv+0x5a4>
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4011      	ands	r1, r2
 8001000:	2904      	cmp	r1, #4
 8001002:	d100      	bne.n	8001006 <__aeabi_ddiv+0x406>
 8001004:	e0cb      	b.n	800119e <__aeabi_ddiv+0x59e>
 8001006:	1d11      	adds	r1, r2, #4
 8001008:	4291      	cmp	r1, r2
 800100a:	4192      	sbcs	r2, r2
 800100c:	4252      	negs	r2, r2
 800100e:	189b      	adds	r3, r3, r2
 8001010:	000a      	movs	r2, r1
 8001012:	0219      	lsls	r1, r3, #8
 8001014:	d400      	bmi.n	8001018 <__aeabi_ddiv+0x418>
 8001016:	e0c2      	b.n	800119e <__aeabi_ddiv+0x59e>
 8001018:	2301      	movs	r3, #1
 800101a:	2400      	movs	r4, #0
 800101c:	2500      	movs	r5, #0
 800101e:	e646      	b.n	8000cae <__aeabi_ddiv+0xae>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	4641      	mov	r1, r8
 8001024:	031b      	lsls	r3, r3, #12
 8001026:	4219      	tst	r1, r3
 8001028:	d008      	beq.n	800103c <__aeabi_ddiv+0x43c>
 800102a:	421c      	tst	r4, r3
 800102c:	d106      	bne.n	800103c <__aeabi_ddiv+0x43c>
 800102e:	431c      	orrs	r4, r3
 8001030:	0324      	lsls	r4, r4, #12
 8001032:	46ba      	mov	sl, r7
 8001034:	0015      	movs	r5, r2
 8001036:	4b69      	ldr	r3, [pc, #420]	; (80011dc <__aeabi_ddiv+0x5dc>)
 8001038:	0b24      	lsrs	r4, r4, #12
 800103a:	e638      	b.n	8000cae <__aeabi_ddiv+0xae>
 800103c:	2480      	movs	r4, #128	; 0x80
 800103e:	4643      	mov	r3, r8
 8001040:	0324      	lsls	r4, r4, #12
 8001042:	431c      	orrs	r4, r3
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	46b2      	mov	sl, r6
 8001048:	4b64      	ldr	r3, [pc, #400]	; (80011dc <__aeabi_ddiv+0x5dc>)
 800104a:	0b24      	lsrs	r4, r4, #12
 800104c:	e62f      	b.n	8000cae <__aeabi_ddiv+0xae>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x454>
 8001052:	e703      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 8001054:	19a6      	adds	r6, r4, r6
 8001056:	1e68      	subs	r0, r5, #1
 8001058:	42a6      	cmp	r6, r4
 800105a:	d200      	bcs.n	800105e <__aeabi_ddiv+0x45e>
 800105c:	e08d      	b.n	800117a <__aeabi_ddiv+0x57a>
 800105e:	428e      	cmp	r6, r1
 8001060:	d200      	bcs.n	8001064 <__aeabi_ddiv+0x464>
 8001062:	e0a3      	b.n	80011ac <__aeabi_ddiv+0x5ac>
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x468>
 8001066:	e0b3      	b.n	80011d0 <__aeabi_ddiv+0x5d0>
 8001068:	0005      	movs	r5, r0
 800106a:	e6f5      	b.n	8000e58 <__aeabi_ddiv+0x258>
 800106c:	42aa      	cmp	r2, r5
 800106e:	d900      	bls.n	8001072 <__aeabi_ddiv+0x472>
 8001070:	e639      	b.n	8000ce6 <__aeabi_ddiv+0xe6>
 8001072:	4643      	mov	r3, r8
 8001074:	07de      	lsls	r6, r3, #31
 8001076:	0858      	lsrs	r0, r3, #1
 8001078:	086b      	lsrs	r3, r5, #1
 800107a:	431e      	orrs	r6, r3
 800107c:	07ed      	lsls	r5, r5, #31
 800107e:	e639      	b.n	8000cf4 <__aeabi_ddiv+0xf4>
 8001080:	4648      	mov	r0, r9
 8001082:	f001 f937 	bl	80022f4 <__clzsi2>
 8001086:	0001      	movs	r1, r0
 8001088:	0002      	movs	r2, r0
 800108a:	3115      	adds	r1, #21
 800108c:	3220      	adds	r2, #32
 800108e:	291c      	cmp	r1, #28
 8001090:	dc00      	bgt.n	8001094 <__aeabi_ddiv+0x494>
 8001092:	e72c      	b.n	8000eee <__aeabi_ddiv+0x2ee>
 8001094:	464b      	mov	r3, r9
 8001096:	3808      	subs	r0, #8
 8001098:	4083      	lsls	r3, r0
 800109a:	2500      	movs	r5, #0
 800109c:	4698      	mov	r8, r3
 800109e:	e732      	b.n	8000f06 <__aeabi_ddiv+0x306>
 80010a0:	f001 f928 	bl	80022f4 <__clzsi2>
 80010a4:	0003      	movs	r3, r0
 80010a6:	001a      	movs	r2, r3
 80010a8:	3215      	adds	r2, #21
 80010aa:	3020      	adds	r0, #32
 80010ac:	2a1c      	cmp	r2, #28
 80010ae:	dc00      	bgt.n	80010b2 <__aeabi_ddiv+0x4b2>
 80010b0:	e700      	b.n	8000eb4 <__aeabi_ddiv+0x2b4>
 80010b2:	4654      	mov	r4, sl
 80010b4:	3b08      	subs	r3, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	409c      	lsls	r4, r3
 80010ba:	e705      	b.n	8000ec8 <__aeabi_ddiv+0x2c8>
 80010bc:	1936      	adds	r6, r6, r4
 80010be:	3b01      	subs	r3, #1
 80010c0:	42b4      	cmp	r4, r6
 80010c2:	d900      	bls.n	80010c6 <__aeabi_ddiv+0x4c6>
 80010c4:	e6a6      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010c6:	42b2      	cmp	r2, r6
 80010c8:	d800      	bhi.n	80010cc <__aeabi_ddiv+0x4cc>
 80010ca:	e6a3      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010cc:	1e83      	subs	r3, r0, #2
 80010ce:	1936      	adds	r6, r6, r4
 80010d0:	e6a0      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010d2:	1909      	adds	r1, r1, r4
 80010d4:	3d01      	subs	r5, #1
 80010d6:	428c      	cmp	r4, r1
 80010d8:	d900      	bls.n	80010dc <__aeabi_ddiv+0x4dc>
 80010da:	e68d      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010dc:	428a      	cmp	r2, r1
 80010de:	d800      	bhi.n	80010e2 <__aeabi_ddiv+0x4e2>
 80010e0:	e68a      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010e2:	1e85      	subs	r5, r0, #2
 80010e4:	1909      	adds	r1, r1, r4
 80010e6:	e687      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010e8:	230f      	movs	r3, #15
 80010ea:	402b      	ands	r3, r5
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d100      	bne.n	80010f2 <__aeabi_ddiv+0x4f2>
 80010f0:	e6bc      	b.n	8000e6c <__aeabi_ddiv+0x26c>
 80010f2:	2305      	movs	r3, #5
 80010f4:	425b      	negs	r3, r3
 80010f6:	42ab      	cmp	r3, r5
 80010f8:	419b      	sbcs	r3, r3
 80010fa:	3504      	adds	r5, #4
 80010fc:	425b      	negs	r3, r3
 80010fe:	08ed      	lsrs	r5, r5, #3
 8001100:	4498      	add	r8, r3
 8001102:	e6b4      	b.n	8000e6e <__aeabi_ddiv+0x26e>
 8001104:	42af      	cmp	r7, r5
 8001106:	d900      	bls.n	800110a <__aeabi_ddiv+0x50a>
 8001108:	e660      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 800110a:	4282      	cmp	r2, r0
 800110c:	d804      	bhi.n	8001118 <__aeabi_ddiv+0x518>
 800110e:	d000      	beq.n	8001112 <__aeabi_ddiv+0x512>
 8001110:	e65c      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8001112:	42ae      	cmp	r6, r5
 8001114:	d800      	bhi.n	8001118 <__aeabi_ddiv+0x518>
 8001116:	e659      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8001118:	2302      	movs	r3, #2
 800111a:	425b      	negs	r3, r3
 800111c:	469c      	mov	ip, r3
 800111e:	9b00      	ldr	r3, [sp, #0]
 8001120:	44e0      	add	r8, ip
 8001122:	469c      	mov	ip, r3
 8001124:	4465      	add	r5, ip
 8001126:	429d      	cmp	r5, r3
 8001128:	419b      	sbcs	r3, r3
 800112a:	425b      	negs	r3, r3
 800112c:	191b      	adds	r3, r3, r4
 800112e:	18c0      	adds	r0, r0, r3
 8001130:	e64d      	b.n	8000dce <__aeabi_ddiv+0x1ce>
 8001132:	428a      	cmp	r2, r1
 8001134:	d800      	bhi.n	8001138 <__aeabi_ddiv+0x538>
 8001136:	e60e      	b.n	8000d56 <__aeabi_ddiv+0x156>
 8001138:	1e83      	subs	r3, r0, #2
 800113a:	1909      	adds	r1, r1, r4
 800113c:	e60b      	b.n	8000d56 <__aeabi_ddiv+0x156>
 800113e:	428a      	cmp	r2, r1
 8001140:	d800      	bhi.n	8001144 <__aeabi_ddiv+0x544>
 8001142:	e5f4      	b.n	8000d2e <__aeabi_ddiv+0x12e>
 8001144:	1e83      	subs	r3, r0, #2
 8001146:	4698      	mov	r8, r3
 8001148:	1909      	adds	r1, r1, r4
 800114a:	e5f0      	b.n	8000d2e <__aeabi_ddiv+0x12e>
 800114c:	4925      	ldr	r1, [pc, #148]	; (80011e4 <__aeabi_ddiv+0x5e4>)
 800114e:	0028      	movs	r0, r5
 8001150:	4459      	add	r1, fp
 8001152:	408d      	lsls	r5, r1
 8001154:	4642      	mov	r2, r8
 8001156:	408a      	lsls	r2, r1
 8001158:	1e69      	subs	r1, r5, #1
 800115a:	418d      	sbcs	r5, r1
 800115c:	4641      	mov	r1, r8
 800115e:	40d8      	lsrs	r0, r3
 8001160:	40d9      	lsrs	r1, r3
 8001162:	4302      	orrs	r2, r0
 8001164:	432a      	orrs	r2, r5
 8001166:	000b      	movs	r3, r1
 8001168:	0751      	lsls	r1, r2, #29
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0x56e>
 800116c:	e751      	b.n	8001012 <__aeabi_ddiv+0x412>
 800116e:	210f      	movs	r1, #15
 8001170:	4011      	ands	r1, r2
 8001172:	2904      	cmp	r1, #4
 8001174:	d000      	beq.n	8001178 <__aeabi_ddiv+0x578>
 8001176:	e746      	b.n	8001006 <__aeabi_ddiv+0x406>
 8001178:	e74b      	b.n	8001012 <__aeabi_ddiv+0x412>
 800117a:	0005      	movs	r5, r0
 800117c:	428e      	cmp	r6, r1
 800117e:	d000      	beq.n	8001182 <__aeabi_ddiv+0x582>
 8001180:	e66a      	b.n	8000e58 <__aeabi_ddiv+0x258>
 8001182:	9a00      	ldr	r2, [sp, #0]
 8001184:	4293      	cmp	r3, r2
 8001186:	d000      	beq.n	800118a <__aeabi_ddiv+0x58a>
 8001188:	e666      	b.n	8000e58 <__aeabi_ddiv+0x258>
 800118a:	e667      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 800118c:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <__aeabi_ddiv+0x5e8>)
 800118e:	445a      	add	r2, fp
 8001190:	2a00      	cmp	r2, #0
 8001192:	dc00      	bgt.n	8001196 <__aeabi_ddiv+0x596>
 8001194:	e710      	b.n	8000fb8 <__aeabi_ddiv+0x3b8>
 8001196:	2301      	movs	r3, #1
 8001198:	2500      	movs	r5, #0
 800119a:	4498      	add	r8, r3
 800119c:	e667      	b.n	8000e6e <__aeabi_ddiv+0x26e>
 800119e:	075d      	lsls	r5, r3, #29
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	0b1c      	lsrs	r4, r3, #12
 80011a4:	08d2      	lsrs	r2, r2, #3
 80011a6:	2300      	movs	r3, #0
 80011a8:	4315      	orrs	r5, r2
 80011aa:	e580      	b.n	8000cae <__aeabi_ddiv+0xae>
 80011ac:	9800      	ldr	r0, [sp, #0]
 80011ae:	3d02      	subs	r5, #2
 80011b0:	0042      	lsls	r2, r0, #1
 80011b2:	4282      	cmp	r2, r0
 80011b4:	41bf      	sbcs	r7, r7
 80011b6:	427f      	negs	r7, r7
 80011b8:	193c      	adds	r4, r7, r4
 80011ba:	1936      	adds	r6, r6, r4
 80011bc:	9200      	str	r2, [sp, #0]
 80011be:	e7dd      	b.n	800117c <__aeabi_ddiv+0x57c>
 80011c0:	2480      	movs	r4, #128	; 0x80
 80011c2:	4643      	mov	r3, r8
 80011c4:	0324      	lsls	r4, r4, #12
 80011c6:	431c      	orrs	r4, r3
 80011c8:	0324      	lsls	r4, r4, #12
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__aeabi_ddiv+0x5dc>)
 80011cc:	0b24      	lsrs	r4, r4, #12
 80011ce:	e56e      	b.n	8000cae <__aeabi_ddiv+0xae>
 80011d0:	9a00      	ldr	r2, [sp, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d3ea      	bcc.n	80011ac <__aeabi_ddiv+0x5ac>
 80011d6:	0005      	movs	r5, r0
 80011d8:	e7d3      	b.n	8001182 <__aeabi_ddiv+0x582>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	000007ff 	.word	0x000007ff
 80011e0:	0000043e 	.word	0x0000043e
 80011e4:	0000041e 	.word	0x0000041e
 80011e8:	000003ff 	.word	0x000003ff

080011ec <__eqdf2>:
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	464e      	mov	r6, r9
 80011f0:	4645      	mov	r5, r8
 80011f2:	46de      	mov	lr, fp
 80011f4:	4657      	mov	r7, sl
 80011f6:	4690      	mov	r8, r2
 80011f8:	b5e0      	push	{r5, r6, r7, lr}
 80011fa:	0017      	movs	r7, r2
 80011fc:	031a      	lsls	r2, r3, #12
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0005      	movs	r5, r0
 8001202:	4684      	mov	ip, r0
 8001204:	4819      	ldr	r0, [pc, #100]	; (800126c <__eqdf2+0x80>)
 8001206:	030e      	lsls	r6, r1, #12
 8001208:	004c      	lsls	r4, r1, #1
 800120a:	4691      	mov	r9, r2
 800120c:	005a      	lsls	r2, r3, #1
 800120e:	0fdb      	lsrs	r3, r3, #31
 8001210:	469b      	mov	fp, r3
 8001212:	0b36      	lsrs	r6, r6, #12
 8001214:	0d64      	lsrs	r4, r4, #21
 8001216:	0fc9      	lsrs	r1, r1, #31
 8001218:	0d52      	lsrs	r2, r2, #21
 800121a:	4284      	cmp	r4, r0
 800121c:	d019      	beq.n	8001252 <__eqdf2+0x66>
 800121e:	4282      	cmp	r2, r0
 8001220:	d010      	beq.n	8001244 <__eqdf2+0x58>
 8001222:	2001      	movs	r0, #1
 8001224:	4294      	cmp	r4, r2
 8001226:	d10e      	bne.n	8001246 <__eqdf2+0x5a>
 8001228:	454e      	cmp	r6, r9
 800122a:	d10c      	bne.n	8001246 <__eqdf2+0x5a>
 800122c:	2001      	movs	r0, #1
 800122e:	45c4      	cmp	ip, r8
 8001230:	d109      	bne.n	8001246 <__eqdf2+0x5a>
 8001232:	4559      	cmp	r1, fp
 8001234:	d017      	beq.n	8001266 <__eqdf2+0x7a>
 8001236:	2c00      	cmp	r4, #0
 8001238:	d105      	bne.n	8001246 <__eqdf2+0x5a>
 800123a:	0030      	movs	r0, r6
 800123c:	4328      	orrs	r0, r5
 800123e:	1e43      	subs	r3, r0, #1
 8001240:	4198      	sbcs	r0, r3
 8001242:	e000      	b.n	8001246 <__eqdf2+0x5a>
 8001244:	2001      	movs	r0, #1
 8001246:	bcf0      	pop	{r4, r5, r6, r7}
 8001248:	46bb      	mov	fp, r7
 800124a:	46b2      	mov	sl, r6
 800124c:	46a9      	mov	r9, r5
 800124e:	46a0      	mov	r8, r4
 8001250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001252:	0033      	movs	r3, r6
 8001254:	2001      	movs	r0, #1
 8001256:	432b      	orrs	r3, r5
 8001258:	d1f5      	bne.n	8001246 <__eqdf2+0x5a>
 800125a:	42a2      	cmp	r2, r4
 800125c:	d1f3      	bne.n	8001246 <__eqdf2+0x5a>
 800125e:	464b      	mov	r3, r9
 8001260:	433b      	orrs	r3, r7
 8001262:	d1f0      	bne.n	8001246 <__eqdf2+0x5a>
 8001264:	e7e2      	b.n	800122c <__eqdf2+0x40>
 8001266:	2000      	movs	r0, #0
 8001268:	e7ed      	b.n	8001246 <__eqdf2+0x5a>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	000007ff 	.word	0x000007ff

08001270 <__gedf2>:
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	4647      	mov	r7, r8
 8001274:	46ce      	mov	lr, r9
 8001276:	0004      	movs	r4, r0
 8001278:	0018      	movs	r0, r3
 800127a:	0016      	movs	r6, r2
 800127c:	031b      	lsls	r3, r3, #12
 800127e:	0b1b      	lsrs	r3, r3, #12
 8001280:	4d2d      	ldr	r5, [pc, #180]	; (8001338 <__gedf2+0xc8>)
 8001282:	004a      	lsls	r2, r1, #1
 8001284:	4699      	mov	r9, r3
 8001286:	b580      	push	{r7, lr}
 8001288:	0043      	lsls	r3, r0, #1
 800128a:	030f      	lsls	r7, r1, #12
 800128c:	46a4      	mov	ip, r4
 800128e:	46b0      	mov	r8, r6
 8001290:	0b3f      	lsrs	r7, r7, #12
 8001292:	0d52      	lsrs	r2, r2, #21
 8001294:	0fc9      	lsrs	r1, r1, #31
 8001296:	0d5b      	lsrs	r3, r3, #21
 8001298:	0fc0      	lsrs	r0, r0, #31
 800129a:	42aa      	cmp	r2, r5
 800129c:	d021      	beq.n	80012e2 <__gedf2+0x72>
 800129e:	42ab      	cmp	r3, r5
 80012a0:	d013      	beq.n	80012ca <__gedf2+0x5a>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d122      	bne.n	80012ec <__gedf2+0x7c>
 80012a6:	433c      	orrs	r4, r7
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <__gedf2+0x42>
 80012ac:	464d      	mov	r5, r9
 80012ae:	432e      	orrs	r6, r5
 80012b0:	d022      	beq.n	80012f8 <__gedf2+0x88>
 80012b2:	2c00      	cmp	r4, #0
 80012b4:	d010      	beq.n	80012d8 <__gedf2+0x68>
 80012b6:	4281      	cmp	r1, r0
 80012b8:	d022      	beq.n	8001300 <__gedf2+0x90>
 80012ba:	2002      	movs	r0, #2
 80012bc:	3901      	subs	r1, #1
 80012be:	4008      	ands	r0, r1
 80012c0:	3801      	subs	r0, #1
 80012c2:	bcc0      	pop	{r6, r7}
 80012c4:	46b9      	mov	r9, r7
 80012c6:	46b0      	mov	r8, r6
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ca:	464d      	mov	r5, r9
 80012cc:	432e      	orrs	r6, r5
 80012ce:	d129      	bne.n	8001324 <__gedf2+0xb4>
 80012d0:	2a00      	cmp	r2, #0
 80012d2:	d1f0      	bne.n	80012b6 <__gedf2+0x46>
 80012d4:	433c      	orrs	r4, r7
 80012d6:	d1ee      	bne.n	80012b6 <__gedf2+0x46>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1f2      	bne.n	80012c2 <__gedf2+0x52>
 80012dc:	2001      	movs	r0, #1
 80012de:	4240      	negs	r0, r0
 80012e0:	e7ef      	b.n	80012c2 <__gedf2+0x52>
 80012e2:	003d      	movs	r5, r7
 80012e4:	4325      	orrs	r5, r4
 80012e6:	d11d      	bne.n	8001324 <__gedf2+0xb4>
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d0ee      	beq.n	80012ca <__gedf2+0x5a>
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e2      	bne.n	80012b6 <__gedf2+0x46>
 80012f0:	464c      	mov	r4, r9
 80012f2:	4326      	orrs	r6, r4
 80012f4:	d1df      	bne.n	80012b6 <__gedf2+0x46>
 80012f6:	e7e0      	b.n	80012ba <__gedf2+0x4a>
 80012f8:	2000      	movs	r0, #0
 80012fa:	2c00      	cmp	r4, #0
 80012fc:	d0e1      	beq.n	80012c2 <__gedf2+0x52>
 80012fe:	e7dc      	b.n	80012ba <__gedf2+0x4a>
 8001300:	429a      	cmp	r2, r3
 8001302:	dc0a      	bgt.n	800131a <__gedf2+0xaa>
 8001304:	dbe8      	blt.n	80012d8 <__gedf2+0x68>
 8001306:	454f      	cmp	r7, r9
 8001308:	d8d7      	bhi.n	80012ba <__gedf2+0x4a>
 800130a:	d00e      	beq.n	800132a <__gedf2+0xba>
 800130c:	2000      	movs	r0, #0
 800130e:	454f      	cmp	r7, r9
 8001310:	d2d7      	bcs.n	80012c2 <__gedf2+0x52>
 8001312:	2900      	cmp	r1, #0
 8001314:	d0e2      	beq.n	80012dc <__gedf2+0x6c>
 8001316:	0008      	movs	r0, r1
 8001318:	e7d3      	b.n	80012c2 <__gedf2+0x52>
 800131a:	4243      	negs	r3, r0
 800131c:	4158      	adcs	r0, r3
 800131e:	0040      	lsls	r0, r0, #1
 8001320:	3801      	subs	r0, #1
 8001322:	e7ce      	b.n	80012c2 <__gedf2+0x52>
 8001324:	2002      	movs	r0, #2
 8001326:	4240      	negs	r0, r0
 8001328:	e7cb      	b.n	80012c2 <__gedf2+0x52>
 800132a:	45c4      	cmp	ip, r8
 800132c:	d8c5      	bhi.n	80012ba <__gedf2+0x4a>
 800132e:	2000      	movs	r0, #0
 8001330:	45c4      	cmp	ip, r8
 8001332:	d2c6      	bcs.n	80012c2 <__gedf2+0x52>
 8001334:	e7ed      	b.n	8001312 <__gedf2+0xa2>
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	000007ff 	.word	0x000007ff

0800133c <__ledf2>:
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	4647      	mov	r7, r8
 8001340:	46ce      	mov	lr, r9
 8001342:	0004      	movs	r4, r0
 8001344:	0018      	movs	r0, r3
 8001346:	0016      	movs	r6, r2
 8001348:	031b      	lsls	r3, r3, #12
 800134a:	0b1b      	lsrs	r3, r3, #12
 800134c:	4d2c      	ldr	r5, [pc, #176]	; (8001400 <__ledf2+0xc4>)
 800134e:	004a      	lsls	r2, r1, #1
 8001350:	4699      	mov	r9, r3
 8001352:	b580      	push	{r7, lr}
 8001354:	0043      	lsls	r3, r0, #1
 8001356:	030f      	lsls	r7, r1, #12
 8001358:	46a4      	mov	ip, r4
 800135a:	46b0      	mov	r8, r6
 800135c:	0b3f      	lsrs	r7, r7, #12
 800135e:	0d52      	lsrs	r2, r2, #21
 8001360:	0fc9      	lsrs	r1, r1, #31
 8001362:	0d5b      	lsrs	r3, r3, #21
 8001364:	0fc0      	lsrs	r0, r0, #31
 8001366:	42aa      	cmp	r2, r5
 8001368:	d00d      	beq.n	8001386 <__ledf2+0x4a>
 800136a:	42ab      	cmp	r3, r5
 800136c:	d010      	beq.n	8001390 <__ledf2+0x54>
 800136e:	2a00      	cmp	r2, #0
 8001370:	d127      	bne.n	80013c2 <__ledf2+0x86>
 8001372:	433c      	orrs	r4, r7
 8001374:	2b00      	cmp	r3, #0
 8001376:	d111      	bne.n	800139c <__ledf2+0x60>
 8001378:	464d      	mov	r5, r9
 800137a:	432e      	orrs	r6, r5
 800137c:	d10e      	bne.n	800139c <__ledf2+0x60>
 800137e:	2000      	movs	r0, #0
 8001380:	2c00      	cmp	r4, #0
 8001382:	d015      	beq.n	80013b0 <__ledf2+0x74>
 8001384:	e00e      	b.n	80013a4 <__ledf2+0x68>
 8001386:	003d      	movs	r5, r7
 8001388:	4325      	orrs	r5, r4
 800138a:	d110      	bne.n	80013ae <__ledf2+0x72>
 800138c:	4293      	cmp	r3, r2
 800138e:	d118      	bne.n	80013c2 <__ledf2+0x86>
 8001390:	464d      	mov	r5, r9
 8001392:	432e      	orrs	r6, r5
 8001394:	d10b      	bne.n	80013ae <__ledf2+0x72>
 8001396:	2a00      	cmp	r2, #0
 8001398:	d102      	bne.n	80013a0 <__ledf2+0x64>
 800139a:	433c      	orrs	r4, r7
 800139c:	2c00      	cmp	r4, #0
 800139e:	d00b      	beq.n	80013b8 <__ledf2+0x7c>
 80013a0:	4281      	cmp	r1, r0
 80013a2:	d014      	beq.n	80013ce <__ledf2+0x92>
 80013a4:	2002      	movs	r0, #2
 80013a6:	3901      	subs	r1, #1
 80013a8:	4008      	ands	r0, r1
 80013aa:	3801      	subs	r0, #1
 80013ac:	e000      	b.n	80013b0 <__ledf2+0x74>
 80013ae:	2002      	movs	r0, #2
 80013b0:	bcc0      	pop	{r6, r7}
 80013b2:	46b9      	mov	r9, r7
 80013b4:	46b0      	mov	r8, r6
 80013b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d1f9      	bne.n	80013b0 <__ledf2+0x74>
 80013bc:	2001      	movs	r0, #1
 80013be:	4240      	negs	r0, r0
 80013c0:	e7f6      	b.n	80013b0 <__ledf2+0x74>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1ec      	bne.n	80013a0 <__ledf2+0x64>
 80013c6:	464c      	mov	r4, r9
 80013c8:	4326      	orrs	r6, r4
 80013ca:	d1e9      	bne.n	80013a0 <__ledf2+0x64>
 80013cc:	e7ea      	b.n	80013a4 <__ledf2+0x68>
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dd04      	ble.n	80013dc <__ledf2+0xa0>
 80013d2:	4243      	negs	r3, r0
 80013d4:	4158      	adcs	r0, r3
 80013d6:	0040      	lsls	r0, r0, #1
 80013d8:	3801      	subs	r0, #1
 80013da:	e7e9      	b.n	80013b0 <__ledf2+0x74>
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbeb      	blt.n	80013b8 <__ledf2+0x7c>
 80013e0:	454f      	cmp	r7, r9
 80013e2:	d8df      	bhi.n	80013a4 <__ledf2+0x68>
 80013e4:	d006      	beq.n	80013f4 <__ledf2+0xb8>
 80013e6:	2000      	movs	r0, #0
 80013e8:	454f      	cmp	r7, r9
 80013ea:	d2e1      	bcs.n	80013b0 <__ledf2+0x74>
 80013ec:	2900      	cmp	r1, #0
 80013ee:	d0e5      	beq.n	80013bc <__ledf2+0x80>
 80013f0:	0008      	movs	r0, r1
 80013f2:	e7dd      	b.n	80013b0 <__ledf2+0x74>
 80013f4:	45c4      	cmp	ip, r8
 80013f6:	d8d5      	bhi.n	80013a4 <__ledf2+0x68>
 80013f8:	2000      	movs	r0, #0
 80013fa:	45c4      	cmp	ip, r8
 80013fc:	d2d8      	bcs.n	80013b0 <__ledf2+0x74>
 80013fe:	e7f5      	b.n	80013ec <__ledf2+0xb0>
 8001400:	000007ff 	.word	0x000007ff

08001404 <__aeabi_dmul>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4657      	mov	r7, sl
 8001408:	464e      	mov	r6, r9
 800140a:	4645      	mov	r5, r8
 800140c:	46de      	mov	lr, fp
 800140e:	b5e0      	push	{r5, r6, r7, lr}
 8001410:	4698      	mov	r8, r3
 8001412:	030c      	lsls	r4, r1, #12
 8001414:	004b      	lsls	r3, r1, #1
 8001416:	0006      	movs	r6, r0
 8001418:	4692      	mov	sl, r2
 800141a:	b087      	sub	sp, #28
 800141c:	0b24      	lsrs	r4, r4, #12
 800141e:	0d5b      	lsrs	r3, r3, #21
 8001420:	0fcf      	lsrs	r7, r1, #31
 8001422:	2b00      	cmp	r3, #0
 8001424:	d100      	bne.n	8001428 <__aeabi_dmul+0x24>
 8001426:	e15c      	b.n	80016e2 <__aeabi_dmul+0x2de>
 8001428:	4ad9      	ldr	r2, [pc, #868]	; (8001790 <__aeabi_dmul+0x38c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d100      	bne.n	8001430 <__aeabi_dmul+0x2c>
 800142e:	e175      	b.n	800171c <__aeabi_dmul+0x318>
 8001430:	0f42      	lsrs	r2, r0, #29
 8001432:	00e4      	lsls	r4, r4, #3
 8001434:	4314      	orrs	r4, r2
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	0412      	lsls	r2, r2, #16
 800143a:	4314      	orrs	r4, r2
 800143c:	4ad5      	ldr	r2, [pc, #852]	; (8001794 <__aeabi_dmul+0x390>)
 800143e:	00c5      	lsls	r5, r0, #3
 8001440:	4694      	mov	ip, r2
 8001442:	4463      	add	r3, ip
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	4699      	mov	r9, r3
 800144a:	469b      	mov	fp, r3
 800144c:	4643      	mov	r3, r8
 800144e:	4642      	mov	r2, r8
 8001450:	031e      	lsls	r6, r3, #12
 8001452:	0fd2      	lsrs	r2, r2, #31
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4650      	mov	r0, sl
 8001458:	4690      	mov	r8, r2
 800145a:	0b36      	lsrs	r6, r6, #12
 800145c:	0d5b      	lsrs	r3, r3, #21
 800145e:	d100      	bne.n	8001462 <__aeabi_dmul+0x5e>
 8001460:	e120      	b.n	80016a4 <__aeabi_dmul+0x2a0>
 8001462:	4acb      	ldr	r2, [pc, #812]	; (8001790 <__aeabi_dmul+0x38c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x66>
 8001468:	e162      	b.n	8001730 <__aeabi_dmul+0x32c>
 800146a:	49ca      	ldr	r1, [pc, #808]	; (8001794 <__aeabi_dmul+0x390>)
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	468c      	mov	ip, r1
 8001470:	9900      	ldr	r1, [sp, #0]
 8001472:	4463      	add	r3, ip
 8001474:	00f6      	lsls	r6, r6, #3
 8001476:	468c      	mov	ip, r1
 8001478:	4316      	orrs	r6, r2
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	449c      	add	ip, r3
 800147e:	0412      	lsls	r2, r2, #16
 8001480:	4663      	mov	r3, ip
 8001482:	4316      	orrs	r6, r2
 8001484:	00c2      	lsls	r2, r0, #3
 8001486:	2000      	movs	r0, #0
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	9900      	ldr	r1, [sp, #0]
 800148c:	4643      	mov	r3, r8
 800148e:	3101      	adds	r1, #1
 8001490:	468c      	mov	ip, r1
 8001492:	4649      	mov	r1, r9
 8001494:	407b      	eors	r3, r7
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	290f      	cmp	r1, #15
 800149a:	d826      	bhi.n	80014ea <__aeabi_dmul+0xe6>
 800149c:	4bbe      	ldr	r3, [pc, #760]	; (8001798 <__aeabi_dmul+0x394>)
 800149e:	0089      	lsls	r1, r1, #2
 80014a0:	5859      	ldr	r1, [r3, r1]
 80014a2:	468f      	mov	pc, r1
 80014a4:	4643      	mov	r3, r8
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	0034      	movs	r4, r6
 80014aa:	0015      	movs	r5, r2
 80014ac:	4683      	mov	fp, r0
 80014ae:	465b      	mov	r3, fp
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d016      	beq.n	80014e2 <__aeabi_dmul+0xde>
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d100      	bne.n	80014ba <__aeabi_dmul+0xb6>
 80014b8:	e203      	b.n	80018c2 <__aeabi_dmul+0x4be>
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d000      	beq.n	80014c0 <__aeabi_dmul+0xbc>
 80014be:	e0cd      	b.n	800165c <__aeabi_dmul+0x258>
 80014c0:	2200      	movs	r2, #0
 80014c2:	2400      	movs	r4, #0
 80014c4:	2500      	movs	r5, #0
 80014c6:	9b01      	ldr	r3, [sp, #4]
 80014c8:	0512      	lsls	r2, r2, #20
 80014ca:	4322      	orrs	r2, r4
 80014cc:	07db      	lsls	r3, r3, #31
 80014ce:	431a      	orrs	r2, r3
 80014d0:	0028      	movs	r0, r5
 80014d2:	0011      	movs	r1, r2
 80014d4:	b007      	add	sp, #28
 80014d6:	bcf0      	pop	{r4, r5, r6, r7}
 80014d8:	46bb      	mov	fp, r7
 80014da:	46b2      	mov	sl, r6
 80014dc:	46a9      	mov	r9, r5
 80014de:	46a0      	mov	r8, r4
 80014e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e2:	2400      	movs	r4, #0
 80014e4:	2500      	movs	r5, #0
 80014e6:	4aaa      	ldr	r2, [pc, #680]	; (8001790 <__aeabi_dmul+0x38c>)
 80014e8:	e7ed      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80014ea:	0c28      	lsrs	r0, r5, #16
 80014ec:	042d      	lsls	r5, r5, #16
 80014ee:	0c2d      	lsrs	r5, r5, #16
 80014f0:	002b      	movs	r3, r5
 80014f2:	0c11      	lsrs	r1, r2, #16
 80014f4:	0412      	lsls	r2, r2, #16
 80014f6:	0c12      	lsrs	r2, r2, #16
 80014f8:	4353      	muls	r3, r2
 80014fa:	4698      	mov	r8, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	002f      	movs	r7, r5
 8001500:	4343      	muls	r3, r0
 8001502:	4699      	mov	r9, r3
 8001504:	434f      	muls	r7, r1
 8001506:	444f      	add	r7, r9
 8001508:	46bb      	mov	fp, r7
 800150a:	4647      	mov	r7, r8
 800150c:	000b      	movs	r3, r1
 800150e:	0c3f      	lsrs	r7, r7, #16
 8001510:	46ba      	mov	sl, r7
 8001512:	4343      	muls	r3, r0
 8001514:	44da      	add	sl, fp
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	45d1      	cmp	r9, sl
 800151a:	d904      	bls.n	8001526 <__aeabi_dmul+0x122>
 800151c:	2780      	movs	r7, #128	; 0x80
 800151e:	027f      	lsls	r7, r7, #9
 8001520:	46b9      	mov	r9, r7
 8001522:	444b      	add	r3, r9
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	4653      	mov	r3, sl
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	469b      	mov	fp, r3
 800152c:	4653      	mov	r3, sl
 800152e:	041f      	lsls	r7, r3, #16
 8001530:	4643      	mov	r3, r8
 8001532:	041b      	lsls	r3, r3, #16
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	4698      	mov	r8, r3
 8001538:	003b      	movs	r3, r7
 800153a:	4443      	add	r3, r8
 800153c:	9304      	str	r3, [sp, #16]
 800153e:	0c33      	lsrs	r3, r6, #16
 8001540:	0436      	lsls	r6, r6, #16
 8001542:	0c36      	lsrs	r6, r6, #16
 8001544:	4698      	mov	r8, r3
 8001546:	0033      	movs	r3, r6
 8001548:	4343      	muls	r3, r0
 800154a:	4699      	mov	r9, r3
 800154c:	4643      	mov	r3, r8
 800154e:	4343      	muls	r3, r0
 8001550:	002f      	movs	r7, r5
 8001552:	469a      	mov	sl, r3
 8001554:	4643      	mov	r3, r8
 8001556:	4377      	muls	r7, r6
 8001558:	435d      	muls	r5, r3
 800155a:	0c38      	lsrs	r0, r7, #16
 800155c:	444d      	add	r5, r9
 800155e:	1945      	adds	r5, r0, r5
 8001560:	45a9      	cmp	r9, r5
 8001562:	d903      	bls.n	800156c <__aeabi_dmul+0x168>
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	4699      	mov	r9, r3
 800156a:	44ca      	add	sl, r9
 800156c:	043f      	lsls	r7, r7, #16
 800156e:	0c28      	lsrs	r0, r5, #16
 8001570:	0c3f      	lsrs	r7, r7, #16
 8001572:	042d      	lsls	r5, r5, #16
 8001574:	19ed      	adds	r5, r5, r7
 8001576:	0c27      	lsrs	r7, r4, #16
 8001578:	0424      	lsls	r4, r4, #16
 800157a:	0c24      	lsrs	r4, r4, #16
 800157c:	0003      	movs	r3, r0
 800157e:	0020      	movs	r0, r4
 8001580:	4350      	muls	r0, r2
 8001582:	437a      	muls	r2, r7
 8001584:	4691      	mov	r9, r2
 8001586:	003a      	movs	r2, r7
 8001588:	4453      	add	r3, sl
 800158a:	9305      	str	r3, [sp, #20]
 800158c:	0c03      	lsrs	r3, r0, #16
 800158e:	469a      	mov	sl, r3
 8001590:	434a      	muls	r2, r1
 8001592:	4361      	muls	r1, r4
 8001594:	4449      	add	r1, r9
 8001596:	4451      	add	r1, sl
 8001598:	44ab      	add	fp, r5
 800159a:	4589      	cmp	r9, r1
 800159c:	d903      	bls.n	80015a6 <__aeabi_dmul+0x1a2>
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	025b      	lsls	r3, r3, #9
 80015a2:	4699      	mov	r9, r3
 80015a4:	444a      	add	r2, r9
 80015a6:	0400      	lsls	r0, r0, #16
 80015a8:	0c0b      	lsrs	r3, r1, #16
 80015aa:	0c00      	lsrs	r0, r0, #16
 80015ac:	0409      	lsls	r1, r1, #16
 80015ae:	1809      	adds	r1, r1, r0
 80015b0:	0020      	movs	r0, r4
 80015b2:	4699      	mov	r9, r3
 80015b4:	4643      	mov	r3, r8
 80015b6:	4370      	muls	r0, r6
 80015b8:	435c      	muls	r4, r3
 80015ba:	437e      	muls	r6, r7
 80015bc:	435f      	muls	r7, r3
 80015be:	0c03      	lsrs	r3, r0, #16
 80015c0:	4698      	mov	r8, r3
 80015c2:	19a4      	adds	r4, r4, r6
 80015c4:	4444      	add	r4, r8
 80015c6:	444a      	add	r2, r9
 80015c8:	9703      	str	r7, [sp, #12]
 80015ca:	42a6      	cmp	r6, r4
 80015cc:	d904      	bls.n	80015d8 <__aeabi_dmul+0x1d4>
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	025b      	lsls	r3, r3, #9
 80015d2:	4698      	mov	r8, r3
 80015d4:	4447      	add	r7, r8
 80015d6:	9703      	str	r7, [sp, #12]
 80015d8:	0423      	lsls	r3, r4, #16
 80015da:	9e02      	ldr	r6, [sp, #8]
 80015dc:	469a      	mov	sl, r3
 80015de:	9b05      	ldr	r3, [sp, #20]
 80015e0:	445e      	add	r6, fp
 80015e2:	4698      	mov	r8, r3
 80015e4:	42ae      	cmp	r6, r5
 80015e6:	41ad      	sbcs	r5, r5
 80015e8:	1876      	adds	r6, r6, r1
 80015ea:	428e      	cmp	r6, r1
 80015ec:	4189      	sbcs	r1, r1
 80015ee:	0400      	lsls	r0, r0, #16
 80015f0:	0c00      	lsrs	r0, r0, #16
 80015f2:	4450      	add	r0, sl
 80015f4:	4440      	add	r0, r8
 80015f6:	426d      	negs	r5, r5
 80015f8:	1947      	adds	r7, r0, r5
 80015fa:	46b8      	mov	r8, r7
 80015fc:	4693      	mov	fp, r2
 80015fe:	4249      	negs	r1, r1
 8001600:	4689      	mov	r9, r1
 8001602:	44c3      	add	fp, r8
 8001604:	44d9      	add	r9, fp
 8001606:	4298      	cmp	r0, r3
 8001608:	4180      	sbcs	r0, r0
 800160a:	45a8      	cmp	r8, r5
 800160c:	41ad      	sbcs	r5, r5
 800160e:	4593      	cmp	fp, r2
 8001610:	4192      	sbcs	r2, r2
 8001612:	4589      	cmp	r9, r1
 8001614:	4189      	sbcs	r1, r1
 8001616:	426d      	negs	r5, r5
 8001618:	4240      	negs	r0, r0
 800161a:	4328      	orrs	r0, r5
 800161c:	0c24      	lsrs	r4, r4, #16
 800161e:	4252      	negs	r2, r2
 8001620:	4249      	negs	r1, r1
 8001622:	430a      	orrs	r2, r1
 8001624:	9b03      	ldr	r3, [sp, #12]
 8001626:	1900      	adds	r0, r0, r4
 8001628:	1880      	adds	r0, r0, r2
 800162a:	18c7      	adds	r7, r0, r3
 800162c:	464b      	mov	r3, r9
 800162e:	0ddc      	lsrs	r4, r3, #23
 8001630:	9b04      	ldr	r3, [sp, #16]
 8001632:	0275      	lsls	r5, r6, #9
 8001634:	431d      	orrs	r5, r3
 8001636:	1e6a      	subs	r2, r5, #1
 8001638:	4195      	sbcs	r5, r2
 800163a:	464b      	mov	r3, r9
 800163c:	0df6      	lsrs	r6, r6, #23
 800163e:	027f      	lsls	r7, r7, #9
 8001640:	4335      	orrs	r5, r6
 8001642:	025a      	lsls	r2, r3, #9
 8001644:	433c      	orrs	r4, r7
 8001646:	4315      	orrs	r5, r2
 8001648:	01fb      	lsls	r3, r7, #7
 800164a:	d400      	bmi.n	800164e <__aeabi_dmul+0x24a>
 800164c:	e11c      	b.n	8001888 <__aeabi_dmul+0x484>
 800164e:	2101      	movs	r1, #1
 8001650:	086a      	lsrs	r2, r5, #1
 8001652:	400d      	ands	r5, r1
 8001654:	4315      	orrs	r5, r2
 8001656:	07e2      	lsls	r2, r4, #31
 8001658:	4315      	orrs	r5, r2
 800165a:	0864      	lsrs	r4, r4, #1
 800165c:	494f      	ldr	r1, [pc, #316]	; (800179c <__aeabi_dmul+0x398>)
 800165e:	4461      	add	r1, ip
 8001660:	2900      	cmp	r1, #0
 8001662:	dc00      	bgt.n	8001666 <__aeabi_dmul+0x262>
 8001664:	e0b0      	b.n	80017c8 <__aeabi_dmul+0x3c4>
 8001666:	076b      	lsls	r3, r5, #29
 8001668:	d009      	beq.n	800167e <__aeabi_dmul+0x27a>
 800166a:	220f      	movs	r2, #15
 800166c:	402a      	ands	r2, r5
 800166e:	2a04      	cmp	r2, #4
 8001670:	d005      	beq.n	800167e <__aeabi_dmul+0x27a>
 8001672:	1d2a      	adds	r2, r5, #4
 8001674:	42aa      	cmp	r2, r5
 8001676:	41ad      	sbcs	r5, r5
 8001678:	426d      	negs	r5, r5
 800167a:	1964      	adds	r4, r4, r5
 800167c:	0015      	movs	r5, r2
 800167e:	01e3      	lsls	r3, r4, #7
 8001680:	d504      	bpl.n	800168c <__aeabi_dmul+0x288>
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	4a46      	ldr	r2, [pc, #280]	; (80017a0 <__aeabi_dmul+0x39c>)
 8001686:	00c9      	lsls	r1, r1, #3
 8001688:	4014      	ands	r4, r2
 800168a:	4461      	add	r1, ip
 800168c:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <__aeabi_dmul+0x3a0>)
 800168e:	4291      	cmp	r1, r2
 8001690:	dd00      	ble.n	8001694 <__aeabi_dmul+0x290>
 8001692:	e726      	b.n	80014e2 <__aeabi_dmul+0xde>
 8001694:	0762      	lsls	r2, r4, #29
 8001696:	08ed      	lsrs	r5, r5, #3
 8001698:	0264      	lsls	r4, r4, #9
 800169a:	0549      	lsls	r1, r1, #21
 800169c:	4315      	orrs	r5, r2
 800169e:	0b24      	lsrs	r4, r4, #12
 80016a0:	0d4a      	lsrs	r2, r1, #21
 80016a2:	e710      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80016a4:	4652      	mov	r2, sl
 80016a6:	4332      	orrs	r2, r6
 80016a8:	d100      	bne.n	80016ac <__aeabi_dmul+0x2a8>
 80016aa:	e07f      	b.n	80017ac <__aeabi_dmul+0x3a8>
 80016ac:	2e00      	cmp	r6, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dmul+0x2ae>
 80016b0:	e0dc      	b.n	800186c <__aeabi_dmul+0x468>
 80016b2:	0030      	movs	r0, r6
 80016b4:	f000 fe1e 	bl	80022f4 <__clzsi2>
 80016b8:	0002      	movs	r2, r0
 80016ba:	3a0b      	subs	r2, #11
 80016bc:	231d      	movs	r3, #29
 80016be:	0001      	movs	r1, r0
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	4652      	mov	r2, sl
 80016c4:	3908      	subs	r1, #8
 80016c6:	40da      	lsrs	r2, r3
 80016c8:	408e      	lsls	r6, r1
 80016ca:	4316      	orrs	r6, r2
 80016cc:	4652      	mov	r2, sl
 80016ce:	408a      	lsls	r2, r1
 80016d0:	9b00      	ldr	r3, [sp, #0]
 80016d2:	4935      	ldr	r1, [pc, #212]	; (80017a8 <__aeabi_dmul+0x3a4>)
 80016d4:	1a18      	subs	r0, r3, r0
 80016d6:	0003      	movs	r3, r0
 80016d8:	468c      	mov	ip, r1
 80016da:	4463      	add	r3, ip
 80016dc:	2000      	movs	r0, #0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	e6d3      	b.n	800148a <__aeabi_dmul+0x86>
 80016e2:	0025      	movs	r5, r4
 80016e4:	4305      	orrs	r5, r0
 80016e6:	d04a      	beq.n	800177e <__aeabi_dmul+0x37a>
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d100      	bne.n	80016ee <__aeabi_dmul+0x2ea>
 80016ec:	e0b0      	b.n	8001850 <__aeabi_dmul+0x44c>
 80016ee:	0020      	movs	r0, r4
 80016f0:	f000 fe00 	bl	80022f4 <__clzsi2>
 80016f4:	0001      	movs	r1, r0
 80016f6:	0002      	movs	r2, r0
 80016f8:	390b      	subs	r1, #11
 80016fa:	231d      	movs	r3, #29
 80016fc:	0010      	movs	r0, r2
 80016fe:	1a5b      	subs	r3, r3, r1
 8001700:	0031      	movs	r1, r6
 8001702:	0035      	movs	r5, r6
 8001704:	3808      	subs	r0, #8
 8001706:	4084      	lsls	r4, r0
 8001708:	40d9      	lsrs	r1, r3
 800170a:	4085      	lsls	r5, r0
 800170c:	430c      	orrs	r4, r1
 800170e:	4826      	ldr	r0, [pc, #152]	; (80017a8 <__aeabi_dmul+0x3a4>)
 8001710:	1a83      	subs	r3, r0, r2
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2300      	movs	r3, #0
 8001716:	4699      	mov	r9, r3
 8001718:	469b      	mov	fp, r3
 800171a:	e697      	b.n	800144c <__aeabi_dmul+0x48>
 800171c:	0005      	movs	r5, r0
 800171e:	4325      	orrs	r5, r4
 8001720:	d126      	bne.n	8001770 <__aeabi_dmul+0x36c>
 8001722:	2208      	movs	r2, #8
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2302      	movs	r3, #2
 8001728:	2400      	movs	r4, #0
 800172a:	4691      	mov	r9, r2
 800172c:	469b      	mov	fp, r3
 800172e:	e68d      	b.n	800144c <__aeabi_dmul+0x48>
 8001730:	4652      	mov	r2, sl
 8001732:	9b00      	ldr	r3, [sp, #0]
 8001734:	4332      	orrs	r2, r6
 8001736:	d110      	bne.n	800175a <__aeabi_dmul+0x356>
 8001738:	4915      	ldr	r1, [pc, #84]	; (8001790 <__aeabi_dmul+0x38c>)
 800173a:	2600      	movs	r6, #0
 800173c:	468c      	mov	ip, r1
 800173e:	4463      	add	r3, ip
 8001740:	4649      	mov	r1, r9
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2302      	movs	r3, #2
 8001746:	4319      	orrs	r1, r3
 8001748:	4689      	mov	r9, r1
 800174a:	2002      	movs	r0, #2
 800174c:	e69d      	b.n	800148a <__aeabi_dmul+0x86>
 800174e:	465b      	mov	r3, fp
 8001750:	9701      	str	r7, [sp, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d000      	beq.n	8001758 <__aeabi_dmul+0x354>
 8001756:	e6ad      	b.n	80014b4 <__aeabi_dmul+0xb0>
 8001758:	e6c3      	b.n	80014e2 <__aeabi_dmul+0xde>
 800175a:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <__aeabi_dmul+0x38c>)
 800175c:	2003      	movs	r0, #3
 800175e:	4694      	mov	ip, r2
 8001760:	4463      	add	r3, ip
 8001762:	464a      	mov	r2, r9
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2303      	movs	r3, #3
 8001768:	431a      	orrs	r2, r3
 800176a:	4691      	mov	r9, r2
 800176c:	4652      	mov	r2, sl
 800176e:	e68c      	b.n	800148a <__aeabi_dmul+0x86>
 8001770:	220c      	movs	r2, #12
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2303      	movs	r3, #3
 8001776:	0005      	movs	r5, r0
 8001778:	4691      	mov	r9, r2
 800177a:	469b      	mov	fp, r3
 800177c:	e666      	b.n	800144c <__aeabi_dmul+0x48>
 800177e:	2304      	movs	r3, #4
 8001780:	4699      	mov	r9, r3
 8001782:	2300      	movs	r3, #0
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	2400      	movs	r4, #0
 800178a:	469b      	mov	fp, r3
 800178c:	e65e      	b.n	800144c <__aeabi_dmul+0x48>
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	000007ff 	.word	0x000007ff
 8001794:	fffffc01 	.word	0xfffffc01
 8001798:	0800a8e0 	.word	0x0800a8e0
 800179c:	000003ff 	.word	0x000003ff
 80017a0:	feffffff 	.word	0xfeffffff
 80017a4:	000007fe 	.word	0x000007fe
 80017a8:	fffffc0d 	.word	0xfffffc0d
 80017ac:	4649      	mov	r1, r9
 80017ae:	2301      	movs	r3, #1
 80017b0:	4319      	orrs	r1, r3
 80017b2:	4689      	mov	r9, r1
 80017b4:	2600      	movs	r6, #0
 80017b6:	2001      	movs	r0, #1
 80017b8:	e667      	b.n	800148a <__aeabi_dmul+0x86>
 80017ba:	2300      	movs	r3, #0
 80017bc:	2480      	movs	r4, #128	; 0x80
 80017be:	2500      	movs	r5, #0
 80017c0:	4a43      	ldr	r2, [pc, #268]	; (80018d0 <__aeabi_dmul+0x4cc>)
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	0324      	lsls	r4, r4, #12
 80017c6:	e67e      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80017c8:	2001      	movs	r0, #1
 80017ca:	1a40      	subs	r0, r0, r1
 80017cc:	2838      	cmp	r0, #56	; 0x38
 80017ce:	dd00      	ble.n	80017d2 <__aeabi_dmul+0x3ce>
 80017d0:	e676      	b.n	80014c0 <__aeabi_dmul+0xbc>
 80017d2:	281f      	cmp	r0, #31
 80017d4:	dd5b      	ble.n	800188e <__aeabi_dmul+0x48a>
 80017d6:	221f      	movs	r2, #31
 80017d8:	0023      	movs	r3, r4
 80017da:	4252      	negs	r2, r2
 80017dc:	1a51      	subs	r1, r2, r1
 80017de:	40cb      	lsrs	r3, r1
 80017e0:	0019      	movs	r1, r3
 80017e2:	2820      	cmp	r0, #32
 80017e4:	d003      	beq.n	80017ee <__aeabi_dmul+0x3ea>
 80017e6:	4a3b      	ldr	r2, [pc, #236]	; (80018d4 <__aeabi_dmul+0x4d0>)
 80017e8:	4462      	add	r2, ip
 80017ea:	4094      	lsls	r4, r2
 80017ec:	4325      	orrs	r5, r4
 80017ee:	1e6a      	subs	r2, r5, #1
 80017f0:	4195      	sbcs	r5, r2
 80017f2:	002a      	movs	r2, r5
 80017f4:	430a      	orrs	r2, r1
 80017f6:	2107      	movs	r1, #7
 80017f8:	000d      	movs	r5, r1
 80017fa:	2400      	movs	r4, #0
 80017fc:	4015      	ands	r5, r2
 80017fe:	4211      	tst	r1, r2
 8001800:	d05b      	beq.n	80018ba <__aeabi_dmul+0x4b6>
 8001802:	210f      	movs	r1, #15
 8001804:	2400      	movs	r4, #0
 8001806:	4011      	ands	r1, r2
 8001808:	2904      	cmp	r1, #4
 800180a:	d053      	beq.n	80018b4 <__aeabi_dmul+0x4b0>
 800180c:	1d11      	adds	r1, r2, #4
 800180e:	4291      	cmp	r1, r2
 8001810:	4192      	sbcs	r2, r2
 8001812:	4252      	negs	r2, r2
 8001814:	18a4      	adds	r4, r4, r2
 8001816:	000a      	movs	r2, r1
 8001818:	0223      	lsls	r3, r4, #8
 800181a:	d54b      	bpl.n	80018b4 <__aeabi_dmul+0x4b0>
 800181c:	2201      	movs	r2, #1
 800181e:	2400      	movs	r4, #0
 8001820:	2500      	movs	r5, #0
 8001822:	e650      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	031b      	lsls	r3, r3, #12
 8001828:	421c      	tst	r4, r3
 800182a:	d009      	beq.n	8001840 <__aeabi_dmul+0x43c>
 800182c:	421e      	tst	r6, r3
 800182e:	d107      	bne.n	8001840 <__aeabi_dmul+0x43c>
 8001830:	4333      	orrs	r3, r6
 8001832:	031c      	lsls	r4, r3, #12
 8001834:	4643      	mov	r3, r8
 8001836:	0015      	movs	r5, r2
 8001838:	0b24      	lsrs	r4, r4, #12
 800183a:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <__aeabi_dmul+0x4cc>)
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	e642      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	0312      	lsls	r2, r2, #12
 8001844:	4314      	orrs	r4, r2
 8001846:	0324      	lsls	r4, r4, #12
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <__aeabi_dmul+0x4cc>)
 800184a:	0b24      	lsrs	r4, r4, #12
 800184c:	9701      	str	r7, [sp, #4]
 800184e:	e63a      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001850:	f000 fd50 	bl	80022f4 <__clzsi2>
 8001854:	0001      	movs	r1, r0
 8001856:	0002      	movs	r2, r0
 8001858:	3115      	adds	r1, #21
 800185a:	3220      	adds	r2, #32
 800185c:	291c      	cmp	r1, #28
 800185e:	dc00      	bgt.n	8001862 <__aeabi_dmul+0x45e>
 8001860:	e74b      	b.n	80016fa <__aeabi_dmul+0x2f6>
 8001862:	0034      	movs	r4, r6
 8001864:	3808      	subs	r0, #8
 8001866:	2500      	movs	r5, #0
 8001868:	4084      	lsls	r4, r0
 800186a:	e750      	b.n	800170e <__aeabi_dmul+0x30a>
 800186c:	f000 fd42 	bl	80022f4 <__clzsi2>
 8001870:	0003      	movs	r3, r0
 8001872:	001a      	movs	r2, r3
 8001874:	3215      	adds	r2, #21
 8001876:	3020      	adds	r0, #32
 8001878:	2a1c      	cmp	r2, #28
 800187a:	dc00      	bgt.n	800187e <__aeabi_dmul+0x47a>
 800187c:	e71e      	b.n	80016bc <__aeabi_dmul+0x2b8>
 800187e:	4656      	mov	r6, sl
 8001880:	3b08      	subs	r3, #8
 8001882:	2200      	movs	r2, #0
 8001884:	409e      	lsls	r6, r3
 8001886:	e723      	b.n	80016d0 <__aeabi_dmul+0x2cc>
 8001888:	9b00      	ldr	r3, [sp, #0]
 800188a:	469c      	mov	ip, r3
 800188c:	e6e6      	b.n	800165c <__aeabi_dmul+0x258>
 800188e:	4912      	ldr	r1, [pc, #72]	; (80018d8 <__aeabi_dmul+0x4d4>)
 8001890:	0022      	movs	r2, r4
 8001892:	4461      	add	r1, ip
 8001894:	002e      	movs	r6, r5
 8001896:	408d      	lsls	r5, r1
 8001898:	408a      	lsls	r2, r1
 800189a:	40c6      	lsrs	r6, r0
 800189c:	1e69      	subs	r1, r5, #1
 800189e:	418d      	sbcs	r5, r1
 80018a0:	4332      	orrs	r2, r6
 80018a2:	432a      	orrs	r2, r5
 80018a4:	40c4      	lsrs	r4, r0
 80018a6:	0753      	lsls	r3, r2, #29
 80018a8:	d0b6      	beq.n	8001818 <__aeabi_dmul+0x414>
 80018aa:	210f      	movs	r1, #15
 80018ac:	4011      	ands	r1, r2
 80018ae:	2904      	cmp	r1, #4
 80018b0:	d1ac      	bne.n	800180c <__aeabi_dmul+0x408>
 80018b2:	e7b1      	b.n	8001818 <__aeabi_dmul+0x414>
 80018b4:	0765      	lsls	r5, r4, #29
 80018b6:	0264      	lsls	r4, r4, #9
 80018b8:	0b24      	lsrs	r4, r4, #12
 80018ba:	08d2      	lsrs	r2, r2, #3
 80018bc:	4315      	orrs	r5, r2
 80018be:	2200      	movs	r2, #0
 80018c0:	e601      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	0312      	lsls	r2, r2, #12
 80018c6:	4314      	orrs	r4, r2
 80018c8:	0324      	lsls	r4, r4, #12
 80018ca:	4a01      	ldr	r2, [pc, #4]	; (80018d0 <__aeabi_dmul+0x4cc>)
 80018cc:	0b24      	lsrs	r4, r4, #12
 80018ce:	e5fa      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80018d0:	000007ff 	.word	0x000007ff
 80018d4:	0000043e 	.word	0x0000043e
 80018d8:	0000041e 	.word	0x0000041e

080018dc <__aeabi_dsub>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	4657      	mov	r7, sl
 80018e0:	464e      	mov	r6, r9
 80018e2:	4645      	mov	r5, r8
 80018e4:	46de      	mov	lr, fp
 80018e6:	b5e0      	push	{r5, r6, r7, lr}
 80018e8:	001e      	movs	r6, r3
 80018ea:	0017      	movs	r7, r2
 80018ec:	004a      	lsls	r2, r1, #1
 80018ee:	030b      	lsls	r3, r1, #12
 80018f0:	0d52      	lsrs	r2, r2, #21
 80018f2:	0a5b      	lsrs	r3, r3, #9
 80018f4:	4690      	mov	r8, r2
 80018f6:	0f42      	lsrs	r2, r0, #29
 80018f8:	431a      	orrs	r2, r3
 80018fa:	0fcd      	lsrs	r5, r1, #31
 80018fc:	4ccd      	ldr	r4, [pc, #820]	; (8001c34 <__aeabi_dsub+0x358>)
 80018fe:	0331      	lsls	r1, r6, #12
 8001900:	00c3      	lsls	r3, r0, #3
 8001902:	4694      	mov	ip, r2
 8001904:	0070      	lsls	r0, r6, #1
 8001906:	0f7a      	lsrs	r2, r7, #29
 8001908:	0a49      	lsrs	r1, r1, #9
 800190a:	00ff      	lsls	r7, r7, #3
 800190c:	469a      	mov	sl, r3
 800190e:	46b9      	mov	r9, r7
 8001910:	0d40      	lsrs	r0, r0, #21
 8001912:	0ff6      	lsrs	r6, r6, #31
 8001914:	4311      	orrs	r1, r2
 8001916:	42a0      	cmp	r0, r4
 8001918:	d100      	bne.n	800191c <__aeabi_dsub+0x40>
 800191a:	e0b1      	b.n	8001a80 <__aeabi_dsub+0x1a4>
 800191c:	2201      	movs	r2, #1
 800191e:	4056      	eors	r6, r2
 8001920:	46b3      	mov	fp, r6
 8001922:	42b5      	cmp	r5, r6
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x4c>
 8001926:	e088      	b.n	8001a3a <__aeabi_dsub+0x15e>
 8001928:	4642      	mov	r2, r8
 800192a:	1a12      	subs	r2, r2, r0
 800192c:	2a00      	cmp	r2, #0
 800192e:	dc00      	bgt.n	8001932 <__aeabi_dsub+0x56>
 8001930:	e0ae      	b.n	8001a90 <__aeabi_dsub+0x1b4>
 8001932:	2800      	cmp	r0, #0
 8001934:	d100      	bne.n	8001938 <__aeabi_dsub+0x5c>
 8001936:	e0c1      	b.n	8001abc <__aeabi_dsub+0x1e0>
 8001938:	48be      	ldr	r0, [pc, #760]	; (8001c34 <__aeabi_dsub+0x358>)
 800193a:	4580      	cmp	r8, r0
 800193c:	d100      	bne.n	8001940 <__aeabi_dsub+0x64>
 800193e:	e151      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001940:	2080      	movs	r0, #128	; 0x80
 8001942:	0400      	lsls	r0, r0, #16
 8001944:	4301      	orrs	r1, r0
 8001946:	2a38      	cmp	r2, #56	; 0x38
 8001948:	dd00      	ble.n	800194c <__aeabi_dsub+0x70>
 800194a:	e17b      	b.n	8001c44 <__aeabi_dsub+0x368>
 800194c:	2a1f      	cmp	r2, #31
 800194e:	dd00      	ble.n	8001952 <__aeabi_dsub+0x76>
 8001950:	e1ee      	b.n	8001d30 <__aeabi_dsub+0x454>
 8001952:	2020      	movs	r0, #32
 8001954:	003e      	movs	r6, r7
 8001956:	1a80      	subs	r0, r0, r2
 8001958:	000c      	movs	r4, r1
 800195a:	40d6      	lsrs	r6, r2
 800195c:	40d1      	lsrs	r1, r2
 800195e:	4087      	lsls	r7, r0
 8001960:	4662      	mov	r2, ip
 8001962:	4084      	lsls	r4, r0
 8001964:	1a52      	subs	r2, r2, r1
 8001966:	1e78      	subs	r0, r7, #1
 8001968:	4187      	sbcs	r7, r0
 800196a:	4694      	mov	ip, r2
 800196c:	4334      	orrs	r4, r6
 800196e:	4327      	orrs	r7, r4
 8001970:	1bdc      	subs	r4, r3, r7
 8001972:	42a3      	cmp	r3, r4
 8001974:	419b      	sbcs	r3, r3
 8001976:	4662      	mov	r2, ip
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	4699      	mov	r9, r3
 800197e:	464b      	mov	r3, r9
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	d400      	bmi.n	8001986 <__aeabi_dsub+0xaa>
 8001984:	e118      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001986:	464b      	mov	r3, r9
 8001988:	0258      	lsls	r0, r3, #9
 800198a:	0a43      	lsrs	r3, r0, #9
 800198c:	4699      	mov	r9, r3
 800198e:	464b      	mov	r3, r9
 8001990:	2b00      	cmp	r3, #0
 8001992:	d100      	bne.n	8001996 <__aeabi_dsub+0xba>
 8001994:	e137      	b.n	8001c06 <__aeabi_dsub+0x32a>
 8001996:	4648      	mov	r0, r9
 8001998:	f000 fcac 	bl	80022f4 <__clzsi2>
 800199c:	0001      	movs	r1, r0
 800199e:	3908      	subs	r1, #8
 80019a0:	2320      	movs	r3, #32
 80019a2:	0022      	movs	r2, r4
 80019a4:	4648      	mov	r0, r9
 80019a6:	1a5b      	subs	r3, r3, r1
 80019a8:	40da      	lsrs	r2, r3
 80019aa:	4088      	lsls	r0, r1
 80019ac:	408c      	lsls	r4, r1
 80019ae:	4643      	mov	r3, r8
 80019b0:	4310      	orrs	r0, r2
 80019b2:	4588      	cmp	r8, r1
 80019b4:	dd00      	ble.n	80019b8 <__aeabi_dsub+0xdc>
 80019b6:	e136      	b.n	8001c26 <__aeabi_dsub+0x34a>
 80019b8:	1ac9      	subs	r1, r1, r3
 80019ba:	1c4b      	adds	r3, r1, #1
 80019bc:	2b1f      	cmp	r3, #31
 80019be:	dd00      	ble.n	80019c2 <__aeabi_dsub+0xe6>
 80019c0:	e0ea      	b.n	8001b98 <__aeabi_dsub+0x2bc>
 80019c2:	2220      	movs	r2, #32
 80019c4:	0026      	movs	r6, r4
 80019c6:	1ad2      	subs	r2, r2, r3
 80019c8:	0001      	movs	r1, r0
 80019ca:	4094      	lsls	r4, r2
 80019cc:	40de      	lsrs	r6, r3
 80019ce:	40d8      	lsrs	r0, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	4091      	lsls	r1, r2
 80019d4:	1e62      	subs	r2, r4, #1
 80019d6:	4194      	sbcs	r4, r2
 80019d8:	4681      	mov	r9, r0
 80019da:	4698      	mov	r8, r3
 80019dc:	4331      	orrs	r1, r6
 80019de:	430c      	orrs	r4, r1
 80019e0:	0763      	lsls	r3, r4, #29
 80019e2:	d009      	beq.n	80019f8 <__aeabi_dsub+0x11c>
 80019e4:	230f      	movs	r3, #15
 80019e6:	4023      	ands	r3, r4
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d005      	beq.n	80019f8 <__aeabi_dsub+0x11c>
 80019ec:	1d23      	adds	r3, r4, #4
 80019ee:	42a3      	cmp	r3, r4
 80019f0:	41a4      	sbcs	r4, r4
 80019f2:	4264      	negs	r4, r4
 80019f4:	44a1      	add	r9, r4
 80019f6:	001c      	movs	r4, r3
 80019f8:	464b      	mov	r3, r9
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	d400      	bmi.n	8001a00 <__aeabi_dsub+0x124>
 80019fe:	e0de      	b.n	8001bbe <__aeabi_dsub+0x2e2>
 8001a00:	4641      	mov	r1, r8
 8001a02:	4b8c      	ldr	r3, [pc, #560]	; (8001c34 <__aeabi_dsub+0x358>)
 8001a04:	3101      	adds	r1, #1
 8001a06:	4299      	cmp	r1, r3
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dsub+0x130>
 8001a0a:	e0e7      	b.n	8001bdc <__aeabi_dsub+0x300>
 8001a0c:	464b      	mov	r3, r9
 8001a0e:	488a      	ldr	r0, [pc, #552]	; (8001c38 <__aeabi_dsub+0x35c>)
 8001a10:	08e4      	lsrs	r4, r4, #3
 8001a12:	4003      	ands	r3, r0
 8001a14:	0018      	movs	r0, r3
 8001a16:	0549      	lsls	r1, r1, #21
 8001a18:	075b      	lsls	r3, r3, #29
 8001a1a:	0240      	lsls	r0, r0, #9
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	0d4a      	lsrs	r2, r1, #21
 8001a20:	0b04      	lsrs	r4, r0, #12
 8001a22:	0512      	lsls	r2, r2, #20
 8001a24:	07ed      	lsls	r5, r5, #31
 8001a26:	4322      	orrs	r2, r4
 8001a28:	432a      	orrs	r2, r5
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	0011      	movs	r1, r2
 8001a2e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a30:	46bb      	mov	fp, r7
 8001a32:	46b2      	mov	sl, r6
 8001a34:	46a9      	mov	r9, r5
 8001a36:	46a0      	mov	r8, r4
 8001a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a3a:	4642      	mov	r2, r8
 8001a3c:	1a12      	subs	r2, r2, r0
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	dd52      	ble.n	8001ae8 <__aeabi_dsub+0x20c>
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x16c>
 8001a46:	e09c      	b.n	8001b82 <__aeabi_dsub+0x2a6>
 8001a48:	45a0      	cmp	r8, r4
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x172>
 8001a4c:	e0ca      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001a4e:	2080      	movs	r0, #128	; 0x80
 8001a50:	0400      	lsls	r0, r0, #16
 8001a52:	4301      	orrs	r1, r0
 8001a54:	2a38      	cmp	r2, #56	; 0x38
 8001a56:	dd00      	ble.n	8001a5a <__aeabi_dsub+0x17e>
 8001a58:	e149      	b.n	8001cee <__aeabi_dsub+0x412>
 8001a5a:	2a1f      	cmp	r2, #31
 8001a5c:	dc00      	bgt.n	8001a60 <__aeabi_dsub+0x184>
 8001a5e:	e197      	b.n	8001d90 <__aeabi_dsub+0x4b4>
 8001a60:	0010      	movs	r0, r2
 8001a62:	000e      	movs	r6, r1
 8001a64:	3820      	subs	r0, #32
 8001a66:	40c6      	lsrs	r6, r0
 8001a68:	2a20      	cmp	r2, #32
 8001a6a:	d004      	beq.n	8001a76 <__aeabi_dsub+0x19a>
 8001a6c:	2040      	movs	r0, #64	; 0x40
 8001a6e:	1a82      	subs	r2, r0, r2
 8001a70:	4091      	lsls	r1, r2
 8001a72:	430f      	orrs	r7, r1
 8001a74:	46b9      	mov	r9, r7
 8001a76:	464c      	mov	r4, r9
 8001a78:	1e62      	subs	r2, r4, #1
 8001a7a:	4194      	sbcs	r4, r2
 8001a7c:	4334      	orrs	r4, r6
 8001a7e:	e13a      	b.n	8001cf6 <__aeabi_dsub+0x41a>
 8001a80:	000a      	movs	r2, r1
 8001a82:	433a      	orrs	r2, r7
 8001a84:	d028      	beq.n	8001ad8 <__aeabi_dsub+0x1fc>
 8001a86:	46b3      	mov	fp, r6
 8001a88:	42b5      	cmp	r5, r6
 8001a8a:	d02b      	beq.n	8001ae4 <__aeabi_dsub+0x208>
 8001a8c:	4a6b      	ldr	r2, [pc, #428]	; (8001c3c <__aeabi_dsub+0x360>)
 8001a8e:	4442      	add	r2, r8
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d05d      	beq.n	8001b50 <__aeabi_dsub+0x274>
 8001a94:	4642      	mov	r2, r8
 8001a96:	4644      	mov	r4, r8
 8001a98:	1a82      	subs	r2, r0, r2
 8001a9a:	2c00      	cmp	r4, #0
 8001a9c:	d000      	beq.n	8001aa0 <__aeabi_dsub+0x1c4>
 8001a9e:	e0f5      	b.n	8001c8c <__aeabi_dsub+0x3b0>
 8001aa0:	4665      	mov	r5, ip
 8001aa2:	431d      	orrs	r5, r3
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dsub+0x1cc>
 8001aa6:	e19c      	b.n	8001de2 <__aeabi_dsub+0x506>
 8001aa8:	1e55      	subs	r5, r2, #1
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x1d4>
 8001aae:	e1fb      	b.n	8001ea8 <__aeabi_dsub+0x5cc>
 8001ab0:	4c60      	ldr	r4, [pc, #384]	; (8001c34 <__aeabi_dsub+0x358>)
 8001ab2:	42a2      	cmp	r2, r4
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dsub+0x1dc>
 8001ab6:	e1bd      	b.n	8001e34 <__aeabi_dsub+0x558>
 8001ab8:	002a      	movs	r2, r5
 8001aba:	e0f0      	b.n	8001c9e <__aeabi_dsub+0x3c2>
 8001abc:	0008      	movs	r0, r1
 8001abe:	4338      	orrs	r0, r7
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x1e8>
 8001ac2:	e0c3      	b.n	8001c4c <__aeabi_dsub+0x370>
 8001ac4:	1e50      	subs	r0, r2, #1
 8001ac6:	2a01      	cmp	r2, #1
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x1f0>
 8001aca:	e1a8      	b.n	8001e1e <__aeabi_dsub+0x542>
 8001acc:	4c59      	ldr	r4, [pc, #356]	; (8001c34 <__aeabi_dsub+0x358>)
 8001ace:	42a2      	cmp	r2, r4
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x1f8>
 8001ad2:	e087      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	e736      	b.n	8001946 <__aeabi_dsub+0x6a>
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4056      	eors	r6, r2
 8001adc:	46b3      	mov	fp, r6
 8001ade:	42b5      	cmp	r5, r6
 8001ae0:	d000      	beq.n	8001ae4 <__aeabi_dsub+0x208>
 8001ae2:	e721      	b.n	8001928 <__aeabi_dsub+0x4c>
 8001ae4:	4a55      	ldr	r2, [pc, #340]	; (8001c3c <__aeabi_dsub+0x360>)
 8001ae6:	4442      	add	r2, r8
 8001ae8:	2a00      	cmp	r2, #0
 8001aea:	d100      	bne.n	8001aee <__aeabi_dsub+0x212>
 8001aec:	e0b5      	b.n	8001c5a <__aeabi_dsub+0x37e>
 8001aee:	4642      	mov	r2, r8
 8001af0:	4644      	mov	r4, r8
 8001af2:	1a82      	subs	r2, r0, r2
 8001af4:	2c00      	cmp	r4, #0
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x21e>
 8001af8:	e138      	b.n	8001d6c <__aeabi_dsub+0x490>
 8001afa:	4e4e      	ldr	r6, [pc, #312]	; (8001c34 <__aeabi_dsub+0x358>)
 8001afc:	42b0      	cmp	r0, r6
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x226>
 8001b00:	e1de      	b.n	8001ec0 <__aeabi_dsub+0x5e4>
 8001b02:	2680      	movs	r6, #128	; 0x80
 8001b04:	4664      	mov	r4, ip
 8001b06:	0436      	lsls	r6, r6, #16
 8001b08:	4334      	orrs	r4, r6
 8001b0a:	46a4      	mov	ip, r4
 8001b0c:	2a38      	cmp	r2, #56	; 0x38
 8001b0e:	dd00      	ble.n	8001b12 <__aeabi_dsub+0x236>
 8001b10:	e196      	b.n	8001e40 <__aeabi_dsub+0x564>
 8001b12:	2a1f      	cmp	r2, #31
 8001b14:	dd00      	ble.n	8001b18 <__aeabi_dsub+0x23c>
 8001b16:	e224      	b.n	8001f62 <__aeabi_dsub+0x686>
 8001b18:	2620      	movs	r6, #32
 8001b1a:	1ab4      	subs	r4, r6, r2
 8001b1c:	46a2      	mov	sl, r4
 8001b1e:	4664      	mov	r4, ip
 8001b20:	4656      	mov	r6, sl
 8001b22:	40b4      	lsls	r4, r6
 8001b24:	46a1      	mov	r9, r4
 8001b26:	001c      	movs	r4, r3
 8001b28:	464e      	mov	r6, r9
 8001b2a:	40d4      	lsrs	r4, r2
 8001b2c:	4326      	orrs	r6, r4
 8001b2e:	0034      	movs	r4, r6
 8001b30:	4656      	mov	r6, sl
 8001b32:	40b3      	lsls	r3, r6
 8001b34:	1e5e      	subs	r6, r3, #1
 8001b36:	41b3      	sbcs	r3, r6
 8001b38:	431c      	orrs	r4, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	40d3      	lsrs	r3, r2
 8001b3e:	18c9      	adds	r1, r1, r3
 8001b40:	19e4      	adds	r4, r4, r7
 8001b42:	42bc      	cmp	r4, r7
 8001b44:	41bf      	sbcs	r7, r7
 8001b46:	427f      	negs	r7, r7
 8001b48:	46b9      	mov	r9, r7
 8001b4a:	4680      	mov	r8, r0
 8001b4c:	4489      	add	r9, r1
 8001b4e:	e0d8      	b.n	8001d02 <__aeabi_dsub+0x426>
 8001b50:	4640      	mov	r0, r8
 8001b52:	4c3b      	ldr	r4, [pc, #236]	; (8001c40 <__aeabi_dsub+0x364>)
 8001b54:	3001      	adds	r0, #1
 8001b56:	4220      	tst	r0, r4
 8001b58:	d000      	beq.n	8001b5c <__aeabi_dsub+0x280>
 8001b5a:	e0b4      	b.n	8001cc6 <__aeabi_dsub+0x3ea>
 8001b5c:	4640      	mov	r0, r8
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d000      	beq.n	8001b64 <__aeabi_dsub+0x288>
 8001b62:	e144      	b.n	8001dee <__aeabi_dsub+0x512>
 8001b64:	4660      	mov	r0, ip
 8001b66:	4318      	orrs	r0, r3
 8001b68:	d100      	bne.n	8001b6c <__aeabi_dsub+0x290>
 8001b6a:	e190      	b.n	8001e8e <__aeabi_dsub+0x5b2>
 8001b6c:	0008      	movs	r0, r1
 8001b6e:	4338      	orrs	r0, r7
 8001b70:	d000      	beq.n	8001b74 <__aeabi_dsub+0x298>
 8001b72:	e1aa      	b.n	8001eca <__aeabi_dsub+0x5ee>
 8001b74:	4661      	mov	r1, ip
 8001b76:	08db      	lsrs	r3, r3, #3
 8001b78:	0749      	lsls	r1, r1, #29
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	4661      	mov	r1, ip
 8001b7e:	08cc      	lsrs	r4, r1, #3
 8001b80:	e027      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001b82:	0008      	movs	r0, r1
 8001b84:	4338      	orrs	r0, r7
 8001b86:	d061      	beq.n	8001c4c <__aeabi_dsub+0x370>
 8001b88:	1e50      	subs	r0, r2, #1
 8001b8a:	2a01      	cmp	r2, #1
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_dsub+0x2b4>
 8001b8e:	e139      	b.n	8001e04 <__aeabi_dsub+0x528>
 8001b90:	42a2      	cmp	r2, r4
 8001b92:	d027      	beq.n	8001be4 <__aeabi_dsub+0x308>
 8001b94:	0002      	movs	r2, r0
 8001b96:	e75d      	b.n	8001a54 <__aeabi_dsub+0x178>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	391f      	subs	r1, #31
 8001b9c:	40ca      	lsrs	r2, r1
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	2b20      	cmp	r3, #32
 8001ba2:	d003      	beq.n	8001bac <__aeabi_dsub+0x2d0>
 8001ba4:	2240      	movs	r2, #64	; 0x40
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	4098      	lsls	r0, r3
 8001baa:	4304      	orrs	r4, r0
 8001bac:	1e63      	subs	r3, r4, #1
 8001bae:	419c      	sbcs	r4, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4699      	mov	r9, r3
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	430c      	orrs	r4, r1
 8001bb8:	0763      	lsls	r3, r4, #29
 8001bba:	d000      	beq.n	8001bbe <__aeabi_dsub+0x2e2>
 8001bbc:	e712      	b.n	80019e4 <__aeabi_dsub+0x108>
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	464a      	mov	r2, r9
 8001bc2:	08e4      	lsrs	r4, r4, #3
 8001bc4:	075b      	lsls	r3, r3, #29
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	08d4      	lsrs	r4, r2, #3
 8001bca:	4642      	mov	r2, r8
 8001bcc:	4919      	ldr	r1, [pc, #100]	; (8001c34 <__aeabi_dsub+0x358>)
 8001bce:	428a      	cmp	r2, r1
 8001bd0:	d00e      	beq.n	8001bf0 <__aeabi_dsub+0x314>
 8001bd2:	0324      	lsls	r4, r4, #12
 8001bd4:	0552      	lsls	r2, r2, #21
 8001bd6:	0b24      	lsrs	r4, r4, #12
 8001bd8:	0d52      	lsrs	r2, r2, #21
 8001bda:	e722      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001bdc:	000a      	movs	r2, r1
 8001bde:	2400      	movs	r4, #0
 8001be0:	2300      	movs	r3, #0
 8001be2:	e71e      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	4662      	mov	r2, ip
 8001be8:	0752      	lsls	r2, r2, #29
 8001bea:	4313      	orrs	r3, r2
 8001bec:	4662      	mov	r2, ip
 8001bee:	08d4      	lsrs	r4, r2, #3
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	4322      	orrs	r2, r4
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dsub+0x31c>
 8001bf6:	e1fc      	b.n	8001ff2 <__aeabi_dsub+0x716>
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	0312      	lsls	r2, r2, #12
 8001bfc:	4314      	orrs	r4, r2
 8001bfe:	0324      	lsls	r4, r4, #12
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <__aeabi_dsub+0x358>)
 8001c02:	0b24      	lsrs	r4, r4, #12
 8001c04:	e70d      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001c06:	0020      	movs	r0, r4
 8001c08:	f000 fb74 	bl	80022f4 <__clzsi2>
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	3118      	adds	r1, #24
 8001c10:	291f      	cmp	r1, #31
 8001c12:	dc00      	bgt.n	8001c16 <__aeabi_dsub+0x33a>
 8001c14:	e6c4      	b.n	80019a0 <__aeabi_dsub+0xc4>
 8001c16:	3808      	subs	r0, #8
 8001c18:	4084      	lsls	r4, r0
 8001c1a:	4643      	mov	r3, r8
 8001c1c:	0020      	movs	r0, r4
 8001c1e:	2400      	movs	r4, #0
 8001c20:	4588      	cmp	r8, r1
 8001c22:	dc00      	bgt.n	8001c26 <__aeabi_dsub+0x34a>
 8001c24:	e6c8      	b.n	80019b8 <__aeabi_dsub+0xdc>
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__aeabi_dsub+0x35c>)
 8001c28:	1a5b      	subs	r3, r3, r1
 8001c2a:	4010      	ands	r0, r2
 8001c2c:	4698      	mov	r8, r3
 8001c2e:	4681      	mov	r9, r0
 8001c30:	e6d6      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	000007ff 	.word	0x000007ff
 8001c38:	ff7fffff 	.word	0xff7fffff
 8001c3c:	fffff801 	.word	0xfffff801
 8001c40:	000007fe 	.word	0x000007fe
 8001c44:	430f      	orrs	r7, r1
 8001c46:	1e7a      	subs	r2, r7, #1
 8001c48:	4197      	sbcs	r7, r2
 8001c4a:	e691      	b.n	8001970 <__aeabi_dsub+0x94>
 8001c4c:	4661      	mov	r1, ip
 8001c4e:	08db      	lsrs	r3, r3, #3
 8001c50:	0749      	lsls	r1, r1, #29
 8001c52:	430b      	orrs	r3, r1
 8001c54:	4661      	mov	r1, ip
 8001c56:	08cc      	lsrs	r4, r1, #3
 8001c58:	e7b8      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	4cd3      	ldr	r4, [pc, #844]	; (8001fac <__aeabi_dsub+0x6d0>)
 8001c5e:	3001      	adds	r0, #1
 8001c60:	4220      	tst	r0, r4
 8001c62:	d000      	beq.n	8001c66 <__aeabi_dsub+0x38a>
 8001c64:	e0a2      	b.n	8001dac <__aeabi_dsub+0x4d0>
 8001c66:	4640      	mov	r0, r8
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d000      	beq.n	8001c6e <__aeabi_dsub+0x392>
 8001c6c:	e101      	b.n	8001e72 <__aeabi_dsub+0x596>
 8001c6e:	4660      	mov	r0, ip
 8001c70:	4318      	orrs	r0, r3
 8001c72:	d100      	bne.n	8001c76 <__aeabi_dsub+0x39a>
 8001c74:	e15e      	b.n	8001f34 <__aeabi_dsub+0x658>
 8001c76:	0008      	movs	r0, r1
 8001c78:	4338      	orrs	r0, r7
 8001c7a:	d000      	beq.n	8001c7e <__aeabi_dsub+0x3a2>
 8001c7c:	e15f      	b.n	8001f3e <__aeabi_dsub+0x662>
 8001c7e:	4661      	mov	r1, ip
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	0749      	lsls	r1, r1, #29
 8001c84:	430b      	orrs	r3, r1
 8001c86:	4661      	mov	r1, ip
 8001c88:	08cc      	lsrs	r4, r1, #3
 8001c8a:	e7a2      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001c8c:	4dc8      	ldr	r5, [pc, #800]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001c8e:	42a8      	cmp	r0, r5
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x3b8>
 8001c92:	e0cf      	b.n	8001e34 <__aeabi_dsub+0x558>
 8001c94:	2580      	movs	r5, #128	; 0x80
 8001c96:	4664      	mov	r4, ip
 8001c98:	042d      	lsls	r5, r5, #16
 8001c9a:	432c      	orrs	r4, r5
 8001c9c:	46a4      	mov	ip, r4
 8001c9e:	2a38      	cmp	r2, #56	; 0x38
 8001ca0:	dc56      	bgt.n	8001d50 <__aeabi_dsub+0x474>
 8001ca2:	2a1f      	cmp	r2, #31
 8001ca4:	dd00      	ble.n	8001ca8 <__aeabi_dsub+0x3cc>
 8001ca6:	e0d1      	b.n	8001e4c <__aeabi_dsub+0x570>
 8001ca8:	2520      	movs	r5, #32
 8001caa:	001e      	movs	r6, r3
 8001cac:	1aad      	subs	r5, r5, r2
 8001cae:	4664      	mov	r4, ip
 8001cb0:	40ab      	lsls	r3, r5
 8001cb2:	40ac      	lsls	r4, r5
 8001cb4:	40d6      	lsrs	r6, r2
 8001cb6:	1e5d      	subs	r5, r3, #1
 8001cb8:	41ab      	sbcs	r3, r5
 8001cba:	4334      	orrs	r4, r6
 8001cbc:	4323      	orrs	r3, r4
 8001cbe:	4664      	mov	r4, ip
 8001cc0:	40d4      	lsrs	r4, r2
 8001cc2:	1b09      	subs	r1, r1, r4
 8001cc4:	e049      	b.n	8001d5a <__aeabi_dsub+0x47e>
 8001cc6:	4660      	mov	r0, ip
 8001cc8:	1bdc      	subs	r4, r3, r7
 8001cca:	1a46      	subs	r6, r0, r1
 8001ccc:	42a3      	cmp	r3, r4
 8001cce:	4180      	sbcs	r0, r0
 8001cd0:	4240      	negs	r0, r0
 8001cd2:	4681      	mov	r9, r0
 8001cd4:	0030      	movs	r0, r6
 8001cd6:	464e      	mov	r6, r9
 8001cd8:	1b80      	subs	r0, r0, r6
 8001cda:	4681      	mov	r9, r0
 8001cdc:	0200      	lsls	r0, r0, #8
 8001cde:	d476      	bmi.n	8001dce <__aeabi_dsub+0x4f2>
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	4323      	orrs	r3, r4
 8001ce4:	d000      	beq.n	8001ce8 <__aeabi_dsub+0x40c>
 8001ce6:	e652      	b.n	800198e <__aeabi_dsub+0xb2>
 8001ce8:	2400      	movs	r4, #0
 8001cea:	2500      	movs	r5, #0
 8001cec:	e771      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001cee:	4339      	orrs	r1, r7
 8001cf0:	000c      	movs	r4, r1
 8001cf2:	1e62      	subs	r2, r4, #1
 8001cf4:	4194      	sbcs	r4, r2
 8001cf6:	18e4      	adds	r4, r4, r3
 8001cf8:	429c      	cmp	r4, r3
 8001cfa:	419b      	sbcs	r3, r3
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	4463      	add	r3, ip
 8001d00:	4699      	mov	r9, r3
 8001d02:	464b      	mov	r3, r9
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	d400      	bmi.n	8001d0a <__aeabi_dsub+0x42e>
 8001d08:	e756      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	469c      	mov	ip, r3
 8001d0e:	4ba8      	ldr	r3, [pc, #672]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001d10:	44e0      	add	r8, ip
 8001d12:	4598      	cmp	r8, r3
 8001d14:	d038      	beq.n	8001d88 <__aeabi_dsub+0x4ac>
 8001d16:	464b      	mov	r3, r9
 8001d18:	48a6      	ldr	r0, [pc, #664]	; (8001fb4 <__aeabi_dsub+0x6d8>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4003      	ands	r3, r0
 8001d1e:	0018      	movs	r0, r3
 8001d20:	0863      	lsrs	r3, r4, #1
 8001d22:	4014      	ands	r4, r2
 8001d24:	431c      	orrs	r4, r3
 8001d26:	07c3      	lsls	r3, r0, #31
 8001d28:	431c      	orrs	r4, r3
 8001d2a:	0843      	lsrs	r3, r0, #1
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	e657      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001d30:	0010      	movs	r0, r2
 8001d32:	000e      	movs	r6, r1
 8001d34:	3820      	subs	r0, #32
 8001d36:	40c6      	lsrs	r6, r0
 8001d38:	2a20      	cmp	r2, #32
 8001d3a:	d004      	beq.n	8001d46 <__aeabi_dsub+0x46a>
 8001d3c:	2040      	movs	r0, #64	; 0x40
 8001d3e:	1a82      	subs	r2, r0, r2
 8001d40:	4091      	lsls	r1, r2
 8001d42:	430f      	orrs	r7, r1
 8001d44:	46b9      	mov	r9, r7
 8001d46:	464f      	mov	r7, r9
 8001d48:	1e7a      	subs	r2, r7, #1
 8001d4a:	4197      	sbcs	r7, r2
 8001d4c:	4337      	orrs	r7, r6
 8001d4e:	e60f      	b.n	8001970 <__aeabi_dsub+0x94>
 8001d50:	4662      	mov	r2, ip
 8001d52:	431a      	orrs	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	1e5a      	subs	r2, r3, #1
 8001d58:	4193      	sbcs	r3, r2
 8001d5a:	1afc      	subs	r4, r7, r3
 8001d5c:	42a7      	cmp	r7, r4
 8001d5e:	41bf      	sbcs	r7, r7
 8001d60:	427f      	negs	r7, r7
 8001d62:	1bcb      	subs	r3, r1, r7
 8001d64:	4699      	mov	r9, r3
 8001d66:	465d      	mov	r5, fp
 8001d68:	4680      	mov	r8, r0
 8001d6a:	e608      	b.n	800197e <__aeabi_dsub+0xa2>
 8001d6c:	4666      	mov	r6, ip
 8001d6e:	431e      	orrs	r6, r3
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dsub+0x498>
 8001d72:	e0be      	b.n	8001ef2 <__aeabi_dsub+0x616>
 8001d74:	1e56      	subs	r6, r2, #1
 8001d76:	2a01      	cmp	r2, #1
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x4a0>
 8001d7a:	e109      	b.n	8001f90 <__aeabi_dsub+0x6b4>
 8001d7c:	4c8c      	ldr	r4, [pc, #560]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001d7e:	42a2      	cmp	r2, r4
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x4a8>
 8001d82:	e119      	b.n	8001fb8 <__aeabi_dsub+0x6dc>
 8001d84:	0032      	movs	r2, r6
 8001d86:	e6c1      	b.n	8001b0c <__aeabi_dsub+0x230>
 8001d88:	4642      	mov	r2, r8
 8001d8a:	2400      	movs	r4, #0
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e648      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001d90:	2020      	movs	r0, #32
 8001d92:	000c      	movs	r4, r1
 8001d94:	1a80      	subs	r0, r0, r2
 8001d96:	003e      	movs	r6, r7
 8001d98:	4087      	lsls	r7, r0
 8001d9a:	4084      	lsls	r4, r0
 8001d9c:	40d6      	lsrs	r6, r2
 8001d9e:	1e78      	subs	r0, r7, #1
 8001da0:	4187      	sbcs	r7, r0
 8001da2:	40d1      	lsrs	r1, r2
 8001da4:	4334      	orrs	r4, r6
 8001da6:	433c      	orrs	r4, r7
 8001da8:	448c      	add	ip, r1
 8001daa:	e7a4      	b.n	8001cf6 <__aeabi_dsub+0x41a>
 8001dac:	4a80      	ldr	r2, [pc, #512]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001dae:	4290      	cmp	r0, r2
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x4d8>
 8001db2:	e0e9      	b.n	8001f88 <__aeabi_dsub+0x6ac>
 8001db4:	19df      	adds	r7, r3, r7
 8001db6:	429f      	cmp	r7, r3
 8001db8:	419b      	sbcs	r3, r3
 8001dba:	4461      	add	r1, ip
 8001dbc:	425b      	negs	r3, r3
 8001dbe:	18c9      	adds	r1, r1, r3
 8001dc0:	07cc      	lsls	r4, r1, #31
 8001dc2:	087f      	lsrs	r7, r7, #1
 8001dc4:	084b      	lsrs	r3, r1, #1
 8001dc6:	4699      	mov	r9, r3
 8001dc8:	4680      	mov	r8, r0
 8001dca:	433c      	orrs	r4, r7
 8001dcc:	e6f4      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001dce:	1afc      	subs	r4, r7, r3
 8001dd0:	42a7      	cmp	r7, r4
 8001dd2:	41bf      	sbcs	r7, r7
 8001dd4:	4663      	mov	r3, ip
 8001dd6:	427f      	negs	r7, r7
 8001dd8:	1ac9      	subs	r1, r1, r3
 8001dda:	1bcb      	subs	r3, r1, r7
 8001ddc:	4699      	mov	r9, r3
 8001dde:	465d      	mov	r5, fp
 8001de0:	e5d5      	b.n	800198e <__aeabi_dsub+0xb2>
 8001de2:	08ff      	lsrs	r7, r7, #3
 8001de4:	074b      	lsls	r3, r1, #29
 8001de6:	465d      	mov	r5, fp
 8001de8:	433b      	orrs	r3, r7
 8001dea:	08cc      	lsrs	r4, r1, #3
 8001dec:	e6ee      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001dee:	4662      	mov	r2, ip
 8001df0:	431a      	orrs	r2, r3
 8001df2:	d000      	beq.n	8001df6 <__aeabi_dsub+0x51a>
 8001df4:	e082      	b.n	8001efc <__aeabi_dsub+0x620>
 8001df6:	000b      	movs	r3, r1
 8001df8:	433b      	orrs	r3, r7
 8001dfa:	d11b      	bne.n	8001e34 <__aeabi_dsub+0x558>
 8001dfc:	2480      	movs	r4, #128	; 0x80
 8001dfe:	2500      	movs	r5, #0
 8001e00:	0324      	lsls	r4, r4, #12
 8001e02:	e6f9      	b.n	8001bf8 <__aeabi_dsub+0x31c>
 8001e04:	19dc      	adds	r4, r3, r7
 8001e06:	429c      	cmp	r4, r3
 8001e08:	419b      	sbcs	r3, r3
 8001e0a:	4461      	add	r1, ip
 8001e0c:	4689      	mov	r9, r1
 8001e0e:	425b      	negs	r3, r3
 8001e10:	4499      	add	r9, r3
 8001e12:	464b      	mov	r3, r9
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	d444      	bmi.n	8001ea2 <__aeabi_dsub+0x5c6>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	4698      	mov	r8, r3
 8001e1c:	e6cc      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001e1e:	1bdc      	subs	r4, r3, r7
 8001e20:	4662      	mov	r2, ip
 8001e22:	42a3      	cmp	r3, r4
 8001e24:	419b      	sbcs	r3, r3
 8001e26:	1a51      	subs	r1, r2, r1
 8001e28:	425b      	negs	r3, r3
 8001e2a:	1acb      	subs	r3, r1, r3
 8001e2c:	4699      	mov	r9, r3
 8001e2e:	2301      	movs	r3, #1
 8001e30:	4698      	mov	r8, r3
 8001e32:	e5a4      	b.n	800197e <__aeabi_dsub+0xa2>
 8001e34:	08ff      	lsrs	r7, r7, #3
 8001e36:	074b      	lsls	r3, r1, #29
 8001e38:	465d      	mov	r5, fp
 8001e3a:	433b      	orrs	r3, r7
 8001e3c:	08cc      	lsrs	r4, r1, #3
 8001e3e:	e6d7      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e40:	4662      	mov	r2, ip
 8001e42:	431a      	orrs	r2, r3
 8001e44:	0014      	movs	r4, r2
 8001e46:	1e63      	subs	r3, r4, #1
 8001e48:	419c      	sbcs	r4, r3
 8001e4a:	e679      	b.n	8001b40 <__aeabi_dsub+0x264>
 8001e4c:	0015      	movs	r5, r2
 8001e4e:	4664      	mov	r4, ip
 8001e50:	3d20      	subs	r5, #32
 8001e52:	40ec      	lsrs	r4, r5
 8001e54:	46a0      	mov	r8, r4
 8001e56:	2a20      	cmp	r2, #32
 8001e58:	d005      	beq.n	8001e66 <__aeabi_dsub+0x58a>
 8001e5a:	2540      	movs	r5, #64	; 0x40
 8001e5c:	4664      	mov	r4, ip
 8001e5e:	1aaa      	subs	r2, r5, r2
 8001e60:	4094      	lsls	r4, r2
 8001e62:	4323      	orrs	r3, r4
 8001e64:	469a      	mov	sl, r3
 8001e66:	4654      	mov	r4, sl
 8001e68:	1e63      	subs	r3, r4, #1
 8001e6a:	419c      	sbcs	r4, r3
 8001e6c:	4643      	mov	r3, r8
 8001e6e:	4323      	orrs	r3, r4
 8001e70:	e773      	b.n	8001d5a <__aeabi_dsub+0x47e>
 8001e72:	4662      	mov	r2, ip
 8001e74:	431a      	orrs	r2, r3
 8001e76:	d023      	beq.n	8001ec0 <__aeabi_dsub+0x5e4>
 8001e78:	000a      	movs	r2, r1
 8001e7a:	433a      	orrs	r2, r7
 8001e7c:	d000      	beq.n	8001e80 <__aeabi_dsub+0x5a4>
 8001e7e:	e0a0      	b.n	8001fc2 <__aeabi_dsub+0x6e6>
 8001e80:	4662      	mov	r2, ip
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	0752      	lsls	r2, r2, #29
 8001e86:	4313      	orrs	r3, r2
 8001e88:	4662      	mov	r2, ip
 8001e8a:	08d4      	lsrs	r4, r2, #3
 8001e8c:	e6b0      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e8e:	000b      	movs	r3, r1
 8001e90:	433b      	orrs	r3, r7
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x5ba>
 8001e94:	e728      	b.n	8001ce8 <__aeabi_dsub+0x40c>
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	074b      	lsls	r3, r1, #29
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	433b      	orrs	r3, r7
 8001e9e:	08cc      	lsrs	r4, r1, #3
 8001ea0:	e697      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	4698      	mov	r8, r3
 8001ea6:	e736      	b.n	8001d16 <__aeabi_dsub+0x43a>
 8001ea8:	1afc      	subs	r4, r7, r3
 8001eaa:	42a7      	cmp	r7, r4
 8001eac:	41bf      	sbcs	r7, r7
 8001eae:	4663      	mov	r3, ip
 8001eb0:	427f      	negs	r7, r7
 8001eb2:	1ac9      	subs	r1, r1, r3
 8001eb4:	1bcb      	subs	r3, r1, r7
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	2301      	movs	r3, #1
 8001eba:	465d      	mov	r5, fp
 8001ebc:	4698      	mov	r8, r3
 8001ebe:	e55e      	b.n	800197e <__aeabi_dsub+0xa2>
 8001ec0:	074b      	lsls	r3, r1, #29
 8001ec2:	08ff      	lsrs	r7, r7, #3
 8001ec4:	433b      	orrs	r3, r7
 8001ec6:	08cc      	lsrs	r4, r1, #3
 8001ec8:	e692      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001eca:	1bdc      	subs	r4, r3, r7
 8001ecc:	4660      	mov	r0, ip
 8001ece:	42a3      	cmp	r3, r4
 8001ed0:	41b6      	sbcs	r6, r6
 8001ed2:	1a40      	subs	r0, r0, r1
 8001ed4:	4276      	negs	r6, r6
 8001ed6:	1b80      	subs	r0, r0, r6
 8001ed8:	4681      	mov	r9, r0
 8001eda:	0200      	lsls	r0, r0, #8
 8001edc:	d560      	bpl.n	8001fa0 <__aeabi_dsub+0x6c4>
 8001ede:	1afc      	subs	r4, r7, r3
 8001ee0:	42a7      	cmp	r7, r4
 8001ee2:	41bf      	sbcs	r7, r7
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	427f      	negs	r7, r7
 8001ee8:	1ac9      	subs	r1, r1, r3
 8001eea:	1bcb      	subs	r3, r1, r7
 8001eec:	4699      	mov	r9, r3
 8001eee:	465d      	mov	r5, fp
 8001ef0:	e576      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001ef2:	08ff      	lsrs	r7, r7, #3
 8001ef4:	074b      	lsls	r3, r1, #29
 8001ef6:	433b      	orrs	r3, r7
 8001ef8:	08cc      	lsrs	r4, r1, #3
 8001efa:	e667      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001efc:	000a      	movs	r2, r1
 8001efe:	08db      	lsrs	r3, r3, #3
 8001f00:	433a      	orrs	r2, r7
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x62a>
 8001f04:	e66f      	b.n	8001be6 <__aeabi_dsub+0x30a>
 8001f06:	4662      	mov	r2, ip
 8001f08:	0752      	lsls	r2, r2, #29
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	4662      	mov	r2, ip
 8001f0e:	08d4      	lsrs	r4, r2, #3
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	0312      	lsls	r2, r2, #12
 8001f14:	4214      	tst	r4, r2
 8001f16:	d007      	beq.n	8001f28 <__aeabi_dsub+0x64c>
 8001f18:	08c8      	lsrs	r0, r1, #3
 8001f1a:	4210      	tst	r0, r2
 8001f1c:	d104      	bne.n	8001f28 <__aeabi_dsub+0x64c>
 8001f1e:	465d      	mov	r5, fp
 8001f20:	0004      	movs	r4, r0
 8001f22:	08fb      	lsrs	r3, r7, #3
 8001f24:	0749      	lsls	r1, r1, #29
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0f5a      	lsrs	r2, r3, #29
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	08db      	lsrs	r3, r3, #3
 8001f2e:	0752      	lsls	r2, r2, #29
 8001f30:	4313      	orrs	r3, r2
 8001f32:	e65d      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001f34:	074b      	lsls	r3, r1, #29
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	433b      	orrs	r3, r7
 8001f3a:	08cc      	lsrs	r4, r1, #3
 8001f3c:	e649      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001f3e:	19dc      	adds	r4, r3, r7
 8001f40:	429c      	cmp	r4, r3
 8001f42:	419b      	sbcs	r3, r3
 8001f44:	4461      	add	r1, ip
 8001f46:	4689      	mov	r9, r1
 8001f48:	425b      	negs	r3, r3
 8001f4a:	4499      	add	r9, r3
 8001f4c:	464b      	mov	r3, r9
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	d400      	bmi.n	8001f54 <__aeabi_dsub+0x678>
 8001f52:	e631      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001f54:	464a      	mov	r2, r9
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <__aeabi_dsub+0x6d8>)
 8001f58:	401a      	ands	r2, r3
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	4691      	mov	r9, r2
 8001f5e:	4698      	mov	r8, r3
 8001f60:	e62a      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001f62:	0016      	movs	r6, r2
 8001f64:	4664      	mov	r4, ip
 8001f66:	3e20      	subs	r6, #32
 8001f68:	40f4      	lsrs	r4, r6
 8001f6a:	46a0      	mov	r8, r4
 8001f6c:	2a20      	cmp	r2, #32
 8001f6e:	d005      	beq.n	8001f7c <__aeabi_dsub+0x6a0>
 8001f70:	2640      	movs	r6, #64	; 0x40
 8001f72:	4664      	mov	r4, ip
 8001f74:	1ab2      	subs	r2, r6, r2
 8001f76:	4094      	lsls	r4, r2
 8001f78:	4323      	orrs	r3, r4
 8001f7a:	469a      	mov	sl, r3
 8001f7c:	4654      	mov	r4, sl
 8001f7e:	1e63      	subs	r3, r4, #1
 8001f80:	419c      	sbcs	r4, r3
 8001f82:	4643      	mov	r3, r8
 8001f84:	431c      	orrs	r4, r3
 8001f86:	e5db      	b.n	8001b40 <__aeabi_dsub+0x264>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e548      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001f90:	19dc      	adds	r4, r3, r7
 8001f92:	42bc      	cmp	r4, r7
 8001f94:	41bf      	sbcs	r7, r7
 8001f96:	4461      	add	r1, ip
 8001f98:	4689      	mov	r9, r1
 8001f9a:	427f      	negs	r7, r7
 8001f9c:	44b9      	add	r9, r7
 8001f9e:	e738      	b.n	8001e12 <__aeabi_dsub+0x536>
 8001fa0:	464b      	mov	r3, r9
 8001fa2:	4323      	orrs	r3, r4
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x6cc>
 8001fa6:	e69f      	b.n	8001ce8 <__aeabi_dsub+0x40c>
 8001fa8:	e606      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	000007fe 	.word	0x000007fe
 8001fb0:	000007ff 	.word	0x000007ff
 8001fb4:	ff7fffff 	.word	0xff7fffff
 8001fb8:	08ff      	lsrs	r7, r7, #3
 8001fba:	074b      	lsls	r3, r1, #29
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	08cc      	lsrs	r4, r1, #3
 8001fc0:	e616      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	0752      	lsls	r2, r2, #29
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	4662      	mov	r2, ip
 8001fcc:	08d4      	lsrs	r4, r2, #3
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	0312      	lsls	r2, r2, #12
 8001fd2:	4214      	tst	r4, r2
 8001fd4:	d007      	beq.n	8001fe6 <__aeabi_dsub+0x70a>
 8001fd6:	08c8      	lsrs	r0, r1, #3
 8001fd8:	4210      	tst	r0, r2
 8001fda:	d104      	bne.n	8001fe6 <__aeabi_dsub+0x70a>
 8001fdc:	465d      	mov	r5, fp
 8001fde:	0004      	movs	r4, r0
 8001fe0:	08fb      	lsrs	r3, r7, #3
 8001fe2:	0749      	lsls	r1, r1, #29
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	0f5a      	lsrs	r2, r3, #29
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	0752      	lsls	r2, r2, #29
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	e5fe      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	4a01      	ldr	r2, [pc, #4]	; (8001ffc <__aeabi_dsub+0x720>)
 8001ff6:	001c      	movs	r4, r3
 8001ff8:	e513      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	000007ff 	.word	0x000007ff

08002000 <__aeabi_dcmpun>:
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	0005      	movs	r5, r0
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <__aeabi_dcmpun+0x38>)
 8002006:	031c      	lsls	r4, r3, #12
 8002008:	0016      	movs	r6, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	030a      	lsls	r2, r1, #12
 800200e:	0049      	lsls	r1, r1, #1
 8002010:	0b12      	lsrs	r2, r2, #12
 8002012:	0d49      	lsrs	r1, r1, #21
 8002014:	0b24      	lsrs	r4, r4, #12
 8002016:	0d5b      	lsrs	r3, r3, #21
 8002018:	4281      	cmp	r1, r0
 800201a:	d008      	beq.n	800202e <__aeabi_dcmpun+0x2e>
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <__aeabi_dcmpun+0x38>)
 800201e:	2000      	movs	r0, #0
 8002020:	4293      	cmp	r3, r2
 8002022:	d103      	bne.n	800202c <__aeabi_dcmpun+0x2c>
 8002024:	0020      	movs	r0, r4
 8002026:	4330      	orrs	r0, r6
 8002028:	1e43      	subs	r3, r0, #1
 800202a:	4198      	sbcs	r0, r3
 800202c:	bd70      	pop	{r4, r5, r6, pc}
 800202e:	2001      	movs	r0, #1
 8002030:	432a      	orrs	r2, r5
 8002032:	d1fb      	bne.n	800202c <__aeabi_dcmpun+0x2c>
 8002034:	e7f2      	b.n	800201c <__aeabi_dcmpun+0x1c>
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	000007ff 	.word	0x000007ff

0800203c <__aeabi_d2iz>:
 800203c:	000a      	movs	r2, r1
 800203e:	b530      	push	{r4, r5, lr}
 8002040:	4c13      	ldr	r4, [pc, #76]	; (8002090 <__aeabi_d2iz+0x54>)
 8002042:	0053      	lsls	r3, r2, #1
 8002044:	0309      	lsls	r1, r1, #12
 8002046:	0005      	movs	r5, r0
 8002048:	0b09      	lsrs	r1, r1, #12
 800204a:	2000      	movs	r0, #0
 800204c:	0d5b      	lsrs	r3, r3, #21
 800204e:	0fd2      	lsrs	r2, r2, #31
 8002050:	42a3      	cmp	r3, r4
 8002052:	dd04      	ble.n	800205e <__aeabi_d2iz+0x22>
 8002054:	480f      	ldr	r0, [pc, #60]	; (8002094 <__aeabi_d2iz+0x58>)
 8002056:	4283      	cmp	r3, r0
 8002058:	dd02      	ble.n	8002060 <__aeabi_d2iz+0x24>
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <__aeabi_d2iz+0x5c>)
 800205c:	18d0      	adds	r0, r2, r3
 800205e:	bd30      	pop	{r4, r5, pc}
 8002060:	2080      	movs	r0, #128	; 0x80
 8002062:	0340      	lsls	r0, r0, #13
 8002064:	4301      	orrs	r1, r0
 8002066:	480d      	ldr	r0, [pc, #52]	; (800209c <__aeabi_d2iz+0x60>)
 8002068:	1ac0      	subs	r0, r0, r3
 800206a:	281f      	cmp	r0, #31
 800206c:	dd08      	ble.n	8002080 <__aeabi_d2iz+0x44>
 800206e:	480c      	ldr	r0, [pc, #48]	; (80020a0 <__aeabi_d2iz+0x64>)
 8002070:	1ac3      	subs	r3, r0, r3
 8002072:	40d9      	lsrs	r1, r3
 8002074:	000b      	movs	r3, r1
 8002076:	4258      	negs	r0, r3
 8002078:	2a00      	cmp	r2, #0
 800207a:	d1f0      	bne.n	800205e <__aeabi_d2iz+0x22>
 800207c:	0018      	movs	r0, r3
 800207e:	e7ee      	b.n	800205e <__aeabi_d2iz+0x22>
 8002080:	4c08      	ldr	r4, [pc, #32]	; (80020a4 <__aeabi_d2iz+0x68>)
 8002082:	40c5      	lsrs	r5, r0
 8002084:	46a4      	mov	ip, r4
 8002086:	4463      	add	r3, ip
 8002088:	4099      	lsls	r1, r3
 800208a:	000b      	movs	r3, r1
 800208c:	432b      	orrs	r3, r5
 800208e:	e7f2      	b.n	8002076 <__aeabi_d2iz+0x3a>
 8002090:	000003fe 	.word	0x000003fe
 8002094:	0000041d 	.word	0x0000041d
 8002098:	7fffffff 	.word	0x7fffffff
 800209c:	00000433 	.word	0x00000433
 80020a0:	00000413 	.word	0x00000413
 80020a4:	fffffbed 	.word	0xfffffbed

080020a8 <__aeabi_i2d>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	2800      	cmp	r0, #0
 80020ac:	d016      	beq.n	80020dc <__aeabi_i2d+0x34>
 80020ae:	17c3      	asrs	r3, r0, #31
 80020b0:	18c5      	adds	r5, r0, r3
 80020b2:	405d      	eors	r5, r3
 80020b4:	0fc4      	lsrs	r4, r0, #31
 80020b6:	0028      	movs	r0, r5
 80020b8:	f000 f91c 	bl	80022f4 <__clzsi2>
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <__aeabi_i2d+0x5c>)
 80020be:	1a12      	subs	r2, r2, r0
 80020c0:	280a      	cmp	r0, #10
 80020c2:	dc16      	bgt.n	80020f2 <__aeabi_i2d+0x4a>
 80020c4:	0003      	movs	r3, r0
 80020c6:	002e      	movs	r6, r5
 80020c8:	3315      	adds	r3, #21
 80020ca:	409e      	lsls	r6, r3
 80020cc:	230b      	movs	r3, #11
 80020ce:	1a18      	subs	r0, r3, r0
 80020d0:	40c5      	lsrs	r5, r0
 80020d2:	0552      	lsls	r2, r2, #21
 80020d4:	032d      	lsls	r5, r5, #12
 80020d6:	0b2d      	lsrs	r5, r5, #12
 80020d8:	0d53      	lsrs	r3, r2, #21
 80020da:	e003      	b.n	80020e4 <__aeabi_i2d+0x3c>
 80020dc:	2400      	movs	r4, #0
 80020de:	2300      	movs	r3, #0
 80020e0:	2500      	movs	r5, #0
 80020e2:	2600      	movs	r6, #0
 80020e4:	051b      	lsls	r3, r3, #20
 80020e6:	432b      	orrs	r3, r5
 80020e8:	07e4      	lsls	r4, r4, #31
 80020ea:	4323      	orrs	r3, r4
 80020ec:	0030      	movs	r0, r6
 80020ee:	0019      	movs	r1, r3
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
 80020f2:	380b      	subs	r0, #11
 80020f4:	4085      	lsls	r5, r0
 80020f6:	0552      	lsls	r2, r2, #21
 80020f8:	032d      	lsls	r5, r5, #12
 80020fa:	2600      	movs	r6, #0
 80020fc:	0b2d      	lsrs	r5, r5, #12
 80020fe:	0d53      	lsrs	r3, r2, #21
 8002100:	e7f0      	b.n	80020e4 <__aeabi_i2d+0x3c>
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	0000041e 	.word	0x0000041e

08002108 <__aeabi_ui2d>:
 8002108:	b510      	push	{r4, lr}
 800210a:	1e04      	subs	r4, r0, #0
 800210c:	d010      	beq.n	8002130 <__aeabi_ui2d+0x28>
 800210e:	f000 f8f1 	bl	80022f4 <__clzsi2>
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <__aeabi_ui2d+0x48>)
 8002114:	1a1b      	subs	r3, r3, r0
 8002116:	280a      	cmp	r0, #10
 8002118:	dc11      	bgt.n	800213e <__aeabi_ui2d+0x36>
 800211a:	220b      	movs	r2, #11
 800211c:	0021      	movs	r1, r4
 800211e:	1a12      	subs	r2, r2, r0
 8002120:	40d1      	lsrs	r1, r2
 8002122:	3015      	adds	r0, #21
 8002124:	030a      	lsls	r2, r1, #12
 8002126:	055b      	lsls	r3, r3, #21
 8002128:	4084      	lsls	r4, r0
 800212a:	0b12      	lsrs	r2, r2, #12
 800212c:	0d5b      	lsrs	r3, r3, #21
 800212e:	e001      	b.n	8002134 <__aeabi_ui2d+0x2c>
 8002130:	2300      	movs	r3, #0
 8002132:	2200      	movs	r2, #0
 8002134:	051b      	lsls	r3, r3, #20
 8002136:	4313      	orrs	r3, r2
 8002138:	0020      	movs	r0, r4
 800213a:	0019      	movs	r1, r3
 800213c:	bd10      	pop	{r4, pc}
 800213e:	0022      	movs	r2, r4
 8002140:	380b      	subs	r0, #11
 8002142:	4082      	lsls	r2, r0
 8002144:	055b      	lsls	r3, r3, #21
 8002146:	0312      	lsls	r2, r2, #12
 8002148:	2400      	movs	r4, #0
 800214a:	0b12      	lsrs	r2, r2, #12
 800214c:	0d5b      	lsrs	r3, r3, #21
 800214e:	e7f1      	b.n	8002134 <__aeabi_ui2d+0x2c>
 8002150:	0000041e 	.word	0x0000041e

08002154 <__aeabi_f2d>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	0043      	lsls	r3, r0, #1
 8002158:	0246      	lsls	r6, r0, #9
 800215a:	0fc4      	lsrs	r4, r0, #31
 800215c:	20fe      	movs	r0, #254	; 0xfe
 800215e:	0e1b      	lsrs	r3, r3, #24
 8002160:	1c59      	adds	r1, r3, #1
 8002162:	0a75      	lsrs	r5, r6, #9
 8002164:	4208      	tst	r0, r1
 8002166:	d00c      	beq.n	8002182 <__aeabi_f2d+0x2e>
 8002168:	22e0      	movs	r2, #224	; 0xe0
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	4694      	mov	ip, r2
 800216e:	076d      	lsls	r5, r5, #29
 8002170:	0b36      	lsrs	r6, r6, #12
 8002172:	4463      	add	r3, ip
 8002174:	051b      	lsls	r3, r3, #20
 8002176:	4333      	orrs	r3, r6
 8002178:	07e4      	lsls	r4, r4, #31
 800217a:	4323      	orrs	r3, r4
 800217c:	0028      	movs	r0, r5
 800217e:	0019      	movs	r1, r3
 8002180:	bd70      	pop	{r4, r5, r6, pc}
 8002182:	2b00      	cmp	r3, #0
 8002184:	d114      	bne.n	80021b0 <__aeabi_f2d+0x5c>
 8002186:	2d00      	cmp	r5, #0
 8002188:	d01b      	beq.n	80021c2 <__aeabi_f2d+0x6e>
 800218a:	0028      	movs	r0, r5
 800218c:	f000 f8b2 	bl	80022f4 <__clzsi2>
 8002190:	280a      	cmp	r0, #10
 8002192:	dc1c      	bgt.n	80021ce <__aeabi_f2d+0x7a>
 8002194:	230b      	movs	r3, #11
 8002196:	002e      	movs	r6, r5
 8002198:	1a1b      	subs	r3, r3, r0
 800219a:	40de      	lsrs	r6, r3
 800219c:	0003      	movs	r3, r0
 800219e:	3315      	adds	r3, #21
 80021a0:	409d      	lsls	r5, r3
 80021a2:	4a0e      	ldr	r2, [pc, #56]	; (80021dc <__aeabi_f2d+0x88>)
 80021a4:	0336      	lsls	r6, r6, #12
 80021a6:	1a12      	subs	r2, r2, r0
 80021a8:	0552      	lsls	r2, r2, #21
 80021aa:	0b36      	lsrs	r6, r6, #12
 80021ac:	0d53      	lsrs	r3, r2, #21
 80021ae:	e7e1      	b.n	8002174 <__aeabi_f2d+0x20>
 80021b0:	2d00      	cmp	r5, #0
 80021b2:	d009      	beq.n	80021c8 <__aeabi_f2d+0x74>
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	0b36      	lsrs	r6, r6, #12
 80021b8:	0312      	lsls	r2, r2, #12
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <__aeabi_f2d+0x8c>)
 80021bc:	076d      	lsls	r5, r5, #29
 80021be:	4316      	orrs	r6, r2
 80021c0:	e7d8      	b.n	8002174 <__aeabi_f2d+0x20>
 80021c2:	2300      	movs	r3, #0
 80021c4:	2600      	movs	r6, #0
 80021c6:	e7d5      	b.n	8002174 <__aeabi_f2d+0x20>
 80021c8:	2600      	movs	r6, #0
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <__aeabi_f2d+0x8c>)
 80021cc:	e7d2      	b.n	8002174 <__aeabi_f2d+0x20>
 80021ce:	0003      	movs	r3, r0
 80021d0:	3b0b      	subs	r3, #11
 80021d2:	409d      	lsls	r5, r3
 80021d4:	002e      	movs	r6, r5
 80021d6:	2500      	movs	r5, #0
 80021d8:	e7e3      	b.n	80021a2 <__aeabi_f2d+0x4e>
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	00000389 	.word	0x00000389
 80021e0:	000007ff 	.word	0x000007ff

080021e4 <__aeabi_d2f>:
 80021e4:	0002      	movs	r2, r0
 80021e6:	004b      	lsls	r3, r1, #1
 80021e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ea:	0d5b      	lsrs	r3, r3, #21
 80021ec:	030c      	lsls	r4, r1, #12
 80021ee:	4e3d      	ldr	r6, [pc, #244]	; (80022e4 <__aeabi_d2f+0x100>)
 80021f0:	0a64      	lsrs	r4, r4, #9
 80021f2:	0f40      	lsrs	r0, r0, #29
 80021f4:	1c5f      	adds	r7, r3, #1
 80021f6:	0fc9      	lsrs	r1, r1, #31
 80021f8:	4304      	orrs	r4, r0
 80021fa:	00d5      	lsls	r5, r2, #3
 80021fc:	4237      	tst	r7, r6
 80021fe:	d00a      	beq.n	8002216 <__aeabi_d2f+0x32>
 8002200:	4839      	ldr	r0, [pc, #228]	; (80022e8 <__aeabi_d2f+0x104>)
 8002202:	181e      	adds	r6, r3, r0
 8002204:	2efe      	cmp	r6, #254	; 0xfe
 8002206:	dd16      	ble.n	8002236 <__aeabi_d2f+0x52>
 8002208:	20ff      	movs	r0, #255	; 0xff
 800220a:	2400      	movs	r4, #0
 800220c:	05c0      	lsls	r0, r0, #23
 800220e:	4320      	orrs	r0, r4
 8002210:	07c9      	lsls	r1, r1, #31
 8002212:	4308      	orrs	r0, r1
 8002214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <__aeabi_d2f+0x44>
 800221a:	432c      	orrs	r4, r5
 800221c:	d026      	beq.n	800226c <__aeabi_d2f+0x88>
 800221e:	2205      	movs	r2, #5
 8002220:	0192      	lsls	r2, r2, #6
 8002222:	0a54      	lsrs	r4, r2, #9
 8002224:	b2d8      	uxtb	r0, r3
 8002226:	e7f1      	b.n	800220c <__aeabi_d2f+0x28>
 8002228:	4325      	orrs	r5, r4
 800222a:	d0ed      	beq.n	8002208 <__aeabi_d2f+0x24>
 800222c:	2080      	movs	r0, #128	; 0x80
 800222e:	03c0      	lsls	r0, r0, #15
 8002230:	4304      	orrs	r4, r0
 8002232:	20ff      	movs	r0, #255	; 0xff
 8002234:	e7ea      	b.n	800220c <__aeabi_d2f+0x28>
 8002236:	2e00      	cmp	r6, #0
 8002238:	dd1b      	ble.n	8002272 <__aeabi_d2f+0x8e>
 800223a:	0192      	lsls	r2, r2, #6
 800223c:	1e53      	subs	r3, r2, #1
 800223e:	419a      	sbcs	r2, r3
 8002240:	00e4      	lsls	r4, r4, #3
 8002242:	0f6d      	lsrs	r5, r5, #29
 8002244:	4322      	orrs	r2, r4
 8002246:	432a      	orrs	r2, r5
 8002248:	0753      	lsls	r3, r2, #29
 800224a:	d048      	beq.n	80022de <__aeabi_d2f+0xfa>
 800224c:	230f      	movs	r3, #15
 800224e:	4013      	ands	r3, r2
 8002250:	2b04      	cmp	r3, #4
 8002252:	d000      	beq.n	8002256 <__aeabi_d2f+0x72>
 8002254:	3204      	adds	r2, #4
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	04db      	lsls	r3, r3, #19
 800225a:	4013      	ands	r3, r2
 800225c:	d03f      	beq.n	80022de <__aeabi_d2f+0xfa>
 800225e:	1c70      	adds	r0, r6, #1
 8002260:	2efe      	cmp	r6, #254	; 0xfe
 8002262:	d0d1      	beq.n	8002208 <__aeabi_d2f+0x24>
 8002264:	0192      	lsls	r2, r2, #6
 8002266:	0a54      	lsrs	r4, r2, #9
 8002268:	b2c0      	uxtb	r0, r0
 800226a:	e7cf      	b.n	800220c <__aeabi_d2f+0x28>
 800226c:	2000      	movs	r0, #0
 800226e:	2400      	movs	r4, #0
 8002270:	e7cc      	b.n	800220c <__aeabi_d2f+0x28>
 8002272:	0032      	movs	r2, r6
 8002274:	3217      	adds	r2, #23
 8002276:	db22      	blt.n	80022be <__aeabi_d2f+0xda>
 8002278:	2080      	movs	r0, #128	; 0x80
 800227a:	0400      	lsls	r0, r0, #16
 800227c:	4320      	orrs	r0, r4
 800227e:	241e      	movs	r4, #30
 8002280:	1ba4      	subs	r4, r4, r6
 8002282:	2c1f      	cmp	r4, #31
 8002284:	dd1d      	ble.n	80022c2 <__aeabi_d2f+0xde>
 8002286:	2202      	movs	r2, #2
 8002288:	4252      	negs	r2, r2
 800228a:	1b96      	subs	r6, r2, r6
 800228c:	0002      	movs	r2, r0
 800228e:	40f2      	lsrs	r2, r6
 8002290:	0016      	movs	r6, r2
 8002292:	2c20      	cmp	r4, #32
 8002294:	d004      	beq.n	80022a0 <__aeabi_d2f+0xbc>
 8002296:	4a15      	ldr	r2, [pc, #84]	; (80022ec <__aeabi_d2f+0x108>)
 8002298:	4694      	mov	ip, r2
 800229a:	4463      	add	r3, ip
 800229c:	4098      	lsls	r0, r3
 800229e:	4305      	orrs	r5, r0
 80022a0:	002a      	movs	r2, r5
 80022a2:	1e53      	subs	r3, r2, #1
 80022a4:	419a      	sbcs	r2, r3
 80022a6:	4332      	orrs	r2, r6
 80022a8:	2600      	movs	r6, #0
 80022aa:	0753      	lsls	r3, r2, #29
 80022ac:	d1ce      	bne.n	800224c <__aeabi_d2f+0x68>
 80022ae:	2480      	movs	r4, #128	; 0x80
 80022b0:	0013      	movs	r3, r2
 80022b2:	04e4      	lsls	r4, r4, #19
 80022b4:	2001      	movs	r0, #1
 80022b6:	4023      	ands	r3, r4
 80022b8:	4222      	tst	r2, r4
 80022ba:	d1d3      	bne.n	8002264 <__aeabi_d2f+0x80>
 80022bc:	e7b0      	b.n	8002220 <__aeabi_d2f+0x3c>
 80022be:	2300      	movs	r3, #0
 80022c0:	e7ad      	b.n	800221e <__aeabi_d2f+0x3a>
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <__aeabi_d2f+0x10c>)
 80022c4:	4694      	mov	ip, r2
 80022c6:	002a      	movs	r2, r5
 80022c8:	40e2      	lsrs	r2, r4
 80022ca:	0014      	movs	r4, r2
 80022cc:	002a      	movs	r2, r5
 80022ce:	4463      	add	r3, ip
 80022d0:	409a      	lsls	r2, r3
 80022d2:	4098      	lsls	r0, r3
 80022d4:	1e55      	subs	r5, r2, #1
 80022d6:	41aa      	sbcs	r2, r5
 80022d8:	4302      	orrs	r2, r0
 80022da:	4322      	orrs	r2, r4
 80022dc:	e7e4      	b.n	80022a8 <__aeabi_d2f+0xc4>
 80022de:	0033      	movs	r3, r6
 80022e0:	e79e      	b.n	8002220 <__aeabi_d2f+0x3c>
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	fffffc80 	.word	0xfffffc80
 80022ec:	fffffca2 	.word	0xfffffca2
 80022f0:	fffffc82 	.word	0xfffffc82

080022f4 <__clzsi2>:
 80022f4:	211c      	movs	r1, #28
 80022f6:	2301      	movs	r3, #1
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	4298      	cmp	r0, r3
 80022fc:	d301      	bcc.n	8002302 <__clzsi2+0xe>
 80022fe:	0c00      	lsrs	r0, r0, #16
 8002300:	3910      	subs	r1, #16
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	4298      	cmp	r0, r3
 8002306:	d301      	bcc.n	800230c <__clzsi2+0x18>
 8002308:	0a00      	lsrs	r0, r0, #8
 800230a:	3908      	subs	r1, #8
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	4298      	cmp	r0, r3
 8002310:	d301      	bcc.n	8002316 <__clzsi2+0x22>
 8002312:	0900      	lsrs	r0, r0, #4
 8002314:	3904      	subs	r1, #4
 8002316:	a202      	add	r2, pc, #8	; (adr r2, 8002320 <__clzsi2+0x2c>)
 8002318:	5c10      	ldrb	r0, [r2, r0]
 800231a:	1840      	adds	r0, r0, r1
 800231c:	4770      	bx	lr
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	02020304 	.word	0x02020304
 8002324:	01010101 	.word	0x01010101
	...

08002330 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002330:	b5b0      	push	{r4, r5, r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a59      	ldr	r2, [pc, #356]	; (80024a4 <HAL_UART_RxCpltCallback+0x174>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d000      	beq.n	8002344 <HAL_UART_RxCpltCallback+0x14>
 8002342:	e0aa      	b.n	800249a <HAL_UART_RxCpltCallback+0x16a>
		 HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8002344:	4958      	ldr	r1, [pc, #352]	; (80024a8 <HAL_UART_RxCpltCallback+0x178>)
 8002346:	4b59      	ldr	r3, [pc, #356]	; (80024ac <HAL_UART_RxCpltCallback+0x17c>)
 8002348:	2201      	movs	r2, #1
 800234a:	0018      	movs	r0, r3
 800234c:	f002 fc21 	bl	8004b92 <HAL_UART_Receive_IT>
		 if (rx_buf[0] == 'k') {
 8002350:	4b55      	ldr	r3, [pc, #340]	; (80024a8 <HAL_UART_RxCpltCallback+0x178>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b6b      	cmp	r3, #107	; 0x6b
 8002356:	d000      	beq.n	800235a <HAL_UART_RxCpltCallback+0x2a>
 8002358:	e09f      	b.n	800249a <HAL_UART_RxCpltCallback+0x16a>

			 HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcResultsDMA, adcChannelCount);
 800235a:	2310      	movs	r3, #16
 800235c:	001a      	movs	r2, r3
 800235e:	4954      	ldr	r1, [pc, #336]	; (80024b0 <HAL_UART_RxCpltCallback+0x180>)
 8002360:	4b54      	ldr	r3, [pc, #336]	; (80024b4 <HAL_UART_RxCpltCallback+0x184>)
 8002362:	0018      	movs	r0, r3
 8002364:	f000 fe64 	bl	8003030 <HAL_ADC_Start_DMA>

			 uint16_t adc = adcResultsDMA[(gpio_count * 2)];
 8002368:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <HAL_UART_RxCpltCallback+0x188>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0059      	lsls	r1, r3, #1
 800236e:	2026      	movs	r0, #38	; 0x26
 8002370:	183b      	adds	r3, r7, r0
 8002372:	4a4f      	ldr	r2, [pc, #316]	; (80024b0 <HAL_UART_RxCpltCallback+0x180>)
 8002374:	0049      	lsls	r1, r1, #1
 8002376:	5a8a      	ldrh	r2, [r1, r2]
 8002378:	801a      	strh	r2, [r3, #0]
			 uint8_t adcval[2];
			 adcval[0] = ((adc & 0xFF00) >> 8); // BUS_Vmon MSB
 800237a:	0001      	movs	r1, r0
 800237c:	187b      	adds	r3, r7, r1
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	b29b      	uxth	r3, r3
 8002384:	b2da      	uxtb	r2, r3
 8002386:	2018      	movs	r0, #24
 8002388:	183b      	adds	r3, r7, r0
 800238a:	701a      	strb	r2, [r3, #0]
			 adcval[1] = (adc & 0xFF); // BUS_Vmon LSB
 800238c:	187b      	adds	r3, r7, r1
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	183b      	adds	r3, r7, r0
 8002394:	705a      	strb	r2, [r3, #1]
			 float voltage = adc * (3.3/4095);
 8002396:	187b      	adds	r3, r7, r1
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	0018      	movs	r0, r3
 800239c:	f7ff fe84 	bl	80020a8 <__aeabi_i2d>
 80023a0:	4a46      	ldr	r2, [pc, #280]	; (80024bc <HAL_UART_RxCpltCallback+0x18c>)
 80023a2:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_UART_RxCpltCallback+0x190>)
 80023a4:	f7ff f82e 	bl	8001404 <__aeabi_dmul>
 80023a8:	0002      	movs	r2, r0
 80023aa:	000b      	movs	r3, r1
 80023ac:	0010      	movs	r0, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	f7ff ff18 	bl	80021e4 <__aeabi_d2f>
 80023b4:	1c03      	adds	r3, r0, #0
 80023b6:	623b      	str	r3, [r7, #32]
			 char value[10];
			 sprintf(value, "%f", voltage);
 80023b8:	6a38      	ldr	r0, [r7, #32]
 80023ba:	f7ff fecb 	bl	8002154 <__aeabi_f2d>
 80023be:	0002      	movs	r2, r0
 80023c0:	000b      	movs	r3, r1
 80023c2:	4940      	ldr	r1, [pc, #256]	; (80024c4 <HAL_UART_RxCpltCallback+0x194>)
 80023c4:	240c      	movs	r4, #12
 80023c6:	1938      	adds	r0, r7, r4
 80023c8:	f004 fb94 	bl	8006af4 <siprintf>
			 int c = gpio_count;
 80023cc:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <HAL_UART_RxCpltCallback+0x188>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	61fb      	str	r3, [r7, #28]
			 HAL_UART_Transmit(&huart1, "ADC ", 4, 100);
 80023d2:	493d      	ldr	r1, [pc, #244]	; (80024c8 <HAL_UART_RxCpltCallback+0x198>)
 80023d4:	4835      	ldr	r0, [pc, #212]	; (80024ac <HAL_UART_RxCpltCallback+0x17c>)
 80023d6:	2364      	movs	r3, #100	; 0x64
 80023d8:	2204      	movs	r2, #4
 80023da:	f002 fb31 	bl	8004a40 <HAL_UART_Transmit>
			 char count[1];
			 sprintf(count, "%d", gpio_count);
 80023de:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <HAL_UART_RxCpltCallback+0x188>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	493a      	ldr	r1, [pc, #232]	; (80024cc <HAL_UART_RxCpltCallback+0x19c>)
 80023e4:	2508      	movs	r5, #8
 80023e6:	197b      	adds	r3, r7, r5
 80023e8:	0018      	movs	r0, r3
 80023ea:	f004 fb83 	bl	8006af4 <siprintf>
			 HAL_UART_Transmit(&huart1, count, 1, 100);
 80023ee:	1979      	adds	r1, r7, r5
 80023f0:	482e      	ldr	r0, [pc, #184]	; (80024ac <HAL_UART_RxCpltCallback+0x17c>)
 80023f2:	2364      	movs	r3, #100	; 0x64
 80023f4:	2201      	movs	r2, #1
 80023f6:	f002 fb23 	bl	8004a40 <HAL_UART_Transmit>
			 HAL_UART_Transmit(&huart1, ": ", 2, 100);
 80023fa:	4935      	ldr	r1, [pc, #212]	; (80024d0 <HAL_UART_RxCpltCallback+0x1a0>)
 80023fc:	482b      	ldr	r0, [pc, #172]	; (80024ac <HAL_UART_RxCpltCallback+0x17c>)
 80023fe:	2364      	movs	r3, #100	; 0x64
 8002400:	2202      	movs	r2, #2
 8002402:	f002 fb1d 	bl	8004a40 <HAL_UART_Transmit>
			 HAL_UART_Transmit(&huart1, value, 10, 100);
 8002406:	1939      	adds	r1, r7, r4
 8002408:	4828      	ldr	r0, [pc, #160]	; (80024ac <HAL_UART_RxCpltCallback+0x17c>)
 800240a:	2364      	movs	r3, #100	; 0x64
 800240c:	220a      	movs	r2, #10
 800240e:	f002 fb17 	bl	8004a40 <HAL_UART_Transmit>
			 HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8002412:	4930      	ldr	r1, [pc, #192]	; (80024d4 <HAL_UART_RxCpltCallback+0x1a4>)
 8002414:	4825      	ldr	r0, [pc, #148]	; (80024ac <HAL_UART_RxCpltCallback+0x17c>)
 8002416:	2364      	movs	r3, #100	; 0x64
 8002418:	2202      	movs	r2, #2
 800241a:	f002 fb11 	bl	8004a40 <HAL_UART_Transmit>

			 if (HAL_GPIO_ReadPin(gpios[gpio_count].gpio, gpios[gpio_count].pin) == GPIO_PIN_SET){
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <HAL_UART_RxCpltCallback+0x188>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <HAL_UART_RxCpltCallback+0x1a8>)
 8002424:	00d2      	lsls	r2, r2, #3
 8002426:	58d0      	ldr	r0, [r2, r3]
 8002428:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <HAL_UART_RxCpltCallback+0x188>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2a      	ldr	r2, [pc, #168]	; (80024d8 <HAL_UART_RxCpltCallback+0x1a8>)
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	18d3      	adds	r3, r2, r3
 8002432:	3304      	adds	r3, #4
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	0019      	movs	r1, r3
 8002438:	f001 fd0e 	bl	8003e58 <HAL_GPIO_ReadPin>
 800243c:	0003      	movs	r3, r0
 800243e:	2b01      	cmp	r3, #1
 8002440:	d10f      	bne.n	8002462 <HAL_UART_RxCpltCallback+0x132>
				HAL_GPIO_WritePin(gpios[gpio_count].gpio, gpios[gpio_count].pin, GPIO_PIN_RESET);
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_UART_RxCpltCallback+0x188>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_UART_RxCpltCallback+0x1a8>)
 8002448:	00d2      	lsls	r2, r2, #3
 800244a:	58d0      	ldr	r0, [r2, r3]
 800244c:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <HAL_UART_RxCpltCallback+0x188>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <HAL_UART_RxCpltCallback+0x1a8>)
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	18d3      	adds	r3, r2, r3
 8002456:	3304      	adds	r3, #4
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	2200      	movs	r2, #0
 800245c:	0019      	movs	r1, r3
 800245e:	f001 fd18 	bl	8003e92 <HAL_GPIO_WritePin>
			 }

			 gpio_count == 7 ? gpio_count = 0 : gpio_count++;
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <HAL_UART_RxCpltCallback+0x188>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b07      	cmp	r3, #7
 8002468:	d103      	bne.n	8002472 <HAL_UART_RxCpltCallback+0x142>
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <HAL_UART_RxCpltCallback+0x188>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e004      	b.n	800247c <HAL_UART_RxCpltCallback+0x14c>
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_UART_RxCpltCallback+0x188>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <HAL_UART_RxCpltCallback+0x188>)
 800247a:	601a      	str	r2, [r3, #0]

			 HAL_GPIO_TogglePin(gpios[gpio_count].gpio, gpios[gpio_count].pin);
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_UART_RxCpltCallback+0x188>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_UART_RxCpltCallback+0x1a8>)
 8002482:	00d2      	lsls	r2, r2, #3
 8002484:	58d0      	ldr	r0, [r2, r3]
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <HAL_UART_RxCpltCallback+0x188>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a13      	ldr	r2, [pc, #76]	; (80024d8 <HAL_UART_RxCpltCallback+0x1a8>)
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	18d3      	adds	r3, r2, r3
 8002490:	3304      	adds	r3, #4
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	0019      	movs	r1, r3
 8002496:	f001 fd19 	bl	8003ecc <HAL_GPIO_TogglePin>
//			 HAL_UART_Transmit(&huart1, "\x4A" , 1, 100);

		 }

	}
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b00a      	add	sp, #40	; 0x28
 80024a0:	bdb0      	pop	{r4, r5, r7, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	40013800 	.word	0x40013800
 80024a8:	20000304 	.word	0x20000304
 80024ac:	20000280 	.word	0x20000280
 80024b0:	2000036c 	.word	0x2000036c
 80024b4:	200001fc 	.word	0x200001fc
 80024b8:	20000368 	.word	0x20000368
 80024bc:	e734d9b4 	.word	0xe734d9b4
 80024c0:	3f4a680c 	.word	0x3f4a680c
 80024c4:	0800a868 	.word	0x0800a868
 80024c8:	0800a86c 	.word	0x0800a86c
 80024cc:	0800a874 	.word	0x0800a874
 80024d0:	0800a878 	.word	0x0800a878
 80024d4:	0800a87c 	.word	0x0800a87c
 80024d8:	0800a920 	.word	0x0800a920

080024dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024e0:	f000 fc02 	bl	8002ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024e4:	f000 f81c 	bl	8002520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024e8:	f000 f97c 	bl	80027e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80024ec:	f000 f95c 	bl	80027a8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80024f0:	f000 f92a 	bl	8002748 <MX_USART1_UART_Init>
  MX_ADC_Init();
 80024f4:	f000 f872 	bl	80025dc <MX_ADC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80024f8:	4906      	ldr	r1, [pc, #24]	; (8002514 <main+0x38>)
 80024fa:	4b07      	ldr	r3, [pc, #28]	; (8002518 <main+0x3c>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	0018      	movs	r0, r3
 8002500:	f002 fb47 	bl	8004b92 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <main+0x40>)
 8002506:	2180      	movs	r1, #128	; 0x80
 8002508:	2201      	movs	r2, #1
 800250a:	0018      	movs	r0, r3
 800250c:	f001 fcc1 	bl	8003e92 <HAL_GPIO_WritePin>


  while (1)
 8002510:	e7fe      	b.n	8002510 <main+0x34>
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	20000304 	.word	0x20000304
 8002518:	20000280 	.word	0x20000280
 800251c:	48000800 	.word	0x48000800

08002520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b097      	sub	sp, #92	; 0x5c
 8002524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002526:	2428      	movs	r4, #40	; 0x28
 8002528:	193b      	adds	r3, r7, r4
 800252a:	0018      	movs	r0, r3
 800252c:	2330      	movs	r3, #48	; 0x30
 800252e:	001a      	movs	r2, r3
 8002530:	2100      	movs	r1, #0
 8002532:	f003 fc5d 	bl	8005df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002536:	2318      	movs	r3, #24
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	0018      	movs	r0, r3
 800253c:	2310      	movs	r3, #16
 800253e:	001a      	movs	r2, r3
 8002540:	2100      	movs	r1, #0
 8002542:	f003 fc55 	bl	8005df0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	0018      	movs	r0, r3
 800254a:	2314      	movs	r3, #20
 800254c:	001a      	movs	r2, r3
 800254e:	2100      	movs	r1, #0
 8002550:	f003 fc4e 	bl	8005df0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002554:	0021      	movs	r1, r4
 8002556:	187b      	adds	r3, r7, r1
 8002558:	2212      	movs	r2, #18
 800255a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800255c:	187b      	adds	r3, r7, r1
 800255e:	2201      	movs	r2, #1
 8002560:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002562:	187b      	adds	r3, r7, r1
 8002564:	2201      	movs	r2, #1
 8002566:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002568:	187b      	adds	r3, r7, r1
 800256a:	2210      	movs	r2, #16
 800256c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800256e:	187b      	adds	r3, r7, r1
 8002570:	2210      	movs	r2, #16
 8002572:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002574:	187b      	adds	r3, r7, r1
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800257a:	187b      	adds	r3, r7, r1
 800257c:	0018      	movs	r0, r3
 800257e:	f001 fcc1 	bl	8003f04 <HAL_RCC_OscConfig>
 8002582:	1e03      	subs	r3, r0, #0
 8002584:	d001      	beq.n	800258a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002586:	f000 f99f 	bl	80028c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800258a:	2118      	movs	r1, #24
 800258c:	187b      	adds	r3, r7, r1
 800258e:	2207      	movs	r2, #7
 8002590:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002592:	187b      	adds	r3, r7, r1
 8002594:	2200      	movs	r2, #0
 8002596:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002598:	187b      	adds	r3, r7, r1
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800259e:	187b      	adds	r3, r7, r1
 80025a0:	2200      	movs	r2, #0
 80025a2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025a4:	187b      	adds	r3, r7, r1
 80025a6:	2100      	movs	r1, #0
 80025a8:	0018      	movs	r0, r3
 80025aa:	f001 ffc5 	bl	8004538 <HAL_RCC_ClockConfig>
 80025ae:	1e03      	subs	r3, r0, #0
 80025b0:	d001      	beq.n	80025b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80025b2:	f000 f989 	bl	80028c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	2201      	movs	r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	0018      	movs	r0, r3
 80025c6:	f002 f909 	bl	80047dc <HAL_RCCEx_PeriphCLKConfig>
 80025ca:	1e03      	subs	r3, r0, #0
 80025cc:	d001      	beq.n	80025d2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80025ce:	f000 f97b 	bl	80028c8 <Error_Handler>
  }
}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b017      	add	sp, #92	; 0x5c
 80025d8:	bd90      	pop	{r4, r7, pc}
	...

080025dc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025e2:	1d3b      	adds	r3, r7, #4
 80025e4:	0018      	movs	r0, r3
 80025e6:	230c      	movs	r3, #12
 80025e8:	001a      	movs	r2, r3
 80025ea:	2100      	movs	r1, #0
 80025ec:	f003 fc00 	bl	8005df0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80025f0:	4b53      	ldr	r3, [pc, #332]	; (8002740 <MX_ADC_Init+0x164>)
 80025f2:	4a54      	ldr	r2, [pc, #336]	; (8002744 <MX_ADC_Init+0x168>)
 80025f4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80025f6:	4b52      	ldr	r3, [pc, #328]	; (8002740 <MX_ADC_Init+0x164>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80025fc:	4b50      	ldr	r3, [pc, #320]	; (8002740 <MX_ADC_Init+0x164>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002602:	4b4f      	ldr	r3, [pc, #316]	; (8002740 <MX_ADC_Init+0x164>)
 8002604:	2200      	movs	r2, #0
 8002606:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002608:	4b4d      	ldr	r3, [pc, #308]	; (8002740 <MX_ADC_Init+0x164>)
 800260a:	2201      	movs	r2, #1
 800260c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800260e:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <MX_ADC_Init+0x164>)
 8002610:	2204      	movs	r2, #4
 8002612:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002614:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <MX_ADC_Init+0x164>)
 8002616:	2200      	movs	r2, #0
 8002618:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800261a:	4b49      	ldr	r3, [pc, #292]	; (8002740 <MX_ADC_Init+0x164>)
 800261c:	2200      	movs	r2, #0
 800261e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002620:	4b47      	ldr	r3, [pc, #284]	; (8002740 <MX_ADC_Init+0x164>)
 8002622:	2200      	movs	r2, #0
 8002624:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002626:	4b46      	ldr	r3, [pc, #280]	; (8002740 <MX_ADC_Init+0x164>)
 8002628:	2200      	movs	r2, #0
 800262a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800262c:	4b44      	ldr	r3, [pc, #272]	; (8002740 <MX_ADC_Init+0x164>)
 800262e:	22c2      	movs	r2, #194	; 0xc2
 8002630:	32ff      	adds	r2, #255	; 0xff
 8002632:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <MX_ADC_Init+0x164>)
 8002636:	2200      	movs	r2, #0
 8002638:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800263a:	4b41      	ldr	r3, [pc, #260]	; (8002740 <MX_ADC_Init+0x164>)
 800263c:	2224      	movs	r2, #36	; 0x24
 800263e:	2100      	movs	r1, #0
 8002640:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002642:	4b3f      	ldr	r3, [pc, #252]	; (8002740 <MX_ADC_Init+0x164>)
 8002644:	2201      	movs	r2, #1
 8002646:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002648:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <MX_ADC_Init+0x164>)
 800264a:	0018      	movs	r0, r3
 800264c:	f000 fbb0 	bl	8002db0 <HAL_ADC_Init>
 8002650:	1e03      	subs	r3, r0, #0
 8002652:	d001      	beq.n	8002658 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002654:	f000 f938 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	0152      	lsls	r2, r2, #5
 8002664:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	2280      	movs	r2, #128	; 0x80
 800266a:	0552      	lsls	r2, r2, #21
 800266c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800266e:	1d3a      	adds	r2, r7, #4
 8002670:	4b33      	ldr	r3, [pc, #204]	; (8002740 <MX_ADC_Init+0x164>)
 8002672:	0011      	movs	r1, r2
 8002674:	0018      	movs	r0, r3
 8002676:	f000 fd75 	bl	8003164 <HAL_ADC_ConfigChannel>
 800267a:	1e03      	subs	r3, r0, #0
 800267c:	d001      	beq.n	8002682 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800267e:	f000 f923 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002688:	1d3a      	adds	r2, r7, #4
 800268a:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <MX_ADC_Init+0x164>)
 800268c:	0011      	movs	r1, r2
 800268e:	0018      	movs	r0, r3
 8002690:	f000 fd68 	bl	8003164 <HAL_ADC_ConfigChannel>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d001      	beq.n	800269c <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8002698:	f000 f916 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	2202      	movs	r2, #2
 80026a0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80026a2:	1d3a      	adds	r2, r7, #4
 80026a4:	4b26      	ldr	r3, [pc, #152]	; (8002740 <MX_ADC_Init+0x164>)
 80026a6:	0011      	movs	r1, r2
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 fd5b 	bl	8003164 <HAL_ADC_ConfigChannel>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d001      	beq.n	80026b6 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80026b2:	f000 f909 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	2203      	movs	r2, #3
 80026ba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80026bc:	1d3a      	adds	r2, r7, #4
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <MX_ADC_Init+0x164>)
 80026c0:	0011      	movs	r1, r2
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 fd4e 	bl	8003164 <HAL_ADC_ConfigChannel>
 80026c8:	1e03      	subs	r3, r0, #0
 80026ca:	d001      	beq.n	80026d0 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 80026cc:	f000 f8fc 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	2204      	movs	r2, #4
 80026d4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80026d6:	1d3a      	adds	r2, r7, #4
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <MX_ADC_Init+0x164>)
 80026da:	0011      	movs	r1, r2
 80026dc:	0018      	movs	r0, r3
 80026de:	f000 fd41 	bl	8003164 <HAL_ADC_ConfigChannel>
 80026e2:	1e03      	subs	r3, r0, #0
 80026e4:	d001      	beq.n	80026ea <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 80026e6:	f000 f8ef 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2205      	movs	r2, #5
 80026ee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80026f0:	1d3a      	adds	r2, r7, #4
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <MX_ADC_Init+0x164>)
 80026f4:	0011      	movs	r1, r2
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 fd34 	bl	8003164 <HAL_ADC_ConfigChannel>
 80026fc:	1e03      	subs	r3, r0, #0
 80026fe:	d001      	beq.n	8002704 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8002700:	f000 f8e2 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	2206      	movs	r2, #6
 8002708:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800270a:	1d3a      	adds	r2, r7, #4
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <MX_ADC_Init+0x164>)
 800270e:	0011      	movs	r1, r2
 8002710:	0018      	movs	r0, r3
 8002712:	f000 fd27 	bl	8003164 <HAL_ADC_ConfigChannel>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d001      	beq.n	800271e <MX_ADC_Init+0x142>
  {
    Error_Handler();
 800271a:	f000 f8d5 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	2207      	movs	r2, #7
 8002722:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002724:	1d3a      	adds	r2, r7, #4
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <MX_ADC_Init+0x164>)
 8002728:	0011      	movs	r1, r2
 800272a:	0018      	movs	r0, r3
 800272c:	f000 fd1a 	bl	8003164 <HAL_ADC_ConfigChannel>
 8002730:	1e03      	subs	r3, r0, #0
 8002732:	d001      	beq.n	8002738 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8002734:	f000 f8c8 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	b004      	add	sp, #16
 800273e:	bd80      	pop	{r7, pc}
 8002740:	200001fc 	.word	0x200001fc
 8002744:	40012400 	.word	0x40012400

08002748 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <MX_USART1_UART_Init+0x58>)
 800274e:	4a15      	ldr	r2, [pc, #84]	; (80027a4 <MX_USART1_UART_Init+0x5c>)
 8002750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002752:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <MX_USART1_UART_Init+0x58>)
 8002754:	22e1      	movs	r2, #225	; 0xe1
 8002756:	0252      	lsls	r2, r2, #9
 8002758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <MX_USART1_UART_Init+0x58>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <MX_USART1_UART_Init+0x58>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002766:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <MX_USART1_UART_Init+0x58>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <MX_USART1_UART_Init+0x58>)
 800276e:	220c      	movs	r2, #12
 8002770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <MX_USART1_UART_Init+0x58>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <MX_USART1_UART_Init+0x58>)
 800277a:	2200      	movs	r2, #0
 800277c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <MX_USART1_UART_Init+0x58>)
 8002780:	2200      	movs	r2, #0
 8002782:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <MX_USART1_UART_Init+0x58>)
 8002786:	2200      	movs	r2, #0
 8002788:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <MX_USART1_UART_Init+0x58>)
 800278c:	0018      	movs	r0, r3
 800278e:	f002 f903 	bl	8004998 <HAL_UART_Init>
 8002792:	1e03      	subs	r3, r0, #0
 8002794:	d001      	beq.n	800279a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002796:	f000 f897 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000280 	.word	0x20000280
 80027a4:	40013800 	.word	0x40013800

080027a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <MX_DMA_Init+0x38>)
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <MX_DMA_Init+0x38>)
 80027b4:	2101      	movs	r1, #1
 80027b6:	430a      	orrs	r2, r1
 80027b8:	615a      	str	r2, [r3, #20]
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <MX_DMA_Init+0x38>)
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	2201      	movs	r2, #1
 80027c0:	4013      	ands	r3, r2
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2100      	movs	r1, #0
 80027ca:	2009      	movs	r0, #9
 80027cc:	f000 ff8c 	bl	80036e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027d0:	2009      	movs	r0, #9
 80027d2:	f000 ff9e 	bl	8003712 <HAL_NVIC_EnableIRQ>

}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	b002      	add	sp, #8
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	40021000 	.word	0x40021000

080027e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b089      	sub	sp, #36	; 0x24
 80027e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ea:	240c      	movs	r4, #12
 80027ec:	193b      	adds	r3, r7, r4
 80027ee:	0018      	movs	r0, r3
 80027f0:	2314      	movs	r3, #20
 80027f2:	001a      	movs	r2, r3
 80027f4:	2100      	movs	r1, #0
 80027f6:	f003 fafb 	bl	8005df0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fa:	4b30      	ldr	r3, [pc, #192]	; (80028bc <MX_GPIO_Init+0xd8>)
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <MX_GPIO_Init+0xd8>)
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	0309      	lsls	r1, r1, #12
 8002804:	430a      	orrs	r2, r1
 8002806:	615a      	str	r2, [r3, #20]
 8002808:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <MX_GPIO_Init+0xd8>)
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	031b      	lsls	r3, r3, #12
 8002810:	4013      	ands	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002816:	4b29      	ldr	r3, [pc, #164]	; (80028bc <MX_GPIO_Init+0xd8>)
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	4b28      	ldr	r3, [pc, #160]	; (80028bc <MX_GPIO_Init+0xd8>)
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	0289      	lsls	r1, r1, #10
 8002820:	430a      	orrs	r2, r1
 8002822:	615a      	str	r2, [r3, #20]
 8002824:	4b25      	ldr	r3, [pc, #148]	; (80028bc <MX_GPIO_Init+0xd8>)
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	029b      	lsls	r3, r3, #10
 800282c:	4013      	ands	r3, r2
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002832:	4b22      	ldr	r3, [pc, #136]	; (80028bc <MX_GPIO_Init+0xd8>)
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	4b21      	ldr	r3, [pc, #132]	; (80028bc <MX_GPIO_Init+0xd8>)
 8002838:	2180      	movs	r1, #128	; 0x80
 800283a:	03c9      	lsls	r1, r1, #15
 800283c:	430a      	orrs	r2, r1
 800283e:	615a      	str	r2, [r3, #20]
 8002840:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <MX_GPIO_Init+0xd8>)
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	03db      	lsls	r3, r3, #15
 8002848:	4013      	ands	r3, r2
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800284e:	239f      	movs	r3, #159	; 0x9f
 8002850:	019b      	lsls	r3, r3, #6
 8002852:	481b      	ldr	r0, [pc, #108]	; (80028c0 <MX_GPIO_Init+0xdc>)
 8002854:	2200      	movs	r2, #0
 8002856:	0019      	movs	r1, r3
 8002858:	f001 fb1b 	bl	8003e92 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <MX_GPIO_Init+0xe0>)
 800285e:	2200      	movs	r2, #0
 8002860:	21c0      	movs	r1, #192	; 0xc0
 8002862:	0018      	movs	r0, r3
 8002864:	f001 fb15 	bl	8003e92 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002868:	193b      	adds	r3, r7, r4
 800286a:	229f      	movs	r2, #159	; 0x9f
 800286c:	0192      	lsls	r2, r2, #6
 800286e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002870:	193b      	adds	r3, r7, r4
 8002872:	2201      	movs	r2, #1
 8002874:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	193b      	adds	r3, r7, r4
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287c:	193b      	adds	r3, r7, r4
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002882:	193b      	adds	r3, r7, r4
 8002884:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <MX_GPIO_Init+0xdc>)
 8002886:	0019      	movs	r1, r3
 8002888:	0010      	movs	r0, r2
 800288a:	f001 f975 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800288e:	0021      	movs	r1, r4
 8002890:	187b      	adds	r3, r7, r1
 8002892:	22c0      	movs	r2, #192	; 0xc0
 8002894:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002896:	187b      	adds	r3, r7, r1
 8002898:	2201      	movs	r2, #1
 800289a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	187b      	adds	r3, r7, r1
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	187b      	adds	r3, r7, r1
 80028a4:	2200      	movs	r2, #0
 80028a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028a8:	187b      	adds	r3, r7, r1
 80028aa:	4a06      	ldr	r2, [pc, #24]	; (80028c4 <MX_GPIO_Init+0xe0>)
 80028ac:	0019      	movs	r1, r3
 80028ae:	0010      	movs	r0, r2
 80028b0:	f001 f962 	bl	8003b78 <HAL_GPIO_Init>

}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b009      	add	sp, #36	; 0x24
 80028ba:	bd90      	pop	{r4, r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	48000800 	.word	0x48000800
 80028c4:	48001400 	.word	0x48001400

080028c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028cc:	b672      	cpsid	i
}
 80028ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <Error_Handler+0x8>
	...

080028d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028da:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <HAL_MspInit+0x44>)
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <HAL_MspInit+0x44>)
 80028e0:	2101      	movs	r1, #1
 80028e2:	430a      	orrs	r2, r1
 80028e4:	619a      	str	r2, [r3, #24]
 80028e6:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <HAL_MspInit+0x44>)
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2201      	movs	r2, #1
 80028ec:	4013      	ands	r3, r2
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_MspInit+0x44>)
 80028f4:	69da      	ldr	r2, [r3, #28]
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <HAL_MspInit+0x44>)
 80028f8:	2180      	movs	r1, #128	; 0x80
 80028fa:	0549      	lsls	r1, r1, #21
 80028fc:	430a      	orrs	r2, r1
 80028fe:	61da      	str	r2, [r3, #28]
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_MspInit+0x44>)
 8002902:	69da      	ldr	r2, [r3, #28]
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	055b      	lsls	r3, r3, #21
 8002908:	4013      	ands	r3, r2
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	46bd      	mov	sp, r7
 8002912:	b002      	add	sp, #8
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	40021000 	.word	0x40021000

0800291c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b08b      	sub	sp, #44	; 0x2c
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	2414      	movs	r4, #20
 8002926:	193b      	adds	r3, r7, r4
 8002928:	0018      	movs	r0, r3
 800292a:	2314      	movs	r3, #20
 800292c:	001a      	movs	r2, r3
 800292e:	2100      	movs	r1, #0
 8002930:	f003 fa5e 	bl	8005df0 <memset>
  if(hadc->Instance==ADC1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a2d      	ldr	r2, [pc, #180]	; (80029f0 <HAL_ADC_MspInit+0xd4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d153      	bne.n	80029e6 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <HAL_ADC_MspInit+0xd8>)
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	4b2c      	ldr	r3, [pc, #176]	; (80029f4 <HAL_ADC_MspInit+0xd8>)
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	0089      	lsls	r1, r1, #2
 8002948:	430a      	orrs	r2, r1
 800294a:	619a      	str	r2, [r3, #24]
 800294c:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <HAL_ADC_MspInit+0xd8>)
 800294e:	699a      	ldr	r2, [r3, #24]
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <HAL_ADC_MspInit+0xd8>)
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_ADC_MspInit+0xd8>)
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	0289      	lsls	r1, r1, #10
 8002964:	430a      	orrs	r2, r1
 8002966:	615a      	str	r2, [r3, #20]
 8002968:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_ADC_MspInit+0xd8>)
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	029b      	lsls	r3, r3, #10
 8002970:	4013      	ands	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002976:	193b      	adds	r3, r7, r4
 8002978:	22ff      	movs	r2, #255	; 0xff
 800297a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800297c:	193b      	adds	r3, r7, r4
 800297e:	2203      	movs	r2, #3
 8002980:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	193b      	adds	r3, r7, r4
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002988:	193a      	adds	r2, r7, r4
 800298a:	2390      	movs	r3, #144	; 0x90
 800298c:	05db      	lsls	r3, r3, #23
 800298e:	0011      	movs	r1, r2
 8002990:	0018      	movs	r0, r3
 8002992:	f001 f8f1 	bl	8003b78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002996:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <HAL_ADC_MspInit+0xdc>)
 8002998:	4a18      	ldr	r2, [pc, #96]	; (80029fc <HAL_ADC_MspInit+0xe0>)
 800299a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800299c:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <HAL_ADC_MspInit+0xdc>)
 800299e:	2200      	movs	r2, #0
 80029a0:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a2:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <HAL_ADC_MspInit+0xdc>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_ADC_MspInit+0xdc>)
 80029aa:	2280      	movs	r2, #128	; 0x80
 80029ac:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_ADC_MspInit+0xdc>)
 80029b0:	2280      	movs	r2, #128	; 0x80
 80029b2:	0092      	lsls	r2, r2, #2
 80029b4:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <HAL_ADC_MspInit+0xdc>)
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	0112      	lsls	r2, r2, #4
 80029bc:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80029be:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <HAL_ADC_MspInit+0xdc>)
 80029c0:	2220      	movs	r2, #32
 80029c2:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <HAL_ADC_MspInit+0xdc>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_ADC_MspInit+0xdc>)
 80029cc:	0018      	movs	r0, r3
 80029ce:	f000 febd 	bl	800374c <HAL_DMA_Init>
 80029d2:	1e03      	subs	r3, r0, #0
 80029d4:	d001      	beq.n	80029da <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80029d6:	f7ff ff77 	bl	80028c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a06      	ldr	r2, [pc, #24]	; (80029f8 <HAL_ADC_MspInit+0xdc>)
 80029de:	631a      	str	r2, [r3, #48]	; 0x30
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_ADC_MspInit+0xdc>)
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b00b      	add	sp, #44	; 0x2c
 80029ec:	bd90      	pop	{r4, r7, pc}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	40012400 	.word	0x40012400
 80029f4:	40021000 	.word	0x40021000
 80029f8:	2000023c 	.word	0x2000023c
 80029fc:	40020008 	.word	0x40020008

08002a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b08b      	sub	sp, #44	; 0x2c
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	2414      	movs	r4, #20
 8002a0a:	193b      	adds	r3, r7, r4
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	2314      	movs	r3, #20
 8002a10:	001a      	movs	r2, r3
 8002a12:	2100      	movs	r1, #0
 8002a14:	f003 f9ec 	bl	8005df0 <memset>
  if(huart->Instance==USART1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a21      	ldr	r2, [pc, #132]	; (8002aa4 <HAL_UART_MspInit+0xa4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d13b      	bne.n	8002a9a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a22:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <HAL_UART_MspInit+0xa8>)
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_UART_MspInit+0xa8>)
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	01c9      	lsls	r1, r1, #7
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	619a      	str	r2, [r3, #24]
 8002a30:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_UART_MspInit+0xa8>)
 8002a32:	699a      	ldr	r2, [r3, #24]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	01db      	lsls	r3, r3, #7
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <HAL_UART_MspInit+0xa8>)
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_UART_MspInit+0xa8>)
 8002a44:	2180      	movs	r1, #128	; 0x80
 8002a46:	0289      	lsls	r1, r1, #10
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	615a      	str	r2, [r3, #20]
 8002a4c:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <HAL_UART_MspInit+0xa8>)
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	029b      	lsls	r3, r3, #10
 8002a54:	4013      	ands	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a5a:	193b      	adds	r3, r7, r4
 8002a5c:	22c0      	movs	r2, #192	; 0xc0
 8002a5e:	00d2      	lsls	r2, r2, #3
 8002a60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a62:	0021      	movs	r1, r4
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2202      	movs	r2, #2
 8002a68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	2203      	movs	r2, #3
 8002a74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002a76:	187b      	adds	r3, r7, r1
 8002a78:	2201      	movs	r2, #1
 8002a7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7c:	187a      	adds	r2, r7, r1
 8002a7e:	2390      	movs	r3, #144	; 0x90
 8002a80:	05db      	lsls	r3, r3, #23
 8002a82:	0011      	movs	r1, r2
 8002a84:	0018      	movs	r0, r3
 8002a86:	f001 f877 	bl	8003b78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	201b      	movs	r0, #27
 8002a90:	f000 fe2a 	bl	80036e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a94:	201b      	movs	r0, #27
 8002a96:	f000 fe3c 	bl	8003712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	b00b      	add	sp, #44	; 0x2c
 8002aa0:	bd90      	pop	{r4, r7, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	40013800 	.word	0x40013800
 8002aa8:	40021000 	.word	0x40021000

08002aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <NMI_Handler+0x4>

08002ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab6:	e7fe      	b.n	8002ab6 <HardFault_Handler+0x4>

08002ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad0:	f000 f952 	bl	8002d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002ae0:	4b03      	ldr	r3, [pc, #12]	; (8002af0 <DMA1_Channel1_IRQHandler+0x14>)
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 ff5d 	bl	80039a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ae8:	46c0      	nop			; (mov r8, r8)
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	2000023c 	.word	0x2000023c

08002af4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <USART1_IRQHandler+0x14>)
 8002afa:	0018      	movs	r0, r3
 8002afc:	f002 f8aa 	bl	8004c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	20000280 	.word	0x20000280

08002b0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
	return 1;
 8002b10:	2301      	movs	r3, #1
}
 8002b12:	0018      	movs	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <_kill>:

int _kill(int pid, int sig)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b22:	f003 f93b 	bl	8005d9c <__errno>
 8002b26:	0003      	movs	r3, r0
 8002b28:	2216      	movs	r2, #22
 8002b2a:	601a      	str	r2, [r3, #0]
	return -1;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	425b      	negs	r3, r3
}
 8002b30:	0018      	movs	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b002      	add	sp, #8
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <_exit>:

void _exit (int status)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b40:	2301      	movs	r3, #1
 8002b42:	425a      	negs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	0011      	movs	r1, r2
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f7ff ffe5 	bl	8002b18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b4e:	e7fe      	b.n	8002b4e <_exit+0x16>

08002b50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	e00a      	b.n	8002b78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b62:	e000      	b.n	8002b66 <_read+0x16>
 8002b64:	bf00      	nop
 8002b66:	0001      	movs	r1, r0
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	60ba      	str	r2, [r7, #8]
 8002b6e:	b2ca      	uxtb	r2, r1
 8002b70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3301      	adds	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	dbf0      	blt.n	8002b62 <_read+0x12>
	}

return len;
 8002b80:	687b      	ldr	r3, [r7, #4]
}
 8002b82:	0018      	movs	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b006      	add	sp, #24
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b086      	sub	sp, #24
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	e009      	b.n	8002bb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	60ba      	str	r2, [r7, #8]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	e000      	b.n	8002baa <_write+0x20>
 8002ba8:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	3301      	adds	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	dbf1      	blt.n	8002b9c <_write+0x12>
	}
	return len;
 8002bb8:	687b      	ldr	r3, [r7, #4]
}
 8002bba:	0018      	movs	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b006      	add	sp, #24
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <_close>:

int _close(int file)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
	return -1;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	425b      	negs	r3, r3
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b002      	add	sp, #8
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2280      	movs	r2, #128	; 0x80
 8002be4:	0192      	lsls	r2, r2, #6
 8002be6:	605a      	str	r2, [r3, #4]
	return 0;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b002      	add	sp, #8
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <_isatty>:

int _isatty(int file)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
	return 1;
 8002bfa:	2301      	movs	r3, #1
}
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b002      	add	sp, #8
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
	return 0;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b004      	add	sp, #16
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <_sbrk+0x5c>)
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <_sbrk+0x60>)
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c30:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <_sbrk+0x64>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <_sbrk+0x64>)
 8002c3a:	4a12      	ldr	r2, [pc, #72]	; (8002c84 <_sbrk+0x68>)
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <_sbrk+0x64>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	18d3      	adds	r3, r2, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d207      	bcs.n	8002c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c4c:	f003 f8a6 	bl	8005d9c <__errno>
 8002c50:	0003      	movs	r3, r0
 8002c52:	220c      	movs	r2, #12
 8002c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c56:	2301      	movs	r3, #1
 8002c58:	425b      	negs	r3, r3
 8002c5a:	e009      	b.n	8002c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <_sbrk+0x64>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <_sbrk+0x64>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	18d2      	adds	r2, r2, r3
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <_sbrk+0x64>)
 8002c6c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b006      	add	sp, #24
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20002000 	.word	0x20002000
 8002c7c:	00000400 	.word	0x00000400
 8002c80:	2000038c 	.word	0x2000038c
 8002c84:	200003a8 	.word	0x200003a8

08002c88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002c8c:	46c0      	nop			; (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c94:	480d      	ldr	r0, [pc, #52]	; (8002ccc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c96:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c98:	480d      	ldr	r0, [pc, #52]	; (8002cd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c9a:	490e      	ldr	r1, [pc, #56]	; (8002cd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c9c:	4a0e      	ldr	r2, [pc, #56]	; (8002cd8 <LoopForever+0xe>)
  movs r3, #0
 8002c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ca0:	e002      	b.n	8002ca8 <LoopCopyDataInit>

08002ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ca6:	3304      	adds	r3, #4

08002ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cac:	d3f9      	bcc.n	8002ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cae:	4a0b      	ldr	r2, [pc, #44]	; (8002cdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cb0:	4c0b      	ldr	r4, [pc, #44]	; (8002ce0 <LoopForever+0x16>)
  movs r3, #0
 8002cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb4:	e001      	b.n	8002cba <LoopFillZerobss>

08002cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cb8:	3204      	adds	r2, #4

08002cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cbc:	d3fb      	bcc.n	8002cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002cbe:	f7ff ffe3 	bl	8002c88 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002cc2:	f003 f871 	bl	8005da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cc6:	f7ff fc09 	bl	80024dc <main>

08002cca <LoopForever>:

LoopForever:
    b LoopForever
 8002cca:	e7fe      	b.n	8002cca <LoopForever>
  ldr   r0, =_estack
 8002ccc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002cd8:	0800ae24 	.word	0x0800ae24
  ldr r2, =_sbss
 8002cdc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002ce0:	200003a4 	.word	0x200003a4

08002ce4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ce4:	e7fe      	b.n	8002ce4 <ADC1_COMP_IRQHandler>
	...

08002ce8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cec:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <HAL_Init+0x24>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_Init+0x24>)
 8002cf2:	2110      	movs	r1, #16
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002cf8:	2003      	movs	r0, #3
 8002cfa:	f000 f809 	bl	8002d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cfe:	f7ff fde9 	bl	80028d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	0018      	movs	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	40022000 	.word	0x40022000

08002d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d18:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <HAL_InitTick+0x5c>)
 8002d1a:	681c      	ldr	r4, [r3, #0]
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <HAL_InitTick+0x60>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	0019      	movs	r1, r3
 8002d22:	23fa      	movs	r3, #250	; 0xfa
 8002d24:	0098      	lsls	r0, r3, #2
 8002d26:	f7fd fa0b 	bl	8000140 <__udivsi3>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	0020      	movs	r0, r4
 8002d30:	f7fd fa06 	bl	8000140 <__udivsi3>
 8002d34:	0003      	movs	r3, r0
 8002d36:	0018      	movs	r0, r3
 8002d38:	f000 fcfb 	bl	8003732 <HAL_SYSTICK_Config>
 8002d3c:	1e03      	subs	r3, r0, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e00f      	b.n	8002d64 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d80b      	bhi.n	8002d62 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	425b      	negs	r3, r3
 8002d50:	2200      	movs	r2, #0
 8002d52:	0018      	movs	r0, r3
 8002d54:	f000 fcc8 	bl	80036e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_InitTick+0x64>)
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e000      	b.n	8002d64 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
}
 8002d64:	0018      	movs	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b003      	add	sp, #12
 8002d6a:	bd90      	pop	{r4, r7, pc}
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	20000008 	.word	0x20000008
 8002d74:	20000004 	.word	0x20000004

08002d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_IncTick+0x1c>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	001a      	movs	r2, r3
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_IncTick+0x20>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	18d2      	adds	r2, r2, r3
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_IncTick+0x20>)
 8002d8a:	601a      	str	r2, [r3, #0]
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	20000008 	.word	0x20000008
 8002d98:	20000390 	.word	0x20000390

08002d9c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002da0:	4b02      	ldr	r3, [pc, #8]	; (8002dac <HAL_GetTick+0x10>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	20000390 	.word	0x20000390

08002db0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db8:	230f      	movs	r3, #15
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e125      	b.n	800301a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2234      	movs	r2, #52	; 0x34
 8002de0:	2100      	movs	r1, #0
 8002de2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	0018      	movs	r0, r3
 8002de8:	f7ff fd98 	bl	800291c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df0:	2210      	movs	r2, #16
 8002df2:	4013      	ands	r3, r2
 8002df4:	d000      	beq.n	8002df8 <HAL_ADC_Init+0x48>
 8002df6:	e103      	b.n	8003000 <HAL_ADC_Init+0x250>
 8002df8:	230f      	movs	r3, #15
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d000      	beq.n	8002e04 <HAL_ADC_Init+0x54>
 8002e02:	e0fd      	b.n	8003000 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002e0e:	d000      	beq.n	8002e12 <HAL_ADC_Init+0x62>
 8002e10:	e0f6      	b.n	8003000 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	4a83      	ldr	r2, [pc, #524]	; (8003024 <HAL_ADC_Init+0x274>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2203      	movs	r2, #3
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d112      	bne.n	8002e56 <HAL_ADC_Init+0xa6>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2201      	movs	r2, #1
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d009      	beq.n	8002e52 <HAL_ADC_Init+0xa2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	401a      	ands	r2, r3
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d101      	bne.n	8002e56 <HAL_ADC_Init+0xa6>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_ADC_Init+0xa8>
 8002e56:	2300      	movs	r3, #0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d116      	bne.n	8002e8a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	2218      	movs	r2, #24
 8002e64:	4393      	bics	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	0899      	lsrs	r1, r3, #2
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4964      	ldr	r1, [pc, #400]	; (8003028 <HAL_ADC_Init+0x278>)
 8002e96:	400a      	ands	r2, r1
 8002e98:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	7e1b      	ldrb	r3, [r3, #24]
 8002e9e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	7e5b      	ldrb	r3, [r3, #25]
 8002ea4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ea6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7e9b      	ldrb	r3, [r3, #26]
 8002eac:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002eae:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d002      	beq.n	8002ebe <HAL_ADC_Init+0x10e>
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	015b      	lsls	r3, r3, #5
 8002ebc:	e000      	b.n	8002ec0 <HAL_ADC_Init+0x110>
 8002ebe:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ec0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002ec6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADC_Init+0x124>
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	e000      	b.n	8002ed6 <HAL_ADC_Init+0x126>
 8002ed4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002ed6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2124      	movs	r1, #36	; 0x24
 8002edc:	5c5b      	ldrb	r3, [r3, r1]
 8002ede:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002ee0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	7edb      	ldrb	r3, [r3, #27]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d115      	bne.n	8002f1c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	7e9b      	ldrb	r3, [r3, #26]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d105      	bne.n	8002f04 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2280      	movs	r2, #128	; 0x80
 8002efc:	0252      	lsls	r2, r2, #9
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	e00b      	b.n	8002f1c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	2220      	movs	r2, #32
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f14:	2201      	movs	r2, #1
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69da      	ldr	r2, [r3, #28]
 8002f20:	23c2      	movs	r3, #194	; 0xc2
 8002f22:	33ff      	adds	r3, #255	; 0xff
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d007      	beq.n	8002f38 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002f30:	4313      	orrs	r3, r2
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68d9      	ldr	r1, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	055b      	lsls	r3, r3, #21
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d01b      	beq.n	8002f8c <HAL_ADC_Init+0x1dc>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d017      	beq.n	8002f8c <HAL_ADC_Init+0x1dc>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d013      	beq.n	8002f8c <HAL_ADC_Init+0x1dc>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d00f      	beq.n	8002f8c <HAL_ADC_Init+0x1dc>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d00b      	beq.n	8002f8c <HAL_ADC_Init+0x1dc>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	2b05      	cmp	r3, #5
 8002f7a:	d007      	beq.n	8002f8c <HAL_ADC_Init+0x1dc>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	2b06      	cmp	r3, #6
 8002f82:	d003      	beq.n	8002f8c <HAL_ADC_Init+0x1dc>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	2b07      	cmp	r3, #7
 8002f8a:	d112      	bne.n	8002fb2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2107      	movs	r1, #7
 8002f98:	438a      	bics	r2, r1
 8002f9a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6959      	ldr	r1, [r3, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	2207      	movs	r2, #7
 8002fa8:	401a      	ands	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4a1c      	ldr	r2, [pc, #112]	; (800302c <HAL_ADC_Init+0x27c>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d10b      	bne.n	8002fda <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	2203      	movs	r2, #3
 8002fce:	4393      	bics	r3, r2
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002fd8:	e01c      	b.n	8003014 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	2212      	movs	r2, #18
 8002fe0:	4393      	bics	r3, r2
 8002fe2:	2210      	movs	r2, #16
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fee:	2201      	movs	r2, #1
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002ff6:	230f      	movs	r3, #15
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ffe:	e009      	b.n	8003014 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	2210      	movs	r2, #16
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800300c:	230f      	movs	r3, #15
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	2201      	movs	r2, #1
 8003012:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003014:	230f      	movs	r3, #15
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	781b      	ldrb	r3, [r3, #0]
}
 800301a:	0018      	movs	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	b004      	add	sp, #16
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	fffffefd 	.word	0xfffffefd
 8003028:	fffe0219 	.word	0xfffe0219
 800302c:	833fffe7 	.word	0x833fffe7

08003030 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800303c:	2317      	movs	r3, #23
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2204      	movs	r2, #4
 800304c:	4013      	ands	r3, r2
 800304e:	d15e      	bne.n	800310e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2234      	movs	r2, #52	; 0x34
 8003054:	5c9b      	ldrb	r3, [r3, r2]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_ADC_Start_DMA+0x2e>
 800305a:	2302      	movs	r3, #2
 800305c:	e05e      	b.n	800311c <HAL_ADC_Start_DMA+0xec>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2234      	movs	r2, #52	; 0x34
 8003062:	2101      	movs	r1, #1
 8003064:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	7e5b      	ldrb	r3, [r3, #25]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d007      	beq.n	800307e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800306e:	2317      	movs	r3, #23
 8003070:	18fc      	adds	r4, r7, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	0018      	movs	r0, r3
 8003076:	f000 f983 	bl	8003380 <ADC_Enable>
 800307a:	0003      	movs	r3, r0
 800307c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800307e:	2317      	movs	r3, #23
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d146      	bne.n	8003116 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	4a25      	ldr	r2, [pc, #148]	; (8003124 <HAL_ADC_Start_DMA+0xf4>)
 800308e:	4013      	ands	r3, r2
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	0052      	lsls	r2, r2, #1
 8003094:	431a      	orrs	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2234      	movs	r2, #52	; 0x34
 80030a4:	2100      	movs	r1, #0
 80030a6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	4a1e      	ldr	r2, [pc, #120]	; (8003128 <HAL_ADC_Start_DMA+0xf8>)
 80030ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	4a1d      	ldr	r2, [pc, #116]	; (800312c <HAL_ADC_Start_DMA+0xfc>)
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	4a1c      	ldr	r2, [pc, #112]	; (8003130 <HAL_ADC_Start_DMA+0x100>)
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	221c      	movs	r2, #28
 80030c6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2110      	movs	r1, #16
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2101      	movs	r1, #1
 80030e4:	430a      	orrs	r2, r1
 80030e6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3340      	adds	r3, #64	; 0x40
 80030f2:	0019      	movs	r1, r3
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f000 fb70 	bl	80037dc <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2104      	movs	r1, #4
 8003108:	430a      	orrs	r2, r1
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	e003      	b.n	8003116 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800310e:	2317      	movs	r3, #23
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	2202      	movs	r2, #2
 8003114:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003116:	2317      	movs	r3, #23
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	781b      	ldrb	r3, [r3, #0]
}
 800311c:	0018      	movs	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	b007      	add	sp, #28
 8003122:	bd90      	pop	{r4, r7, pc}
 8003124:	fffff0fe 	.word	0xfffff0fe
 8003128:	08003489 	.word	0x08003489
 800312c:	0800353d 	.word	0x0800353d
 8003130:	0800355b 	.word	0x0800355b

08003134 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b002      	add	sp, #8
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800314c:	46c0      	nop			; (mov r8, r8)
 800314e:	46bd      	mov	sp, r7
 8003150:	b002      	add	sp, #8
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800315c:	46c0      	nop			; (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	b002      	add	sp, #8
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800316e:	230f      	movs	r3, #15
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	055b      	lsls	r3, r3, #21
 8003182:	429a      	cmp	r2, r3
 8003184:	d011      	beq.n	80031aa <HAL_ADC_ConfigChannel+0x46>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	2b01      	cmp	r3, #1
 800318c:	d00d      	beq.n	80031aa <HAL_ADC_ConfigChannel+0x46>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	2b02      	cmp	r3, #2
 8003194:	d009      	beq.n	80031aa <HAL_ADC_ConfigChannel+0x46>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	2b03      	cmp	r3, #3
 800319c:	d005      	beq.n	80031aa <HAL_ADC_ConfigChannel+0x46>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d001      	beq.n	80031aa <HAL_ADC_ConfigChannel+0x46>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2234      	movs	r2, #52	; 0x34
 80031ae:	5c9b      	ldrb	r3, [r3, r2]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x54>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e0d0      	b.n	800335a <HAL_ADC_ConfigChannel+0x1f6>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2234      	movs	r2, #52	; 0x34
 80031bc:	2101      	movs	r1, #1
 80031be:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2204      	movs	r2, #4
 80031c8:	4013      	ands	r3, r2
 80031ca:	d000      	beq.n	80031ce <HAL_ADC_ConfigChannel+0x6a>
 80031cc:	e0b4      	b.n	8003338 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4a64      	ldr	r2, [pc, #400]	; (8003364 <HAL_ADC_ConfigChannel+0x200>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d100      	bne.n	80031da <HAL_ADC_ConfigChannel+0x76>
 80031d8:	e082      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2201      	movs	r2, #1
 80031e6:	409a      	lsls	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f4:	2380      	movs	r3, #128	; 0x80
 80031f6:	055b      	lsls	r3, r3, #21
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d037      	beq.n	800326c <HAL_ADC_ConfigChannel+0x108>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	2b01      	cmp	r3, #1
 8003202:	d033      	beq.n	800326c <HAL_ADC_ConfigChannel+0x108>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	2b02      	cmp	r3, #2
 800320a:	d02f      	beq.n	800326c <HAL_ADC_ConfigChannel+0x108>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	2b03      	cmp	r3, #3
 8003212:	d02b      	beq.n	800326c <HAL_ADC_ConfigChannel+0x108>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	2b04      	cmp	r3, #4
 800321a:	d027      	beq.n	800326c <HAL_ADC_ConfigChannel+0x108>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	2b05      	cmp	r3, #5
 8003222:	d023      	beq.n	800326c <HAL_ADC_ConfigChannel+0x108>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	2b06      	cmp	r3, #6
 800322a:	d01f      	beq.n	800326c <HAL_ADC_ConfigChannel+0x108>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	2b07      	cmp	r3, #7
 8003232:	d01b      	beq.n	800326c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2107      	movs	r1, #7
 8003240:	400b      	ands	r3, r1
 8003242:	429a      	cmp	r2, r3
 8003244:	d012      	beq.n	800326c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2107      	movs	r1, #7
 8003252:	438a      	bics	r2, r1
 8003254:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6959      	ldr	r1, [r3, #20]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2207      	movs	r2, #7
 8003262:	401a      	ands	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b10      	cmp	r3, #16
 8003272:	d007      	beq.n	8003284 <HAL_ADC_ConfigChannel+0x120>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b11      	cmp	r3, #17
 800327a:	d003      	beq.n	8003284 <HAL_ADC_ConfigChannel+0x120>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b12      	cmp	r3, #18
 8003282:	d163      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003284:	4b38      	ldr	r3, [pc, #224]	; (8003368 <HAL_ADC_ConfigChannel+0x204>)
 8003286:	6819      	ldr	r1, [r3, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b10      	cmp	r3, #16
 800328e:	d009      	beq.n	80032a4 <HAL_ADC_ConfigChannel+0x140>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b11      	cmp	r3, #17
 8003296:	d102      	bne.n	800329e <HAL_ADC_ConfigChannel+0x13a>
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	03db      	lsls	r3, r3, #15
 800329c:	e004      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x144>
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	045b      	lsls	r3, r3, #17
 80032a2:	e001      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x144>
 80032a4:	2380      	movs	r3, #128	; 0x80
 80032a6:	041b      	lsls	r3, r3, #16
 80032a8:	4a2f      	ldr	r2, [pc, #188]	; (8003368 <HAL_ADC_ConfigChannel+0x204>)
 80032aa:	430b      	orrs	r3, r1
 80032ac:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	d14a      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032b6:	4b2d      	ldr	r3, [pc, #180]	; (800336c <HAL_ADC_ConfigChannel+0x208>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	492d      	ldr	r1, [pc, #180]	; (8003370 <HAL_ADC_ConfigChannel+0x20c>)
 80032bc:	0018      	movs	r0, r3
 80032be:	f7fc ff3f 	bl	8000140 <__udivsi3>
 80032c2:	0003      	movs	r3, r0
 80032c4:	001a      	movs	r2, r3
 80032c6:	0013      	movs	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	189b      	adds	r3, r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032d0:	e002      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f9      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x16e>
 80032de:	e035      	b.n	800334c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2101      	movs	r1, #1
 80032ec:	4099      	lsls	r1, r3
 80032ee:	000b      	movs	r3, r1
 80032f0:	43d9      	mvns	r1, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	400a      	ands	r2, r1
 80032f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b10      	cmp	r3, #16
 8003300:	d007      	beq.n	8003312 <HAL_ADC_ConfigChannel+0x1ae>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b11      	cmp	r3, #17
 8003308:	d003      	beq.n	8003312 <HAL_ADC_ConfigChannel+0x1ae>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b12      	cmp	r3, #18
 8003310:	d11c      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <HAL_ADC_ConfigChannel+0x204>)
 8003314:	6819      	ldr	r1, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b10      	cmp	r3, #16
 800331c:	d007      	beq.n	800332e <HAL_ADC_ConfigChannel+0x1ca>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b11      	cmp	r3, #17
 8003324:	d101      	bne.n	800332a <HAL_ADC_ConfigChannel+0x1c6>
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_ADC_ConfigChannel+0x210>)
 8003328:	e002      	b.n	8003330 <HAL_ADC_ConfigChannel+0x1cc>
 800332a:	4b13      	ldr	r3, [pc, #76]	; (8003378 <HAL_ADC_ConfigChannel+0x214>)
 800332c:	e000      	b.n	8003330 <HAL_ADC_ConfigChannel+0x1cc>
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <HAL_ADC_ConfigChannel+0x218>)
 8003330:	4a0d      	ldr	r2, [pc, #52]	; (8003368 <HAL_ADC_ConfigChannel+0x204>)
 8003332:	400b      	ands	r3, r1
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e009      	b.n	800334c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	2220      	movs	r2, #32
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003344:	230f      	movs	r3, #15
 8003346:	18fb      	adds	r3, r7, r3
 8003348:	2201      	movs	r2, #1
 800334a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2234      	movs	r2, #52	; 0x34
 8003350:	2100      	movs	r1, #0
 8003352:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003354:	230f      	movs	r3, #15
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	781b      	ldrb	r3, [r3, #0]
}
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b004      	add	sp, #16
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	00001001 	.word	0x00001001
 8003368:	40012708 	.word	0x40012708
 800336c:	20000000 	.word	0x20000000
 8003370:	000f4240 	.word	0x000f4240
 8003374:	ffbfffff 	.word	0xffbfffff
 8003378:	feffffff 	.word	0xfeffffff
 800337c:	ff7fffff 	.word	0xff7fffff

08003380 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2203      	movs	r2, #3
 8003398:	4013      	ands	r3, r2
 800339a:	2b01      	cmp	r3, #1
 800339c:	d112      	bne.n	80033c4 <ADC_Enable+0x44>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2201      	movs	r2, #1
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d009      	beq.n	80033c0 <ADC_Enable+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	2380      	movs	r3, #128	; 0x80
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	401a      	ands	r2, r3
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	429a      	cmp	r2, r3
 80033be:	d101      	bne.n	80033c4 <ADC_Enable+0x44>
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <ADC_Enable+0x46>
 80033c4:	2300      	movs	r3, #0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d152      	bne.n	8003470 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a2a      	ldr	r2, [pc, #168]	; (800347c <ADC_Enable+0xfc>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	d00d      	beq.n	80033f2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	2210      	movs	r2, #16
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	2201      	movs	r2, #1
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e03f      	b.n	8003472 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2101      	movs	r1, #1
 80033fe:	430a      	orrs	r2, r1
 8003400:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003402:	4b1f      	ldr	r3, [pc, #124]	; (8003480 <ADC_Enable+0x100>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	491f      	ldr	r1, [pc, #124]	; (8003484 <ADC_Enable+0x104>)
 8003408:	0018      	movs	r0, r3
 800340a:	f7fc fe99 	bl	8000140 <__udivsi3>
 800340e:	0003      	movs	r3, r0
 8003410:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003412:	e002      	b.n	800341a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	3b01      	subs	r3, #1
 8003418:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f9      	bne.n	8003414 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003420:	f7ff fcbc 	bl	8002d9c <HAL_GetTick>
 8003424:	0003      	movs	r3, r0
 8003426:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003428:	e01b      	b.n	8003462 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800342a:	f7ff fcb7 	bl	8002d9c <HAL_GetTick>
 800342e:	0002      	movs	r2, r0
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d914      	bls.n	8003462 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2201      	movs	r2, #1
 8003440:	4013      	ands	r3, r2
 8003442:	2b01      	cmp	r3, #1
 8003444:	d00d      	beq.n	8003462 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	2210      	movs	r2, #16
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003456:	2201      	movs	r2, #1
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e007      	b.n	8003472 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2201      	movs	r2, #1
 800346a:	4013      	ands	r3, r2
 800346c:	2b01      	cmp	r3, #1
 800346e:	d1dc      	bne.n	800342a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	80000017 	.word	0x80000017
 8003480:	20000000 	.word	0x20000000
 8003484:	000f4240 	.word	0x000f4240

08003488 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349a:	2250      	movs	r2, #80	; 0x50
 800349c:	4013      	ands	r3, r2
 800349e:	d140      	bne.n	8003522 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	2280      	movs	r2, #128	; 0x80
 80034a6:	0092      	lsls	r2, r2, #2
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	23c0      	movs	r3, #192	; 0xc0
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	4013      	ands	r3, r2
 80034ba:	d12d      	bne.n	8003518 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d129      	bne.n	8003518 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2208      	movs	r2, #8
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d122      	bne.n	8003518 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2204      	movs	r2, #4
 80034da:	4013      	ands	r3, r2
 80034dc:	d110      	bne.n	8003500 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	210c      	movs	r1, #12
 80034ea:	438a      	bics	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	4a11      	ldr	r2, [pc, #68]	; (8003538 <ADC_DMAConvCplt+0xb0>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	2201      	movs	r2, #1
 80034f8:	431a      	orrs	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38
 80034fe:	e00b      	b.n	8003518 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	2220      	movs	r2, #32
 8003506:	431a      	orrs	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003510:	2201      	movs	r2, #1
 8003512:	431a      	orrs	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	0018      	movs	r0, r3
 800351c:	f7ff fe0a 	bl	8003134 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003520:	e005      	b.n	800352e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	0010      	movs	r0, r2
 800352c:	4798      	blx	r3
}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	46bd      	mov	sp, r7
 8003532:	b004      	add	sp, #16
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	fffffefe 	.word	0xfffffefe

0800353c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	0018      	movs	r0, r3
 800354e:	f7ff fdf9 	bl	8003144 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b004      	add	sp, #16
 8003558:	bd80      	pop	{r7, pc}

0800355a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	2240      	movs	r2, #64	; 0x40
 800356e:	431a      	orrs	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	2204      	movs	r2, #4
 800357a:	431a      	orrs	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	0018      	movs	r0, r3
 8003584:	f7ff fde6 	bl	8003154 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003588:	46c0      	nop			; (mov r8, r8)
 800358a:	46bd      	mov	sp, r7
 800358c:	b004      	add	sp, #16
 800358e:	bd80      	pop	{r7, pc}

08003590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	0002      	movs	r2, r0
 8003598:	1dfb      	adds	r3, r7, #7
 800359a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800359c:	1dfb      	adds	r3, r7, #7
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b7f      	cmp	r3, #127	; 0x7f
 80035a2:	d809      	bhi.n	80035b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035a4:	1dfb      	adds	r3, r7, #7
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	001a      	movs	r2, r3
 80035aa:	231f      	movs	r3, #31
 80035ac:	401a      	ands	r2, r3
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <__NVIC_EnableIRQ+0x30>)
 80035b0:	2101      	movs	r1, #1
 80035b2:	4091      	lsls	r1, r2
 80035b4:	000a      	movs	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]
  }
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b002      	add	sp, #8
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	e000e100 	.word	0xe000e100

080035c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c4:	b590      	push	{r4, r7, lr}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	0002      	movs	r2, r0
 80035cc:	6039      	str	r1, [r7, #0]
 80035ce:	1dfb      	adds	r3, r7, #7
 80035d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035d2:	1dfb      	adds	r3, r7, #7
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b7f      	cmp	r3, #127	; 0x7f
 80035d8:	d828      	bhi.n	800362c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035da:	4a2f      	ldr	r2, [pc, #188]	; (8003698 <__NVIC_SetPriority+0xd4>)
 80035dc:	1dfb      	adds	r3, r7, #7
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	b25b      	sxtb	r3, r3
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	33c0      	adds	r3, #192	; 0xc0
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	589b      	ldr	r3, [r3, r2]
 80035ea:	1dfa      	adds	r2, r7, #7
 80035ec:	7812      	ldrb	r2, [r2, #0]
 80035ee:	0011      	movs	r1, r2
 80035f0:	2203      	movs	r2, #3
 80035f2:	400a      	ands	r2, r1
 80035f4:	00d2      	lsls	r2, r2, #3
 80035f6:	21ff      	movs	r1, #255	; 0xff
 80035f8:	4091      	lsls	r1, r2
 80035fa:	000a      	movs	r2, r1
 80035fc:	43d2      	mvns	r2, r2
 80035fe:	401a      	ands	r2, r3
 8003600:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	019b      	lsls	r3, r3, #6
 8003606:	22ff      	movs	r2, #255	; 0xff
 8003608:	401a      	ands	r2, r3
 800360a:	1dfb      	adds	r3, r7, #7
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	0018      	movs	r0, r3
 8003610:	2303      	movs	r3, #3
 8003612:	4003      	ands	r3, r0
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003618:	481f      	ldr	r0, [pc, #124]	; (8003698 <__NVIC_SetPriority+0xd4>)
 800361a:	1dfb      	adds	r3, r7, #7
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	b25b      	sxtb	r3, r3
 8003620:	089b      	lsrs	r3, r3, #2
 8003622:	430a      	orrs	r2, r1
 8003624:	33c0      	adds	r3, #192	; 0xc0
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800362a:	e031      	b.n	8003690 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800362c:	4a1b      	ldr	r2, [pc, #108]	; (800369c <__NVIC_SetPriority+0xd8>)
 800362e:	1dfb      	adds	r3, r7, #7
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	0019      	movs	r1, r3
 8003634:	230f      	movs	r3, #15
 8003636:	400b      	ands	r3, r1
 8003638:	3b08      	subs	r3, #8
 800363a:	089b      	lsrs	r3, r3, #2
 800363c:	3306      	adds	r3, #6
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	18d3      	adds	r3, r2, r3
 8003642:	3304      	adds	r3, #4
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	1dfa      	adds	r2, r7, #7
 8003648:	7812      	ldrb	r2, [r2, #0]
 800364a:	0011      	movs	r1, r2
 800364c:	2203      	movs	r2, #3
 800364e:	400a      	ands	r2, r1
 8003650:	00d2      	lsls	r2, r2, #3
 8003652:	21ff      	movs	r1, #255	; 0xff
 8003654:	4091      	lsls	r1, r2
 8003656:	000a      	movs	r2, r1
 8003658:	43d2      	mvns	r2, r2
 800365a:	401a      	ands	r2, r3
 800365c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	019b      	lsls	r3, r3, #6
 8003662:	22ff      	movs	r2, #255	; 0xff
 8003664:	401a      	ands	r2, r3
 8003666:	1dfb      	adds	r3, r7, #7
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	0018      	movs	r0, r3
 800366c:	2303      	movs	r3, #3
 800366e:	4003      	ands	r3, r0
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003674:	4809      	ldr	r0, [pc, #36]	; (800369c <__NVIC_SetPriority+0xd8>)
 8003676:	1dfb      	adds	r3, r7, #7
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	001c      	movs	r4, r3
 800367c:	230f      	movs	r3, #15
 800367e:	4023      	ands	r3, r4
 8003680:	3b08      	subs	r3, #8
 8003682:	089b      	lsrs	r3, r3, #2
 8003684:	430a      	orrs	r2, r1
 8003686:	3306      	adds	r3, #6
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	18c3      	adds	r3, r0, r3
 800368c:	3304      	adds	r3, #4
 800368e:	601a      	str	r2, [r3, #0]
}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b003      	add	sp, #12
 8003696:	bd90      	pop	{r4, r7, pc}
 8003698:	e000e100 	.word	0xe000e100
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	1e5a      	subs	r2, r3, #1
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	045b      	lsls	r3, r3, #17
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d301      	bcc.n	80036b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036b4:	2301      	movs	r3, #1
 80036b6:	e010      	b.n	80036da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <SysTick_Config+0x44>)
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	3a01      	subs	r2, #1
 80036be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036c0:	2301      	movs	r3, #1
 80036c2:	425b      	negs	r3, r3
 80036c4:	2103      	movs	r1, #3
 80036c6:	0018      	movs	r0, r3
 80036c8:	f7ff ff7c 	bl	80035c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <SysTick_Config+0x44>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036d2:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <SysTick_Config+0x44>)
 80036d4:	2207      	movs	r2, #7
 80036d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036d8:	2300      	movs	r3, #0
}
 80036da:	0018      	movs	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	b002      	add	sp, #8
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	e000e010 	.word	0xe000e010

080036e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	210f      	movs	r1, #15
 80036f4:	187b      	adds	r3, r7, r1
 80036f6:	1c02      	adds	r2, r0, #0
 80036f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	b25b      	sxtb	r3, r3
 8003702:	0011      	movs	r1, r2
 8003704:	0018      	movs	r0, r3
 8003706:	f7ff ff5d 	bl	80035c4 <__NVIC_SetPriority>
}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b004      	add	sp, #16
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	0002      	movs	r2, r0
 800371a:	1dfb      	adds	r3, r7, #7
 800371c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800371e:	1dfb      	adds	r3, r7, #7
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	b25b      	sxtb	r3, r3
 8003724:	0018      	movs	r0, r3
 8003726:	f7ff ff33 	bl	8003590 <__NVIC_EnableIRQ>
}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	b002      	add	sp, #8
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	0018      	movs	r0, r3
 800373e:	f7ff ffaf 	bl	80036a0 <SysTick_Config>
 8003742:	0003      	movs	r3, r0
}
 8003744:	0018      	movs	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	b002      	add	sp, #8
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e036      	b.n	80037d0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2221      	movs	r2, #33	; 0x21
 8003766:	2102      	movs	r1, #2
 8003768:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <HAL_DMA_Init+0x8c>)
 8003776:	4013      	ands	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003782:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800378e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800379a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	0018      	movs	r0, r3
 80037b4:	f000 f9c4 	bl	8003b40 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2221      	movs	r2, #33	; 0x21
 80037c2:	2101      	movs	r1, #1
 80037c4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2220      	movs	r2, #32
 80037ca:	2100      	movs	r1, #0
 80037cc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}  
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b004      	add	sp, #16
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	ffffc00f 	.word	0xffffc00f

080037dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80037ea:	2317      	movs	r3, #23
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	5c9b      	ldrb	r3, [r3, r2]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_DMA_Start_IT+0x24>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e04f      	b.n	80038a0 <HAL_DMA_Start_IT+0xc4>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	2101      	movs	r1, #1
 8003806:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2221      	movs	r2, #33	; 0x21
 800380c:	5c9b      	ldrb	r3, [r3, r2]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d13a      	bne.n	800388a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2221      	movs	r2, #33	; 0x21
 8003818:	2102      	movs	r1, #2
 800381a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2101      	movs	r1, #1
 800382e:	438a      	bics	r2, r1
 8003830:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f954 	bl	8003ae6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	210e      	movs	r1, #14
 8003852:	430a      	orrs	r2, r1
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e00f      	b.n	8003878 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	210a      	movs	r1, #10
 8003864:	430a      	orrs	r2, r1
 8003866:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2104      	movs	r1, #4
 8003874:	438a      	bics	r2, r1
 8003876:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2101      	movs	r1, #1
 8003884:	430a      	orrs	r2, r1
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e007      	b.n	800389a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	2100      	movs	r1, #0
 8003890:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003892:	2317      	movs	r3, #23
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	2202      	movs	r2, #2
 8003898:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800389a:	2317      	movs	r3, #23
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	781b      	ldrb	r3, [r3, #0]
} 
 80038a0:	0018      	movs	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b006      	add	sp, #24
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2221      	movs	r2, #33	; 0x21
 80038b4:	5c9b      	ldrb	r3, [r3, r2]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d008      	beq.n	80038ce <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2204      	movs	r2, #4
 80038c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	2100      	movs	r1, #0
 80038c8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e020      	b.n	8003910 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	210e      	movs	r1, #14
 80038da:	438a      	bics	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2101      	movs	r1, #1
 80038ea:	438a      	bics	r2, r1
 80038ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f6:	2101      	movs	r1, #1
 80038f8:	4091      	lsls	r1, r2
 80038fa:	000a      	movs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2221      	movs	r2, #33	; 0x21
 8003902:	2101      	movs	r1, #1
 8003904:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	2100      	movs	r1, #0
 800390c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	0018      	movs	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	b002      	add	sp, #8
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003920:	210f      	movs	r1, #15
 8003922:	187b      	adds	r3, r7, r1
 8003924:	2200      	movs	r2, #0
 8003926:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2221      	movs	r2, #33	; 0x21
 800392c:	5c9b      	ldrb	r3, [r3, r2]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d006      	beq.n	8003942 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2204      	movs	r2, #4
 8003938:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800393a:	187b      	adds	r3, r7, r1
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
 8003940:	e028      	b.n	8003994 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	210e      	movs	r1, #14
 800394e:	438a      	bics	r2, r1
 8003950:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2101      	movs	r1, #1
 800395e:	438a      	bics	r2, r1
 8003960:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396a:	2101      	movs	r1, #1
 800396c:	4091      	lsls	r1, r2
 800396e:	000a      	movs	r2, r1
 8003970:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2221      	movs	r2, #33	; 0x21
 8003976:	2101      	movs	r1, #1
 8003978:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	2100      	movs	r1, #0
 8003980:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003986:	2b00      	cmp	r3, #0
 8003988:	d004      	beq.n	8003994 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	0010      	movs	r0, r2
 8003992:	4798      	blx	r3
    } 
  }
  return status;
 8003994:	230f      	movs	r3, #15
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	781b      	ldrb	r3, [r3, #0]
}
 800399a:	0018      	movs	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	b004      	add	sp, #16
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b084      	sub	sp, #16
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2204      	movs	r2, #4
 80039c0:	409a      	lsls	r2, r3
 80039c2:	0013      	movs	r3, r2
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4013      	ands	r3, r2
 80039c8:	d024      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x72>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2204      	movs	r2, #4
 80039ce:	4013      	ands	r3, r2
 80039d0:	d020      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2220      	movs	r2, #32
 80039da:	4013      	ands	r3, r2
 80039dc:	d107      	bne.n	80039ee <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2104      	movs	r1, #4
 80039ea:	438a      	bics	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	2104      	movs	r1, #4
 80039f8:	4091      	lsls	r1, r2
 80039fa:	000a      	movs	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d100      	bne.n	8003a08 <HAL_DMA_IRQHandler+0x66>
 8003a06:	e06a      	b.n	8003ade <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	0010      	movs	r0, r2
 8003a10:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003a12:	e064      	b.n	8003ade <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	2202      	movs	r2, #2
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	0013      	movs	r3, r2
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4013      	ands	r3, r2
 8003a22:	d02b      	beq.n	8003a7c <HAL_DMA_IRQHandler+0xda>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2202      	movs	r2, #2
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d027      	beq.n	8003a7c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2220      	movs	r2, #32
 8003a34:	4013      	ands	r3, r2
 8003a36:	d10b      	bne.n	8003a50 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	210a      	movs	r1, #10
 8003a44:	438a      	bics	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2221      	movs	r2, #33	; 0x21
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a58:	2102      	movs	r1, #2
 8003a5a:	4091      	lsls	r1, r2
 8003a5c:	000a      	movs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	2100      	movs	r1, #0
 8003a66:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d036      	beq.n	8003ade <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	0010      	movs	r0, r2
 8003a78:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003a7a:	e030      	b.n	8003ade <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	2208      	movs	r2, #8
 8003a82:	409a      	lsls	r2, r3
 8003a84:	0013      	movs	r3, r2
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d028      	beq.n	8003ade <HAL_DMA_IRQHandler+0x13c>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2208      	movs	r2, #8
 8003a90:	4013      	ands	r3, r2
 8003a92:	d024      	beq.n	8003ade <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	210e      	movs	r1, #14
 8003aa0:	438a      	bics	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aac:	2101      	movs	r1, #1
 8003aae:	4091      	lsls	r1, r2
 8003ab0:	000a      	movs	r2, r1
 8003ab2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2221      	movs	r2, #33	; 0x21
 8003abe:	2101      	movs	r1, #1
 8003ac0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	0010      	movs	r0, r2
 8003ada:	4798      	blx	r3
    }
   }
}  
 8003adc:	e7ff      	b.n	8003ade <HAL_DMA_IRQHandler+0x13c>
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	b004      	add	sp, #16
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	2101      	movs	r1, #1
 8003afe:	4091      	lsls	r1, r2
 8003b00:	000a      	movs	r2, r1
 8003b02:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d108      	bne.n	8003b26 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b24:	e007      	b.n	8003b36 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	60da      	str	r2, [r3, #12]
}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b004      	add	sp, #16
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <DMA_CalcBaseAndBitshift+0x30>)
 8003b4e:	4694      	mov	ip, r2
 8003b50:	4463      	add	r3, ip
 8003b52:	2114      	movs	r1, #20
 8003b54:	0018      	movs	r0, r3
 8003b56:	f7fc faf3 	bl	8000140 <__udivsi3>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	009a      	lsls	r2, r3, #2
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a03      	ldr	r2, [pc, #12]	; (8003b74 <DMA_CalcBaseAndBitshift+0x34>)
 8003b66:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b002      	add	sp, #8
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	bffdfff8 	.word	0xbffdfff8
 8003b74:	40020000 	.word	0x40020000

08003b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b86:	e14f      	b.n	8003e28 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4091      	lsls	r1, r2
 8003b92:	000a      	movs	r2, r1
 8003b94:	4013      	ands	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d100      	bne.n	8003ba0 <HAL_GPIO_Init+0x28>
 8003b9e:	e140      	b.n	8003e22 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d005      	beq.n	8003bb8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d130      	bne.n	8003c1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	409a      	lsls	r2, r3
 8003bc6:	0013      	movs	r3, r2
 8003bc8:	43da      	mvns	r2, r3
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	0013      	movs	r3, r2
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bee:	2201      	movs	r2, #1
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	0013      	movs	r3, r2
 8003bf6:	43da      	mvns	r2, r3
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	2201      	movs	r2, #1
 8003c06:	401a      	ands	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	0013      	movs	r3, r2
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2203      	movs	r2, #3
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d017      	beq.n	8003c56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	2203      	movs	r2, #3
 8003c32:	409a      	lsls	r2, r3
 8003c34:	0013      	movs	r3, r2
 8003c36:	43da      	mvns	r2, r3
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	409a      	lsls	r2, r3
 8003c48:	0013      	movs	r3, r2
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d123      	bne.n	8003caa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	08da      	lsrs	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3208      	adds	r2, #8
 8003c6a:	0092      	lsls	r2, r2, #2
 8003c6c:	58d3      	ldr	r3, [r2, r3]
 8003c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2207      	movs	r2, #7
 8003c74:	4013      	ands	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	220f      	movs	r2, #15
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	0013      	movs	r3, r2
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2107      	movs	r1, #7
 8003c8e:	400b      	ands	r3, r1
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	409a      	lsls	r2, r3
 8003c94:	0013      	movs	r3, r2
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	08da      	lsrs	r2, r3, #3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3208      	adds	r2, #8
 8003ca4:	0092      	lsls	r2, r2, #2
 8003ca6:	6939      	ldr	r1, [r7, #16]
 8003ca8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	0013      	movs	r3, r2
 8003cba:	43da      	mvns	r2, r3
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	401a      	ands	r2, r3
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	0013      	movs	r3, r2
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	23c0      	movs	r3, #192	; 0xc0
 8003ce4:	029b      	lsls	r3, r3, #10
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d100      	bne.n	8003cec <HAL_GPIO_Init+0x174>
 8003cea:	e09a      	b.n	8003e22 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cec:	4b54      	ldr	r3, [pc, #336]	; (8003e40 <HAL_GPIO_Init+0x2c8>)
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	4b53      	ldr	r3, [pc, #332]	; (8003e40 <HAL_GPIO_Init+0x2c8>)
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	619a      	str	r2, [r3, #24]
 8003cf8:	4b51      	ldr	r3, [pc, #324]	; (8003e40 <HAL_GPIO_Init+0x2c8>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	4013      	ands	r3, r2
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d04:	4a4f      	ldr	r2, [pc, #316]	; (8003e44 <HAL_GPIO_Init+0x2cc>)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	089b      	lsrs	r3, r3, #2
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	589b      	ldr	r3, [r3, r2]
 8003d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2203      	movs	r2, #3
 8003d16:	4013      	ands	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	220f      	movs	r2, #15
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	0013      	movs	r3, r2
 8003d20:	43da      	mvns	r2, r3
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4013      	ands	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	2390      	movs	r3, #144	; 0x90
 8003d2c:	05db      	lsls	r3, r3, #23
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d013      	beq.n	8003d5a <HAL_GPIO_Init+0x1e2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a44      	ldr	r2, [pc, #272]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00d      	beq.n	8003d56 <HAL_GPIO_Init+0x1de>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a43      	ldr	r2, [pc, #268]	; (8003e4c <HAL_GPIO_Init+0x2d4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <HAL_GPIO_Init+0x1da>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a42      	ldr	r2, [pc, #264]	; (8003e50 <HAL_GPIO_Init+0x2d8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <HAL_GPIO_Init+0x1d6>
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e006      	b.n	8003d5c <HAL_GPIO_Init+0x1e4>
 8003d4e:	2305      	movs	r3, #5
 8003d50:	e004      	b.n	8003d5c <HAL_GPIO_Init+0x1e4>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e002      	b.n	8003d5c <HAL_GPIO_Init+0x1e4>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <HAL_GPIO_Init+0x1e4>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	2103      	movs	r1, #3
 8003d60:	400a      	ands	r2, r1
 8003d62:	0092      	lsls	r2, r2, #2
 8003d64:	4093      	lsls	r3, r2
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d6c:	4935      	ldr	r1, [pc, #212]	; (8003e44 <HAL_GPIO_Init+0x2cc>)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	089b      	lsrs	r3, r3, #2
 8003d72:	3302      	adds	r3, #2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d7a:	4b36      	ldr	r3, [pc, #216]	; (8003e54 <HAL_GPIO_Init+0x2dc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	43da      	mvns	r2, r3
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	025b      	lsls	r3, r3, #9
 8003d92:	4013      	ands	r3, r2
 8003d94:	d003      	beq.n	8003d9e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d9e:	4b2d      	ldr	r3, [pc, #180]	; (8003e54 <HAL_GPIO_Init+0x2dc>)
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003da4:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_GPIO_Init+0x2dc>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	43da      	mvns	r2, r3
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4013      	ands	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	029b      	lsls	r3, r3, #10
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003dc8:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <HAL_GPIO_Init+0x2dc>)
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dce:	4b21      	ldr	r3, [pc, #132]	; (8003e54 <HAL_GPIO_Init+0x2dc>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	2380      	movs	r3, #128	; 0x80
 8003de4:	035b      	lsls	r3, r3, #13
 8003de6:	4013      	ands	r3, r2
 8003de8:	d003      	beq.n	8003df2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003df2:	4b18      	ldr	r3, [pc, #96]	; (8003e54 <HAL_GPIO_Init+0x2dc>)
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003df8:	4b16      	ldr	r3, [pc, #88]	; (8003e54 <HAL_GPIO_Init+0x2dc>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	43da      	mvns	r2, r3
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4013      	ands	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	039b      	lsls	r3, r3, #14
 8003e10:	4013      	ands	r3, r2
 8003e12:	d003      	beq.n	8003e1c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e1c:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <HAL_GPIO_Init+0x2dc>)
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	3301      	adds	r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	40da      	lsrs	r2, r3
 8003e30:	1e13      	subs	r3, r2, #0
 8003e32:	d000      	beq.n	8003e36 <HAL_GPIO_Init+0x2be>
 8003e34:	e6a8      	b.n	8003b88 <HAL_GPIO_Init+0x10>
  } 
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b006      	add	sp, #24
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40010000 	.word	0x40010000
 8003e48:	48000400 	.word	0x48000400
 8003e4c:	48000800 	.word	0x48000800
 8003e50:	48000c00 	.word	0x48000c00
 8003e54:	40010400 	.word	0x40010400

08003e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	000a      	movs	r2, r1
 8003e62:	1cbb      	adds	r3, r7, #2
 8003e64:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	1cba      	adds	r2, r7, #2
 8003e6c:	8812      	ldrh	r2, [r2, #0]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d004      	beq.n	8003e7c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003e72:	230f      	movs	r3, #15
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	2201      	movs	r2, #1
 8003e78:	701a      	strb	r2, [r3, #0]
 8003e7a:	e003      	b.n	8003e84 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e7c:	230f      	movs	r3, #15
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003e84:	230f      	movs	r3, #15
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	781b      	ldrb	r3, [r3, #0]
  }
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b004      	add	sp, #16
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	0008      	movs	r0, r1
 8003e9c:	0011      	movs	r1, r2
 8003e9e:	1cbb      	adds	r3, r7, #2
 8003ea0:	1c02      	adds	r2, r0, #0
 8003ea2:	801a      	strh	r2, [r3, #0]
 8003ea4:	1c7b      	adds	r3, r7, #1
 8003ea6:	1c0a      	adds	r2, r1, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eaa:	1c7b      	adds	r3, r7, #1
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d004      	beq.n	8003ebc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eb2:	1cbb      	adds	r3, r7, #2
 8003eb4:	881a      	ldrh	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003eba:	e003      	b.n	8003ec4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ebc:	1cbb      	adds	r3, r7, #2
 8003ebe:	881a      	ldrh	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ec4:	46c0      	nop			; (mov r8, r8)
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b002      	add	sp, #8
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	000a      	movs	r2, r1
 8003ed6:	1cbb      	adds	r3, r7, #2
 8003ed8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ee0:	1cbb      	adds	r3, r7, #2
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	041a      	lsls	r2, r3, #16
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	1cb9      	adds	r1, r7, #2
 8003ef0:	8809      	ldrh	r1, [r1, #0]
 8003ef2:	400b      	ands	r3, r1
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	619a      	str	r2, [r3, #24]
}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	46bd      	mov	sp, r7
 8003efe:	b004      	add	sp, #16
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e301      	b.n	800451a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d100      	bne.n	8003f22 <HAL_RCC_OscConfig+0x1e>
 8003f20:	e08d      	b.n	800403e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f22:	4bc3      	ldr	r3, [pc, #780]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	220c      	movs	r2, #12
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d00e      	beq.n	8003f4c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f2e:	4bc0      	ldr	r3, [pc, #768]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	220c      	movs	r2, #12
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d116      	bne.n	8003f68 <HAL_RCC_OscConfig+0x64>
 8003f3a:	4bbd      	ldr	r3, [pc, #756]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	025b      	lsls	r3, r3, #9
 8003f42:	401a      	ands	r2, r3
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	025b      	lsls	r3, r3, #9
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d10d      	bne.n	8003f68 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	4bb8      	ldr	r3, [pc, #736]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	2380      	movs	r3, #128	; 0x80
 8003f52:	029b      	lsls	r3, r3, #10
 8003f54:	4013      	ands	r3, r2
 8003f56:	d100      	bne.n	8003f5a <HAL_RCC_OscConfig+0x56>
 8003f58:	e070      	b.n	800403c <HAL_RCC_OscConfig+0x138>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d000      	beq.n	8003f64 <HAL_RCC_OscConfig+0x60>
 8003f62:	e06b      	b.n	800403c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e2d8      	b.n	800451a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d107      	bne.n	8003f80 <HAL_RCC_OscConfig+0x7c>
 8003f70:	4baf      	ldr	r3, [pc, #700]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4bae      	ldr	r3, [pc, #696]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003f76:	2180      	movs	r1, #128	; 0x80
 8003f78:	0249      	lsls	r1, r1, #9
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	e02f      	b.n	8003fe0 <HAL_RCC_OscConfig+0xdc>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10c      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x9e>
 8003f88:	4ba9      	ldr	r3, [pc, #676]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	4ba8      	ldr	r3, [pc, #672]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003f8e:	49a9      	ldr	r1, [pc, #676]	; (8004234 <HAL_RCC_OscConfig+0x330>)
 8003f90:	400a      	ands	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	4ba6      	ldr	r3, [pc, #664]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4ba5      	ldr	r3, [pc, #660]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003f9a:	49a7      	ldr	r1, [pc, #668]	; (8004238 <HAL_RCC_OscConfig+0x334>)
 8003f9c:	400a      	ands	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	e01e      	b.n	8003fe0 <HAL_RCC_OscConfig+0xdc>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b05      	cmp	r3, #5
 8003fa8:	d10e      	bne.n	8003fc8 <HAL_RCC_OscConfig+0xc4>
 8003faa:	4ba1      	ldr	r3, [pc, #644]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4ba0      	ldr	r3, [pc, #640]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003fb0:	2180      	movs	r1, #128	; 0x80
 8003fb2:	02c9      	lsls	r1, r1, #11
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	4b9d      	ldr	r3, [pc, #628]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4b9c      	ldr	r3, [pc, #624]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003fbe:	2180      	movs	r1, #128	; 0x80
 8003fc0:	0249      	lsls	r1, r1, #9
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e00b      	b.n	8003fe0 <HAL_RCC_OscConfig+0xdc>
 8003fc8:	4b99      	ldr	r3, [pc, #612]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b98      	ldr	r3, [pc, #608]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003fce:	4999      	ldr	r1, [pc, #612]	; (8004234 <HAL_RCC_OscConfig+0x330>)
 8003fd0:	400a      	ands	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	4b96      	ldr	r3, [pc, #600]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4b95      	ldr	r3, [pc, #596]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8003fda:	4997      	ldr	r1, [pc, #604]	; (8004238 <HAL_RCC_OscConfig+0x334>)
 8003fdc:	400a      	ands	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d014      	beq.n	8004012 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fed8 	bl	8002d9c <HAL_GetTick>
 8003fec:	0003      	movs	r3, r0
 8003fee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff2:	f7fe fed3 	bl	8002d9c <HAL_GetTick>
 8003ff6:	0002      	movs	r2, r0
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b64      	cmp	r3, #100	; 0x64
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e28a      	b.n	800451a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004004:	4b8a      	ldr	r3, [pc, #552]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	029b      	lsls	r3, r3, #10
 800400c:	4013      	ands	r3, r2
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0xee>
 8004010:	e015      	b.n	800403e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004012:	f7fe fec3 	bl	8002d9c <HAL_GetTick>
 8004016:	0003      	movs	r3, r0
 8004018:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800401c:	f7fe febe 	bl	8002d9c <HAL_GetTick>
 8004020:	0002      	movs	r2, r0
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	; 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e275      	b.n	800451a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402e:	4b80      	ldr	r3, [pc, #512]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	029b      	lsls	r3, r3, #10
 8004036:	4013      	ands	r3, r2
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x118>
 800403a:	e000      	b.n	800403e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2202      	movs	r2, #2
 8004044:	4013      	ands	r3, r2
 8004046:	d100      	bne.n	800404a <HAL_RCC_OscConfig+0x146>
 8004048:	e069      	b.n	800411e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800404a:	4b79      	ldr	r3, [pc, #484]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	220c      	movs	r2, #12
 8004050:	4013      	ands	r3, r2
 8004052:	d00b      	beq.n	800406c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004054:	4b76      	ldr	r3, [pc, #472]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	220c      	movs	r2, #12
 800405a:	4013      	ands	r3, r2
 800405c:	2b08      	cmp	r3, #8
 800405e:	d11c      	bne.n	800409a <HAL_RCC_OscConfig+0x196>
 8004060:	4b73      	ldr	r3, [pc, #460]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	025b      	lsls	r3, r3, #9
 8004068:	4013      	ands	r3, r2
 800406a:	d116      	bne.n	800409a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406c:	4b70      	ldr	r3, [pc, #448]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2202      	movs	r2, #2
 8004072:	4013      	ands	r3, r2
 8004074:	d005      	beq.n	8004082 <HAL_RCC_OscConfig+0x17e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d001      	beq.n	8004082 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e24b      	b.n	800451a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004082:	4b6b      	ldr	r3, [pc, #428]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	22f8      	movs	r2, #248	; 0xf8
 8004088:	4393      	bics	r3, r2
 800408a:	0019      	movs	r1, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	00da      	lsls	r2, r3, #3
 8004092:	4b67      	ldr	r3, [pc, #412]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8004094:	430a      	orrs	r2, r1
 8004096:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004098:	e041      	b.n	800411e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d024      	beq.n	80040ec <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a2:	4b63      	ldr	r3, [pc, #396]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4b62      	ldr	r3, [pc, #392]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 80040a8:	2101      	movs	r1, #1
 80040aa:	430a      	orrs	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ae:	f7fe fe75 	bl	8002d9c <HAL_GetTick>
 80040b2:	0003      	movs	r3, r0
 80040b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b8:	f7fe fe70 	bl	8002d9c <HAL_GetTick>
 80040bc:	0002      	movs	r2, r0
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e227      	b.n	800451a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ca:	4b59      	ldr	r3, [pc, #356]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2202      	movs	r2, #2
 80040d0:	4013      	ands	r3, r2
 80040d2:	d0f1      	beq.n	80040b8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d4:	4b56      	ldr	r3, [pc, #344]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	22f8      	movs	r2, #248	; 0xf8
 80040da:	4393      	bics	r3, r2
 80040dc:	0019      	movs	r1, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	00da      	lsls	r2, r3, #3
 80040e4:	4b52      	ldr	r3, [pc, #328]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 80040e6:	430a      	orrs	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	e018      	b.n	800411e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ec:	4b50      	ldr	r3, [pc, #320]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	4b4f      	ldr	r3, [pc, #316]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 80040f2:	2101      	movs	r1, #1
 80040f4:	438a      	bics	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f8:	f7fe fe50 	bl	8002d9c <HAL_GetTick>
 80040fc:	0003      	movs	r3, r0
 80040fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004102:	f7fe fe4b 	bl	8002d9c <HAL_GetTick>
 8004106:	0002      	movs	r2, r0
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e202      	b.n	800451a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004114:	4b46      	ldr	r3, [pc, #280]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2202      	movs	r2, #2
 800411a:	4013      	ands	r3, r2
 800411c:	d1f1      	bne.n	8004102 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2208      	movs	r2, #8
 8004124:	4013      	ands	r3, r2
 8004126:	d036      	beq.n	8004196 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d019      	beq.n	8004164 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004130:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8004132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004134:	4b3e      	ldr	r3, [pc, #248]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8004136:	2101      	movs	r1, #1
 8004138:	430a      	orrs	r2, r1
 800413a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413c:	f7fe fe2e 	bl	8002d9c <HAL_GetTick>
 8004140:	0003      	movs	r3, r0
 8004142:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004146:	f7fe fe29 	bl	8002d9c <HAL_GetTick>
 800414a:	0002      	movs	r2, r0
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e1e0      	b.n	800451a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004158:	4b35      	ldr	r3, [pc, #212]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2202      	movs	r2, #2
 800415e:	4013      	ands	r3, r2
 8004160:	d0f1      	beq.n	8004146 <HAL_RCC_OscConfig+0x242>
 8004162:	e018      	b.n	8004196 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004164:	4b32      	ldr	r3, [pc, #200]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8004166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004168:	4b31      	ldr	r3, [pc, #196]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 800416a:	2101      	movs	r1, #1
 800416c:	438a      	bics	r2, r1
 800416e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004170:	f7fe fe14 	bl	8002d9c <HAL_GetTick>
 8004174:	0003      	movs	r3, r0
 8004176:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417a:	f7fe fe0f 	bl	8002d9c <HAL_GetTick>
 800417e:	0002      	movs	r2, r0
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e1c6      	b.n	800451a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800418c:	4b28      	ldr	r3, [pc, #160]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	2202      	movs	r2, #2
 8004192:	4013      	ands	r3, r2
 8004194:	d1f1      	bne.n	800417a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2204      	movs	r2, #4
 800419c:	4013      	ands	r3, r2
 800419e:	d100      	bne.n	80041a2 <HAL_RCC_OscConfig+0x29e>
 80041a0:	e0b4      	b.n	800430c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a2:	201f      	movs	r0, #31
 80041a4:	183b      	adds	r3, r7, r0
 80041a6:	2200      	movs	r2, #0
 80041a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041aa:	4b21      	ldr	r3, [pc, #132]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 80041ac:	69da      	ldr	r2, [r3, #28]
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	055b      	lsls	r3, r3, #21
 80041b2:	4013      	ands	r3, r2
 80041b4:	d110      	bne.n	80041d8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b6:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 80041bc:	2180      	movs	r1, #128	; 0x80
 80041be:	0549      	lsls	r1, r1, #21
 80041c0:	430a      	orrs	r2, r1
 80041c2:	61da      	str	r2, [r3, #28]
 80041c4:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	055b      	lsls	r3, r3, #21
 80041cc:	4013      	ands	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041d2:	183b      	adds	r3, r7, r0
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d8:	4b18      	ldr	r3, [pc, #96]	; (800423c <HAL_RCC_OscConfig+0x338>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4013      	ands	r3, r2
 80041e2:	d11a      	bne.n	800421a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041e4:	4b15      	ldr	r3, [pc, #84]	; (800423c <HAL_RCC_OscConfig+0x338>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	4b14      	ldr	r3, [pc, #80]	; (800423c <HAL_RCC_OscConfig+0x338>)
 80041ea:	2180      	movs	r1, #128	; 0x80
 80041ec:	0049      	lsls	r1, r1, #1
 80041ee:	430a      	orrs	r2, r1
 80041f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f2:	f7fe fdd3 	bl	8002d9c <HAL_GetTick>
 80041f6:	0003      	movs	r3, r0
 80041f8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fc:	f7fe fdce 	bl	8002d9c <HAL_GetTick>
 8004200:	0002      	movs	r2, r0
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	; 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e185      	b.n	800451a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420e:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	4013      	ands	r3, r2
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d10e      	bne.n	8004240 <HAL_RCC_OscConfig+0x33c>
 8004222:	4b03      	ldr	r3, [pc, #12]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8004224:	6a1a      	ldr	r2, [r3, #32]
 8004226:	4b02      	ldr	r3, [pc, #8]	; (8004230 <HAL_RCC_OscConfig+0x32c>)
 8004228:	2101      	movs	r1, #1
 800422a:	430a      	orrs	r2, r1
 800422c:	621a      	str	r2, [r3, #32]
 800422e:	e035      	b.n	800429c <HAL_RCC_OscConfig+0x398>
 8004230:	40021000 	.word	0x40021000
 8004234:	fffeffff 	.word	0xfffeffff
 8004238:	fffbffff 	.word	0xfffbffff
 800423c:	40007000 	.word	0x40007000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10c      	bne.n	8004262 <HAL_RCC_OscConfig+0x35e>
 8004248:	4bb6      	ldr	r3, [pc, #728]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 800424a:	6a1a      	ldr	r2, [r3, #32]
 800424c:	4bb5      	ldr	r3, [pc, #724]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 800424e:	2101      	movs	r1, #1
 8004250:	438a      	bics	r2, r1
 8004252:	621a      	str	r2, [r3, #32]
 8004254:	4bb3      	ldr	r3, [pc, #716]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004256:	6a1a      	ldr	r2, [r3, #32]
 8004258:	4bb2      	ldr	r3, [pc, #712]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 800425a:	2104      	movs	r1, #4
 800425c:	438a      	bics	r2, r1
 800425e:	621a      	str	r2, [r3, #32]
 8004260:	e01c      	b.n	800429c <HAL_RCC_OscConfig+0x398>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b05      	cmp	r3, #5
 8004268:	d10c      	bne.n	8004284 <HAL_RCC_OscConfig+0x380>
 800426a:	4bae      	ldr	r3, [pc, #696]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 800426c:	6a1a      	ldr	r2, [r3, #32]
 800426e:	4bad      	ldr	r3, [pc, #692]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004270:	2104      	movs	r1, #4
 8004272:	430a      	orrs	r2, r1
 8004274:	621a      	str	r2, [r3, #32]
 8004276:	4bab      	ldr	r3, [pc, #684]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004278:	6a1a      	ldr	r2, [r3, #32]
 800427a:	4baa      	ldr	r3, [pc, #680]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 800427c:	2101      	movs	r1, #1
 800427e:	430a      	orrs	r2, r1
 8004280:	621a      	str	r2, [r3, #32]
 8004282:	e00b      	b.n	800429c <HAL_RCC_OscConfig+0x398>
 8004284:	4ba7      	ldr	r3, [pc, #668]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004286:	6a1a      	ldr	r2, [r3, #32]
 8004288:	4ba6      	ldr	r3, [pc, #664]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 800428a:	2101      	movs	r1, #1
 800428c:	438a      	bics	r2, r1
 800428e:	621a      	str	r2, [r3, #32]
 8004290:	4ba4      	ldr	r3, [pc, #656]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004292:	6a1a      	ldr	r2, [r3, #32]
 8004294:	4ba3      	ldr	r3, [pc, #652]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004296:	2104      	movs	r1, #4
 8004298:	438a      	bics	r2, r1
 800429a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d014      	beq.n	80042ce <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a4:	f7fe fd7a 	bl	8002d9c <HAL_GetTick>
 80042a8:	0003      	movs	r3, r0
 80042aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ac:	e009      	b.n	80042c2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ae:	f7fe fd75 	bl	8002d9c <HAL_GetTick>
 80042b2:	0002      	movs	r2, r0
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	4a9b      	ldr	r2, [pc, #620]	; (8004528 <HAL_RCC_OscConfig+0x624>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e12b      	b.n	800451a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c2:	4b98      	ldr	r3, [pc, #608]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	2202      	movs	r2, #2
 80042c8:	4013      	ands	r3, r2
 80042ca:	d0f0      	beq.n	80042ae <HAL_RCC_OscConfig+0x3aa>
 80042cc:	e013      	b.n	80042f6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ce:	f7fe fd65 	bl	8002d9c <HAL_GetTick>
 80042d2:	0003      	movs	r3, r0
 80042d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d6:	e009      	b.n	80042ec <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d8:	f7fe fd60 	bl	8002d9c <HAL_GetTick>
 80042dc:	0002      	movs	r2, r0
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	4a91      	ldr	r2, [pc, #580]	; (8004528 <HAL_RCC_OscConfig+0x624>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e116      	b.n	800451a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ec:	4b8d      	ldr	r3, [pc, #564]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	2202      	movs	r2, #2
 80042f2:	4013      	ands	r3, r2
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042f6:	231f      	movs	r3, #31
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d105      	bne.n	800430c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004300:	4b88      	ldr	r3, [pc, #544]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004302:	69da      	ldr	r2, [r3, #28]
 8004304:	4b87      	ldr	r3, [pc, #540]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004306:	4989      	ldr	r1, [pc, #548]	; (800452c <HAL_RCC_OscConfig+0x628>)
 8004308:	400a      	ands	r2, r1
 800430a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2210      	movs	r2, #16
 8004312:	4013      	ands	r3, r2
 8004314:	d063      	beq.n	80043de <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d12a      	bne.n	8004374 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800431e:	4b81      	ldr	r3, [pc, #516]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004322:	4b80      	ldr	r3, [pc, #512]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004324:	2104      	movs	r1, #4
 8004326:	430a      	orrs	r2, r1
 8004328:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800432a:	4b7e      	ldr	r3, [pc, #504]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 800432c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432e:	4b7d      	ldr	r3, [pc, #500]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004330:	2101      	movs	r1, #1
 8004332:	430a      	orrs	r2, r1
 8004334:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004336:	f7fe fd31 	bl	8002d9c <HAL_GetTick>
 800433a:	0003      	movs	r3, r0
 800433c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004340:	f7fe fd2c 	bl	8002d9c <HAL_GetTick>
 8004344:	0002      	movs	r2, r0
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e0e3      	b.n	800451a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004352:	4b74      	ldr	r3, [pc, #464]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004356:	2202      	movs	r2, #2
 8004358:	4013      	ands	r3, r2
 800435a:	d0f1      	beq.n	8004340 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800435c:	4b71      	ldr	r3, [pc, #452]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 800435e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004360:	22f8      	movs	r2, #248	; 0xf8
 8004362:	4393      	bics	r3, r2
 8004364:	0019      	movs	r1, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	00da      	lsls	r2, r3, #3
 800436c:	4b6d      	ldr	r3, [pc, #436]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 800436e:	430a      	orrs	r2, r1
 8004370:	635a      	str	r2, [r3, #52]	; 0x34
 8004372:	e034      	b.n	80043de <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	3305      	adds	r3, #5
 800437a:	d111      	bne.n	80043a0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800437c:	4b69      	ldr	r3, [pc, #420]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 800437e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004380:	4b68      	ldr	r3, [pc, #416]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004382:	2104      	movs	r1, #4
 8004384:	438a      	bics	r2, r1
 8004386:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004388:	4b66      	ldr	r3, [pc, #408]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 800438a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438c:	22f8      	movs	r2, #248	; 0xf8
 800438e:	4393      	bics	r3, r2
 8004390:	0019      	movs	r1, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	00da      	lsls	r2, r3, #3
 8004398:	4b62      	ldr	r3, [pc, #392]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 800439a:	430a      	orrs	r2, r1
 800439c:	635a      	str	r2, [r3, #52]	; 0x34
 800439e:	e01e      	b.n	80043de <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80043a0:	4b60      	ldr	r3, [pc, #384]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 80043a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043a4:	4b5f      	ldr	r3, [pc, #380]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 80043a6:	2104      	movs	r1, #4
 80043a8:	430a      	orrs	r2, r1
 80043aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80043ac:	4b5d      	ldr	r3, [pc, #372]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 80043ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b0:	4b5c      	ldr	r3, [pc, #368]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 80043b2:	2101      	movs	r1, #1
 80043b4:	438a      	bics	r2, r1
 80043b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b8:	f7fe fcf0 	bl	8002d9c <HAL_GetTick>
 80043bc:	0003      	movs	r3, r0
 80043be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80043c2:	f7fe fceb 	bl	8002d9c <HAL_GetTick>
 80043c6:	0002      	movs	r2, r0
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e0a2      	b.n	800451a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80043d4:	4b53      	ldr	r3, [pc, #332]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 80043d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d8:	2202      	movs	r2, #2
 80043da:	4013      	ands	r3, r2
 80043dc:	d1f1      	bne.n	80043c2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d100      	bne.n	80043e8 <HAL_RCC_OscConfig+0x4e4>
 80043e6:	e097      	b.n	8004518 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043e8:	4b4e      	ldr	r3, [pc, #312]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	220c      	movs	r2, #12
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d100      	bne.n	80043f6 <HAL_RCC_OscConfig+0x4f2>
 80043f4:	e06b      	b.n	80044ce <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d14c      	bne.n	8004498 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fe:	4b49      	ldr	r3, [pc, #292]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4b48      	ldr	r3, [pc, #288]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004404:	494a      	ldr	r1, [pc, #296]	; (8004530 <HAL_RCC_OscConfig+0x62c>)
 8004406:	400a      	ands	r2, r1
 8004408:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440a:	f7fe fcc7 	bl	8002d9c <HAL_GetTick>
 800440e:	0003      	movs	r3, r0
 8004410:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004414:	f7fe fcc2 	bl	8002d9c <HAL_GetTick>
 8004418:	0002      	movs	r2, r0
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e079      	b.n	800451a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004426:	4b3f      	ldr	r3, [pc, #252]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	049b      	lsls	r3, r3, #18
 800442e:	4013      	ands	r3, r2
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004432:	4b3c      	ldr	r3, [pc, #240]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	220f      	movs	r2, #15
 8004438:	4393      	bics	r3, r2
 800443a:	0019      	movs	r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004440:	4b38      	ldr	r3, [pc, #224]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004442:	430a      	orrs	r2, r1
 8004444:	62da      	str	r2, [r3, #44]	; 0x2c
 8004446:	4b37      	ldr	r3, [pc, #220]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	4a3a      	ldr	r2, [pc, #232]	; (8004534 <HAL_RCC_OscConfig+0x630>)
 800444c:	4013      	ands	r3, r2
 800444e:	0019      	movs	r1, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	431a      	orrs	r2, r3
 800445a:	4b32      	ldr	r3, [pc, #200]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 800445c:	430a      	orrs	r2, r1
 800445e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004460:	4b30      	ldr	r3, [pc, #192]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	4b2f      	ldr	r3, [pc, #188]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 8004466:	2180      	movs	r1, #128	; 0x80
 8004468:	0449      	lsls	r1, r1, #17
 800446a:	430a      	orrs	r2, r1
 800446c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446e:	f7fe fc95 	bl	8002d9c <HAL_GetTick>
 8004472:	0003      	movs	r3, r0
 8004474:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004478:	f7fe fc90 	bl	8002d9c <HAL_GetTick>
 800447c:	0002      	movs	r2, r0
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e047      	b.n	800451a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800448a:	4b26      	ldr	r3, [pc, #152]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	2380      	movs	r3, #128	; 0x80
 8004490:	049b      	lsls	r3, r3, #18
 8004492:	4013      	ands	r3, r2
 8004494:	d0f0      	beq.n	8004478 <HAL_RCC_OscConfig+0x574>
 8004496:	e03f      	b.n	8004518 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004498:	4b22      	ldr	r3, [pc, #136]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	4b21      	ldr	r3, [pc, #132]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 800449e:	4924      	ldr	r1, [pc, #144]	; (8004530 <HAL_RCC_OscConfig+0x62c>)
 80044a0:	400a      	ands	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a4:	f7fe fc7a 	bl	8002d9c <HAL_GetTick>
 80044a8:	0003      	movs	r3, r0
 80044aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ae:	f7fe fc75 	bl	8002d9c <HAL_GetTick>
 80044b2:	0002      	movs	r2, r0
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e02c      	b.n	800451a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c0:	4b18      	ldr	r3, [pc, #96]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	2380      	movs	r3, #128	; 0x80
 80044c6:	049b      	lsls	r3, r3, #18
 80044c8:	4013      	ands	r3, r2
 80044ca:	d1f0      	bne.n	80044ae <HAL_RCC_OscConfig+0x5aa>
 80044cc:	e024      	b.n	8004518 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e01f      	b.n	800451a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80044da:	4b12      	ldr	r3, [pc, #72]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80044e0:	4b10      	ldr	r3, [pc, #64]	; (8004524 <HAL_RCC_OscConfig+0x620>)
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	025b      	lsls	r3, r3, #9
 80044ec:	401a      	ands	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d10e      	bne.n	8004514 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	220f      	movs	r2, #15
 80044fa:	401a      	ands	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d107      	bne.n	8004514 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	23f0      	movs	r3, #240	; 0xf0
 8004508:	039b      	lsls	r3, r3, #14
 800450a:	401a      	ands	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	0018      	movs	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	b008      	add	sp, #32
 8004520:	bd80      	pop	{r7, pc}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	40021000 	.word	0x40021000
 8004528:	00001388 	.word	0x00001388
 800452c:	efffffff 	.word	0xefffffff
 8004530:	feffffff 	.word	0xfeffffff
 8004534:	ffc2ffff 	.word	0xffc2ffff

08004538 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0b3      	b.n	80046b4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800454c:	4b5b      	ldr	r3, [pc, #364]	; (80046bc <HAL_RCC_ClockConfig+0x184>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2201      	movs	r2, #1
 8004552:	4013      	ands	r3, r2
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d911      	bls.n	800457e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b58      	ldr	r3, [pc, #352]	; (80046bc <HAL_RCC_ClockConfig+0x184>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2201      	movs	r2, #1
 8004560:	4393      	bics	r3, r2
 8004562:	0019      	movs	r1, r3
 8004564:	4b55      	ldr	r3, [pc, #340]	; (80046bc <HAL_RCC_ClockConfig+0x184>)
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800456c:	4b53      	ldr	r3, [pc, #332]	; (80046bc <HAL_RCC_ClockConfig+0x184>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2201      	movs	r2, #1
 8004572:	4013      	ands	r3, r2
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d001      	beq.n	800457e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e09a      	b.n	80046b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2202      	movs	r2, #2
 8004584:	4013      	ands	r3, r2
 8004586:	d015      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2204      	movs	r2, #4
 800458e:	4013      	ands	r3, r2
 8004590:	d006      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004592:	4b4b      	ldr	r3, [pc, #300]	; (80046c0 <HAL_RCC_ClockConfig+0x188>)
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	4b4a      	ldr	r3, [pc, #296]	; (80046c0 <HAL_RCC_ClockConfig+0x188>)
 8004598:	21e0      	movs	r1, #224	; 0xe0
 800459a:	00c9      	lsls	r1, r1, #3
 800459c:	430a      	orrs	r2, r1
 800459e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a0:	4b47      	ldr	r3, [pc, #284]	; (80046c0 <HAL_RCC_ClockConfig+0x188>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	22f0      	movs	r2, #240	; 0xf0
 80045a6:	4393      	bics	r3, r2
 80045a8:	0019      	movs	r1, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	4b44      	ldr	r3, [pc, #272]	; (80046c0 <HAL_RCC_ClockConfig+0x188>)
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2201      	movs	r2, #1
 80045ba:	4013      	ands	r3, r2
 80045bc:	d040      	beq.n	8004640 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c6:	4b3e      	ldr	r3, [pc, #248]	; (80046c0 <HAL_RCC_ClockConfig+0x188>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	2380      	movs	r3, #128	; 0x80
 80045cc:	029b      	lsls	r3, r3, #10
 80045ce:	4013      	ands	r3, r2
 80045d0:	d114      	bne.n	80045fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e06e      	b.n	80046b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d107      	bne.n	80045ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045de:	4b38      	ldr	r3, [pc, #224]	; (80046c0 <HAL_RCC_ClockConfig+0x188>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	2380      	movs	r3, #128	; 0x80
 80045e4:	049b      	lsls	r3, r3, #18
 80045e6:	4013      	ands	r3, r2
 80045e8:	d108      	bne.n	80045fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e062      	b.n	80046b4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ee:	4b34      	ldr	r3, [pc, #208]	; (80046c0 <HAL_RCC_ClockConfig+0x188>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2202      	movs	r2, #2
 80045f4:	4013      	ands	r3, r2
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e05b      	b.n	80046b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045fc:	4b30      	ldr	r3, [pc, #192]	; (80046c0 <HAL_RCC_ClockConfig+0x188>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2203      	movs	r2, #3
 8004602:	4393      	bics	r3, r2
 8004604:	0019      	movs	r1, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	4b2d      	ldr	r3, [pc, #180]	; (80046c0 <HAL_RCC_ClockConfig+0x188>)
 800460c:	430a      	orrs	r2, r1
 800460e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004610:	f7fe fbc4 	bl	8002d9c <HAL_GetTick>
 8004614:	0003      	movs	r3, r0
 8004616:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004618:	e009      	b.n	800462e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461a:	f7fe fbbf 	bl	8002d9c <HAL_GetTick>
 800461e:	0002      	movs	r2, r0
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	4a27      	ldr	r2, [pc, #156]	; (80046c4 <HAL_RCC_ClockConfig+0x18c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e042      	b.n	80046b4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462e:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <HAL_RCC_ClockConfig+0x188>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	220c      	movs	r2, #12
 8004634:	401a      	ands	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	429a      	cmp	r2, r3
 800463e:	d1ec      	bne.n	800461a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004640:	4b1e      	ldr	r3, [pc, #120]	; (80046bc <HAL_RCC_ClockConfig+0x184>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2201      	movs	r2, #1
 8004646:	4013      	ands	r3, r2
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d211      	bcs.n	8004672 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464e:	4b1b      	ldr	r3, [pc, #108]	; (80046bc <HAL_RCC_ClockConfig+0x184>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2201      	movs	r2, #1
 8004654:	4393      	bics	r3, r2
 8004656:	0019      	movs	r1, r3
 8004658:	4b18      	ldr	r3, [pc, #96]	; (80046bc <HAL_RCC_ClockConfig+0x184>)
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004660:	4b16      	ldr	r3, [pc, #88]	; (80046bc <HAL_RCC_ClockConfig+0x184>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2201      	movs	r2, #1
 8004666:	4013      	ands	r3, r2
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d001      	beq.n	8004672 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e020      	b.n	80046b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2204      	movs	r2, #4
 8004678:	4013      	ands	r3, r2
 800467a:	d009      	beq.n	8004690 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800467c:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <HAL_RCC_ClockConfig+0x188>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4a11      	ldr	r2, [pc, #68]	; (80046c8 <HAL_RCC_ClockConfig+0x190>)
 8004682:	4013      	ands	r3, r2
 8004684:	0019      	movs	r1, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <HAL_RCC_ClockConfig+0x188>)
 800468c:	430a      	orrs	r2, r1
 800468e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004690:	f000 f820 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 8004694:	0001      	movs	r1, r0
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <HAL_RCC_ClockConfig+0x188>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	091b      	lsrs	r3, r3, #4
 800469c:	220f      	movs	r2, #15
 800469e:	4013      	ands	r3, r2
 80046a0:	4a0a      	ldr	r2, [pc, #40]	; (80046cc <HAL_RCC_ClockConfig+0x194>)
 80046a2:	5cd3      	ldrb	r3, [r2, r3]
 80046a4:	000a      	movs	r2, r1
 80046a6:	40da      	lsrs	r2, r3
 80046a8:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <HAL_RCC_ClockConfig+0x198>)
 80046aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80046ac:	2003      	movs	r0, #3
 80046ae:	f7fe fb2f 	bl	8002d10 <HAL_InitTick>
  
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	0018      	movs	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	b004      	add	sp, #16
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40022000 	.word	0x40022000
 80046c0:	40021000 	.word	0x40021000
 80046c4:	00001388 	.word	0x00001388
 80046c8:	fffff8ff 	.word	0xfffff8ff
 80046cc:	0800a960 	.word	0x0800a960
 80046d0:	20000000 	.word	0x20000000

080046d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b08f      	sub	sp, #60	; 0x3c
 80046d8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80046da:	2314      	movs	r3, #20
 80046dc:	18fb      	adds	r3, r7, r3
 80046de:	4a2b      	ldr	r2, [pc, #172]	; (800478c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046e2:	c313      	stmia	r3!, {r0, r1, r4}
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80046e8:	1d3b      	adds	r3, r7, #4
 80046ea:	4a29      	ldr	r2, [pc, #164]	; (8004790 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046ee:	c313      	stmia	r3!, {r0, r1, r4}
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f8:	2300      	movs	r3, #0
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80046fc:	2300      	movs	r3, #0
 80046fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004700:	2300      	movs	r3, #0
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004708:	4b22      	ldr	r3, [pc, #136]	; (8004794 <HAL_RCC_GetSysClockFreq+0xc0>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	220c      	movs	r2, #12
 8004712:	4013      	ands	r3, r2
 8004714:	2b04      	cmp	r3, #4
 8004716:	d002      	beq.n	800471e <HAL_RCC_GetSysClockFreq+0x4a>
 8004718:	2b08      	cmp	r3, #8
 800471a:	d003      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x50>
 800471c:	e02d      	b.n	800477a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800471e:	4b1e      	ldr	r3, [pc, #120]	; (8004798 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004720:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004722:	e02d      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004726:	0c9b      	lsrs	r3, r3, #18
 8004728:	220f      	movs	r2, #15
 800472a:	4013      	ands	r3, r2
 800472c:	2214      	movs	r2, #20
 800472e:	18ba      	adds	r2, r7, r2
 8004730:	5cd3      	ldrb	r3, [r2, r3]
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004734:	4b17      	ldr	r3, [pc, #92]	; (8004794 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	220f      	movs	r2, #15
 800473a:	4013      	ands	r3, r2
 800473c:	1d3a      	adds	r2, r7, #4
 800473e:	5cd3      	ldrb	r3, [r2, r3]
 8004740:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004744:	2380      	movs	r3, #128	; 0x80
 8004746:	025b      	lsls	r3, r3, #9
 8004748:	4013      	ands	r3, r2
 800474a:	d009      	beq.n	8004760 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800474c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800474e:	4812      	ldr	r0, [pc, #72]	; (8004798 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004750:	f7fb fcf6 	bl	8000140 <__udivsi3>
 8004754:	0003      	movs	r3, r0
 8004756:	001a      	movs	r2, r3
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	4353      	muls	r3, r2
 800475c:	637b      	str	r3, [r7, #52]	; 0x34
 800475e:	e009      	b.n	8004774 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004762:	000a      	movs	r2, r1
 8004764:	0152      	lsls	r2, r2, #5
 8004766:	1a52      	subs	r2, r2, r1
 8004768:	0193      	lsls	r3, r2, #6
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	185b      	adds	r3, r3, r1
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004776:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004778:	e002      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800477a:	4b07      	ldr	r3, [pc, #28]	; (8004798 <HAL_RCC_GetSysClockFreq+0xc4>)
 800477c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800477e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004782:	0018      	movs	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	b00f      	add	sp, #60	; 0x3c
 8004788:	bd90      	pop	{r4, r7, pc}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	0800a880 	.word	0x0800a880
 8004790:	0800a890 	.word	0x0800a890
 8004794:	40021000 	.word	0x40021000
 8004798:	007a1200 	.word	0x007a1200

0800479c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047a0:	4b02      	ldr	r3, [pc, #8]	; (80047ac <HAL_RCC_GetHCLKFreq+0x10>)
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	0018      	movs	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	20000000 	.word	0x20000000

080047b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80047b4:	f7ff fff2 	bl	800479c <HAL_RCC_GetHCLKFreq>
 80047b8:	0001      	movs	r1, r0
 80047ba:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	0a1b      	lsrs	r3, r3, #8
 80047c0:	2207      	movs	r2, #7
 80047c2:	4013      	ands	r3, r2
 80047c4:	4a04      	ldr	r2, [pc, #16]	; (80047d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047c6:	5cd3      	ldrb	r3, [r2, r3]
 80047c8:	40d9      	lsrs	r1, r3
 80047ca:	000b      	movs	r3, r1
}    
 80047cc:	0018      	movs	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	40021000 	.word	0x40021000
 80047d8:	0800a970 	.word	0x0800a970

080047dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	025b      	lsls	r3, r3, #9
 80047f4:	4013      	ands	r3, r2
 80047f6:	d100      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80047f8:	e08e      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80047fa:	2017      	movs	r0, #23
 80047fc:	183b      	adds	r3, r7, r0
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004802:	4b5f      	ldr	r3, [pc, #380]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004804:	69da      	ldr	r2, [r3, #28]
 8004806:	2380      	movs	r3, #128	; 0x80
 8004808:	055b      	lsls	r3, r3, #21
 800480a:	4013      	ands	r3, r2
 800480c:	d110      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800480e:	4b5c      	ldr	r3, [pc, #368]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004810:	69da      	ldr	r2, [r3, #28]
 8004812:	4b5b      	ldr	r3, [pc, #364]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004814:	2180      	movs	r1, #128	; 0x80
 8004816:	0549      	lsls	r1, r1, #21
 8004818:	430a      	orrs	r2, r1
 800481a:	61da      	str	r2, [r3, #28]
 800481c:	4b58      	ldr	r3, [pc, #352]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800481e:	69da      	ldr	r2, [r3, #28]
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	055b      	lsls	r3, r3, #21
 8004824:	4013      	ands	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
 8004828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800482a:	183b      	adds	r3, r7, r0
 800482c:	2201      	movs	r2, #1
 800482e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004830:	4b54      	ldr	r3, [pc, #336]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	2380      	movs	r3, #128	; 0x80
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4013      	ands	r3, r2
 800483a:	d11a      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800483c:	4b51      	ldr	r3, [pc, #324]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4b50      	ldr	r3, [pc, #320]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004842:	2180      	movs	r1, #128	; 0x80
 8004844:	0049      	lsls	r1, r1, #1
 8004846:	430a      	orrs	r2, r1
 8004848:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800484a:	f7fe faa7 	bl	8002d9c <HAL_GetTick>
 800484e:	0003      	movs	r3, r0
 8004850:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004852:	e008      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004854:	f7fe faa2 	bl	8002d9c <HAL_GetTick>
 8004858:	0002      	movs	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b64      	cmp	r3, #100	; 0x64
 8004860:	d901      	bls.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e087      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004866:	4b47      	ldr	r3, [pc, #284]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	2380      	movs	r3, #128	; 0x80
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	4013      	ands	r3, r2
 8004870:	d0f0      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004872:	4b43      	ldr	r3, [pc, #268]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004874:	6a1a      	ldr	r2, [r3, #32]
 8004876:	23c0      	movs	r3, #192	; 0xc0
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4013      	ands	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d034      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	23c0      	movs	r3, #192	; 0xc0
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4013      	ands	r3, r2
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	429a      	cmp	r2, r3
 8004892:	d02c      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004894:	4b3a      	ldr	r3, [pc, #232]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	4a3b      	ldr	r2, [pc, #236]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800489a:	4013      	ands	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800489e:	4b38      	ldr	r3, [pc, #224]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048a0:	6a1a      	ldr	r2, [r3, #32]
 80048a2:	4b37      	ldr	r3, [pc, #220]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048a4:	2180      	movs	r1, #128	; 0x80
 80048a6:	0249      	lsls	r1, r1, #9
 80048a8:	430a      	orrs	r2, r1
 80048aa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048ac:	4b34      	ldr	r3, [pc, #208]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048ae:	6a1a      	ldr	r2, [r3, #32]
 80048b0:	4b33      	ldr	r3, [pc, #204]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048b2:	4936      	ldr	r1, [pc, #216]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80048b4:	400a      	ands	r2, r1
 80048b6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048b8:	4b31      	ldr	r3, [pc, #196]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	4013      	ands	r3, r2
 80048c4:	d013      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c6:	f7fe fa69 	bl	8002d9c <HAL_GetTick>
 80048ca:	0003      	movs	r3, r0
 80048cc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ce:	e009      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d0:	f7fe fa64 	bl	8002d9c <HAL_GetTick>
 80048d4:	0002      	movs	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	4a2d      	ldr	r2, [pc, #180]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d901      	bls.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e048      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e4:	4b26      	ldr	r3, [pc, #152]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	2202      	movs	r2, #2
 80048ea:	4013      	ands	r3, r2
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	4a25      	ldr	r2, [pc, #148]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	0019      	movs	r1, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	4b20      	ldr	r3, [pc, #128]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048fe:	430a      	orrs	r2, r1
 8004900:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004902:	2317      	movs	r3, #23
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d105      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490c:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004912:	4920      	ldr	r1, [pc, #128]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004914:	400a      	ands	r2, r1
 8004916:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2201      	movs	r2, #1
 800491e:	4013      	ands	r3, r2
 8004920:	d009      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004922:	4b17      	ldr	r3, [pc, #92]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	2203      	movs	r2, #3
 8004928:	4393      	bics	r3, r2
 800492a:	0019      	movs	r1, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	4b13      	ldr	r3, [pc, #76]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004932:	430a      	orrs	r2, r1
 8004934:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2220      	movs	r2, #32
 800493c:	4013      	ands	r3, r2
 800493e:	d009      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	2210      	movs	r2, #16
 8004946:	4393      	bics	r3, r2
 8004948:	0019      	movs	r1, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004950:	430a      	orrs	r2, r1
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	4013      	ands	r3, r2
 800495e:	d009      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004964:	2240      	movs	r2, #64	; 0x40
 8004966:	4393      	bics	r3, r2
 8004968:	0019      	movs	r1, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	4b04      	ldr	r3, [pc, #16]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004970:	430a      	orrs	r2, r1
 8004972:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	0018      	movs	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	b006      	add	sp, #24
 800497c:	bd80      	pop	{r7, pc}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	40021000 	.word	0x40021000
 8004984:	40007000 	.word	0x40007000
 8004988:	fffffcff 	.word	0xfffffcff
 800498c:	fffeffff 	.word	0xfffeffff
 8004990:	00001388 	.word	0x00001388
 8004994:	efffffff 	.word	0xefffffff

08004998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e044      	b.n	8004a34 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d107      	bne.n	80049c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2274      	movs	r2, #116	; 0x74
 80049b6:	2100      	movs	r1, #0
 80049b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	0018      	movs	r0, r3
 80049be:	f7fe f81f 	bl	8002a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2224      	movs	r2, #36	; 0x24
 80049c6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2101      	movs	r1, #1
 80049d4:	438a      	bics	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	0018      	movs	r0, r3
 80049dc:	f000 fc2e 	bl	800523c <UART_SetConfig>
 80049e0:	0003      	movs	r3, r0
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e024      	b.n	8004a34 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	0018      	movs	r0, r3
 80049f6:	f000 fd61 	bl	80054bc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	490d      	ldr	r1, [pc, #52]	; (8004a3c <HAL_UART_Init+0xa4>)
 8004a06:	400a      	ands	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	212a      	movs	r1, #42	; 0x2a
 8004a16:	438a      	bics	r2, r1
 8004a18:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2101      	movs	r1, #1
 8004a26:	430a      	orrs	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f000 fdf9 	bl	8005624 <UART_CheckIdleState>
 8004a32:	0003      	movs	r3, r0
}
 8004a34:	0018      	movs	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b002      	add	sp, #8
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	ffffb7ff 	.word	0xffffb7ff

08004a40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08a      	sub	sp, #40	; 0x28
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	1dbb      	adds	r3, r7, #6
 8004a4e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d000      	beq.n	8004a5a <HAL_UART_Transmit+0x1a>
 8004a58:	e096      	b.n	8004b88 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_UART_Transmit+0x28>
 8004a60:	1dbb      	adds	r3, r7, #6
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e08e      	b.n	8004b8a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	2380      	movs	r3, #128	; 0x80
 8004a72:	015b      	lsls	r3, r3, #5
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d109      	bne.n	8004a8c <HAL_UART_Transmit+0x4c>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d105      	bne.n	8004a8c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2201      	movs	r2, #1
 8004a84:	4013      	ands	r3, r2
 8004a86:	d001      	beq.n	8004a8c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e07e      	b.n	8004b8a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2274      	movs	r2, #116	; 0x74
 8004a90:	5c9b      	ldrb	r3, [r3, r2]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_UART_Transmit+0x5a>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e077      	b.n	8004b8a <HAL_UART_Transmit+0x14a>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2274      	movs	r2, #116	; 0x74
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2280      	movs	r2, #128	; 0x80
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2221      	movs	r2, #33	; 0x21
 8004aae:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ab0:	f7fe f974 	bl	8002d9c <HAL_GetTick>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	1dba      	adds	r2, r7, #6
 8004abc:	2150      	movs	r1, #80	; 0x50
 8004abe:	8812      	ldrh	r2, [r2, #0]
 8004ac0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1dba      	adds	r2, r7, #6
 8004ac6:	2152      	movs	r1, #82	; 0x52
 8004ac8:	8812      	ldrh	r2, [r2, #0]
 8004aca:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	015b      	lsls	r3, r3, #5
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d108      	bne.n	8004aea <HAL_UART_Transmit+0xaa>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d104      	bne.n	8004aea <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	e003      	b.n	8004af2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2274      	movs	r2, #116	; 0x74
 8004af6:	2100      	movs	r1, #0
 8004af8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004afa:	e02d      	b.n	8004b58 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	0013      	movs	r3, r2
 8004b06:	2200      	movs	r2, #0
 8004b08:	2180      	movs	r1, #128	; 0x80
 8004b0a:	f000 fdd3 	bl	80056b4 <UART_WaitOnFlagUntilTimeout>
 8004b0e:	1e03      	subs	r3, r0, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e039      	b.n	8004b8a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10b      	bne.n	8004b34 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	881a      	ldrh	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	05d2      	lsls	r2, r2, #23
 8004b26:	0dd2      	lsrs	r2, r2, #23
 8004b28:	b292      	uxth	r2, r2
 8004b2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	3302      	adds	r3, #2
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	e008      	b.n	8004b46 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	781a      	ldrb	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	b292      	uxth	r2, r2
 8004b3e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	3301      	adds	r3, #1
 8004b44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2252      	movs	r2, #82	; 0x52
 8004b4a:	5a9b      	ldrh	r3, [r3, r2]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b299      	uxth	r1, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2252      	movs	r2, #82	; 0x52
 8004b56:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2252      	movs	r2, #82	; 0x52
 8004b5c:	5a9b      	ldrh	r3, [r3, r2]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1cb      	bne.n	8004afc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	0013      	movs	r3, r2
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2140      	movs	r1, #64	; 0x40
 8004b72:	f000 fd9f 	bl	80056b4 <UART_WaitOnFlagUntilTimeout>
 8004b76:	1e03      	subs	r3, r0, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e005      	b.n	8004b8a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	e000      	b.n	8004b8a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004b88:	2302      	movs	r3, #2
  }
}
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b008      	add	sp, #32
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b088      	sub	sp, #32
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	1dbb      	adds	r3, r7, #6
 8004b9e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d150      	bne.n	8004c4a <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_UART_Receive_IT+0x24>
 8004bae:	1dbb      	adds	r3, r7, #6
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e048      	b.n	8004c4c <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	2380      	movs	r3, #128	; 0x80
 8004bc0:	015b      	lsls	r3, r3, #5
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d109      	bne.n	8004bda <HAL_UART_Receive_IT+0x48>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d105      	bne.n	8004bda <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d001      	beq.n	8004bda <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e038      	b.n	8004c4c <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2274      	movs	r2, #116	; 0x74
 8004bde:	5c9b      	ldrb	r3, [r3, r2]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_UART_Receive_IT+0x56>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e031      	b.n	8004c4c <HAL_UART_Receive_IT+0xba>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2274      	movs	r2, #116	; 0x74
 8004bec:	2101      	movs	r1, #1
 8004bee:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	2380      	movs	r3, #128	; 0x80
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	4013      	ands	r3, r2
 8004c02:	d019      	beq.n	8004c38 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c04:	f3ef 8310 	mrs	r3, PRIMASK
 8004c08:	613b      	str	r3, [r7, #16]
  return(result);
 8004c0a:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	2301      	movs	r3, #1
 8004c10:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f383 8810 	msr	PRIMASK, r3
}
 8004c18:	46c0      	nop			; (mov r8, r8)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2180      	movs	r1, #128	; 0x80
 8004c26:	04c9      	lsls	r1, r1, #19
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	f383 8810 	msr	PRIMASK, r3
}
 8004c36:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c38:	1dbb      	adds	r3, r7, #6
 8004c3a:	881a      	ldrh	r2, [r3, #0]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	0018      	movs	r0, r3
 8004c42:	f000 fdfb 	bl	800583c <UART_Start_Receive_IT>
 8004c46:	0003      	movs	r3, r0
 8004c48:	e000      	b.n	8004c4c <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004c4a:	2302      	movs	r3, #2
  }
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b008      	add	sp, #32
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c54:	b590      	push	{r4, r7, lr}
 8004c56:	b0ab      	sub	sp, #172	; 0xac
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	22a4      	movs	r2, #164	; 0xa4
 8004c64:	18b9      	adds	r1, r7, r2
 8004c66:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	20a0      	movs	r0, #160	; 0xa0
 8004c70:	1839      	adds	r1, r7, r0
 8004c72:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	219c      	movs	r1, #156	; 0x9c
 8004c7c:	1879      	adds	r1, r7, r1
 8004c7e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c80:	0011      	movs	r1, r2
 8004c82:	18bb      	adds	r3, r7, r2
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a99      	ldr	r2, [pc, #612]	; (8004eec <HAL_UART_IRQHandler+0x298>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2298      	movs	r2, #152	; 0x98
 8004c8c:	18bc      	adds	r4, r7, r2
 8004c8e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004c90:	18bb      	adds	r3, r7, r2
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d114      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c98:	187b      	adds	r3, r7, r1
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d00f      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ca2:	183b      	adds	r3, r7, r0
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d00a      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d100      	bne.n	8004cb6 <HAL_UART_IRQHandler+0x62>
 8004cb4:	e296      	b.n	80051e4 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	0010      	movs	r0, r2
 8004cbe:	4798      	blx	r3
      }
      return;
 8004cc0:	e290      	b.n	80051e4 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004cc2:	2398      	movs	r3, #152	; 0x98
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d100      	bne.n	8004cce <HAL_UART_IRQHandler+0x7a>
 8004ccc:	e114      	b.n	8004ef8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004cce:	239c      	movs	r3, #156	; 0x9c
 8004cd0:	18fb      	adds	r3, r7, r3
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d106      	bne.n	8004ce8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004cda:	23a0      	movs	r3, #160	; 0xa0
 8004cdc:	18fb      	adds	r3, r7, r3
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a83      	ldr	r2, [pc, #524]	; (8004ef0 <HAL_UART_IRQHandler+0x29c>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d100      	bne.n	8004ce8 <HAL_UART_IRQHandler+0x94>
 8004ce6:	e107      	b.n	8004ef8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ce8:	23a4      	movs	r3, #164	; 0xa4
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d012      	beq.n	8004d1a <HAL_UART_IRQHandler+0xc6>
 8004cf4:	23a0      	movs	r3, #160	; 0xa0
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	2380      	movs	r3, #128	; 0x80
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d00b      	beq.n	8004d1a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2201      	movs	r2, #1
 8004d08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2280      	movs	r2, #128	; 0x80
 8004d0e:	589b      	ldr	r3, [r3, r2]
 8004d10:	2201      	movs	r2, #1
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2180      	movs	r1, #128	; 0x80
 8004d18:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d1a:	23a4      	movs	r3, #164	; 0xa4
 8004d1c:	18fb      	adds	r3, r7, r3
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2202      	movs	r2, #2
 8004d22:	4013      	ands	r3, r2
 8004d24:	d011      	beq.n	8004d4a <HAL_UART_IRQHandler+0xf6>
 8004d26:	239c      	movs	r3, #156	; 0x9c
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d00b      	beq.n	8004d4a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2202      	movs	r2, #2
 8004d38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2280      	movs	r2, #128	; 0x80
 8004d3e:	589b      	ldr	r3, [r3, r2]
 8004d40:	2204      	movs	r2, #4
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2180      	movs	r1, #128	; 0x80
 8004d48:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d4a:	23a4      	movs	r3, #164	; 0xa4
 8004d4c:	18fb      	adds	r3, r7, r3
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2204      	movs	r2, #4
 8004d52:	4013      	ands	r3, r2
 8004d54:	d011      	beq.n	8004d7a <HAL_UART_IRQHandler+0x126>
 8004d56:	239c      	movs	r3, #156	; 0x9c
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d00b      	beq.n	8004d7a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2204      	movs	r2, #4
 8004d68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2280      	movs	r2, #128	; 0x80
 8004d6e:	589b      	ldr	r3, [r3, r2]
 8004d70:	2202      	movs	r2, #2
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2180      	movs	r1, #128	; 0x80
 8004d78:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d7a:	23a4      	movs	r3, #164	; 0xa4
 8004d7c:	18fb      	adds	r3, r7, r3
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2208      	movs	r2, #8
 8004d82:	4013      	ands	r3, r2
 8004d84:	d017      	beq.n	8004db6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d86:	23a0      	movs	r3, #160	; 0xa0
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d105      	bne.n	8004d9e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d92:	239c      	movs	r3, #156	; 0x9c
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d9c:	d00b      	beq.n	8004db6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2208      	movs	r2, #8
 8004da4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2280      	movs	r2, #128	; 0x80
 8004daa:	589b      	ldr	r3, [r3, r2]
 8004dac:	2208      	movs	r2, #8
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2180      	movs	r1, #128	; 0x80
 8004db4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004db6:	23a4      	movs	r3, #164	; 0xa4
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	2380      	movs	r3, #128	; 0x80
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d013      	beq.n	8004dec <HAL_UART_IRQHandler+0x198>
 8004dc4:	23a0      	movs	r3, #160	; 0xa0
 8004dc6:	18fb      	adds	r3, r7, r3
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	2380      	movs	r3, #128	; 0x80
 8004dcc:	04db      	lsls	r3, r3, #19
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d00c      	beq.n	8004dec <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2280      	movs	r2, #128	; 0x80
 8004dd8:	0112      	lsls	r2, r2, #4
 8004dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2280      	movs	r2, #128	; 0x80
 8004de0:	589b      	ldr	r3, [r3, r2]
 8004de2:	2220      	movs	r2, #32
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2180      	movs	r1, #128	; 0x80
 8004dea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2280      	movs	r2, #128	; 0x80
 8004df0:	589b      	ldr	r3, [r3, r2]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d100      	bne.n	8004df8 <HAL_UART_IRQHandler+0x1a4>
 8004df6:	e1f7      	b.n	80051e8 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004df8:	23a4      	movs	r3, #164	; 0xa4
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	4013      	ands	r3, r2
 8004e02:	d00e      	beq.n	8004e22 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e04:	23a0      	movs	r3, #160	; 0xa0
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d008      	beq.n	8004e22 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	0010      	movs	r0, r2
 8004e20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2280      	movs	r2, #128	; 0x80
 8004e26:	589b      	ldr	r3, [r3, r2]
 8004e28:	2194      	movs	r1, #148	; 0x94
 8004e2a:	187a      	adds	r2, r7, r1
 8004e2c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	2240      	movs	r2, #64	; 0x40
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b40      	cmp	r3, #64	; 0x40
 8004e3a:	d004      	beq.n	8004e46 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e3c:	187b      	adds	r3, r7, r1
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2228      	movs	r2, #40	; 0x28
 8004e42:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e44:	d047      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f000 fd93 	bl	8005974 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2240      	movs	r2, #64	; 0x40
 8004e56:	4013      	ands	r3, r2
 8004e58:	2b40      	cmp	r3, #64	; 0x40
 8004e5a:	d137      	bne.n	8004ecc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e60:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004e62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e64:	2090      	movs	r0, #144	; 0x90
 8004e66:	183a      	adds	r2, r7, r0
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e70:	f383 8810 	msr	PRIMASK, r3
}
 8004e74:	46c0      	nop			; (mov r8, r8)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2140      	movs	r1, #64	; 0x40
 8004e82:	438a      	bics	r2, r1
 8004e84:	609a      	str	r2, [r3, #8]
 8004e86:	183b      	adds	r3, r7, r0
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e8e:	f383 8810 	msr	PRIMASK, r3
}
 8004e92:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d012      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	4a14      	ldr	r2, [pc, #80]	; (8004ef4 <HAL_UART_IRQHandler+0x2a0>)
 8004ea2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f7fe fd35 	bl	8003918 <HAL_DMA_Abort_IT>
 8004eae:	1e03      	subs	r3, r0, #0
 8004eb0:	d01a      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec0:	e012      	b.n	8004ee8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f000 f9a5 	bl	8005214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eca:	e00d      	b.n	8004ee8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f000 f9a0 	bl	8005214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed4:	e008      	b.n	8004ee8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f000 f99b 	bl	8005214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2280      	movs	r2, #128	; 0x80
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004ee6:	e17f      	b.n	80051e8 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee8:	46c0      	nop			; (mov r8, r8)
    return;
 8004eea:	e17d      	b.n	80051e8 <HAL_UART_IRQHandler+0x594>
 8004eec:	0000080f 	.word	0x0000080f
 8004ef0:	04000120 	.word	0x04000120
 8004ef4:	08005a39 	.word	0x08005a39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d000      	beq.n	8004f02 <HAL_UART_IRQHandler+0x2ae>
 8004f00:	e131      	b.n	8005166 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f02:	23a4      	movs	r3, #164	; 0xa4
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2210      	movs	r2, #16
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d100      	bne.n	8004f10 <HAL_UART_IRQHandler+0x2bc>
 8004f0e:	e12a      	b.n	8005166 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f10:	23a0      	movs	r3, #160	; 0xa0
 8004f12:	18fb      	adds	r3, r7, r3
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2210      	movs	r2, #16
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d100      	bne.n	8004f1e <HAL_UART_IRQHandler+0x2ca>
 8004f1c:	e123      	b.n	8005166 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2210      	movs	r2, #16
 8004f24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2240      	movs	r2, #64	; 0x40
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b40      	cmp	r3, #64	; 0x40
 8004f32:	d000      	beq.n	8004f36 <HAL_UART_IRQHandler+0x2e2>
 8004f34:	e09b      	b.n	800506e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	217e      	movs	r1, #126	; 0x7e
 8004f40:	187b      	adds	r3, r7, r1
 8004f42:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004f44:	187b      	adds	r3, r7, r1
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d100      	bne.n	8004f4e <HAL_UART_IRQHandler+0x2fa>
 8004f4c:	e14e      	b.n	80051ec <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2258      	movs	r2, #88	; 0x58
 8004f52:	5a9b      	ldrh	r3, [r3, r2]
 8004f54:	187a      	adds	r2, r7, r1
 8004f56:	8812      	ldrh	r2, [r2, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d300      	bcc.n	8004f5e <HAL_UART_IRQHandler+0x30a>
 8004f5c:	e146      	b.n	80051ec <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	187a      	adds	r2, r7, r1
 8004f62:	215a      	movs	r1, #90	; 0x5a
 8004f64:	8812      	ldrh	r2, [r2, #0]
 8004f66:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	d06e      	beq.n	8005050 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f72:	f3ef 8310 	mrs	r3, PRIMASK
 8004f76:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f82:	f383 8810 	msr	PRIMASK, r3
}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	499a      	ldr	r1, [pc, #616]	; (80051fc <HAL_UART_IRQHandler+0x5a8>)
 8004f94:	400a      	ands	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9e:	f383 8810 	msr	PRIMASK, r3
}
 8004fa2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8004fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fac:	677b      	str	r3, [r7, #116]	; 0x74
 8004fae:	2301      	movs	r3, #1
 8004fb0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb4:	f383 8810 	msr	PRIMASK, r3
}
 8004fb8:	46c0      	nop			; (mov r8, r8)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	438a      	bics	r2, r1
 8004fc8:	609a      	str	r2, [r3, #8]
 8004fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fcc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd0:	f383 8810 	msr	PRIMASK, r3
}
 8004fd4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fda:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fde:	673b      	str	r3, [r7, #112]	; 0x70
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe6:	f383 8810 	msr	PRIMASK, r3
}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2140      	movs	r1, #64	; 0x40
 8004ff8:	438a      	bics	r2, r1
 8004ffa:	609a      	str	r2, [r3, #8]
 8004ffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ffe:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005002:	f383 8810 	msr	PRIMASK, r3
}
 8005006:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005014:	f3ef 8310 	mrs	r3, PRIMASK
 8005018:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800501a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800501e:	2301      	movs	r3, #1
 8005020:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005024:	f383 8810 	msr	PRIMASK, r3
}
 8005028:	46c0      	nop			; (mov r8, r8)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2110      	movs	r1, #16
 8005036:	438a      	bics	r2, r1
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005040:	f383 8810 	msr	PRIMASK, r3
}
 8005044:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504a:	0018      	movs	r0, r3
 800504c:	f7fe fc2c 	bl	80038a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2258      	movs	r2, #88	; 0x58
 8005054:	5a9a      	ldrh	r2, [r3, r2]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	215a      	movs	r1, #90	; 0x5a
 800505a:	5a5b      	ldrh	r3, [r3, r1]
 800505c:	b29b      	uxth	r3, r3
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	b29a      	uxth	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	0011      	movs	r1, r2
 8005066:	0018      	movs	r0, r3
 8005068:	f000 f8dc 	bl	8005224 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800506c:	e0be      	b.n	80051ec <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2258      	movs	r2, #88	; 0x58
 8005072:	5a99      	ldrh	r1, [r3, r2]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	225a      	movs	r2, #90	; 0x5a
 8005078:	5a9b      	ldrh	r3, [r3, r2]
 800507a:	b29a      	uxth	r2, r3
 800507c:	208e      	movs	r0, #142	; 0x8e
 800507e:	183b      	adds	r3, r7, r0
 8005080:	1a8a      	subs	r2, r1, r2
 8005082:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	225a      	movs	r2, #90	; 0x5a
 8005088:	5a9b      	ldrh	r3, [r3, r2]
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d100      	bne.n	8005092 <HAL_UART_IRQHandler+0x43e>
 8005090:	e0ae      	b.n	80051f0 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8005092:	183b      	adds	r3, r7, r0
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d100      	bne.n	800509c <HAL_UART_IRQHandler+0x448>
 800509a:	e0a9      	b.n	80051f0 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509c:	f3ef 8310 	mrs	r3, PRIMASK
 80050a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80050a2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050a4:	2488      	movs	r4, #136	; 0x88
 80050a6:	193a      	adds	r2, r7, r4
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	2301      	movs	r3, #1
 80050ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f383 8810 	msr	PRIMASK, r3
}
 80050b4:	46c0      	nop			; (mov r8, r8)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	494f      	ldr	r1, [pc, #316]	; (8005200 <HAL_UART_IRQHandler+0x5ac>)
 80050c2:	400a      	ands	r2, r1
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	193b      	adds	r3, r7, r4
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f383 8810 	msr	PRIMASK, r3
}
 80050d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050d4:	f3ef 8310 	mrs	r3, PRIMASK
 80050d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80050da:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050dc:	2484      	movs	r4, #132	; 0x84
 80050de:	193a      	adds	r2, r7, r4
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	2301      	movs	r3, #1
 80050e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	f383 8810 	msr	PRIMASK, r3
}
 80050ec:	46c0      	nop			; (mov r8, r8)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2101      	movs	r1, #1
 80050fa:	438a      	bics	r2, r1
 80050fc:	609a      	str	r2, [r3, #8]
 80050fe:	193b      	adds	r3, r7, r4
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	f383 8810 	msr	PRIMASK, r3
}
 800510a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800511e:	f3ef 8310 	mrs	r3, PRIMASK
 8005122:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005126:	2480      	movs	r4, #128	; 0x80
 8005128:	193a      	adds	r2, r7, r4
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	2301      	movs	r3, #1
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005132:	f383 8810 	msr	PRIMASK, r3
}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2110      	movs	r1, #16
 8005144:	438a      	bics	r2, r1
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	193b      	adds	r3, r7, r4
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	f383 8810 	msr	PRIMASK, r3
}
 8005154:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005156:	183b      	adds	r3, r7, r0
 8005158:	881a      	ldrh	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	0011      	movs	r1, r2
 800515e:	0018      	movs	r0, r3
 8005160:	f000 f860 	bl	8005224 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005164:	e044      	b.n	80051f0 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005166:	23a4      	movs	r3, #164	; 0xa4
 8005168:	18fb      	adds	r3, r7, r3
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	035b      	lsls	r3, r3, #13
 8005170:	4013      	ands	r3, r2
 8005172:	d010      	beq.n	8005196 <HAL_UART_IRQHandler+0x542>
 8005174:	239c      	movs	r3, #156	; 0x9c
 8005176:	18fb      	adds	r3, r7, r3
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	2380      	movs	r3, #128	; 0x80
 800517c:	03db      	lsls	r3, r3, #15
 800517e:	4013      	ands	r3, r2
 8005180:	d009      	beq.n	8005196 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2280      	movs	r2, #128	; 0x80
 8005188:	0352      	lsls	r2, r2, #13
 800518a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	0018      	movs	r0, r3
 8005190:	f000 fdfc 	bl	8005d8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005194:	e02f      	b.n	80051f6 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005196:	23a4      	movs	r3, #164	; 0xa4
 8005198:	18fb      	adds	r3, r7, r3
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2280      	movs	r2, #128	; 0x80
 800519e:	4013      	ands	r3, r2
 80051a0:	d00f      	beq.n	80051c2 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051a2:	23a0      	movs	r3, #160	; 0xa0
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2280      	movs	r2, #128	; 0x80
 80051aa:	4013      	ands	r3, r2
 80051ac:	d009      	beq.n	80051c2 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d01e      	beq.n	80051f4 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	0010      	movs	r0, r2
 80051be:	4798      	blx	r3
    }
    return;
 80051c0:	e018      	b.n	80051f4 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051c2:	23a4      	movs	r3, #164	; 0xa4
 80051c4:	18fb      	adds	r3, r7, r3
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2240      	movs	r2, #64	; 0x40
 80051ca:	4013      	ands	r3, r2
 80051cc:	d013      	beq.n	80051f6 <HAL_UART_IRQHandler+0x5a2>
 80051ce:	23a0      	movs	r3, #160	; 0xa0
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2240      	movs	r2, #64	; 0x40
 80051d6:	4013      	ands	r3, r2
 80051d8:	d00d      	beq.n	80051f6 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	0018      	movs	r0, r3
 80051de:	f000 fc42 	bl	8005a66 <UART_EndTransmit_IT>
    return;
 80051e2:	e008      	b.n	80051f6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80051e4:	46c0      	nop			; (mov r8, r8)
 80051e6:	e006      	b.n	80051f6 <HAL_UART_IRQHandler+0x5a2>
    return;
 80051e8:	46c0      	nop			; (mov r8, r8)
 80051ea:	e004      	b.n	80051f6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80051ec:	46c0      	nop			; (mov r8, r8)
 80051ee:	e002      	b.n	80051f6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80051f0:	46c0      	nop			; (mov r8, r8)
 80051f2:	e000      	b.n	80051f6 <HAL_UART_IRQHandler+0x5a2>
    return;
 80051f4:	46c0      	nop			; (mov r8, r8)
  }

}
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b02b      	add	sp, #172	; 0xac
 80051fa:	bd90      	pop	{r4, r7, pc}
 80051fc:	fffffeff 	.word	0xfffffeff
 8005200:	fffffedf 	.word	0xfffffedf

08005204 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800520c:	46c0      	nop			; (mov r8, r8)
 800520e:	46bd      	mov	sp, r7
 8005210:	b002      	add	sp, #8
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800521c:	46c0      	nop			; (mov r8, r8)
 800521e:	46bd      	mov	sp, r7
 8005220:	b002      	add	sp, #8
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	000a      	movs	r2, r1
 800522e:	1cbb      	adds	r3, r7, #2
 8005230:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	46bd      	mov	sp, r7
 8005236:	b002      	add	sp, #8
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005244:	231e      	movs	r3, #30
 8005246:	18fb      	adds	r3, r7, r3
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a8d      	ldr	r2, [pc, #564]	; (80054a0 <UART_SetConfig+0x264>)
 800526c:	4013      	ands	r3, r2
 800526e:	0019      	movs	r1, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	430a      	orrs	r2, r1
 8005278:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	4a88      	ldr	r2, [pc, #544]	; (80054a4 <UART_SetConfig+0x268>)
 8005282:	4013      	ands	r3, r2
 8005284:	0019      	movs	r1, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	4a7f      	ldr	r2, [pc, #508]	; (80054a8 <UART_SetConfig+0x26c>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	0019      	movs	r1, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a7b      	ldr	r2, [pc, #492]	; (80054ac <UART_SetConfig+0x270>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d127      	bne.n	8005312 <UART_SetConfig+0xd6>
 80052c2:	4b7b      	ldr	r3, [pc, #492]	; (80054b0 <UART_SetConfig+0x274>)
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	2203      	movs	r2, #3
 80052c8:	4013      	ands	r3, r2
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d00d      	beq.n	80052ea <UART_SetConfig+0xae>
 80052ce:	d81b      	bhi.n	8005308 <UART_SetConfig+0xcc>
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d014      	beq.n	80052fe <UART_SetConfig+0xc2>
 80052d4:	d818      	bhi.n	8005308 <UART_SetConfig+0xcc>
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <UART_SetConfig+0xa4>
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d00a      	beq.n	80052f4 <UART_SetConfig+0xb8>
 80052de:	e013      	b.n	8005308 <UART_SetConfig+0xcc>
 80052e0:	231f      	movs	r3, #31
 80052e2:	18fb      	adds	r3, r7, r3
 80052e4:	2200      	movs	r2, #0
 80052e6:	701a      	strb	r2, [r3, #0]
 80052e8:	e021      	b.n	800532e <UART_SetConfig+0xf2>
 80052ea:	231f      	movs	r3, #31
 80052ec:	18fb      	adds	r3, r7, r3
 80052ee:	2202      	movs	r2, #2
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e01c      	b.n	800532e <UART_SetConfig+0xf2>
 80052f4:	231f      	movs	r3, #31
 80052f6:	18fb      	adds	r3, r7, r3
 80052f8:	2204      	movs	r2, #4
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	e017      	b.n	800532e <UART_SetConfig+0xf2>
 80052fe:	231f      	movs	r3, #31
 8005300:	18fb      	adds	r3, r7, r3
 8005302:	2208      	movs	r2, #8
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e012      	b.n	800532e <UART_SetConfig+0xf2>
 8005308:	231f      	movs	r3, #31
 800530a:	18fb      	adds	r3, r7, r3
 800530c:	2210      	movs	r2, #16
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	e00d      	b.n	800532e <UART_SetConfig+0xf2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a67      	ldr	r2, [pc, #412]	; (80054b4 <UART_SetConfig+0x278>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d104      	bne.n	8005326 <UART_SetConfig+0xea>
 800531c:	231f      	movs	r3, #31
 800531e:	18fb      	adds	r3, r7, r3
 8005320:	2200      	movs	r2, #0
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	e003      	b.n	800532e <UART_SetConfig+0xf2>
 8005326:	231f      	movs	r3, #31
 8005328:	18fb      	adds	r3, r7, r3
 800532a:	2210      	movs	r2, #16
 800532c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69da      	ldr	r2, [r3, #28]
 8005332:	2380      	movs	r3, #128	; 0x80
 8005334:	021b      	lsls	r3, r3, #8
 8005336:	429a      	cmp	r2, r3
 8005338:	d15d      	bne.n	80053f6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800533a:	231f      	movs	r3, #31
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b08      	cmp	r3, #8
 8005342:	d015      	beq.n	8005370 <UART_SetConfig+0x134>
 8005344:	dc18      	bgt.n	8005378 <UART_SetConfig+0x13c>
 8005346:	2b04      	cmp	r3, #4
 8005348:	d00d      	beq.n	8005366 <UART_SetConfig+0x12a>
 800534a:	dc15      	bgt.n	8005378 <UART_SetConfig+0x13c>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <UART_SetConfig+0x11a>
 8005350:	2b02      	cmp	r3, #2
 8005352:	d005      	beq.n	8005360 <UART_SetConfig+0x124>
 8005354:	e010      	b.n	8005378 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005356:	f7ff fa2b 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
 800535a:	0003      	movs	r3, r0
 800535c:	61bb      	str	r3, [r7, #24]
        break;
 800535e:	e012      	b.n	8005386 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005360:	4b55      	ldr	r3, [pc, #340]	; (80054b8 <UART_SetConfig+0x27c>)
 8005362:	61bb      	str	r3, [r7, #24]
        break;
 8005364:	e00f      	b.n	8005386 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005366:	f7ff f9b5 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 800536a:	0003      	movs	r3, r0
 800536c:	61bb      	str	r3, [r7, #24]
        break;
 800536e:	e00a      	b.n	8005386 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005370:	2380      	movs	r3, #128	; 0x80
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	61bb      	str	r3, [r7, #24]
        break;
 8005376:	e006      	b.n	8005386 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800537c:	231e      	movs	r3, #30
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	2201      	movs	r2, #1
 8005382:	701a      	strb	r2, [r3, #0]
        break;
 8005384:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d100      	bne.n	800538e <UART_SetConfig+0x152>
 800538c:	e07b      	b.n	8005486 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	005a      	lsls	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	085b      	lsrs	r3, r3, #1
 8005398:	18d2      	adds	r2, r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	0019      	movs	r1, r3
 80053a0:	0010      	movs	r0, r2
 80053a2:	f7fa fecd 	bl	8000140 <__udivsi3>
 80053a6:	0003      	movs	r3, r0
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2b0f      	cmp	r3, #15
 80053b0:	d91c      	bls.n	80053ec <UART_SetConfig+0x1b0>
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	2380      	movs	r3, #128	; 0x80
 80053b6:	025b      	lsls	r3, r3, #9
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d217      	bcs.n	80053ec <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	b29a      	uxth	r2, r3
 80053c0:	200e      	movs	r0, #14
 80053c2:	183b      	adds	r3, r7, r0
 80053c4:	210f      	movs	r1, #15
 80053c6:	438a      	bics	r2, r1
 80053c8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	085b      	lsrs	r3, r3, #1
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2207      	movs	r2, #7
 80053d2:	4013      	ands	r3, r2
 80053d4:	b299      	uxth	r1, r3
 80053d6:	183b      	adds	r3, r7, r0
 80053d8:	183a      	adds	r2, r7, r0
 80053da:	8812      	ldrh	r2, [r2, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	183a      	adds	r2, r7, r0
 80053e6:	8812      	ldrh	r2, [r2, #0]
 80053e8:	60da      	str	r2, [r3, #12]
 80053ea:	e04c      	b.n	8005486 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80053ec:	231e      	movs	r3, #30
 80053ee:	18fb      	adds	r3, r7, r3
 80053f0:	2201      	movs	r2, #1
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	e047      	b.n	8005486 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053f6:	231f      	movs	r3, #31
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d015      	beq.n	800542c <UART_SetConfig+0x1f0>
 8005400:	dc18      	bgt.n	8005434 <UART_SetConfig+0x1f8>
 8005402:	2b04      	cmp	r3, #4
 8005404:	d00d      	beq.n	8005422 <UART_SetConfig+0x1e6>
 8005406:	dc15      	bgt.n	8005434 <UART_SetConfig+0x1f8>
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <UART_SetConfig+0x1d6>
 800540c:	2b02      	cmp	r3, #2
 800540e:	d005      	beq.n	800541c <UART_SetConfig+0x1e0>
 8005410:	e010      	b.n	8005434 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005412:	f7ff f9cd 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
 8005416:	0003      	movs	r3, r0
 8005418:	61bb      	str	r3, [r7, #24]
        break;
 800541a:	e012      	b.n	8005442 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800541c:	4b26      	ldr	r3, [pc, #152]	; (80054b8 <UART_SetConfig+0x27c>)
 800541e:	61bb      	str	r3, [r7, #24]
        break;
 8005420:	e00f      	b.n	8005442 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005422:	f7ff f957 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 8005426:	0003      	movs	r3, r0
 8005428:	61bb      	str	r3, [r7, #24]
        break;
 800542a:	e00a      	b.n	8005442 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	021b      	lsls	r3, r3, #8
 8005430:	61bb      	str	r3, [r7, #24]
        break;
 8005432:	e006      	b.n	8005442 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005438:	231e      	movs	r3, #30
 800543a:	18fb      	adds	r3, r7, r3
 800543c:	2201      	movs	r2, #1
 800543e:	701a      	strb	r2, [r3, #0]
        break;
 8005440:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01e      	beq.n	8005486 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	085a      	lsrs	r2, r3, #1
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	18d2      	adds	r2, r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	0019      	movs	r1, r3
 8005458:	0010      	movs	r0, r2
 800545a:	f7fa fe71 	bl	8000140 <__udivsi3>
 800545e:	0003      	movs	r3, r0
 8005460:	b29b      	uxth	r3, r3
 8005462:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	2b0f      	cmp	r3, #15
 8005468:	d909      	bls.n	800547e <UART_SetConfig+0x242>
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	025b      	lsls	r3, r3, #9
 8005470:	429a      	cmp	r2, r3
 8005472:	d204      	bcs.n	800547e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	60da      	str	r2, [r3, #12]
 800547c:	e003      	b.n	8005486 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800547e:	231e      	movs	r3, #30
 8005480:	18fb      	adds	r3, r7, r3
 8005482:	2201      	movs	r2, #1
 8005484:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005492:	231e      	movs	r3, #30
 8005494:	18fb      	adds	r3, r7, r3
 8005496:	781b      	ldrb	r3, [r3, #0]
}
 8005498:	0018      	movs	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	b008      	add	sp, #32
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	ffff69f3 	.word	0xffff69f3
 80054a4:	ffffcfff 	.word	0xffffcfff
 80054a8:	fffff4ff 	.word	0xfffff4ff
 80054ac:	40013800 	.word	0x40013800
 80054b0:	40021000 	.word	0x40021000
 80054b4:	40004400 	.word	0x40004400
 80054b8:	007a1200 	.word	0x007a1200

080054bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2201      	movs	r2, #1
 80054ca:	4013      	ands	r3, r2
 80054cc:	d00b      	beq.n	80054e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	4a4a      	ldr	r2, [pc, #296]	; (8005600 <UART_AdvFeatureConfig+0x144>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	0019      	movs	r1, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	2202      	movs	r2, #2
 80054ec:	4013      	ands	r3, r2
 80054ee:	d00b      	beq.n	8005508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	4a43      	ldr	r2, [pc, #268]	; (8005604 <UART_AdvFeatureConfig+0x148>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	0019      	movs	r1, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	2204      	movs	r2, #4
 800550e:	4013      	ands	r3, r2
 8005510:	d00b      	beq.n	800552a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	4a3b      	ldr	r2, [pc, #236]	; (8005608 <UART_AdvFeatureConfig+0x14c>)
 800551a:	4013      	ands	r3, r2
 800551c:	0019      	movs	r1, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	2208      	movs	r2, #8
 8005530:	4013      	ands	r3, r2
 8005532:	d00b      	beq.n	800554c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	4a34      	ldr	r2, [pc, #208]	; (800560c <UART_AdvFeatureConfig+0x150>)
 800553c:	4013      	ands	r3, r2
 800553e:	0019      	movs	r1, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	2210      	movs	r2, #16
 8005552:	4013      	ands	r3, r2
 8005554:	d00b      	beq.n	800556e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	4a2c      	ldr	r2, [pc, #176]	; (8005610 <UART_AdvFeatureConfig+0x154>)
 800555e:	4013      	ands	r3, r2
 8005560:	0019      	movs	r1, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	2220      	movs	r2, #32
 8005574:	4013      	ands	r3, r2
 8005576:	d00b      	beq.n	8005590 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	4a25      	ldr	r2, [pc, #148]	; (8005614 <UART_AdvFeatureConfig+0x158>)
 8005580:	4013      	ands	r3, r2
 8005582:	0019      	movs	r1, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	2240      	movs	r2, #64	; 0x40
 8005596:	4013      	ands	r3, r2
 8005598:	d01d      	beq.n	80055d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	4a1d      	ldr	r2, [pc, #116]	; (8005618 <UART_AdvFeatureConfig+0x15c>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	0019      	movs	r1, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055b6:	2380      	movs	r3, #128	; 0x80
 80055b8:	035b      	lsls	r3, r3, #13
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d10b      	bne.n	80055d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	4a15      	ldr	r2, [pc, #84]	; (800561c <UART_AdvFeatureConfig+0x160>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	0019      	movs	r1, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	2280      	movs	r2, #128	; 0x80
 80055dc:	4013      	ands	r3, r2
 80055de:	d00b      	beq.n	80055f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	4a0e      	ldr	r2, [pc, #56]	; (8005620 <UART_AdvFeatureConfig+0x164>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	0019      	movs	r1, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	605a      	str	r2, [r3, #4]
  }
}
 80055f8:	46c0      	nop			; (mov r8, r8)
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b002      	add	sp, #8
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	fffdffff 	.word	0xfffdffff
 8005604:	fffeffff 	.word	0xfffeffff
 8005608:	fffbffff 	.word	0xfffbffff
 800560c:	ffff7fff 	.word	0xffff7fff
 8005610:	ffffefff 	.word	0xffffefff
 8005614:	ffffdfff 	.word	0xffffdfff
 8005618:	ffefffff 	.word	0xffefffff
 800561c:	ff9fffff 	.word	0xff9fffff
 8005620:	fff7ffff 	.word	0xfff7ffff

08005624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af02      	add	r7, sp, #8
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2280      	movs	r2, #128	; 0x80
 8005630:	2100      	movs	r1, #0
 8005632:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005634:	f7fd fbb2 	bl	8002d9c <HAL_GetTick>
 8005638:	0003      	movs	r3, r0
 800563a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2208      	movs	r2, #8
 8005644:	4013      	ands	r3, r2
 8005646:	2b08      	cmp	r3, #8
 8005648:	d10c      	bne.n	8005664 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2280      	movs	r2, #128	; 0x80
 800564e:	0391      	lsls	r1, r2, #14
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	4a17      	ldr	r2, [pc, #92]	; (80056b0 <UART_CheckIdleState+0x8c>)
 8005654:	9200      	str	r2, [sp, #0]
 8005656:	2200      	movs	r2, #0
 8005658:	f000 f82c 	bl	80056b4 <UART_WaitOnFlagUntilTimeout>
 800565c:	1e03      	subs	r3, r0, #0
 800565e:	d001      	beq.n	8005664 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e021      	b.n	80056a8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2204      	movs	r2, #4
 800566c:	4013      	ands	r3, r2
 800566e:	2b04      	cmp	r3, #4
 8005670:	d10c      	bne.n	800568c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2280      	movs	r2, #128	; 0x80
 8005676:	03d1      	lsls	r1, r2, #15
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4a0d      	ldr	r2, [pc, #52]	; (80056b0 <UART_CheckIdleState+0x8c>)
 800567c:	9200      	str	r2, [sp, #0]
 800567e:	2200      	movs	r2, #0
 8005680:	f000 f818 	bl	80056b4 <UART_WaitOnFlagUntilTimeout>
 8005684:	1e03      	subs	r3, r0, #0
 8005686:	d001      	beq.n	800568c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e00d      	b.n	80056a8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2274      	movs	r2, #116	; 0x74
 80056a2:	2100      	movs	r1, #0
 80056a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	0018      	movs	r0, r3
 80056aa:	46bd      	mov	sp, r7
 80056ac:	b004      	add	sp, #16
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	01ffffff 	.word	0x01ffffff

080056b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b094      	sub	sp, #80	; 0x50
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	1dfb      	adds	r3, r7, #7
 80056c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c4:	e0a3      	b.n	800580e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056c8:	3301      	adds	r3, #1
 80056ca:	d100      	bne.n	80056ce <UART_WaitOnFlagUntilTimeout+0x1a>
 80056cc:	e09f      	b.n	800580e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ce:	f7fd fb65 	bl	8002d9c <HAL_GetTick>
 80056d2:	0002      	movs	r2, r0
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056da:	429a      	cmp	r2, r3
 80056dc:	d302      	bcc.n	80056e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80056de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d13d      	bne.n	8005760 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e4:	f3ef 8310 	mrs	r3, PRIMASK
 80056e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ec:	647b      	str	r3, [r7, #68]	; 0x44
 80056ee:	2301      	movs	r3, #1
 80056f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f4:	f383 8810 	msr	PRIMASK, r3
}
 80056f8:	46c0      	nop			; (mov r8, r8)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	494c      	ldr	r1, [pc, #304]	; (8005838 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005706:	400a      	ands	r2, r1
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	f383 8810 	msr	PRIMASK, r3
}
 8005714:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005716:	f3ef 8310 	mrs	r3, PRIMASK
 800571a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800571c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571e:	643b      	str	r3, [r7, #64]	; 0x40
 8005720:	2301      	movs	r3, #1
 8005722:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005726:	f383 8810 	msr	PRIMASK, r3
}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2101      	movs	r1, #1
 8005738:	438a      	bics	r2, r1
 800573a:	609a      	str	r2, [r3, #8]
 800573c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005742:	f383 8810 	msr	PRIMASK, r3
}
 8005746:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2220      	movs	r2, #32
 8005752:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2274      	movs	r2, #116	; 0x74
 8005758:	2100      	movs	r1, #0
 800575a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e067      	b.n	8005830 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2204      	movs	r2, #4
 8005768:	4013      	ands	r3, r2
 800576a:	d050      	beq.n	800580e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	69da      	ldr	r2, [r3, #28]
 8005772:	2380      	movs	r3, #128	; 0x80
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	401a      	ands	r2, r3
 8005778:	2380      	movs	r3, #128	; 0x80
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	429a      	cmp	r2, r3
 800577e:	d146      	bne.n	800580e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2280      	movs	r2, #128	; 0x80
 8005786:	0112      	lsls	r2, r2, #4
 8005788:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800578a:	f3ef 8310 	mrs	r3, PRIMASK
 800578e:	613b      	str	r3, [r7, #16]
  return(result);
 8005790:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005794:	2301      	movs	r3, #1
 8005796:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f383 8810 	msr	PRIMASK, r3
}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4923      	ldr	r1, [pc, #140]	; (8005838 <UART_WaitOnFlagUntilTimeout+0x184>)
 80057ac:	400a      	ands	r2, r1
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f383 8810 	msr	PRIMASK, r3
}
 80057ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057bc:	f3ef 8310 	mrs	r3, PRIMASK
 80057c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80057c2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80057c6:	2301      	movs	r3, #1
 80057c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	f383 8810 	msr	PRIMASK, r3
}
 80057d0:	46c0      	nop			; (mov r8, r8)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2101      	movs	r1, #1
 80057de:	438a      	bics	r2, r1
 80057e0:	609a      	str	r2, [r3, #8]
 80057e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	f383 8810 	msr	PRIMASK, r3
}
 80057ec:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2220      	movs	r2, #32
 80057f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2280      	movs	r2, #128	; 0x80
 80057fe:	2120      	movs	r1, #32
 8005800:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2274      	movs	r2, #116	; 0x74
 8005806:	2100      	movs	r1, #0
 8005808:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e010      	b.n	8005830 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	4013      	ands	r3, r2
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	425a      	negs	r2, r3
 800581e:	4153      	adcs	r3, r2
 8005820:	b2db      	uxtb	r3, r3
 8005822:	001a      	movs	r2, r3
 8005824:	1dfb      	adds	r3, r7, #7
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d100      	bne.n	800582e <UART_WaitOnFlagUntilTimeout+0x17a>
 800582c:	e74b      	b.n	80056c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	0018      	movs	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	b014      	add	sp, #80	; 0x50
 8005836:	bd80      	pop	{r7, pc}
 8005838:	fffffe5f 	.word	0xfffffe5f

0800583c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08c      	sub	sp, #48	; 0x30
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	1dbb      	adds	r3, r7, #6
 8005848:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	1dba      	adds	r2, r7, #6
 8005854:	2158      	movs	r1, #88	; 0x58
 8005856:	8812      	ldrh	r2, [r2, #0]
 8005858:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	1dba      	adds	r2, r7, #6
 800585e:	215a      	movs	r1, #90	; 0x5a
 8005860:	8812      	ldrh	r2, [r2, #0]
 8005862:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	689a      	ldr	r2, [r3, #8]
 800586e:	2380      	movs	r3, #128	; 0x80
 8005870:	015b      	lsls	r3, r3, #5
 8005872:	429a      	cmp	r2, r3
 8005874:	d10d      	bne.n	8005892 <UART_Start_Receive_IT+0x56>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d104      	bne.n	8005888 <UART_Start_Receive_IT+0x4c>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	225c      	movs	r2, #92	; 0x5c
 8005882:	4939      	ldr	r1, [pc, #228]	; (8005968 <UART_Start_Receive_IT+0x12c>)
 8005884:	5299      	strh	r1, [r3, r2]
 8005886:	e01a      	b.n	80058be <UART_Start_Receive_IT+0x82>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	225c      	movs	r2, #92	; 0x5c
 800588c:	21ff      	movs	r1, #255	; 0xff
 800588e:	5299      	strh	r1, [r3, r2]
 8005890:	e015      	b.n	80058be <UART_Start_Receive_IT+0x82>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10d      	bne.n	80058b6 <UART_Start_Receive_IT+0x7a>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d104      	bne.n	80058ac <UART_Start_Receive_IT+0x70>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	225c      	movs	r2, #92	; 0x5c
 80058a6:	21ff      	movs	r1, #255	; 0xff
 80058a8:	5299      	strh	r1, [r3, r2]
 80058aa:	e008      	b.n	80058be <UART_Start_Receive_IT+0x82>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	225c      	movs	r2, #92	; 0x5c
 80058b0:	217f      	movs	r1, #127	; 0x7f
 80058b2:	5299      	strh	r1, [r3, r2]
 80058b4:	e003      	b.n	80058be <UART_Start_Receive_IT+0x82>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	225c      	movs	r2, #92	; 0x5c
 80058ba:	2100      	movs	r1, #0
 80058bc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2280      	movs	r2, #128	; 0x80
 80058c2:	2100      	movs	r1, #0
 80058c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2222      	movs	r2, #34	; 0x22
 80058ca:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058cc:	f3ef 8310 	mrs	r3, PRIMASK
 80058d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80058d2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058d6:	2301      	movs	r3, #1
 80058d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	f383 8810 	msr	PRIMASK, r3
}
 80058e0:	46c0      	nop			; (mov r8, r8)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2101      	movs	r1, #1
 80058ee:	430a      	orrs	r2, r1
 80058f0:	609a      	str	r2, [r3, #8]
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	f383 8810 	msr	PRIMASK, r3
}
 80058fc:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	2380      	movs	r3, #128	; 0x80
 8005904:	015b      	lsls	r3, r3, #5
 8005906:	429a      	cmp	r2, r3
 8005908:	d107      	bne.n	800591a <UART_Start_Receive_IT+0xde>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4a15      	ldr	r2, [pc, #84]	; (800596c <UART_Start_Receive_IT+0x130>)
 8005916:	665a      	str	r2, [r3, #100]	; 0x64
 8005918:	e002      	b.n	8005920 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4a14      	ldr	r2, [pc, #80]	; (8005970 <UART_Start_Receive_IT+0x134>)
 800591e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2274      	movs	r2, #116	; 0x74
 8005924:	2100      	movs	r1, #0
 8005926:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005928:	f3ef 8310 	mrs	r3, PRIMASK
 800592c:	613b      	str	r3, [r7, #16]
  return(result);
 800592e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005930:	62bb      	str	r3, [r7, #40]	; 0x28
 8005932:	2301      	movs	r3, #1
 8005934:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f383 8810 	msr	PRIMASK, r3
}
 800593c:	46c0      	nop			; (mov r8, r8)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2190      	movs	r1, #144	; 0x90
 800594a:	0049      	lsls	r1, r1, #1
 800594c:	430a      	orrs	r2, r1
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005952:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f383 8810 	msr	PRIMASK, r3
}
 800595a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b00c      	add	sp, #48	; 0x30
 8005964:	bd80      	pop	{r7, pc}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	000001ff 	.word	0x000001ff
 800596c:	08005c25 	.word	0x08005c25
 8005970:	08005abd 	.word	0x08005abd

08005974 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08e      	sub	sp, #56	; 0x38
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800597c:	f3ef 8310 	mrs	r3, PRIMASK
 8005980:	617b      	str	r3, [r7, #20]
  return(result);
 8005982:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
 8005986:	2301      	movs	r3, #1
 8005988:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	f383 8810 	msr	PRIMASK, r3
}
 8005990:	46c0      	nop			; (mov r8, r8)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4925      	ldr	r1, [pc, #148]	; (8005a34 <UART_EndRxTransfer+0xc0>)
 800599e:	400a      	ands	r2, r1
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	f383 8810 	msr	PRIMASK, r3
}
 80059ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ae:	f3ef 8310 	mrs	r3, PRIMASK
 80059b2:	623b      	str	r3, [r7, #32]
  return(result);
 80059b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b6:	633b      	str	r3, [r7, #48]	; 0x30
 80059b8:	2301      	movs	r3, #1
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	f383 8810 	msr	PRIMASK, r3
}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2101      	movs	r1, #1
 80059d0:	438a      	bics	r2, r1
 80059d2:	609a      	str	r2, [r3, #8]
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	f383 8810 	msr	PRIMASK, r3
}
 80059de:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d118      	bne.n	8005a1a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e8:	f3ef 8310 	mrs	r3, PRIMASK
 80059ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80059ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f2:	2301      	movs	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f383 8810 	msr	PRIMASK, r3
}
 80059fc:	46c0      	nop			; (mov r8, r8)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2110      	movs	r1, #16
 8005a0a:	438a      	bics	r2, r1
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f383 8810 	msr	PRIMASK, r3
}
 8005a18:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005a2c:	46c0      	nop			; (mov r8, r8)
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b00e      	add	sp, #56	; 0x38
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	fffffedf 	.word	0xfffffedf

08005a38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	225a      	movs	r2, #90	; 0x5a
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2252      	movs	r2, #82	; 0x52
 8005a52:	2100      	movs	r1, #0
 8005a54:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f7ff fbdb 	bl	8005214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	46bd      	mov	sp, r7
 8005a62:	b004      	add	sp, #16
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b086      	sub	sp, #24
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a72:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a74:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	2301      	movs	r3, #1
 8005a7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f383 8810 	msr	PRIMASK, r3
}
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2140      	movs	r1, #64	; 0x40
 8005a90:	438a      	bics	r2, r1
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f383 8810 	msr	PRIMASK, r3
}
 8005a9e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	0018      	movs	r0, r3
 8005ab0:	f7ff fba8 	bl	8005204 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ab4:	46c0      	nop			; (mov r8, r8)
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b006      	add	sp, #24
 8005aba:	bd80      	pop	{r7, pc}

08005abc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b090      	sub	sp, #64	; 0x40
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ac4:	203e      	movs	r0, #62	; 0x3e
 8005ac6:	183b      	adds	r3, r7, r0
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	215c      	movs	r1, #92	; 0x5c
 8005acc:	5a52      	ldrh	r2, [r2, r1]
 8005ace:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ad4:	2b22      	cmp	r3, #34	; 0x22
 8005ad6:	d000      	beq.n	8005ada <UART_RxISR_8BIT+0x1e>
 8005ad8:	e095      	b.n	8005c06 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	213c      	movs	r1, #60	; 0x3c
 8005ae0:	187b      	adds	r3, r7, r1
 8005ae2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005ae4:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ae6:	187b      	adds	r3, r7, r1
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	183b      	adds	r3, r7, r0
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b2d9      	uxtb	r1, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af6:	400a      	ands	r2, r1
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	225a      	movs	r2, #90	; 0x5a
 8005b0a:	5a9b      	ldrh	r3, [r3, r2]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b299      	uxth	r1, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	225a      	movs	r2, #90	; 0x5a
 8005b16:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	225a      	movs	r2, #90	; 0x5a
 8005b1c:	5a9b      	ldrh	r3, [r3, r2]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d178      	bne.n	8005c16 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b24:	f3ef 8310 	mrs	r3, PRIMASK
 8005b28:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b2a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b2e:	2301      	movs	r3, #1
 8005b30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	f383 8810 	msr	PRIMASK, r3
}
 8005b38:	46c0      	nop			; (mov r8, r8)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4936      	ldr	r1, [pc, #216]	; (8005c20 <UART_RxISR_8BIT+0x164>)
 8005b46:	400a      	ands	r2, r1
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	f383 8810 	msr	PRIMASK, r3
}
 8005b54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b56:	f3ef 8310 	mrs	r3, PRIMASK
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b60:	2301      	movs	r3, #1
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b66:	f383 8810 	msr	PRIMASK, r3
}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2101      	movs	r1, #1
 8005b78:	438a      	bics	r2, r1
 8005b7a:	609a      	str	r2, [r3, #8]
 8005b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	f383 8810 	msr	PRIMASK, r3
}
 8005b86:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d12f      	bne.n	8005bfc <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba6:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ba8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005baa:	633b      	str	r3, [r7, #48]	; 0x30
 8005bac:	2301      	movs	r3, #1
 8005bae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f383 8810 	msr	PRIMASK, r3
}
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2110      	movs	r1, #16
 8005bc4:	438a      	bics	r2, r1
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f383 8810 	msr	PRIMASK, r3
}
 8005bd2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	2210      	movs	r2, #16
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b10      	cmp	r3, #16
 8005be0:	d103      	bne.n	8005bea <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2210      	movs	r2, #16
 8005be8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2258      	movs	r2, #88	; 0x58
 8005bee:	5a9a      	ldrh	r2, [r3, r2]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	0011      	movs	r1, r2
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f7ff fb15 	bl	8005224 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bfa:	e00c      	b.n	8005c16 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f7fc fb96 	bl	8002330 <HAL_UART_RxCpltCallback>
}
 8005c04:	e007      	b.n	8005c16 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	699a      	ldr	r2, [r3, #24]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2108      	movs	r1, #8
 8005c12:	430a      	orrs	r2, r1
 8005c14:	619a      	str	r2, [r3, #24]
}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	b010      	add	sp, #64	; 0x40
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	46c0      	nop			; (mov r8, r8)
 8005c20:	fffffedf 	.word	0xfffffedf

08005c24 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b090      	sub	sp, #64	; 0x40
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c2c:	203e      	movs	r0, #62	; 0x3e
 8005c2e:	183b      	adds	r3, r7, r0
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	215c      	movs	r1, #92	; 0x5c
 8005c34:	5a52      	ldrh	r2, [r2, r1]
 8005c36:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c3c:	2b22      	cmp	r3, #34	; 0x22
 8005c3e:	d000      	beq.n	8005c42 <UART_RxISR_16BIT+0x1e>
 8005c40:	e095      	b.n	8005d6e <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	213c      	movs	r1, #60	; 0x3c
 8005c48:	187b      	adds	r3, r7, r1
 8005c4a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005c4c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c54:	187b      	adds	r3, r7, r1
 8005c56:	183a      	adds	r2, r7, r0
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	8812      	ldrh	r2, [r2, #0]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c68:	1c9a      	adds	r2, r3, #2
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	225a      	movs	r2, #90	; 0x5a
 8005c72:	5a9b      	ldrh	r3, [r3, r2]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b299      	uxth	r1, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	225a      	movs	r2, #90	; 0x5a
 8005c7e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	225a      	movs	r2, #90	; 0x5a
 8005c84:	5a9b      	ldrh	r3, [r3, r2]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d178      	bne.n	8005d7e <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c90:	617b      	str	r3, [r7, #20]
  return(result);
 8005c92:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c94:	637b      	str	r3, [r7, #52]	; 0x34
 8005c96:	2301      	movs	r3, #1
 8005c98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	f383 8810 	msr	PRIMASK, r3
}
 8005ca0:	46c0      	nop			; (mov r8, r8)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4936      	ldr	r1, [pc, #216]	; (8005d88 <UART_RxISR_16BIT+0x164>)
 8005cae:	400a      	ands	r2, r1
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	f383 8810 	msr	PRIMASK, r3
}
 8005cbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc2:	623b      	str	r3, [r7, #32]
  return(result);
 8005cc4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005cc8:	2301      	movs	r3, #1
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	f383 8810 	msr	PRIMASK, r3
}
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2101      	movs	r1, #1
 8005ce0:	438a      	bics	r2, r1
 8005ce2:	609a      	str	r2, [r3, #8]
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	f383 8810 	msr	PRIMASK, r3
}
 8005cee:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d12f      	bne.n	8005d64 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d10:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d14:	2301      	movs	r3, #1
 8005d16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f383 8810 	msr	PRIMASK, r3
}
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2110      	movs	r1, #16
 8005d2c:	438a      	bics	r2, r1
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f383 8810 	msr	PRIMASK, r3
}
 8005d3a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	2210      	movs	r2, #16
 8005d44:	4013      	ands	r3, r2
 8005d46:	2b10      	cmp	r3, #16
 8005d48:	d103      	bne.n	8005d52 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2210      	movs	r2, #16
 8005d50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2258      	movs	r2, #88	; 0x58
 8005d56:	5a9a      	ldrh	r2, [r3, r2]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	0011      	movs	r1, r2
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f7ff fa61 	bl	8005224 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d62:	e00c      	b.n	8005d7e <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	0018      	movs	r0, r3
 8005d68:	f7fc fae2 	bl	8002330 <HAL_UART_RxCpltCallback>
}
 8005d6c:	e007      	b.n	8005d7e <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	699a      	ldr	r2, [r3, #24]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2108      	movs	r1, #8
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	619a      	str	r2, [r3, #24]
}
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	46bd      	mov	sp, r7
 8005d82:	b010      	add	sp, #64	; 0x40
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	fffffedf 	.word	0xfffffedf

08005d8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d94:	46c0      	nop			; (mov r8, r8)
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b002      	add	sp, #8
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <__errno>:
 8005d9c:	4b01      	ldr	r3, [pc, #4]	; (8005da4 <__errno+0x8>)
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	4770      	bx	lr
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	2000000c 	.word	0x2000000c

08005da8 <__libc_init_array>:
 8005da8:	b570      	push	{r4, r5, r6, lr}
 8005daa:	2600      	movs	r6, #0
 8005dac:	4d0c      	ldr	r5, [pc, #48]	; (8005de0 <__libc_init_array+0x38>)
 8005dae:	4c0d      	ldr	r4, [pc, #52]	; (8005de4 <__libc_init_array+0x3c>)
 8005db0:	1b64      	subs	r4, r4, r5
 8005db2:	10a4      	asrs	r4, r4, #2
 8005db4:	42a6      	cmp	r6, r4
 8005db6:	d109      	bne.n	8005dcc <__libc_init_array+0x24>
 8005db8:	2600      	movs	r6, #0
 8005dba:	f004 fd47 	bl	800a84c <_init>
 8005dbe:	4d0a      	ldr	r5, [pc, #40]	; (8005de8 <__libc_init_array+0x40>)
 8005dc0:	4c0a      	ldr	r4, [pc, #40]	; (8005dec <__libc_init_array+0x44>)
 8005dc2:	1b64      	subs	r4, r4, r5
 8005dc4:	10a4      	asrs	r4, r4, #2
 8005dc6:	42a6      	cmp	r6, r4
 8005dc8:	d105      	bne.n	8005dd6 <__libc_init_array+0x2e>
 8005dca:	bd70      	pop	{r4, r5, r6, pc}
 8005dcc:	00b3      	lsls	r3, r6, #2
 8005dce:	58eb      	ldr	r3, [r5, r3]
 8005dd0:	4798      	blx	r3
 8005dd2:	3601      	adds	r6, #1
 8005dd4:	e7ee      	b.n	8005db4 <__libc_init_array+0xc>
 8005dd6:	00b3      	lsls	r3, r6, #2
 8005dd8:	58eb      	ldr	r3, [r5, r3]
 8005dda:	4798      	blx	r3
 8005ddc:	3601      	adds	r6, #1
 8005dde:	e7f2      	b.n	8005dc6 <__libc_init_array+0x1e>
 8005de0:	0800ae1c 	.word	0x0800ae1c
 8005de4:	0800ae1c 	.word	0x0800ae1c
 8005de8:	0800ae1c 	.word	0x0800ae1c
 8005dec:	0800ae20 	.word	0x0800ae20

08005df0 <memset>:
 8005df0:	0003      	movs	r3, r0
 8005df2:	1882      	adds	r2, r0, r2
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d100      	bne.n	8005dfa <memset+0xa>
 8005df8:	4770      	bx	lr
 8005dfa:	7019      	strb	r1, [r3, #0]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	e7f9      	b.n	8005df4 <memset+0x4>

08005e00 <__cvt>:
 8005e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e02:	001e      	movs	r6, r3
 8005e04:	2300      	movs	r3, #0
 8005e06:	0014      	movs	r4, r2
 8005e08:	b08b      	sub	sp, #44	; 0x2c
 8005e0a:	429e      	cmp	r6, r3
 8005e0c:	da04      	bge.n	8005e18 <__cvt+0x18>
 8005e0e:	2180      	movs	r1, #128	; 0x80
 8005e10:	0609      	lsls	r1, r1, #24
 8005e12:	1873      	adds	r3, r6, r1
 8005e14:	001e      	movs	r6, r3
 8005e16:	232d      	movs	r3, #45	; 0x2d
 8005e18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e1a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005e1c:	7013      	strb	r3, [r2, #0]
 8005e1e:	2320      	movs	r3, #32
 8005e20:	2203      	movs	r2, #3
 8005e22:	439f      	bics	r7, r3
 8005e24:	2f46      	cmp	r7, #70	; 0x46
 8005e26:	d007      	beq.n	8005e38 <__cvt+0x38>
 8005e28:	003b      	movs	r3, r7
 8005e2a:	3b45      	subs	r3, #69	; 0x45
 8005e2c:	4259      	negs	r1, r3
 8005e2e:	414b      	adcs	r3, r1
 8005e30:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005e32:	3a01      	subs	r2, #1
 8005e34:	18cb      	adds	r3, r1, r3
 8005e36:	9310      	str	r3, [sp, #64]	; 0x40
 8005e38:	ab09      	add	r3, sp, #36	; 0x24
 8005e3a:	9304      	str	r3, [sp, #16]
 8005e3c:	ab08      	add	r3, sp, #32
 8005e3e:	9303      	str	r3, [sp, #12]
 8005e40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e42:	9200      	str	r2, [sp, #0]
 8005e44:	9302      	str	r3, [sp, #8]
 8005e46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e48:	0022      	movs	r2, r4
 8005e4a:	9301      	str	r3, [sp, #4]
 8005e4c:	0033      	movs	r3, r6
 8005e4e:	f001 fdc3 	bl	80079d8 <_dtoa_r>
 8005e52:	0005      	movs	r5, r0
 8005e54:	2f47      	cmp	r7, #71	; 0x47
 8005e56:	d102      	bne.n	8005e5e <__cvt+0x5e>
 8005e58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e5a:	07db      	lsls	r3, r3, #31
 8005e5c:	d528      	bpl.n	8005eb0 <__cvt+0xb0>
 8005e5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e60:	18eb      	adds	r3, r5, r3
 8005e62:	9307      	str	r3, [sp, #28]
 8005e64:	2f46      	cmp	r7, #70	; 0x46
 8005e66:	d114      	bne.n	8005e92 <__cvt+0x92>
 8005e68:	782b      	ldrb	r3, [r5, #0]
 8005e6a:	2b30      	cmp	r3, #48	; 0x30
 8005e6c:	d10c      	bne.n	8005e88 <__cvt+0x88>
 8005e6e:	2200      	movs	r2, #0
 8005e70:	2300      	movs	r3, #0
 8005e72:	0020      	movs	r0, r4
 8005e74:	0031      	movs	r1, r6
 8005e76:	f7fa fae9 	bl	800044c <__aeabi_dcmpeq>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d104      	bne.n	8005e88 <__cvt+0x88>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e82:	1a9b      	subs	r3, r3, r2
 8005e84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e8a:	9a07      	ldr	r2, [sp, #28]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	18d3      	adds	r3, r2, r3
 8005e90:	9307      	str	r3, [sp, #28]
 8005e92:	2200      	movs	r2, #0
 8005e94:	2300      	movs	r3, #0
 8005e96:	0020      	movs	r0, r4
 8005e98:	0031      	movs	r1, r6
 8005e9a:	f7fa fad7 	bl	800044c <__aeabi_dcmpeq>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d001      	beq.n	8005ea6 <__cvt+0xa6>
 8005ea2:	9b07      	ldr	r3, [sp, #28]
 8005ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ea6:	2230      	movs	r2, #48	; 0x30
 8005ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eaa:	9907      	ldr	r1, [sp, #28]
 8005eac:	428b      	cmp	r3, r1
 8005eae:	d306      	bcc.n	8005ebe <__cvt+0xbe>
 8005eb0:	0028      	movs	r0, r5
 8005eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005eb6:	1b5b      	subs	r3, r3, r5
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	b00b      	add	sp, #44	; 0x2c
 8005ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ebe:	1c59      	adds	r1, r3, #1
 8005ec0:	9109      	str	r1, [sp, #36]	; 0x24
 8005ec2:	701a      	strb	r2, [r3, #0]
 8005ec4:	e7f0      	b.n	8005ea8 <__cvt+0xa8>

08005ec6 <__exponent>:
 8005ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec8:	1c83      	adds	r3, r0, #2
 8005eca:	b087      	sub	sp, #28
 8005ecc:	9303      	str	r3, [sp, #12]
 8005ece:	0005      	movs	r5, r0
 8005ed0:	000c      	movs	r4, r1
 8005ed2:	232b      	movs	r3, #43	; 0x2b
 8005ed4:	7002      	strb	r2, [r0, #0]
 8005ed6:	2900      	cmp	r1, #0
 8005ed8:	da01      	bge.n	8005ede <__exponent+0x18>
 8005eda:	424c      	negs	r4, r1
 8005edc:	3302      	adds	r3, #2
 8005ede:	706b      	strb	r3, [r5, #1]
 8005ee0:	2c09      	cmp	r4, #9
 8005ee2:	dd31      	ble.n	8005f48 <__exponent+0x82>
 8005ee4:	270a      	movs	r7, #10
 8005ee6:	ab04      	add	r3, sp, #16
 8005ee8:	1dde      	adds	r6, r3, #7
 8005eea:	0020      	movs	r0, r4
 8005eec:	0039      	movs	r1, r7
 8005eee:	9601      	str	r6, [sp, #4]
 8005ef0:	f7fa fa96 	bl	8000420 <__aeabi_idivmod>
 8005ef4:	3e01      	subs	r6, #1
 8005ef6:	3130      	adds	r1, #48	; 0x30
 8005ef8:	0020      	movs	r0, r4
 8005efa:	7031      	strb	r1, [r6, #0]
 8005efc:	0039      	movs	r1, r7
 8005efe:	9402      	str	r4, [sp, #8]
 8005f00:	f7fa f9a8 	bl	8000254 <__divsi3>
 8005f04:	9b02      	ldr	r3, [sp, #8]
 8005f06:	0004      	movs	r4, r0
 8005f08:	2b63      	cmp	r3, #99	; 0x63
 8005f0a:	dcee      	bgt.n	8005eea <__exponent+0x24>
 8005f0c:	9b01      	ldr	r3, [sp, #4]
 8005f0e:	3430      	adds	r4, #48	; 0x30
 8005f10:	1e9a      	subs	r2, r3, #2
 8005f12:	0013      	movs	r3, r2
 8005f14:	9903      	ldr	r1, [sp, #12]
 8005f16:	7014      	strb	r4, [r2, #0]
 8005f18:	a804      	add	r0, sp, #16
 8005f1a:	3007      	adds	r0, #7
 8005f1c:	4298      	cmp	r0, r3
 8005f1e:	d80e      	bhi.n	8005f3e <__exponent+0x78>
 8005f20:	ab04      	add	r3, sp, #16
 8005f22:	3307      	adds	r3, #7
 8005f24:	2000      	movs	r0, #0
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d804      	bhi.n	8005f34 <__exponent+0x6e>
 8005f2a:	ab04      	add	r3, sp, #16
 8005f2c:	3009      	adds	r0, #9
 8005f2e:	18c0      	adds	r0, r0, r3
 8005f30:	9b01      	ldr	r3, [sp, #4]
 8005f32:	1ac0      	subs	r0, r0, r3
 8005f34:	9b03      	ldr	r3, [sp, #12]
 8005f36:	1818      	adds	r0, r3, r0
 8005f38:	1b40      	subs	r0, r0, r5
 8005f3a:	b007      	add	sp, #28
 8005f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f3e:	7818      	ldrb	r0, [r3, #0]
 8005f40:	3301      	adds	r3, #1
 8005f42:	7008      	strb	r0, [r1, #0]
 8005f44:	3101      	adds	r1, #1
 8005f46:	e7e7      	b.n	8005f18 <__exponent+0x52>
 8005f48:	2330      	movs	r3, #48	; 0x30
 8005f4a:	18e4      	adds	r4, r4, r3
 8005f4c:	70ab      	strb	r3, [r5, #2]
 8005f4e:	1d28      	adds	r0, r5, #4
 8005f50:	70ec      	strb	r4, [r5, #3]
 8005f52:	e7f1      	b.n	8005f38 <__exponent+0x72>

08005f54 <_printf_float>:
 8005f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f56:	b095      	sub	sp, #84	; 0x54
 8005f58:	000c      	movs	r4, r1
 8005f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8005f5c:	001e      	movs	r6, r3
 8005f5e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005f60:	0007      	movs	r7, r0
 8005f62:	f002 fec7 	bl	8008cf4 <_localeconv_r>
 8005f66:	6803      	ldr	r3, [r0, #0]
 8005f68:	0018      	movs	r0, r3
 8005f6a:	930c      	str	r3, [sp, #48]	; 0x30
 8005f6c:	f7fa f8cc 	bl	8000108 <strlen>
 8005f70:	2300      	movs	r3, #0
 8005f72:	9312      	str	r3, [sp, #72]	; 0x48
 8005f74:	7e23      	ldrb	r3, [r4, #24]
 8005f76:	2207      	movs	r2, #7
 8005f78:	930a      	str	r3, [sp, #40]	; 0x28
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	900e      	str	r0, [sp, #56]	; 0x38
 8005f7e:	930d      	str	r3, [sp, #52]	; 0x34
 8005f80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f82:	682b      	ldr	r3, [r5, #0]
 8005f84:	05c9      	lsls	r1, r1, #23
 8005f86:	d547      	bpl.n	8006018 <_printf_float+0xc4>
 8005f88:	189b      	adds	r3, r3, r2
 8005f8a:	4393      	bics	r3, r2
 8005f8c:	001a      	movs	r2, r3
 8005f8e:	3208      	adds	r2, #8
 8005f90:	602a      	str	r2, [r5, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	64a2      	str	r2, [r4, #72]	; 0x48
 8005f98:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005f9e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fa2:	006b      	lsls	r3, r5, #1
 8005fa4:	085b      	lsrs	r3, r3, #1
 8005fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fa8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005faa:	4ba7      	ldr	r3, [pc, #668]	; (8006248 <_printf_float+0x2f4>)
 8005fac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005fae:	4252      	negs	r2, r2
 8005fb0:	f7fc f826 	bl	8002000 <__aeabi_dcmpun>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	d131      	bne.n	800601c <_printf_float+0xc8>
 8005fb8:	2201      	movs	r2, #1
 8005fba:	4ba3      	ldr	r3, [pc, #652]	; (8006248 <_printf_float+0x2f4>)
 8005fbc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005fbe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005fc0:	4252      	negs	r2, r2
 8005fc2:	f7fa fa53 	bl	800046c <__aeabi_dcmple>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d128      	bne.n	800601c <_printf_float+0xc8>
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	0029      	movs	r1, r5
 8005fd0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005fd2:	f7fa fa41 	bl	8000458 <__aeabi_dcmplt>
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	d003      	beq.n	8005fe2 <_printf_float+0x8e>
 8005fda:	0023      	movs	r3, r4
 8005fdc:	222d      	movs	r2, #45	; 0x2d
 8005fde:	3343      	adds	r3, #67	; 0x43
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fe4:	4d99      	ldr	r5, [pc, #612]	; (800624c <_printf_float+0x2f8>)
 8005fe6:	2b47      	cmp	r3, #71	; 0x47
 8005fe8:	d900      	bls.n	8005fec <_printf_float+0x98>
 8005fea:	4d99      	ldr	r5, [pc, #612]	; (8006250 <_printf_float+0x2fc>)
 8005fec:	2303      	movs	r3, #3
 8005fee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ff0:	6123      	str	r3, [r4, #16]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	439a      	bics	r2, r3
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	6022      	str	r2, [r4, #0]
 8005ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ffe:	0021      	movs	r1, r4
 8006000:	0038      	movs	r0, r7
 8006002:	9600      	str	r6, [sp, #0]
 8006004:	aa13      	add	r2, sp, #76	; 0x4c
 8006006:	f000 f9e7 	bl	80063d8 <_printf_common>
 800600a:	1c43      	adds	r3, r0, #1
 800600c:	d000      	beq.n	8006010 <_printf_float+0xbc>
 800600e:	e0a2      	b.n	8006156 <_printf_float+0x202>
 8006010:	2001      	movs	r0, #1
 8006012:	4240      	negs	r0, r0
 8006014:	b015      	add	sp, #84	; 0x54
 8006016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006018:	3307      	adds	r3, #7
 800601a:	e7b6      	b.n	8005f8a <_printf_float+0x36>
 800601c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800601e:	002b      	movs	r3, r5
 8006020:	0010      	movs	r0, r2
 8006022:	0029      	movs	r1, r5
 8006024:	f7fb ffec 	bl	8002000 <__aeabi_dcmpun>
 8006028:	2800      	cmp	r0, #0
 800602a:	d00b      	beq.n	8006044 <_printf_float+0xf0>
 800602c:	2d00      	cmp	r5, #0
 800602e:	da03      	bge.n	8006038 <_printf_float+0xe4>
 8006030:	0023      	movs	r3, r4
 8006032:	222d      	movs	r2, #45	; 0x2d
 8006034:	3343      	adds	r3, #67	; 0x43
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800603a:	4d86      	ldr	r5, [pc, #536]	; (8006254 <_printf_float+0x300>)
 800603c:	2b47      	cmp	r3, #71	; 0x47
 800603e:	d9d5      	bls.n	8005fec <_printf_float+0x98>
 8006040:	4d85      	ldr	r5, [pc, #532]	; (8006258 <_printf_float+0x304>)
 8006042:	e7d3      	b.n	8005fec <_printf_float+0x98>
 8006044:	2220      	movs	r2, #32
 8006046:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006048:	6863      	ldr	r3, [r4, #4]
 800604a:	4391      	bics	r1, r2
 800604c:	910f      	str	r1, [sp, #60]	; 0x3c
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	d149      	bne.n	80060e6 <_printf_float+0x192>
 8006052:	3307      	adds	r3, #7
 8006054:	6063      	str	r3, [r4, #4]
 8006056:	2380      	movs	r3, #128	; 0x80
 8006058:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	4313      	orrs	r3, r2
 800605e:	2200      	movs	r2, #0
 8006060:	9206      	str	r2, [sp, #24]
 8006062:	aa12      	add	r2, sp, #72	; 0x48
 8006064:	9205      	str	r2, [sp, #20]
 8006066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006068:	a908      	add	r1, sp, #32
 800606a:	9204      	str	r2, [sp, #16]
 800606c:	aa11      	add	r2, sp, #68	; 0x44
 800606e:	9203      	str	r2, [sp, #12]
 8006070:	2223      	movs	r2, #35	; 0x23
 8006072:	6023      	str	r3, [r4, #0]
 8006074:	9301      	str	r3, [sp, #4]
 8006076:	6863      	ldr	r3, [r4, #4]
 8006078:	1852      	adds	r2, r2, r1
 800607a:	9202      	str	r2, [sp, #8]
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	0038      	movs	r0, r7
 8006080:	002b      	movs	r3, r5
 8006082:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006084:	f7ff febc 	bl	8005e00 <__cvt>
 8006088:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800608a:	0005      	movs	r5, r0
 800608c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800608e:	2b47      	cmp	r3, #71	; 0x47
 8006090:	d108      	bne.n	80060a4 <_printf_float+0x150>
 8006092:	1ccb      	adds	r3, r1, #3
 8006094:	db02      	blt.n	800609c <_printf_float+0x148>
 8006096:	6863      	ldr	r3, [r4, #4]
 8006098:	4299      	cmp	r1, r3
 800609a:	dd48      	ble.n	800612e <_printf_float+0x1da>
 800609c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800609e:	3b02      	subs	r3, #2
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	930a      	str	r3, [sp, #40]	; 0x28
 80060a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a6:	2b65      	cmp	r3, #101	; 0x65
 80060a8:	d824      	bhi.n	80060f4 <_printf_float+0x1a0>
 80060aa:	0020      	movs	r0, r4
 80060ac:	001a      	movs	r2, r3
 80060ae:	3901      	subs	r1, #1
 80060b0:	3050      	adds	r0, #80	; 0x50
 80060b2:	9111      	str	r1, [sp, #68]	; 0x44
 80060b4:	f7ff ff07 	bl	8005ec6 <__exponent>
 80060b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80060bc:	1813      	adds	r3, r2, r0
 80060be:	6123      	str	r3, [r4, #16]
 80060c0:	2a01      	cmp	r2, #1
 80060c2:	dc02      	bgt.n	80060ca <_printf_float+0x176>
 80060c4:	6822      	ldr	r2, [r4, #0]
 80060c6:	07d2      	lsls	r2, r2, #31
 80060c8:	d501      	bpl.n	80060ce <_printf_float+0x17a>
 80060ca:	3301      	adds	r3, #1
 80060cc:	6123      	str	r3, [r4, #16]
 80060ce:	2323      	movs	r3, #35	; 0x23
 80060d0:	aa08      	add	r2, sp, #32
 80060d2:	189b      	adds	r3, r3, r2
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d100      	bne.n	80060dc <_printf_float+0x188>
 80060da:	e78f      	b.n	8005ffc <_printf_float+0xa8>
 80060dc:	0023      	movs	r3, r4
 80060de:	222d      	movs	r2, #45	; 0x2d
 80060e0:	3343      	adds	r3, #67	; 0x43
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	e78a      	b.n	8005ffc <_printf_float+0xa8>
 80060e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060e8:	2a47      	cmp	r2, #71	; 0x47
 80060ea:	d1b4      	bne.n	8006056 <_printf_float+0x102>
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1b2      	bne.n	8006056 <_printf_float+0x102>
 80060f0:	3301      	adds	r3, #1
 80060f2:	e7af      	b.n	8006054 <_printf_float+0x100>
 80060f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060f6:	2b66      	cmp	r3, #102	; 0x66
 80060f8:	d11b      	bne.n	8006132 <_printf_float+0x1de>
 80060fa:	6863      	ldr	r3, [r4, #4]
 80060fc:	2900      	cmp	r1, #0
 80060fe:	dd0d      	ble.n	800611c <_printf_float+0x1c8>
 8006100:	6121      	str	r1, [r4, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d102      	bne.n	800610c <_printf_float+0x1b8>
 8006106:	6822      	ldr	r2, [r4, #0]
 8006108:	07d2      	lsls	r2, r2, #31
 800610a:	d502      	bpl.n	8006112 <_printf_float+0x1be>
 800610c:	3301      	adds	r3, #1
 800610e:	1859      	adds	r1, r3, r1
 8006110:	6121      	str	r1, [r4, #16]
 8006112:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006114:	65a3      	str	r3, [r4, #88]	; 0x58
 8006116:	2300      	movs	r3, #0
 8006118:	930b      	str	r3, [sp, #44]	; 0x2c
 800611a:	e7d8      	b.n	80060ce <_printf_float+0x17a>
 800611c:	2b00      	cmp	r3, #0
 800611e:	d103      	bne.n	8006128 <_printf_float+0x1d4>
 8006120:	2201      	movs	r2, #1
 8006122:	6821      	ldr	r1, [r4, #0]
 8006124:	4211      	tst	r1, r2
 8006126:	d000      	beq.n	800612a <_printf_float+0x1d6>
 8006128:	1c9a      	adds	r2, r3, #2
 800612a:	6122      	str	r2, [r4, #16]
 800612c:	e7f1      	b.n	8006112 <_printf_float+0x1be>
 800612e:	2367      	movs	r3, #103	; 0x67
 8006130:	930a      	str	r3, [sp, #40]	; 0x28
 8006132:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006134:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006136:	4293      	cmp	r3, r2
 8006138:	db06      	blt.n	8006148 <_printf_float+0x1f4>
 800613a:	6822      	ldr	r2, [r4, #0]
 800613c:	6123      	str	r3, [r4, #16]
 800613e:	07d2      	lsls	r2, r2, #31
 8006140:	d5e7      	bpl.n	8006112 <_printf_float+0x1be>
 8006142:	3301      	adds	r3, #1
 8006144:	6123      	str	r3, [r4, #16]
 8006146:	e7e4      	b.n	8006112 <_printf_float+0x1be>
 8006148:	2101      	movs	r1, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	dc01      	bgt.n	8006152 <_printf_float+0x1fe>
 800614e:	1849      	adds	r1, r1, r1
 8006150:	1ac9      	subs	r1, r1, r3
 8006152:	1852      	adds	r2, r2, r1
 8006154:	e7e9      	b.n	800612a <_printf_float+0x1d6>
 8006156:	6822      	ldr	r2, [r4, #0]
 8006158:	0553      	lsls	r3, r2, #21
 800615a:	d407      	bmi.n	800616c <_printf_float+0x218>
 800615c:	6923      	ldr	r3, [r4, #16]
 800615e:	002a      	movs	r2, r5
 8006160:	0038      	movs	r0, r7
 8006162:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006164:	47b0      	blx	r6
 8006166:	1c43      	adds	r3, r0, #1
 8006168:	d128      	bne.n	80061bc <_printf_float+0x268>
 800616a:	e751      	b.n	8006010 <_printf_float+0xbc>
 800616c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800616e:	2b65      	cmp	r3, #101	; 0x65
 8006170:	d800      	bhi.n	8006174 <_printf_float+0x220>
 8006172:	e0e1      	b.n	8006338 <_printf_float+0x3e4>
 8006174:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006176:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006178:	2200      	movs	r2, #0
 800617a:	2300      	movs	r3, #0
 800617c:	f7fa f966 	bl	800044c <__aeabi_dcmpeq>
 8006180:	2800      	cmp	r0, #0
 8006182:	d031      	beq.n	80061e8 <_printf_float+0x294>
 8006184:	2301      	movs	r3, #1
 8006186:	0038      	movs	r0, r7
 8006188:	4a34      	ldr	r2, [pc, #208]	; (800625c <_printf_float+0x308>)
 800618a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800618c:	47b0      	blx	r6
 800618e:	1c43      	adds	r3, r0, #1
 8006190:	d100      	bne.n	8006194 <_printf_float+0x240>
 8006192:	e73d      	b.n	8006010 <_printf_float+0xbc>
 8006194:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006196:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006198:	4293      	cmp	r3, r2
 800619a:	db02      	blt.n	80061a2 <_printf_float+0x24e>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	07db      	lsls	r3, r3, #31
 80061a0:	d50c      	bpl.n	80061bc <_printf_float+0x268>
 80061a2:	0038      	movs	r0, r7
 80061a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061aa:	47b0      	blx	r6
 80061ac:	2500      	movs	r5, #0
 80061ae:	1c43      	adds	r3, r0, #1
 80061b0:	d100      	bne.n	80061b4 <_printf_float+0x260>
 80061b2:	e72d      	b.n	8006010 <_printf_float+0xbc>
 80061b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061b6:	3b01      	subs	r3, #1
 80061b8:	42ab      	cmp	r3, r5
 80061ba:	dc0a      	bgt.n	80061d2 <_printf_float+0x27e>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	079b      	lsls	r3, r3, #30
 80061c0:	d500      	bpl.n	80061c4 <_printf_float+0x270>
 80061c2:	e106      	b.n	80063d2 <_printf_float+0x47e>
 80061c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061c6:	68e0      	ldr	r0, [r4, #12]
 80061c8:	4298      	cmp	r0, r3
 80061ca:	db00      	blt.n	80061ce <_printf_float+0x27a>
 80061cc:	e722      	b.n	8006014 <_printf_float+0xc0>
 80061ce:	0018      	movs	r0, r3
 80061d0:	e720      	b.n	8006014 <_printf_float+0xc0>
 80061d2:	0022      	movs	r2, r4
 80061d4:	2301      	movs	r3, #1
 80061d6:	0038      	movs	r0, r7
 80061d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061da:	321a      	adds	r2, #26
 80061dc:	47b0      	blx	r6
 80061de:	1c43      	adds	r3, r0, #1
 80061e0:	d100      	bne.n	80061e4 <_printf_float+0x290>
 80061e2:	e715      	b.n	8006010 <_printf_float+0xbc>
 80061e4:	3501      	adds	r5, #1
 80061e6:	e7e5      	b.n	80061b4 <_printf_float+0x260>
 80061e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	dc38      	bgt.n	8006260 <_printf_float+0x30c>
 80061ee:	2301      	movs	r3, #1
 80061f0:	0038      	movs	r0, r7
 80061f2:	4a1a      	ldr	r2, [pc, #104]	; (800625c <_printf_float+0x308>)
 80061f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061f6:	47b0      	blx	r6
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	d100      	bne.n	80061fe <_printf_float+0x2aa>
 80061fc:	e708      	b.n	8006010 <_printf_float+0xbc>
 80061fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006200:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006202:	4313      	orrs	r3, r2
 8006204:	d102      	bne.n	800620c <_printf_float+0x2b8>
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	07db      	lsls	r3, r3, #31
 800620a:	d5d7      	bpl.n	80061bc <_printf_float+0x268>
 800620c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800620e:	0038      	movs	r0, r7
 8006210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006212:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006214:	47b0      	blx	r6
 8006216:	1c43      	adds	r3, r0, #1
 8006218:	d100      	bne.n	800621c <_printf_float+0x2c8>
 800621a:	e6f9      	b.n	8006010 <_printf_float+0xbc>
 800621c:	2300      	movs	r3, #0
 800621e:	930a      	str	r3, [sp, #40]	; 0x28
 8006220:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006224:	425b      	negs	r3, r3
 8006226:	4293      	cmp	r3, r2
 8006228:	dc01      	bgt.n	800622e <_printf_float+0x2da>
 800622a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800622c:	e797      	b.n	800615e <_printf_float+0x20a>
 800622e:	0022      	movs	r2, r4
 8006230:	2301      	movs	r3, #1
 8006232:	0038      	movs	r0, r7
 8006234:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006236:	321a      	adds	r2, #26
 8006238:	47b0      	blx	r6
 800623a:	1c43      	adds	r3, r0, #1
 800623c:	d100      	bne.n	8006240 <_printf_float+0x2ec>
 800623e:	e6e7      	b.n	8006010 <_printf_float+0xbc>
 8006240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006242:	3301      	adds	r3, #1
 8006244:	e7eb      	b.n	800621e <_printf_float+0x2ca>
 8006246:	46c0      	nop			; (mov r8, r8)
 8006248:	7fefffff 	.word	0x7fefffff
 800624c:	0800a97c 	.word	0x0800a97c
 8006250:	0800a980 	.word	0x0800a980
 8006254:	0800a984 	.word	0x0800a984
 8006258:	0800a988 	.word	0x0800a988
 800625c:	0800a98c 	.word	0x0800a98c
 8006260:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006262:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006264:	920a      	str	r2, [sp, #40]	; 0x28
 8006266:	429a      	cmp	r2, r3
 8006268:	dd00      	ble.n	800626c <_printf_float+0x318>
 800626a:	930a      	str	r3, [sp, #40]	; 0x28
 800626c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800626e:	2b00      	cmp	r3, #0
 8006270:	dc3c      	bgt.n	80062ec <_printf_float+0x398>
 8006272:	2300      	movs	r3, #0
 8006274:	930d      	str	r3, [sp, #52]	; 0x34
 8006276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006278:	43db      	mvns	r3, r3
 800627a:	17db      	asrs	r3, r3, #31
 800627c:	930f      	str	r3, [sp, #60]	; 0x3c
 800627e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006280:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006282:	930b      	str	r3, [sp, #44]	; 0x2c
 8006284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006286:	4013      	ands	r3, r2
 8006288:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800628e:	4293      	cmp	r3, r2
 8006290:	dc34      	bgt.n	80062fc <_printf_float+0x3a8>
 8006292:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006294:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006296:	4293      	cmp	r3, r2
 8006298:	db3d      	blt.n	8006316 <_printf_float+0x3c2>
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	07db      	lsls	r3, r3, #31
 800629e:	d43a      	bmi.n	8006316 <_printf_float+0x3c2>
 80062a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	1a52      	subs	r2, r2, r1
 80062aa:	920a      	str	r2, [sp, #40]	; 0x28
 80062ac:	429a      	cmp	r2, r3
 80062ae:	dd00      	ble.n	80062b2 <_printf_float+0x35e>
 80062b0:	930a      	str	r3, [sp, #40]	; 0x28
 80062b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	dc36      	bgt.n	8006326 <_printf_float+0x3d2>
 80062b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ba:	2500      	movs	r5, #0
 80062bc:	43db      	mvns	r3, r3
 80062be:	17db      	asrs	r3, r3, #31
 80062c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80062c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80062c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062c8:	1a9b      	subs	r3, r3, r2
 80062ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062cc:	400a      	ands	r2, r1
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	42ab      	cmp	r3, r5
 80062d2:	dc00      	bgt.n	80062d6 <_printf_float+0x382>
 80062d4:	e772      	b.n	80061bc <_printf_float+0x268>
 80062d6:	0022      	movs	r2, r4
 80062d8:	2301      	movs	r3, #1
 80062da:	0038      	movs	r0, r7
 80062dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062de:	321a      	adds	r2, #26
 80062e0:	47b0      	blx	r6
 80062e2:	1c43      	adds	r3, r0, #1
 80062e4:	d100      	bne.n	80062e8 <_printf_float+0x394>
 80062e6:	e693      	b.n	8006010 <_printf_float+0xbc>
 80062e8:	3501      	adds	r5, #1
 80062ea:	e7ea      	b.n	80062c2 <_printf_float+0x36e>
 80062ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ee:	002a      	movs	r2, r5
 80062f0:	0038      	movs	r0, r7
 80062f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062f4:	47b0      	blx	r6
 80062f6:	1c43      	adds	r3, r0, #1
 80062f8:	d1bb      	bne.n	8006272 <_printf_float+0x31e>
 80062fa:	e689      	b.n	8006010 <_printf_float+0xbc>
 80062fc:	0022      	movs	r2, r4
 80062fe:	2301      	movs	r3, #1
 8006300:	0038      	movs	r0, r7
 8006302:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006304:	321a      	adds	r2, #26
 8006306:	47b0      	blx	r6
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	d100      	bne.n	800630e <_printf_float+0x3ba>
 800630c:	e680      	b.n	8006010 <_printf_float+0xbc>
 800630e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006310:	3301      	adds	r3, #1
 8006312:	930d      	str	r3, [sp, #52]	; 0x34
 8006314:	e7b3      	b.n	800627e <_printf_float+0x32a>
 8006316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006318:	0038      	movs	r0, r7
 800631a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800631c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800631e:	47b0      	blx	r6
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d1bd      	bne.n	80062a0 <_printf_float+0x34c>
 8006324:	e674      	b.n	8006010 <_printf_float+0xbc>
 8006326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006328:	0038      	movs	r0, r7
 800632a:	18ea      	adds	r2, r5, r3
 800632c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800632e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006330:	47b0      	blx	r6
 8006332:	1c43      	adds	r3, r0, #1
 8006334:	d1c0      	bne.n	80062b8 <_printf_float+0x364>
 8006336:	e66b      	b.n	8006010 <_printf_float+0xbc>
 8006338:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800633a:	2b01      	cmp	r3, #1
 800633c:	dc02      	bgt.n	8006344 <_printf_float+0x3f0>
 800633e:	2301      	movs	r3, #1
 8006340:	421a      	tst	r2, r3
 8006342:	d034      	beq.n	80063ae <_printf_float+0x45a>
 8006344:	2301      	movs	r3, #1
 8006346:	002a      	movs	r2, r5
 8006348:	0038      	movs	r0, r7
 800634a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800634c:	47b0      	blx	r6
 800634e:	1c43      	adds	r3, r0, #1
 8006350:	d100      	bne.n	8006354 <_printf_float+0x400>
 8006352:	e65d      	b.n	8006010 <_printf_float+0xbc>
 8006354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006356:	0038      	movs	r0, r7
 8006358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800635a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800635c:	47b0      	blx	r6
 800635e:	1c43      	adds	r3, r0, #1
 8006360:	d100      	bne.n	8006364 <_printf_float+0x410>
 8006362:	e655      	b.n	8006010 <_printf_float+0xbc>
 8006364:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006366:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006368:	2200      	movs	r2, #0
 800636a:	2300      	movs	r3, #0
 800636c:	f7fa f86e 	bl	800044c <__aeabi_dcmpeq>
 8006370:	2800      	cmp	r0, #0
 8006372:	d11a      	bne.n	80063aa <_printf_float+0x456>
 8006374:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006376:	1c6a      	adds	r2, r5, #1
 8006378:	3b01      	subs	r3, #1
 800637a:	0038      	movs	r0, r7
 800637c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800637e:	47b0      	blx	r6
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d10e      	bne.n	80063a2 <_printf_float+0x44e>
 8006384:	e644      	b.n	8006010 <_printf_float+0xbc>
 8006386:	0022      	movs	r2, r4
 8006388:	2301      	movs	r3, #1
 800638a:	0038      	movs	r0, r7
 800638c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800638e:	321a      	adds	r2, #26
 8006390:	47b0      	blx	r6
 8006392:	1c43      	adds	r3, r0, #1
 8006394:	d100      	bne.n	8006398 <_printf_float+0x444>
 8006396:	e63b      	b.n	8006010 <_printf_float+0xbc>
 8006398:	3501      	adds	r5, #1
 800639a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800639c:	3b01      	subs	r3, #1
 800639e:	42ab      	cmp	r3, r5
 80063a0:	dcf1      	bgt.n	8006386 <_printf_float+0x432>
 80063a2:	0022      	movs	r2, r4
 80063a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063a6:	3250      	adds	r2, #80	; 0x50
 80063a8:	e6da      	b.n	8006160 <_printf_float+0x20c>
 80063aa:	2500      	movs	r5, #0
 80063ac:	e7f5      	b.n	800639a <_printf_float+0x446>
 80063ae:	002a      	movs	r2, r5
 80063b0:	e7e3      	b.n	800637a <_printf_float+0x426>
 80063b2:	0022      	movs	r2, r4
 80063b4:	2301      	movs	r3, #1
 80063b6:	0038      	movs	r0, r7
 80063b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063ba:	3219      	adds	r2, #25
 80063bc:	47b0      	blx	r6
 80063be:	1c43      	adds	r3, r0, #1
 80063c0:	d100      	bne.n	80063c4 <_printf_float+0x470>
 80063c2:	e625      	b.n	8006010 <_printf_float+0xbc>
 80063c4:	3501      	adds	r5, #1
 80063c6:	68e3      	ldr	r3, [r4, #12]
 80063c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80063ca:	1a9b      	subs	r3, r3, r2
 80063cc:	42ab      	cmp	r3, r5
 80063ce:	dcf0      	bgt.n	80063b2 <_printf_float+0x45e>
 80063d0:	e6f8      	b.n	80061c4 <_printf_float+0x270>
 80063d2:	2500      	movs	r5, #0
 80063d4:	e7f7      	b.n	80063c6 <_printf_float+0x472>
 80063d6:	46c0      	nop			; (mov r8, r8)

080063d8 <_printf_common>:
 80063d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063da:	0015      	movs	r5, r2
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	688a      	ldr	r2, [r1, #8]
 80063e0:	690b      	ldr	r3, [r1, #16]
 80063e2:	000c      	movs	r4, r1
 80063e4:	9000      	str	r0, [sp, #0]
 80063e6:	4293      	cmp	r3, r2
 80063e8:	da00      	bge.n	80063ec <_printf_common+0x14>
 80063ea:	0013      	movs	r3, r2
 80063ec:	0022      	movs	r2, r4
 80063ee:	602b      	str	r3, [r5, #0]
 80063f0:	3243      	adds	r2, #67	; 0x43
 80063f2:	7812      	ldrb	r2, [r2, #0]
 80063f4:	2a00      	cmp	r2, #0
 80063f6:	d001      	beq.n	80063fc <_printf_common+0x24>
 80063f8:	3301      	adds	r3, #1
 80063fa:	602b      	str	r3, [r5, #0]
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	069b      	lsls	r3, r3, #26
 8006400:	d502      	bpl.n	8006408 <_printf_common+0x30>
 8006402:	682b      	ldr	r3, [r5, #0]
 8006404:	3302      	adds	r3, #2
 8006406:	602b      	str	r3, [r5, #0]
 8006408:	6822      	ldr	r2, [r4, #0]
 800640a:	2306      	movs	r3, #6
 800640c:	0017      	movs	r7, r2
 800640e:	401f      	ands	r7, r3
 8006410:	421a      	tst	r2, r3
 8006412:	d027      	beq.n	8006464 <_printf_common+0x8c>
 8006414:	0023      	movs	r3, r4
 8006416:	3343      	adds	r3, #67	; 0x43
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	1e5a      	subs	r2, r3, #1
 800641c:	4193      	sbcs	r3, r2
 800641e:	6822      	ldr	r2, [r4, #0]
 8006420:	0692      	lsls	r2, r2, #26
 8006422:	d430      	bmi.n	8006486 <_printf_common+0xae>
 8006424:	0022      	movs	r2, r4
 8006426:	9901      	ldr	r1, [sp, #4]
 8006428:	9800      	ldr	r0, [sp, #0]
 800642a:	9e08      	ldr	r6, [sp, #32]
 800642c:	3243      	adds	r2, #67	; 0x43
 800642e:	47b0      	blx	r6
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d025      	beq.n	8006480 <_printf_common+0xa8>
 8006434:	2306      	movs	r3, #6
 8006436:	6820      	ldr	r0, [r4, #0]
 8006438:	682a      	ldr	r2, [r5, #0]
 800643a:	68e1      	ldr	r1, [r4, #12]
 800643c:	2500      	movs	r5, #0
 800643e:	4003      	ands	r3, r0
 8006440:	2b04      	cmp	r3, #4
 8006442:	d103      	bne.n	800644c <_printf_common+0x74>
 8006444:	1a8d      	subs	r5, r1, r2
 8006446:	43eb      	mvns	r3, r5
 8006448:	17db      	asrs	r3, r3, #31
 800644a:	401d      	ands	r5, r3
 800644c:	68a3      	ldr	r3, [r4, #8]
 800644e:	6922      	ldr	r2, [r4, #16]
 8006450:	4293      	cmp	r3, r2
 8006452:	dd01      	ble.n	8006458 <_printf_common+0x80>
 8006454:	1a9b      	subs	r3, r3, r2
 8006456:	18ed      	adds	r5, r5, r3
 8006458:	2700      	movs	r7, #0
 800645a:	42bd      	cmp	r5, r7
 800645c:	d120      	bne.n	80064a0 <_printf_common+0xc8>
 800645e:	2000      	movs	r0, #0
 8006460:	e010      	b.n	8006484 <_printf_common+0xac>
 8006462:	3701      	adds	r7, #1
 8006464:	68e3      	ldr	r3, [r4, #12]
 8006466:	682a      	ldr	r2, [r5, #0]
 8006468:	1a9b      	subs	r3, r3, r2
 800646a:	42bb      	cmp	r3, r7
 800646c:	ddd2      	ble.n	8006414 <_printf_common+0x3c>
 800646e:	0022      	movs	r2, r4
 8006470:	2301      	movs	r3, #1
 8006472:	9901      	ldr	r1, [sp, #4]
 8006474:	9800      	ldr	r0, [sp, #0]
 8006476:	9e08      	ldr	r6, [sp, #32]
 8006478:	3219      	adds	r2, #25
 800647a:	47b0      	blx	r6
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d1f0      	bne.n	8006462 <_printf_common+0x8a>
 8006480:	2001      	movs	r0, #1
 8006482:	4240      	negs	r0, r0
 8006484:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006486:	2030      	movs	r0, #48	; 0x30
 8006488:	18e1      	adds	r1, r4, r3
 800648a:	3143      	adds	r1, #67	; 0x43
 800648c:	7008      	strb	r0, [r1, #0]
 800648e:	0021      	movs	r1, r4
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	3145      	adds	r1, #69	; 0x45
 8006494:	7809      	ldrb	r1, [r1, #0]
 8006496:	18a2      	adds	r2, r4, r2
 8006498:	3243      	adds	r2, #67	; 0x43
 800649a:	3302      	adds	r3, #2
 800649c:	7011      	strb	r1, [r2, #0]
 800649e:	e7c1      	b.n	8006424 <_printf_common+0x4c>
 80064a0:	0022      	movs	r2, r4
 80064a2:	2301      	movs	r3, #1
 80064a4:	9901      	ldr	r1, [sp, #4]
 80064a6:	9800      	ldr	r0, [sp, #0]
 80064a8:	9e08      	ldr	r6, [sp, #32]
 80064aa:	321a      	adds	r2, #26
 80064ac:	47b0      	blx	r6
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	d0e6      	beq.n	8006480 <_printf_common+0xa8>
 80064b2:	3701      	adds	r7, #1
 80064b4:	e7d1      	b.n	800645a <_printf_common+0x82>
	...

080064b8 <_printf_i>:
 80064b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ba:	b08b      	sub	sp, #44	; 0x2c
 80064bc:	9206      	str	r2, [sp, #24]
 80064be:	000a      	movs	r2, r1
 80064c0:	3243      	adds	r2, #67	; 0x43
 80064c2:	9307      	str	r3, [sp, #28]
 80064c4:	9005      	str	r0, [sp, #20]
 80064c6:	9204      	str	r2, [sp, #16]
 80064c8:	7e0a      	ldrb	r2, [r1, #24]
 80064ca:	000c      	movs	r4, r1
 80064cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064ce:	2a78      	cmp	r2, #120	; 0x78
 80064d0:	d807      	bhi.n	80064e2 <_printf_i+0x2a>
 80064d2:	2a62      	cmp	r2, #98	; 0x62
 80064d4:	d809      	bhi.n	80064ea <_printf_i+0x32>
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	d100      	bne.n	80064dc <_printf_i+0x24>
 80064da:	e0c1      	b.n	8006660 <_printf_i+0x1a8>
 80064dc:	2a58      	cmp	r2, #88	; 0x58
 80064de:	d100      	bne.n	80064e2 <_printf_i+0x2a>
 80064e0:	e08c      	b.n	80065fc <_printf_i+0x144>
 80064e2:	0026      	movs	r6, r4
 80064e4:	3642      	adds	r6, #66	; 0x42
 80064e6:	7032      	strb	r2, [r6, #0]
 80064e8:	e022      	b.n	8006530 <_printf_i+0x78>
 80064ea:	0010      	movs	r0, r2
 80064ec:	3863      	subs	r0, #99	; 0x63
 80064ee:	2815      	cmp	r0, #21
 80064f0:	d8f7      	bhi.n	80064e2 <_printf_i+0x2a>
 80064f2:	f7f9 fe1b 	bl	800012c <__gnu_thumb1_case_shi>
 80064f6:	0016      	.short	0x0016
 80064f8:	fff6001f 	.word	0xfff6001f
 80064fc:	fff6fff6 	.word	0xfff6fff6
 8006500:	001ffff6 	.word	0x001ffff6
 8006504:	fff6fff6 	.word	0xfff6fff6
 8006508:	fff6fff6 	.word	0xfff6fff6
 800650c:	003600a8 	.word	0x003600a8
 8006510:	fff6009a 	.word	0xfff6009a
 8006514:	00b9fff6 	.word	0x00b9fff6
 8006518:	0036fff6 	.word	0x0036fff6
 800651c:	fff6fff6 	.word	0xfff6fff6
 8006520:	009e      	.short	0x009e
 8006522:	0026      	movs	r6, r4
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	3642      	adds	r6, #66	; 0x42
 8006528:	1d11      	adds	r1, r2, #4
 800652a:	6019      	str	r1, [r3, #0]
 800652c:	6813      	ldr	r3, [r2, #0]
 800652e:	7033      	strb	r3, [r6, #0]
 8006530:	2301      	movs	r3, #1
 8006532:	e0a7      	b.n	8006684 <_printf_i+0x1cc>
 8006534:	6808      	ldr	r0, [r1, #0]
 8006536:	6819      	ldr	r1, [r3, #0]
 8006538:	1d0a      	adds	r2, r1, #4
 800653a:	0605      	lsls	r5, r0, #24
 800653c:	d50b      	bpl.n	8006556 <_printf_i+0x9e>
 800653e:	680d      	ldr	r5, [r1, #0]
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	2d00      	cmp	r5, #0
 8006544:	da03      	bge.n	800654e <_printf_i+0x96>
 8006546:	232d      	movs	r3, #45	; 0x2d
 8006548:	9a04      	ldr	r2, [sp, #16]
 800654a:	426d      	negs	r5, r5
 800654c:	7013      	strb	r3, [r2, #0]
 800654e:	4b61      	ldr	r3, [pc, #388]	; (80066d4 <_printf_i+0x21c>)
 8006550:	270a      	movs	r7, #10
 8006552:	9303      	str	r3, [sp, #12]
 8006554:	e01b      	b.n	800658e <_printf_i+0xd6>
 8006556:	680d      	ldr	r5, [r1, #0]
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	0641      	lsls	r1, r0, #25
 800655c:	d5f1      	bpl.n	8006542 <_printf_i+0x8a>
 800655e:	b22d      	sxth	r5, r5
 8006560:	e7ef      	b.n	8006542 <_printf_i+0x8a>
 8006562:	680d      	ldr	r5, [r1, #0]
 8006564:	6819      	ldr	r1, [r3, #0]
 8006566:	1d08      	adds	r0, r1, #4
 8006568:	6018      	str	r0, [r3, #0]
 800656a:	062e      	lsls	r6, r5, #24
 800656c:	d501      	bpl.n	8006572 <_printf_i+0xba>
 800656e:	680d      	ldr	r5, [r1, #0]
 8006570:	e003      	b.n	800657a <_printf_i+0xc2>
 8006572:	066d      	lsls	r5, r5, #25
 8006574:	d5fb      	bpl.n	800656e <_printf_i+0xb6>
 8006576:	680d      	ldr	r5, [r1, #0]
 8006578:	b2ad      	uxth	r5, r5
 800657a:	4b56      	ldr	r3, [pc, #344]	; (80066d4 <_printf_i+0x21c>)
 800657c:	2708      	movs	r7, #8
 800657e:	9303      	str	r3, [sp, #12]
 8006580:	2a6f      	cmp	r2, #111	; 0x6f
 8006582:	d000      	beq.n	8006586 <_printf_i+0xce>
 8006584:	3702      	adds	r7, #2
 8006586:	0023      	movs	r3, r4
 8006588:	2200      	movs	r2, #0
 800658a:	3343      	adds	r3, #67	; 0x43
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	6863      	ldr	r3, [r4, #4]
 8006590:	60a3      	str	r3, [r4, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	db03      	blt.n	800659e <_printf_i+0xe6>
 8006596:	2204      	movs	r2, #4
 8006598:	6821      	ldr	r1, [r4, #0]
 800659a:	4391      	bics	r1, r2
 800659c:	6021      	str	r1, [r4, #0]
 800659e:	2d00      	cmp	r5, #0
 80065a0:	d102      	bne.n	80065a8 <_printf_i+0xf0>
 80065a2:	9e04      	ldr	r6, [sp, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00c      	beq.n	80065c2 <_printf_i+0x10a>
 80065a8:	9e04      	ldr	r6, [sp, #16]
 80065aa:	0028      	movs	r0, r5
 80065ac:	0039      	movs	r1, r7
 80065ae:	f7f9 fe4d 	bl	800024c <__aeabi_uidivmod>
 80065b2:	9b03      	ldr	r3, [sp, #12]
 80065b4:	3e01      	subs	r6, #1
 80065b6:	5c5b      	ldrb	r3, [r3, r1]
 80065b8:	7033      	strb	r3, [r6, #0]
 80065ba:	002b      	movs	r3, r5
 80065bc:	0005      	movs	r5, r0
 80065be:	429f      	cmp	r7, r3
 80065c0:	d9f3      	bls.n	80065aa <_printf_i+0xf2>
 80065c2:	2f08      	cmp	r7, #8
 80065c4:	d109      	bne.n	80065da <_printf_i+0x122>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	07db      	lsls	r3, r3, #31
 80065ca:	d506      	bpl.n	80065da <_printf_i+0x122>
 80065cc:	6863      	ldr	r3, [r4, #4]
 80065ce:	6922      	ldr	r2, [r4, #16]
 80065d0:	4293      	cmp	r3, r2
 80065d2:	dc02      	bgt.n	80065da <_printf_i+0x122>
 80065d4:	2330      	movs	r3, #48	; 0x30
 80065d6:	3e01      	subs	r6, #1
 80065d8:	7033      	strb	r3, [r6, #0]
 80065da:	9b04      	ldr	r3, [sp, #16]
 80065dc:	1b9b      	subs	r3, r3, r6
 80065de:	6123      	str	r3, [r4, #16]
 80065e0:	9b07      	ldr	r3, [sp, #28]
 80065e2:	0021      	movs	r1, r4
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	9805      	ldr	r0, [sp, #20]
 80065e8:	9b06      	ldr	r3, [sp, #24]
 80065ea:	aa09      	add	r2, sp, #36	; 0x24
 80065ec:	f7ff fef4 	bl	80063d8 <_printf_common>
 80065f0:	1c43      	adds	r3, r0, #1
 80065f2:	d14c      	bne.n	800668e <_printf_i+0x1d6>
 80065f4:	2001      	movs	r0, #1
 80065f6:	4240      	negs	r0, r0
 80065f8:	b00b      	add	sp, #44	; 0x2c
 80065fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065fc:	3145      	adds	r1, #69	; 0x45
 80065fe:	700a      	strb	r2, [r1, #0]
 8006600:	4a34      	ldr	r2, [pc, #208]	; (80066d4 <_printf_i+0x21c>)
 8006602:	9203      	str	r2, [sp, #12]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	6821      	ldr	r1, [r4, #0]
 8006608:	ca20      	ldmia	r2!, {r5}
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	0608      	lsls	r0, r1, #24
 800660e:	d516      	bpl.n	800663e <_printf_i+0x186>
 8006610:	07cb      	lsls	r3, r1, #31
 8006612:	d502      	bpl.n	800661a <_printf_i+0x162>
 8006614:	2320      	movs	r3, #32
 8006616:	4319      	orrs	r1, r3
 8006618:	6021      	str	r1, [r4, #0]
 800661a:	2710      	movs	r7, #16
 800661c:	2d00      	cmp	r5, #0
 800661e:	d1b2      	bne.n	8006586 <_printf_i+0xce>
 8006620:	2320      	movs	r3, #32
 8006622:	6822      	ldr	r2, [r4, #0]
 8006624:	439a      	bics	r2, r3
 8006626:	6022      	str	r2, [r4, #0]
 8006628:	e7ad      	b.n	8006586 <_printf_i+0xce>
 800662a:	2220      	movs	r2, #32
 800662c:	6809      	ldr	r1, [r1, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	6022      	str	r2, [r4, #0]
 8006632:	0022      	movs	r2, r4
 8006634:	2178      	movs	r1, #120	; 0x78
 8006636:	3245      	adds	r2, #69	; 0x45
 8006638:	7011      	strb	r1, [r2, #0]
 800663a:	4a27      	ldr	r2, [pc, #156]	; (80066d8 <_printf_i+0x220>)
 800663c:	e7e1      	b.n	8006602 <_printf_i+0x14a>
 800663e:	0648      	lsls	r0, r1, #25
 8006640:	d5e6      	bpl.n	8006610 <_printf_i+0x158>
 8006642:	b2ad      	uxth	r5, r5
 8006644:	e7e4      	b.n	8006610 <_printf_i+0x158>
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	680d      	ldr	r5, [r1, #0]
 800664a:	1d10      	adds	r0, r2, #4
 800664c:	6949      	ldr	r1, [r1, #20]
 800664e:	6018      	str	r0, [r3, #0]
 8006650:	6813      	ldr	r3, [r2, #0]
 8006652:	062e      	lsls	r6, r5, #24
 8006654:	d501      	bpl.n	800665a <_printf_i+0x1a2>
 8006656:	6019      	str	r1, [r3, #0]
 8006658:	e002      	b.n	8006660 <_printf_i+0x1a8>
 800665a:	066d      	lsls	r5, r5, #25
 800665c:	d5fb      	bpl.n	8006656 <_printf_i+0x19e>
 800665e:	8019      	strh	r1, [r3, #0]
 8006660:	2300      	movs	r3, #0
 8006662:	9e04      	ldr	r6, [sp, #16]
 8006664:	6123      	str	r3, [r4, #16]
 8006666:	e7bb      	b.n	80065e0 <_printf_i+0x128>
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	1d11      	adds	r1, r2, #4
 800666c:	6019      	str	r1, [r3, #0]
 800666e:	6816      	ldr	r6, [r2, #0]
 8006670:	2100      	movs	r1, #0
 8006672:	0030      	movs	r0, r6
 8006674:	6862      	ldr	r2, [r4, #4]
 8006676:	f002 fb5d 	bl	8008d34 <memchr>
 800667a:	2800      	cmp	r0, #0
 800667c:	d001      	beq.n	8006682 <_printf_i+0x1ca>
 800667e:	1b80      	subs	r0, r0, r6
 8006680:	6060      	str	r0, [r4, #4]
 8006682:	6863      	ldr	r3, [r4, #4]
 8006684:	6123      	str	r3, [r4, #16]
 8006686:	2300      	movs	r3, #0
 8006688:	9a04      	ldr	r2, [sp, #16]
 800668a:	7013      	strb	r3, [r2, #0]
 800668c:	e7a8      	b.n	80065e0 <_printf_i+0x128>
 800668e:	6923      	ldr	r3, [r4, #16]
 8006690:	0032      	movs	r2, r6
 8006692:	9906      	ldr	r1, [sp, #24]
 8006694:	9805      	ldr	r0, [sp, #20]
 8006696:	9d07      	ldr	r5, [sp, #28]
 8006698:	47a8      	blx	r5
 800669a:	1c43      	adds	r3, r0, #1
 800669c:	d0aa      	beq.n	80065f4 <_printf_i+0x13c>
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	079b      	lsls	r3, r3, #30
 80066a2:	d415      	bmi.n	80066d0 <_printf_i+0x218>
 80066a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a6:	68e0      	ldr	r0, [r4, #12]
 80066a8:	4298      	cmp	r0, r3
 80066aa:	daa5      	bge.n	80065f8 <_printf_i+0x140>
 80066ac:	0018      	movs	r0, r3
 80066ae:	e7a3      	b.n	80065f8 <_printf_i+0x140>
 80066b0:	0022      	movs	r2, r4
 80066b2:	2301      	movs	r3, #1
 80066b4:	9906      	ldr	r1, [sp, #24]
 80066b6:	9805      	ldr	r0, [sp, #20]
 80066b8:	9e07      	ldr	r6, [sp, #28]
 80066ba:	3219      	adds	r2, #25
 80066bc:	47b0      	blx	r6
 80066be:	1c43      	adds	r3, r0, #1
 80066c0:	d098      	beq.n	80065f4 <_printf_i+0x13c>
 80066c2:	3501      	adds	r5, #1
 80066c4:	68e3      	ldr	r3, [r4, #12]
 80066c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066c8:	1a9b      	subs	r3, r3, r2
 80066ca:	42ab      	cmp	r3, r5
 80066cc:	dcf0      	bgt.n	80066b0 <_printf_i+0x1f8>
 80066ce:	e7e9      	b.n	80066a4 <_printf_i+0x1ec>
 80066d0:	2500      	movs	r5, #0
 80066d2:	e7f7      	b.n	80066c4 <_printf_i+0x20c>
 80066d4:	0800a98e 	.word	0x0800a98e
 80066d8:	0800a99f 	.word	0x0800a99f

080066dc <_scanf_float>:
 80066dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066de:	b08b      	sub	sp, #44	; 0x2c
 80066e0:	0015      	movs	r5, r2
 80066e2:	9001      	str	r0, [sp, #4]
 80066e4:	22ae      	movs	r2, #174	; 0xae
 80066e6:	2000      	movs	r0, #0
 80066e8:	9306      	str	r3, [sp, #24]
 80066ea:	688b      	ldr	r3, [r1, #8]
 80066ec:	000e      	movs	r6, r1
 80066ee:	1e59      	subs	r1, r3, #1
 80066f0:	0052      	lsls	r2, r2, #1
 80066f2:	9005      	str	r0, [sp, #20]
 80066f4:	4291      	cmp	r1, r2
 80066f6:	d905      	bls.n	8006704 <_scanf_float+0x28>
 80066f8:	3b5e      	subs	r3, #94	; 0x5e
 80066fa:	3bff      	subs	r3, #255	; 0xff
 80066fc:	9305      	str	r3, [sp, #20]
 80066fe:	235e      	movs	r3, #94	; 0x5e
 8006700:	33ff      	adds	r3, #255	; 0xff
 8006702:	60b3      	str	r3, [r6, #8]
 8006704:	23f0      	movs	r3, #240	; 0xf0
 8006706:	6832      	ldr	r2, [r6, #0]
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	4313      	orrs	r3, r2
 800670c:	6033      	str	r3, [r6, #0]
 800670e:	0033      	movs	r3, r6
 8006710:	2400      	movs	r4, #0
 8006712:	331c      	adds	r3, #28
 8006714:	001f      	movs	r7, r3
 8006716:	9303      	str	r3, [sp, #12]
 8006718:	9402      	str	r4, [sp, #8]
 800671a:	9408      	str	r4, [sp, #32]
 800671c:	9407      	str	r4, [sp, #28]
 800671e:	9400      	str	r4, [sp, #0]
 8006720:	9404      	str	r4, [sp, #16]
 8006722:	68b2      	ldr	r2, [r6, #8]
 8006724:	2a00      	cmp	r2, #0
 8006726:	d00a      	beq.n	800673e <_scanf_float+0x62>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	2b4e      	cmp	r3, #78	; 0x4e
 800672e:	d844      	bhi.n	80067ba <_scanf_float+0xde>
 8006730:	0018      	movs	r0, r3
 8006732:	2b40      	cmp	r3, #64	; 0x40
 8006734:	d82c      	bhi.n	8006790 <_scanf_float+0xb4>
 8006736:	382b      	subs	r0, #43	; 0x2b
 8006738:	b2c1      	uxtb	r1, r0
 800673a:	290e      	cmp	r1, #14
 800673c:	d92a      	bls.n	8006794 <_scanf_float+0xb8>
 800673e:	9b00      	ldr	r3, [sp, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <_scanf_float+0x70>
 8006744:	6832      	ldr	r2, [r6, #0]
 8006746:	4ba4      	ldr	r3, [pc, #656]	; (80069d8 <_scanf_float+0x2fc>)
 8006748:	4013      	ands	r3, r2
 800674a:	6033      	str	r3, [r6, #0]
 800674c:	9b02      	ldr	r3, [sp, #8]
 800674e:	3b01      	subs	r3, #1
 8006750:	2b01      	cmp	r3, #1
 8006752:	d900      	bls.n	8006756 <_scanf_float+0x7a>
 8006754:	e0f9      	b.n	800694a <_scanf_float+0x26e>
 8006756:	24be      	movs	r4, #190	; 0xbe
 8006758:	0064      	lsls	r4, r4, #1
 800675a:	9b03      	ldr	r3, [sp, #12]
 800675c:	429f      	cmp	r7, r3
 800675e:	d900      	bls.n	8006762 <_scanf_float+0x86>
 8006760:	e0e9      	b.n	8006936 <_scanf_float+0x25a>
 8006762:	2301      	movs	r3, #1
 8006764:	9302      	str	r3, [sp, #8]
 8006766:	e185      	b.n	8006a74 <_scanf_float+0x398>
 8006768:	0018      	movs	r0, r3
 800676a:	3861      	subs	r0, #97	; 0x61
 800676c:	280d      	cmp	r0, #13
 800676e:	d8e6      	bhi.n	800673e <_scanf_float+0x62>
 8006770:	f7f9 fcdc 	bl	800012c <__gnu_thumb1_case_shi>
 8006774:	ffe50083 	.word	0xffe50083
 8006778:	ffe5ffe5 	.word	0xffe5ffe5
 800677c:	00a200b6 	.word	0x00a200b6
 8006780:	ffe5ffe5 	.word	0xffe5ffe5
 8006784:	ffe50089 	.word	0xffe50089
 8006788:	ffe5ffe5 	.word	0xffe5ffe5
 800678c:	0065ffe5 	.word	0x0065ffe5
 8006790:	3841      	subs	r0, #65	; 0x41
 8006792:	e7eb      	b.n	800676c <_scanf_float+0x90>
 8006794:	280e      	cmp	r0, #14
 8006796:	d8d2      	bhi.n	800673e <_scanf_float+0x62>
 8006798:	f7f9 fcc8 	bl	800012c <__gnu_thumb1_case_shi>
 800679c:	ffd1004b 	.word	0xffd1004b
 80067a0:	0098004b 	.word	0x0098004b
 80067a4:	0020ffd1 	.word	0x0020ffd1
 80067a8:	00400040 	.word	0x00400040
 80067ac:	00400040 	.word	0x00400040
 80067b0:	00400040 	.word	0x00400040
 80067b4:	00400040 	.word	0x00400040
 80067b8:	0040      	.short	0x0040
 80067ba:	2b6e      	cmp	r3, #110	; 0x6e
 80067bc:	d809      	bhi.n	80067d2 <_scanf_float+0xf6>
 80067be:	2b60      	cmp	r3, #96	; 0x60
 80067c0:	d8d2      	bhi.n	8006768 <_scanf_float+0x8c>
 80067c2:	2b54      	cmp	r3, #84	; 0x54
 80067c4:	d07d      	beq.n	80068c2 <_scanf_float+0x1e6>
 80067c6:	2b59      	cmp	r3, #89	; 0x59
 80067c8:	d1b9      	bne.n	800673e <_scanf_float+0x62>
 80067ca:	2c07      	cmp	r4, #7
 80067cc:	d1b7      	bne.n	800673e <_scanf_float+0x62>
 80067ce:	2408      	movs	r4, #8
 80067d0:	e02c      	b.n	800682c <_scanf_float+0x150>
 80067d2:	2b74      	cmp	r3, #116	; 0x74
 80067d4:	d075      	beq.n	80068c2 <_scanf_float+0x1e6>
 80067d6:	2b79      	cmp	r3, #121	; 0x79
 80067d8:	d0f7      	beq.n	80067ca <_scanf_float+0xee>
 80067da:	e7b0      	b.n	800673e <_scanf_float+0x62>
 80067dc:	6831      	ldr	r1, [r6, #0]
 80067de:	05c8      	lsls	r0, r1, #23
 80067e0:	d51c      	bpl.n	800681c <_scanf_float+0x140>
 80067e2:	2380      	movs	r3, #128	; 0x80
 80067e4:	4399      	bics	r1, r3
 80067e6:	9b00      	ldr	r3, [sp, #0]
 80067e8:	6031      	str	r1, [r6, #0]
 80067ea:	3301      	adds	r3, #1
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	9b05      	ldr	r3, [sp, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <_scanf_float+0x120>
 80067f4:	3b01      	subs	r3, #1
 80067f6:	3201      	adds	r2, #1
 80067f8:	9305      	str	r3, [sp, #20]
 80067fa:	60b2      	str	r2, [r6, #8]
 80067fc:	68b3      	ldr	r3, [r6, #8]
 80067fe:	3b01      	subs	r3, #1
 8006800:	60b3      	str	r3, [r6, #8]
 8006802:	6933      	ldr	r3, [r6, #16]
 8006804:	3301      	adds	r3, #1
 8006806:	6133      	str	r3, [r6, #16]
 8006808:	686b      	ldr	r3, [r5, #4]
 800680a:	3b01      	subs	r3, #1
 800680c:	606b      	str	r3, [r5, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	dc00      	bgt.n	8006814 <_scanf_float+0x138>
 8006812:	e086      	b.n	8006922 <_scanf_float+0x246>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	3301      	adds	r3, #1
 8006818:	602b      	str	r3, [r5, #0]
 800681a:	e782      	b.n	8006722 <_scanf_float+0x46>
 800681c:	9a02      	ldr	r2, [sp, #8]
 800681e:	1912      	adds	r2, r2, r4
 8006820:	2a00      	cmp	r2, #0
 8006822:	d18c      	bne.n	800673e <_scanf_float+0x62>
 8006824:	4a6d      	ldr	r2, [pc, #436]	; (80069dc <_scanf_float+0x300>)
 8006826:	6831      	ldr	r1, [r6, #0]
 8006828:	400a      	ands	r2, r1
 800682a:	6032      	str	r2, [r6, #0]
 800682c:	703b      	strb	r3, [r7, #0]
 800682e:	3701      	adds	r7, #1
 8006830:	e7e4      	b.n	80067fc <_scanf_float+0x120>
 8006832:	2180      	movs	r1, #128	; 0x80
 8006834:	6832      	ldr	r2, [r6, #0]
 8006836:	420a      	tst	r2, r1
 8006838:	d081      	beq.n	800673e <_scanf_float+0x62>
 800683a:	438a      	bics	r2, r1
 800683c:	e7f5      	b.n	800682a <_scanf_float+0x14e>
 800683e:	9a02      	ldr	r2, [sp, #8]
 8006840:	2a00      	cmp	r2, #0
 8006842:	d10f      	bne.n	8006864 <_scanf_float+0x188>
 8006844:	9a00      	ldr	r2, [sp, #0]
 8006846:	2a00      	cmp	r2, #0
 8006848:	d10f      	bne.n	800686a <_scanf_float+0x18e>
 800684a:	6832      	ldr	r2, [r6, #0]
 800684c:	21e0      	movs	r1, #224	; 0xe0
 800684e:	0010      	movs	r0, r2
 8006850:	00c9      	lsls	r1, r1, #3
 8006852:	4008      	ands	r0, r1
 8006854:	4288      	cmp	r0, r1
 8006856:	d108      	bne.n	800686a <_scanf_float+0x18e>
 8006858:	4961      	ldr	r1, [pc, #388]	; (80069e0 <_scanf_float+0x304>)
 800685a:	400a      	ands	r2, r1
 800685c:	6032      	str	r2, [r6, #0]
 800685e:	2201      	movs	r2, #1
 8006860:	9202      	str	r2, [sp, #8]
 8006862:	e7e3      	b.n	800682c <_scanf_float+0x150>
 8006864:	9a02      	ldr	r2, [sp, #8]
 8006866:	2a02      	cmp	r2, #2
 8006868:	d059      	beq.n	800691e <_scanf_float+0x242>
 800686a:	2c01      	cmp	r4, #1
 800686c:	d002      	beq.n	8006874 <_scanf_float+0x198>
 800686e:	2c04      	cmp	r4, #4
 8006870:	d000      	beq.n	8006874 <_scanf_float+0x198>
 8006872:	e764      	b.n	800673e <_scanf_float+0x62>
 8006874:	3401      	adds	r4, #1
 8006876:	b2e4      	uxtb	r4, r4
 8006878:	e7d8      	b.n	800682c <_scanf_float+0x150>
 800687a:	9a02      	ldr	r2, [sp, #8]
 800687c:	2a01      	cmp	r2, #1
 800687e:	d000      	beq.n	8006882 <_scanf_float+0x1a6>
 8006880:	e75d      	b.n	800673e <_scanf_float+0x62>
 8006882:	2202      	movs	r2, #2
 8006884:	e7ec      	b.n	8006860 <_scanf_float+0x184>
 8006886:	2c00      	cmp	r4, #0
 8006888:	d110      	bne.n	80068ac <_scanf_float+0x1d0>
 800688a:	9a00      	ldr	r2, [sp, #0]
 800688c:	2a00      	cmp	r2, #0
 800688e:	d000      	beq.n	8006892 <_scanf_float+0x1b6>
 8006890:	e758      	b.n	8006744 <_scanf_float+0x68>
 8006892:	6832      	ldr	r2, [r6, #0]
 8006894:	21e0      	movs	r1, #224	; 0xe0
 8006896:	0010      	movs	r0, r2
 8006898:	00c9      	lsls	r1, r1, #3
 800689a:	4008      	ands	r0, r1
 800689c:	4288      	cmp	r0, r1
 800689e:	d000      	beq.n	80068a2 <_scanf_float+0x1c6>
 80068a0:	e754      	b.n	800674c <_scanf_float+0x70>
 80068a2:	494f      	ldr	r1, [pc, #316]	; (80069e0 <_scanf_float+0x304>)
 80068a4:	3401      	adds	r4, #1
 80068a6:	400a      	ands	r2, r1
 80068a8:	6032      	str	r2, [r6, #0]
 80068aa:	e7bf      	b.n	800682c <_scanf_float+0x150>
 80068ac:	21fd      	movs	r1, #253	; 0xfd
 80068ae:	1ee2      	subs	r2, r4, #3
 80068b0:	420a      	tst	r2, r1
 80068b2:	d000      	beq.n	80068b6 <_scanf_float+0x1da>
 80068b4:	e743      	b.n	800673e <_scanf_float+0x62>
 80068b6:	e7dd      	b.n	8006874 <_scanf_float+0x198>
 80068b8:	2c02      	cmp	r4, #2
 80068ba:	d000      	beq.n	80068be <_scanf_float+0x1e2>
 80068bc:	e73f      	b.n	800673e <_scanf_float+0x62>
 80068be:	2403      	movs	r4, #3
 80068c0:	e7b4      	b.n	800682c <_scanf_float+0x150>
 80068c2:	2c06      	cmp	r4, #6
 80068c4:	d000      	beq.n	80068c8 <_scanf_float+0x1ec>
 80068c6:	e73a      	b.n	800673e <_scanf_float+0x62>
 80068c8:	2407      	movs	r4, #7
 80068ca:	e7af      	b.n	800682c <_scanf_float+0x150>
 80068cc:	6832      	ldr	r2, [r6, #0]
 80068ce:	0591      	lsls	r1, r2, #22
 80068d0:	d400      	bmi.n	80068d4 <_scanf_float+0x1f8>
 80068d2:	e734      	b.n	800673e <_scanf_float+0x62>
 80068d4:	4943      	ldr	r1, [pc, #268]	; (80069e4 <_scanf_float+0x308>)
 80068d6:	400a      	ands	r2, r1
 80068d8:	6032      	str	r2, [r6, #0]
 80068da:	9a00      	ldr	r2, [sp, #0]
 80068dc:	9204      	str	r2, [sp, #16]
 80068de:	e7a5      	b.n	800682c <_scanf_float+0x150>
 80068e0:	21a0      	movs	r1, #160	; 0xa0
 80068e2:	2080      	movs	r0, #128	; 0x80
 80068e4:	6832      	ldr	r2, [r6, #0]
 80068e6:	00c9      	lsls	r1, r1, #3
 80068e8:	4011      	ands	r1, r2
 80068ea:	00c0      	lsls	r0, r0, #3
 80068ec:	4281      	cmp	r1, r0
 80068ee:	d006      	beq.n	80068fe <_scanf_float+0x222>
 80068f0:	4202      	tst	r2, r0
 80068f2:	d100      	bne.n	80068f6 <_scanf_float+0x21a>
 80068f4:	e723      	b.n	800673e <_scanf_float+0x62>
 80068f6:	9900      	ldr	r1, [sp, #0]
 80068f8:	2900      	cmp	r1, #0
 80068fa:	d100      	bne.n	80068fe <_scanf_float+0x222>
 80068fc:	e726      	b.n	800674c <_scanf_float+0x70>
 80068fe:	0591      	lsls	r1, r2, #22
 8006900:	d404      	bmi.n	800690c <_scanf_float+0x230>
 8006902:	9900      	ldr	r1, [sp, #0]
 8006904:	9804      	ldr	r0, [sp, #16]
 8006906:	9708      	str	r7, [sp, #32]
 8006908:	1a09      	subs	r1, r1, r0
 800690a:	9107      	str	r1, [sp, #28]
 800690c:	4934      	ldr	r1, [pc, #208]	; (80069e0 <_scanf_float+0x304>)
 800690e:	400a      	ands	r2, r1
 8006910:	21c0      	movs	r1, #192	; 0xc0
 8006912:	0049      	lsls	r1, r1, #1
 8006914:	430a      	orrs	r2, r1
 8006916:	6032      	str	r2, [r6, #0]
 8006918:	2200      	movs	r2, #0
 800691a:	9200      	str	r2, [sp, #0]
 800691c:	e786      	b.n	800682c <_scanf_float+0x150>
 800691e:	2203      	movs	r2, #3
 8006920:	e79e      	b.n	8006860 <_scanf_float+0x184>
 8006922:	23c0      	movs	r3, #192	; 0xc0
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	0029      	movs	r1, r5
 8006928:	58f3      	ldr	r3, [r6, r3]
 800692a:	9801      	ldr	r0, [sp, #4]
 800692c:	4798      	blx	r3
 800692e:	2800      	cmp	r0, #0
 8006930:	d100      	bne.n	8006934 <_scanf_float+0x258>
 8006932:	e6f6      	b.n	8006722 <_scanf_float+0x46>
 8006934:	e703      	b.n	800673e <_scanf_float+0x62>
 8006936:	3f01      	subs	r7, #1
 8006938:	5933      	ldr	r3, [r6, r4]
 800693a:	002a      	movs	r2, r5
 800693c:	7839      	ldrb	r1, [r7, #0]
 800693e:	9801      	ldr	r0, [sp, #4]
 8006940:	4798      	blx	r3
 8006942:	6933      	ldr	r3, [r6, #16]
 8006944:	3b01      	subs	r3, #1
 8006946:	6133      	str	r3, [r6, #16]
 8006948:	e707      	b.n	800675a <_scanf_float+0x7e>
 800694a:	1e63      	subs	r3, r4, #1
 800694c:	2b06      	cmp	r3, #6
 800694e:	d80e      	bhi.n	800696e <_scanf_float+0x292>
 8006950:	9702      	str	r7, [sp, #8]
 8006952:	2c02      	cmp	r4, #2
 8006954:	d920      	bls.n	8006998 <_scanf_float+0x2bc>
 8006956:	1be3      	subs	r3, r4, r7
 8006958:	b2db      	uxtb	r3, r3
 800695a:	9305      	str	r3, [sp, #20]
 800695c:	9b02      	ldr	r3, [sp, #8]
 800695e:	9a05      	ldr	r2, [sp, #20]
 8006960:	189b      	adds	r3, r3, r2
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b03      	cmp	r3, #3
 8006966:	d827      	bhi.n	80069b8 <_scanf_float+0x2dc>
 8006968:	3c03      	subs	r4, #3
 800696a:	b2e4      	uxtb	r4, r4
 800696c:	1b3f      	subs	r7, r7, r4
 800696e:	6833      	ldr	r3, [r6, #0]
 8006970:	05da      	lsls	r2, r3, #23
 8006972:	d554      	bpl.n	8006a1e <_scanf_float+0x342>
 8006974:	055b      	lsls	r3, r3, #21
 8006976:	d537      	bpl.n	80069e8 <_scanf_float+0x30c>
 8006978:	24be      	movs	r4, #190	; 0xbe
 800697a:	0064      	lsls	r4, r4, #1
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	429f      	cmp	r7, r3
 8006980:	d800      	bhi.n	8006984 <_scanf_float+0x2a8>
 8006982:	e6ee      	b.n	8006762 <_scanf_float+0x86>
 8006984:	3f01      	subs	r7, #1
 8006986:	5933      	ldr	r3, [r6, r4]
 8006988:	002a      	movs	r2, r5
 800698a:	7839      	ldrb	r1, [r7, #0]
 800698c:	9801      	ldr	r0, [sp, #4]
 800698e:	4798      	blx	r3
 8006990:	6933      	ldr	r3, [r6, #16]
 8006992:	3b01      	subs	r3, #1
 8006994:	6133      	str	r3, [r6, #16]
 8006996:	e7f1      	b.n	800697c <_scanf_float+0x2a0>
 8006998:	24be      	movs	r4, #190	; 0xbe
 800699a:	0064      	lsls	r4, r4, #1
 800699c:	9b03      	ldr	r3, [sp, #12]
 800699e:	429f      	cmp	r7, r3
 80069a0:	d800      	bhi.n	80069a4 <_scanf_float+0x2c8>
 80069a2:	e6de      	b.n	8006762 <_scanf_float+0x86>
 80069a4:	3f01      	subs	r7, #1
 80069a6:	5933      	ldr	r3, [r6, r4]
 80069a8:	002a      	movs	r2, r5
 80069aa:	7839      	ldrb	r1, [r7, #0]
 80069ac:	9801      	ldr	r0, [sp, #4]
 80069ae:	4798      	blx	r3
 80069b0:	6933      	ldr	r3, [r6, #16]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	6133      	str	r3, [r6, #16]
 80069b6:	e7f1      	b.n	800699c <_scanf_float+0x2c0>
 80069b8:	9b02      	ldr	r3, [sp, #8]
 80069ba:	002a      	movs	r2, r5
 80069bc:	3b01      	subs	r3, #1
 80069be:	7819      	ldrb	r1, [r3, #0]
 80069c0:	9302      	str	r3, [sp, #8]
 80069c2:	23be      	movs	r3, #190	; 0xbe
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	58f3      	ldr	r3, [r6, r3]
 80069c8:	9801      	ldr	r0, [sp, #4]
 80069ca:	9309      	str	r3, [sp, #36]	; 0x24
 80069cc:	4798      	blx	r3
 80069ce:	6933      	ldr	r3, [r6, #16]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	6133      	str	r3, [r6, #16]
 80069d4:	e7c2      	b.n	800695c <_scanf_float+0x280>
 80069d6:	46c0      	nop			; (mov r8, r8)
 80069d8:	fffffeff 	.word	0xfffffeff
 80069dc:	fffffe7f 	.word	0xfffffe7f
 80069e0:	fffff87f 	.word	0xfffff87f
 80069e4:	fffffd7f 	.word	0xfffffd7f
 80069e8:	6933      	ldr	r3, [r6, #16]
 80069ea:	1e7c      	subs	r4, r7, #1
 80069ec:	7821      	ldrb	r1, [r4, #0]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	6133      	str	r3, [r6, #16]
 80069f2:	2965      	cmp	r1, #101	; 0x65
 80069f4:	d00c      	beq.n	8006a10 <_scanf_float+0x334>
 80069f6:	2945      	cmp	r1, #69	; 0x45
 80069f8:	d00a      	beq.n	8006a10 <_scanf_float+0x334>
 80069fa:	23be      	movs	r3, #190	; 0xbe
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	58f3      	ldr	r3, [r6, r3]
 8006a00:	002a      	movs	r2, r5
 8006a02:	9801      	ldr	r0, [sp, #4]
 8006a04:	4798      	blx	r3
 8006a06:	6933      	ldr	r3, [r6, #16]
 8006a08:	1ebc      	subs	r4, r7, #2
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	7821      	ldrb	r1, [r4, #0]
 8006a0e:	6133      	str	r3, [r6, #16]
 8006a10:	23be      	movs	r3, #190	; 0xbe
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	002a      	movs	r2, r5
 8006a16:	58f3      	ldr	r3, [r6, r3]
 8006a18:	9801      	ldr	r0, [sp, #4]
 8006a1a:	4798      	blx	r3
 8006a1c:	0027      	movs	r7, r4
 8006a1e:	6832      	ldr	r2, [r6, #0]
 8006a20:	2310      	movs	r3, #16
 8006a22:	0011      	movs	r1, r2
 8006a24:	4019      	ands	r1, r3
 8006a26:	9102      	str	r1, [sp, #8]
 8006a28:	421a      	tst	r2, r3
 8006a2a:	d158      	bne.n	8006ade <_scanf_float+0x402>
 8006a2c:	23c0      	movs	r3, #192	; 0xc0
 8006a2e:	7039      	strb	r1, [r7, #0]
 8006a30:	6832      	ldr	r2, [r6, #0]
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	4013      	ands	r3, r2
 8006a36:	2280      	movs	r2, #128	; 0x80
 8006a38:	00d2      	lsls	r2, r2, #3
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d11d      	bne.n	8006a7a <_scanf_float+0x39e>
 8006a3e:	9b04      	ldr	r3, [sp, #16]
 8006a40:	9a00      	ldr	r2, [sp, #0]
 8006a42:	9900      	ldr	r1, [sp, #0]
 8006a44:	1a9a      	subs	r2, r3, r2
 8006a46:	428b      	cmp	r3, r1
 8006a48:	d124      	bne.n	8006a94 <_scanf_float+0x3b8>
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	9903      	ldr	r1, [sp, #12]
 8006a4e:	9801      	ldr	r0, [sp, #4]
 8006a50:	f000 fe9c 	bl	800778c <_strtod_r>
 8006a54:	9b06      	ldr	r3, [sp, #24]
 8006a56:	000d      	movs	r5, r1
 8006a58:	6831      	ldr	r1, [r6, #0]
 8006a5a:	0004      	movs	r4, r0
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	078a      	lsls	r2, r1, #30
 8006a60:	d525      	bpl.n	8006aae <_scanf_float+0x3d2>
 8006a62:	1d1a      	adds	r2, r3, #4
 8006a64:	9906      	ldr	r1, [sp, #24]
 8006a66:	600a      	str	r2, [r1, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	601c      	str	r4, [r3, #0]
 8006a6c:	605d      	str	r5, [r3, #4]
 8006a6e:	68f3      	ldr	r3, [r6, #12]
 8006a70:	3301      	adds	r3, #1
 8006a72:	60f3      	str	r3, [r6, #12]
 8006a74:	9802      	ldr	r0, [sp, #8]
 8006a76:	b00b      	add	sp, #44	; 0x2c
 8006a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a7a:	9b07      	ldr	r3, [sp, #28]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0e4      	beq.n	8006a4a <_scanf_float+0x36e>
 8006a80:	9b08      	ldr	r3, [sp, #32]
 8006a82:	9a02      	ldr	r2, [sp, #8]
 8006a84:	1c59      	adds	r1, r3, #1
 8006a86:	9801      	ldr	r0, [sp, #4]
 8006a88:	230a      	movs	r3, #10
 8006a8a:	f000 ff15 	bl	80078b8 <_strtol_r>
 8006a8e:	9b07      	ldr	r3, [sp, #28]
 8006a90:	9f08      	ldr	r7, [sp, #32]
 8006a92:	1ac2      	subs	r2, r0, r3
 8006a94:	0033      	movs	r3, r6
 8006a96:	3370      	adds	r3, #112	; 0x70
 8006a98:	33ff      	adds	r3, #255	; 0xff
 8006a9a:	429f      	cmp	r7, r3
 8006a9c:	d302      	bcc.n	8006aa4 <_scanf_float+0x3c8>
 8006a9e:	0037      	movs	r7, r6
 8006aa0:	376f      	adds	r7, #111	; 0x6f
 8006aa2:	37ff      	adds	r7, #255	; 0xff
 8006aa4:	0038      	movs	r0, r7
 8006aa6:	490f      	ldr	r1, [pc, #60]	; (8006ae4 <_scanf_float+0x408>)
 8006aa8:	f000 f824 	bl	8006af4 <siprintf>
 8006aac:	e7cd      	b.n	8006a4a <_scanf_float+0x36e>
 8006aae:	1d1a      	adds	r2, r3, #4
 8006ab0:	0749      	lsls	r1, r1, #29
 8006ab2:	d4d7      	bmi.n	8006a64 <_scanf_float+0x388>
 8006ab4:	9906      	ldr	r1, [sp, #24]
 8006ab6:	0020      	movs	r0, r4
 8006ab8:	600a      	str	r2, [r1, #0]
 8006aba:	681f      	ldr	r7, [r3, #0]
 8006abc:	0022      	movs	r2, r4
 8006abe:	002b      	movs	r3, r5
 8006ac0:	0029      	movs	r1, r5
 8006ac2:	f7fb fa9d 	bl	8002000 <__aeabi_dcmpun>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d004      	beq.n	8006ad4 <_scanf_float+0x3f8>
 8006aca:	4807      	ldr	r0, [pc, #28]	; (8006ae8 <_scanf_float+0x40c>)
 8006acc:	f000 f80e 	bl	8006aec <nanf>
 8006ad0:	6038      	str	r0, [r7, #0]
 8006ad2:	e7cc      	b.n	8006a6e <_scanf_float+0x392>
 8006ad4:	0020      	movs	r0, r4
 8006ad6:	0029      	movs	r1, r5
 8006ad8:	f7fb fb84 	bl	80021e4 <__aeabi_d2f>
 8006adc:	e7f8      	b.n	8006ad0 <_scanf_float+0x3f4>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e640      	b.n	8006764 <_scanf_float+0x88>
 8006ae2:	46c0      	nop			; (mov r8, r8)
 8006ae4:	0800a9b0 	.word	0x0800a9b0
 8006ae8:	0800adb8 	.word	0x0800adb8

08006aec <nanf>:
 8006aec:	4800      	ldr	r0, [pc, #0]	; (8006af0 <nanf+0x4>)
 8006aee:	4770      	bx	lr
 8006af0:	7fc00000 	.word	0x7fc00000

08006af4 <siprintf>:
 8006af4:	b40e      	push	{r1, r2, r3}
 8006af6:	b500      	push	{lr}
 8006af8:	490b      	ldr	r1, [pc, #44]	; (8006b28 <siprintf+0x34>)
 8006afa:	b09c      	sub	sp, #112	; 0x70
 8006afc:	ab1d      	add	r3, sp, #116	; 0x74
 8006afe:	9002      	str	r0, [sp, #8]
 8006b00:	9006      	str	r0, [sp, #24]
 8006b02:	9107      	str	r1, [sp, #28]
 8006b04:	9104      	str	r1, [sp, #16]
 8006b06:	4809      	ldr	r0, [pc, #36]	; (8006b2c <siprintf+0x38>)
 8006b08:	4909      	ldr	r1, [pc, #36]	; (8006b30 <siprintf+0x3c>)
 8006b0a:	cb04      	ldmia	r3!, {r2}
 8006b0c:	9105      	str	r1, [sp, #20]
 8006b0e:	6800      	ldr	r0, [r0, #0]
 8006b10:	a902      	add	r1, sp, #8
 8006b12:	9301      	str	r3, [sp, #4]
 8006b14:	f002 ff5c 	bl	80099d0 <_svfiprintf_r>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9a02      	ldr	r2, [sp, #8]
 8006b1c:	7013      	strb	r3, [r2, #0]
 8006b1e:	b01c      	add	sp, #112	; 0x70
 8006b20:	bc08      	pop	{r3}
 8006b22:	b003      	add	sp, #12
 8006b24:	4718      	bx	r3
 8006b26:	46c0      	nop			; (mov r8, r8)
 8006b28:	7fffffff 	.word	0x7fffffff
 8006b2c:	2000000c 	.word	0x2000000c
 8006b30:	ffff0208 	.word	0xffff0208

08006b34 <sulp>:
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	0016      	movs	r6, r2
 8006b38:	000d      	movs	r5, r1
 8006b3a:	f002 fc93 	bl	8009464 <__ulp>
 8006b3e:	2e00      	cmp	r6, #0
 8006b40:	d00d      	beq.n	8006b5e <sulp+0x2a>
 8006b42:	236b      	movs	r3, #107	; 0x6b
 8006b44:	006a      	lsls	r2, r5, #1
 8006b46:	0d52      	lsrs	r2, r2, #21
 8006b48:	1a9b      	subs	r3, r3, r2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	dd07      	ble.n	8006b5e <sulp+0x2a>
 8006b4e:	2400      	movs	r4, #0
 8006b50:	4a03      	ldr	r2, [pc, #12]	; (8006b60 <sulp+0x2c>)
 8006b52:	051b      	lsls	r3, r3, #20
 8006b54:	189d      	adds	r5, r3, r2
 8006b56:	002b      	movs	r3, r5
 8006b58:	0022      	movs	r2, r4
 8006b5a:	f7fa fc53 	bl	8001404 <__aeabi_dmul>
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
 8006b60:	3ff00000 	.word	0x3ff00000

08006b64 <_strtod_l>:
 8006b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b66:	001d      	movs	r5, r3
 8006b68:	2300      	movs	r3, #0
 8006b6a:	b0a5      	sub	sp, #148	; 0x94
 8006b6c:	9320      	str	r3, [sp, #128]	; 0x80
 8006b6e:	4bac      	ldr	r3, [pc, #688]	; (8006e20 <_strtod_l+0x2bc>)
 8006b70:	9005      	str	r0, [sp, #20]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	9108      	str	r1, [sp, #32]
 8006b76:	0018      	movs	r0, r3
 8006b78:	9307      	str	r3, [sp, #28]
 8006b7a:	921b      	str	r2, [sp, #108]	; 0x6c
 8006b7c:	f7f9 fac4 	bl	8000108 <strlen>
 8006b80:	2600      	movs	r6, #0
 8006b82:	0004      	movs	r4, r0
 8006b84:	2700      	movs	r7, #0
 8006b86:	9b08      	ldr	r3, [sp, #32]
 8006b88:	931f      	str	r3, [sp, #124]	; 0x7c
 8006b8a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006b8c:	7813      	ldrb	r3, [r2, #0]
 8006b8e:	2b2b      	cmp	r3, #43	; 0x2b
 8006b90:	d058      	beq.n	8006c44 <_strtod_l+0xe0>
 8006b92:	d844      	bhi.n	8006c1e <_strtod_l+0xba>
 8006b94:	2b0d      	cmp	r3, #13
 8006b96:	d83d      	bhi.n	8006c14 <_strtod_l+0xb0>
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d83d      	bhi.n	8006c18 <_strtod_l+0xb4>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d047      	beq.n	8006c30 <_strtod_l+0xcc>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	930e      	str	r3, [sp, #56]	; 0x38
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ba8:	920a      	str	r2, [sp, #40]	; 0x28
 8006baa:	9306      	str	r3, [sp, #24]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	2b30      	cmp	r3, #48	; 0x30
 8006bb0:	d000      	beq.n	8006bb4 <_strtod_l+0x50>
 8006bb2:	e07f      	b.n	8006cb4 <_strtod_l+0x150>
 8006bb4:	9b06      	ldr	r3, [sp, #24]
 8006bb6:	3220      	adds	r2, #32
 8006bb8:	785b      	ldrb	r3, [r3, #1]
 8006bba:	4393      	bics	r3, r2
 8006bbc:	2b58      	cmp	r3, #88	; 0x58
 8006bbe:	d000      	beq.n	8006bc2 <_strtod_l+0x5e>
 8006bc0:	e06e      	b.n	8006ca0 <_strtod_l+0x13c>
 8006bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bc4:	9502      	str	r5, [sp, #8]
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	ab20      	add	r3, sp, #128	; 0x80
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	4a95      	ldr	r2, [pc, #596]	; (8006e24 <_strtod_l+0x2c0>)
 8006bce:	ab21      	add	r3, sp, #132	; 0x84
 8006bd0:	9805      	ldr	r0, [sp, #20]
 8006bd2:	a91f      	add	r1, sp, #124	; 0x7c
 8006bd4:	f001 fd84 	bl	80086e0 <__gethex>
 8006bd8:	2307      	movs	r3, #7
 8006bda:	0005      	movs	r5, r0
 8006bdc:	0004      	movs	r4, r0
 8006bde:	401d      	ands	r5, r3
 8006be0:	4218      	tst	r0, r3
 8006be2:	d006      	beq.n	8006bf2 <_strtod_l+0x8e>
 8006be4:	2d06      	cmp	r5, #6
 8006be6:	d12f      	bne.n	8006c48 <_strtod_l+0xe4>
 8006be8:	9b06      	ldr	r3, [sp, #24]
 8006bea:	3301      	adds	r3, #1
 8006bec:	931f      	str	r3, [sp, #124]	; 0x7c
 8006bee:	2300      	movs	r3, #0
 8006bf0:	930e      	str	r3, [sp, #56]	; 0x38
 8006bf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <_strtod_l+0x9a>
 8006bf8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006bfa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01c      	beq.n	8006c3e <_strtod_l+0xda>
 8006c04:	2380      	movs	r3, #128	; 0x80
 8006c06:	0032      	movs	r2, r6
 8006c08:	061b      	lsls	r3, r3, #24
 8006c0a:	18fb      	adds	r3, r7, r3
 8006c0c:	0010      	movs	r0, r2
 8006c0e:	0019      	movs	r1, r3
 8006c10:	b025      	add	sp, #148	; 0x94
 8006c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c14:	2b20      	cmp	r3, #32
 8006c16:	d1c3      	bne.n	8006ba0 <_strtod_l+0x3c>
 8006c18:	3201      	adds	r2, #1
 8006c1a:	921f      	str	r2, [sp, #124]	; 0x7c
 8006c1c:	e7b5      	b.n	8006b8a <_strtod_l+0x26>
 8006c1e:	2b2d      	cmp	r3, #45	; 0x2d
 8006c20:	d1be      	bne.n	8006ba0 <_strtod_l+0x3c>
 8006c22:	3b2c      	subs	r3, #44	; 0x2c
 8006c24:	930e      	str	r3, [sp, #56]	; 0x38
 8006c26:	1c53      	adds	r3, r2, #1
 8006c28:	931f      	str	r3, [sp, #124]	; 0x7c
 8006c2a:	7853      	ldrb	r3, [r2, #1]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1b9      	bne.n	8006ba4 <_strtod_l+0x40>
 8006c30:	9b08      	ldr	r3, [sp, #32]
 8006c32:	931f      	str	r3, [sp, #124]	; 0x7c
 8006c34:	2300      	movs	r3, #0
 8006c36:	930e      	str	r3, [sp, #56]	; 0x38
 8006c38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1dc      	bne.n	8006bf8 <_strtod_l+0x94>
 8006c3e:	0032      	movs	r2, r6
 8006c40:	003b      	movs	r3, r7
 8006c42:	e7e3      	b.n	8006c0c <_strtod_l+0xa8>
 8006c44:	2300      	movs	r3, #0
 8006c46:	e7ed      	b.n	8006c24 <_strtod_l+0xc0>
 8006c48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c4a:	2a00      	cmp	r2, #0
 8006c4c:	d007      	beq.n	8006c5e <_strtod_l+0xfa>
 8006c4e:	2135      	movs	r1, #53	; 0x35
 8006c50:	a822      	add	r0, sp, #136	; 0x88
 8006c52:	f002 fd08 	bl	8009666 <__copybits>
 8006c56:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006c58:	9805      	ldr	r0, [sp, #20]
 8006c5a:	f002 f8c3 	bl	8008de4 <_Bfree>
 8006c5e:	1e68      	subs	r0, r5, #1
 8006c60:	2804      	cmp	r0, #4
 8006c62:	d806      	bhi.n	8006c72 <_strtod_l+0x10e>
 8006c64:	f7f9 fa58 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006c68:	1816030b 	.word	0x1816030b
 8006c6c:	0b          	.byte	0x0b
 8006c6d:	00          	.byte	0x00
 8006c6e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006c70:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8006c72:	0723      	lsls	r3, r4, #28
 8006c74:	d5bd      	bpl.n	8006bf2 <_strtod_l+0x8e>
 8006c76:	2380      	movs	r3, #128	; 0x80
 8006c78:	061b      	lsls	r3, r3, #24
 8006c7a:	431f      	orrs	r7, r3
 8006c7c:	e7b9      	b.n	8006bf2 <_strtod_l+0x8e>
 8006c7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c80:	4a69      	ldr	r2, [pc, #420]	; (8006e28 <_strtod_l+0x2c4>)
 8006c82:	496a      	ldr	r1, [pc, #424]	; (8006e2c <_strtod_l+0x2c8>)
 8006c84:	401a      	ands	r2, r3
 8006c86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c88:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006c8a:	185b      	adds	r3, r3, r1
 8006c8c:	051b      	lsls	r3, r3, #20
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	0017      	movs	r7, r2
 8006c92:	e7ee      	b.n	8006c72 <_strtod_l+0x10e>
 8006c94:	4f66      	ldr	r7, [pc, #408]	; (8006e30 <_strtod_l+0x2cc>)
 8006c96:	e7ec      	b.n	8006c72 <_strtod_l+0x10e>
 8006c98:	2601      	movs	r6, #1
 8006c9a:	4f66      	ldr	r7, [pc, #408]	; (8006e34 <_strtod_l+0x2d0>)
 8006c9c:	4276      	negs	r6, r6
 8006c9e:	e7e8      	b.n	8006c72 <_strtod_l+0x10e>
 8006ca0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	921f      	str	r2, [sp, #124]	; 0x7c
 8006ca6:	785b      	ldrb	r3, [r3, #1]
 8006ca8:	2b30      	cmp	r3, #48	; 0x30
 8006caa:	d0f9      	beq.n	8006ca0 <_strtod_l+0x13c>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0a0      	beq.n	8006bf2 <_strtod_l+0x8e>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8006cb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006cb6:	220a      	movs	r2, #10
 8006cb8:	9310      	str	r3, [sp, #64]	; 0x40
 8006cba:	2300      	movs	r3, #0
 8006cbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006cc2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8006cc4:	7805      	ldrb	r5, [r0, #0]
 8006cc6:	002b      	movs	r3, r5
 8006cc8:	3b30      	subs	r3, #48	; 0x30
 8006cca:	b2d9      	uxtb	r1, r3
 8006ccc:	2909      	cmp	r1, #9
 8006cce:	d927      	bls.n	8006d20 <_strtod_l+0x1bc>
 8006cd0:	0022      	movs	r2, r4
 8006cd2:	9907      	ldr	r1, [sp, #28]
 8006cd4:	f002 ff94 	bl	8009c00 <strncmp>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d033      	beq.n	8006d44 <_strtod_l+0x1e0>
 8006cdc:	2000      	movs	r0, #0
 8006cde:	002b      	movs	r3, r5
 8006ce0:	4684      	mov	ip, r0
 8006ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ce4:	900c      	str	r0, [sp, #48]	; 0x30
 8006ce6:	9206      	str	r2, [sp, #24]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	0019      	movs	r1, r3
 8006cec:	4391      	bics	r1, r2
 8006cee:	000a      	movs	r2, r1
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	9107      	str	r1, [sp, #28]
 8006cf4:	2a45      	cmp	r2, #69	; 0x45
 8006cf6:	d000      	beq.n	8006cfa <_strtod_l+0x196>
 8006cf8:	e0c5      	b.n	8006e86 <_strtod_l+0x322>
 8006cfa:	9b06      	ldr	r3, [sp, #24]
 8006cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cfe:	4303      	orrs	r3, r0
 8006d00:	4313      	orrs	r3, r2
 8006d02:	428b      	cmp	r3, r1
 8006d04:	d094      	beq.n	8006c30 <_strtod_l+0xcc>
 8006d06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d08:	9308      	str	r3, [sp, #32]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	931f      	str	r3, [sp, #124]	; 0x7c
 8006d0e:	9b08      	ldr	r3, [sp, #32]
 8006d10:	785b      	ldrb	r3, [r3, #1]
 8006d12:	2b2b      	cmp	r3, #43	; 0x2b
 8006d14:	d076      	beq.n	8006e04 <_strtod_l+0x2a0>
 8006d16:	000c      	movs	r4, r1
 8006d18:	2b2d      	cmp	r3, #45	; 0x2d
 8006d1a:	d179      	bne.n	8006e10 <_strtod_l+0x2ac>
 8006d1c:	2401      	movs	r4, #1
 8006d1e:	e072      	b.n	8006e06 <_strtod_l+0x2a2>
 8006d20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d22:	2908      	cmp	r1, #8
 8006d24:	dc09      	bgt.n	8006d3a <_strtod_l+0x1d6>
 8006d26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d28:	4351      	muls	r1, r2
 8006d2a:	185b      	adds	r3, r3, r1
 8006d2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d30:	3001      	adds	r0, #1
 8006d32:	3301      	adds	r3, #1
 8006d34:	9309      	str	r3, [sp, #36]	; 0x24
 8006d36:	901f      	str	r0, [sp, #124]	; 0x7c
 8006d38:	e7c3      	b.n	8006cc2 <_strtod_l+0x15e>
 8006d3a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006d3c:	4351      	muls	r1, r2
 8006d3e:	185b      	adds	r3, r3, r1
 8006d40:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d42:	e7f4      	b.n	8006d2e <_strtod_l+0x1ca>
 8006d44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d48:	191c      	adds	r4, r3, r4
 8006d4a:	941f      	str	r4, [sp, #124]	; 0x7c
 8006d4c:	7823      	ldrb	r3, [r4, #0]
 8006d4e:	2a00      	cmp	r2, #0
 8006d50:	d039      	beq.n	8006dc6 <_strtod_l+0x262>
 8006d52:	900c      	str	r0, [sp, #48]	; 0x30
 8006d54:	9206      	str	r2, [sp, #24]
 8006d56:	001a      	movs	r2, r3
 8006d58:	3a30      	subs	r2, #48	; 0x30
 8006d5a:	2a09      	cmp	r2, #9
 8006d5c:	d912      	bls.n	8006d84 <_strtod_l+0x220>
 8006d5e:	2201      	movs	r2, #1
 8006d60:	4694      	mov	ip, r2
 8006d62:	e7c1      	b.n	8006ce8 <_strtod_l+0x184>
 8006d64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d66:	3001      	adds	r0, #1
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	921f      	str	r2, [sp, #124]	; 0x7c
 8006d6c:	785b      	ldrb	r3, [r3, #1]
 8006d6e:	2b30      	cmp	r3, #48	; 0x30
 8006d70:	d0f8      	beq.n	8006d64 <_strtod_l+0x200>
 8006d72:	001a      	movs	r2, r3
 8006d74:	3a31      	subs	r2, #49	; 0x31
 8006d76:	2a08      	cmp	r2, #8
 8006d78:	d83f      	bhi.n	8006dfa <_strtod_l+0x296>
 8006d7a:	900c      	str	r0, [sp, #48]	; 0x30
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006d80:	9006      	str	r0, [sp, #24]
 8006d82:	9210      	str	r2, [sp, #64]	; 0x40
 8006d84:	001a      	movs	r2, r3
 8006d86:	1c41      	adds	r1, r0, #1
 8006d88:	3a30      	subs	r2, #48	; 0x30
 8006d8a:	2b30      	cmp	r3, #48	; 0x30
 8006d8c:	d015      	beq.n	8006dba <_strtod_l+0x256>
 8006d8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d90:	185b      	adds	r3, r3, r1
 8006d92:	210a      	movs	r1, #10
 8006d94:	930c      	str	r3, [sp, #48]	; 0x30
 8006d96:	9b06      	ldr	r3, [sp, #24]
 8006d98:	18c4      	adds	r4, r0, r3
 8006d9a:	42a3      	cmp	r3, r4
 8006d9c:	d115      	bne.n	8006dca <_strtod_l+0x266>
 8006d9e:	9906      	ldr	r1, [sp, #24]
 8006da0:	9b06      	ldr	r3, [sp, #24]
 8006da2:	3101      	adds	r1, #1
 8006da4:	1809      	adds	r1, r1, r0
 8006da6:	181b      	adds	r3, r3, r0
 8006da8:	9106      	str	r1, [sp, #24]
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	dc1b      	bgt.n	8006de6 <_strtod_l+0x282>
 8006dae:	230a      	movs	r3, #10
 8006db0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006db2:	434b      	muls	r3, r1
 8006db4:	2100      	movs	r1, #0
 8006db6:	18d3      	adds	r3, r2, r3
 8006db8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006dbc:	0008      	movs	r0, r1
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	921f      	str	r2, [sp, #124]	; 0x7c
 8006dc2:	785b      	ldrb	r3, [r3, #1]
 8006dc4:	e7c7      	b.n	8006d56 <_strtod_l+0x1f2>
 8006dc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dc8:	e7d1      	b.n	8006d6e <_strtod_l+0x20a>
 8006dca:	2b08      	cmp	r3, #8
 8006dcc:	dc04      	bgt.n	8006dd8 <_strtod_l+0x274>
 8006dce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006dd0:	434d      	muls	r5, r1
 8006dd2:	950b      	str	r5, [sp, #44]	; 0x2c
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	e7e0      	b.n	8006d9a <_strtod_l+0x236>
 8006dd8:	1c5d      	adds	r5, r3, #1
 8006dda:	2d10      	cmp	r5, #16
 8006ddc:	dcfa      	bgt.n	8006dd4 <_strtod_l+0x270>
 8006dde:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006de0:	434d      	muls	r5, r1
 8006de2:	950f      	str	r5, [sp, #60]	; 0x3c
 8006de4:	e7f6      	b.n	8006dd4 <_strtod_l+0x270>
 8006de6:	9b06      	ldr	r3, [sp, #24]
 8006de8:	2100      	movs	r1, #0
 8006dea:	2b10      	cmp	r3, #16
 8006dec:	dce5      	bgt.n	8006dba <_strtod_l+0x256>
 8006dee:	230a      	movs	r3, #10
 8006df0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006df2:	4343      	muls	r3, r0
 8006df4:	18d3      	adds	r3, r2, r3
 8006df6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006df8:	e7df      	b.n	8006dba <_strtod_l+0x256>
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	920c      	str	r2, [sp, #48]	; 0x30
 8006dfe:	9206      	str	r2, [sp, #24]
 8006e00:	3201      	adds	r2, #1
 8006e02:	e7ad      	b.n	8006d60 <_strtod_l+0x1fc>
 8006e04:	2400      	movs	r4, #0
 8006e06:	9b08      	ldr	r3, [sp, #32]
 8006e08:	3302      	adds	r3, #2
 8006e0a:	931f      	str	r3, [sp, #124]	; 0x7c
 8006e0c:	9b08      	ldr	r3, [sp, #32]
 8006e0e:	789b      	ldrb	r3, [r3, #2]
 8006e10:	001a      	movs	r2, r3
 8006e12:	3a30      	subs	r2, #48	; 0x30
 8006e14:	2a09      	cmp	r2, #9
 8006e16:	d913      	bls.n	8006e40 <_strtod_l+0x2dc>
 8006e18:	9a08      	ldr	r2, [sp, #32]
 8006e1a:	921f      	str	r2, [sp, #124]	; 0x7c
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	e031      	b.n	8006e84 <_strtod_l+0x320>
 8006e20:	0800ac00 	.word	0x0800ac00
 8006e24:	0800a9b8 	.word	0x0800a9b8
 8006e28:	ffefffff 	.word	0xffefffff
 8006e2c:	00000433 	.word	0x00000433
 8006e30:	7ff00000 	.word	0x7ff00000
 8006e34:	7fffffff 	.word	0x7fffffff
 8006e38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	921f      	str	r2, [sp, #124]	; 0x7c
 8006e3e:	785b      	ldrb	r3, [r3, #1]
 8006e40:	2b30      	cmp	r3, #48	; 0x30
 8006e42:	d0f9      	beq.n	8006e38 <_strtod_l+0x2d4>
 8006e44:	2200      	movs	r2, #0
 8006e46:	9207      	str	r2, [sp, #28]
 8006e48:	001a      	movs	r2, r3
 8006e4a:	3a31      	subs	r2, #49	; 0x31
 8006e4c:	2a08      	cmp	r2, #8
 8006e4e:	d81a      	bhi.n	8006e86 <_strtod_l+0x322>
 8006e50:	3b30      	subs	r3, #48	; 0x30
 8006e52:	001a      	movs	r2, r3
 8006e54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e56:	9307      	str	r3, [sp, #28]
 8006e58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e5a:	1c59      	adds	r1, r3, #1
 8006e5c:	911f      	str	r1, [sp, #124]	; 0x7c
 8006e5e:	785b      	ldrb	r3, [r3, #1]
 8006e60:	001d      	movs	r5, r3
 8006e62:	3d30      	subs	r5, #48	; 0x30
 8006e64:	2d09      	cmp	r5, #9
 8006e66:	d939      	bls.n	8006edc <_strtod_l+0x378>
 8006e68:	9d07      	ldr	r5, [sp, #28]
 8006e6a:	1b49      	subs	r1, r1, r5
 8006e6c:	4db0      	ldr	r5, [pc, #704]	; (8007130 <_strtod_l+0x5cc>)
 8006e6e:	9507      	str	r5, [sp, #28]
 8006e70:	2908      	cmp	r1, #8
 8006e72:	dc03      	bgt.n	8006e7c <_strtod_l+0x318>
 8006e74:	9207      	str	r2, [sp, #28]
 8006e76:	42aa      	cmp	r2, r5
 8006e78:	dd00      	ble.n	8006e7c <_strtod_l+0x318>
 8006e7a:	9507      	str	r5, [sp, #28]
 8006e7c:	2c00      	cmp	r4, #0
 8006e7e:	d002      	beq.n	8006e86 <_strtod_l+0x322>
 8006e80:	9a07      	ldr	r2, [sp, #28]
 8006e82:	4252      	negs	r2, r2
 8006e84:	9207      	str	r2, [sp, #28]
 8006e86:	9a06      	ldr	r2, [sp, #24]
 8006e88:	2a00      	cmp	r2, #0
 8006e8a:	d14b      	bne.n	8006f24 <_strtod_l+0x3c0>
 8006e8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e8e:	4310      	orrs	r0, r2
 8006e90:	d000      	beq.n	8006e94 <_strtod_l+0x330>
 8006e92:	e6ae      	b.n	8006bf2 <_strtod_l+0x8e>
 8006e94:	4662      	mov	r2, ip
 8006e96:	2a00      	cmp	r2, #0
 8006e98:	d000      	beq.n	8006e9c <_strtod_l+0x338>
 8006e9a:	e6c9      	b.n	8006c30 <_strtod_l+0xcc>
 8006e9c:	2b69      	cmp	r3, #105	; 0x69
 8006e9e:	d025      	beq.n	8006eec <_strtod_l+0x388>
 8006ea0:	dc21      	bgt.n	8006ee6 <_strtod_l+0x382>
 8006ea2:	2b49      	cmp	r3, #73	; 0x49
 8006ea4:	d022      	beq.n	8006eec <_strtod_l+0x388>
 8006ea6:	2b4e      	cmp	r3, #78	; 0x4e
 8006ea8:	d000      	beq.n	8006eac <_strtod_l+0x348>
 8006eaa:	e6c1      	b.n	8006c30 <_strtod_l+0xcc>
 8006eac:	49a1      	ldr	r1, [pc, #644]	; (8007134 <_strtod_l+0x5d0>)
 8006eae:	a81f      	add	r0, sp, #124	; 0x7c
 8006eb0:	f001 fe64 	bl	8008b7c <__match>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d100      	bne.n	8006eba <_strtod_l+0x356>
 8006eb8:	e6ba      	b.n	8006c30 <_strtod_l+0xcc>
 8006eba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b28      	cmp	r3, #40	; 0x28
 8006ec0:	d12a      	bne.n	8006f18 <_strtod_l+0x3b4>
 8006ec2:	499d      	ldr	r1, [pc, #628]	; (8007138 <_strtod_l+0x5d4>)
 8006ec4:	aa22      	add	r2, sp, #136	; 0x88
 8006ec6:	a81f      	add	r0, sp, #124	; 0x7c
 8006ec8:	f001 fe6c 	bl	8008ba4 <__hexnan>
 8006ecc:	2805      	cmp	r0, #5
 8006ece:	d123      	bne.n	8006f18 <_strtod_l+0x3b4>
 8006ed0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ed2:	4a9a      	ldr	r2, [pc, #616]	; (800713c <_strtod_l+0x5d8>)
 8006ed4:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	0017      	movs	r7, r2
 8006eda:	e68a      	b.n	8006bf2 <_strtod_l+0x8e>
 8006edc:	210a      	movs	r1, #10
 8006ede:	434a      	muls	r2, r1
 8006ee0:	18d2      	adds	r2, r2, r3
 8006ee2:	3a30      	subs	r2, #48	; 0x30
 8006ee4:	e7b8      	b.n	8006e58 <_strtod_l+0x2f4>
 8006ee6:	2b6e      	cmp	r3, #110	; 0x6e
 8006ee8:	d0e0      	beq.n	8006eac <_strtod_l+0x348>
 8006eea:	e6a1      	b.n	8006c30 <_strtod_l+0xcc>
 8006eec:	4994      	ldr	r1, [pc, #592]	; (8007140 <_strtod_l+0x5dc>)
 8006eee:	a81f      	add	r0, sp, #124	; 0x7c
 8006ef0:	f001 fe44 	bl	8008b7c <__match>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d100      	bne.n	8006efa <_strtod_l+0x396>
 8006ef8:	e69a      	b.n	8006c30 <_strtod_l+0xcc>
 8006efa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006efc:	4991      	ldr	r1, [pc, #580]	; (8007144 <_strtod_l+0x5e0>)
 8006efe:	3b01      	subs	r3, #1
 8006f00:	a81f      	add	r0, sp, #124	; 0x7c
 8006f02:	931f      	str	r3, [sp, #124]	; 0x7c
 8006f04:	f001 fe3a 	bl	8008b7c <__match>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d102      	bne.n	8006f12 <_strtod_l+0x3ae>
 8006f0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f0e:	3301      	adds	r3, #1
 8006f10:	931f      	str	r3, [sp, #124]	; 0x7c
 8006f12:	2600      	movs	r6, #0
 8006f14:	4f89      	ldr	r7, [pc, #548]	; (800713c <_strtod_l+0x5d8>)
 8006f16:	e66c      	b.n	8006bf2 <_strtod_l+0x8e>
 8006f18:	488b      	ldr	r0, [pc, #556]	; (8007148 <_strtod_l+0x5e4>)
 8006f1a:	f002 fe59 	bl	8009bd0 <nan>
 8006f1e:	0006      	movs	r6, r0
 8006f20:	000f      	movs	r7, r1
 8006f22:	e666      	b.n	8006bf2 <_strtod_l+0x8e>
 8006f24:	9b07      	ldr	r3, [sp, #28]
 8006f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f28:	1a9b      	subs	r3, r3, r2
 8006f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <_strtod_l+0x3d2>
 8006f32:	9b06      	ldr	r3, [sp, #24]
 8006f34:	9309      	str	r3, [sp, #36]	; 0x24
 8006f36:	9c06      	ldr	r4, [sp, #24]
 8006f38:	2c10      	cmp	r4, #16
 8006f3a:	dd00      	ble.n	8006f3e <_strtod_l+0x3da>
 8006f3c:	2410      	movs	r4, #16
 8006f3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006f40:	f7fb f8e2 	bl	8002108 <__aeabi_ui2d>
 8006f44:	9b06      	ldr	r3, [sp, #24]
 8006f46:	0006      	movs	r6, r0
 8006f48:	000f      	movs	r7, r1
 8006f4a:	2b09      	cmp	r3, #9
 8006f4c:	dd15      	ble.n	8006f7a <_strtod_l+0x416>
 8006f4e:	0022      	movs	r2, r4
 8006f50:	4b7e      	ldr	r3, [pc, #504]	; (800714c <_strtod_l+0x5e8>)
 8006f52:	3a09      	subs	r2, #9
 8006f54:	00d2      	lsls	r2, r2, #3
 8006f56:	189b      	adds	r3, r3, r2
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f7fa fa52 	bl	8001404 <__aeabi_dmul>
 8006f60:	0006      	movs	r6, r0
 8006f62:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006f64:	000f      	movs	r7, r1
 8006f66:	f7fb f8cf 	bl	8002108 <__aeabi_ui2d>
 8006f6a:	0002      	movs	r2, r0
 8006f6c:	000b      	movs	r3, r1
 8006f6e:	0030      	movs	r0, r6
 8006f70:	0039      	movs	r1, r7
 8006f72:	f7f9 fb09 	bl	8000588 <__aeabi_dadd>
 8006f76:	0006      	movs	r6, r0
 8006f78:	000f      	movs	r7, r1
 8006f7a:	9b06      	ldr	r3, [sp, #24]
 8006f7c:	2b0f      	cmp	r3, #15
 8006f7e:	dc39      	bgt.n	8006ff4 <_strtod_l+0x490>
 8006f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d100      	bne.n	8006f88 <_strtod_l+0x424>
 8006f86:	e634      	b.n	8006bf2 <_strtod_l+0x8e>
 8006f88:	dd24      	ble.n	8006fd4 <_strtod_l+0x470>
 8006f8a:	2b16      	cmp	r3, #22
 8006f8c:	dc09      	bgt.n	8006fa2 <_strtod_l+0x43e>
 8006f8e:	496f      	ldr	r1, [pc, #444]	; (800714c <_strtod_l+0x5e8>)
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	18c9      	adds	r1, r1, r3
 8006f94:	0032      	movs	r2, r6
 8006f96:	6808      	ldr	r0, [r1, #0]
 8006f98:	6849      	ldr	r1, [r1, #4]
 8006f9a:	003b      	movs	r3, r7
 8006f9c:	f7fa fa32 	bl	8001404 <__aeabi_dmul>
 8006fa0:	e7bd      	b.n	8006f1e <_strtod_l+0x3ba>
 8006fa2:	2325      	movs	r3, #37	; 0x25
 8006fa4:	9a06      	ldr	r2, [sp, #24]
 8006fa6:	1a9b      	subs	r3, r3, r2
 8006fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006faa:	4293      	cmp	r3, r2
 8006fac:	db22      	blt.n	8006ff4 <_strtod_l+0x490>
 8006fae:	240f      	movs	r4, #15
 8006fb0:	9b06      	ldr	r3, [sp, #24]
 8006fb2:	4d66      	ldr	r5, [pc, #408]	; (800714c <_strtod_l+0x5e8>)
 8006fb4:	1ae4      	subs	r4, r4, r3
 8006fb6:	00e1      	lsls	r1, r4, #3
 8006fb8:	1869      	adds	r1, r5, r1
 8006fba:	0032      	movs	r2, r6
 8006fbc:	6808      	ldr	r0, [r1, #0]
 8006fbe:	6849      	ldr	r1, [r1, #4]
 8006fc0:	003b      	movs	r3, r7
 8006fc2:	f7fa fa1f 	bl	8001404 <__aeabi_dmul>
 8006fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc8:	1b1c      	subs	r4, r3, r4
 8006fca:	00e4      	lsls	r4, r4, #3
 8006fcc:	192c      	adds	r4, r5, r4
 8006fce:	6822      	ldr	r2, [r4, #0]
 8006fd0:	6863      	ldr	r3, [r4, #4]
 8006fd2:	e7e3      	b.n	8006f9c <_strtod_l+0x438>
 8006fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd6:	3316      	adds	r3, #22
 8006fd8:	db0c      	blt.n	8006ff4 <_strtod_l+0x490>
 8006fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fdc:	9a07      	ldr	r2, [sp, #28]
 8006fde:	0030      	movs	r0, r6
 8006fe0:	1a9a      	subs	r2, r3, r2
 8006fe2:	4b5a      	ldr	r3, [pc, #360]	; (800714c <_strtod_l+0x5e8>)
 8006fe4:	00d2      	lsls	r2, r2, #3
 8006fe6:	189b      	adds	r3, r3, r2
 8006fe8:	0039      	movs	r1, r7
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f7f9 fe07 	bl	8000c00 <__aeabi_ddiv>
 8006ff2:	e794      	b.n	8006f1e <_strtod_l+0x3ba>
 8006ff4:	9b06      	ldr	r3, [sp, #24]
 8006ff6:	1b1c      	subs	r4, r3, r4
 8006ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ffa:	18e4      	adds	r4, r4, r3
 8006ffc:	2c00      	cmp	r4, #0
 8006ffe:	dd72      	ble.n	80070e6 <_strtod_l+0x582>
 8007000:	230f      	movs	r3, #15
 8007002:	0021      	movs	r1, r4
 8007004:	4019      	ands	r1, r3
 8007006:	421c      	tst	r4, r3
 8007008:	d00a      	beq.n	8007020 <_strtod_l+0x4bc>
 800700a:	00cb      	lsls	r3, r1, #3
 800700c:	494f      	ldr	r1, [pc, #316]	; (800714c <_strtod_l+0x5e8>)
 800700e:	0032      	movs	r2, r6
 8007010:	18c9      	adds	r1, r1, r3
 8007012:	6808      	ldr	r0, [r1, #0]
 8007014:	6849      	ldr	r1, [r1, #4]
 8007016:	003b      	movs	r3, r7
 8007018:	f7fa f9f4 	bl	8001404 <__aeabi_dmul>
 800701c:	0006      	movs	r6, r0
 800701e:	000f      	movs	r7, r1
 8007020:	230f      	movs	r3, #15
 8007022:	439c      	bics	r4, r3
 8007024:	d04a      	beq.n	80070bc <_strtod_l+0x558>
 8007026:	3326      	adds	r3, #38	; 0x26
 8007028:	33ff      	adds	r3, #255	; 0xff
 800702a:	429c      	cmp	r4, r3
 800702c:	dd22      	ble.n	8007074 <_strtod_l+0x510>
 800702e:	2300      	movs	r3, #0
 8007030:	9306      	str	r3, [sp, #24]
 8007032:	9307      	str	r3, [sp, #28]
 8007034:	930b      	str	r3, [sp, #44]	; 0x2c
 8007036:	9309      	str	r3, [sp, #36]	; 0x24
 8007038:	2322      	movs	r3, #34	; 0x22
 800703a:	2600      	movs	r6, #0
 800703c:	9a05      	ldr	r2, [sp, #20]
 800703e:	4f3f      	ldr	r7, [pc, #252]	; (800713c <_strtod_l+0x5d8>)
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007044:	42b3      	cmp	r3, r6
 8007046:	d100      	bne.n	800704a <_strtod_l+0x4e6>
 8007048:	e5d3      	b.n	8006bf2 <_strtod_l+0x8e>
 800704a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800704c:	9805      	ldr	r0, [sp, #20]
 800704e:	f001 fec9 	bl	8008de4 <_Bfree>
 8007052:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007054:	9805      	ldr	r0, [sp, #20]
 8007056:	f001 fec5 	bl	8008de4 <_Bfree>
 800705a:	9907      	ldr	r1, [sp, #28]
 800705c:	9805      	ldr	r0, [sp, #20]
 800705e:	f001 fec1 	bl	8008de4 <_Bfree>
 8007062:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007064:	9805      	ldr	r0, [sp, #20]
 8007066:	f001 febd 	bl	8008de4 <_Bfree>
 800706a:	9906      	ldr	r1, [sp, #24]
 800706c:	9805      	ldr	r0, [sp, #20]
 800706e:	f001 feb9 	bl	8008de4 <_Bfree>
 8007072:	e5be      	b.n	8006bf2 <_strtod_l+0x8e>
 8007074:	2300      	movs	r3, #0
 8007076:	0030      	movs	r0, r6
 8007078:	0039      	movs	r1, r7
 800707a:	4d35      	ldr	r5, [pc, #212]	; (8007150 <_strtod_l+0x5ec>)
 800707c:	1124      	asrs	r4, r4, #4
 800707e:	9308      	str	r3, [sp, #32]
 8007080:	2c01      	cmp	r4, #1
 8007082:	dc1e      	bgt.n	80070c2 <_strtod_l+0x55e>
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <_strtod_l+0x528>
 8007088:	0006      	movs	r6, r0
 800708a:	000f      	movs	r7, r1
 800708c:	4b31      	ldr	r3, [pc, #196]	; (8007154 <_strtod_l+0x5f0>)
 800708e:	0032      	movs	r2, r6
 8007090:	18ff      	adds	r7, r7, r3
 8007092:	9b08      	ldr	r3, [sp, #32]
 8007094:	00dd      	lsls	r5, r3, #3
 8007096:	4b2e      	ldr	r3, [pc, #184]	; (8007150 <_strtod_l+0x5ec>)
 8007098:	195d      	adds	r5, r3, r5
 800709a:	6828      	ldr	r0, [r5, #0]
 800709c:	6869      	ldr	r1, [r5, #4]
 800709e:	003b      	movs	r3, r7
 80070a0:	f7fa f9b0 	bl	8001404 <__aeabi_dmul>
 80070a4:	4b25      	ldr	r3, [pc, #148]	; (800713c <_strtod_l+0x5d8>)
 80070a6:	4a2c      	ldr	r2, [pc, #176]	; (8007158 <_strtod_l+0x5f4>)
 80070a8:	0006      	movs	r6, r0
 80070aa:	400b      	ands	r3, r1
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d8be      	bhi.n	800702e <_strtod_l+0x4ca>
 80070b0:	4a2a      	ldr	r2, [pc, #168]	; (800715c <_strtod_l+0x5f8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d913      	bls.n	80070de <_strtod_l+0x57a>
 80070b6:	2601      	movs	r6, #1
 80070b8:	4f29      	ldr	r7, [pc, #164]	; (8007160 <_strtod_l+0x5fc>)
 80070ba:	4276      	negs	r6, r6
 80070bc:	2300      	movs	r3, #0
 80070be:	9308      	str	r3, [sp, #32]
 80070c0:	e087      	b.n	80071d2 <_strtod_l+0x66e>
 80070c2:	2201      	movs	r2, #1
 80070c4:	4214      	tst	r4, r2
 80070c6:	d004      	beq.n	80070d2 <_strtod_l+0x56e>
 80070c8:	682a      	ldr	r2, [r5, #0]
 80070ca:	686b      	ldr	r3, [r5, #4]
 80070cc:	f7fa f99a 	bl	8001404 <__aeabi_dmul>
 80070d0:	2301      	movs	r3, #1
 80070d2:	9a08      	ldr	r2, [sp, #32]
 80070d4:	1064      	asrs	r4, r4, #1
 80070d6:	3201      	adds	r2, #1
 80070d8:	9208      	str	r2, [sp, #32]
 80070da:	3508      	adds	r5, #8
 80070dc:	e7d0      	b.n	8007080 <_strtod_l+0x51c>
 80070de:	23d4      	movs	r3, #212	; 0xd4
 80070e0:	049b      	lsls	r3, r3, #18
 80070e2:	18cf      	adds	r7, r1, r3
 80070e4:	e7ea      	b.n	80070bc <_strtod_l+0x558>
 80070e6:	2c00      	cmp	r4, #0
 80070e8:	d0e8      	beq.n	80070bc <_strtod_l+0x558>
 80070ea:	4264      	negs	r4, r4
 80070ec:	220f      	movs	r2, #15
 80070ee:	0023      	movs	r3, r4
 80070f0:	4013      	ands	r3, r2
 80070f2:	4214      	tst	r4, r2
 80070f4:	d00a      	beq.n	800710c <_strtod_l+0x5a8>
 80070f6:	00da      	lsls	r2, r3, #3
 80070f8:	4b14      	ldr	r3, [pc, #80]	; (800714c <_strtod_l+0x5e8>)
 80070fa:	0030      	movs	r0, r6
 80070fc:	189b      	adds	r3, r3, r2
 80070fe:	0039      	movs	r1, r7
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f7f9 fd7c 	bl	8000c00 <__aeabi_ddiv>
 8007108:	0006      	movs	r6, r0
 800710a:	000f      	movs	r7, r1
 800710c:	1124      	asrs	r4, r4, #4
 800710e:	d0d5      	beq.n	80070bc <_strtod_l+0x558>
 8007110:	2c1f      	cmp	r4, #31
 8007112:	dd27      	ble.n	8007164 <_strtod_l+0x600>
 8007114:	2300      	movs	r3, #0
 8007116:	9306      	str	r3, [sp, #24]
 8007118:	9307      	str	r3, [sp, #28]
 800711a:	930b      	str	r3, [sp, #44]	; 0x2c
 800711c:	9309      	str	r3, [sp, #36]	; 0x24
 800711e:	2322      	movs	r3, #34	; 0x22
 8007120:	9a05      	ldr	r2, [sp, #20]
 8007122:	2600      	movs	r6, #0
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007128:	2700      	movs	r7, #0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d18d      	bne.n	800704a <_strtod_l+0x4e6>
 800712e:	e560      	b.n	8006bf2 <_strtod_l+0x8e>
 8007130:	00004e1f 	.word	0x00004e1f
 8007134:	0800a989 	.word	0x0800a989
 8007138:	0800a9cc 	.word	0x0800a9cc
 800713c:	7ff00000 	.word	0x7ff00000
 8007140:	0800a981 	.word	0x0800a981
 8007144:	0800ab0c 	.word	0x0800ab0c
 8007148:	0800adb8 	.word	0x0800adb8
 800714c:	0800ac98 	.word	0x0800ac98
 8007150:	0800ac70 	.word	0x0800ac70
 8007154:	fcb00000 	.word	0xfcb00000
 8007158:	7ca00000 	.word	0x7ca00000
 800715c:	7c900000 	.word	0x7c900000
 8007160:	7fefffff 	.word	0x7fefffff
 8007164:	2310      	movs	r3, #16
 8007166:	0022      	movs	r2, r4
 8007168:	401a      	ands	r2, r3
 800716a:	9208      	str	r2, [sp, #32]
 800716c:	421c      	tst	r4, r3
 800716e:	d001      	beq.n	8007174 <_strtod_l+0x610>
 8007170:	335a      	adds	r3, #90	; 0x5a
 8007172:	9308      	str	r3, [sp, #32]
 8007174:	0030      	movs	r0, r6
 8007176:	0039      	movs	r1, r7
 8007178:	2300      	movs	r3, #0
 800717a:	4dc5      	ldr	r5, [pc, #788]	; (8007490 <_strtod_l+0x92c>)
 800717c:	2201      	movs	r2, #1
 800717e:	4214      	tst	r4, r2
 8007180:	d004      	beq.n	800718c <_strtod_l+0x628>
 8007182:	682a      	ldr	r2, [r5, #0]
 8007184:	686b      	ldr	r3, [r5, #4]
 8007186:	f7fa f93d 	bl	8001404 <__aeabi_dmul>
 800718a:	2301      	movs	r3, #1
 800718c:	1064      	asrs	r4, r4, #1
 800718e:	3508      	adds	r5, #8
 8007190:	2c00      	cmp	r4, #0
 8007192:	d1f3      	bne.n	800717c <_strtod_l+0x618>
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <_strtod_l+0x638>
 8007198:	0006      	movs	r6, r0
 800719a:	000f      	movs	r7, r1
 800719c:	9b08      	ldr	r3, [sp, #32]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00f      	beq.n	80071c2 <_strtod_l+0x65e>
 80071a2:	236b      	movs	r3, #107	; 0x6b
 80071a4:	007a      	lsls	r2, r7, #1
 80071a6:	0d52      	lsrs	r2, r2, #21
 80071a8:	0039      	movs	r1, r7
 80071aa:	1a9b      	subs	r3, r3, r2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	dd08      	ble.n	80071c2 <_strtod_l+0x65e>
 80071b0:	2b1f      	cmp	r3, #31
 80071b2:	dc00      	bgt.n	80071b6 <_strtod_l+0x652>
 80071b4:	e124      	b.n	8007400 <_strtod_l+0x89c>
 80071b6:	2600      	movs	r6, #0
 80071b8:	2b34      	cmp	r3, #52	; 0x34
 80071ba:	dc00      	bgt.n	80071be <_strtod_l+0x65a>
 80071bc:	e119      	b.n	80073f2 <_strtod_l+0x88e>
 80071be:	27dc      	movs	r7, #220	; 0xdc
 80071c0:	04bf      	lsls	r7, r7, #18
 80071c2:	2200      	movs	r2, #0
 80071c4:	2300      	movs	r3, #0
 80071c6:	0030      	movs	r0, r6
 80071c8:	0039      	movs	r1, r7
 80071ca:	f7f9 f93f 	bl	800044c <__aeabi_dcmpeq>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d1a0      	bne.n	8007114 <_strtod_l+0x5b0>
 80071d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80071da:	9b06      	ldr	r3, [sp, #24]
 80071dc:	9805      	ldr	r0, [sp, #20]
 80071de:	f001 fe69 	bl	8008eb4 <__s2b>
 80071e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d100      	bne.n	80071ea <_strtod_l+0x686>
 80071e8:	e721      	b.n	800702e <_strtod_l+0x4ca>
 80071ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ec:	9907      	ldr	r1, [sp, #28]
 80071ee:	17da      	asrs	r2, r3, #31
 80071f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071f2:	1a5b      	subs	r3, r3, r1
 80071f4:	401a      	ands	r2, r3
 80071f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f8:	9215      	str	r2, [sp, #84]	; 0x54
 80071fa:	43db      	mvns	r3, r3
 80071fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071fe:	17db      	asrs	r3, r3, #31
 8007200:	401a      	ands	r2, r3
 8007202:	2300      	movs	r3, #0
 8007204:	921a      	str	r2, [sp, #104]	; 0x68
 8007206:	9306      	str	r3, [sp, #24]
 8007208:	9307      	str	r3, [sp, #28]
 800720a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800720c:	9805      	ldr	r0, [sp, #20]
 800720e:	6859      	ldr	r1, [r3, #4]
 8007210:	f001 fda4 	bl	8008d5c <_Balloc>
 8007214:	9009      	str	r0, [sp, #36]	; 0x24
 8007216:	2800      	cmp	r0, #0
 8007218:	d100      	bne.n	800721c <_strtod_l+0x6b8>
 800721a:	e70d      	b.n	8007038 <_strtod_l+0x4d4>
 800721c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800721e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	310c      	adds	r1, #12
 8007224:	1c9a      	adds	r2, r3, #2
 8007226:	0092      	lsls	r2, r2, #2
 8007228:	300c      	adds	r0, #12
 800722a:	930c      	str	r3, [sp, #48]	; 0x30
 800722c:	f001 fd8d 	bl	8008d4a <memcpy>
 8007230:	ab22      	add	r3, sp, #136	; 0x88
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	ab21      	add	r3, sp, #132	; 0x84
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	0032      	movs	r2, r6
 800723a:	003b      	movs	r3, r7
 800723c:	9805      	ldr	r0, [sp, #20]
 800723e:	9612      	str	r6, [sp, #72]	; 0x48
 8007240:	9713      	str	r7, [sp, #76]	; 0x4c
 8007242:	f002 f983 	bl	800954c <__d2b>
 8007246:	9020      	str	r0, [sp, #128]	; 0x80
 8007248:	2800      	cmp	r0, #0
 800724a:	d100      	bne.n	800724e <_strtod_l+0x6ea>
 800724c:	e6f4      	b.n	8007038 <_strtod_l+0x4d4>
 800724e:	2101      	movs	r1, #1
 8007250:	9805      	ldr	r0, [sp, #20]
 8007252:	f001 fec3 	bl	8008fdc <__i2b>
 8007256:	9007      	str	r0, [sp, #28]
 8007258:	2800      	cmp	r0, #0
 800725a:	d100      	bne.n	800725e <_strtod_l+0x6fa>
 800725c:	e6ec      	b.n	8007038 <_strtod_l+0x4d4>
 800725e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007260:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007262:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007264:	1ad4      	subs	r4, r2, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	db01      	blt.n	800726e <_strtod_l+0x70a>
 800726a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800726c:	195d      	adds	r5, r3, r5
 800726e:	9908      	ldr	r1, [sp, #32]
 8007270:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007272:	1a5b      	subs	r3, r3, r1
 8007274:	2136      	movs	r1, #54	; 0x36
 8007276:	189b      	adds	r3, r3, r2
 8007278:	1a8a      	subs	r2, r1, r2
 800727a:	4986      	ldr	r1, [pc, #536]	; (8007494 <_strtod_l+0x930>)
 800727c:	2001      	movs	r0, #1
 800727e:	468c      	mov	ip, r1
 8007280:	2100      	movs	r1, #0
 8007282:	3b01      	subs	r3, #1
 8007284:	9110      	str	r1, [sp, #64]	; 0x40
 8007286:	9014      	str	r0, [sp, #80]	; 0x50
 8007288:	4563      	cmp	r3, ip
 800728a:	da07      	bge.n	800729c <_strtod_l+0x738>
 800728c:	4661      	mov	r1, ip
 800728e:	1ac9      	subs	r1, r1, r3
 8007290:	1a52      	subs	r2, r2, r1
 8007292:	291f      	cmp	r1, #31
 8007294:	dd00      	ble.n	8007298 <_strtod_l+0x734>
 8007296:	e0b8      	b.n	800740a <_strtod_l+0x8a6>
 8007298:	4088      	lsls	r0, r1
 800729a:	9014      	str	r0, [sp, #80]	; 0x50
 800729c:	18ab      	adds	r3, r5, r2
 800729e:	930c      	str	r3, [sp, #48]	; 0x30
 80072a0:	18a4      	adds	r4, r4, r2
 80072a2:	9b08      	ldr	r3, [sp, #32]
 80072a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072a6:	191c      	adds	r4, r3, r4
 80072a8:	002b      	movs	r3, r5
 80072aa:	4295      	cmp	r5, r2
 80072ac:	dd00      	ble.n	80072b0 <_strtod_l+0x74c>
 80072ae:	0013      	movs	r3, r2
 80072b0:	42a3      	cmp	r3, r4
 80072b2:	dd00      	ble.n	80072b6 <_strtod_l+0x752>
 80072b4:	0023      	movs	r3, r4
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	dd04      	ble.n	80072c4 <_strtod_l+0x760>
 80072ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072bc:	1ae4      	subs	r4, r4, r3
 80072be:	1ad2      	subs	r2, r2, r3
 80072c0:	920c      	str	r2, [sp, #48]	; 0x30
 80072c2:	1aed      	subs	r5, r5, r3
 80072c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	dd17      	ble.n	80072fa <_strtod_l+0x796>
 80072ca:	001a      	movs	r2, r3
 80072cc:	9907      	ldr	r1, [sp, #28]
 80072ce:	9805      	ldr	r0, [sp, #20]
 80072d0:	f001 ff4a 	bl	8009168 <__pow5mult>
 80072d4:	9007      	str	r0, [sp, #28]
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d100      	bne.n	80072dc <_strtod_l+0x778>
 80072da:	e6ad      	b.n	8007038 <_strtod_l+0x4d4>
 80072dc:	0001      	movs	r1, r0
 80072de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80072e0:	9805      	ldr	r0, [sp, #20]
 80072e2:	f001 fe91 	bl	8009008 <__multiply>
 80072e6:	900f      	str	r0, [sp, #60]	; 0x3c
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d100      	bne.n	80072ee <_strtod_l+0x78a>
 80072ec:	e6a4      	b.n	8007038 <_strtod_l+0x4d4>
 80072ee:	9920      	ldr	r1, [sp, #128]	; 0x80
 80072f0:	9805      	ldr	r0, [sp, #20]
 80072f2:	f001 fd77 	bl	8008de4 <_Bfree>
 80072f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072f8:	9320      	str	r3, [sp, #128]	; 0x80
 80072fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	dd00      	ble.n	8007302 <_strtod_l+0x79e>
 8007300:	e089      	b.n	8007416 <_strtod_l+0x8b2>
 8007302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007304:	2b00      	cmp	r3, #0
 8007306:	dd08      	ble.n	800731a <_strtod_l+0x7b6>
 8007308:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800730a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800730c:	9805      	ldr	r0, [sp, #20]
 800730e:	f001 ff2b 	bl	8009168 <__pow5mult>
 8007312:	9009      	str	r0, [sp, #36]	; 0x24
 8007314:	2800      	cmp	r0, #0
 8007316:	d100      	bne.n	800731a <_strtod_l+0x7b6>
 8007318:	e68e      	b.n	8007038 <_strtod_l+0x4d4>
 800731a:	2c00      	cmp	r4, #0
 800731c:	dd08      	ble.n	8007330 <_strtod_l+0x7cc>
 800731e:	0022      	movs	r2, r4
 8007320:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007322:	9805      	ldr	r0, [sp, #20]
 8007324:	f001 ff7c 	bl	8009220 <__lshift>
 8007328:	9009      	str	r0, [sp, #36]	; 0x24
 800732a:	2800      	cmp	r0, #0
 800732c:	d100      	bne.n	8007330 <_strtod_l+0x7cc>
 800732e:	e683      	b.n	8007038 <_strtod_l+0x4d4>
 8007330:	2d00      	cmp	r5, #0
 8007332:	dd08      	ble.n	8007346 <_strtod_l+0x7e2>
 8007334:	002a      	movs	r2, r5
 8007336:	9907      	ldr	r1, [sp, #28]
 8007338:	9805      	ldr	r0, [sp, #20]
 800733a:	f001 ff71 	bl	8009220 <__lshift>
 800733e:	9007      	str	r0, [sp, #28]
 8007340:	2800      	cmp	r0, #0
 8007342:	d100      	bne.n	8007346 <_strtod_l+0x7e2>
 8007344:	e678      	b.n	8007038 <_strtod_l+0x4d4>
 8007346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007348:	9920      	ldr	r1, [sp, #128]	; 0x80
 800734a:	9805      	ldr	r0, [sp, #20]
 800734c:	f001 fff2 	bl	8009334 <__mdiff>
 8007350:	9006      	str	r0, [sp, #24]
 8007352:	2800      	cmp	r0, #0
 8007354:	d100      	bne.n	8007358 <_strtod_l+0x7f4>
 8007356:	e66f      	b.n	8007038 <_strtod_l+0x4d4>
 8007358:	2200      	movs	r2, #0
 800735a:	68c3      	ldr	r3, [r0, #12]
 800735c:	9907      	ldr	r1, [sp, #28]
 800735e:	60c2      	str	r2, [r0, #12]
 8007360:	930f      	str	r3, [sp, #60]	; 0x3c
 8007362:	f001 ffcb 	bl	80092fc <__mcmp>
 8007366:	2800      	cmp	r0, #0
 8007368:	da5f      	bge.n	800742a <_strtod_l+0x8c6>
 800736a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800736c:	4333      	orrs	r3, r6
 800736e:	d000      	beq.n	8007372 <_strtod_l+0x80e>
 8007370:	e08a      	b.n	8007488 <_strtod_l+0x924>
 8007372:	033b      	lsls	r3, r7, #12
 8007374:	d000      	beq.n	8007378 <_strtod_l+0x814>
 8007376:	e087      	b.n	8007488 <_strtod_l+0x924>
 8007378:	22d6      	movs	r2, #214	; 0xd6
 800737a:	4b47      	ldr	r3, [pc, #284]	; (8007498 <_strtod_l+0x934>)
 800737c:	04d2      	lsls	r2, r2, #19
 800737e:	403b      	ands	r3, r7
 8007380:	4293      	cmp	r3, r2
 8007382:	d800      	bhi.n	8007386 <_strtod_l+0x822>
 8007384:	e080      	b.n	8007488 <_strtod_l+0x924>
 8007386:	9b06      	ldr	r3, [sp, #24]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	930a      	str	r3, [sp, #40]	; 0x28
 800738c:	2b00      	cmp	r3, #0
 800738e:	d104      	bne.n	800739a <_strtod_l+0x836>
 8007390:	9b06      	ldr	r3, [sp, #24]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	930a      	str	r3, [sp, #40]	; 0x28
 8007396:	2b01      	cmp	r3, #1
 8007398:	dd76      	ble.n	8007488 <_strtod_l+0x924>
 800739a:	9906      	ldr	r1, [sp, #24]
 800739c:	2201      	movs	r2, #1
 800739e:	9805      	ldr	r0, [sp, #20]
 80073a0:	f001 ff3e 	bl	8009220 <__lshift>
 80073a4:	9907      	ldr	r1, [sp, #28]
 80073a6:	9006      	str	r0, [sp, #24]
 80073a8:	f001 ffa8 	bl	80092fc <__mcmp>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	dd6b      	ble.n	8007488 <_strtod_l+0x924>
 80073b0:	9908      	ldr	r1, [sp, #32]
 80073b2:	003b      	movs	r3, r7
 80073b4:	4a38      	ldr	r2, [pc, #224]	; (8007498 <_strtod_l+0x934>)
 80073b6:	2900      	cmp	r1, #0
 80073b8:	d100      	bne.n	80073bc <_strtod_l+0x858>
 80073ba:	e092      	b.n	80074e2 <_strtod_l+0x97e>
 80073bc:	0011      	movs	r1, r2
 80073be:	20d6      	movs	r0, #214	; 0xd6
 80073c0:	4039      	ands	r1, r7
 80073c2:	04c0      	lsls	r0, r0, #19
 80073c4:	4281      	cmp	r1, r0
 80073c6:	dd00      	ble.n	80073ca <_strtod_l+0x866>
 80073c8:	e08b      	b.n	80074e2 <_strtod_l+0x97e>
 80073ca:	23dc      	movs	r3, #220	; 0xdc
 80073cc:	049b      	lsls	r3, r3, #18
 80073ce:	4299      	cmp	r1, r3
 80073d0:	dc00      	bgt.n	80073d4 <_strtod_l+0x870>
 80073d2:	e6a4      	b.n	800711e <_strtod_l+0x5ba>
 80073d4:	0030      	movs	r0, r6
 80073d6:	0039      	movs	r1, r7
 80073d8:	2200      	movs	r2, #0
 80073da:	4b30      	ldr	r3, [pc, #192]	; (800749c <_strtod_l+0x938>)
 80073dc:	f7fa f812 	bl	8001404 <__aeabi_dmul>
 80073e0:	0006      	movs	r6, r0
 80073e2:	000f      	movs	r7, r1
 80073e4:	4308      	orrs	r0, r1
 80073e6:	d000      	beq.n	80073ea <_strtod_l+0x886>
 80073e8:	e62f      	b.n	800704a <_strtod_l+0x4e6>
 80073ea:	2322      	movs	r3, #34	; 0x22
 80073ec:	9a05      	ldr	r2, [sp, #20]
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	e62b      	b.n	800704a <_strtod_l+0x4e6>
 80073f2:	234b      	movs	r3, #75	; 0x4b
 80073f4:	1a9a      	subs	r2, r3, r2
 80073f6:	3b4c      	subs	r3, #76	; 0x4c
 80073f8:	4093      	lsls	r3, r2
 80073fa:	4019      	ands	r1, r3
 80073fc:	000f      	movs	r7, r1
 80073fe:	e6e0      	b.n	80071c2 <_strtod_l+0x65e>
 8007400:	2201      	movs	r2, #1
 8007402:	4252      	negs	r2, r2
 8007404:	409a      	lsls	r2, r3
 8007406:	4016      	ands	r6, r2
 8007408:	e6db      	b.n	80071c2 <_strtod_l+0x65e>
 800740a:	4925      	ldr	r1, [pc, #148]	; (80074a0 <_strtod_l+0x93c>)
 800740c:	1acb      	subs	r3, r1, r3
 800740e:	0001      	movs	r1, r0
 8007410:	4099      	lsls	r1, r3
 8007412:	9110      	str	r1, [sp, #64]	; 0x40
 8007414:	e741      	b.n	800729a <_strtod_l+0x736>
 8007416:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007418:	9920      	ldr	r1, [sp, #128]	; 0x80
 800741a:	9805      	ldr	r0, [sp, #20]
 800741c:	f001 ff00 	bl	8009220 <__lshift>
 8007420:	9020      	str	r0, [sp, #128]	; 0x80
 8007422:	2800      	cmp	r0, #0
 8007424:	d000      	beq.n	8007428 <_strtod_l+0x8c4>
 8007426:	e76c      	b.n	8007302 <_strtod_l+0x79e>
 8007428:	e606      	b.n	8007038 <_strtod_l+0x4d4>
 800742a:	970c      	str	r7, [sp, #48]	; 0x30
 800742c:	2800      	cmp	r0, #0
 800742e:	d176      	bne.n	800751e <_strtod_l+0x9ba>
 8007430:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007432:	033b      	lsls	r3, r7, #12
 8007434:	0b1b      	lsrs	r3, r3, #12
 8007436:	2a00      	cmp	r2, #0
 8007438:	d038      	beq.n	80074ac <_strtod_l+0x948>
 800743a:	4a1a      	ldr	r2, [pc, #104]	; (80074a4 <_strtod_l+0x940>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d138      	bne.n	80074b2 <_strtod_l+0x94e>
 8007440:	2201      	movs	r2, #1
 8007442:	9b08      	ldr	r3, [sp, #32]
 8007444:	4252      	negs	r2, r2
 8007446:	0031      	movs	r1, r6
 8007448:	0010      	movs	r0, r2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <_strtod_l+0x902>
 800744e:	24d4      	movs	r4, #212	; 0xd4
 8007450:	4b11      	ldr	r3, [pc, #68]	; (8007498 <_strtod_l+0x934>)
 8007452:	0010      	movs	r0, r2
 8007454:	403b      	ands	r3, r7
 8007456:	04e4      	lsls	r4, r4, #19
 8007458:	42a3      	cmp	r3, r4
 800745a:	d804      	bhi.n	8007466 <_strtod_l+0x902>
 800745c:	306c      	adds	r0, #108	; 0x6c
 800745e:	0d1b      	lsrs	r3, r3, #20
 8007460:	1ac3      	subs	r3, r0, r3
 8007462:	409a      	lsls	r2, r3
 8007464:	0010      	movs	r0, r2
 8007466:	4281      	cmp	r1, r0
 8007468:	d123      	bne.n	80074b2 <_strtod_l+0x94e>
 800746a:	4b0f      	ldr	r3, [pc, #60]	; (80074a8 <_strtod_l+0x944>)
 800746c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800746e:	429a      	cmp	r2, r3
 8007470:	d102      	bne.n	8007478 <_strtod_l+0x914>
 8007472:	1c4b      	adds	r3, r1, #1
 8007474:	d100      	bne.n	8007478 <_strtod_l+0x914>
 8007476:	e5df      	b.n	8007038 <_strtod_l+0x4d4>
 8007478:	4b07      	ldr	r3, [pc, #28]	; (8007498 <_strtod_l+0x934>)
 800747a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800747c:	2600      	movs	r6, #0
 800747e:	401a      	ands	r2, r3
 8007480:	0013      	movs	r3, r2
 8007482:	2280      	movs	r2, #128	; 0x80
 8007484:	0352      	lsls	r2, r2, #13
 8007486:	189f      	adds	r7, r3, r2
 8007488:	9b08      	ldr	r3, [sp, #32]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1a2      	bne.n	80073d4 <_strtod_l+0x870>
 800748e:	e5dc      	b.n	800704a <_strtod_l+0x4e6>
 8007490:	0800a9e0 	.word	0x0800a9e0
 8007494:	fffffc02 	.word	0xfffffc02
 8007498:	7ff00000 	.word	0x7ff00000
 800749c:	39500000 	.word	0x39500000
 80074a0:	fffffbe2 	.word	0xfffffbe2
 80074a4:	000fffff 	.word	0x000fffff
 80074a8:	7fefffff 	.word	0x7fefffff
 80074ac:	4333      	orrs	r3, r6
 80074ae:	d100      	bne.n	80074b2 <_strtod_l+0x94e>
 80074b0:	e77e      	b.n	80073b0 <_strtod_l+0x84c>
 80074b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d01d      	beq.n	80074f4 <_strtod_l+0x990>
 80074b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074bc:	4213      	tst	r3, r2
 80074be:	d0e3      	beq.n	8007488 <_strtod_l+0x924>
 80074c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074c2:	0030      	movs	r0, r6
 80074c4:	0039      	movs	r1, r7
 80074c6:	9a08      	ldr	r2, [sp, #32]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d017      	beq.n	80074fc <_strtod_l+0x998>
 80074cc:	f7ff fb32 	bl	8006b34 <sulp>
 80074d0:	0002      	movs	r2, r0
 80074d2:	000b      	movs	r3, r1
 80074d4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80074d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80074d8:	f7f9 f856 	bl	8000588 <__aeabi_dadd>
 80074dc:	0006      	movs	r6, r0
 80074de:	000f      	movs	r7, r1
 80074e0:	e7d2      	b.n	8007488 <_strtod_l+0x924>
 80074e2:	2601      	movs	r6, #1
 80074e4:	4013      	ands	r3, r2
 80074e6:	4a99      	ldr	r2, [pc, #612]	; (800774c <_strtod_l+0xbe8>)
 80074e8:	4276      	negs	r6, r6
 80074ea:	189b      	adds	r3, r3, r2
 80074ec:	4a98      	ldr	r2, [pc, #608]	; (8007750 <_strtod_l+0xbec>)
 80074ee:	431a      	orrs	r2, r3
 80074f0:	0017      	movs	r7, r2
 80074f2:	e7c9      	b.n	8007488 <_strtod_l+0x924>
 80074f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074f6:	4233      	tst	r3, r6
 80074f8:	d0c6      	beq.n	8007488 <_strtod_l+0x924>
 80074fa:	e7e1      	b.n	80074c0 <_strtod_l+0x95c>
 80074fc:	f7ff fb1a 	bl	8006b34 <sulp>
 8007500:	0002      	movs	r2, r0
 8007502:	000b      	movs	r3, r1
 8007504:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007506:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007508:	f7fa f9e8 	bl	80018dc <__aeabi_dsub>
 800750c:	2200      	movs	r2, #0
 800750e:	2300      	movs	r3, #0
 8007510:	0006      	movs	r6, r0
 8007512:	000f      	movs	r7, r1
 8007514:	f7f8 ff9a 	bl	800044c <__aeabi_dcmpeq>
 8007518:	2800      	cmp	r0, #0
 800751a:	d0b5      	beq.n	8007488 <_strtod_l+0x924>
 800751c:	e5ff      	b.n	800711e <_strtod_l+0x5ba>
 800751e:	9907      	ldr	r1, [sp, #28]
 8007520:	9806      	ldr	r0, [sp, #24]
 8007522:	f002 f877 	bl	8009614 <__ratio>
 8007526:	2380      	movs	r3, #128	; 0x80
 8007528:	2200      	movs	r2, #0
 800752a:	05db      	lsls	r3, r3, #23
 800752c:	0004      	movs	r4, r0
 800752e:	000d      	movs	r5, r1
 8007530:	f7f8 ff9c 	bl	800046c <__aeabi_dcmple>
 8007534:	2800      	cmp	r0, #0
 8007536:	d075      	beq.n	8007624 <_strtod_l+0xac0>
 8007538:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d047      	beq.n	80075ce <_strtod_l+0xa6a>
 800753e:	2300      	movs	r3, #0
 8007540:	4c84      	ldr	r4, [pc, #528]	; (8007754 <_strtod_l+0xbf0>)
 8007542:	2500      	movs	r5, #0
 8007544:	9310      	str	r3, [sp, #64]	; 0x40
 8007546:	9411      	str	r4, [sp, #68]	; 0x44
 8007548:	4c82      	ldr	r4, [pc, #520]	; (8007754 <_strtod_l+0xbf0>)
 800754a:	4a83      	ldr	r2, [pc, #524]	; (8007758 <_strtod_l+0xbf4>)
 800754c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800754e:	4013      	ands	r3, r2
 8007550:	9314      	str	r3, [sp, #80]	; 0x50
 8007552:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007554:	4b81      	ldr	r3, [pc, #516]	; (800775c <_strtod_l+0xbf8>)
 8007556:	429a      	cmp	r2, r3
 8007558:	d000      	beq.n	800755c <_strtod_l+0x9f8>
 800755a:	e0ac      	b.n	80076b6 <_strtod_l+0xb52>
 800755c:	4a80      	ldr	r2, [pc, #512]	; (8007760 <_strtod_l+0xbfc>)
 800755e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007560:	4694      	mov	ip, r2
 8007562:	4463      	add	r3, ip
 8007564:	001f      	movs	r7, r3
 8007566:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007568:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800756a:	0030      	movs	r0, r6
 800756c:	0039      	movs	r1, r7
 800756e:	920c      	str	r2, [sp, #48]	; 0x30
 8007570:	930d      	str	r3, [sp, #52]	; 0x34
 8007572:	f001 ff77 	bl	8009464 <__ulp>
 8007576:	0002      	movs	r2, r0
 8007578:	000b      	movs	r3, r1
 800757a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800757c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800757e:	f7f9 ff41 	bl	8001404 <__aeabi_dmul>
 8007582:	0032      	movs	r2, r6
 8007584:	003b      	movs	r3, r7
 8007586:	f7f8 ffff 	bl	8000588 <__aeabi_dadd>
 800758a:	4a73      	ldr	r2, [pc, #460]	; (8007758 <_strtod_l+0xbf4>)
 800758c:	4b75      	ldr	r3, [pc, #468]	; (8007764 <_strtod_l+0xc00>)
 800758e:	0006      	movs	r6, r0
 8007590:	400a      	ands	r2, r1
 8007592:	429a      	cmp	r2, r3
 8007594:	d95e      	bls.n	8007654 <_strtod_l+0xaf0>
 8007596:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007598:	4b73      	ldr	r3, [pc, #460]	; (8007768 <_strtod_l+0xc04>)
 800759a:	429a      	cmp	r2, r3
 800759c:	d103      	bne.n	80075a6 <_strtod_l+0xa42>
 800759e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075a0:	3301      	adds	r3, #1
 80075a2:	d100      	bne.n	80075a6 <_strtod_l+0xa42>
 80075a4:	e548      	b.n	8007038 <_strtod_l+0x4d4>
 80075a6:	2601      	movs	r6, #1
 80075a8:	4f6f      	ldr	r7, [pc, #444]	; (8007768 <_strtod_l+0xc04>)
 80075aa:	4276      	negs	r6, r6
 80075ac:	9920      	ldr	r1, [sp, #128]	; 0x80
 80075ae:	9805      	ldr	r0, [sp, #20]
 80075b0:	f001 fc18 	bl	8008de4 <_Bfree>
 80075b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075b6:	9805      	ldr	r0, [sp, #20]
 80075b8:	f001 fc14 	bl	8008de4 <_Bfree>
 80075bc:	9907      	ldr	r1, [sp, #28]
 80075be:	9805      	ldr	r0, [sp, #20]
 80075c0:	f001 fc10 	bl	8008de4 <_Bfree>
 80075c4:	9906      	ldr	r1, [sp, #24]
 80075c6:	9805      	ldr	r0, [sp, #20]
 80075c8:	f001 fc0c 	bl	8008de4 <_Bfree>
 80075cc:	e61d      	b.n	800720a <_strtod_l+0x6a6>
 80075ce:	2e00      	cmp	r6, #0
 80075d0:	d11c      	bne.n	800760c <_strtod_l+0xaa8>
 80075d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075d4:	031b      	lsls	r3, r3, #12
 80075d6:	d11f      	bne.n	8007618 <_strtod_l+0xab4>
 80075d8:	2200      	movs	r2, #0
 80075da:	0020      	movs	r0, r4
 80075dc:	0029      	movs	r1, r5
 80075de:	4b5d      	ldr	r3, [pc, #372]	; (8007754 <_strtod_l+0xbf0>)
 80075e0:	f7f8 ff3a 	bl	8000458 <__aeabi_dcmplt>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d11a      	bne.n	800761e <_strtod_l+0xaba>
 80075e8:	0020      	movs	r0, r4
 80075ea:	0029      	movs	r1, r5
 80075ec:	2200      	movs	r2, #0
 80075ee:	4b5f      	ldr	r3, [pc, #380]	; (800776c <_strtod_l+0xc08>)
 80075f0:	f7f9 ff08 	bl	8001404 <__aeabi_dmul>
 80075f4:	0005      	movs	r5, r0
 80075f6:	000c      	movs	r4, r1
 80075f8:	2380      	movs	r3, #128	; 0x80
 80075fa:	061b      	lsls	r3, r3, #24
 80075fc:	18e3      	adds	r3, r4, r3
 80075fe:	951c      	str	r5, [sp, #112]	; 0x70
 8007600:	931d      	str	r3, [sp, #116]	; 0x74
 8007602:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007604:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007606:	9210      	str	r2, [sp, #64]	; 0x40
 8007608:	9311      	str	r3, [sp, #68]	; 0x44
 800760a:	e79e      	b.n	800754a <_strtod_l+0x9e6>
 800760c:	2e01      	cmp	r6, #1
 800760e:	d103      	bne.n	8007618 <_strtod_l+0xab4>
 8007610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007612:	2b00      	cmp	r3, #0
 8007614:	d100      	bne.n	8007618 <_strtod_l+0xab4>
 8007616:	e582      	b.n	800711e <_strtod_l+0x5ba>
 8007618:	2300      	movs	r3, #0
 800761a:	4c55      	ldr	r4, [pc, #340]	; (8007770 <_strtod_l+0xc0c>)
 800761c:	e791      	b.n	8007542 <_strtod_l+0x9de>
 800761e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007620:	4c52      	ldr	r4, [pc, #328]	; (800776c <_strtod_l+0xc08>)
 8007622:	e7e9      	b.n	80075f8 <_strtod_l+0xa94>
 8007624:	2200      	movs	r2, #0
 8007626:	0020      	movs	r0, r4
 8007628:	0029      	movs	r1, r5
 800762a:	4b50      	ldr	r3, [pc, #320]	; (800776c <_strtod_l+0xc08>)
 800762c:	f7f9 feea 	bl	8001404 <__aeabi_dmul>
 8007630:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007632:	0005      	movs	r5, r0
 8007634:	000b      	movs	r3, r1
 8007636:	000c      	movs	r4, r1
 8007638:	2a00      	cmp	r2, #0
 800763a:	d107      	bne.n	800764c <_strtod_l+0xae8>
 800763c:	2280      	movs	r2, #128	; 0x80
 800763e:	0612      	lsls	r2, r2, #24
 8007640:	188b      	adds	r3, r1, r2
 8007642:	9016      	str	r0, [sp, #88]	; 0x58
 8007644:	9317      	str	r3, [sp, #92]	; 0x5c
 8007646:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007648:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800764a:	e7dc      	b.n	8007606 <_strtod_l+0xaa2>
 800764c:	0002      	movs	r2, r0
 800764e:	9216      	str	r2, [sp, #88]	; 0x58
 8007650:	9317      	str	r3, [sp, #92]	; 0x5c
 8007652:	e7f8      	b.n	8007646 <_strtod_l+0xae2>
 8007654:	23d4      	movs	r3, #212	; 0xd4
 8007656:	049b      	lsls	r3, r3, #18
 8007658:	18cf      	adds	r7, r1, r3
 800765a:	9b08      	ldr	r3, [sp, #32]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1a5      	bne.n	80075ac <_strtod_l+0xa48>
 8007660:	4b3d      	ldr	r3, [pc, #244]	; (8007758 <_strtod_l+0xbf4>)
 8007662:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007664:	403b      	ands	r3, r7
 8007666:	429a      	cmp	r2, r3
 8007668:	d1a0      	bne.n	80075ac <_strtod_l+0xa48>
 800766a:	0028      	movs	r0, r5
 800766c:	0021      	movs	r1, r4
 800766e:	f7f8 ff39 	bl	80004e4 <__aeabi_d2lz>
 8007672:	f7f8 ff73 	bl	800055c <__aeabi_l2d>
 8007676:	0002      	movs	r2, r0
 8007678:	000b      	movs	r3, r1
 800767a:	0028      	movs	r0, r5
 800767c:	0021      	movs	r1, r4
 800767e:	f7fa f92d 	bl	80018dc <__aeabi_dsub>
 8007682:	033b      	lsls	r3, r7, #12
 8007684:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007686:	0b1b      	lsrs	r3, r3, #12
 8007688:	4333      	orrs	r3, r6
 800768a:	4313      	orrs	r3, r2
 800768c:	0004      	movs	r4, r0
 800768e:	000d      	movs	r5, r1
 8007690:	4a38      	ldr	r2, [pc, #224]	; (8007774 <_strtod_l+0xc10>)
 8007692:	2b00      	cmp	r3, #0
 8007694:	d055      	beq.n	8007742 <_strtod_l+0xbde>
 8007696:	4b38      	ldr	r3, [pc, #224]	; (8007778 <_strtod_l+0xc14>)
 8007698:	f7f8 fede 	bl	8000458 <__aeabi_dcmplt>
 800769c:	2800      	cmp	r0, #0
 800769e:	d000      	beq.n	80076a2 <_strtod_l+0xb3e>
 80076a0:	e4d3      	b.n	800704a <_strtod_l+0x4e6>
 80076a2:	0020      	movs	r0, r4
 80076a4:	0029      	movs	r1, r5
 80076a6:	4a35      	ldr	r2, [pc, #212]	; (800777c <_strtod_l+0xc18>)
 80076a8:	4b30      	ldr	r3, [pc, #192]	; (800776c <_strtod_l+0xc08>)
 80076aa:	f7f8 fee9 	bl	8000480 <__aeabi_dcmpgt>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d100      	bne.n	80076b4 <_strtod_l+0xb50>
 80076b2:	e77b      	b.n	80075ac <_strtod_l+0xa48>
 80076b4:	e4c9      	b.n	800704a <_strtod_l+0x4e6>
 80076b6:	9b08      	ldr	r3, [sp, #32]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d02b      	beq.n	8007714 <_strtod_l+0xbb0>
 80076bc:	23d4      	movs	r3, #212	; 0xd4
 80076be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076c0:	04db      	lsls	r3, r3, #19
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d826      	bhi.n	8007714 <_strtod_l+0xbb0>
 80076c6:	0028      	movs	r0, r5
 80076c8:	0021      	movs	r1, r4
 80076ca:	4a2d      	ldr	r2, [pc, #180]	; (8007780 <_strtod_l+0xc1c>)
 80076cc:	4b2d      	ldr	r3, [pc, #180]	; (8007784 <_strtod_l+0xc20>)
 80076ce:	f7f8 fecd 	bl	800046c <__aeabi_dcmple>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d017      	beq.n	8007706 <_strtod_l+0xba2>
 80076d6:	0028      	movs	r0, r5
 80076d8:	0021      	movs	r1, r4
 80076da:	f7f8 fee5 	bl	80004a8 <__aeabi_d2uiz>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d100      	bne.n	80076e4 <_strtod_l+0xb80>
 80076e2:	3001      	adds	r0, #1
 80076e4:	f7fa fd10 	bl	8002108 <__aeabi_ui2d>
 80076e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076ea:	0005      	movs	r5, r0
 80076ec:	000b      	movs	r3, r1
 80076ee:	000c      	movs	r4, r1
 80076f0:	2a00      	cmp	r2, #0
 80076f2:	d122      	bne.n	800773a <_strtod_l+0xbd6>
 80076f4:	2280      	movs	r2, #128	; 0x80
 80076f6:	0612      	lsls	r2, r2, #24
 80076f8:	188b      	adds	r3, r1, r2
 80076fa:	9018      	str	r0, [sp, #96]	; 0x60
 80076fc:	9319      	str	r3, [sp, #100]	; 0x64
 80076fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007700:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007702:	9210      	str	r2, [sp, #64]	; 0x40
 8007704:	9311      	str	r3, [sp, #68]	; 0x44
 8007706:	22d6      	movs	r2, #214	; 0xd6
 8007708:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800770a:	04d2      	lsls	r2, r2, #19
 800770c:	189b      	adds	r3, r3, r2
 800770e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007710:	1a9b      	subs	r3, r3, r2
 8007712:	9311      	str	r3, [sp, #68]	; 0x44
 8007714:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007716:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007718:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800771a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800771c:	f001 fea2 	bl	8009464 <__ulp>
 8007720:	0002      	movs	r2, r0
 8007722:	000b      	movs	r3, r1
 8007724:	0030      	movs	r0, r6
 8007726:	0039      	movs	r1, r7
 8007728:	f7f9 fe6c 	bl	8001404 <__aeabi_dmul>
 800772c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800772e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007730:	f7f8 ff2a 	bl	8000588 <__aeabi_dadd>
 8007734:	0006      	movs	r6, r0
 8007736:	000f      	movs	r7, r1
 8007738:	e78f      	b.n	800765a <_strtod_l+0xaf6>
 800773a:	0002      	movs	r2, r0
 800773c:	9218      	str	r2, [sp, #96]	; 0x60
 800773e:	9319      	str	r3, [sp, #100]	; 0x64
 8007740:	e7dd      	b.n	80076fe <_strtod_l+0xb9a>
 8007742:	4b11      	ldr	r3, [pc, #68]	; (8007788 <_strtod_l+0xc24>)
 8007744:	f7f8 fe88 	bl	8000458 <__aeabi_dcmplt>
 8007748:	e7b1      	b.n	80076ae <_strtod_l+0xb4a>
 800774a:	46c0      	nop			; (mov r8, r8)
 800774c:	fff00000 	.word	0xfff00000
 8007750:	000fffff 	.word	0x000fffff
 8007754:	3ff00000 	.word	0x3ff00000
 8007758:	7ff00000 	.word	0x7ff00000
 800775c:	7fe00000 	.word	0x7fe00000
 8007760:	fcb00000 	.word	0xfcb00000
 8007764:	7c9fffff 	.word	0x7c9fffff
 8007768:	7fefffff 	.word	0x7fefffff
 800776c:	3fe00000 	.word	0x3fe00000
 8007770:	bff00000 	.word	0xbff00000
 8007774:	94a03595 	.word	0x94a03595
 8007778:	3fdfffff 	.word	0x3fdfffff
 800777c:	35afe535 	.word	0x35afe535
 8007780:	ffc00000 	.word	0xffc00000
 8007784:	41dfffff 	.word	0x41dfffff
 8007788:	3fcfffff 	.word	0x3fcfffff

0800778c <_strtod_r>:
 800778c:	b510      	push	{r4, lr}
 800778e:	4b02      	ldr	r3, [pc, #8]	; (8007798 <_strtod_r+0xc>)
 8007790:	f7ff f9e8 	bl	8006b64 <_strtod_l>
 8007794:	bd10      	pop	{r4, pc}
 8007796:	46c0      	nop			; (mov r8, r8)
 8007798:	20000074 	.word	0x20000074

0800779c <_strtol_l.constprop.0>:
 800779c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800779e:	b087      	sub	sp, #28
 80077a0:	001e      	movs	r6, r3
 80077a2:	9005      	str	r0, [sp, #20]
 80077a4:	9101      	str	r1, [sp, #4]
 80077a6:	9202      	str	r2, [sp, #8]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d045      	beq.n	8007838 <_strtol_l.constprop.0+0x9c>
 80077ac:	000b      	movs	r3, r1
 80077ae:	2e24      	cmp	r6, #36	; 0x24
 80077b0:	d842      	bhi.n	8007838 <_strtol_l.constprop.0+0x9c>
 80077b2:	4a3f      	ldr	r2, [pc, #252]	; (80078b0 <_strtol_l.constprop.0+0x114>)
 80077b4:	2108      	movs	r1, #8
 80077b6:	4694      	mov	ip, r2
 80077b8:	001a      	movs	r2, r3
 80077ba:	4660      	mov	r0, ip
 80077bc:	7814      	ldrb	r4, [r2, #0]
 80077be:	3301      	adds	r3, #1
 80077c0:	5d00      	ldrb	r0, [r0, r4]
 80077c2:	001d      	movs	r5, r3
 80077c4:	0007      	movs	r7, r0
 80077c6:	400f      	ands	r7, r1
 80077c8:	4208      	tst	r0, r1
 80077ca:	d1f5      	bne.n	80077b8 <_strtol_l.constprop.0+0x1c>
 80077cc:	2c2d      	cmp	r4, #45	; 0x2d
 80077ce:	d13a      	bne.n	8007846 <_strtol_l.constprop.0+0xaa>
 80077d0:	2701      	movs	r7, #1
 80077d2:	781c      	ldrb	r4, [r3, #0]
 80077d4:	1c95      	adds	r5, r2, #2
 80077d6:	2e00      	cmp	r6, #0
 80077d8:	d065      	beq.n	80078a6 <_strtol_l.constprop.0+0x10a>
 80077da:	2e10      	cmp	r6, #16
 80077dc:	d109      	bne.n	80077f2 <_strtol_l.constprop.0+0x56>
 80077de:	2c30      	cmp	r4, #48	; 0x30
 80077e0:	d107      	bne.n	80077f2 <_strtol_l.constprop.0+0x56>
 80077e2:	2220      	movs	r2, #32
 80077e4:	782b      	ldrb	r3, [r5, #0]
 80077e6:	4393      	bics	r3, r2
 80077e8:	2b58      	cmp	r3, #88	; 0x58
 80077ea:	d157      	bne.n	800789c <_strtol_l.constprop.0+0x100>
 80077ec:	2610      	movs	r6, #16
 80077ee:	786c      	ldrb	r4, [r5, #1]
 80077f0:	3502      	adds	r5, #2
 80077f2:	4b30      	ldr	r3, [pc, #192]	; (80078b4 <_strtol_l.constprop.0+0x118>)
 80077f4:	0031      	movs	r1, r6
 80077f6:	18fb      	adds	r3, r7, r3
 80077f8:	0018      	movs	r0, r3
 80077fa:	9303      	str	r3, [sp, #12]
 80077fc:	f7f8 fd26 	bl	800024c <__aeabi_uidivmod>
 8007800:	2300      	movs	r3, #0
 8007802:	2201      	movs	r2, #1
 8007804:	4684      	mov	ip, r0
 8007806:	0018      	movs	r0, r3
 8007808:	9104      	str	r1, [sp, #16]
 800780a:	4252      	negs	r2, r2
 800780c:	0021      	movs	r1, r4
 800780e:	3930      	subs	r1, #48	; 0x30
 8007810:	2909      	cmp	r1, #9
 8007812:	d81d      	bhi.n	8007850 <_strtol_l.constprop.0+0xb4>
 8007814:	000c      	movs	r4, r1
 8007816:	42a6      	cmp	r6, r4
 8007818:	dd28      	ble.n	800786c <_strtol_l.constprop.0+0xd0>
 800781a:	2b00      	cmp	r3, #0
 800781c:	db24      	blt.n	8007868 <_strtol_l.constprop.0+0xcc>
 800781e:	0013      	movs	r3, r2
 8007820:	4584      	cmp	ip, r0
 8007822:	d306      	bcc.n	8007832 <_strtol_l.constprop.0+0x96>
 8007824:	d102      	bne.n	800782c <_strtol_l.constprop.0+0x90>
 8007826:	9904      	ldr	r1, [sp, #16]
 8007828:	42a1      	cmp	r1, r4
 800782a:	db02      	blt.n	8007832 <_strtol_l.constprop.0+0x96>
 800782c:	2301      	movs	r3, #1
 800782e:	4370      	muls	r0, r6
 8007830:	1820      	adds	r0, r4, r0
 8007832:	782c      	ldrb	r4, [r5, #0]
 8007834:	3501      	adds	r5, #1
 8007836:	e7e9      	b.n	800780c <_strtol_l.constprop.0+0x70>
 8007838:	f7fe fab0 	bl	8005d9c <__errno>
 800783c:	2316      	movs	r3, #22
 800783e:	6003      	str	r3, [r0, #0]
 8007840:	2000      	movs	r0, #0
 8007842:	b007      	add	sp, #28
 8007844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007846:	2c2b      	cmp	r4, #43	; 0x2b
 8007848:	d1c5      	bne.n	80077d6 <_strtol_l.constprop.0+0x3a>
 800784a:	781c      	ldrb	r4, [r3, #0]
 800784c:	1c95      	adds	r5, r2, #2
 800784e:	e7c2      	b.n	80077d6 <_strtol_l.constprop.0+0x3a>
 8007850:	0021      	movs	r1, r4
 8007852:	3941      	subs	r1, #65	; 0x41
 8007854:	2919      	cmp	r1, #25
 8007856:	d801      	bhi.n	800785c <_strtol_l.constprop.0+0xc0>
 8007858:	3c37      	subs	r4, #55	; 0x37
 800785a:	e7dc      	b.n	8007816 <_strtol_l.constprop.0+0x7a>
 800785c:	0021      	movs	r1, r4
 800785e:	3961      	subs	r1, #97	; 0x61
 8007860:	2919      	cmp	r1, #25
 8007862:	d803      	bhi.n	800786c <_strtol_l.constprop.0+0xd0>
 8007864:	3c57      	subs	r4, #87	; 0x57
 8007866:	e7d6      	b.n	8007816 <_strtol_l.constprop.0+0x7a>
 8007868:	0013      	movs	r3, r2
 800786a:	e7e2      	b.n	8007832 <_strtol_l.constprop.0+0x96>
 800786c:	2b00      	cmp	r3, #0
 800786e:	da09      	bge.n	8007884 <_strtol_l.constprop.0+0xe8>
 8007870:	2322      	movs	r3, #34	; 0x22
 8007872:	9a05      	ldr	r2, [sp, #20]
 8007874:	9803      	ldr	r0, [sp, #12]
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	9b02      	ldr	r3, [sp, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0e1      	beq.n	8007842 <_strtol_l.constprop.0+0xa6>
 800787e:	1e6b      	subs	r3, r5, #1
 8007880:	9301      	str	r3, [sp, #4]
 8007882:	e007      	b.n	8007894 <_strtol_l.constprop.0+0xf8>
 8007884:	2f00      	cmp	r7, #0
 8007886:	d000      	beq.n	800788a <_strtol_l.constprop.0+0xee>
 8007888:	4240      	negs	r0, r0
 800788a:	9a02      	ldr	r2, [sp, #8]
 800788c:	2a00      	cmp	r2, #0
 800788e:	d0d8      	beq.n	8007842 <_strtol_l.constprop.0+0xa6>
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1f4      	bne.n	800787e <_strtol_l.constprop.0+0xe2>
 8007894:	9b02      	ldr	r3, [sp, #8]
 8007896:	9a01      	ldr	r2, [sp, #4]
 8007898:	601a      	str	r2, [r3, #0]
 800789a:	e7d2      	b.n	8007842 <_strtol_l.constprop.0+0xa6>
 800789c:	2430      	movs	r4, #48	; 0x30
 800789e:	2e00      	cmp	r6, #0
 80078a0:	d1a7      	bne.n	80077f2 <_strtol_l.constprop.0+0x56>
 80078a2:	3608      	adds	r6, #8
 80078a4:	e7a5      	b.n	80077f2 <_strtol_l.constprop.0+0x56>
 80078a6:	2c30      	cmp	r4, #48	; 0x30
 80078a8:	d09b      	beq.n	80077e2 <_strtol_l.constprop.0+0x46>
 80078aa:	260a      	movs	r6, #10
 80078ac:	e7a1      	b.n	80077f2 <_strtol_l.constprop.0+0x56>
 80078ae:	46c0      	nop			; (mov r8, r8)
 80078b0:	0800aa09 	.word	0x0800aa09
 80078b4:	7fffffff 	.word	0x7fffffff

080078b8 <_strtol_r>:
 80078b8:	b510      	push	{r4, lr}
 80078ba:	f7ff ff6f 	bl	800779c <_strtol_l.constprop.0>
 80078be:	bd10      	pop	{r4, pc}

080078c0 <quorem>:
 80078c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078c2:	0006      	movs	r6, r0
 80078c4:	690b      	ldr	r3, [r1, #16]
 80078c6:	6932      	ldr	r2, [r6, #16]
 80078c8:	b087      	sub	sp, #28
 80078ca:	2000      	movs	r0, #0
 80078cc:	9103      	str	r1, [sp, #12]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	db65      	blt.n	800799e <quorem+0xde>
 80078d2:	3b01      	subs	r3, #1
 80078d4:	009c      	lsls	r4, r3, #2
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	000b      	movs	r3, r1
 80078da:	3314      	adds	r3, #20
 80078dc:	9305      	str	r3, [sp, #20]
 80078de:	191b      	adds	r3, r3, r4
 80078e0:	9304      	str	r3, [sp, #16]
 80078e2:	0033      	movs	r3, r6
 80078e4:	3314      	adds	r3, #20
 80078e6:	9302      	str	r3, [sp, #8]
 80078e8:	191c      	adds	r4, r3, r4
 80078ea:	9b04      	ldr	r3, [sp, #16]
 80078ec:	6827      	ldr	r7, [r4, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	0038      	movs	r0, r7
 80078f2:	1c5d      	adds	r5, r3, #1
 80078f4:	0029      	movs	r1, r5
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	f7f8 fc22 	bl	8000140 <__udivsi3>
 80078fc:	9001      	str	r0, [sp, #4]
 80078fe:	42af      	cmp	r7, r5
 8007900:	d324      	bcc.n	800794c <quorem+0x8c>
 8007902:	2500      	movs	r5, #0
 8007904:	46ac      	mov	ip, r5
 8007906:	9802      	ldr	r0, [sp, #8]
 8007908:	9f05      	ldr	r7, [sp, #20]
 800790a:	cf08      	ldmia	r7!, {r3}
 800790c:	9a01      	ldr	r2, [sp, #4]
 800790e:	b299      	uxth	r1, r3
 8007910:	4351      	muls	r1, r2
 8007912:	0c1b      	lsrs	r3, r3, #16
 8007914:	4353      	muls	r3, r2
 8007916:	1949      	adds	r1, r1, r5
 8007918:	0c0a      	lsrs	r2, r1, #16
 800791a:	189b      	adds	r3, r3, r2
 800791c:	6802      	ldr	r2, [r0, #0]
 800791e:	b289      	uxth	r1, r1
 8007920:	b292      	uxth	r2, r2
 8007922:	4462      	add	r2, ip
 8007924:	1a52      	subs	r2, r2, r1
 8007926:	6801      	ldr	r1, [r0, #0]
 8007928:	0c1d      	lsrs	r5, r3, #16
 800792a:	0c09      	lsrs	r1, r1, #16
 800792c:	b29b      	uxth	r3, r3
 800792e:	1acb      	subs	r3, r1, r3
 8007930:	1411      	asrs	r1, r2, #16
 8007932:	185b      	adds	r3, r3, r1
 8007934:	1419      	asrs	r1, r3, #16
 8007936:	b292      	uxth	r2, r2
 8007938:	041b      	lsls	r3, r3, #16
 800793a:	431a      	orrs	r2, r3
 800793c:	9b04      	ldr	r3, [sp, #16]
 800793e:	468c      	mov	ip, r1
 8007940:	c004      	stmia	r0!, {r2}
 8007942:	42bb      	cmp	r3, r7
 8007944:	d2e1      	bcs.n	800790a <quorem+0x4a>
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d030      	beq.n	80079ae <quorem+0xee>
 800794c:	0030      	movs	r0, r6
 800794e:	9903      	ldr	r1, [sp, #12]
 8007950:	f001 fcd4 	bl	80092fc <__mcmp>
 8007954:	2800      	cmp	r0, #0
 8007956:	db21      	blt.n	800799c <quorem+0xdc>
 8007958:	0030      	movs	r0, r6
 800795a:	2400      	movs	r4, #0
 800795c:	9b01      	ldr	r3, [sp, #4]
 800795e:	9903      	ldr	r1, [sp, #12]
 8007960:	3301      	adds	r3, #1
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	3014      	adds	r0, #20
 8007966:	3114      	adds	r1, #20
 8007968:	6803      	ldr	r3, [r0, #0]
 800796a:	c920      	ldmia	r1!, {r5}
 800796c:	b29a      	uxth	r2, r3
 800796e:	1914      	adds	r4, r2, r4
 8007970:	b2aa      	uxth	r2, r5
 8007972:	1aa2      	subs	r2, r4, r2
 8007974:	0c1b      	lsrs	r3, r3, #16
 8007976:	0c2d      	lsrs	r5, r5, #16
 8007978:	1414      	asrs	r4, r2, #16
 800797a:	1b5b      	subs	r3, r3, r5
 800797c:	191b      	adds	r3, r3, r4
 800797e:	141c      	asrs	r4, r3, #16
 8007980:	b292      	uxth	r2, r2
 8007982:	041b      	lsls	r3, r3, #16
 8007984:	4313      	orrs	r3, r2
 8007986:	c008      	stmia	r0!, {r3}
 8007988:	9b04      	ldr	r3, [sp, #16]
 800798a:	428b      	cmp	r3, r1
 800798c:	d2ec      	bcs.n	8007968 <quorem+0xa8>
 800798e:	9b00      	ldr	r3, [sp, #0]
 8007990:	9a02      	ldr	r2, [sp, #8]
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	18d3      	adds	r3, r2, r3
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	2a00      	cmp	r2, #0
 800799a:	d015      	beq.n	80079c8 <quorem+0x108>
 800799c:	9801      	ldr	r0, [sp, #4]
 800799e:	b007      	add	sp, #28
 80079a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d106      	bne.n	80079b6 <quorem+0xf6>
 80079a8:	9b00      	ldr	r3, [sp, #0]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	9b02      	ldr	r3, [sp, #8]
 80079b0:	3c04      	subs	r4, #4
 80079b2:	42a3      	cmp	r3, r4
 80079b4:	d3f5      	bcc.n	80079a2 <quorem+0xe2>
 80079b6:	9b00      	ldr	r3, [sp, #0]
 80079b8:	6133      	str	r3, [r6, #16]
 80079ba:	e7c7      	b.n	800794c <quorem+0x8c>
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	2a00      	cmp	r2, #0
 80079c0:	d106      	bne.n	80079d0 <quorem+0x110>
 80079c2:	9a00      	ldr	r2, [sp, #0]
 80079c4:	3a01      	subs	r2, #1
 80079c6:	9200      	str	r2, [sp, #0]
 80079c8:	9a02      	ldr	r2, [sp, #8]
 80079ca:	3b04      	subs	r3, #4
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d3f5      	bcc.n	80079bc <quorem+0xfc>
 80079d0:	9b00      	ldr	r3, [sp, #0]
 80079d2:	6133      	str	r3, [r6, #16]
 80079d4:	e7e2      	b.n	800799c <quorem+0xdc>
	...

080079d8 <_dtoa_r>:
 80079d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079da:	b09d      	sub	sp, #116	; 0x74
 80079dc:	9202      	str	r2, [sp, #8]
 80079de:	9303      	str	r3, [sp, #12]
 80079e0:	9b02      	ldr	r3, [sp, #8]
 80079e2:	9c03      	ldr	r4, [sp, #12]
 80079e4:	9308      	str	r3, [sp, #32]
 80079e6:	9409      	str	r4, [sp, #36]	; 0x24
 80079e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80079ea:	0007      	movs	r7, r0
 80079ec:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80079ee:	2c00      	cmp	r4, #0
 80079f0:	d10e      	bne.n	8007a10 <_dtoa_r+0x38>
 80079f2:	2010      	movs	r0, #16
 80079f4:	f001 f982 	bl	8008cfc <malloc>
 80079f8:	1e02      	subs	r2, r0, #0
 80079fa:	6278      	str	r0, [r7, #36]	; 0x24
 80079fc:	d104      	bne.n	8007a08 <_dtoa_r+0x30>
 80079fe:	21ea      	movs	r1, #234	; 0xea
 8007a00:	4bc7      	ldr	r3, [pc, #796]	; (8007d20 <_dtoa_r+0x348>)
 8007a02:	48c8      	ldr	r0, [pc, #800]	; (8007d24 <_dtoa_r+0x34c>)
 8007a04:	f002 f91c 	bl	8009c40 <__assert_func>
 8007a08:	6044      	str	r4, [r0, #4]
 8007a0a:	6084      	str	r4, [r0, #8]
 8007a0c:	6004      	str	r4, [r0, #0]
 8007a0e:	60c4      	str	r4, [r0, #12]
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	6819      	ldr	r1, [r3, #0]
 8007a14:	2900      	cmp	r1, #0
 8007a16:	d00a      	beq.n	8007a2e <_dtoa_r+0x56>
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	4093      	lsls	r3, r2
 8007a1e:	604a      	str	r2, [r1, #4]
 8007a20:	608b      	str	r3, [r1, #8]
 8007a22:	0038      	movs	r0, r7
 8007a24:	f001 f9de 	bl	8008de4 <_Bfree>
 8007a28:	2200      	movs	r2, #0
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	9b03      	ldr	r3, [sp, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	da20      	bge.n	8007a76 <_dtoa_r+0x9e>
 8007a34:	2301      	movs	r3, #1
 8007a36:	602b      	str	r3, [r5, #0]
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	085b      	lsrs	r3, r3, #1
 8007a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a40:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007a42:	4bb9      	ldr	r3, [pc, #740]	; (8007d28 <_dtoa_r+0x350>)
 8007a44:	4ab8      	ldr	r2, [pc, #736]	; (8007d28 <_dtoa_r+0x350>)
 8007a46:	402b      	ands	r3, r5
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d117      	bne.n	8007a7c <_dtoa_r+0xa4>
 8007a4c:	4bb7      	ldr	r3, [pc, #732]	; (8007d2c <_dtoa_r+0x354>)
 8007a4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007a50:	0328      	lsls	r0, r5, #12
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	9b02      	ldr	r3, [sp, #8]
 8007a56:	0b00      	lsrs	r0, r0, #12
 8007a58:	4318      	orrs	r0, r3
 8007a5a:	d101      	bne.n	8007a60 <_dtoa_r+0x88>
 8007a5c:	f000 fdbf 	bl	80085de <_dtoa_r+0xc06>
 8007a60:	48b3      	ldr	r0, [pc, #716]	; (8007d30 <_dtoa_r+0x358>)
 8007a62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a64:	9006      	str	r0, [sp, #24]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <_dtoa_r+0x98>
 8007a6a:	4bb2      	ldr	r3, [pc, #712]	; (8007d34 <_dtoa_r+0x35c>)
 8007a6c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	9806      	ldr	r0, [sp, #24]
 8007a72:	b01d      	add	sp, #116	; 0x74
 8007a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a76:	2300      	movs	r3, #0
 8007a78:	602b      	str	r3, [r5, #0]
 8007a7a:	e7e1      	b.n	8007a40 <_dtoa_r+0x68>
 8007a7c:	9b08      	ldr	r3, [sp, #32]
 8007a7e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007a80:	9312      	str	r3, [sp, #72]	; 0x48
 8007a82:	9413      	str	r4, [sp, #76]	; 0x4c
 8007a84:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007a86:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f7f8 fcde 	bl	800044c <__aeabi_dcmpeq>
 8007a90:	1e04      	subs	r4, r0, #0
 8007a92:	d009      	beq.n	8007aa8 <_dtoa_r+0xd0>
 8007a94:	2301      	movs	r3, #1
 8007a96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	4ba7      	ldr	r3, [pc, #668]	; (8007d38 <_dtoa_r+0x360>)
 8007a9c:	9306      	str	r3, [sp, #24]
 8007a9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d0e5      	beq.n	8007a70 <_dtoa_r+0x98>
 8007aa4:	4ba5      	ldr	r3, [pc, #660]	; (8007d3c <_dtoa_r+0x364>)
 8007aa6:	e7e1      	b.n	8007a6c <_dtoa_r+0x94>
 8007aa8:	ab1a      	add	r3, sp, #104	; 0x68
 8007aaa:	9301      	str	r3, [sp, #4]
 8007aac:	ab1b      	add	r3, sp, #108	; 0x6c
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	0038      	movs	r0, r7
 8007ab2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ab4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ab6:	f001 fd49 	bl	800954c <__d2b>
 8007aba:	006e      	lsls	r6, r5, #1
 8007abc:	9005      	str	r0, [sp, #20]
 8007abe:	0d76      	lsrs	r6, r6, #21
 8007ac0:	d100      	bne.n	8007ac4 <_dtoa_r+0xec>
 8007ac2:	e07c      	b.n	8007bbe <_dtoa_r+0x1e6>
 8007ac4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007ac6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ac8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007aca:	4a9d      	ldr	r2, [pc, #628]	; (8007d40 <_dtoa_r+0x368>)
 8007acc:	031b      	lsls	r3, r3, #12
 8007ace:	0b1b      	lsrs	r3, r3, #12
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	0011      	movs	r1, r2
 8007ad4:	4b9b      	ldr	r3, [pc, #620]	; (8007d44 <_dtoa_r+0x36c>)
 8007ad6:	9418      	str	r4, [sp, #96]	; 0x60
 8007ad8:	18f6      	adds	r6, r6, r3
 8007ada:	2200      	movs	r2, #0
 8007adc:	4b9a      	ldr	r3, [pc, #616]	; (8007d48 <_dtoa_r+0x370>)
 8007ade:	f7f9 fefd 	bl	80018dc <__aeabi_dsub>
 8007ae2:	4a9a      	ldr	r2, [pc, #616]	; (8007d4c <_dtoa_r+0x374>)
 8007ae4:	4b9a      	ldr	r3, [pc, #616]	; (8007d50 <_dtoa_r+0x378>)
 8007ae6:	f7f9 fc8d 	bl	8001404 <__aeabi_dmul>
 8007aea:	4a9a      	ldr	r2, [pc, #616]	; (8007d54 <_dtoa_r+0x37c>)
 8007aec:	4b9a      	ldr	r3, [pc, #616]	; (8007d58 <_dtoa_r+0x380>)
 8007aee:	f7f8 fd4b 	bl	8000588 <__aeabi_dadd>
 8007af2:	0004      	movs	r4, r0
 8007af4:	0030      	movs	r0, r6
 8007af6:	000d      	movs	r5, r1
 8007af8:	f7fa fad6 	bl	80020a8 <__aeabi_i2d>
 8007afc:	4a97      	ldr	r2, [pc, #604]	; (8007d5c <_dtoa_r+0x384>)
 8007afe:	4b98      	ldr	r3, [pc, #608]	; (8007d60 <_dtoa_r+0x388>)
 8007b00:	f7f9 fc80 	bl	8001404 <__aeabi_dmul>
 8007b04:	0002      	movs	r2, r0
 8007b06:	000b      	movs	r3, r1
 8007b08:	0020      	movs	r0, r4
 8007b0a:	0029      	movs	r1, r5
 8007b0c:	f7f8 fd3c 	bl	8000588 <__aeabi_dadd>
 8007b10:	0004      	movs	r4, r0
 8007b12:	000d      	movs	r5, r1
 8007b14:	f7fa fa92 	bl	800203c <__aeabi_d2iz>
 8007b18:	2200      	movs	r2, #0
 8007b1a:	9002      	str	r0, [sp, #8]
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	0020      	movs	r0, r4
 8007b20:	0029      	movs	r1, r5
 8007b22:	f7f8 fc99 	bl	8000458 <__aeabi_dcmplt>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d00b      	beq.n	8007b42 <_dtoa_r+0x16a>
 8007b2a:	9802      	ldr	r0, [sp, #8]
 8007b2c:	f7fa fabc 	bl	80020a8 <__aeabi_i2d>
 8007b30:	002b      	movs	r3, r5
 8007b32:	0022      	movs	r2, r4
 8007b34:	f7f8 fc8a 	bl	800044c <__aeabi_dcmpeq>
 8007b38:	4243      	negs	r3, r0
 8007b3a:	4158      	adcs	r0, r3
 8007b3c:	9b02      	ldr	r3, [sp, #8]
 8007b3e:	1a1b      	subs	r3, r3, r0
 8007b40:	9302      	str	r3, [sp, #8]
 8007b42:	2301      	movs	r3, #1
 8007b44:	9316      	str	r3, [sp, #88]	; 0x58
 8007b46:	9b02      	ldr	r3, [sp, #8]
 8007b48:	2b16      	cmp	r3, #22
 8007b4a:	d80f      	bhi.n	8007b6c <_dtoa_r+0x194>
 8007b4c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007b4e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007b50:	00da      	lsls	r2, r3, #3
 8007b52:	4b84      	ldr	r3, [pc, #528]	; (8007d64 <_dtoa_r+0x38c>)
 8007b54:	189b      	adds	r3, r3, r2
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f7f8 fc7d 	bl	8000458 <__aeabi_dcmplt>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d049      	beq.n	8007bf6 <_dtoa_r+0x21e>
 8007b62:	9b02      	ldr	r3, [sp, #8]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	9302      	str	r3, [sp, #8]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	9316      	str	r3, [sp, #88]	; 0x58
 8007b6c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007b6e:	1b9e      	subs	r6, r3, r6
 8007b70:	2300      	movs	r3, #0
 8007b72:	930a      	str	r3, [sp, #40]	; 0x28
 8007b74:	0033      	movs	r3, r6
 8007b76:	3b01      	subs	r3, #1
 8007b78:	930d      	str	r3, [sp, #52]	; 0x34
 8007b7a:	d504      	bpl.n	8007b86 <_dtoa_r+0x1ae>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	1b9b      	subs	r3, r3, r6
 8007b80:	930a      	str	r3, [sp, #40]	; 0x28
 8007b82:	2300      	movs	r3, #0
 8007b84:	930d      	str	r3, [sp, #52]	; 0x34
 8007b86:	9b02      	ldr	r3, [sp, #8]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	db36      	blt.n	8007bfa <_dtoa_r+0x222>
 8007b8c:	9a02      	ldr	r2, [sp, #8]
 8007b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b90:	4694      	mov	ip, r2
 8007b92:	4463      	add	r3, ip
 8007b94:	930d      	str	r3, [sp, #52]	; 0x34
 8007b96:	2300      	movs	r3, #0
 8007b98:	9215      	str	r2, [sp, #84]	; 0x54
 8007b9a:	930e      	str	r3, [sp, #56]	; 0x38
 8007b9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b9e:	2401      	movs	r4, #1
 8007ba0:	2b09      	cmp	r3, #9
 8007ba2:	d864      	bhi.n	8007c6e <_dtoa_r+0x296>
 8007ba4:	2b05      	cmp	r3, #5
 8007ba6:	dd02      	ble.n	8007bae <_dtoa_r+0x1d6>
 8007ba8:	2400      	movs	r4, #0
 8007baa:	3b04      	subs	r3, #4
 8007bac:	9322      	str	r3, [sp, #136]	; 0x88
 8007bae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bb0:	1e98      	subs	r0, r3, #2
 8007bb2:	2803      	cmp	r0, #3
 8007bb4:	d864      	bhi.n	8007c80 <_dtoa_r+0x2a8>
 8007bb6:	f7f8 faaf 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007bba:	3829      	.short	0x3829
 8007bbc:	5836      	.short	0x5836
 8007bbe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007bc0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007bc2:	189e      	adds	r6, r3, r2
 8007bc4:	4b68      	ldr	r3, [pc, #416]	; (8007d68 <_dtoa_r+0x390>)
 8007bc6:	18f2      	adds	r2, r6, r3
 8007bc8:	2a20      	cmp	r2, #32
 8007bca:	dd0f      	ble.n	8007bec <_dtoa_r+0x214>
 8007bcc:	2340      	movs	r3, #64	; 0x40
 8007bce:	1a9b      	subs	r3, r3, r2
 8007bd0:	409d      	lsls	r5, r3
 8007bd2:	4b66      	ldr	r3, [pc, #408]	; (8007d6c <_dtoa_r+0x394>)
 8007bd4:	9802      	ldr	r0, [sp, #8]
 8007bd6:	18f3      	adds	r3, r6, r3
 8007bd8:	40d8      	lsrs	r0, r3
 8007bda:	4328      	orrs	r0, r5
 8007bdc:	f7fa fa94 	bl	8002108 <__aeabi_ui2d>
 8007be0:	2301      	movs	r3, #1
 8007be2:	4c63      	ldr	r4, [pc, #396]	; (8007d70 <_dtoa_r+0x398>)
 8007be4:	3e01      	subs	r6, #1
 8007be6:	1909      	adds	r1, r1, r4
 8007be8:	9318      	str	r3, [sp, #96]	; 0x60
 8007bea:	e776      	b.n	8007ada <_dtoa_r+0x102>
 8007bec:	2320      	movs	r3, #32
 8007bee:	9802      	ldr	r0, [sp, #8]
 8007bf0:	1a9b      	subs	r3, r3, r2
 8007bf2:	4098      	lsls	r0, r3
 8007bf4:	e7f2      	b.n	8007bdc <_dtoa_r+0x204>
 8007bf6:	9016      	str	r0, [sp, #88]	; 0x58
 8007bf8:	e7b8      	b.n	8007b6c <_dtoa_r+0x194>
 8007bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bfc:	9a02      	ldr	r2, [sp, #8]
 8007bfe:	1a9b      	subs	r3, r3, r2
 8007c00:	930a      	str	r3, [sp, #40]	; 0x28
 8007c02:	4253      	negs	r3, r2
 8007c04:	930e      	str	r3, [sp, #56]	; 0x38
 8007c06:	2300      	movs	r3, #0
 8007c08:	9315      	str	r3, [sp, #84]	; 0x54
 8007c0a:	e7c7      	b.n	8007b9c <_dtoa_r+0x1c4>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c12:	930c      	str	r3, [sp, #48]	; 0x30
 8007c14:	9307      	str	r3, [sp, #28]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	dc13      	bgt.n	8007c42 <_dtoa_r+0x26a>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	001a      	movs	r2, r3
 8007c1e:	930c      	str	r3, [sp, #48]	; 0x30
 8007c20:	9307      	str	r3, [sp, #28]
 8007c22:	9223      	str	r2, [sp, #140]	; 0x8c
 8007c24:	e00d      	b.n	8007c42 <_dtoa_r+0x26a>
 8007c26:	2301      	movs	r3, #1
 8007c28:	e7f1      	b.n	8007c0e <_dtoa_r+0x236>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007c2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c30:	4694      	mov	ip, r2
 8007c32:	9b02      	ldr	r3, [sp, #8]
 8007c34:	4463      	add	r3, ip
 8007c36:	930c      	str	r3, [sp, #48]	; 0x30
 8007c38:	3301      	adds	r3, #1
 8007c3a:	9307      	str	r3, [sp, #28]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	dc00      	bgt.n	8007c42 <_dtoa_r+0x26a>
 8007c40:	2301      	movs	r3, #1
 8007c42:	2200      	movs	r2, #0
 8007c44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c46:	6042      	str	r2, [r0, #4]
 8007c48:	3204      	adds	r2, #4
 8007c4a:	0015      	movs	r5, r2
 8007c4c:	3514      	adds	r5, #20
 8007c4e:	6841      	ldr	r1, [r0, #4]
 8007c50:	429d      	cmp	r5, r3
 8007c52:	d919      	bls.n	8007c88 <_dtoa_r+0x2b0>
 8007c54:	0038      	movs	r0, r7
 8007c56:	f001 f881 	bl	8008d5c <_Balloc>
 8007c5a:	9006      	str	r0, [sp, #24]
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d117      	bne.n	8007c90 <_dtoa_r+0x2b8>
 8007c60:	21d5      	movs	r1, #213	; 0xd5
 8007c62:	0002      	movs	r2, r0
 8007c64:	4b43      	ldr	r3, [pc, #268]	; (8007d74 <_dtoa_r+0x39c>)
 8007c66:	0049      	lsls	r1, r1, #1
 8007c68:	e6cb      	b.n	8007a02 <_dtoa_r+0x2a>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e7de      	b.n	8007c2c <_dtoa_r+0x254>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	940f      	str	r4, [sp, #60]	; 0x3c
 8007c72:	9322      	str	r3, [sp, #136]	; 0x88
 8007c74:	3b01      	subs	r3, #1
 8007c76:	930c      	str	r3, [sp, #48]	; 0x30
 8007c78:	9307      	str	r3, [sp, #28]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	3313      	adds	r3, #19
 8007c7e:	e7d0      	b.n	8007c22 <_dtoa_r+0x24a>
 8007c80:	2301      	movs	r3, #1
 8007c82:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c84:	3b02      	subs	r3, #2
 8007c86:	e7f6      	b.n	8007c76 <_dtoa_r+0x29e>
 8007c88:	3101      	adds	r1, #1
 8007c8a:	6041      	str	r1, [r0, #4]
 8007c8c:	0052      	lsls	r2, r2, #1
 8007c8e:	e7dc      	b.n	8007c4a <_dtoa_r+0x272>
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	9a06      	ldr	r2, [sp, #24]
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	9b07      	ldr	r3, [sp, #28]
 8007c98:	2b0e      	cmp	r3, #14
 8007c9a:	d900      	bls.n	8007c9e <_dtoa_r+0x2c6>
 8007c9c:	e0eb      	b.n	8007e76 <_dtoa_r+0x49e>
 8007c9e:	2c00      	cmp	r4, #0
 8007ca0:	d100      	bne.n	8007ca4 <_dtoa_r+0x2cc>
 8007ca2:	e0e8      	b.n	8007e76 <_dtoa_r+0x49e>
 8007ca4:	9b02      	ldr	r3, [sp, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	dd68      	ble.n	8007d7c <_dtoa_r+0x3a4>
 8007caa:	001a      	movs	r2, r3
 8007cac:	210f      	movs	r1, #15
 8007cae:	4b2d      	ldr	r3, [pc, #180]	; (8007d64 <_dtoa_r+0x38c>)
 8007cb0:	400a      	ands	r2, r1
 8007cb2:	00d2      	lsls	r2, r2, #3
 8007cb4:	189b      	adds	r3, r3, r2
 8007cb6:	681d      	ldr	r5, [r3, #0]
 8007cb8:	685e      	ldr	r6, [r3, #4]
 8007cba:	9b02      	ldr	r3, [sp, #8]
 8007cbc:	111c      	asrs	r4, r3, #4
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	9310      	str	r3, [sp, #64]	; 0x40
 8007cc2:	9b02      	ldr	r3, [sp, #8]
 8007cc4:	05db      	lsls	r3, r3, #23
 8007cc6:	d50b      	bpl.n	8007ce0 <_dtoa_r+0x308>
 8007cc8:	4b2b      	ldr	r3, [pc, #172]	; (8007d78 <_dtoa_r+0x3a0>)
 8007cca:	400c      	ands	r4, r1
 8007ccc:	6a1a      	ldr	r2, [r3, #32]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007cd2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007cd4:	f7f8 ff94 	bl	8000c00 <__aeabi_ddiv>
 8007cd8:	2303      	movs	r3, #3
 8007cda:	9008      	str	r0, [sp, #32]
 8007cdc:	9109      	str	r1, [sp, #36]	; 0x24
 8007cde:	9310      	str	r3, [sp, #64]	; 0x40
 8007ce0:	4b25      	ldr	r3, [pc, #148]	; (8007d78 <_dtoa_r+0x3a0>)
 8007ce2:	9314      	str	r3, [sp, #80]	; 0x50
 8007ce4:	2c00      	cmp	r4, #0
 8007ce6:	d108      	bne.n	8007cfa <_dtoa_r+0x322>
 8007ce8:	9808      	ldr	r0, [sp, #32]
 8007cea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cec:	002a      	movs	r2, r5
 8007cee:	0033      	movs	r3, r6
 8007cf0:	f7f8 ff86 	bl	8000c00 <__aeabi_ddiv>
 8007cf4:	9008      	str	r0, [sp, #32]
 8007cf6:	9109      	str	r1, [sp, #36]	; 0x24
 8007cf8:	e05c      	b.n	8007db4 <_dtoa_r+0x3dc>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	421c      	tst	r4, r3
 8007cfe:	d00b      	beq.n	8007d18 <_dtoa_r+0x340>
 8007d00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d02:	0028      	movs	r0, r5
 8007d04:	3301      	adds	r3, #1
 8007d06:	9310      	str	r3, [sp, #64]	; 0x40
 8007d08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d0a:	0031      	movs	r1, r6
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f7f9 fb78 	bl	8001404 <__aeabi_dmul>
 8007d14:	0005      	movs	r5, r0
 8007d16:	000e      	movs	r6, r1
 8007d18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d1a:	1064      	asrs	r4, r4, #1
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	e7e0      	b.n	8007ce2 <_dtoa_r+0x30a>
 8007d20:	0800ab16 	.word	0x0800ab16
 8007d24:	0800ab2d 	.word	0x0800ab2d
 8007d28:	7ff00000 	.word	0x7ff00000
 8007d2c:	0000270f 	.word	0x0000270f
 8007d30:	0800ab12 	.word	0x0800ab12
 8007d34:	0800ab15 	.word	0x0800ab15
 8007d38:	0800a98c 	.word	0x0800a98c
 8007d3c:	0800a98d 	.word	0x0800a98d
 8007d40:	3ff00000 	.word	0x3ff00000
 8007d44:	fffffc01 	.word	0xfffffc01
 8007d48:	3ff80000 	.word	0x3ff80000
 8007d4c:	636f4361 	.word	0x636f4361
 8007d50:	3fd287a7 	.word	0x3fd287a7
 8007d54:	8b60c8b3 	.word	0x8b60c8b3
 8007d58:	3fc68a28 	.word	0x3fc68a28
 8007d5c:	509f79fb 	.word	0x509f79fb
 8007d60:	3fd34413 	.word	0x3fd34413
 8007d64:	0800ac98 	.word	0x0800ac98
 8007d68:	00000432 	.word	0x00000432
 8007d6c:	00000412 	.word	0x00000412
 8007d70:	fe100000 	.word	0xfe100000
 8007d74:	0800ab88 	.word	0x0800ab88
 8007d78:	0800ac70 	.word	0x0800ac70
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	9310      	str	r3, [sp, #64]	; 0x40
 8007d80:	9b02      	ldr	r3, [sp, #8]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d016      	beq.n	8007db4 <_dtoa_r+0x3dc>
 8007d86:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d88:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d8a:	425c      	negs	r4, r3
 8007d8c:	230f      	movs	r3, #15
 8007d8e:	4ab6      	ldr	r2, [pc, #728]	; (8008068 <_dtoa_r+0x690>)
 8007d90:	4023      	ands	r3, r4
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	18d3      	adds	r3, r2, r3
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f7f9 fb33 	bl	8001404 <__aeabi_dmul>
 8007d9e:	2601      	movs	r6, #1
 8007da0:	2300      	movs	r3, #0
 8007da2:	9008      	str	r0, [sp, #32]
 8007da4:	9109      	str	r1, [sp, #36]	; 0x24
 8007da6:	4db1      	ldr	r5, [pc, #708]	; (800806c <_dtoa_r+0x694>)
 8007da8:	1124      	asrs	r4, r4, #4
 8007daa:	2c00      	cmp	r4, #0
 8007dac:	d000      	beq.n	8007db0 <_dtoa_r+0x3d8>
 8007dae:	e094      	b.n	8007eda <_dtoa_r+0x502>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d19f      	bne.n	8007cf4 <_dtoa_r+0x31c>
 8007db4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d100      	bne.n	8007dbc <_dtoa_r+0x3e4>
 8007dba:	e09b      	b.n	8007ef4 <_dtoa_r+0x51c>
 8007dbc:	9c08      	ldr	r4, [sp, #32]
 8007dbe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	0020      	movs	r0, r4
 8007dc4:	0029      	movs	r1, r5
 8007dc6:	4baa      	ldr	r3, [pc, #680]	; (8008070 <_dtoa_r+0x698>)
 8007dc8:	f7f8 fb46 	bl	8000458 <__aeabi_dcmplt>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d100      	bne.n	8007dd2 <_dtoa_r+0x3fa>
 8007dd0:	e090      	b.n	8007ef4 <_dtoa_r+0x51c>
 8007dd2:	9b07      	ldr	r3, [sp, #28]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d100      	bne.n	8007dda <_dtoa_r+0x402>
 8007dd8:	e08c      	b.n	8007ef4 <_dtoa_r+0x51c>
 8007dda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	dd46      	ble.n	8007e6e <_dtoa_r+0x496>
 8007de0:	9b02      	ldr	r3, [sp, #8]
 8007de2:	2200      	movs	r2, #0
 8007de4:	0020      	movs	r0, r4
 8007de6:	0029      	movs	r1, r5
 8007de8:	1e5e      	subs	r6, r3, #1
 8007dea:	4ba2      	ldr	r3, [pc, #648]	; (8008074 <_dtoa_r+0x69c>)
 8007dec:	f7f9 fb0a 	bl	8001404 <__aeabi_dmul>
 8007df0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007df2:	9008      	str	r0, [sp, #32]
 8007df4:	9109      	str	r1, [sp, #36]	; 0x24
 8007df6:	3301      	adds	r3, #1
 8007df8:	9310      	str	r3, [sp, #64]	; 0x40
 8007dfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dfc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007dfe:	9c08      	ldr	r4, [sp, #32]
 8007e00:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e02:	9314      	str	r3, [sp, #80]	; 0x50
 8007e04:	f7fa f950 	bl	80020a8 <__aeabi_i2d>
 8007e08:	0022      	movs	r2, r4
 8007e0a:	002b      	movs	r3, r5
 8007e0c:	f7f9 fafa 	bl	8001404 <__aeabi_dmul>
 8007e10:	2200      	movs	r2, #0
 8007e12:	4b99      	ldr	r3, [pc, #612]	; (8008078 <_dtoa_r+0x6a0>)
 8007e14:	f7f8 fbb8 	bl	8000588 <__aeabi_dadd>
 8007e18:	9010      	str	r0, [sp, #64]	; 0x40
 8007e1a:	9111      	str	r1, [sp, #68]	; 0x44
 8007e1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e20:	9208      	str	r2, [sp, #32]
 8007e22:	9309      	str	r3, [sp, #36]	; 0x24
 8007e24:	4a95      	ldr	r2, [pc, #596]	; (800807c <_dtoa_r+0x6a4>)
 8007e26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e28:	4694      	mov	ip, r2
 8007e2a:	4463      	add	r3, ip
 8007e2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d161      	bne.n	8007efa <_dtoa_r+0x522>
 8007e36:	2200      	movs	r2, #0
 8007e38:	0020      	movs	r0, r4
 8007e3a:	0029      	movs	r1, r5
 8007e3c:	4b90      	ldr	r3, [pc, #576]	; (8008080 <_dtoa_r+0x6a8>)
 8007e3e:	f7f9 fd4d 	bl	80018dc <__aeabi_dsub>
 8007e42:	9a08      	ldr	r2, [sp, #32]
 8007e44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e46:	0004      	movs	r4, r0
 8007e48:	000d      	movs	r5, r1
 8007e4a:	f7f8 fb19 	bl	8000480 <__aeabi_dcmpgt>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d000      	beq.n	8007e54 <_dtoa_r+0x47c>
 8007e52:	e2af      	b.n	80083b4 <_dtoa_r+0x9dc>
 8007e54:	488b      	ldr	r0, [pc, #556]	; (8008084 <_dtoa_r+0x6ac>)
 8007e56:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007e58:	4684      	mov	ip, r0
 8007e5a:	4461      	add	r1, ip
 8007e5c:	000b      	movs	r3, r1
 8007e5e:	0020      	movs	r0, r4
 8007e60:	0029      	movs	r1, r5
 8007e62:	9a08      	ldr	r2, [sp, #32]
 8007e64:	f7f8 faf8 	bl	8000458 <__aeabi_dcmplt>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d000      	beq.n	8007e6e <_dtoa_r+0x496>
 8007e6c:	e29f      	b.n	80083ae <_dtoa_r+0x9d6>
 8007e6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007e72:	9308      	str	r3, [sp, #32]
 8007e74:	9409      	str	r4, [sp, #36]	; 0x24
 8007e76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	da00      	bge.n	8007e7e <_dtoa_r+0x4a6>
 8007e7c:	e172      	b.n	8008164 <_dtoa_r+0x78c>
 8007e7e:	9a02      	ldr	r2, [sp, #8]
 8007e80:	2a0e      	cmp	r2, #14
 8007e82:	dd00      	ble.n	8007e86 <_dtoa_r+0x4ae>
 8007e84:	e16e      	b.n	8008164 <_dtoa_r+0x78c>
 8007e86:	4b78      	ldr	r3, [pc, #480]	; (8008068 <_dtoa_r+0x690>)
 8007e88:	00d2      	lsls	r2, r2, #3
 8007e8a:	189b      	adds	r3, r3, r2
 8007e8c:	685c      	ldr	r4, [r3, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	930a      	str	r3, [sp, #40]	; 0x28
 8007e92:	940b      	str	r4, [sp, #44]	; 0x2c
 8007e94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	db00      	blt.n	8007e9c <_dtoa_r+0x4c4>
 8007e9a:	e0f7      	b.n	800808c <_dtoa_r+0x6b4>
 8007e9c:	9b07      	ldr	r3, [sp, #28]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	dd00      	ble.n	8007ea4 <_dtoa_r+0x4cc>
 8007ea2:	e0f3      	b.n	800808c <_dtoa_r+0x6b4>
 8007ea4:	d000      	beq.n	8007ea8 <_dtoa_r+0x4d0>
 8007ea6:	e282      	b.n	80083ae <_dtoa_r+0x9d6>
 8007ea8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007eaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007eac:	2200      	movs	r2, #0
 8007eae:	4b74      	ldr	r3, [pc, #464]	; (8008080 <_dtoa_r+0x6a8>)
 8007eb0:	f7f9 faa8 	bl	8001404 <__aeabi_dmul>
 8007eb4:	9a08      	ldr	r2, [sp, #32]
 8007eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb8:	f7f8 faec 	bl	8000494 <__aeabi_dcmpge>
 8007ebc:	9e07      	ldr	r6, [sp, #28]
 8007ebe:	0035      	movs	r5, r6
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	d000      	beq.n	8007ec6 <_dtoa_r+0x4ee>
 8007ec4:	e259      	b.n	800837a <_dtoa_r+0x9a2>
 8007ec6:	9b06      	ldr	r3, [sp, #24]
 8007ec8:	9a06      	ldr	r2, [sp, #24]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	9308      	str	r3, [sp, #32]
 8007ece:	2331      	movs	r3, #49	; 0x31
 8007ed0:	7013      	strb	r3, [r2, #0]
 8007ed2:	9b02      	ldr	r3, [sp, #8]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	9302      	str	r3, [sp, #8]
 8007ed8:	e254      	b.n	8008384 <_dtoa_r+0x9ac>
 8007eda:	4234      	tst	r4, r6
 8007edc:	d007      	beq.n	8007eee <_dtoa_r+0x516>
 8007ede:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	9310      	str	r3, [sp, #64]	; 0x40
 8007ee4:	682a      	ldr	r2, [r5, #0]
 8007ee6:	686b      	ldr	r3, [r5, #4]
 8007ee8:	f7f9 fa8c 	bl	8001404 <__aeabi_dmul>
 8007eec:	0033      	movs	r3, r6
 8007eee:	1064      	asrs	r4, r4, #1
 8007ef0:	3508      	adds	r5, #8
 8007ef2:	e75a      	b.n	8007daa <_dtoa_r+0x3d2>
 8007ef4:	9e02      	ldr	r6, [sp, #8]
 8007ef6:	9b07      	ldr	r3, [sp, #28]
 8007ef8:	e780      	b.n	8007dfc <_dtoa_r+0x424>
 8007efa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007efc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007efe:	1e5a      	subs	r2, r3, #1
 8007f00:	4b59      	ldr	r3, [pc, #356]	; (8008068 <_dtoa_r+0x690>)
 8007f02:	00d2      	lsls	r2, r2, #3
 8007f04:	189b      	adds	r3, r3, r2
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	2900      	cmp	r1, #0
 8007f0c:	d051      	beq.n	8007fb2 <_dtoa_r+0x5da>
 8007f0e:	2000      	movs	r0, #0
 8007f10:	495d      	ldr	r1, [pc, #372]	; (8008088 <_dtoa_r+0x6b0>)
 8007f12:	f7f8 fe75 	bl	8000c00 <__aeabi_ddiv>
 8007f16:	9a08      	ldr	r2, [sp, #32]
 8007f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f1a:	f7f9 fcdf 	bl	80018dc <__aeabi_dsub>
 8007f1e:	9a06      	ldr	r2, [sp, #24]
 8007f20:	9b06      	ldr	r3, [sp, #24]
 8007f22:	4694      	mov	ip, r2
 8007f24:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f28:	9010      	str	r0, [sp, #64]	; 0x40
 8007f2a:	9111      	str	r1, [sp, #68]	; 0x44
 8007f2c:	4463      	add	r3, ip
 8007f2e:	9319      	str	r3, [sp, #100]	; 0x64
 8007f30:	0029      	movs	r1, r5
 8007f32:	0020      	movs	r0, r4
 8007f34:	f7fa f882 	bl	800203c <__aeabi_d2iz>
 8007f38:	9014      	str	r0, [sp, #80]	; 0x50
 8007f3a:	f7fa f8b5 	bl	80020a8 <__aeabi_i2d>
 8007f3e:	0002      	movs	r2, r0
 8007f40:	000b      	movs	r3, r1
 8007f42:	0020      	movs	r0, r4
 8007f44:	0029      	movs	r1, r5
 8007f46:	f7f9 fcc9 	bl	80018dc <__aeabi_dsub>
 8007f4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f4e:	3301      	adds	r3, #1
 8007f50:	9308      	str	r3, [sp, #32]
 8007f52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f54:	0004      	movs	r4, r0
 8007f56:	3330      	adds	r3, #48	; 0x30
 8007f58:	7013      	strb	r3, [r2, #0]
 8007f5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f5e:	000d      	movs	r5, r1
 8007f60:	f7f8 fa7a 	bl	8000458 <__aeabi_dcmplt>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d175      	bne.n	8008054 <_dtoa_r+0x67c>
 8007f68:	0022      	movs	r2, r4
 8007f6a:	002b      	movs	r3, r5
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	4940      	ldr	r1, [pc, #256]	; (8008070 <_dtoa_r+0x698>)
 8007f70:	f7f9 fcb4 	bl	80018dc <__aeabi_dsub>
 8007f74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f78:	f7f8 fa6e 	bl	8000458 <__aeabi_dcmplt>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d000      	beq.n	8007f82 <_dtoa_r+0x5aa>
 8007f80:	e0d2      	b.n	8008128 <_dtoa_r+0x750>
 8007f82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f84:	9a08      	ldr	r2, [sp, #32]
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d100      	bne.n	8007f8c <_dtoa_r+0x5b4>
 8007f8a:	e770      	b.n	8007e6e <_dtoa_r+0x496>
 8007f8c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007f8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007f90:	2200      	movs	r2, #0
 8007f92:	4b38      	ldr	r3, [pc, #224]	; (8008074 <_dtoa_r+0x69c>)
 8007f94:	f7f9 fa36 	bl	8001404 <__aeabi_dmul>
 8007f98:	4b36      	ldr	r3, [pc, #216]	; (8008074 <_dtoa_r+0x69c>)
 8007f9a:	9010      	str	r0, [sp, #64]	; 0x40
 8007f9c:	9111      	str	r1, [sp, #68]	; 0x44
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	0020      	movs	r0, r4
 8007fa2:	0029      	movs	r1, r5
 8007fa4:	f7f9 fa2e 	bl	8001404 <__aeabi_dmul>
 8007fa8:	9b08      	ldr	r3, [sp, #32]
 8007faa:	0004      	movs	r4, r0
 8007fac:	000d      	movs	r5, r1
 8007fae:	9317      	str	r3, [sp, #92]	; 0x5c
 8007fb0:	e7be      	b.n	8007f30 <_dtoa_r+0x558>
 8007fb2:	9808      	ldr	r0, [sp, #32]
 8007fb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fb6:	f7f9 fa25 	bl	8001404 <__aeabi_dmul>
 8007fba:	9a06      	ldr	r2, [sp, #24]
 8007fbc:	9b06      	ldr	r3, [sp, #24]
 8007fbe:	4694      	mov	ip, r2
 8007fc0:	9308      	str	r3, [sp, #32]
 8007fc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fc4:	9010      	str	r0, [sp, #64]	; 0x40
 8007fc6:	9111      	str	r1, [sp, #68]	; 0x44
 8007fc8:	4463      	add	r3, ip
 8007fca:	9319      	str	r3, [sp, #100]	; 0x64
 8007fcc:	0029      	movs	r1, r5
 8007fce:	0020      	movs	r0, r4
 8007fd0:	f7fa f834 	bl	800203c <__aeabi_d2iz>
 8007fd4:	9017      	str	r0, [sp, #92]	; 0x5c
 8007fd6:	f7fa f867 	bl	80020a8 <__aeabi_i2d>
 8007fda:	0002      	movs	r2, r0
 8007fdc:	000b      	movs	r3, r1
 8007fde:	0020      	movs	r0, r4
 8007fe0:	0029      	movs	r1, r5
 8007fe2:	f7f9 fc7b 	bl	80018dc <__aeabi_dsub>
 8007fe6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fe8:	9a08      	ldr	r2, [sp, #32]
 8007fea:	3330      	adds	r3, #48	; 0x30
 8007fec:	7013      	strb	r3, [r2, #0]
 8007fee:	0013      	movs	r3, r2
 8007ff0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	0004      	movs	r4, r0
 8007ff6:	000d      	movs	r5, r1
 8007ff8:	9308      	str	r3, [sp, #32]
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d12c      	bne.n	8008058 <_dtoa_r+0x680>
 8007ffe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008000:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008002:	9a06      	ldr	r2, [sp, #24]
 8008004:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008006:	4694      	mov	ip, r2
 8008008:	4463      	add	r3, ip
 800800a:	2200      	movs	r2, #0
 800800c:	9308      	str	r3, [sp, #32]
 800800e:	4b1e      	ldr	r3, [pc, #120]	; (8008088 <_dtoa_r+0x6b0>)
 8008010:	f7f8 faba 	bl	8000588 <__aeabi_dadd>
 8008014:	0002      	movs	r2, r0
 8008016:	000b      	movs	r3, r1
 8008018:	0020      	movs	r0, r4
 800801a:	0029      	movs	r1, r5
 800801c:	f7f8 fa30 	bl	8000480 <__aeabi_dcmpgt>
 8008020:	2800      	cmp	r0, #0
 8008022:	d000      	beq.n	8008026 <_dtoa_r+0x64e>
 8008024:	e080      	b.n	8008128 <_dtoa_r+0x750>
 8008026:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008028:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800802a:	2000      	movs	r0, #0
 800802c:	4916      	ldr	r1, [pc, #88]	; (8008088 <_dtoa_r+0x6b0>)
 800802e:	f7f9 fc55 	bl	80018dc <__aeabi_dsub>
 8008032:	0002      	movs	r2, r0
 8008034:	000b      	movs	r3, r1
 8008036:	0020      	movs	r0, r4
 8008038:	0029      	movs	r1, r5
 800803a:	f7f8 fa0d 	bl	8000458 <__aeabi_dcmplt>
 800803e:	2800      	cmp	r0, #0
 8008040:	d100      	bne.n	8008044 <_dtoa_r+0x66c>
 8008042:	e714      	b.n	8007e6e <_dtoa_r+0x496>
 8008044:	9b08      	ldr	r3, [sp, #32]
 8008046:	001a      	movs	r2, r3
 8008048:	3a01      	subs	r2, #1
 800804a:	9208      	str	r2, [sp, #32]
 800804c:	7812      	ldrb	r2, [r2, #0]
 800804e:	2a30      	cmp	r2, #48	; 0x30
 8008050:	d0f8      	beq.n	8008044 <_dtoa_r+0x66c>
 8008052:	9308      	str	r3, [sp, #32]
 8008054:	9602      	str	r6, [sp, #8]
 8008056:	e055      	b.n	8008104 <_dtoa_r+0x72c>
 8008058:	2200      	movs	r2, #0
 800805a:	4b06      	ldr	r3, [pc, #24]	; (8008074 <_dtoa_r+0x69c>)
 800805c:	f7f9 f9d2 	bl	8001404 <__aeabi_dmul>
 8008060:	0004      	movs	r4, r0
 8008062:	000d      	movs	r5, r1
 8008064:	e7b2      	b.n	8007fcc <_dtoa_r+0x5f4>
 8008066:	46c0      	nop			; (mov r8, r8)
 8008068:	0800ac98 	.word	0x0800ac98
 800806c:	0800ac70 	.word	0x0800ac70
 8008070:	3ff00000 	.word	0x3ff00000
 8008074:	40240000 	.word	0x40240000
 8008078:	401c0000 	.word	0x401c0000
 800807c:	fcc00000 	.word	0xfcc00000
 8008080:	40140000 	.word	0x40140000
 8008084:	7cc00000 	.word	0x7cc00000
 8008088:	3fe00000 	.word	0x3fe00000
 800808c:	9b07      	ldr	r3, [sp, #28]
 800808e:	9e06      	ldr	r6, [sp, #24]
 8008090:	3b01      	subs	r3, #1
 8008092:	199b      	adds	r3, r3, r6
 8008094:	930c      	str	r3, [sp, #48]	; 0x30
 8008096:	9c08      	ldr	r4, [sp, #32]
 8008098:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800809a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800809c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800809e:	0020      	movs	r0, r4
 80080a0:	0029      	movs	r1, r5
 80080a2:	f7f8 fdad 	bl	8000c00 <__aeabi_ddiv>
 80080a6:	f7f9 ffc9 	bl	800203c <__aeabi_d2iz>
 80080aa:	9007      	str	r0, [sp, #28]
 80080ac:	f7f9 fffc 	bl	80020a8 <__aeabi_i2d>
 80080b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080b4:	f7f9 f9a6 	bl	8001404 <__aeabi_dmul>
 80080b8:	0002      	movs	r2, r0
 80080ba:	000b      	movs	r3, r1
 80080bc:	0020      	movs	r0, r4
 80080be:	0029      	movs	r1, r5
 80080c0:	f7f9 fc0c 	bl	80018dc <__aeabi_dsub>
 80080c4:	0033      	movs	r3, r6
 80080c6:	9a07      	ldr	r2, [sp, #28]
 80080c8:	3601      	adds	r6, #1
 80080ca:	3230      	adds	r2, #48	; 0x30
 80080cc:	701a      	strb	r2, [r3, #0]
 80080ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080d0:	9608      	str	r6, [sp, #32]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d139      	bne.n	800814a <_dtoa_r+0x772>
 80080d6:	0002      	movs	r2, r0
 80080d8:	000b      	movs	r3, r1
 80080da:	f7f8 fa55 	bl	8000588 <__aeabi_dadd>
 80080de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080e2:	0004      	movs	r4, r0
 80080e4:	000d      	movs	r5, r1
 80080e6:	f7f8 f9cb 	bl	8000480 <__aeabi_dcmpgt>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	d11b      	bne.n	8008126 <_dtoa_r+0x74e>
 80080ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080f2:	0020      	movs	r0, r4
 80080f4:	0029      	movs	r1, r5
 80080f6:	f7f8 f9a9 	bl	800044c <__aeabi_dcmpeq>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	d002      	beq.n	8008104 <_dtoa_r+0x72c>
 80080fe:	9b07      	ldr	r3, [sp, #28]
 8008100:	07db      	lsls	r3, r3, #31
 8008102:	d410      	bmi.n	8008126 <_dtoa_r+0x74e>
 8008104:	0038      	movs	r0, r7
 8008106:	9905      	ldr	r1, [sp, #20]
 8008108:	f000 fe6c 	bl	8008de4 <_Bfree>
 800810c:	2300      	movs	r3, #0
 800810e:	9a08      	ldr	r2, [sp, #32]
 8008110:	9802      	ldr	r0, [sp, #8]
 8008112:	7013      	strb	r3, [r2, #0]
 8008114:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008116:	3001      	adds	r0, #1
 8008118:	6018      	str	r0, [r3, #0]
 800811a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800811c:	2b00      	cmp	r3, #0
 800811e:	d100      	bne.n	8008122 <_dtoa_r+0x74a>
 8008120:	e4a6      	b.n	8007a70 <_dtoa_r+0x98>
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	e4a4      	b.n	8007a70 <_dtoa_r+0x98>
 8008126:	9e02      	ldr	r6, [sp, #8]
 8008128:	9b08      	ldr	r3, [sp, #32]
 800812a:	9308      	str	r3, [sp, #32]
 800812c:	3b01      	subs	r3, #1
 800812e:	781a      	ldrb	r2, [r3, #0]
 8008130:	2a39      	cmp	r2, #57	; 0x39
 8008132:	d106      	bne.n	8008142 <_dtoa_r+0x76a>
 8008134:	9a06      	ldr	r2, [sp, #24]
 8008136:	429a      	cmp	r2, r3
 8008138:	d1f7      	bne.n	800812a <_dtoa_r+0x752>
 800813a:	2230      	movs	r2, #48	; 0x30
 800813c:	9906      	ldr	r1, [sp, #24]
 800813e:	3601      	adds	r6, #1
 8008140:	700a      	strb	r2, [r1, #0]
 8008142:	781a      	ldrb	r2, [r3, #0]
 8008144:	3201      	adds	r2, #1
 8008146:	701a      	strb	r2, [r3, #0]
 8008148:	e784      	b.n	8008054 <_dtoa_r+0x67c>
 800814a:	2200      	movs	r2, #0
 800814c:	4baa      	ldr	r3, [pc, #680]	; (80083f8 <_dtoa_r+0xa20>)
 800814e:	f7f9 f959 	bl	8001404 <__aeabi_dmul>
 8008152:	2200      	movs	r2, #0
 8008154:	2300      	movs	r3, #0
 8008156:	0004      	movs	r4, r0
 8008158:	000d      	movs	r5, r1
 800815a:	f7f8 f977 	bl	800044c <__aeabi_dcmpeq>
 800815e:	2800      	cmp	r0, #0
 8008160:	d09b      	beq.n	800809a <_dtoa_r+0x6c2>
 8008162:	e7cf      	b.n	8008104 <_dtoa_r+0x72c>
 8008164:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008166:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008168:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800816a:	2d00      	cmp	r5, #0
 800816c:	d012      	beq.n	8008194 <_dtoa_r+0x7bc>
 800816e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008170:	2a01      	cmp	r2, #1
 8008172:	dc66      	bgt.n	8008242 <_dtoa_r+0x86a>
 8008174:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008176:	2a00      	cmp	r2, #0
 8008178:	d05d      	beq.n	8008236 <_dtoa_r+0x85e>
 800817a:	4aa0      	ldr	r2, [pc, #640]	; (80083fc <_dtoa_r+0xa24>)
 800817c:	189b      	adds	r3, r3, r2
 800817e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008180:	2101      	movs	r1, #1
 8008182:	18d2      	adds	r2, r2, r3
 8008184:	920a      	str	r2, [sp, #40]	; 0x28
 8008186:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008188:	0038      	movs	r0, r7
 800818a:	18d3      	adds	r3, r2, r3
 800818c:	930d      	str	r3, [sp, #52]	; 0x34
 800818e:	f000 ff25 	bl	8008fdc <__i2b>
 8008192:	0005      	movs	r5, r0
 8008194:	2c00      	cmp	r4, #0
 8008196:	dd0e      	ble.n	80081b6 <_dtoa_r+0x7de>
 8008198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800819a:	2b00      	cmp	r3, #0
 800819c:	dd0b      	ble.n	80081b6 <_dtoa_r+0x7de>
 800819e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081a0:	0023      	movs	r3, r4
 80081a2:	4294      	cmp	r4, r2
 80081a4:	dd00      	ble.n	80081a8 <_dtoa_r+0x7d0>
 80081a6:	0013      	movs	r3, r2
 80081a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081aa:	1ae4      	subs	r4, r4, r3
 80081ac:	1ad2      	subs	r2, r2, r3
 80081ae:	920a      	str	r2, [sp, #40]	; 0x28
 80081b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	930d      	str	r3, [sp, #52]	; 0x34
 80081b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d01f      	beq.n	80081fc <_dtoa_r+0x824>
 80081bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d054      	beq.n	800826c <_dtoa_r+0x894>
 80081c2:	2e00      	cmp	r6, #0
 80081c4:	dd11      	ble.n	80081ea <_dtoa_r+0x812>
 80081c6:	0029      	movs	r1, r5
 80081c8:	0032      	movs	r2, r6
 80081ca:	0038      	movs	r0, r7
 80081cc:	f000 ffcc 	bl	8009168 <__pow5mult>
 80081d0:	9a05      	ldr	r2, [sp, #20]
 80081d2:	0001      	movs	r1, r0
 80081d4:	0005      	movs	r5, r0
 80081d6:	0038      	movs	r0, r7
 80081d8:	f000 ff16 	bl	8009008 <__multiply>
 80081dc:	9905      	ldr	r1, [sp, #20]
 80081de:	9014      	str	r0, [sp, #80]	; 0x50
 80081e0:	0038      	movs	r0, r7
 80081e2:	f000 fdff 	bl	8008de4 <_Bfree>
 80081e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081e8:	9305      	str	r3, [sp, #20]
 80081ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081ec:	1b9a      	subs	r2, r3, r6
 80081ee:	42b3      	cmp	r3, r6
 80081f0:	d004      	beq.n	80081fc <_dtoa_r+0x824>
 80081f2:	0038      	movs	r0, r7
 80081f4:	9905      	ldr	r1, [sp, #20]
 80081f6:	f000 ffb7 	bl	8009168 <__pow5mult>
 80081fa:	9005      	str	r0, [sp, #20]
 80081fc:	2101      	movs	r1, #1
 80081fe:	0038      	movs	r0, r7
 8008200:	f000 feec 	bl	8008fdc <__i2b>
 8008204:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008206:	0006      	movs	r6, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	dd31      	ble.n	8008270 <_dtoa_r+0x898>
 800820c:	001a      	movs	r2, r3
 800820e:	0001      	movs	r1, r0
 8008210:	0038      	movs	r0, r7
 8008212:	f000 ffa9 	bl	8009168 <__pow5mult>
 8008216:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008218:	0006      	movs	r6, r0
 800821a:	2b01      	cmp	r3, #1
 800821c:	dd2d      	ble.n	800827a <_dtoa_r+0x8a2>
 800821e:	2300      	movs	r3, #0
 8008220:	930e      	str	r3, [sp, #56]	; 0x38
 8008222:	6933      	ldr	r3, [r6, #16]
 8008224:	3303      	adds	r3, #3
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	18f3      	adds	r3, r6, r3
 800822a:	6858      	ldr	r0, [r3, #4]
 800822c:	f000 fe8e 	bl	8008f4c <__hi0bits>
 8008230:	2320      	movs	r3, #32
 8008232:	1a18      	subs	r0, r3, r0
 8008234:	e039      	b.n	80082aa <_dtoa_r+0x8d2>
 8008236:	2336      	movs	r3, #54	; 0x36
 8008238:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800823a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800823c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	e79d      	b.n	800817e <_dtoa_r+0x7a6>
 8008242:	9b07      	ldr	r3, [sp, #28]
 8008244:	1e5e      	subs	r6, r3, #1
 8008246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008248:	42b3      	cmp	r3, r6
 800824a:	db07      	blt.n	800825c <_dtoa_r+0x884>
 800824c:	1b9e      	subs	r6, r3, r6
 800824e:	9b07      	ldr	r3, [sp, #28]
 8008250:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008252:	2b00      	cmp	r3, #0
 8008254:	da93      	bge.n	800817e <_dtoa_r+0x7a6>
 8008256:	1ae4      	subs	r4, r4, r3
 8008258:	2300      	movs	r3, #0
 800825a:	e790      	b.n	800817e <_dtoa_r+0x7a6>
 800825c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800825e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008260:	1af3      	subs	r3, r6, r3
 8008262:	18d3      	adds	r3, r2, r3
 8008264:	960e      	str	r6, [sp, #56]	; 0x38
 8008266:	9315      	str	r3, [sp, #84]	; 0x54
 8008268:	2600      	movs	r6, #0
 800826a:	e7f0      	b.n	800824e <_dtoa_r+0x876>
 800826c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800826e:	e7c0      	b.n	80081f2 <_dtoa_r+0x81a>
 8008270:	2300      	movs	r3, #0
 8008272:	930e      	str	r3, [sp, #56]	; 0x38
 8008274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008276:	2b01      	cmp	r3, #1
 8008278:	dc13      	bgt.n	80082a2 <_dtoa_r+0x8ca>
 800827a:	2300      	movs	r3, #0
 800827c:	930e      	str	r3, [sp, #56]	; 0x38
 800827e:	9b08      	ldr	r3, [sp, #32]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10e      	bne.n	80082a2 <_dtoa_r+0x8ca>
 8008284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008286:	031b      	lsls	r3, r3, #12
 8008288:	d10b      	bne.n	80082a2 <_dtoa_r+0x8ca>
 800828a:	4b5d      	ldr	r3, [pc, #372]	; (8008400 <_dtoa_r+0xa28>)
 800828c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800828e:	4213      	tst	r3, r2
 8008290:	d007      	beq.n	80082a2 <_dtoa_r+0x8ca>
 8008292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008294:	3301      	adds	r3, #1
 8008296:	930a      	str	r3, [sp, #40]	; 0x28
 8008298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800829a:	3301      	adds	r3, #1
 800829c:	930d      	str	r3, [sp, #52]	; 0x34
 800829e:	2301      	movs	r3, #1
 80082a0:	930e      	str	r3, [sp, #56]	; 0x38
 80082a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082a4:	2001      	movs	r0, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1bb      	bne.n	8008222 <_dtoa_r+0x84a>
 80082aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082ac:	221f      	movs	r2, #31
 80082ae:	1818      	adds	r0, r3, r0
 80082b0:	0003      	movs	r3, r0
 80082b2:	4013      	ands	r3, r2
 80082b4:	4210      	tst	r0, r2
 80082b6:	d046      	beq.n	8008346 <_dtoa_r+0x96e>
 80082b8:	3201      	adds	r2, #1
 80082ba:	1ad2      	subs	r2, r2, r3
 80082bc:	2a04      	cmp	r2, #4
 80082be:	dd3f      	ble.n	8008340 <_dtoa_r+0x968>
 80082c0:	221c      	movs	r2, #28
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082c6:	18e4      	adds	r4, r4, r3
 80082c8:	18d2      	adds	r2, r2, r3
 80082ca:	920a      	str	r2, [sp, #40]	; 0x28
 80082cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082ce:	18d3      	adds	r3, r2, r3
 80082d0:	930d      	str	r3, [sp, #52]	; 0x34
 80082d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	dd05      	ble.n	80082e4 <_dtoa_r+0x90c>
 80082d8:	001a      	movs	r2, r3
 80082da:	0038      	movs	r0, r7
 80082dc:	9905      	ldr	r1, [sp, #20]
 80082de:	f000 ff9f 	bl	8009220 <__lshift>
 80082e2:	9005      	str	r0, [sp, #20]
 80082e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	dd05      	ble.n	80082f6 <_dtoa_r+0x91e>
 80082ea:	0031      	movs	r1, r6
 80082ec:	001a      	movs	r2, r3
 80082ee:	0038      	movs	r0, r7
 80082f0:	f000 ff96 	bl	8009220 <__lshift>
 80082f4:	0006      	movs	r6, r0
 80082f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d026      	beq.n	800834a <_dtoa_r+0x972>
 80082fc:	0031      	movs	r1, r6
 80082fe:	9805      	ldr	r0, [sp, #20]
 8008300:	f000 fffc 	bl	80092fc <__mcmp>
 8008304:	2800      	cmp	r0, #0
 8008306:	da20      	bge.n	800834a <_dtoa_r+0x972>
 8008308:	9b02      	ldr	r3, [sp, #8]
 800830a:	220a      	movs	r2, #10
 800830c:	3b01      	subs	r3, #1
 800830e:	9302      	str	r3, [sp, #8]
 8008310:	0038      	movs	r0, r7
 8008312:	2300      	movs	r3, #0
 8008314:	9905      	ldr	r1, [sp, #20]
 8008316:	f000 fd89 	bl	8008e2c <__multadd>
 800831a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800831c:	9005      	str	r0, [sp, #20]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d100      	bne.n	8008324 <_dtoa_r+0x94c>
 8008322:	e166      	b.n	80085f2 <_dtoa_r+0xc1a>
 8008324:	2300      	movs	r3, #0
 8008326:	0029      	movs	r1, r5
 8008328:	220a      	movs	r2, #10
 800832a:	0038      	movs	r0, r7
 800832c:	f000 fd7e 	bl	8008e2c <__multadd>
 8008330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008332:	0005      	movs	r5, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	dc47      	bgt.n	80083c8 <_dtoa_r+0x9f0>
 8008338:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800833a:	2b02      	cmp	r3, #2
 800833c:	dc0d      	bgt.n	800835a <_dtoa_r+0x982>
 800833e:	e043      	b.n	80083c8 <_dtoa_r+0x9f0>
 8008340:	2a04      	cmp	r2, #4
 8008342:	d0c6      	beq.n	80082d2 <_dtoa_r+0x8fa>
 8008344:	0013      	movs	r3, r2
 8008346:	331c      	adds	r3, #28
 8008348:	e7bc      	b.n	80082c4 <_dtoa_r+0x8ec>
 800834a:	9b07      	ldr	r3, [sp, #28]
 800834c:	2b00      	cmp	r3, #0
 800834e:	dc35      	bgt.n	80083bc <_dtoa_r+0x9e4>
 8008350:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008352:	2b02      	cmp	r3, #2
 8008354:	dd32      	ble.n	80083bc <_dtoa_r+0x9e4>
 8008356:	9b07      	ldr	r3, [sp, #28]
 8008358:	930c      	str	r3, [sp, #48]	; 0x30
 800835a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10c      	bne.n	800837a <_dtoa_r+0x9a2>
 8008360:	0031      	movs	r1, r6
 8008362:	2205      	movs	r2, #5
 8008364:	0038      	movs	r0, r7
 8008366:	f000 fd61 	bl	8008e2c <__multadd>
 800836a:	0006      	movs	r6, r0
 800836c:	0001      	movs	r1, r0
 800836e:	9805      	ldr	r0, [sp, #20]
 8008370:	f000 ffc4 	bl	80092fc <__mcmp>
 8008374:	2800      	cmp	r0, #0
 8008376:	dd00      	ble.n	800837a <_dtoa_r+0x9a2>
 8008378:	e5a5      	b.n	8007ec6 <_dtoa_r+0x4ee>
 800837a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800837c:	43db      	mvns	r3, r3
 800837e:	9302      	str	r3, [sp, #8]
 8008380:	9b06      	ldr	r3, [sp, #24]
 8008382:	9308      	str	r3, [sp, #32]
 8008384:	2400      	movs	r4, #0
 8008386:	0031      	movs	r1, r6
 8008388:	0038      	movs	r0, r7
 800838a:	f000 fd2b 	bl	8008de4 <_Bfree>
 800838e:	2d00      	cmp	r5, #0
 8008390:	d100      	bne.n	8008394 <_dtoa_r+0x9bc>
 8008392:	e6b7      	b.n	8008104 <_dtoa_r+0x72c>
 8008394:	2c00      	cmp	r4, #0
 8008396:	d005      	beq.n	80083a4 <_dtoa_r+0x9cc>
 8008398:	42ac      	cmp	r4, r5
 800839a:	d003      	beq.n	80083a4 <_dtoa_r+0x9cc>
 800839c:	0021      	movs	r1, r4
 800839e:	0038      	movs	r0, r7
 80083a0:	f000 fd20 	bl	8008de4 <_Bfree>
 80083a4:	0029      	movs	r1, r5
 80083a6:	0038      	movs	r0, r7
 80083a8:	f000 fd1c 	bl	8008de4 <_Bfree>
 80083ac:	e6aa      	b.n	8008104 <_dtoa_r+0x72c>
 80083ae:	2600      	movs	r6, #0
 80083b0:	0035      	movs	r5, r6
 80083b2:	e7e2      	b.n	800837a <_dtoa_r+0x9a2>
 80083b4:	9602      	str	r6, [sp, #8]
 80083b6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80083b8:	0035      	movs	r5, r6
 80083ba:	e584      	b.n	8007ec6 <_dtoa_r+0x4ee>
 80083bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d100      	bne.n	80083c4 <_dtoa_r+0x9ec>
 80083c2:	e0ce      	b.n	8008562 <_dtoa_r+0xb8a>
 80083c4:	9b07      	ldr	r3, [sp, #28]
 80083c6:	930c      	str	r3, [sp, #48]	; 0x30
 80083c8:	2c00      	cmp	r4, #0
 80083ca:	dd05      	ble.n	80083d8 <_dtoa_r+0xa00>
 80083cc:	0029      	movs	r1, r5
 80083ce:	0022      	movs	r2, r4
 80083d0:	0038      	movs	r0, r7
 80083d2:	f000 ff25 	bl	8009220 <__lshift>
 80083d6:	0005      	movs	r5, r0
 80083d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083da:	0028      	movs	r0, r5
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d022      	beq.n	8008426 <_dtoa_r+0xa4e>
 80083e0:	0038      	movs	r0, r7
 80083e2:	6869      	ldr	r1, [r5, #4]
 80083e4:	f000 fcba 	bl	8008d5c <_Balloc>
 80083e8:	1e04      	subs	r4, r0, #0
 80083ea:	d10f      	bne.n	800840c <_dtoa_r+0xa34>
 80083ec:	0002      	movs	r2, r0
 80083ee:	4b05      	ldr	r3, [pc, #20]	; (8008404 <_dtoa_r+0xa2c>)
 80083f0:	4905      	ldr	r1, [pc, #20]	; (8008408 <_dtoa_r+0xa30>)
 80083f2:	f7ff fb06 	bl	8007a02 <_dtoa_r+0x2a>
 80083f6:	46c0      	nop			; (mov r8, r8)
 80083f8:	40240000 	.word	0x40240000
 80083fc:	00000433 	.word	0x00000433
 8008400:	7ff00000 	.word	0x7ff00000
 8008404:	0800ab88 	.word	0x0800ab88
 8008408:	000002ea 	.word	0x000002ea
 800840c:	0029      	movs	r1, r5
 800840e:	692b      	ldr	r3, [r5, #16]
 8008410:	310c      	adds	r1, #12
 8008412:	1c9a      	adds	r2, r3, #2
 8008414:	0092      	lsls	r2, r2, #2
 8008416:	300c      	adds	r0, #12
 8008418:	f000 fc97 	bl	8008d4a <memcpy>
 800841c:	2201      	movs	r2, #1
 800841e:	0021      	movs	r1, r4
 8008420:	0038      	movs	r0, r7
 8008422:	f000 fefd 	bl	8009220 <__lshift>
 8008426:	9b06      	ldr	r3, [sp, #24]
 8008428:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800842a:	930a      	str	r3, [sp, #40]	; 0x28
 800842c:	3b01      	subs	r3, #1
 800842e:	189b      	adds	r3, r3, r2
 8008430:	2201      	movs	r2, #1
 8008432:	002c      	movs	r4, r5
 8008434:	0005      	movs	r5, r0
 8008436:	9314      	str	r3, [sp, #80]	; 0x50
 8008438:	9b08      	ldr	r3, [sp, #32]
 800843a:	4013      	ands	r3, r2
 800843c:	930f      	str	r3, [sp, #60]	; 0x3c
 800843e:	0031      	movs	r1, r6
 8008440:	9805      	ldr	r0, [sp, #20]
 8008442:	f7ff fa3d 	bl	80078c0 <quorem>
 8008446:	0003      	movs	r3, r0
 8008448:	0021      	movs	r1, r4
 800844a:	3330      	adds	r3, #48	; 0x30
 800844c:	900d      	str	r0, [sp, #52]	; 0x34
 800844e:	9805      	ldr	r0, [sp, #20]
 8008450:	9307      	str	r3, [sp, #28]
 8008452:	f000 ff53 	bl	80092fc <__mcmp>
 8008456:	002a      	movs	r2, r5
 8008458:	900e      	str	r0, [sp, #56]	; 0x38
 800845a:	0031      	movs	r1, r6
 800845c:	0038      	movs	r0, r7
 800845e:	f000 ff69 	bl	8009334 <__mdiff>
 8008462:	68c3      	ldr	r3, [r0, #12]
 8008464:	9008      	str	r0, [sp, #32]
 8008466:	9310      	str	r3, [sp, #64]	; 0x40
 8008468:	2301      	movs	r3, #1
 800846a:	930c      	str	r3, [sp, #48]	; 0x30
 800846c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800846e:	2b00      	cmp	r3, #0
 8008470:	d104      	bne.n	800847c <_dtoa_r+0xaa4>
 8008472:	0001      	movs	r1, r0
 8008474:	9805      	ldr	r0, [sp, #20]
 8008476:	f000 ff41 	bl	80092fc <__mcmp>
 800847a:	900c      	str	r0, [sp, #48]	; 0x30
 800847c:	0038      	movs	r0, r7
 800847e:	9908      	ldr	r1, [sp, #32]
 8008480:	f000 fcb0 	bl	8008de4 <_Bfree>
 8008484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008488:	3301      	adds	r3, #1
 800848a:	9308      	str	r3, [sp, #32]
 800848c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800848e:	4313      	orrs	r3, r2
 8008490:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008492:	4313      	orrs	r3, r2
 8008494:	d10c      	bne.n	80084b0 <_dtoa_r+0xad8>
 8008496:	9b07      	ldr	r3, [sp, #28]
 8008498:	2b39      	cmp	r3, #57	; 0x39
 800849a:	d026      	beq.n	80084ea <_dtoa_r+0xb12>
 800849c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800849e:	2b00      	cmp	r3, #0
 80084a0:	dd02      	ble.n	80084a8 <_dtoa_r+0xad0>
 80084a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a4:	3331      	adds	r3, #49	; 0x31
 80084a6:	9307      	str	r3, [sp, #28]
 80084a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084aa:	9a07      	ldr	r2, [sp, #28]
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	e76a      	b.n	8008386 <_dtoa_r+0x9ae>
 80084b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	db04      	blt.n	80084c0 <_dtoa_r+0xae8>
 80084b6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80084b8:	4313      	orrs	r3, r2
 80084ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084bc:	4313      	orrs	r3, r2
 80084be:	d11f      	bne.n	8008500 <_dtoa_r+0xb28>
 80084c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	ddf0      	ble.n	80084a8 <_dtoa_r+0xad0>
 80084c6:	9905      	ldr	r1, [sp, #20]
 80084c8:	2201      	movs	r2, #1
 80084ca:	0038      	movs	r0, r7
 80084cc:	f000 fea8 	bl	8009220 <__lshift>
 80084d0:	0031      	movs	r1, r6
 80084d2:	9005      	str	r0, [sp, #20]
 80084d4:	f000 ff12 	bl	80092fc <__mcmp>
 80084d8:	2800      	cmp	r0, #0
 80084da:	dc03      	bgt.n	80084e4 <_dtoa_r+0xb0c>
 80084dc:	d1e4      	bne.n	80084a8 <_dtoa_r+0xad0>
 80084de:	9b07      	ldr	r3, [sp, #28]
 80084e0:	07db      	lsls	r3, r3, #31
 80084e2:	d5e1      	bpl.n	80084a8 <_dtoa_r+0xad0>
 80084e4:	9b07      	ldr	r3, [sp, #28]
 80084e6:	2b39      	cmp	r3, #57	; 0x39
 80084e8:	d1db      	bne.n	80084a2 <_dtoa_r+0xaca>
 80084ea:	2339      	movs	r3, #57	; 0x39
 80084ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ee:	7013      	strb	r3, [r2, #0]
 80084f0:	9b08      	ldr	r3, [sp, #32]
 80084f2:	9308      	str	r3, [sp, #32]
 80084f4:	3b01      	subs	r3, #1
 80084f6:	781a      	ldrb	r2, [r3, #0]
 80084f8:	2a39      	cmp	r2, #57	; 0x39
 80084fa:	d068      	beq.n	80085ce <_dtoa_r+0xbf6>
 80084fc:	3201      	adds	r2, #1
 80084fe:	e7d5      	b.n	80084ac <_dtoa_r+0xad4>
 8008500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008502:	2b00      	cmp	r3, #0
 8008504:	dd07      	ble.n	8008516 <_dtoa_r+0xb3e>
 8008506:	9b07      	ldr	r3, [sp, #28]
 8008508:	2b39      	cmp	r3, #57	; 0x39
 800850a:	d0ee      	beq.n	80084ea <_dtoa_r+0xb12>
 800850c:	9b07      	ldr	r3, [sp, #28]
 800850e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008510:	3301      	adds	r3, #1
 8008512:	7013      	strb	r3, [r2, #0]
 8008514:	e737      	b.n	8008386 <_dtoa_r+0x9ae>
 8008516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008518:	9a07      	ldr	r2, [sp, #28]
 800851a:	701a      	strb	r2, [r3, #0]
 800851c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800851e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008520:	4293      	cmp	r3, r2
 8008522:	d03e      	beq.n	80085a2 <_dtoa_r+0xbca>
 8008524:	2300      	movs	r3, #0
 8008526:	220a      	movs	r2, #10
 8008528:	9905      	ldr	r1, [sp, #20]
 800852a:	0038      	movs	r0, r7
 800852c:	f000 fc7e 	bl	8008e2c <__multadd>
 8008530:	2300      	movs	r3, #0
 8008532:	9005      	str	r0, [sp, #20]
 8008534:	220a      	movs	r2, #10
 8008536:	0021      	movs	r1, r4
 8008538:	0038      	movs	r0, r7
 800853a:	42ac      	cmp	r4, r5
 800853c:	d106      	bne.n	800854c <_dtoa_r+0xb74>
 800853e:	f000 fc75 	bl	8008e2c <__multadd>
 8008542:	0004      	movs	r4, r0
 8008544:	0005      	movs	r5, r0
 8008546:	9b08      	ldr	r3, [sp, #32]
 8008548:	930a      	str	r3, [sp, #40]	; 0x28
 800854a:	e778      	b.n	800843e <_dtoa_r+0xa66>
 800854c:	f000 fc6e 	bl	8008e2c <__multadd>
 8008550:	0029      	movs	r1, r5
 8008552:	0004      	movs	r4, r0
 8008554:	2300      	movs	r3, #0
 8008556:	220a      	movs	r2, #10
 8008558:	0038      	movs	r0, r7
 800855a:	f000 fc67 	bl	8008e2c <__multadd>
 800855e:	0005      	movs	r5, r0
 8008560:	e7f1      	b.n	8008546 <_dtoa_r+0xb6e>
 8008562:	9b07      	ldr	r3, [sp, #28]
 8008564:	930c      	str	r3, [sp, #48]	; 0x30
 8008566:	2400      	movs	r4, #0
 8008568:	0031      	movs	r1, r6
 800856a:	9805      	ldr	r0, [sp, #20]
 800856c:	f7ff f9a8 	bl	80078c0 <quorem>
 8008570:	9b06      	ldr	r3, [sp, #24]
 8008572:	3030      	adds	r0, #48	; 0x30
 8008574:	5518      	strb	r0, [r3, r4]
 8008576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008578:	3401      	adds	r4, #1
 800857a:	9007      	str	r0, [sp, #28]
 800857c:	42a3      	cmp	r3, r4
 800857e:	dd07      	ble.n	8008590 <_dtoa_r+0xbb8>
 8008580:	2300      	movs	r3, #0
 8008582:	220a      	movs	r2, #10
 8008584:	0038      	movs	r0, r7
 8008586:	9905      	ldr	r1, [sp, #20]
 8008588:	f000 fc50 	bl	8008e2c <__multadd>
 800858c:	9005      	str	r0, [sp, #20]
 800858e:	e7eb      	b.n	8008568 <_dtoa_r+0xb90>
 8008590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008592:	2001      	movs	r0, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	dd00      	ble.n	800859a <_dtoa_r+0xbc2>
 8008598:	0018      	movs	r0, r3
 800859a:	2400      	movs	r4, #0
 800859c:	9b06      	ldr	r3, [sp, #24]
 800859e:	181b      	adds	r3, r3, r0
 80085a0:	9308      	str	r3, [sp, #32]
 80085a2:	9905      	ldr	r1, [sp, #20]
 80085a4:	2201      	movs	r2, #1
 80085a6:	0038      	movs	r0, r7
 80085a8:	f000 fe3a 	bl	8009220 <__lshift>
 80085ac:	0031      	movs	r1, r6
 80085ae:	9005      	str	r0, [sp, #20]
 80085b0:	f000 fea4 	bl	80092fc <__mcmp>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	dc9b      	bgt.n	80084f0 <_dtoa_r+0xb18>
 80085b8:	d102      	bne.n	80085c0 <_dtoa_r+0xbe8>
 80085ba:	9b07      	ldr	r3, [sp, #28]
 80085bc:	07db      	lsls	r3, r3, #31
 80085be:	d497      	bmi.n	80084f0 <_dtoa_r+0xb18>
 80085c0:	9b08      	ldr	r3, [sp, #32]
 80085c2:	9308      	str	r3, [sp, #32]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	781a      	ldrb	r2, [r3, #0]
 80085c8:	2a30      	cmp	r2, #48	; 0x30
 80085ca:	d0fa      	beq.n	80085c2 <_dtoa_r+0xbea>
 80085cc:	e6db      	b.n	8008386 <_dtoa_r+0x9ae>
 80085ce:	9a06      	ldr	r2, [sp, #24]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d18e      	bne.n	80084f2 <_dtoa_r+0xb1a>
 80085d4:	9b02      	ldr	r3, [sp, #8]
 80085d6:	3301      	adds	r3, #1
 80085d8:	9302      	str	r3, [sp, #8]
 80085da:	2331      	movs	r3, #49	; 0x31
 80085dc:	e799      	b.n	8008512 <_dtoa_r+0xb3a>
 80085de:	4b09      	ldr	r3, [pc, #36]	; (8008604 <_dtoa_r+0xc2c>)
 80085e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80085e2:	9306      	str	r3, [sp, #24]
 80085e4:	4b08      	ldr	r3, [pc, #32]	; (8008608 <_dtoa_r+0xc30>)
 80085e6:	2a00      	cmp	r2, #0
 80085e8:	d001      	beq.n	80085ee <_dtoa_r+0xc16>
 80085ea:	f7ff fa3f 	bl	8007a6c <_dtoa_r+0x94>
 80085ee:	f7ff fa3f 	bl	8007a70 <_dtoa_r+0x98>
 80085f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	dcb6      	bgt.n	8008566 <_dtoa_r+0xb8e>
 80085f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	dd00      	ble.n	8008600 <_dtoa_r+0xc28>
 80085fe:	e6ac      	b.n	800835a <_dtoa_r+0x982>
 8008600:	e7b1      	b.n	8008566 <_dtoa_r+0xb8e>
 8008602:	46c0      	nop			; (mov r8, r8)
 8008604:	0800ab09 	.word	0x0800ab09
 8008608:	0800ab11 	.word	0x0800ab11

0800860c <rshift>:
 800860c:	0002      	movs	r2, r0
 800860e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008610:	6904      	ldr	r4, [r0, #16]
 8008612:	3214      	adds	r2, #20
 8008614:	0013      	movs	r3, r2
 8008616:	b085      	sub	sp, #20
 8008618:	114f      	asrs	r7, r1, #5
 800861a:	42bc      	cmp	r4, r7
 800861c:	dd31      	ble.n	8008682 <rshift+0x76>
 800861e:	00bb      	lsls	r3, r7, #2
 8008620:	18d3      	adds	r3, r2, r3
 8008622:	261f      	movs	r6, #31
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	000b      	movs	r3, r1
 8008628:	00a5      	lsls	r5, r4, #2
 800862a:	4033      	ands	r3, r6
 800862c:	1955      	adds	r5, r2, r5
 800862e:	9302      	str	r3, [sp, #8]
 8008630:	4231      	tst	r1, r6
 8008632:	d10c      	bne.n	800864e <rshift+0x42>
 8008634:	0016      	movs	r6, r2
 8008636:	9901      	ldr	r1, [sp, #4]
 8008638:	428d      	cmp	r5, r1
 800863a:	d838      	bhi.n	80086ae <rshift+0xa2>
 800863c:	9901      	ldr	r1, [sp, #4]
 800863e:	2300      	movs	r3, #0
 8008640:	3903      	subs	r1, #3
 8008642:	428d      	cmp	r5, r1
 8008644:	d301      	bcc.n	800864a <rshift+0x3e>
 8008646:	1be3      	subs	r3, r4, r7
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	18d3      	adds	r3, r2, r3
 800864c:	e019      	b.n	8008682 <rshift+0x76>
 800864e:	2120      	movs	r1, #32
 8008650:	9b02      	ldr	r3, [sp, #8]
 8008652:	9e01      	ldr	r6, [sp, #4]
 8008654:	1acb      	subs	r3, r1, r3
 8008656:	9303      	str	r3, [sp, #12]
 8008658:	ce02      	ldmia	r6!, {r1}
 800865a:	9b02      	ldr	r3, [sp, #8]
 800865c:	4694      	mov	ip, r2
 800865e:	40d9      	lsrs	r1, r3
 8008660:	9100      	str	r1, [sp, #0]
 8008662:	42b5      	cmp	r5, r6
 8008664:	d816      	bhi.n	8008694 <rshift+0x88>
 8008666:	9e01      	ldr	r6, [sp, #4]
 8008668:	2300      	movs	r3, #0
 800866a:	3601      	adds	r6, #1
 800866c:	42b5      	cmp	r5, r6
 800866e:	d302      	bcc.n	8008676 <rshift+0x6a>
 8008670:	1be3      	subs	r3, r4, r7
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	3b04      	subs	r3, #4
 8008676:	9900      	ldr	r1, [sp, #0]
 8008678:	18d3      	adds	r3, r2, r3
 800867a:	6019      	str	r1, [r3, #0]
 800867c:	2900      	cmp	r1, #0
 800867e:	d000      	beq.n	8008682 <rshift+0x76>
 8008680:	3304      	adds	r3, #4
 8008682:	1a99      	subs	r1, r3, r2
 8008684:	1089      	asrs	r1, r1, #2
 8008686:	6101      	str	r1, [r0, #16]
 8008688:	4293      	cmp	r3, r2
 800868a:	d101      	bne.n	8008690 <rshift+0x84>
 800868c:	2300      	movs	r3, #0
 800868e:	6143      	str	r3, [r0, #20]
 8008690:	b005      	add	sp, #20
 8008692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008694:	6833      	ldr	r3, [r6, #0]
 8008696:	9903      	ldr	r1, [sp, #12]
 8008698:	408b      	lsls	r3, r1
 800869a:	9900      	ldr	r1, [sp, #0]
 800869c:	4319      	orrs	r1, r3
 800869e:	4663      	mov	r3, ip
 80086a0:	c302      	stmia	r3!, {r1}
 80086a2:	469c      	mov	ip, r3
 80086a4:	ce02      	ldmia	r6!, {r1}
 80086a6:	9b02      	ldr	r3, [sp, #8]
 80086a8:	40d9      	lsrs	r1, r3
 80086aa:	9100      	str	r1, [sp, #0]
 80086ac:	e7d9      	b.n	8008662 <rshift+0x56>
 80086ae:	c908      	ldmia	r1!, {r3}
 80086b0:	c608      	stmia	r6!, {r3}
 80086b2:	e7c1      	b.n	8008638 <rshift+0x2c>

080086b4 <__hexdig_fun>:
 80086b4:	0002      	movs	r2, r0
 80086b6:	3a30      	subs	r2, #48	; 0x30
 80086b8:	0003      	movs	r3, r0
 80086ba:	2a09      	cmp	r2, #9
 80086bc:	d802      	bhi.n	80086c4 <__hexdig_fun+0x10>
 80086be:	3b20      	subs	r3, #32
 80086c0:	b2d8      	uxtb	r0, r3
 80086c2:	4770      	bx	lr
 80086c4:	0002      	movs	r2, r0
 80086c6:	3a61      	subs	r2, #97	; 0x61
 80086c8:	2a05      	cmp	r2, #5
 80086ca:	d801      	bhi.n	80086d0 <__hexdig_fun+0x1c>
 80086cc:	3b47      	subs	r3, #71	; 0x47
 80086ce:	e7f7      	b.n	80086c0 <__hexdig_fun+0xc>
 80086d0:	001a      	movs	r2, r3
 80086d2:	3a41      	subs	r2, #65	; 0x41
 80086d4:	2000      	movs	r0, #0
 80086d6:	2a05      	cmp	r2, #5
 80086d8:	d8f3      	bhi.n	80086c2 <__hexdig_fun+0xe>
 80086da:	3b27      	subs	r3, #39	; 0x27
 80086dc:	e7f0      	b.n	80086c0 <__hexdig_fun+0xc>
	...

080086e0 <__gethex>:
 80086e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e2:	b08d      	sub	sp, #52	; 0x34
 80086e4:	930a      	str	r3, [sp, #40]	; 0x28
 80086e6:	4bbf      	ldr	r3, [pc, #764]	; (80089e4 <__gethex+0x304>)
 80086e8:	9005      	str	r0, [sp, #20]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	9109      	str	r1, [sp, #36]	; 0x24
 80086ee:	0018      	movs	r0, r3
 80086f0:	9202      	str	r2, [sp, #8]
 80086f2:	9307      	str	r3, [sp, #28]
 80086f4:	f7f7 fd08 	bl	8000108 <strlen>
 80086f8:	2202      	movs	r2, #2
 80086fa:	9b07      	ldr	r3, [sp, #28]
 80086fc:	4252      	negs	r2, r2
 80086fe:	181b      	adds	r3, r3, r0
 8008700:	3b01      	subs	r3, #1
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	9003      	str	r0, [sp, #12]
 8008706:	930b      	str	r3, [sp, #44]	; 0x2c
 8008708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800870a:	6819      	ldr	r1, [r3, #0]
 800870c:	1c8b      	adds	r3, r1, #2
 800870e:	1a52      	subs	r2, r2, r1
 8008710:	18d1      	adds	r1, r2, r3
 8008712:	9301      	str	r3, [sp, #4]
 8008714:	9108      	str	r1, [sp, #32]
 8008716:	9901      	ldr	r1, [sp, #4]
 8008718:	3301      	adds	r3, #1
 800871a:	7808      	ldrb	r0, [r1, #0]
 800871c:	2830      	cmp	r0, #48	; 0x30
 800871e:	d0f7      	beq.n	8008710 <__gethex+0x30>
 8008720:	f7ff ffc8 	bl	80086b4 <__hexdig_fun>
 8008724:	2300      	movs	r3, #0
 8008726:	001c      	movs	r4, r3
 8008728:	9304      	str	r3, [sp, #16]
 800872a:	4298      	cmp	r0, r3
 800872c:	d11f      	bne.n	800876e <__gethex+0x8e>
 800872e:	9a03      	ldr	r2, [sp, #12]
 8008730:	9907      	ldr	r1, [sp, #28]
 8008732:	9801      	ldr	r0, [sp, #4]
 8008734:	f001 fa64 	bl	8009c00 <strncmp>
 8008738:	0007      	movs	r7, r0
 800873a:	42a0      	cmp	r0, r4
 800873c:	d000      	beq.n	8008740 <__gethex+0x60>
 800873e:	e06b      	b.n	8008818 <__gethex+0x138>
 8008740:	9b01      	ldr	r3, [sp, #4]
 8008742:	9a03      	ldr	r2, [sp, #12]
 8008744:	5c98      	ldrb	r0, [r3, r2]
 8008746:	189d      	adds	r5, r3, r2
 8008748:	f7ff ffb4 	bl	80086b4 <__hexdig_fun>
 800874c:	2301      	movs	r3, #1
 800874e:	9304      	str	r3, [sp, #16]
 8008750:	42a0      	cmp	r0, r4
 8008752:	d030      	beq.n	80087b6 <__gethex+0xd6>
 8008754:	9501      	str	r5, [sp, #4]
 8008756:	9b01      	ldr	r3, [sp, #4]
 8008758:	7818      	ldrb	r0, [r3, #0]
 800875a:	2830      	cmp	r0, #48	; 0x30
 800875c:	d009      	beq.n	8008772 <__gethex+0x92>
 800875e:	f7ff ffa9 	bl	80086b4 <__hexdig_fun>
 8008762:	4242      	negs	r2, r0
 8008764:	4142      	adcs	r2, r0
 8008766:	2301      	movs	r3, #1
 8008768:	002c      	movs	r4, r5
 800876a:	9204      	str	r2, [sp, #16]
 800876c:	9308      	str	r3, [sp, #32]
 800876e:	9d01      	ldr	r5, [sp, #4]
 8008770:	e004      	b.n	800877c <__gethex+0x9c>
 8008772:	9b01      	ldr	r3, [sp, #4]
 8008774:	3301      	adds	r3, #1
 8008776:	9301      	str	r3, [sp, #4]
 8008778:	e7ed      	b.n	8008756 <__gethex+0x76>
 800877a:	3501      	adds	r5, #1
 800877c:	7828      	ldrb	r0, [r5, #0]
 800877e:	f7ff ff99 	bl	80086b4 <__hexdig_fun>
 8008782:	1e07      	subs	r7, r0, #0
 8008784:	d1f9      	bne.n	800877a <__gethex+0x9a>
 8008786:	0028      	movs	r0, r5
 8008788:	9a03      	ldr	r2, [sp, #12]
 800878a:	9907      	ldr	r1, [sp, #28]
 800878c:	f001 fa38 	bl	8009c00 <strncmp>
 8008790:	2800      	cmp	r0, #0
 8008792:	d10e      	bne.n	80087b2 <__gethex+0xd2>
 8008794:	2c00      	cmp	r4, #0
 8008796:	d107      	bne.n	80087a8 <__gethex+0xc8>
 8008798:	9b03      	ldr	r3, [sp, #12]
 800879a:	18ed      	adds	r5, r5, r3
 800879c:	002c      	movs	r4, r5
 800879e:	7828      	ldrb	r0, [r5, #0]
 80087a0:	f7ff ff88 	bl	80086b4 <__hexdig_fun>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d102      	bne.n	80087ae <__gethex+0xce>
 80087a8:	1b64      	subs	r4, r4, r5
 80087aa:	00a7      	lsls	r7, r4, #2
 80087ac:	e003      	b.n	80087b6 <__gethex+0xd6>
 80087ae:	3501      	adds	r5, #1
 80087b0:	e7f5      	b.n	800879e <__gethex+0xbe>
 80087b2:	2c00      	cmp	r4, #0
 80087b4:	d1f8      	bne.n	80087a8 <__gethex+0xc8>
 80087b6:	2220      	movs	r2, #32
 80087b8:	782b      	ldrb	r3, [r5, #0]
 80087ba:	002e      	movs	r6, r5
 80087bc:	4393      	bics	r3, r2
 80087be:	2b50      	cmp	r3, #80	; 0x50
 80087c0:	d11d      	bne.n	80087fe <__gethex+0x11e>
 80087c2:	786b      	ldrb	r3, [r5, #1]
 80087c4:	2b2b      	cmp	r3, #43	; 0x2b
 80087c6:	d02c      	beq.n	8008822 <__gethex+0x142>
 80087c8:	2b2d      	cmp	r3, #45	; 0x2d
 80087ca:	d02e      	beq.n	800882a <__gethex+0x14a>
 80087cc:	2300      	movs	r3, #0
 80087ce:	1c6e      	adds	r6, r5, #1
 80087d0:	9306      	str	r3, [sp, #24]
 80087d2:	7830      	ldrb	r0, [r6, #0]
 80087d4:	f7ff ff6e 	bl	80086b4 <__hexdig_fun>
 80087d8:	1e43      	subs	r3, r0, #1
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b18      	cmp	r3, #24
 80087de:	d82b      	bhi.n	8008838 <__gethex+0x158>
 80087e0:	3810      	subs	r0, #16
 80087e2:	0004      	movs	r4, r0
 80087e4:	7870      	ldrb	r0, [r6, #1]
 80087e6:	f7ff ff65 	bl	80086b4 <__hexdig_fun>
 80087ea:	1e43      	subs	r3, r0, #1
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	3601      	adds	r6, #1
 80087f0:	2b18      	cmp	r3, #24
 80087f2:	d91c      	bls.n	800882e <__gethex+0x14e>
 80087f4:	9b06      	ldr	r3, [sp, #24]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d000      	beq.n	80087fc <__gethex+0x11c>
 80087fa:	4264      	negs	r4, r4
 80087fc:	193f      	adds	r7, r7, r4
 80087fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008800:	601e      	str	r6, [r3, #0]
 8008802:	9b04      	ldr	r3, [sp, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d019      	beq.n	800883c <__gethex+0x15c>
 8008808:	2600      	movs	r6, #0
 800880a:	9b08      	ldr	r3, [sp, #32]
 800880c:	42b3      	cmp	r3, r6
 800880e:	d100      	bne.n	8008812 <__gethex+0x132>
 8008810:	3606      	adds	r6, #6
 8008812:	0030      	movs	r0, r6
 8008814:	b00d      	add	sp, #52	; 0x34
 8008816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008818:	2301      	movs	r3, #1
 800881a:	2700      	movs	r7, #0
 800881c:	9d01      	ldr	r5, [sp, #4]
 800881e:	9304      	str	r3, [sp, #16]
 8008820:	e7c9      	b.n	80087b6 <__gethex+0xd6>
 8008822:	2300      	movs	r3, #0
 8008824:	9306      	str	r3, [sp, #24]
 8008826:	1cae      	adds	r6, r5, #2
 8008828:	e7d3      	b.n	80087d2 <__gethex+0xf2>
 800882a:	2301      	movs	r3, #1
 800882c:	e7fa      	b.n	8008824 <__gethex+0x144>
 800882e:	230a      	movs	r3, #10
 8008830:	435c      	muls	r4, r3
 8008832:	1824      	adds	r4, r4, r0
 8008834:	3c10      	subs	r4, #16
 8008836:	e7d5      	b.n	80087e4 <__gethex+0x104>
 8008838:	002e      	movs	r6, r5
 800883a:	e7e0      	b.n	80087fe <__gethex+0x11e>
 800883c:	9b01      	ldr	r3, [sp, #4]
 800883e:	9904      	ldr	r1, [sp, #16]
 8008840:	1aeb      	subs	r3, r5, r3
 8008842:	3b01      	subs	r3, #1
 8008844:	2b07      	cmp	r3, #7
 8008846:	dc0a      	bgt.n	800885e <__gethex+0x17e>
 8008848:	9805      	ldr	r0, [sp, #20]
 800884a:	f000 fa87 	bl	8008d5c <_Balloc>
 800884e:	1e04      	subs	r4, r0, #0
 8008850:	d108      	bne.n	8008864 <__gethex+0x184>
 8008852:	0002      	movs	r2, r0
 8008854:	21de      	movs	r1, #222	; 0xde
 8008856:	4b64      	ldr	r3, [pc, #400]	; (80089e8 <__gethex+0x308>)
 8008858:	4864      	ldr	r0, [pc, #400]	; (80089ec <__gethex+0x30c>)
 800885a:	f001 f9f1 	bl	8009c40 <__assert_func>
 800885e:	3101      	adds	r1, #1
 8008860:	105b      	asrs	r3, r3, #1
 8008862:	e7ef      	b.n	8008844 <__gethex+0x164>
 8008864:	0003      	movs	r3, r0
 8008866:	3314      	adds	r3, #20
 8008868:	9304      	str	r3, [sp, #16]
 800886a:	9309      	str	r3, [sp, #36]	; 0x24
 800886c:	2300      	movs	r3, #0
 800886e:	001e      	movs	r6, r3
 8008870:	9306      	str	r3, [sp, #24]
 8008872:	9b01      	ldr	r3, [sp, #4]
 8008874:	42ab      	cmp	r3, r5
 8008876:	d340      	bcc.n	80088fa <__gethex+0x21a>
 8008878:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800887a:	9b04      	ldr	r3, [sp, #16]
 800887c:	c540      	stmia	r5!, {r6}
 800887e:	1aed      	subs	r5, r5, r3
 8008880:	10ad      	asrs	r5, r5, #2
 8008882:	0030      	movs	r0, r6
 8008884:	6125      	str	r5, [r4, #16]
 8008886:	f000 fb61 	bl	8008f4c <__hi0bits>
 800888a:	9b02      	ldr	r3, [sp, #8]
 800888c:	016d      	lsls	r5, r5, #5
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	1a2e      	subs	r6, r5, r0
 8008892:	9301      	str	r3, [sp, #4]
 8008894:	429e      	cmp	r6, r3
 8008896:	dd5a      	ble.n	800894e <__gethex+0x26e>
 8008898:	1af6      	subs	r6, r6, r3
 800889a:	0031      	movs	r1, r6
 800889c:	0020      	movs	r0, r4
 800889e:	f000 ff03 	bl	80096a8 <__any_on>
 80088a2:	1e05      	subs	r5, r0, #0
 80088a4:	d016      	beq.n	80088d4 <__gethex+0x1f4>
 80088a6:	2501      	movs	r5, #1
 80088a8:	211f      	movs	r1, #31
 80088aa:	0028      	movs	r0, r5
 80088ac:	1e73      	subs	r3, r6, #1
 80088ae:	4019      	ands	r1, r3
 80088b0:	4088      	lsls	r0, r1
 80088b2:	0001      	movs	r1, r0
 80088b4:	115a      	asrs	r2, r3, #5
 80088b6:	9804      	ldr	r0, [sp, #16]
 80088b8:	0092      	lsls	r2, r2, #2
 80088ba:	5812      	ldr	r2, [r2, r0]
 80088bc:	420a      	tst	r2, r1
 80088be:	d009      	beq.n	80088d4 <__gethex+0x1f4>
 80088c0:	42ab      	cmp	r3, r5
 80088c2:	dd06      	ble.n	80088d2 <__gethex+0x1f2>
 80088c4:	0020      	movs	r0, r4
 80088c6:	1eb1      	subs	r1, r6, #2
 80088c8:	f000 feee 	bl	80096a8 <__any_on>
 80088cc:	3502      	adds	r5, #2
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d100      	bne.n	80088d4 <__gethex+0x1f4>
 80088d2:	2502      	movs	r5, #2
 80088d4:	0031      	movs	r1, r6
 80088d6:	0020      	movs	r0, r4
 80088d8:	f7ff fe98 	bl	800860c <rshift>
 80088dc:	19bf      	adds	r7, r7, r6
 80088de:	9b02      	ldr	r3, [sp, #8]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	9303      	str	r3, [sp, #12]
 80088e4:	42bb      	cmp	r3, r7
 80088e6:	da42      	bge.n	800896e <__gethex+0x28e>
 80088e8:	0021      	movs	r1, r4
 80088ea:	9805      	ldr	r0, [sp, #20]
 80088ec:	f000 fa7a 	bl	8008de4 <_Bfree>
 80088f0:	2300      	movs	r3, #0
 80088f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088f4:	26a3      	movs	r6, #163	; 0xa3
 80088f6:	6013      	str	r3, [r2, #0]
 80088f8:	e78b      	b.n	8008812 <__gethex+0x132>
 80088fa:	1e6b      	subs	r3, r5, #1
 80088fc:	9308      	str	r3, [sp, #32]
 80088fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	4293      	cmp	r3, r2
 8008904:	d014      	beq.n	8008930 <__gethex+0x250>
 8008906:	9b06      	ldr	r3, [sp, #24]
 8008908:	2b20      	cmp	r3, #32
 800890a:	d104      	bne.n	8008916 <__gethex+0x236>
 800890c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800890e:	c340      	stmia	r3!, {r6}
 8008910:	2600      	movs	r6, #0
 8008912:	9309      	str	r3, [sp, #36]	; 0x24
 8008914:	9606      	str	r6, [sp, #24]
 8008916:	9b08      	ldr	r3, [sp, #32]
 8008918:	7818      	ldrb	r0, [r3, #0]
 800891a:	f7ff fecb 	bl	80086b4 <__hexdig_fun>
 800891e:	230f      	movs	r3, #15
 8008920:	4018      	ands	r0, r3
 8008922:	9b06      	ldr	r3, [sp, #24]
 8008924:	9d08      	ldr	r5, [sp, #32]
 8008926:	4098      	lsls	r0, r3
 8008928:	3304      	adds	r3, #4
 800892a:	4306      	orrs	r6, r0
 800892c:	9306      	str	r3, [sp, #24]
 800892e:	e7a0      	b.n	8008872 <__gethex+0x192>
 8008930:	2301      	movs	r3, #1
 8008932:	9a03      	ldr	r2, [sp, #12]
 8008934:	1a9d      	subs	r5, r3, r2
 8008936:	9b08      	ldr	r3, [sp, #32]
 8008938:	195d      	adds	r5, r3, r5
 800893a:	9b01      	ldr	r3, [sp, #4]
 800893c:	429d      	cmp	r5, r3
 800893e:	d3e2      	bcc.n	8008906 <__gethex+0x226>
 8008940:	0028      	movs	r0, r5
 8008942:	9907      	ldr	r1, [sp, #28]
 8008944:	f001 f95c 	bl	8009c00 <strncmp>
 8008948:	2800      	cmp	r0, #0
 800894a:	d1dc      	bne.n	8008906 <__gethex+0x226>
 800894c:	e791      	b.n	8008872 <__gethex+0x192>
 800894e:	9b01      	ldr	r3, [sp, #4]
 8008950:	2500      	movs	r5, #0
 8008952:	429e      	cmp	r6, r3
 8008954:	dac3      	bge.n	80088de <__gethex+0x1fe>
 8008956:	1b9e      	subs	r6, r3, r6
 8008958:	0021      	movs	r1, r4
 800895a:	0032      	movs	r2, r6
 800895c:	9805      	ldr	r0, [sp, #20]
 800895e:	f000 fc5f 	bl	8009220 <__lshift>
 8008962:	0003      	movs	r3, r0
 8008964:	3314      	adds	r3, #20
 8008966:	0004      	movs	r4, r0
 8008968:	1bbf      	subs	r7, r7, r6
 800896a:	9304      	str	r3, [sp, #16]
 800896c:	e7b7      	b.n	80088de <__gethex+0x1fe>
 800896e:	9b02      	ldr	r3, [sp, #8]
 8008970:	685e      	ldr	r6, [r3, #4]
 8008972:	42be      	cmp	r6, r7
 8008974:	dd71      	ble.n	8008a5a <__gethex+0x37a>
 8008976:	9b01      	ldr	r3, [sp, #4]
 8008978:	1bf6      	subs	r6, r6, r7
 800897a:	42b3      	cmp	r3, r6
 800897c:	dc38      	bgt.n	80089f0 <__gethex+0x310>
 800897e:	9b02      	ldr	r3, [sp, #8]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	2b02      	cmp	r3, #2
 8008984:	d026      	beq.n	80089d4 <__gethex+0x2f4>
 8008986:	2b03      	cmp	r3, #3
 8008988:	d028      	beq.n	80089dc <__gethex+0x2fc>
 800898a:	2b01      	cmp	r3, #1
 800898c:	d119      	bne.n	80089c2 <__gethex+0x2e2>
 800898e:	9b01      	ldr	r3, [sp, #4]
 8008990:	42b3      	cmp	r3, r6
 8008992:	d116      	bne.n	80089c2 <__gethex+0x2e2>
 8008994:	2b01      	cmp	r3, #1
 8008996:	d10d      	bne.n	80089b4 <__gethex+0x2d4>
 8008998:	9b02      	ldr	r3, [sp, #8]
 800899a:	2662      	movs	r6, #98	; 0x62
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	9301      	str	r3, [sp, #4]
 80089a0:	9a01      	ldr	r2, [sp, #4]
 80089a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	2301      	movs	r3, #1
 80089a8:	9a04      	ldr	r2, [sp, #16]
 80089aa:	6123      	str	r3, [r4, #16]
 80089ac:	6013      	str	r3, [r2, #0]
 80089ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089b0:	601c      	str	r4, [r3, #0]
 80089b2:	e72e      	b.n	8008812 <__gethex+0x132>
 80089b4:	9901      	ldr	r1, [sp, #4]
 80089b6:	0020      	movs	r0, r4
 80089b8:	3901      	subs	r1, #1
 80089ba:	f000 fe75 	bl	80096a8 <__any_on>
 80089be:	2800      	cmp	r0, #0
 80089c0:	d1ea      	bne.n	8008998 <__gethex+0x2b8>
 80089c2:	0021      	movs	r1, r4
 80089c4:	9805      	ldr	r0, [sp, #20]
 80089c6:	f000 fa0d 	bl	8008de4 <_Bfree>
 80089ca:	2300      	movs	r3, #0
 80089cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089ce:	2650      	movs	r6, #80	; 0x50
 80089d0:	6013      	str	r3, [r2, #0]
 80089d2:	e71e      	b.n	8008812 <__gethex+0x132>
 80089d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1f3      	bne.n	80089c2 <__gethex+0x2e2>
 80089da:	e7dd      	b.n	8008998 <__gethex+0x2b8>
 80089dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1da      	bne.n	8008998 <__gethex+0x2b8>
 80089e2:	e7ee      	b.n	80089c2 <__gethex+0x2e2>
 80089e4:	0800ac00 	.word	0x0800ac00
 80089e8:	0800ab88 	.word	0x0800ab88
 80089ec:	0800ab99 	.word	0x0800ab99
 80089f0:	1e77      	subs	r7, r6, #1
 80089f2:	2d00      	cmp	r5, #0
 80089f4:	d12f      	bne.n	8008a56 <__gethex+0x376>
 80089f6:	2f00      	cmp	r7, #0
 80089f8:	d004      	beq.n	8008a04 <__gethex+0x324>
 80089fa:	0039      	movs	r1, r7
 80089fc:	0020      	movs	r0, r4
 80089fe:	f000 fe53 	bl	80096a8 <__any_on>
 8008a02:	0005      	movs	r5, r0
 8008a04:	231f      	movs	r3, #31
 8008a06:	117a      	asrs	r2, r7, #5
 8008a08:	401f      	ands	r7, r3
 8008a0a:	3b1e      	subs	r3, #30
 8008a0c:	40bb      	lsls	r3, r7
 8008a0e:	9904      	ldr	r1, [sp, #16]
 8008a10:	0092      	lsls	r2, r2, #2
 8008a12:	5852      	ldr	r2, [r2, r1]
 8008a14:	421a      	tst	r2, r3
 8008a16:	d001      	beq.n	8008a1c <__gethex+0x33c>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	431d      	orrs	r5, r3
 8008a1c:	9b01      	ldr	r3, [sp, #4]
 8008a1e:	0031      	movs	r1, r6
 8008a20:	1b9b      	subs	r3, r3, r6
 8008a22:	2602      	movs	r6, #2
 8008a24:	0020      	movs	r0, r4
 8008a26:	9301      	str	r3, [sp, #4]
 8008a28:	f7ff fdf0 	bl	800860c <rshift>
 8008a2c:	9b02      	ldr	r3, [sp, #8]
 8008a2e:	685f      	ldr	r7, [r3, #4]
 8008a30:	2d00      	cmp	r5, #0
 8008a32:	d041      	beq.n	8008ab8 <__gethex+0x3d8>
 8008a34:	9b02      	ldr	r3, [sp, #8]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d010      	beq.n	8008a5e <__gethex+0x37e>
 8008a3c:	2b03      	cmp	r3, #3
 8008a3e:	d012      	beq.n	8008a66 <__gethex+0x386>
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d106      	bne.n	8008a52 <__gethex+0x372>
 8008a44:	07aa      	lsls	r2, r5, #30
 8008a46:	d504      	bpl.n	8008a52 <__gethex+0x372>
 8008a48:	9a04      	ldr	r2, [sp, #16]
 8008a4a:	6810      	ldr	r0, [r2, #0]
 8008a4c:	4305      	orrs	r5, r0
 8008a4e:	421d      	tst	r5, r3
 8008a50:	d10c      	bne.n	8008a6c <__gethex+0x38c>
 8008a52:	2310      	movs	r3, #16
 8008a54:	e02f      	b.n	8008ab6 <__gethex+0x3d6>
 8008a56:	2501      	movs	r5, #1
 8008a58:	e7d4      	b.n	8008a04 <__gethex+0x324>
 8008a5a:	2601      	movs	r6, #1
 8008a5c:	e7e8      	b.n	8008a30 <__gethex+0x350>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a62:	1a9b      	subs	r3, r3, r2
 8008a64:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0f2      	beq.n	8008a52 <__gethex+0x372>
 8008a6c:	6923      	ldr	r3, [r4, #16]
 8008a6e:	2000      	movs	r0, #0
 8008a70:	9303      	str	r3, [sp, #12]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	9304      	str	r3, [sp, #16]
 8008a76:	0023      	movs	r3, r4
 8008a78:	9a04      	ldr	r2, [sp, #16]
 8008a7a:	3314      	adds	r3, #20
 8008a7c:	1899      	adds	r1, r3, r2
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	1c55      	adds	r5, r2, #1
 8008a82:	d01e      	beq.n	8008ac2 <__gethex+0x3e2>
 8008a84:	3201      	adds	r2, #1
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	0023      	movs	r3, r4
 8008a8a:	3314      	adds	r3, #20
 8008a8c:	2e02      	cmp	r6, #2
 8008a8e:	d140      	bne.n	8008b12 <__gethex+0x432>
 8008a90:	9a02      	ldr	r2, [sp, #8]
 8008a92:	9901      	ldr	r1, [sp, #4]
 8008a94:	6812      	ldr	r2, [r2, #0]
 8008a96:	3a01      	subs	r2, #1
 8008a98:	428a      	cmp	r2, r1
 8008a9a:	d10b      	bne.n	8008ab4 <__gethex+0x3d4>
 8008a9c:	114a      	asrs	r2, r1, #5
 8008a9e:	211f      	movs	r1, #31
 8008aa0:	9801      	ldr	r0, [sp, #4]
 8008aa2:	0092      	lsls	r2, r2, #2
 8008aa4:	4001      	ands	r1, r0
 8008aa6:	2001      	movs	r0, #1
 8008aa8:	0005      	movs	r5, r0
 8008aaa:	408d      	lsls	r5, r1
 8008aac:	58d3      	ldr	r3, [r2, r3]
 8008aae:	422b      	tst	r3, r5
 8008ab0:	d000      	beq.n	8008ab4 <__gethex+0x3d4>
 8008ab2:	2601      	movs	r6, #1
 8008ab4:	2320      	movs	r3, #32
 8008ab6:	431e      	orrs	r6, r3
 8008ab8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008aba:	601c      	str	r4, [r3, #0]
 8008abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008abe:	601f      	str	r7, [r3, #0]
 8008ac0:	e6a7      	b.n	8008812 <__gethex+0x132>
 8008ac2:	c301      	stmia	r3!, {r0}
 8008ac4:	4299      	cmp	r1, r3
 8008ac6:	d8da      	bhi.n	8008a7e <__gethex+0x39e>
 8008ac8:	9b03      	ldr	r3, [sp, #12]
 8008aca:	68a2      	ldr	r2, [r4, #8]
 8008acc:	4293      	cmp	r3, r2
 8008ace:	db17      	blt.n	8008b00 <__gethex+0x420>
 8008ad0:	6863      	ldr	r3, [r4, #4]
 8008ad2:	9805      	ldr	r0, [sp, #20]
 8008ad4:	1c59      	adds	r1, r3, #1
 8008ad6:	f000 f941 	bl	8008d5c <_Balloc>
 8008ada:	1e05      	subs	r5, r0, #0
 8008adc:	d103      	bne.n	8008ae6 <__gethex+0x406>
 8008ade:	0002      	movs	r2, r0
 8008ae0:	2184      	movs	r1, #132	; 0x84
 8008ae2:	4b1c      	ldr	r3, [pc, #112]	; (8008b54 <__gethex+0x474>)
 8008ae4:	e6b8      	b.n	8008858 <__gethex+0x178>
 8008ae6:	0021      	movs	r1, r4
 8008ae8:	6923      	ldr	r3, [r4, #16]
 8008aea:	310c      	adds	r1, #12
 8008aec:	1c9a      	adds	r2, r3, #2
 8008aee:	0092      	lsls	r2, r2, #2
 8008af0:	300c      	adds	r0, #12
 8008af2:	f000 f92a 	bl	8008d4a <memcpy>
 8008af6:	0021      	movs	r1, r4
 8008af8:	9805      	ldr	r0, [sp, #20]
 8008afa:	f000 f973 	bl	8008de4 <_Bfree>
 8008afe:	002c      	movs	r4, r5
 8008b00:	6923      	ldr	r3, [r4, #16]
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	6122      	str	r2, [r4, #16]
 8008b06:	2201      	movs	r2, #1
 8008b08:	3304      	adds	r3, #4
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	18e3      	adds	r3, r4, r3
 8008b0e:	605a      	str	r2, [r3, #4]
 8008b10:	e7ba      	b.n	8008a88 <__gethex+0x3a8>
 8008b12:	6922      	ldr	r2, [r4, #16]
 8008b14:	9903      	ldr	r1, [sp, #12]
 8008b16:	428a      	cmp	r2, r1
 8008b18:	dd09      	ble.n	8008b2e <__gethex+0x44e>
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	0020      	movs	r0, r4
 8008b1e:	f7ff fd75 	bl	800860c <rshift>
 8008b22:	9b02      	ldr	r3, [sp, #8]
 8008b24:	3701      	adds	r7, #1
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	42bb      	cmp	r3, r7
 8008b2a:	dac2      	bge.n	8008ab2 <__gethex+0x3d2>
 8008b2c:	e6dc      	b.n	80088e8 <__gethex+0x208>
 8008b2e:	221f      	movs	r2, #31
 8008b30:	9d01      	ldr	r5, [sp, #4]
 8008b32:	9901      	ldr	r1, [sp, #4]
 8008b34:	2601      	movs	r6, #1
 8008b36:	4015      	ands	r5, r2
 8008b38:	4211      	tst	r1, r2
 8008b3a:	d0bb      	beq.n	8008ab4 <__gethex+0x3d4>
 8008b3c:	9a04      	ldr	r2, [sp, #16]
 8008b3e:	189b      	adds	r3, r3, r2
 8008b40:	3b04      	subs	r3, #4
 8008b42:	6818      	ldr	r0, [r3, #0]
 8008b44:	f000 fa02 	bl	8008f4c <__hi0bits>
 8008b48:	2320      	movs	r3, #32
 8008b4a:	1b5d      	subs	r5, r3, r5
 8008b4c:	42a8      	cmp	r0, r5
 8008b4e:	dbe4      	blt.n	8008b1a <__gethex+0x43a>
 8008b50:	e7b0      	b.n	8008ab4 <__gethex+0x3d4>
 8008b52:	46c0      	nop			; (mov r8, r8)
 8008b54:	0800ab88 	.word	0x0800ab88

08008b58 <L_shift>:
 8008b58:	2308      	movs	r3, #8
 8008b5a:	b570      	push	{r4, r5, r6, lr}
 8008b5c:	2520      	movs	r5, #32
 8008b5e:	1a9a      	subs	r2, r3, r2
 8008b60:	0092      	lsls	r2, r2, #2
 8008b62:	1aad      	subs	r5, r5, r2
 8008b64:	6843      	ldr	r3, [r0, #4]
 8008b66:	6806      	ldr	r6, [r0, #0]
 8008b68:	001c      	movs	r4, r3
 8008b6a:	40ac      	lsls	r4, r5
 8008b6c:	40d3      	lsrs	r3, r2
 8008b6e:	4334      	orrs	r4, r6
 8008b70:	6004      	str	r4, [r0, #0]
 8008b72:	6043      	str	r3, [r0, #4]
 8008b74:	3004      	adds	r0, #4
 8008b76:	4288      	cmp	r0, r1
 8008b78:	d3f4      	bcc.n	8008b64 <L_shift+0xc>
 8008b7a:	bd70      	pop	{r4, r5, r6, pc}

08008b7c <__match>:
 8008b7c:	b530      	push	{r4, r5, lr}
 8008b7e:	6803      	ldr	r3, [r0, #0]
 8008b80:	780c      	ldrb	r4, [r1, #0]
 8008b82:	3301      	adds	r3, #1
 8008b84:	2c00      	cmp	r4, #0
 8008b86:	d102      	bne.n	8008b8e <__match+0x12>
 8008b88:	6003      	str	r3, [r0, #0]
 8008b8a:	2001      	movs	r0, #1
 8008b8c:	bd30      	pop	{r4, r5, pc}
 8008b8e:	781a      	ldrb	r2, [r3, #0]
 8008b90:	0015      	movs	r5, r2
 8008b92:	3d41      	subs	r5, #65	; 0x41
 8008b94:	2d19      	cmp	r5, #25
 8008b96:	d800      	bhi.n	8008b9a <__match+0x1e>
 8008b98:	3220      	adds	r2, #32
 8008b9a:	3101      	adds	r1, #1
 8008b9c:	42a2      	cmp	r2, r4
 8008b9e:	d0ef      	beq.n	8008b80 <__match+0x4>
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	e7f3      	b.n	8008b8c <__match+0x10>

08008ba4 <__hexnan>:
 8008ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ba6:	680b      	ldr	r3, [r1, #0]
 8008ba8:	b08b      	sub	sp, #44	; 0x2c
 8008baa:	9201      	str	r2, [sp, #4]
 8008bac:	9901      	ldr	r1, [sp, #4]
 8008bae:	115a      	asrs	r2, r3, #5
 8008bb0:	0092      	lsls	r2, r2, #2
 8008bb2:	188a      	adds	r2, r1, r2
 8008bb4:	9202      	str	r2, [sp, #8]
 8008bb6:	0019      	movs	r1, r3
 8008bb8:	221f      	movs	r2, #31
 8008bba:	4011      	ands	r1, r2
 8008bbc:	9008      	str	r0, [sp, #32]
 8008bbe:	9106      	str	r1, [sp, #24]
 8008bc0:	4213      	tst	r3, r2
 8008bc2:	d002      	beq.n	8008bca <__hexnan+0x26>
 8008bc4:	9b02      	ldr	r3, [sp, #8]
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	9302      	str	r3, [sp, #8]
 8008bca:	9b02      	ldr	r3, [sp, #8]
 8008bcc:	2500      	movs	r5, #0
 8008bce:	1f1e      	subs	r6, r3, #4
 8008bd0:	0037      	movs	r7, r6
 8008bd2:	0034      	movs	r4, r6
 8008bd4:	9b08      	ldr	r3, [sp, #32]
 8008bd6:	6035      	str	r5, [r6, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	9507      	str	r5, [sp, #28]
 8008bdc:	9305      	str	r3, [sp, #20]
 8008bde:	9503      	str	r5, [sp, #12]
 8008be0:	9b05      	ldr	r3, [sp, #20]
 8008be2:	3301      	adds	r3, #1
 8008be4:	9309      	str	r3, [sp, #36]	; 0x24
 8008be6:	9b05      	ldr	r3, [sp, #20]
 8008be8:	785b      	ldrb	r3, [r3, #1]
 8008bea:	9304      	str	r3, [sp, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d028      	beq.n	8008c42 <__hexnan+0x9e>
 8008bf0:	9804      	ldr	r0, [sp, #16]
 8008bf2:	f7ff fd5f 	bl	80086b4 <__hexdig_fun>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d154      	bne.n	8008ca4 <__hexnan+0x100>
 8008bfa:	9b04      	ldr	r3, [sp, #16]
 8008bfc:	2b20      	cmp	r3, #32
 8008bfe:	d819      	bhi.n	8008c34 <__hexnan+0x90>
 8008c00:	9b03      	ldr	r3, [sp, #12]
 8008c02:	9a07      	ldr	r2, [sp, #28]
 8008c04:	4293      	cmp	r3, r2
 8008c06:	dd12      	ble.n	8008c2e <__hexnan+0x8a>
 8008c08:	42bc      	cmp	r4, r7
 8008c0a:	d206      	bcs.n	8008c1a <__hexnan+0x76>
 8008c0c:	2d07      	cmp	r5, #7
 8008c0e:	dc04      	bgt.n	8008c1a <__hexnan+0x76>
 8008c10:	002a      	movs	r2, r5
 8008c12:	0039      	movs	r1, r7
 8008c14:	0020      	movs	r0, r4
 8008c16:	f7ff ff9f 	bl	8008b58 <L_shift>
 8008c1a:	9b01      	ldr	r3, [sp, #4]
 8008c1c:	2508      	movs	r5, #8
 8008c1e:	429c      	cmp	r4, r3
 8008c20:	d905      	bls.n	8008c2e <__hexnan+0x8a>
 8008c22:	1f27      	subs	r7, r4, #4
 8008c24:	2500      	movs	r5, #0
 8008c26:	003c      	movs	r4, r7
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	603d      	str	r5, [r7, #0]
 8008c2c:	9307      	str	r3, [sp, #28]
 8008c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c30:	9305      	str	r3, [sp, #20]
 8008c32:	e7d5      	b.n	8008be0 <__hexnan+0x3c>
 8008c34:	9b04      	ldr	r3, [sp, #16]
 8008c36:	2b29      	cmp	r3, #41	; 0x29
 8008c38:	d159      	bne.n	8008cee <__hexnan+0x14a>
 8008c3a:	9b05      	ldr	r3, [sp, #20]
 8008c3c:	9a08      	ldr	r2, [sp, #32]
 8008c3e:	3302      	adds	r3, #2
 8008c40:	6013      	str	r3, [r2, #0]
 8008c42:	9b03      	ldr	r3, [sp, #12]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d052      	beq.n	8008cee <__hexnan+0x14a>
 8008c48:	42bc      	cmp	r4, r7
 8008c4a:	d206      	bcs.n	8008c5a <__hexnan+0xb6>
 8008c4c:	2d07      	cmp	r5, #7
 8008c4e:	dc04      	bgt.n	8008c5a <__hexnan+0xb6>
 8008c50:	002a      	movs	r2, r5
 8008c52:	0039      	movs	r1, r7
 8008c54:	0020      	movs	r0, r4
 8008c56:	f7ff ff7f 	bl	8008b58 <L_shift>
 8008c5a:	9b01      	ldr	r3, [sp, #4]
 8008c5c:	429c      	cmp	r4, r3
 8008c5e:	d935      	bls.n	8008ccc <__hexnan+0x128>
 8008c60:	001a      	movs	r2, r3
 8008c62:	0023      	movs	r3, r4
 8008c64:	cb02      	ldmia	r3!, {r1}
 8008c66:	c202      	stmia	r2!, {r1}
 8008c68:	429e      	cmp	r6, r3
 8008c6a:	d2fb      	bcs.n	8008c64 <__hexnan+0xc0>
 8008c6c:	9b02      	ldr	r3, [sp, #8]
 8008c6e:	1c61      	adds	r1, r4, #1
 8008c70:	1eda      	subs	r2, r3, #3
 8008c72:	2304      	movs	r3, #4
 8008c74:	4291      	cmp	r1, r2
 8008c76:	d805      	bhi.n	8008c84 <__hexnan+0xe0>
 8008c78:	9b02      	ldr	r3, [sp, #8]
 8008c7a:	3b04      	subs	r3, #4
 8008c7c:	1b1b      	subs	r3, r3, r4
 8008c7e:	089b      	lsrs	r3, r3, #2
 8008c80:	3301      	adds	r3, #1
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	9a01      	ldr	r2, [sp, #4]
 8008c86:	18d3      	adds	r3, r2, r3
 8008c88:	2200      	movs	r2, #0
 8008c8a:	c304      	stmia	r3!, {r2}
 8008c8c:	429e      	cmp	r6, r3
 8008c8e:	d2fc      	bcs.n	8008c8a <__hexnan+0xe6>
 8008c90:	6833      	ldr	r3, [r6, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d104      	bne.n	8008ca0 <__hexnan+0xfc>
 8008c96:	9b01      	ldr	r3, [sp, #4]
 8008c98:	429e      	cmp	r6, r3
 8008c9a:	d126      	bne.n	8008cea <__hexnan+0x146>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	6033      	str	r3, [r6, #0]
 8008ca0:	2005      	movs	r0, #5
 8008ca2:	e025      	b.n	8008cf0 <__hexnan+0x14c>
 8008ca4:	9b03      	ldr	r3, [sp, #12]
 8008ca6:	3501      	adds	r5, #1
 8008ca8:	3301      	adds	r3, #1
 8008caa:	9303      	str	r3, [sp, #12]
 8008cac:	2d08      	cmp	r5, #8
 8008cae:	dd06      	ble.n	8008cbe <__hexnan+0x11a>
 8008cb0:	9b01      	ldr	r3, [sp, #4]
 8008cb2:	429c      	cmp	r4, r3
 8008cb4:	d9bb      	bls.n	8008c2e <__hexnan+0x8a>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	2501      	movs	r5, #1
 8008cba:	3c04      	subs	r4, #4
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	220f      	movs	r2, #15
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	4010      	ands	r0, r2
 8008cc4:	011b      	lsls	r3, r3, #4
 8008cc6:	4318      	orrs	r0, r3
 8008cc8:	6020      	str	r0, [r4, #0]
 8008cca:	e7b0      	b.n	8008c2e <__hexnan+0x8a>
 8008ccc:	9b06      	ldr	r3, [sp, #24]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d0de      	beq.n	8008c90 <__hexnan+0xec>
 8008cd2:	2120      	movs	r1, #32
 8008cd4:	9a06      	ldr	r2, [sp, #24]
 8008cd6:	9b02      	ldr	r3, [sp, #8]
 8008cd8:	1a89      	subs	r1, r1, r2
 8008cda:	2201      	movs	r2, #1
 8008cdc:	4252      	negs	r2, r2
 8008cde:	40ca      	lsrs	r2, r1
 8008ce0:	3b04      	subs	r3, #4
 8008ce2:	6819      	ldr	r1, [r3, #0]
 8008ce4:	400a      	ands	r2, r1
 8008ce6:	601a      	str	r2, [r3, #0]
 8008ce8:	e7d2      	b.n	8008c90 <__hexnan+0xec>
 8008cea:	3e04      	subs	r6, #4
 8008cec:	e7d0      	b.n	8008c90 <__hexnan+0xec>
 8008cee:	2004      	movs	r0, #4
 8008cf0:	b00b      	add	sp, #44	; 0x2c
 8008cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008cf4 <_localeconv_r>:
 8008cf4:	4800      	ldr	r0, [pc, #0]	; (8008cf8 <_localeconv_r+0x4>)
 8008cf6:	4770      	bx	lr
 8008cf8:	20000164 	.word	0x20000164

08008cfc <malloc>:
 8008cfc:	b510      	push	{r4, lr}
 8008cfe:	4b03      	ldr	r3, [pc, #12]	; (8008d0c <malloc+0x10>)
 8008d00:	0001      	movs	r1, r0
 8008d02:	6818      	ldr	r0, [r3, #0]
 8008d04:	f000 fd8c 	bl	8009820 <_malloc_r>
 8008d08:	bd10      	pop	{r4, pc}
 8008d0a:	46c0      	nop			; (mov r8, r8)
 8008d0c:	2000000c 	.word	0x2000000c

08008d10 <__ascii_mbtowc>:
 8008d10:	b082      	sub	sp, #8
 8008d12:	2900      	cmp	r1, #0
 8008d14:	d100      	bne.n	8008d18 <__ascii_mbtowc+0x8>
 8008d16:	a901      	add	r1, sp, #4
 8008d18:	1e10      	subs	r0, r2, #0
 8008d1a:	d006      	beq.n	8008d2a <__ascii_mbtowc+0x1a>
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d006      	beq.n	8008d2e <__ascii_mbtowc+0x1e>
 8008d20:	7813      	ldrb	r3, [r2, #0]
 8008d22:	600b      	str	r3, [r1, #0]
 8008d24:	7810      	ldrb	r0, [r2, #0]
 8008d26:	1e43      	subs	r3, r0, #1
 8008d28:	4198      	sbcs	r0, r3
 8008d2a:	b002      	add	sp, #8
 8008d2c:	4770      	bx	lr
 8008d2e:	2002      	movs	r0, #2
 8008d30:	4240      	negs	r0, r0
 8008d32:	e7fa      	b.n	8008d2a <__ascii_mbtowc+0x1a>

08008d34 <memchr>:
 8008d34:	b2c9      	uxtb	r1, r1
 8008d36:	1882      	adds	r2, r0, r2
 8008d38:	4290      	cmp	r0, r2
 8008d3a:	d101      	bne.n	8008d40 <memchr+0xc>
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	4770      	bx	lr
 8008d40:	7803      	ldrb	r3, [r0, #0]
 8008d42:	428b      	cmp	r3, r1
 8008d44:	d0fb      	beq.n	8008d3e <memchr+0xa>
 8008d46:	3001      	adds	r0, #1
 8008d48:	e7f6      	b.n	8008d38 <memchr+0x4>

08008d4a <memcpy>:
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	b510      	push	{r4, lr}
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d100      	bne.n	8008d54 <memcpy+0xa>
 8008d52:	bd10      	pop	{r4, pc}
 8008d54:	5ccc      	ldrb	r4, [r1, r3]
 8008d56:	54c4      	strb	r4, [r0, r3]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	e7f8      	b.n	8008d4e <memcpy+0x4>

08008d5c <_Balloc>:
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d60:	0006      	movs	r6, r0
 8008d62:	000c      	movs	r4, r1
 8008d64:	2d00      	cmp	r5, #0
 8008d66:	d10e      	bne.n	8008d86 <_Balloc+0x2a>
 8008d68:	2010      	movs	r0, #16
 8008d6a:	f7ff ffc7 	bl	8008cfc <malloc>
 8008d6e:	1e02      	subs	r2, r0, #0
 8008d70:	6270      	str	r0, [r6, #36]	; 0x24
 8008d72:	d104      	bne.n	8008d7e <_Balloc+0x22>
 8008d74:	2166      	movs	r1, #102	; 0x66
 8008d76:	4b19      	ldr	r3, [pc, #100]	; (8008ddc <_Balloc+0x80>)
 8008d78:	4819      	ldr	r0, [pc, #100]	; (8008de0 <_Balloc+0x84>)
 8008d7a:	f000 ff61 	bl	8009c40 <__assert_func>
 8008d7e:	6045      	str	r5, [r0, #4]
 8008d80:	6085      	str	r5, [r0, #8]
 8008d82:	6005      	str	r5, [r0, #0]
 8008d84:	60c5      	str	r5, [r0, #12]
 8008d86:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008d88:	68eb      	ldr	r3, [r5, #12]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d013      	beq.n	8008db6 <_Balloc+0x5a>
 8008d8e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008d90:	00a2      	lsls	r2, r4, #2
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	189b      	adds	r3, r3, r2
 8008d96:	6818      	ldr	r0, [r3, #0]
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d118      	bne.n	8008dce <_Balloc+0x72>
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	000d      	movs	r5, r1
 8008da0:	40a5      	lsls	r5, r4
 8008da2:	1d6a      	adds	r2, r5, #5
 8008da4:	0030      	movs	r0, r6
 8008da6:	0092      	lsls	r2, r2, #2
 8008da8:	f000 fca1 	bl	80096ee <_calloc_r>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d00c      	beq.n	8008dca <_Balloc+0x6e>
 8008db0:	6044      	str	r4, [r0, #4]
 8008db2:	6085      	str	r5, [r0, #8]
 8008db4:	e00d      	b.n	8008dd2 <_Balloc+0x76>
 8008db6:	2221      	movs	r2, #33	; 0x21
 8008db8:	2104      	movs	r1, #4
 8008dba:	0030      	movs	r0, r6
 8008dbc:	f000 fc97 	bl	80096ee <_calloc_r>
 8008dc0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008dc2:	60e8      	str	r0, [r5, #12]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1e1      	bne.n	8008d8e <_Balloc+0x32>
 8008dca:	2000      	movs	r0, #0
 8008dcc:	bd70      	pop	{r4, r5, r6, pc}
 8008dce:	6802      	ldr	r2, [r0, #0]
 8008dd0:	601a      	str	r2, [r3, #0]
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	6103      	str	r3, [r0, #16]
 8008dd6:	60c3      	str	r3, [r0, #12]
 8008dd8:	e7f8      	b.n	8008dcc <_Balloc+0x70>
 8008dda:	46c0      	nop			; (mov r8, r8)
 8008ddc:	0800ab16 	.word	0x0800ab16
 8008de0:	0800ac14 	.word	0x0800ac14

08008de4 <_Bfree>:
 8008de4:	b570      	push	{r4, r5, r6, lr}
 8008de6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008de8:	0005      	movs	r5, r0
 8008dea:	000c      	movs	r4, r1
 8008dec:	2e00      	cmp	r6, #0
 8008dee:	d10e      	bne.n	8008e0e <_Bfree+0x2a>
 8008df0:	2010      	movs	r0, #16
 8008df2:	f7ff ff83 	bl	8008cfc <malloc>
 8008df6:	1e02      	subs	r2, r0, #0
 8008df8:	6268      	str	r0, [r5, #36]	; 0x24
 8008dfa:	d104      	bne.n	8008e06 <_Bfree+0x22>
 8008dfc:	218a      	movs	r1, #138	; 0x8a
 8008dfe:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <_Bfree+0x40>)
 8008e00:	4809      	ldr	r0, [pc, #36]	; (8008e28 <_Bfree+0x44>)
 8008e02:	f000 ff1d 	bl	8009c40 <__assert_func>
 8008e06:	6046      	str	r6, [r0, #4]
 8008e08:	6086      	str	r6, [r0, #8]
 8008e0a:	6006      	str	r6, [r0, #0]
 8008e0c:	60c6      	str	r6, [r0, #12]
 8008e0e:	2c00      	cmp	r4, #0
 8008e10:	d007      	beq.n	8008e22 <_Bfree+0x3e>
 8008e12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e14:	6862      	ldr	r2, [r4, #4]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	0092      	lsls	r2, r2, #2
 8008e1a:	189b      	adds	r3, r3, r2
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	6022      	str	r2, [r4, #0]
 8008e20:	601c      	str	r4, [r3, #0]
 8008e22:	bd70      	pop	{r4, r5, r6, pc}
 8008e24:	0800ab16 	.word	0x0800ab16
 8008e28:	0800ac14 	.word	0x0800ac14

08008e2c <__multadd>:
 8008e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e2e:	000e      	movs	r6, r1
 8008e30:	9001      	str	r0, [sp, #4]
 8008e32:	000c      	movs	r4, r1
 8008e34:	001d      	movs	r5, r3
 8008e36:	2000      	movs	r0, #0
 8008e38:	690f      	ldr	r7, [r1, #16]
 8008e3a:	3614      	adds	r6, #20
 8008e3c:	6833      	ldr	r3, [r6, #0]
 8008e3e:	3001      	adds	r0, #1
 8008e40:	b299      	uxth	r1, r3
 8008e42:	4351      	muls	r1, r2
 8008e44:	0c1b      	lsrs	r3, r3, #16
 8008e46:	4353      	muls	r3, r2
 8008e48:	1949      	adds	r1, r1, r5
 8008e4a:	0c0d      	lsrs	r5, r1, #16
 8008e4c:	195b      	adds	r3, r3, r5
 8008e4e:	0c1d      	lsrs	r5, r3, #16
 8008e50:	b289      	uxth	r1, r1
 8008e52:	041b      	lsls	r3, r3, #16
 8008e54:	185b      	adds	r3, r3, r1
 8008e56:	c608      	stmia	r6!, {r3}
 8008e58:	4287      	cmp	r7, r0
 8008e5a:	dcef      	bgt.n	8008e3c <__multadd+0x10>
 8008e5c:	2d00      	cmp	r5, #0
 8008e5e:	d022      	beq.n	8008ea6 <__multadd+0x7a>
 8008e60:	68a3      	ldr	r3, [r4, #8]
 8008e62:	42bb      	cmp	r3, r7
 8008e64:	dc19      	bgt.n	8008e9a <__multadd+0x6e>
 8008e66:	6863      	ldr	r3, [r4, #4]
 8008e68:	9801      	ldr	r0, [sp, #4]
 8008e6a:	1c59      	adds	r1, r3, #1
 8008e6c:	f7ff ff76 	bl	8008d5c <_Balloc>
 8008e70:	1e06      	subs	r6, r0, #0
 8008e72:	d105      	bne.n	8008e80 <__multadd+0x54>
 8008e74:	0002      	movs	r2, r0
 8008e76:	21b5      	movs	r1, #181	; 0xb5
 8008e78:	4b0c      	ldr	r3, [pc, #48]	; (8008eac <__multadd+0x80>)
 8008e7a:	480d      	ldr	r0, [pc, #52]	; (8008eb0 <__multadd+0x84>)
 8008e7c:	f000 fee0 	bl	8009c40 <__assert_func>
 8008e80:	0021      	movs	r1, r4
 8008e82:	6923      	ldr	r3, [r4, #16]
 8008e84:	310c      	adds	r1, #12
 8008e86:	1c9a      	adds	r2, r3, #2
 8008e88:	0092      	lsls	r2, r2, #2
 8008e8a:	300c      	adds	r0, #12
 8008e8c:	f7ff ff5d 	bl	8008d4a <memcpy>
 8008e90:	0021      	movs	r1, r4
 8008e92:	9801      	ldr	r0, [sp, #4]
 8008e94:	f7ff ffa6 	bl	8008de4 <_Bfree>
 8008e98:	0034      	movs	r4, r6
 8008e9a:	1d3b      	adds	r3, r7, #4
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	18e3      	adds	r3, r4, r3
 8008ea0:	605d      	str	r5, [r3, #4]
 8008ea2:	1c7b      	adds	r3, r7, #1
 8008ea4:	6123      	str	r3, [r4, #16]
 8008ea6:	0020      	movs	r0, r4
 8008ea8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008eaa:	46c0      	nop			; (mov r8, r8)
 8008eac:	0800ab88 	.word	0x0800ab88
 8008eb0:	0800ac14 	.word	0x0800ac14

08008eb4 <__s2b>:
 8008eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eb6:	0006      	movs	r6, r0
 8008eb8:	0018      	movs	r0, r3
 8008eba:	000c      	movs	r4, r1
 8008ebc:	3008      	adds	r0, #8
 8008ebe:	2109      	movs	r1, #9
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	0015      	movs	r5, r2
 8008ec4:	f7f7 f9c6 	bl	8000254 <__divsi3>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	2100      	movs	r1, #0
 8008ecc:	4283      	cmp	r3, r0
 8008ece:	db0a      	blt.n	8008ee6 <__s2b+0x32>
 8008ed0:	0030      	movs	r0, r6
 8008ed2:	f7ff ff43 	bl	8008d5c <_Balloc>
 8008ed6:	1e01      	subs	r1, r0, #0
 8008ed8:	d108      	bne.n	8008eec <__s2b+0x38>
 8008eda:	0002      	movs	r2, r0
 8008edc:	4b19      	ldr	r3, [pc, #100]	; (8008f44 <__s2b+0x90>)
 8008ede:	481a      	ldr	r0, [pc, #104]	; (8008f48 <__s2b+0x94>)
 8008ee0:	31ce      	adds	r1, #206	; 0xce
 8008ee2:	f000 fead 	bl	8009c40 <__assert_func>
 8008ee6:	005b      	lsls	r3, r3, #1
 8008ee8:	3101      	adds	r1, #1
 8008eea:	e7ef      	b.n	8008ecc <__s2b+0x18>
 8008eec:	9b08      	ldr	r3, [sp, #32]
 8008eee:	6143      	str	r3, [r0, #20]
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	6103      	str	r3, [r0, #16]
 8008ef4:	2d09      	cmp	r5, #9
 8008ef6:	dd18      	ble.n	8008f2a <__s2b+0x76>
 8008ef8:	0023      	movs	r3, r4
 8008efa:	3309      	adds	r3, #9
 8008efc:	001f      	movs	r7, r3
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	1964      	adds	r4, r4, r5
 8008f02:	783b      	ldrb	r3, [r7, #0]
 8008f04:	220a      	movs	r2, #10
 8008f06:	0030      	movs	r0, r6
 8008f08:	3b30      	subs	r3, #48	; 0x30
 8008f0a:	f7ff ff8f 	bl	8008e2c <__multadd>
 8008f0e:	3701      	adds	r7, #1
 8008f10:	0001      	movs	r1, r0
 8008f12:	42a7      	cmp	r7, r4
 8008f14:	d1f5      	bne.n	8008f02 <__s2b+0x4e>
 8008f16:	002c      	movs	r4, r5
 8008f18:	9b00      	ldr	r3, [sp, #0]
 8008f1a:	3c08      	subs	r4, #8
 8008f1c:	191c      	adds	r4, r3, r4
 8008f1e:	002f      	movs	r7, r5
 8008f20:	9b01      	ldr	r3, [sp, #4]
 8008f22:	429f      	cmp	r7, r3
 8008f24:	db04      	blt.n	8008f30 <__s2b+0x7c>
 8008f26:	0008      	movs	r0, r1
 8008f28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f2a:	2509      	movs	r5, #9
 8008f2c:	340a      	adds	r4, #10
 8008f2e:	e7f6      	b.n	8008f1e <__s2b+0x6a>
 8008f30:	1b63      	subs	r3, r4, r5
 8008f32:	5ddb      	ldrb	r3, [r3, r7]
 8008f34:	220a      	movs	r2, #10
 8008f36:	0030      	movs	r0, r6
 8008f38:	3b30      	subs	r3, #48	; 0x30
 8008f3a:	f7ff ff77 	bl	8008e2c <__multadd>
 8008f3e:	3701      	adds	r7, #1
 8008f40:	0001      	movs	r1, r0
 8008f42:	e7ed      	b.n	8008f20 <__s2b+0x6c>
 8008f44:	0800ab88 	.word	0x0800ab88
 8008f48:	0800ac14 	.word	0x0800ac14

08008f4c <__hi0bits>:
 8008f4c:	0003      	movs	r3, r0
 8008f4e:	0c02      	lsrs	r2, r0, #16
 8008f50:	2000      	movs	r0, #0
 8008f52:	4282      	cmp	r2, r0
 8008f54:	d101      	bne.n	8008f5a <__hi0bits+0xe>
 8008f56:	041b      	lsls	r3, r3, #16
 8008f58:	3010      	adds	r0, #16
 8008f5a:	0e1a      	lsrs	r2, r3, #24
 8008f5c:	d101      	bne.n	8008f62 <__hi0bits+0x16>
 8008f5e:	3008      	adds	r0, #8
 8008f60:	021b      	lsls	r3, r3, #8
 8008f62:	0f1a      	lsrs	r2, r3, #28
 8008f64:	d101      	bne.n	8008f6a <__hi0bits+0x1e>
 8008f66:	3004      	adds	r0, #4
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	0f9a      	lsrs	r2, r3, #30
 8008f6c:	d101      	bne.n	8008f72 <__hi0bits+0x26>
 8008f6e:	3002      	adds	r0, #2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	db03      	blt.n	8008f7e <__hi0bits+0x32>
 8008f76:	3001      	adds	r0, #1
 8008f78:	005b      	lsls	r3, r3, #1
 8008f7a:	d400      	bmi.n	8008f7e <__hi0bits+0x32>
 8008f7c:	2020      	movs	r0, #32
 8008f7e:	4770      	bx	lr

08008f80 <__lo0bits>:
 8008f80:	6803      	ldr	r3, [r0, #0]
 8008f82:	0002      	movs	r2, r0
 8008f84:	2107      	movs	r1, #7
 8008f86:	0018      	movs	r0, r3
 8008f88:	4008      	ands	r0, r1
 8008f8a:	420b      	tst	r3, r1
 8008f8c:	d00d      	beq.n	8008faa <__lo0bits+0x2a>
 8008f8e:	3906      	subs	r1, #6
 8008f90:	2000      	movs	r0, #0
 8008f92:	420b      	tst	r3, r1
 8008f94:	d105      	bne.n	8008fa2 <__lo0bits+0x22>
 8008f96:	3002      	adds	r0, #2
 8008f98:	4203      	tst	r3, r0
 8008f9a:	d003      	beq.n	8008fa4 <__lo0bits+0x24>
 8008f9c:	40cb      	lsrs	r3, r1
 8008f9e:	0008      	movs	r0, r1
 8008fa0:	6013      	str	r3, [r2, #0]
 8008fa2:	4770      	bx	lr
 8008fa4:	089b      	lsrs	r3, r3, #2
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	e7fb      	b.n	8008fa2 <__lo0bits+0x22>
 8008faa:	b299      	uxth	r1, r3
 8008fac:	2900      	cmp	r1, #0
 8008fae:	d101      	bne.n	8008fb4 <__lo0bits+0x34>
 8008fb0:	2010      	movs	r0, #16
 8008fb2:	0c1b      	lsrs	r3, r3, #16
 8008fb4:	b2d9      	uxtb	r1, r3
 8008fb6:	2900      	cmp	r1, #0
 8008fb8:	d101      	bne.n	8008fbe <__lo0bits+0x3e>
 8008fba:	3008      	adds	r0, #8
 8008fbc:	0a1b      	lsrs	r3, r3, #8
 8008fbe:	0719      	lsls	r1, r3, #28
 8008fc0:	d101      	bne.n	8008fc6 <__lo0bits+0x46>
 8008fc2:	3004      	adds	r0, #4
 8008fc4:	091b      	lsrs	r3, r3, #4
 8008fc6:	0799      	lsls	r1, r3, #30
 8008fc8:	d101      	bne.n	8008fce <__lo0bits+0x4e>
 8008fca:	3002      	adds	r0, #2
 8008fcc:	089b      	lsrs	r3, r3, #2
 8008fce:	07d9      	lsls	r1, r3, #31
 8008fd0:	d4e9      	bmi.n	8008fa6 <__lo0bits+0x26>
 8008fd2:	3001      	adds	r0, #1
 8008fd4:	085b      	lsrs	r3, r3, #1
 8008fd6:	d1e6      	bne.n	8008fa6 <__lo0bits+0x26>
 8008fd8:	2020      	movs	r0, #32
 8008fda:	e7e2      	b.n	8008fa2 <__lo0bits+0x22>

08008fdc <__i2b>:
 8008fdc:	b510      	push	{r4, lr}
 8008fde:	000c      	movs	r4, r1
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	f7ff febb 	bl	8008d5c <_Balloc>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d106      	bne.n	8008ff8 <__i2b+0x1c>
 8008fea:	21a0      	movs	r1, #160	; 0xa0
 8008fec:	0002      	movs	r2, r0
 8008fee:	4b04      	ldr	r3, [pc, #16]	; (8009000 <__i2b+0x24>)
 8008ff0:	4804      	ldr	r0, [pc, #16]	; (8009004 <__i2b+0x28>)
 8008ff2:	0049      	lsls	r1, r1, #1
 8008ff4:	f000 fe24 	bl	8009c40 <__assert_func>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	6144      	str	r4, [r0, #20]
 8008ffc:	6103      	str	r3, [r0, #16]
 8008ffe:	bd10      	pop	{r4, pc}
 8009000:	0800ab88 	.word	0x0800ab88
 8009004:	0800ac14 	.word	0x0800ac14

08009008 <__multiply>:
 8009008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800900a:	690b      	ldr	r3, [r1, #16]
 800900c:	0014      	movs	r4, r2
 800900e:	6912      	ldr	r2, [r2, #16]
 8009010:	000d      	movs	r5, r1
 8009012:	b089      	sub	sp, #36	; 0x24
 8009014:	4293      	cmp	r3, r2
 8009016:	da01      	bge.n	800901c <__multiply+0x14>
 8009018:	0025      	movs	r5, r4
 800901a:	000c      	movs	r4, r1
 800901c:	692f      	ldr	r7, [r5, #16]
 800901e:	6926      	ldr	r6, [r4, #16]
 8009020:	6869      	ldr	r1, [r5, #4]
 8009022:	19bb      	adds	r3, r7, r6
 8009024:	9302      	str	r3, [sp, #8]
 8009026:	68ab      	ldr	r3, [r5, #8]
 8009028:	19ba      	adds	r2, r7, r6
 800902a:	4293      	cmp	r3, r2
 800902c:	da00      	bge.n	8009030 <__multiply+0x28>
 800902e:	3101      	adds	r1, #1
 8009030:	f7ff fe94 	bl	8008d5c <_Balloc>
 8009034:	9001      	str	r0, [sp, #4]
 8009036:	2800      	cmp	r0, #0
 8009038:	d106      	bne.n	8009048 <__multiply+0x40>
 800903a:	215e      	movs	r1, #94	; 0x5e
 800903c:	0002      	movs	r2, r0
 800903e:	4b48      	ldr	r3, [pc, #288]	; (8009160 <__multiply+0x158>)
 8009040:	4848      	ldr	r0, [pc, #288]	; (8009164 <__multiply+0x15c>)
 8009042:	31ff      	adds	r1, #255	; 0xff
 8009044:	f000 fdfc 	bl	8009c40 <__assert_func>
 8009048:	9b01      	ldr	r3, [sp, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	3314      	adds	r3, #20
 800904e:	469c      	mov	ip, r3
 8009050:	19bb      	adds	r3, r7, r6
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4463      	add	r3, ip
 8009056:	9303      	str	r3, [sp, #12]
 8009058:	4663      	mov	r3, ip
 800905a:	9903      	ldr	r1, [sp, #12]
 800905c:	428b      	cmp	r3, r1
 800905e:	d32c      	bcc.n	80090ba <__multiply+0xb2>
 8009060:	002b      	movs	r3, r5
 8009062:	0022      	movs	r2, r4
 8009064:	3314      	adds	r3, #20
 8009066:	00bf      	lsls	r7, r7, #2
 8009068:	3214      	adds	r2, #20
 800906a:	9306      	str	r3, [sp, #24]
 800906c:	00b6      	lsls	r6, r6, #2
 800906e:	19db      	adds	r3, r3, r7
 8009070:	9304      	str	r3, [sp, #16]
 8009072:	1993      	adds	r3, r2, r6
 8009074:	9307      	str	r3, [sp, #28]
 8009076:	2304      	movs	r3, #4
 8009078:	9305      	str	r3, [sp, #20]
 800907a:	002b      	movs	r3, r5
 800907c:	9904      	ldr	r1, [sp, #16]
 800907e:	3315      	adds	r3, #21
 8009080:	9200      	str	r2, [sp, #0]
 8009082:	4299      	cmp	r1, r3
 8009084:	d305      	bcc.n	8009092 <__multiply+0x8a>
 8009086:	1b4b      	subs	r3, r1, r5
 8009088:	3b15      	subs	r3, #21
 800908a:	089b      	lsrs	r3, r3, #2
 800908c:	3301      	adds	r3, #1
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	9305      	str	r3, [sp, #20]
 8009092:	9b07      	ldr	r3, [sp, #28]
 8009094:	9a00      	ldr	r2, [sp, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d311      	bcc.n	80090be <__multiply+0xb6>
 800909a:	9b02      	ldr	r3, [sp, #8]
 800909c:	2b00      	cmp	r3, #0
 800909e:	dd06      	ble.n	80090ae <__multiply+0xa6>
 80090a0:	9b03      	ldr	r3, [sp, #12]
 80090a2:	3b04      	subs	r3, #4
 80090a4:	9303      	str	r3, [sp, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d053      	beq.n	8009156 <__multiply+0x14e>
 80090ae:	9b01      	ldr	r3, [sp, #4]
 80090b0:	9a02      	ldr	r2, [sp, #8]
 80090b2:	0018      	movs	r0, r3
 80090b4:	611a      	str	r2, [r3, #16]
 80090b6:	b009      	add	sp, #36	; 0x24
 80090b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ba:	c304      	stmia	r3!, {r2}
 80090bc:	e7cd      	b.n	800905a <__multiply+0x52>
 80090be:	9b00      	ldr	r3, [sp, #0]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	b298      	uxth	r0, r3
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d01b      	beq.n	8009100 <__multiply+0xf8>
 80090c8:	4667      	mov	r7, ip
 80090ca:	2400      	movs	r4, #0
 80090cc:	9e06      	ldr	r6, [sp, #24]
 80090ce:	ce02      	ldmia	r6!, {r1}
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	b28b      	uxth	r3, r1
 80090d4:	4343      	muls	r3, r0
 80090d6:	b292      	uxth	r2, r2
 80090d8:	189b      	adds	r3, r3, r2
 80090da:	191b      	adds	r3, r3, r4
 80090dc:	0c0c      	lsrs	r4, r1, #16
 80090de:	4344      	muls	r4, r0
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	0c11      	lsrs	r1, r2, #16
 80090e4:	1861      	adds	r1, r4, r1
 80090e6:	0c1c      	lsrs	r4, r3, #16
 80090e8:	1909      	adds	r1, r1, r4
 80090ea:	0c0c      	lsrs	r4, r1, #16
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	0409      	lsls	r1, r1, #16
 80090f0:	430b      	orrs	r3, r1
 80090f2:	c708      	stmia	r7!, {r3}
 80090f4:	9b04      	ldr	r3, [sp, #16]
 80090f6:	42b3      	cmp	r3, r6
 80090f8:	d8e9      	bhi.n	80090ce <__multiply+0xc6>
 80090fa:	4663      	mov	r3, ip
 80090fc:	9a05      	ldr	r2, [sp, #20]
 80090fe:	509c      	str	r4, [r3, r2]
 8009100:	9b00      	ldr	r3, [sp, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	0c1e      	lsrs	r6, r3, #16
 8009106:	d020      	beq.n	800914a <__multiply+0x142>
 8009108:	4663      	mov	r3, ip
 800910a:	002c      	movs	r4, r5
 800910c:	4660      	mov	r0, ip
 800910e:	2700      	movs	r7, #0
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	3414      	adds	r4, #20
 8009114:	6822      	ldr	r2, [r4, #0]
 8009116:	b29b      	uxth	r3, r3
 8009118:	b291      	uxth	r1, r2
 800911a:	4371      	muls	r1, r6
 800911c:	6802      	ldr	r2, [r0, #0]
 800911e:	0c12      	lsrs	r2, r2, #16
 8009120:	1889      	adds	r1, r1, r2
 8009122:	19cf      	adds	r7, r1, r7
 8009124:	0439      	lsls	r1, r7, #16
 8009126:	430b      	orrs	r3, r1
 8009128:	6003      	str	r3, [r0, #0]
 800912a:	cc02      	ldmia	r4!, {r1}
 800912c:	6843      	ldr	r3, [r0, #4]
 800912e:	0c09      	lsrs	r1, r1, #16
 8009130:	4371      	muls	r1, r6
 8009132:	b29b      	uxth	r3, r3
 8009134:	0c3f      	lsrs	r7, r7, #16
 8009136:	18cb      	adds	r3, r1, r3
 8009138:	9a04      	ldr	r2, [sp, #16]
 800913a:	19db      	adds	r3, r3, r7
 800913c:	0c1f      	lsrs	r7, r3, #16
 800913e:	3004      	adds	r0, #4
 8009140:	42a2      	cmp	r2, r4
 8009142:	d8e7      	bhi.n	8009114 <__multiply+0x10c>
 8009144:	4662      	mov	r2, ip
 8009146:	9905      	ldr	r1, [sp, #20]
 8009148:	5053      	str	r3, [r2, r1]
 800914a:	9b00      	ldr	r3, [sp, #0]
 800914c:	3304      	adds	r3, #4
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	2304      	movs	r3, #4
 8009152:	449c      	add	ip, r3
 8009154:	e79d      	b.n	8009092 <__multiply+0x8a>
 8009156:	9b02      	ldr	r3, [sp, #8]
 8009158:	3b01      	subs	r3, #1
 800915a:	9302      	str	r3, [sp, #8]
 800915c:	e79d      	b.n	800909a <__multiply+0x92>
 800915e:	46c0      	nop			; (mov r8, r8)
 8009160:	0800ab88 	.word	0x0800ab88
 8009164:	0800ac14 	.word	0x0800ac14

08009168 <__pow5mult>:
 8009168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800916a:	2303      	movs	r3, #3
 800916c:	0015      	movs	r5, r2
 800916e:	0007      	movs	r7, r0
 8009170:	000e      	movs	r6, r1
 8009172:	401a      	ands	r2, r3
 8009174:	421d      	tst	r5, r3
 8009176:	d008      	beq.n	800918a <__pow5mult+0x22>
 8009178:	4925      	ldr	r1, [pc, #148]	; (8009210 <__pow5mult+0xa8>)
 800917a:	3a01      	subs	r2, #1
 800917c:	0092      	lsls	r2, r2, #2
 800917e:	5852      	ldr	r2, [r2, r1]
 8009180:	2300      	movs	r3, #0
 8009182:	0031      	movs	r1, r6
 8009184:	f7ff fe52 	bl	8008e2c <__multadd>
 8009188:	0006      	movs	r6, r0
 800918a:	10ad      	asrs	r5, r5, #2
 800918c:	d03d      	beq.n	800920a <__pow5mult+0xa2>
 800918e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009190:	2c00      	cmp	r4, #0
 8009192:	d10f      	bne.n	80091b4 <__pow5mult+0x4c>
 8009194:	2010      	movs	r0, #16
 8009196:	f7ff fdb1 	bl	8008cfc <malloc>
 800919a:	1e02      	subs	r2, r0, #0
 800919c:	6278      	str	r0, [r7, #36]	; 0x24
 800919e:	d105      	bne.n	80091ac <__pow5mult+0x44>
 80091a0:	21d7      	movs	r1, #215	; 0xd7
 80091a2:	4b1c      	ldr	r3, [pc, #112]	; (8009214 <__pow5mult+0xac>)
 80091a4:	481c      	ldr	r0, [pc, #112]	; (8009218 <__pow5mult+0xb0>)
 80091a6:	0049      	lsls	r1, r1, #1
 80091a8:	f000 fd4a 	bl	8009c40 <__assert_func>
 80091ac:	6044      	str	r4, [r0, #4]
 80091ae:	6084      	str	r4, [r0, #8]
 80091b0:	6004      	str	r4, [r0, #0]
 80091b2:	60c4      	str	r4, [r0, #12]
 80091b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b6:	689c      	ldr	r4, [r3, #8]
 80091b8:	9301      	str	r3, [sp, #4]
 80091ba:	2c00      	cmp	r4, #0
 80091bc:	d108      	bne.n	80091d0 <__pow5mult+0x68>
 80091be:	0038      	movs	r0, r7
 80091c0:	4916      	ldr	r1, [pc, #88]	; (800921c <__pow5mult+0xb4>)
 80091c2:	f7ff ff0b 	bl	8008fdc <__i2b>
 80091c6:	9b01      	ldr	r3, [sp, #4]
 80091c8:	0004      	movs	r4, r0
 80091ca:	6098      	str	r0, [r3, #8]
 80091cc:	2300      	movs	r3, #0
 80091ce:	6003      	str	r3, [r0, #0]
 80091d0:	2301      	movs	r3, #1
 80091d2:	421d      	tst	r5, r3
 80091d4:	d00a      	beq.n	80091ec <__pow5mult+0x84>
 80091d6:	0031      	movs	r1, r6
 80091d8:	0022      	movs	r2, r4
 80091da:	0038      	movs	r0, r7
 80091dc:	f7ff ff14 	bl	8009008 <__multiply>
 80091e0:	0031      	movs	r1, r6
 80091e2:	9001      	str	r0, [sp, #4]
 80091e4:	0038      	movs	r0, r7
 80091e6:	f7ff fdfd 	bl	8008de4 <_Bfree>
 80091ea:	9e01      	ldr	r6, [sp, #4]
 80091ec:	106d      	asrs	r5, r5, #1
 80091ee:	d00c      	beq.n	800920a <__pow5mult+0xa2>
 80091f0:	6820      	ldr	r0, [r4, #0]
 80091f2:	2800      	cmp	r0, #0
 80091f4:	d107      	bne.n	8009206 <__pow5mult+0x9e>
 80091f6:	0022      	movs	r2, r4
 80091f8:	0021      	movs	r1, r4
 80091fa:	0038      	movs	r0, r7
 80091fc:	f7ff ff04 	bl	8009008 <__multiply>
 8009200:	2300      	movs	r3, #0
 8009202:	6020      	str	r0, [r4, #0]
 8009204:	6003      	str	r3, [r0, #0]
 8009206:	0004      	movs	r4, r0
 8009208:	e7e2      	b.n	80091d0 <__pow5mult+0x68>
 800920a:	0030      	movs	r0, r6
 800920c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800920e:	46c0      	nop			; (mov r8, r8)
 8009210:	0800ad60 	.word	0x0800ad60
 8009214:	0800ab16 	.word	0x0800ab16
 8009218:	0800ac14 	.word	0x0800ac14
 800921c:	00000271 	.word	0x00000271

08009220 <__lshift>:
 8009220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009222:	000c      	movs	r4, r1
 8009224:	0017      	movs	r7, r2
 8009226:	6923      	ldr	r3, [r4, #16]
 8009228:	1155      	asrs	r5, r2, #5
 800922a:	b087      	sub	sp, #28
 800922c:	18eb      	adds	r3, r5, r3
 800922e:	9302      	str	r3, [sp, #8]
 8009230:	3301      	adds	r3, #1
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	6849      	ldr	r1, [r1, #4]
 8009236:	68a3      	ldr	r3, [r4, #8]
 8009238:	9004      	str	r0, [sp, #16]
 800923a:	9a01      	ldr	r2, [sp, #4]
 800923c:	4293      	cmp	r3, r2
 800923e:	db10      	blt.n	8009262 <__lshift+0x42>
 8009240:	9804      	ldr	r0, [sp, #16]
 8009242:	f7ff fd8b 	bl	8008d5c <_Balloc>
 8009246:	2300      	movs	r3, #0
 8009248:	0002      	movs	r2, r0
 800924a:	0006      	movs	r6, r0
 800924c:	0019      	movs	r1, r3
 800924e:	3214      	adds	r2, #20
 8009250:	4298      	cmp	r0, r3
 8009252:	d10c      	bne.n	800926e <__lshift+0x4e>
 8009254:	21da      	movs	r1, #218	; 0xda
 8009256:	0002      	movs	r2, r0
 8009258:	4b26      	ldr	r3, [pc, #152]	; (80092f4 <__lshift+0xd4>)
 800925a:	4827      	ldr	r0, [pc, #156]	; (80092f8 <__lshift+0xd8>)
 800925c:	31ff      	adds	r1, #255	; 0xff
 800925e:	f000 fcef 	bl	8009c40 <__assert_func>
 8009262:	3101      	adds	r1, #1
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	e7e8      	b.n	800923a <__lshift+0x1a>
 8009268:	0098      	lsls	r0, r3, #2
 800926a:	5011      	str	r1, [r2, r0]
 800926c:	3301      	adds	r3, #1
 800926e:	42ab      	cmp	r3, r5
 8009270:	dbfa      	blt.n	8009268 <__lshift+0x48>
 8009272:	43eb      	mvns	r3, r5
 8009274:	17db      	asrs	r3, r3, #31
 8009276:	401d      	ands	r5, r3
 8009278:	211f      	movs	r1, #31
 800927a:	0023      	movs	r3, r4
 800927c:	0038      	movs	r0, r7
 800927e:	00ad      	lsls	r5, r5, #2
 8009280:	1955      	adds	r5, r2, r5
 8009282:	6922      	ldr	r2, [r4, #16]
 8009284:	3314      	adds	r3, #20
 8009286:	0092      	lsls	r2, r2, #2
 8009288:	4008      	ands	r0, r1
 800928a:	4684      	mov	ip, r0
 800928c:	189a      	adds	r2, r3, r2
 800928e:	420f      	tst	r7, r1
 8009290:	d02a      	beq.n	80092e8 <__lshift+0xc8>
 8009292:	3101      	adds	r1, #1
 8009294:	1a09      	subs	r1, r1, r0
 8009296:	9105      	str	r1, [sp, #20]
 8009298:	2100      	movs	r1, #0
 800929a:	9503      	str	r5, [sp, #12]
 800929c:	4667      	mov	r7, ip
 800929e:	6818      	ldr	r0, [r3, #0]
 80092a0:	40b8      	lsls	r0, r7
 80092a2:	4301      	orrs	r1, r0
 80092a4:	9803      	ldr	r0, [sp, #12]
 80092a6:	c002      	stmia	r0!, {r1}
 80092a8:	cb02      	ldmia	r3!, {r1}
 80092aa:	9003      	str	r0, [sp, #12]
 80092ac:	9805      	ldr	r0, [sp, #20]
 80092ae:	40c1      	lsrs	r1, r0
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d8f3      	bhi.n	800929c <__lshift+0x7c>
 80092b4:	0020      	movs	r0, r4
 80092b6:	3015      	adds	r0, #21
 80092b8:	2304      	movs	r3, #4
 80092ba:	4282      	cmp	r2, r0
 80092bc:	d304      	bcc.n	80092c8 <__lshift+0xa8>
 80092be:	1b13      	subs	r3, r2, r4
 80092c0:	3b15      	subs	r3, #21
 80092c2:	089b      	lsrs	r3, r3, #2
 80092c4:	3301      	adds	r3, #1
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	50e9      	str	r1, [r5, r3]
 80092ca:	2900      	cmp	r1, #0
 80092cc:	d002      	beq.n	80092d4 <__lshift+0xb4>
 80092ce:	9b02      	ldr	r3, [sp, #8]
 80092d0:	3302      	adds	r3, #2
 80092d2:	9301      	str	r3, [sp, #4]
 80092d4:	9b01      	ldr	r3, [sp, #4]
 80092d6:	9804      	ldr	r0, [sp, #16]
 80092d8:	3b01      	subs	r3, #1
 80092da:	0021      	movs	r1, r4
 80092dc:	6133      	str	r3, [r6, #16]
 80092de:	f7ff fd81 	bl	8008de4 <_Bfree>
 80092e2:	0030      	movs	r0, r6
 80092e4:	b007      	add	sp, #28
 80092e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092e8:	cb02      	ldmia	r3!, {r1}
 80092ea:	c502      	stmia	r5!, {r1}
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d8fb      	bhi.n	80092e8 <__lshift+0xc8>
 80092f0:	e7f0      	b.n	80092d4 <__lshift+0xb4>
 80092f2:	46c0      	nop			; (mov r8, r8)
 80092f4:	0800ab88 	.word	0x0800ab88
 80092f8:	0800ac14 	.word	0x0800ac14

080092fc <__mcmp>:
 80092fc:	6902      	ldr	r2, [r0, #16]
 80092fe:	690b      	ldr	r3, [r1, #16]
 8009300:	b530      	push	{r4, r5, lr}
 8009302:	0004      	movs	r4, r0
 8009304:	1ad0      	subs	r0, r2, r3
 8009306:	429a      	cmp	r2, r3
 8009308:	d10d      	bne.n	8009326 <__mcmp+0x2a>
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	3414      	adds	r4, #20
 800930e:	3114      	adds	r1, #20
 8009310:	18e2      	adds	r2, r4, r3
 8009312:	18c9      	adds	r1, r1, r3
 8009314:	3a04      	subs	r2, #4
 8009316:	3904      	subs	r1, #4
 8009318:	6815      	ldr	r5, [r2, #0]
 800931a:	680b      	ldr	r3, [r1, #0]
 800931c:	429d      	cmp	r5, r3
 800931e:	d003      	beq.n	8009328 <__mcmp+0x2c>
 8009320:	2001      	movs	r0, #1
 8009322:	429d      	cmp	r5, r3
 8009324:	d303      	bcc.n	800932e <__mcmp+0x32>
 8009326:	bd30      	pop	{r4, r5, pc}
 8009328:	4294      	cmp	r4, r2
 800932a:	d3f3      	bcc.n	8009314 <__mcmp+0x18>
 800932c:	e7fb      	b.n	8009326 <__mcmp+0x2a>
 800932e:	4240      	negs	r0, r0
 8009330:	e7f9      	b.n	8009326 <__mcmp+0x2a>
	...

08009334 <__mdiff>:
 8009334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009336:	000e      	movs	r6, r1
 8009338:	0007      	movs	r7, r0
 800933a:	0011      	movs	r1, r2
 800933c:	0030      	movs	r0, r6
 800933e:	b087      	sub	sp, #28
 8009340:	0014      	movs	r4, r2
 8009342:	f7ff ffdb 	bl	80092fc <__mcmp>
 8009346:	1e05      	subs	r5, r0, #0
 8009348:	d110      	bne.n	800936c <__mdiff+0x38>
 800934a:	0001      	movs	r1, r0
 800934c:	0038      	movs	r0, r7
 800934e:	f7ff fd05 	bl	8008d5c <_Balloc>
 8009352:	1e02      	subs	r2, r0, #0
 8009354:	d104      	bne.n	8009360 <__mdiff+0x2c>
 8009356:	4b40      	ldr	r3, [pc, #256]	; (8009458 <__mdiff+0x124>)
 8009358:	4940      	ldr	r1, [pc, #256]	; (800945c <__mdiff+0x128>)
 800935a:	4841      	ldr	r0, [pc, #260]	; (8009460 <__mdiff+0x12c>)
 800935c:	f000 fc70 	bl	8009c40 <__assert_func>
 8009360:	2301      	movs	r3, #1
 8009362:	6145      	str	r5, [r0, #20]
 8009364:	6103      	str	r3, [r0, #16]
 8009366:	0010      	movs	r0, r2
 8009368:	b007      	add	sp, #28
 800936a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800936c:	2301      	movs	r3, #1
 800936e:	9301      	str	r3, [sp, #4]
 8009370:	2800      	cmp	r0, #0
 8009372:	db04      	blt.n	800937e <__mdiff+0x4a>
 8009374:	0023      	movs	r3, r4
 8009376:	0034      	movs	r4, r6
 8009378:	001e      	movs	r6, r3
 800937a:	2300      	movs	r3, #0
 800937c:	9301      	str	r3, [sp, #4]
 800937e:	0038      	movs	r0, r7
 8009380:	6861      	ldr	r1, [r4, #4]
 8009382:	f7ff fceb 	bl	8008d5c <_Balloc>
 8009386:	1e02      	subs	r2, r0, #0
 8009388:	d103      	bne.n	8009392 <__mdiff+0x5e>
 800938a:	2190      	movs	r1, #144	; 0x90
 800938c:	4b32      	ldr	r3, [pc, #200]	; (8009458 <__mdiff+0x124>)
 800938e:	0089      	lsls	r1, r1, #2
 8009390:	e7e3      	b.n	800935a <__mdiff+0x26>
 8009392:	9b01      	ldr	r3, [sp, #4]
 8009394:	2700      	movs	r7, #0
 8009396:	60c3      	str	r3, [r0, #12]
 8009398:	6920      	ldr	r0, [r4, #16]
 800939a:	3414      	adds	r4, #20
 800939c:	9401      	str	r4, [sp, #4]
 800939e:	9b01      	ldr	r3, [sp, #4]
 80093a0:	0084      	lsls	r4, r0, #2
 80093a2:	191b      	adds	r3, r3, r4
 80093a4:	0034      	movs	r4, r6
 80093a6:	9302      	str	r3, [sp, #8]
 80093a8:	6933      	ldr	r3, [r6, #16]
 80093aa:	3414      	adds	r4, #20
 80093ac:	0099      	lsls	r1, r3, #2
 80093ae:	1863      	adds	r3, r4, r1
 80093b0:	9303      	str	r3, [sp, #12]
 80093b2:	0013      	movs	r3, r2
 80093b4:	3314      	adds	r3, #20
 80093b6:	469c      	mov	ip, r3
 80093b8:	9305      	str	r3, [sp, #20]
 80093ba:	9b01      	ldr	r3, [sp, #4]
 80093bc:	9304      	str	r3, [sp, #16]
 80093be:	9b04      	ldr	r3, [sp, #16]
 80093c0:	cc02      	ldmia	r4!, {r1}
 80093c2:	cb20      	ldmia	r3!, {r5}
 80093c4:	9304      	str	r3, [sp, #16]
 80093c6:	b2ab      	uxth	r3, r5
 80093c8:	19df      	adds	r7, r3, r7
 80093ca:	b28b      	uxth	r3, r1
 80093cc:	1afb      	subs	r3, r7, r3
 80093ce:	0c09      	lsrs	r1, r1, #16
 80093d0:	0c2d      	lsrs	r5, r5, #16
 80093d2:	1a6d      	subs	r5, r5, r1
 80093d4:	1419      	asrs	r1, r3, #16
 80093d6:	186d      	adds	r5, r5, r1
 80093d8:	4661      	mov	r1, ip
 80093da:	142f      	asrs	r7, r5, #16
 80093dc:	b29b      	uxth	r3, r3
 80093de:	042d      	lsls	r5, r5, #16
 80093e0:	432b      	orrs	r3, r5
 80093e2:	c108      	stmia	r1!, {r3}
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	468c      	mov	ip, r1
 80093e8:	42a3      	cmp	r3, r4
 80093ea:	d8e8      	bhi.n	80093be <__mdiff+0x8a>
 80093ec:	0031      	movs	r1, r6
 80093ee:	9c03      	ldr	r4, [sp, #12]
 80093f0:	3115      	adds	r1, #21
 80093f2:	2304      	movs	r3, #4
 80093f4:	428c      	cmp	r4, r1
 80093f6:	d304      	bcc.n	8009402 <__mdiff+0xce>
 80093f8:	1ba3      	subs	r3, r4, r6
 80093fa:	3b15      	subs	r3, #21
 80093fc:	089b      	lsrs	r3, r3, #2
 80093fe:	3301      	adds	r3, #1
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	9901      	ldr	r1, [sp, #4]
 8009404:	18cc      	adds	r4, r1, r3
 8009406:	9905      	ldr	r1, [sp, #20]
 8009408:	0026      	movs	r6, r4
 800940a:	18cb      	adds	r3, r1, r3
 800940c:	469c      	mov	ip, r3
 800940e:	9902      	ldr	r1, [sp, #8]
 8009410:	428e      	cmp	r6, r1
 8009412:	d310      	bcc.n	8009436 <__mdiff+0x102>
 8009414:	9e02      	ldr	r6, [sp, #8]
 8009416:	1ee1      	subs	r1, r4, #3
 8009418:	2500      	movs	r5, #0
 800941a:	428e      	cmp	r6, r1
 800941c:	d304      	bcc.n	8009428 <__mdiff+0xf4>
 800941e:	0031      	movs	r1, r6
 8009420:	3103      	adds	r1, #3
 8009422:	1b0c      	subs	r4, r1, r4
 8009424:	08a4      	lsrs	r4, r4, #2
 8009426:	00a5      	lsls	r5, r4, #2
 8009428:	195b      	adds	r3, r3, r5
 800942a:	3b04      	subs	r3, #4
 800942c:	6819      	ldr	r1, [r3, #0]
 800942e:	2900      	cmp	r1, #0
 8009430:	d00f      	beq.n	8009452 <__mdiff+0x11e>
 8009432:	6110      	str	r0, [r2, #16]
 8009434:	e797      	b.n	8009366 <__mdiff+0x32>
 8009436:	ce02      	ldmia	r6!, {r1}
 8009438:	b28d      	uxth	r5, r1
 800943a:	19ed      	adds	r5, r5, r7
 800943c:	0c0f      	lsrs	r7, r1, #16
 800943e:	1429      	asrs	r1, r5, #16
 8009440:	1879      	adds	r1, r7, r1
 8009442:	140f      	asrs	r7, r1, #16
 8009444:	b2ad      	uxth	r5, r5
 8009446:	0409      	lsls	r1, r1, #16
 8009448:	430d      	orrs	r5, r1
 800944a:	4661      	mov	r1, ip
 800944c:	c120      	stmia	r1!, {r5}
 800944e:	468c      	mov	ip, r1
 8009450:	e7dd      	b.n	800940e <__mdiff+0xda>
 8009452:	3801      	subs	r0, #1
 8009454:	e7e9      	b.n	800942a <__mdiff+0xf6>
 8009456:	46c0      	nop			; (mov r8, r8)
 8009458:	0800ab88 	.word	0x0800ab88
 800945c:	00000232 	.word	0x00000232
 8009460:	0800ac14 	.word	0x0800ac14

08009464 <__ulp>:
 8009464:	4b0f      	ldr	r3, [pc, #60]	; (80094a4 <__ulp+0x40>)
 8009466:	4019      	ands	r1, r3
 8009468:	4b0f      	ldr	r3, [pc, #60]	; (80094a8 <__ulp+0x44>)
 800946a:	18c9      	adds	r1, r1, r3
 800946c:	2900      	cmp	r1, #0
 800946e:	dd04      	ble.n	800947a <__ulp+0x16>
 8009470:	2200      	movs	r2, #0
 8009472:	000b      	movs	r3, r1
 8009474:	0010      	movs	r0, r2
 8009476:	0019      	movs	r1, r3
 8009478:	4770      	bx	lr
 800947a:	4249      	negs	r1, r1
 800947c:	2200      	movs	r2, #0
 800947e:	2300      	movs	r3, #0
 8009480:	1509      	asrs	r1, r1, #20
 8009482:	2913      	cmp	r1, #19
 8009484:	dc04      	bgt.n	8009490 <__ulp+0x2c>
 8009486:	2080      	movs	r0, #128	; 0x80
 8009488:	0300      	lsls	r0, r0, #12
 800948a:	4108      	asrs	r0, r1
 800948c:	0003      	movs	r3, r0
 800948e:	e7f1      	b.n	8009474 <__ulp+0x10>
 8009490:	3914      	subs	r1, #20
 8009492:	2001      	movs	r0, #1
 8009494:	291e      	cmp	r1, #30
 8009496:	dc02      	bgt.n	800949e <__ulp+0x3a>
 8009498:	2080      	movs	r0, #128	; 0x80
 800949a:	0600      	lsls	r0, r0, #24
 800949c:	40c8      	lsrs	r0, r1
 800949e:	0002      	movs	r2, r0
 80094a0:	e7e8      	b.n	8009474 <__ulp+0x10>
 80094a2:	46c0      	nop			; (mov r8, r8)
 80094a4:	7ff00000 	.word	0x7ff00000
 80094a8:	fcc00000 	.word	0xfcc00000

080094ac <__b2d>:
 80094ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094ae:	0006      	movs	r6, r0
 80094b0:	6903      	ldr	r3, [r0, #16]
 80094b2:	3614      	adds	r6, #20
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	18f3      	adds	r3, r6, r3
 80094b8:	1f1d      	subs	r5, r3, #4
 80094ba:	682c      	ldr	r4, [r5, #0]
 80094bc:	000f      	movs	r7, r1
 80094be:	0020      	movs	r0, r4
 80094c0:	9301      	str	r3, [sp, #4]
 80094c2:	f7ff fd43 	bl	8008f4c <__hi0bits>
 80094c6:	2320      	movs	r3, #32
 80094c8:	1a1b      	subs	r3, r3, r0
 80094ca:	491f      	ldr	r1, [pc, #124]	; (8009548 <__b2d+0x9c>)
 80094cc:	603b      	str	r3, [r7, #0]
 80094ce:	280a      	cmp	r0, #10
 80094d0:	dc16      	bgt.n	8009500 <__b2d+0x54>
 80094d2:	230b      	movs	r3, #11
 80094d4:	0027      	movs	r7, r4
 80094d6:	1a1b      	subs	r3, r3, r0
 80094d8:	40df      	lsrs	r7, r3
 80094da:	4339      	orrs	r1, r7
 80094dc:	469c      	mov	ip, r3
 80094de:	000b      	movs	r3, r1
 80094e0:	2100      	movs	r1, #0
 80094e2:	42ae      	cmp	r6, r5
 80094e4:	d202      	bcs.n	80094ec <__b2d+0x40>
 80094e6:	9901      	ldr	r1, [sp, #4]
 80094e8:	3908      	subs	r1, #8
 80094ea:	6809      	ldr	r1, [r1, #0]
 80094ec:	3015      	adds	r0, #21
 80094ee:	4084      	lsls	r4, r0
 80094f0:	4660      	mov	r0, ip
 80094f2:	40c1      	lsrs	r1, r0
 80094f4:	430c      	orrs	r4, r1
 80094f6:	0022      	movs	r2, r4
 80094f8:	0010      	movs	r0, r2
 80094fa:	0019      	movs	r1, r3
 80094fc:	b003      	add	sp, #12
 80094fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009500:	2700      	movs	r7, #0
 8009502:	42ae      	cmp	r6, r5
 8009504:	d202      	bcs.n	800950c <__b2d+0x60>
 8009506:	9d01      	ldr	r5, [sp, #4]
 8009508:	3d08      	subs	r5, #8
 800950a:	682f      	ldr	r7, [r5, #0]
 800950c:	230b      	movs	r3, #11
 800950e:	425b      	negs	r3, r3
 8009510:	469c      	mov	ip, r3
 8009512:	4484      	add	ip, r0
 8009514:	280b      	cmp	r0, #11
 8009516:	d013      	beq.n	8009540 <__b2d+0x94>
 8009518:	4663      	mov	r3, ip
 800951a:	2020      	movs	r0, #32
 800951c:	409c      	lsls	r4, r3
 800951e:	1ac0      	subs	r0, r0, r3
 8009520:	003b      	movs	r3, r7
 8009522:	40c3      	lsrs	r3, r0
 8009524:	431c      	orrs	r4, r3
 8009526:	4321      	orrs	r1, r4
 8009528:	000b      	movs	r3, r1
 800952a:	2100      	movs	r1, #0
 800952c:	42b5      	cmp	r5, r6
 800952e:	d901      	bls.n	8009534 <__b2d+0x88>
 8009530:	3d04      	subs	r5, #4
 8009532:	6829      	ldr	r1, [r5, #0]
 8009534:	4664      	mov	r4, ip
 8009536:	40c1      	lsrs	r1, r0
 8009538:	40a7      	lsls	r7, r4
 800953a:	430f      	orrs	r7, r1
 800953c:	003a      	movs	r2, r7
 800953e:	e7db      	b.n	80094f8 <__b2d+0x4c>
 8009540:	4321      	orrs	r1, r4
 8009542:	000b      	movs	r3, r1
 8009544:	e7fa      	b.n	800953c <__b2d+0x90>
 8009546:	46c0      	nop			; (mov r8, r8)
 8009548:	3ff00000 	.word	0x3ff00000

0800954c <__d2b>:
 800954c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800954e:	2101      	movs	r1, #1
 8009550:	0014      	movs	r4, r2
 8009552:	001e      	movs	r6, r3
 8009554:	9f08      	ldr	r7, [sp, #32]
 8009556:	f7ff fc01 	bl	8008d5c <_Balloc>
 800955a:	1e05      	subs	r5, r0, #0
 800955c:	d105      	bne.n	800956a <__d2b+0x1e>
 800955e:	0002      	movs	r2, r0
 8009560:	4b26      	ldr	r3, [pc, #152]	; (80095fc <__d2b+0xb0>)
 8009562:	4927      	ldr	r1, [pc, #156]	; (8009600 <__d2b+0xb4>)
 8009564:	4827      	ldr	r0, [pc, #156]	; (8009604 <__d2b+0xb8>)
 8009566:	f000 fb6b 	bl	8009c40 <__assert_func>
 800956a:	0333      	lsls	r3, r6, #12
 800956c:	0076      	lsls	r6, r6, #1
 800956e:	0b1b      	lsrs	r3, r3, #12
 8009570:	0d76      	lsrs	r6, r6, #21
 8009572:	d124      	bne.n	80095be <__d2b+0x72>
 8009574:	9301      	str	r3, [sp, #4]
 8009576:	2c00      	cmp	r4, #0
 8009578:	d027      	beq.n	80095ca <__d2b+0x7e>
 800957a:	4668      	mov	r0, sp
 800957c:	9400      	str	r4, [sp, #0]
 800957e:	f7ff fcff 	bl	8008f80 <__lo0bits>
 8009582:	9c00      	ldr	r4, [sp, #0]
 8009584:	2800      	cmp	r0, #0
 8009586:	d01e      	beq.n	80095c6 <__d2b+0x7a>
 8009588:	9b01      	ldr	r3, [sp, #4]
 800958a:	2120      	movs	r1, #32
 800958c:	001a      	movs	r2, r3
 800958e:	1a09      	subs	r1, r1, r0
 8009590:	408a      	lsls	r2, r1
 8009592:	40c3      	lsrs	r3, r0
 8009594:	4322      	orrs	r2, r4
 8009596:	616a      	str	r2, [r5, #20]
 8009598:	9301      	str	r3, [sp, #4]
 800959a:	9c01      	ldr	r4, [sp, #4]
 800959c:	61ac      	str	r4, [r5, #24]
 800959e:	1e63      	subs	r3, r4, #1
 80095a0:	419c      	sbcs	r4, r3
 80095a2:	3401      	adds	r4, #1
 80095a4:	612c      	str	r4, [r5, #16]
 80095a6:	2e00      	cmp	r6, #0
 80095a8:	d018      	beq.n	80095dc <__d2b+0x90>
 80095aa:	4b17      	ldr	r3, [pc, #92]	; (8009608 <__d2b+0xbc>)
 80095ac:	18f6      	adds	r6, r6, r3
 80095ae:	2335      	movs	r3, #53	; 0x35
 80095b0:	1836      	adds	r6, r6, r0
 80095b2:	1a18      	subs	r0, r3, r0
 80095b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b6:	603e      	str	r6, [r7, #0]
 80095b8:	6018      	str	r0, [r3, #0]
 80095ba:	0028      	movs	r0, r5
 80095bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095be:	2280      	movs	r2, #128	; 0x80
 80095c0:	0352      	lsls	r2, r2, #13
 80095c2:	4313      	orrs	r3, r2
 80095c4:	e7d6      	b.n	8009574 <__d2b+0x28>
 80095c6:	616c      	str	r4, [r5, #20]
 80095c8:	e7e7      	b.n	800959a <__d2b+0x4e>
 80095ca:	a801      	add	r0, sp, #4
 80095cc:	f7ff fcd8 	bl	8008f80 <__lo0bits>
 80095d0:	2401      	movs	r4, #1
 80095d2:	9b01      	ldr	r3, [sp, #4]
 80095d4:	612c      	str	r4, [r5, #16]
 80095d6:	616b      	str	r3, [r5, #20]
 80095d8:	3020      	adds	r0, #32
 80095da:	e7e4      	b.n	80095a6 <__d2b+0x5a>
 80095dc:	4b0b      	ldr	r3, [pc, #44]	; (800960c <__d2b+0xc0>)
 80095de:	18c0      	adds	r0, r0, r3
 80095e0:	4b0b      	ldr	r3, [pc, #44]	; (8009610 <__d2b+0xc4>)
 80095e2:	6038      	str	r0, [r7, #0]
 80095e4:	18e3      	adds	r3, r4, r3
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	18eb      	adds	r3, r5, r3
 80095ea:	6958      	ldr	r0, [r3, #20]
 80095ec:	f7ff fcae 	bl	8008f4c <__hi0bits>
 80095f0:	0164      	lsls	r4, r4, #5
 80095f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f4:	1a24      	subs	r4, r4, r0
 80095f6:	601c      	str	r4, [r3, #0]
 80095f8:	e7df      	b.n	80095ba <__d2b+0x6e>
 80095fa:	46c0      	nop			; (mov r8, r8)
 80095fc:	0800ab88 	.word	0x0800ab88
 8009600:	0000030a 	.word	0x0000030a
 8009604:	0800ac14 	.word	0x0800ac14
 8009608:	fffffbcd 	.word	0xfffffbcd
 800960c:	fffffbce 	.word	0xfffffbce
 8009610:	3fffffff 	.word	0x3fffffff

08009614 <__ratio>:
 8009614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009616:	b087      	sub	sp, #28
 8009618:	000f      	movs	r7, r1
 800961a:	a904      	add	r1, sp, #16
 800961c:	0006      	movs	r6, r0
 800961e:	f7ff ff45 	bl	80094ac <__b2d>
 8009622:	9000      	str	r0, [sp, #0]
 8009624:	9101      	str	r1, [sp, #4]
 8009626:	9c00      	ldr	r4, [sp, #0]
 8009628:	9d01      	ldr	r5, [sp, #4]
 800962a:	0038      	movs	r0, r7
 800962c:	a905      	add	r1, sp, #20
 800962e:	f7ff ff3d 	bl	80094ac <__b2d>
 8009632:	9002      	str	r0, [sp, #8]
 8009634:	9103      	str	r1, [sp, #12]
 8009636:	9a02      	ldr	r2, [sp, #8]
 8009638:	9b03      	ldr	r3, [sp, #12]
 800963a:	6931      	ldr	r1, [r6, #16]
 800963c:	6938      	ldr	r0, [r7, #16]
 800963e:	9e05      	ldr	r6, [sp, #20]
 8009640:	1a08      	subs	r0, r1, r0
 8009642:	9904      	ldr	r1, [sp, #16]
 8009644:	0140      	lsls	r0, r0, #5
 8009646:	1b89      	subs	r1, r1, r6
 8009648:	1841      	adds	r1, r0, r1
 800964a:	0508      	lsls	r0, r1, #20
 800964c:	2900      	cmp	r1, #0
 800964e:	dd07      	ble.n	8009660 <__ratio+0x4c>
 8009650:	9901      	ldr	r1, [sp, #4]
 8009652:	1845      	adds	r5, r0, r1
 8009654:	0020      	movs	r0, r4
 8009656:	0029      	movs	r1, r5
 8009658:	f7f7 fad2 	bl	8000c00 <__aeabi_ddiv>
 800965c:	b007      	add	sp, #28
 800965e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009660:	9903      	ldr	r1, [sp, #12]
 8009662:	1a0b      	subs	r3, r1, r0
 8009664:	e7f6      	b.n	8009654 <__ratio+0x40>

08009666 <__copybits>:
 8009666:	b570      	push	{r4, r5, r6, lr}
 8009668:	0014      	movs	r4, r2
 800966a:	0005      	movs	r5, r0
 800966c:	3901      	subs	r1, #1
 800966e:	6913      	ldr	r3, [r2, #16]
 8009670:	1149      	asrs	r1, r1, #5
 8009672:	3101      	adds	r1, #1
 8009674:	0089      	lsls	r1, r1, #2
 8009676:	3414      	adds	r4, #20
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	1841      	adds	r1, r0, r1
 800967c:	18e3      	adds	r3, r4, r3
 800967e:	42a3      	cmp	r3, r4
 8009680:	d80d      	bhi.n	800969e <__copybits+0x38>
 8009682:	0014      	movs	r4, r2
 8009684:	3411      	adds	r4, #17
 8009686:	2500      	movs	r5, #0
 8009688:	429c      	cmp	r4, r3
 800968a:	d803      	bhi.n	8009694 <__copybits+0x2e>
 800968c:	1a9b      	subs	r3, r3, r2
 800968e:	3b11      	subs	r3, #17
 8009690:	089b      	lsrs	r3, r3, #2
 8009692:	009d      	lsls	r5, r3, #2
 8009694:	2300      	movs	r3, #0
 8009696:	1940      	adds	r0, r0, r5
 8009698:	4281      	cmp	r1, r0
 800969a:	d803      	bhi.n	80096a4 <__copybits+0x3e>
 800969c:	bd70      	pop	{r4, r5, r6, pc}
 800969e:	cc40      	ldmia	r4!, {r6}
 80096a0:	c540      	stmia	r5!, {r6}
 80096a2:	e7ec      	b.n	800967e <__copybits+0x18>
 80096a4:	c008      	stmia	r0!, {r3}
 80096a6:	e7f7      	b.n	8009698 <__copybits+0x32>

080096a8 <__any_on>:
 80096a8:	0002      	movs	r2, r0
 80096aa:	6900      	ldr	r0, [r0, #16]
 80096ac:	b510      	push	{r4, lr}
 80096ae:	3214      	adds	r2, #20
 80096b0:	114b      	asrs	r3, r1, #5
 80096b2:	4298      	cmp	r0, r3
 80096b4:	db13      	blt.n	80096de <__any_on+0x36>
 80096b6:	dd0c      	ble.n	80096d2 <__any_on+0x2a>
 80096b8:	241f      	movs	r4, #31
 80096ba:	0008      	movs	r0, r1
 80096bc:	4020      	ands	r0, r4
 80096be:	4221      	tst	r1, r4
 80096c0:	d007      	beq.n	80096d2 <__any_on+0x2a>
 80096c2:	0099      	lsls	r1, r3, #2
 80096c4:	588c      	ldr	r4, [r1, r2]
 80096c6:	0021      	movs	r1, r4
 80096c8:	40c1      	lsrs	r1, r0
 80096ca:	4081      	lsls	r1, r0
 80096cc:	2001      	movs	r0, #1
 80096ce:	428c      	cmp	r4, r1
 80096d0:	d104      	bne.n	80096dc <__any_on+0x34>
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	18d3      	adds	r3, r2, r3
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d803      	bhi.n	80096e2 <__any_on+0x3a>
 80096da:	2000      	movs	r0, #0
 80096dc:	bd10      	pop	{r4, pc}
 80096de:	0003      	movs	r3, r0
 80096e0:	e7f7      	b.n	80096d2 <__any_on+0x2a>
 80096e2:	3b04      	subs	r3, #4
 80096e4:	6819      	ldr	r1, [r3, #0]
 80096e6:	2900      	cmp	r1, #0
 80096e8:	d0f5      	beq.n	80096d6 <__any_on+0x2e>
 80096ea:	2001      	movs	r0, #1
 80096ec:	e7f6      	b.n	80096dc <__any_on+0x34>

080096ee <_calloc_r>:
 80096ee:	b570      	push	{r4, r5, r6, lr}
 80096f0:	0c13      	lsrs	r3, r2, #16
 80096f2:	0c0d      	lsrs	r5, r1, #16
 80096f4:	d11e      	bne.n	8009734 <_calloc_r+0x46>
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10c      	bne.n	8009714 <_calloc_r+0x26>
 80096fa:	b289      	uxth	r1, r1
 80096fc:	b294      	uxth	r4, r2
 80096fe:	434c      	muls	r4, r1
 8009700:	0021      	movs	r1, r4
 8009702:	f000 f88d 	bl	8009820 <_malloc_r>
 8009706:	1e05      	subs	r5, r0, #0
 8009708:	d01b      	beq.n	8009742 <_calloc_r+0x54>
 800970a:	0022      	movs	r2, r4
 800970c:	2100      	movs	r1, #0
 800970e:	f7fc fb6f 	bl	8005df0 <memset>
 8009712:	e016      	b.n	8009742 <_calloc_r+0x54>
 8009714:	1c1d      	adds	r5, r3, #0
 8009716:	1c0b      	adds	r3, r1, #0
 8009718:	b292      	uxth	r2, r2
 800971a:	b289      	uxth	r1, r1
 800971c:	b29c      	uxth	r4, r3
 800971e:	4351      	muls	r1, r2
 8009720:	b2ab      	uxth	r3, r5
 8009722:	4363      	muls	r3, r4
 8009724:	0c0c      	lsrs	r4, r1, #16
 8009726:	191c      	adds	r4, r3, r4
 8009728:	0c22      	lsrs	r2, r4, #16
 800972a:	d107      	bne.n	800973c <_calloc_r+0x4e>
 800972c:	0424      	lsls	r4, r4, #16
 800972e:	b289      	uxth	r1, r1
 8009730:	430c      	orrs	r4, r1
 8009732:	e7e5      	b.n	8009700 <_calloc_r+0x12>
 8009734:	2b00      	cmp	r3, #0
 8009736:	d101      	bne.n	800973c <_calloc_r+0x4e>
 8009738:	1c13      	adds	r3, r2, #0
 800973a:	e7ed      	b.n	8009718 <_calloc_r+0x2a>
 800973c:	230c      	movs	r3, #12
 800973e:	2500      	movs	r5, #0
 8009740:	6003      	str	r3, [r0, #0]
 8009742:	0028      	movs	r0, r5
 8009744:	bd70      	pop	{r4, r5, r6, pc}
	...

08009748 <_free_r>:
 8009748:	b570      	push	{r4, r5, r6, lr}
 800974a:	0005      	movs	r5, r0
 800974c:	2900      	cmp	r1, #0
 800974e:	d010      	beq.n	8009772 <_free_r+0x2a>
 8009750:	1f0c      	subs	r4, r1, #4
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	da00      	bge.n	800975a <_free_r+0x12>
 8009758:	18e4      	adds	r4, r4, r3
 800975a:	0028      	movs	r0, r5
 800975c:	f000 fab2 	bl	8009cc4 <__malloc_lock>
 8009760:	4a1d      	ldr	r2, [pc, #116]	; (80097d8 <_free_r+0x90>)
 8009762:	6813      	ldr	r3, [r2, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d105      	bne.n	8009774 <_free_r+0x2c>
 8009768:	6063      	str	r3, [r4, #4]
 800976a:	6014      	str	r4, [r2, #0]
 800976c:	0028      	movs	r0, r5
 800976e:	f000 fab1 	bl	8009cd4 <__malloc_unlock>
 8009772:	bd70      	pop	{r4, r5, r6, pc}
 8009774:	42a3      	cmp	r3, r4
 8009776:	d908      	bls.n	800978a <_free_r+0x42>
 8009778:	6821      	ldr	r1, [r4, #0]
 800977a:	1860      	adds	r0, r4, r1
 800977c:	4283      	cmp	r3, r0
 800977e:	d1f3      	bne.n	8009768 <_free_r+0x20>
 8009780:	6818      	ldr	r0, [r3, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	1841      	adds	r1, r0, r1
 8009786:	6021      	str	r1, [r4, #0]
 8009788:	e7ee      	b.n	8009768 <_free_r+0x20>
 800978a:	001a      	movs	r2, r3
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <_free_r+0x4e>
 8009792:	42a3      	cmp	r3, r4
 8009794:	d9f9      	bls.n	800978a <_free_r+0x42>
 8009796:	6811      	ldr	r1, [r2, #0]
 8009798:	1850      	adds	r0, r2, r1
 800979a:	42a0      	cmp	r0, r4
 800979c:	d10b      	bne.n	80097b6 <_free_r+0x6e>
 800979e:	6820      	ldr	r0, [r4, #0]
 80097a0:	1809      	adds	r1, r1, r0
 80097a2:	1850      	adds	r0, r2, r1
 80097a4:	6011      	str	r1, [r2, #0]
 80097a6:	4283      	cmp	r3, r0
 80097a8:	d1e0      	bne.n	800976c <_free_r+0x24>
 80097aa:	6818      	ldr	r0, [r3, #0]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	1841      	adds	r1, r0, r1
 80097b0:	6011      	str	r1, [r2, #0]
 80097b2:	6053      	str	r3, [r2, #4]
 80097b4:	e7da      	b.n	800976c <_free_r+0x24>
 80097b6:	42a0      	cmp	r0, r4
 80097b8:	d902      	bls.n	80097c0 <_free_r+0x78>
 80097ba:	230c      	movs	r3, #12
 80097bc:	602b      	str	r3, [r5, #0]
 80097be:	e7d5      	b.n	800976c <_free_r+0x24>
 80097c0:	6821      	ldr	r1, [r4, #0]
 80097c2:	1860      	adds	r0, r4, r1
 80097c4:	4283      	cmp	r3, r0
 80097c6:	d103      	bne.n	80097d0 <_free_r+0x88>
 80097c8:	6818      	ldr	r0, [r3, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	1841      	adds	r1, r0, r1
 80097ce:	6021      	str	r1, [r4, #0]
 80097d0:	6063      	str	r3, [r4, #4]
 80097d2:	6054      	str	r4, [r2, #4]
 80097d4:	e7ca      	b.n	800976c <_free_r+0x24>
 80097d6:	46c0      	nop			; (mov r8, r8)
 80097d8:	20000394 	.word	0x20000394

080097dc <sbrk_aligned>:
 80097dc:	b570      	push	{r4, r5, r6, lr}
 80097de:	4e0f      	ldr	r6, [pc, #60]	; (800981c <sbrk_aligned+0x40>)
 80097e0:	000d      	movs	r5, r1
 80097e2:	6831      	ldr	r1, [r6, #0]
 80097e4:	0004      	movs	r4, r0
 80097e6:	2900      	cmp	r1, #0
 80097e8:	d102      	bne.n	80097f0 <sbrk_aligned+0x14>
 80097ea:	f000 f9f7 	bl	8009bdc <_sbrk_r>
 80097ee:	6030      	str	r0, [r6, #0]
 80097f0:	0029      	movs	r1, r5
 80097f2:	0020      	movs	r0, r4
 80097f4:	f000 f9f2 	bl	8009bdc <_sbrk_r>
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	d00a      	beq.n	8009812 <sbrk_aligned+0x36>
 80097fc:	2303      	movs	r3, #3
 80097fe:	1cc5      	adds	r5, r0, #3
 8009800:	439d      	bics	r5, r3
 8009802:	42a8      	cmp	r0, r5
 8009804:	d007      	beq.n	8009816 <sbrk_aligned+0x3a>
 8009806:	1a29      	subs	r1, r5, r0
 8009808:	0020      	movs	r0, r4
 800980a:	f000 f9e7 	bl	8009bdc <_sbrk_r>
 800980e:	1c43      	adds	r3, r0, #1
 8009810:	d101      	bne.n	8009816 <sbrk_aligned+0x3a>
 8009812:	2501      	movs	r5, #1
 8009814:	426d      	negs	r5, r5
 8009816:	0028      	movs	r0, r5
 8009818:	bd70      	pop	{r4, r5, r6, pc}
 800981a:	46c0      	nop			; (mov r8, r8)
 800981c:	20000398 	.word	0x20000398

08009820 <_malloc_r>:
 8009820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009822:	2203      	movs	r2, #3
 8009824:	1ccb      	adds	r3, r1, #3
 8009826:	4393      	bics	r3, r2
 8009828:	3308      	adds	r3, #8
 800982a:	0006      	movs	r6, r0
 800982c:	001f      	movs	r7, r3
 800982e:	2b0c      	cmp	r3, #12
 8009830:	d232      	bcs.n	8009898 <_malloc_r+0x78>
 8009832:	270c      	movs	r7, #12
 8009834:	42b9      	cmp	r1, r7
 8009836:	d831      	bhi.n	800989c <_malloc_r+0x7c>
 8009838:	0030      	movs	r0, r6
 800983a:	f000 fa43 	bl	8009cc4 <__malloc_lock>
 800983e:	4d32      	ldr	r5, [pc, #200]	; (8009908 <_malloc_r+0xe8>)
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	001c      	movs	r4, r3
 8009844:	2c00      	cmp	r4, #0
 8009846:	d12e      	bne.n	80098a6 <_malloc_r+0x86>
 8009848:	0039      	movs	r1, r7
 800984a:	0030      	movs	r0, r6
 800984c:	f7ff ffc6 	bl	80097dc <sbrk_aligned>
 8009850:	0004      	movs	r4, r0
 8009852:	1c43      	adds	r3, r0, #1
 8009854:	d11e      	bne.n	8009894 <_malloc_r+0x74>
 8009856:	682c      	ldr	r4, [r5, #0]
 8009858:	0025      	movs	r5, r4
 800985a:	2d00      	cmp	r5, #0
 800985c:	d14a      	bne.n	80098f4 <_malloc_r+0xd4>
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	0029      	movs	r1, r5
 8009862:	18e3      	adds	r3, r4, r3
 8009864:	0030      	movs	r0, r6
 8009866:	9301      	str	r3, [sp, #4]
 8009868:	f000 f9b8 	bl	8009bdc <_sbrk_r>
 800986c:	9b01      	ldr	r3, [sp, #4]
 800986e:	4283      	cmp	r3, r0
 8009870:	d143      	bne.n	80098fa <_malloc_r+0xda>
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	3703      	adds	r7, #3
 8009876:	1aff      	subs	r7, r7, r3
 8009878:	2303      	movs	r3, #3
 800987a:	439f      	bics	r7, r3
 800987c:	3708      	adds	r7, #8
 800987e:	2f0c      	cmp	r7, #12
 8009880:	d200      	bcs.n	8009884 <_malloc_r+0x64>
 8009882:	270c      	movs	r7, #12
 8009884:	0039      	movs	r1, r7
 8009886:	0030      	movs	r0, r6
 8009888:	f7ff ffa8 	bl	80097dc <sbrk_aligned>
 800988c:	1c43      	adds	r3, r0, #1
 800988e:	d034      	beq.n	80098fa <_malloc_r+0xda>
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	19df      	adds	r7, r3, r7
 8009894:	6027      	str	r7, [r4, #0]
 8009896:	e013      	b.n	80098c0 <_malloc_r+0xa0>
 8009898:	2b00      	cmp	r3, #0
 800989a:	dacb      	bge.n	8009834 <_malloc_r+0x14>
 800989c:	230c      	movs	r3, #12
 800989e:	2500      	movs	r5, #0
 80098a0:	6033      	str	r3, [r6, #0]
 80098a2:	0028      	movs	r0, r5
 80098a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098a6:	6822      	ldr	r2, [r4, #0]
 80098a8:	1bd1      	subs	r1, r2, r7
 80098aa:	d420      	bmi.n	80098ee <_malloc_r+0xce>
 80098ac:	290b      	cmp	r1, #11
 80098ae:	d917      	bls.n	80098e0 <_malloc_r+0xc0>
 80098b0:	19e2      	adds	r2, r4, r7
 80098b2:	6027      	str	r7, [r4, #0]
 80098b4:	42a3      	cmp	r3, r4
 80098b6:	d111      	bne.n	80098dc <_malloc_r+0xbc>
 80098b8:	602a      	str	r2, [r5, #0]
 80098ba:	6863      	ldr	r3, [r4, #4]
 80098bc:	6011      	str	r1, [r2, #0]
 80098be:	6053      	str	r3, [r2, #4]
 80098c0:	0030      	movs	r0, r6
 80098c2:	0025      	movs	r5, r4
 80098c4:	f000 fa06 	bl	8009cd4 <__malloc_unlock>
 80098c8:	2207      	movs	r2, #7
 80098ca:	350b      	adds	r5, #11
 80098cc:	1d23      	adds	r3, r4, #4
 80098ce:	4395      	bics	r5, r2
 80098d0:	1aea      	subs	r2, r5, r3
 80098d2:	429d      	cmp	r5, r3
 80098d4:	d0e5      	beq.n	80098a2 <_malloc_r+0x82>
 80098d6:	1b5b      	subs	r3, r3, r5
 80098d8:	50a3      	str	r3, [r4, r2]
 80098da:	e7e2      	b.n	80098a2 <_malloc_r+0x82>
 80098dc:	605a      	str	r2, [r3, #4]
 80098de:	e7ec      	b.n	80098ba <_malloc_r+0x9a>
 80098e0:	6862      	ldr	r2, [r4, #4]
 80098e2:	42a3      	cmp	r3, r4
 80098e4:	d101      	bne.n	80098ea <_malloc_r+0xca>
 80098e6:	602a      	str	r2, [r5, #0]
 80098e8:	e7ea      	b.n	80098c0 <_malloc_r+0xa0>
 80098ea:	605a      	str	r2, [r3, #4]
 80098ec:	e7e8      	b.n	80098c0 <_malloc_r+0xa0>
 80098ee:	0023      	movs	r3, r4
 80098f0:	6864      	ldr	r4, [r4, #4]
 80098f2:	e7a7      	b.n	8009844 <_malloc_r+0x24>
 80098f4:	002c      	movs	r4, r5
 80098f6:	686d      	ldr	r5, [r5, #4]
 80098f8:	e7af      	b.n	800985a <_malloc_r+0x3a>
 80098fa:	230c      	movs	r3, #12
 80098fc:	0030      	movs	r0, r6
 80098fe:	6033      	str	r3, [r6, #0]
 8009900:	f000 f9e8 	bl	8009cd4 <__malloc_unlock>
 8009904:	e7cd      	b.n	80098a2 <_malloc_r+0x82>
 8009906:	46c0      	nop			; (mov r8, r8)
 8009908:	20000394 	.word	0x20000394

0800990c <__ssputs_r>:
 800990c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800990e:	688e      	ldr	r6, [r1, #8]
 8009910:	b085      	sub	sp, #20
 8009912:	0007      	movs	r7, r0
 8009914:	000c      	movs	r4, r1
 8009916:	9203      	str	r2, [sp, #12]
 8009918:	9301      	str	r3, [sp, #4]
 800991a:	429e      	cmp	r6, r3
 800991c:	d83c      	bhi.n	8009998 <__ssputs_r+0x8c>
 800991e:	2390      	movs	r3, #144	; 0x90
 8009920:	898a      	ldrh	r2, [r1, #12]
 8009922:	00db      	lsls	r3, r3, #3
 8009924:	421a      	tst	r2, r3
 8009926:	d034      	beq.n	8009992 <__ssputs_r+0x86>
 8009928:	6909      	ldr	r1, [r1, #16]
 800992a:	6823      	ldr	r3, [r4, #0]
 800992c:	6960      	ldr	r0, [r4, #20]
 800992e:	1a5b      	subs	r3, r3, r1
 8009930:	9302      	str	r3, [sp, #8]
 8009932:	2303      	movs	r3, #3
 8009934:	4343      	muls	r3, r0
 8009936:	0fdd      	lsrs	r5, r3, #31
 8009938:	18ed      	adds	r5, r5, r3
 800993a:	9b01      	ldr	r3, [sp, #4]
 800993c:	9802      	ldr	r0, [sp, #8]
 800993e:	3301      	adds	r3, #1
 8009940:	181b      	adds	r3, r3, r0
 8009942:	106d      	asrs	r5, r5, #1
 8009944:	42ab      	cmp	r3, r5
 8009946:	d900      	bls.n	800994a <__ssputs_r+0x3e>
 8009948:	001d      	movs	r5, r3
 800994a:	0553      	lsls	r3, r2, #21
 800994c:	d532      	bpl.n	80099b4 <__ssputs_r+0xa8>
 800994e:	0029      	movs	r1, r5
 8009950:	0038      	movs	r0, r7
 8009952:	f7ff ff65 	bl	8009820 <_malloc_r>
 8009956:	1e06      	subs	r6, r0, #0
 8009958:	d109      	bne.n	800996e <__ssputs_r+0x62>
 800995a:	230c      	movs	r3, #12
 800995c:	603b      	str	r3, [r7, #0]
 800995e:	2340      	movs	r3, #64	; 0x40
 8009960:	2001      	movs	r0, #1
 8009962:	89a2      	ldrh	r2, [r4, #12]
 8009964:	4240      	negs	r0, r0
 8009966:	4313      	orrs	r3, r2
 8009968:	81a3      	strh	r3, [r4, #12]
 800996a:	b005      	add	sp, #20
 800996c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800996e:	9a02      	ldr	r2, [sp, #8]
 8009970:	6921      	ldr	r1, [r4, #16]
 8009972:	f7ff f9ea 	bl	8008d4a <memcpy>
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	4a14      	ldr	r2, [pc, #80]	; (80099cc <__ssputs_r+0xc0>)
 800997a:	401a      	ands	r2, r3
 800997c:	2380      	movs	r3, #128	; 0x80
 800997e:	4313      	orrs	r3, r2
 8009980:	81a3      	strh	r3, [r4, #12]
 8009982:	9b02      	ldr	r3, [sp, #8]
 8009984:	6126      	str	r6, [r4, #16]
 8009986:	18f6      	adds	r6, r6, r3
 8009988:	6026      	str	r6, [r4, #0]
 800998a:	6165      	str	r5, [r4, #20]
 800998c:	9e01      	ldr	r6, [sp, #4]
 800998e:	1aed      	subs	r5, r5, r3
 8009990:	60a5      	str	r5, [r4, #8]
 8009992:	9b01      	ldr	r3, [sp, #4]
 8009994:	429e      	cmp	r6, r3
 8009996:	d900      	bls.n	800999a <__ssputs_r+0x8e>
 8009998:	9e01      	ldr	r6, [sp, #4]
 800999a:	0032      	movs	r2, r6
 800999c:	9903      	ldr	r1, [sp, #12]
 800999e:	6820      	ldr	r0, [r4, #0]
 80099a0:	f000 f97c 	bl	8009c9c <memmove>
 80099a4:	68a3      	ldr	r3, [r4, #8]
 80099a6:	2000      	movs	r0, #0
 80099a8:	1b9b      	subs	r3, r3, r6
 80099aa:	60a3      	str	r3, [r4, #8]
 80099ac:	6823      	ldr	r3, [r4, #0]
 80099ae:	199e      	adds	r6, r3, r6
 80099b0:	6026      	str	r6, [r4, #0]
 80099b2:	e7da      	b.n	800996a <__ssputs_r+0x5e>
 80099b4:	002a      	movs	r2, r5
 80099b6:	0038      	movs	r0, r7
 80099b8:	f000 f994 	bl	8009ce4 <_realloc_r>
 80099bc:	1e06      	subs	r6, r0, #0
 80099be:	d1e0      	bne.n	8009982 <__ssputs_r+0x76>
 80099c0:	0038      	movs	r0, r7
 80099c2:	6921      	ldr	r1, [r4, #16]
 80099c4:	f7ff fec0 	bl	8009748 <_free_r>
 80099c8:	e7c7      	b.n	800995a <__ssputs_r+0x4e>
 80099ca:	46c0      	nop			; (mov r8, r8)
 80099cc:	fffffb7f 	.word	0xfffffb7f

080099d0 <_svfiprintf_r>:
 80099d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099d2:	b0a1      	sub	sp, #132	; 0x84
 80099d4:	9003      	str	r0, [sp, #12]
 80099d6:	001d      	movs	r5, r3
 80099d8:	898b      	ldrh	r3, [r1, #12]
 80099da:	000f      	movs	r7, r1
 80099dc:	0016      	movs	r6, r2
 80099de:	061b      	lsls	r3, r3, #24
 80099e0:	d511      	bpl.n	8009a06 <_svfiprintf_r+0x36>
 80099e2:	690b      	ldr	r3, [r1, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10e      	bne.n	8009a06 <_svfiprintf_r+0x36>
 80099e8:	2140      	movs	r1, #64	; 0x40
 80099ea:	f7ff ff19 	bl	8009820 <_malloc_r>
 80099ee:	6038      	str	r0, [r7, #0]
 80099f0:	6138      	str	r0, [r7, #16]
 80099f2:	2800      	cmp	r0, #0
 80099f4:	d105      	bne.n	8009a02 <_svfiprintf_r+0x32>
 80099f6:	230c      	movs	r3, #12
 80099f8:	9a03      	ldr	r2, [sp, #12]
 80099fa:	3801      	subs	r0, #1
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	b021      	add	sp, #132	; 0x84
 8009a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a02:	2340      	movs	r3, #64	; 0x40
 8009a04:	617b      	str	r3, [r7, #20]
 8009a06:	2300      	movs	r3, #0
 8009a08:	ac08      	add	r4, sp, #32
 8009a0a:	6163      	str	r3, [r4, #20]
 8009a0c:	3320      	adds	r3, #32
 8009a0e:	7663      	strb	r3, [r4, #25]
 8009a10:	3310      	adds	r3, #16
 8009a12:	76a3      	strb	r3, [r4, #26]
 8009a14:	9507      	str	r5, [sp, #28]
 8009a16:	0035      	movs	r5, r6
 8009a18:	782b      	ldrb	r3, [r5, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <_svfiprintf_r+0x52>
 8009a1e:	2b25      	cmp	r3, #37	; 0x25
 8009a20:	d147      	bne.n	8009ab2 <_svfiprintf_r+0xe2>
 8009a22:	1bab      	subs	r3, r5, r6
 8009a24:	9305      	str	r3, [sp, #20]
 8009a26:	42b5      	cmp	r5, r6
 8009a28:	d00c      	beq.n	8009a44 <_svfiprintf_r+0x74>
 8009a2a:	0032      	movs	r2, r6
 8009a2c:	0039      	movs	r1, r7
 8009a2e:	9803      	ldr	r0, [sp, #12]
 8009a30:	f7ff ff6c 	bl	800990c <__ssputs_r>
 8009a34:	1c43      	adds	r3, r0, #1
 8009a36:	d100      	bne.n	8009a3a <_svfiprintf_r+0x6a>
 8009a38:	e0ae      	b.n	8009b98 <_svfiprintf_r+0x1c8>
 8009a3a:	6962      	ldr	r2, [r4, #20]
 8009a3c:	9b05      	ldr	r3, [sp, #20]
 8009a3e:	4694      	mov	ip, r2
 8009a40:	4463      	add	r3, ip
 8009a42:	6163      	str	r3, [r4, #20]
 8009a44:	782b      	ldrb	r3, [r5, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d100      	bne.n	8009a4c <_svfiprintf_r+0x7c>
 8009a4a:	e0a5      	b.n	8009b98 <_svfiprintf_r+0x1c8>
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	2300      	movs	r3, #0
 8009a50:	4252      	negs	r2, r2
 8009a52:	6062      	str	r2, [r4, #4]
 8009a54:	a904      	add	r1, sp, #16
 8009a56:	3254      	adds	r2, #84	; 0x54
 8009a58:	1852      	adds	r2, r2, r1
 8009a5a:	1c6e      	adds	r6, r5, #1
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	60e3      	str	r3, [r4, #12]
 8009a60:	60a3      	str	r3, [r4, #8]
 8009a62:	7013      	strb	r3, [r2, #0]
 8009a64:	65a3      	str	r3, [r4, #88]	; 0x58
 8009a66:	2205      	movs	r2, #5
 8009a68:	7831      	ldrb	r1, [r6, #0]
 8009a6a:	4854      	ldr	r0, [pc, #336]	; (8009bbc <_svfiprintf_r+0x1ec>)
 8009a6c:	f7ff f962 	bl	8008d34 <memchr>
 8009a70:	1c75      	adds	r5, r6, #1
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d11f      	bne.n	8009ab6 <_svfiprintf_r+0xe6>
 8009a76:	6822      	ldr	r2, [r4, #0]
 8009a78:	06d3      	lsls	r3, r2, #27
 8009a7a:	d504      	bpl.n	8009a86 <_svfiprintf_r+0xb6>
 8009a7c:	2353      	movs	r3, #83	; 0x53
 8009a7e:	a904      	add	r1, sp, #16
 8009a80:	185b      	adds	r3, r3, r1
 8009a82:	2120      	movs	r1, #32
 8009a84:	7019      	strb	r1, [r3, #0]
 8009a86:	0713      	lsls	r3, r2, #28
 8009a88:	d504      	bpl.n	8009a94 <_svfiprintf_r+0xc4>
 8009a8a:	2353      	movs	r3, #83	; 0x53
 8009a8c:	a904      	add	r1, sp, #16
 8009a8e:	185b      	adds	r3, r3, r1
 8009a90:	212b      	movs	r1, #43	; 0x2b
 8009a92:	7019      	strb	r1, [r3, #0]
 8009a94:	7833      	ldrb	r3, [r6, #0]
 8009a96:	2b2a      	cmp	r3, #42	; 0x2a
 8009a98:	d016      	beq.n	8009ac8 <_svfiprintf_r+0xf8>
 8009a9a:	0035      	movs	r5, r6
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	200a      	movs	r0, #10
 8009aa0:	68e3      	ldr	r3, [r4, #12]
 8009aa2:	782a      	ldrb	r2, [r5, #0]
 8009aa4:	1c6e      	adds	r6, r5, #1
 8009aa6:	3a30      	subs	r2, #48	; 0x30
 8009aa8:	2a09      	cmp	r2, #9
 8009aaa:	d94e      	bls.n	8009b4a <_svfiprintf_r+0x17a>
 8009aac:	2900      	cmp	r1, #0
 8009aae:	d111      	bne.n	8009ad4 <_svfiprintf_r+0x104>
 8009ab0:	e017      	b.n	8009ae2 <_svfiprintf_r+0x112>
 8009ab2:	3501      	adds	r5, #1
 8009ab4:	e7b0      	b.n	8009a18 <_svfiprintf_r+0x48>
 8009ab6:	4b41      	ldr	r3, [pc, #260]	; (8009bbc <_svfiprintf_r+0x1ec>)
 8009ab8:	6822      	ldr	r2, [r4, #0]
 8009aba:	1ac0      	subs	r0, r0, r3
 8009abc:	2301      	movs	r3, #1
 8009abe:	4083      	lsls	r3, r0
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	002e      	movs	r6, r5
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	e7ce      	b.n	8009a66 <_svfiprintf_r+0x96>
 8009ac8:	9b07      	ldr	r3, [sp, #28]
 8009aca:	1d19      	adds	r1, r3, #4
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	9107      	str	r1, [sp, #28]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	db01      	blt.n	8009ad8 <_svfiprintf_r+0x108>
 8009ad4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ad6:	e004      	b.n	8009ae2 <_svfiprintf_r+0x112>
 8009ad8:	425b      	negs	r3, r3
 8009ada:	60e3      	str	r3, [r4, #12]
 8009adc:	2302      	movs	r3, #2
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	6023      	str	r3, [r4, #0]
 8009ae2:	782b      	ldrb	r3, [r5, #0]
 8009ae4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ae6:	d10a      	bne.n	8009afe <_svfiprintf_r+0x12e>
 8009ae8:	786b      	ldrb	r3, [r5, #1]
 8009aea:	2b2a      	cmp	r3, #42	; 0x2a
 8009aec:	d135      	bne.n	8009b5a <_svfiprintf_r+0x18a>
 8009aee:	9b07      	ldr	r3, [sp, #28]
 8009af0:	3502      	adds	r5, #2
 8009af2:	1d1a      	adds	r2, r3, #4
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	9207      	str	r2, [sp, #28]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	db2b      	blt.n	8009b54 <_svfiprintf_r+0x184>
 8009afc:	9309      	str	r3, [sp, #36]	; 0x24
 8009afe:	4e30      	ldr	r6, [pc, #192]	; (8009bc0 <_svfiprintf_r+0x1f0>)
 8009b00:	2203      	movs	r2, #3
 8009b02:	0030      	movs	r0, r6
 8009b04:	7829      	ldrb	r1, [r5, #0]
 8009b06:	f7ff f915 	bl	8008d34 <memchr>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d006      	beq.n	8009b1c <_svfiprintf_r+0x14c>
 8009b0e:	2340      	movs	r3, #64	; 0x40
 8009b10:	1b80      	subs	r0, r0, r6
 8009b12:	4083      	lsls	r3, r0
 8009b14:	6822      	ldr	r2, [r4, #0]
 8009b16:	3501      	adds	r5, #1
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	6023      	str	r3, [r4, #0]
 8009b1c:	7829      	ldrb	r1, [r5, #0]
 8009b1e:	2206      	movs	r2, #6
 8009b20:	4828      	ldr	r0, [pc, #160]	; (8009bc4 <_svfiprintf_r+0x1f4>)
 8009b22:	1c6e      	adds	r6, r5, #1
 8009b24:	7621      	strb	r1, [r4, #24]
 8009b26:	f7ff f905 	bl	8008d34 <memchr>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d03c      	beq.n	8009ba8 <_svfiprintf_r+0x1d8>
 8009b2e:	4b26      	ldr	r3, [pc, #152]	; (8009bc8 <_svfiprintf_r+0x1f8>)
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d125      	bne.n	8009b80 <_svfiprintf_r+0x1b0>
 8009b34:	2207      	movs	r2, #7
 8009b36:	9b07      	ldr	r3, [sp, #28]
 8009b38:	3307      	adds	r3, #7
 8009b3a:	4393      	bics	r3, r2
 8009b3c:	3308      	adds	r3, #8
 8009b3e:	9307      	str	r3, [sp, #28]
 8009b40:	6963      	ldr	r3, [r4, #20]
 8009b42:	9a04      	ldr	r2, [sp, #16]
 8009b44:	189b      	adds	r3, r3, r2
 8009b46:	6163      	str	r3, [r4, #20]
 8009b48:	e765      	b.n	8009a16 <_svfiprintf_r+0x46>
 8009b4a:	4343      	muls	r3, r0
 8009b4c:	0035      	movs	r5, r6
 8009b4e:	2101      	movs	r1, #1
 8009b50:	189b      	adds	r3, r3, r2
 8009b52:	e7a6      	b.n	8009aa2 <_svfiprintf_r+0xd2>
 8009b54:	2301      	movs	r3, #1
 8009b56:	425b      	negs	r3, r3
 8009b58:	e7d0      	b.n	8009afc <_svfiprintf_r+0x12c>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	200a      	movs	r0, #10
 8009b5e:	001a      	movs	r2, r3
 8009b60:	3501      	adds	r5, #1
 8009b62:	6063      	str	r3, [r4, #4]
 8009b64:	7829      	ldrb	r1, [r5, #0]
 8009b66:	1c6e      	adds	r6, r5, #1
 8009b68:	3930      	subs	r1, #48	; 0x30
 8009b6a:	2909      	cmp	r1, #9
 8009b6c:	d903      	bls.n	8009b76 <_svfiprintf_r+0x1a6>
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0c5      	beq.n	8009afe <_svfiprintf_r+0x12e>
 8009b72:	9209      	str	r2, [sp, #36]	; 0x24
 8009b74:	e7c3      	b.n	8009afe <_svfiprintf_r+0x12e>
 8009b76:	4342      	muls	r2, r0
 8009b78:	0035      	movs	r5, r6
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	1852      	adds	r2, r2, r1
 8009b7e:	e7f1      	b.n	8009b64 <_svfiprintf_r+0x194>
 8009b80:	ab07      	add	r3, sp, #28
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	003a      	movs	r2, r7
 8009b86:	0021      	movs	r1, r4
 8009b88:	4b10      	ldr	r3, [pc, #64]	; (8009bcc <_svfiprintf_r+0x1fc>)
 8009b8a:	9803      	ldr	r0, [sp, #12]
 8009b8c:	f7fc f9e2 	bl	8005f54 <_printf_float>
 8009b90:	9004      	str	r0, [sp, #16]
 8009b92:	9b04      	ldr	r3, [sp, #16]
 8009b94:	3301      	adds	r3, #1
 8009b96:	d1d3      	bne.n	8009b40 <_svfiprintf_r+0x170>
 8009b98:	89bb      	ldrh	r3, [r7, #12]
 8009b9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009b9c:	065b      	lsls	r3, r3, #25
 8009b9e:	d400      	bmi.n	8009ba2 <_svfiprintf_r+0x1d2>
 8009ba0:	e72d      	b.n	80099fe <_svfiprintf_r+0x2e>
 8009ba2:	2001      	movs	r0, #1
 8009ba4:	4240      	negs	r0, r0
 8009ba6:	e72a      	b.n	80099fe <_svfiprintf_r+0x2e>
 8009ba8:	ab07      	add	r3, sp, #28
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	003a      	movs	r2, r7
 8009bae:	0021      	movs	r1, r4
 8009bb0:	4b06      	ldr	r3, [pc, #24]	; (8009bcc <_svfiprintf_r+0x1fc>)
 8009bb2:	9803      	ldr	r0, [sp, #12]
 8009bb4:	f7fc fc80 	bl	80064b8 <_printf_i>
 8009bb8:	e7ea      	b.n	8009b90 <_svfiprintf_r+0x1c0>
 8009bba:	46c0      	nop			; (mov r8, r8)
 8009bbc:	0800ad6c 	.word	0x0800ad6c
 8009bc0:	0800ad72 	.word	0x0800ad72
 8009bc4:	0800ad76 	.word	0x0800ad76
 8009bc8:	08005f55 	.word	0x08005f55
 8009bcc:	0800990d 	.word	0x0800990d

08009bd0 <nan>:
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	4901      	ldr	r1, [pc, #4]	; (8009bd8 <nan+0x8>)
 8009bd4:	4770      	bx	lr
 8009bd6:	46c0      	nop			; (mov r8, r8)
 8009bd8:	7ff80000 	.word	0x7ff80000

08009bdc <_sbrk_r>:
 8009bdc:	2300      	movs	r3, #0
 8009bde:	b570      	push	{r4, r5, r6, lr}
 8009be0:	4d06      	ldr	r5, [pc, #24]	; (8009bfc <_sbrk_r+0x20>)
 8009be2:	0004      	movs	r4, r0
 8009be4:	0008      	movs	r0, r1
 8009be6:	602b      	str	r3, [r5, #0]
 8009be8:	f7f9 f818 	bl	8002c1c <_sbrk>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	d103      	bne.n	8009bf8 <_sbrk_r+0x1c>
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d000      	beq.n	8009bf8 <_sbrk_r+0x1c>
 8009bf6:	6023      	str	r3, [r4, #0]
 8009bf8:	bd70      	pop	{r4, r5, r6, pc}
 8009bfa:	46c0      	nop			; (mov r8, r8)
 8009bfc:	2000039c 	.word	0x2000039c

08009c00 <strncmp>:
 8009c00:	b530      	push	{r4, r5, lr}
 8009c02:	0005      	movs	r5, r0
 8009c04:	1e10      	subs	r0, r2, #0
 8009c06:	d008      	beq.n	8009c1a <strncmp+0x1a>
 8009c08:	2400      	movs	r4, #0
 8009c0a:	3a01      	subs	r2, #1
 8009c0c:	5d2b      	ldrb	r3, [r5, r4]
 8009c0e:	5d08      	ldrb	r0, [r1, r4]
 8009c10:	4283      	cmp	r3, r0
 8009c12:	d101      	bne.n	8009c18 <strncmp+0x18>
 8009c14:	4294      	cmp	r4, r2
 8009c16:	d101      	bne.n	8009c1c <strncmp+0x1c>
 8009c18:	1a18      	subs	r0, r3, r0
 8009c1a:	bd30      	pop	{r4, r5, pc}
 8009c1c:	3401      	adds	r4, #1
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1f4      	bne.n	8009c0c <strncmp+0xc>
 8009c22:	e7f9      	b.n	8009c18 <strncmp+0x18>

08009c24 <__ascii_wctomb>:
 8009c24:	0003      	movs	r3, r0
 8009c26:	1e08      	subs	r0, r1, #0
 8009c28:	d005      	beq.n	8009c36 <__ascii_wctomb+0x12>
 8009c2a:	2aff      	cmp	r2, #255	; 0xff
 8009c2c:	d904      	bls.n	8009c38 <__ascii_wctomb+0x14>
 8009c2e:	228a      	movs	r2, #138	; 0x8a
 8009c30:	2001      	movs	r0, #1
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	4240      	negs	r0, r0
 8009c36:	4770      	bx	lr
 8009c38:	2001      	movs	r0, #1
 8009c3a:	700a      	strb	r2, [r1, #0]
 8009c3c:	e7fb      	b.n	8009c36 <__ascii_wctomb+0x12>
	...

08009c40 <__assert_func>:
 8009c40:	b530      	push	{r4, r5, lr}
 8009c42:	0014      	movs	r4, r2
 8009c44:	001a      	movs	r2, r3
 8009c46:	4b09      	ldr	r3, [pc, #36]	; (8009c6c <__assert_func+0x2c>)
 8009c48:	0005      	movs	r5, r0
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	b085      	sub	sp, #20
 8009c4e:	68d8      	ldr	r0, [r3, #12]
 8009c50:	4b07      	ldr	r3, [pc, #28]	; (8009c70 <__assert_func+0x30>)
 8009c52:	2c00      	cmp	r4, #0
 8009c54:	d101      	bne.n	8009c5a <__assert_func+0x1a>
 8009c56:	4b07      	ldr	r3, [pc, #28]	; (8009c74 <__assert_func+0x34>)
 8009c58:	001c      	movs	r4, r3
 8009c5a:	9301      	str	r3, [sp, #4]
 8009c5c:	9100      	str	r1, [sp, #0]
 8009c5e:	002b      	movs	r3, r5
 8009c60:	4905      	ldr	r1, [pc, #20]	; (8009c78 <__assert_func+0x38>)
 8009c62:	9402      	str	r4, [sp, #8]
 8009c64:	f000 f80a 	bl	8009c7c <fiprintf>
 8009c68:	f000 fa9a 	bl	800a1a0 <abort>
 8009c6c:	2000000c 	.word	0x2000000c
 8009c70:	0800ad7d 	.word	0x0800ad7d
 8009c74:	0800adb8 	.word	0x0800adb8
 8009c78:	0800ad8a 	.word	0x0800ad8a

08009c7c <fiprintf>:
 8009c7c:	b40e      	push	{r1, r2, r3}
 8009c7e:	b503      	push	{r0, r1, lr}
 8009c80:	0001      	movs	r1, r0
 8009c82:	ab03      	add	r3, sp, #12
 8009c84:	4804      	ldr	r0, [pc, #16]	; (8009c98 <fiprintf+0x1c>)
 8009c86:	cb04      	ldmia	r3!, {r2}
 8009c88:	6800      	ldr	r0, [r0, #0]
 8009c8a:	9301      	str	r3, [sp, #4]
 8009c8c:	f000 f880 	bl	8009d90 <_vfiprintf_r>
 8009c90:	b002      	add	sp, #8
 8009c92:	bc08      	pop	{r3}
 8009c94:	b003      	add	sp, #12
 8009c96:	4718      	bx	r3
 8009c98:	2000000c 	.word	0x2000000c

08009c9c <memmove>:
 8009c9c:	b510      	push	{r4, lr}
 8009c9e:	4288      	cmp	r0, r1
 8009ca0:	d902      	bls.n	8009ca8 <memmove+0xc>
 8009ca2:	188b      	adds	r3, r1, r2
 8009ca4:	4298      	cmp	r0, r3
 8009ca6:	d303      	bcc.n	8009cb0 <memmove+0x14>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	e007      	b.n	8009cbc <memmove+0x20>
 8009cac:	5c8b      	ldrb	r3, [r1, r2]
 8009cae:	5483      	strb	r3, [r0, r2]
 8009cb0:	3a01      	subs	r2, #1
 8009cb2:	d2fb      	bcs.n	8009cac <memmove+0x10>
 8009cb4:	bd10      	pop	{r4, pc}
 8009cb6:	5ccc      	ldrb	r4, [r1, r3]
 8009cb8:	54c4      	strb	r4, [r0, r3]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d1fa      	bne.n	8009cb6 <memmove+0x1a>
 8009cc0:	e7f8      	b.n	8009cb4 <memmove+0x18>
	...

08009cc4 <__malloc_lock>:
 8009cc4:	b510      	push	{r4, lr}
 8009cc6:	4802      	ldr	r0, [pc, #8]	; (8009cd0 <__malloc_lock+0xc>)
 8009cc8:	f000 fc41 	bl	800a54e <__retarget_lock_acquire_recursive>
 8009ccc:	bd10      	pop	{r4, pc}
 8009cce:	46c0      	nop			; (mov r8, r8)
 8009cd0:	200003a0 	.word	0x200003a0

08009cd4 <__malloc_unlock>:
 8009cd4:	b510      	push	{r4, lr}
 8009cd6:	4802      	ldr	r0, [pc, #8]	; (8009ce0 <__malloc_unlock+0xc>)
 8009cd8:	f000 fc3a 	bl	800a550 <__retarget_lock_release_recursive>
 8009cdc:	bd10      	pop	{r4, pc}
 8009cde:	46c0      	nop			; (mov r8, r8)
 8009ce0:	200003a0 	.word	0x200003a0

08009ce4 <_realloc_r>:
 8009ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ce6:	0007      	movs	r7, r0
 8009ce8:	000e      	movs	r6, r1
 8009cea:	0014      	movs	r4, r2
 8009cec:	2900      	cmp	r1, #0
 8009cee:	d105      	bne.n	8009cfc <_realloc_r+0x18>
 8009cf0:	0011      	movs	r1, r2
 8009cf2:	f7ff fd95 	bl	8009820 <_malloc_r>
 8009cf6:	0005      	movs	r5, r0
 8009cf8:	0028      	movs	r0, r5
 8009cfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cfc:	2a00      	cmp	r2, #0
 8009cfe:	d103      	bne.n	8009d08 <_realloc_r+0x24>
 8009d00:	f7ff fd22 	bl	8009748 <_free_r>
 8009d04:	0025      	movs	r5, r4
 8009d06:	e7f7      	b.n	8009cf8 <_realloc_r+0x14>
 8009d08:	f000 fc90 	bl	800a62c <_malloc_usable_size_r>
 8009d0c:	9001      	str	r0, [sp, #4]
 8009d0e:	4284      	cmp	r4, r0
 8009d10:	d803      	bhi.n	8009d1a <_realloc_r+0x36>
 8009d12:	0035      	movs	r5, r6
 8009d14:	0843      	lsrs	r3, r0, #1
 8009d16:	42a3      	cmp	r3, r4
 8009d18:	d3ee      	bcc.n	8009cf8 <_realloc_r+0x14>
 8009d1a:	0021      	movs	r1, r4
 8009d1c:	0038      	movs	r0, r7
 8009d1e:	f7ff fd7f 	bl	8009820 <_malloc_r>
 8009d22:	1e05      	subs	r5, r0, #0
 8009d24:	d0e8      	beq.n	8009cf8 <_realloc_r+0x14>
 8009d26:	9b01      	ldr	r3, [sp, #4]
 8009d28:	0022      	movs	r2, r4
 8009d2a:	429c      	cmp	r4, r3
 8009d2c:	d900      	bls.n	8009d30 <_realloc_r+0x4c>
 8009d2e:	001a      	movs	r2, r3
 8009d30:	0031      	movs	r1, r6
 8009d32:	0028      	movs	r0, r5
 8009d34:	f7ff f809 	bl	8008d4a <memcpy>
 8009d38:	0031      	movs	r1, r6
 8009d3a:	0038      	movs	r0, r7
 8009d3c:	f7ff fd04 	bl	8009748 <_free_r>
 8009d40:	e7da      	b.n	8009cf8 <_realloc_r+0x14>

08009d42 <__sfputc_r>:
 8009d42:	6893      	ldr	r3, [r2, #8]
 8009d44:	b510      	push	{r4, lr}
 8009d46:	3b01      	subs	r3, #1
 8009d48:	6093      	str	r3, [r2, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	da04      	bge.n	8009d58 <__sfputc_r+0x16>
 8009d4e:	6994      	ldr	r4, [r2, #24]
 8009d50:	42a3      	cmp	r3, r4
 8009d52:	db07      	blt.n	8009d64 <__sfputc_r+0x22>
 8009d54:	290a      	cmp	r1, #10
 8009d56:	d005      	beq.n	8009d64 <__sfputc_r+0x22>
 8009d58:	6813      	ldr	r3, [r2, #0]
 8009d5a:	1c58      	adds	r0, r3, #1
 8009d5c:	6010      	str	r0, [r2, #0]
 8009d5e:	7019      	strb	r1, [r3, #0]
 8009d60:	0008      	movs	r0, r1
 8009d62:	bd10      	pop	{r4, pc}
 8009d64:	f000 f94e 	bl	800a004 <__swbuf_r>
 8009d68:	0001      	movs	r1, r0
 8009d6a:	e7f9      	b.n	8009d60 <__sfputc_r+0x1e>

08009d6c <__sfputs_r>:
 8009d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6e:	0006      	movs	r6, r0
 8009d70:	000f      	movs	r7, r1
 8009d72:	0014      	movs	r4, r2
 8009d74:	18d5      	adds	r5, r2, r3
 8009d76:	42ac      	cmp	r4, r5
 8009d78:	d101      	bne.n	8009d7e <__sfputs_r+0x12>
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	e007      	b.n	8009d8e <__sfputs_r+0x22>
 8009d7e:	7821      	ldrb	r1, [r4, #0]
 8009d80:	003a      	movs	r2, r7
 8009d82:	0030      	movs	r0, r6
 8009d84:	f7ff ffdd 	bl	8009d42 <__sfputc_r>
 8009d88:	3401      	adds	r4, #1
 8009d8a:	1c43      	adds	r3, r0, #1
 8009d8c:	d1f3      	bne.n	8009d76 <__sfputs_r+0xa>
 8009d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d90 <_vfiprintf_r>:
 8009d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d92:	b0a1      	sub	sp, #132	; 0x84
 8009d94:	0006      	movs	r6, r0
 8009d96:	000c      	movs	r4, r1
 8009d98:	001f      	movs	r7, r3
 8009d9a:	9203      	str	r2, [sp, #12]
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d004      	beq.n	8009daa <_vfiprintf_r+0x1a>
 8009da0:	6983      	ldr	r3, [r0, #24]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <_vfiprintf_r+0x1a>
 8009da6:	f000 fb31 	bl	800a40c <__sinit>
 8009daa:	4b8e      	ldr	r3, [pc, #568]	; (8009fe4 <_vfiprintf_r+0x254>)
 8009dac:	429c      	cmp	r4, r3
 8009dae:	d11c      	bne.n	8009dea <_vfiprintf_r+0x5a>
 8009db0:	6874      	ldr	r4, [r6, #4]
 8009db2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009db4:	07db      	lsls	r3, r3, #31
 8009db6:	d405      	bmi.n	8009dc4 <_vfiprintf_r+0x34>
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	059b      	lsls	r3, r3, #22
 8009dbc:	d402      	bmi.n	8009dc4 <_vfiprintf_r+0x34>
 8009dbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dc0:	f000 fbc5 	bl	800a54e <__retarget_lock_acquire_recursive>
 8009dc4:	89a3      	ldrh	r3, [r4, #12]
 8009dc6:	071b      	lsls	r3, r3, #28
 8009dc8:	d502      	bpl.n	8009dd0 <_vfiprintf_r+0x40>
 8009dca:	6923      	ldr	r3, [r4, #16]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d11d      	bne.n	8009e0c <_vfiprintf_r+0x7c>
 8009dd0:	0021      	movs	r1, r4
 8009dd2:	0030      	movs	r0, r6
 8009dd4:	f000 f96c 	bl	800a0b0 <__swsetup_r>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d017      	beq.n	8009e0c <_vfiprintf_r+0x7c>
 8009ddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dde:	07db      	lsls	r3, r3, #31
 8009de0:	d50d      	bpl.n	8009dfe <_vfiprintf_r+0x6e>
 8009de2:	2001      	movs	r0, #1
 8009de4:	4240      	negs	r0, r0
 8009de6:	b021      	add	sp, #132	; 0x84
 8009de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dea:	4b7f      	ldr	r3, [pc, #508]	; (8009fe8 <_vfiprintf_r+0x258>)
 8009dec:	429c      	cmp	r4, r3
 8009dee:	d101      	bne.n	8009df4 <_vfiprintf_r+0x64>
 8009df0:	68b4      	ldr	r4, [r6, #8]
 8009df2:	e7de      	b.n	8009db2 <_vfiprintf_r+0x22>
 8009df4:	4b7d      	ldr	r3, [pc, #500]	; (8009fec <_vfiprintf_r+0x25c>)
 8009df6:	429c      	cmp	r4, r3
 8009df8:	d1db      	bne.n	8009db2 <_vfiprintf_r+0x22>
 8009dfa:	68f4      	ldr	r4, [r6, #12]
 8009dfc:	e7d9      	b.n	8009db2 <_vfiprintf_r+0x22>
 8009dfe:	89a3      	ldrh	r3, [r4, #12]
 8009e00:	059b      	lsls	r3, r3, #22
 8009e02:	d4ee      	bmi.n	8009de2 <_vfiprintf_r+0x52>
 8009e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e06:	f000 fba3 	bl	800a550 <__retarget_lock_release_recursive>
 8009e0a:	e7ea      	b.n	8009de2 <_vfiprintf_r+0x52>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	ad08      	add	r5, sp, #32
 8009e10:	616b      	str	r3, [r5, #20]
 8009e12:	3320      	adds	r3, #32
 8009e14:	766b      	strb	r3, [r5, #25]
 8009e16:	3310      	adds	r3, #16
 8009e18:	76ab      	strb	r3, [r5, #26]
 8009e1a:	9707      	str	r7, [sp, #28]
 8009e1c:	9f03      	ldr	r7, [sp, #12]
 8009e1e:	783b      	ldrb	r3, [r7, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <_vfiprintf_r+0x98>
 8009e24:	2b25      	cmp	r3, #37	; 0x25
 8009e26:	d14e      	bne.n	8009ec6 <_vfiprintf_r+0x136>
 8009e28:	9b03      	ldr	r3, [sp, #12]
 8009e2a:	1afb      	subs	r3, r7, r3
 8009e2c:	9305      	str	r3, [sp, #20]
 8009e2e:	9b03      	ldr	r3, [sp, #12]
 8009e30:	429f      	cmp	r7, r3
 8009e32:	d00d      	beq.n	8009e50 <_vfiprintf_r+0xc0>
 8009e34:	9b05      	ldr	r3, [sp, #20]
 8009e36:	0021      	movs	r1, r4
 8009e38:	0030      	movs	r0, r6
 8009e3a:	9a03      	ldr	r2, [sp, #12]
 8009e3c:	f7ff ff96 	bl	8009d6c <__sfputs_r>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d100      	bne.n	8009e46 <_vfiprintf_r+0xb6>
 8009e44:	e0b5      	b.n	8009fb2 <_vfiprintf_r+0x222>
 8009e46:	696a      	ldr	r2, [r5, #20]
 8009e48:	9b05      	ldr	r3, [sp, #20]
 8009e4a:	4694      	mov	ip, r2
 8009e4c:	4463      	add	r3, ip
 8009e4e:	616b      	str	r3, [r5, #20]
 8009e50:	783b      	ldrb	r3, [r7, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d100      	bne.n	8009e58 <_vfiprintf_r+0xc8>
 8009e56:	e0ac      	b.n	8009fb2 <_vfiprintf_r+0x222>
 8009e58:	2201      	movs	r2, #1
 8009e5a:	1c7b      	adds	r3, r7, #1
 8009e5c:	9303      	str	r3, [sp, #12]
 8009e5e:	2300      	movs	r3, #0
 8009e60:	4252      	negs	r2, r2
 8009e62:	606a      	str	r2, [r5, #4]
 8009e64:	a904      	add	r1, sp, #16
 8009e66:	3254      	adds	r2, #84	; 0x54
 8009e68:	1852      	adds	r2, r2, r1
 8009e6a:	602b      	str	r3, [r5, #0]
 8009e6c:	60eb      	str	r3, [r5, #12]
 8009e6e:	60ab      	str	r3, [r5, #8]
 8009e70:	7013      	strb	r3, [r2, #0]
 8009e72:	65ab      	str	r3, [r5, #88]	; 0x58
 8009e74:	9b03      	ldr	r3, [sp, #12]
 8009e76:	2205      	movs	r2, #5
 8009e78:	7819      	ldrb	r1, [r3, #0]
 8009e7a:	485d      	ldr	r0, [pc, #372]	; (8009ff0 <_vfiprintf_r+0x260>)
 8009e7c:	f7fe ff5a 	bl	8008d34 <memchr>
 8009e80:	9b03      	ldr	r3, [sp, #12]
 8009e82:	1c5f      	adds	r7, r3, #1
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d120      	bne.n	8009eca <_vfiprintf_r+0x13a>
 8009e88:	682a      	ldr	r2, [r5, #0]
 8009e8a:	06d3      	lsls	r3, r2, #27
 8009e8c:	d504      	bpl.n	8009e98 <_vfiprintf_r+0x108>
 8009e8e:	2353      	movs	r3, #83	; 0x53
 8009e90:	a904      	add	r1, sp, #16
 8009e92:	185b      	adds	r3, r3, r1
 8009e94:	2120      	movs	r1, #32
 8009e96:	7019      	strb	r1, [r3, #0]
 8009e98:	0713      	lsls	r3, r2, #28
 8009e9a:	d504      	bpl.n	8009ea6 <_vfiprintf_r+0x116>
 8009e9c:	2353      	movs	r3, #83	; 0x53
 8009e9e:	a904      	add	r1, sp, #16
 8009ea0:	185b      	adds	r3, r3, r1
 8009ea2:	212b      	movs	r1, #43	; 0x2b
 8009ea4:	7019      	strb	r1, [r3, #0]
 8009ea6:	9b03      	ldr	r3, [sp, #12]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8009eac:	d016      	beq.n	8009edc <_vfiprintf_r+0x14c>
 8009eae:	2100      	movs	r1, #0
 8009eb0:	68eb      	ldr	r3, [r5, #12]
 8009eb2:	9f03      	ldr	r7, [sp, #12]
 8009eb4:	783a      	ldrb	r2, [r7, #0]
 8009eb6:	1c78      	adds	r0, r7, #1
 8009eb8:	3a30      	subs	r2, #48	; 0x30
 8009eba:	4684      	mov	ip, r0
 8009ebc:	2a09      	cmp	r2, #9
 8009ebe:	d94f      	bls.n	8009f60 <_vfiprintf_r+0x1d0>
 8009ec0:	2900      	cmp	r1, #0
 8009ec2:	d111      	bne.n	8009ee8 <_vfiprintf_r+0x158>
 8009ec4:	e017      	b.n	8009ef6 <_vfiprintf_r+0x166>
 8009ec6:	3701      	adds	r7, #1
 8009ec8:	e7a9      	b.n	8009e1e <_vfiprintf_r+0x8e>
 8009eca:	4b49      	ldr	r3, [pc, #292]	; (8009ff0 <_vfiprintf_r+0x260>)
 8009ecc:	682a      	ldr	r2, [r5, #0]
 8009ece:	1ac0      	subs	r0, r0, r3
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	4083      	lsls	r3, r0
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	602b      	str	r3, [r5, #0]
 8009ed8:	9703      	str	r7, [sp, #12]
 8009eda:	e7cb      	b.n	8009e74 <_vfiprintf_r+0xe4>
 8009edc:	9b07      	ldr	r3, [sp, #28]
 8009ede:	1d19      	adds	r1, r3, #4
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	9107      	str	r1, [sp, #28]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	db01      	blt.n	8009eec <_vfiprintf_r+0x15c>
 8009ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eea:	e004      	b.n	8009ef6 <_vfiprintf_r+0x166>
 8009eec:	425b      	negs	r3, r3
 8009eee:	60eb      	str	r3, [r5, #12]
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	602b      	str	r3, [r5, #0]
 8009ef6:	783b      	ldrb	r3, [r7, #0]
 8009ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8009efa:	d10a      	bne.n	8009f12 <_vfiprintf_r+0x182>
 8009efc:	787b      	ldrb	r3, [r7, #1]
 8009efe:	2b2a      	cmp	r3, #42	; 0x2a
 8009f00:	d137      	bne.n	8009f72 <_vfiprintf_r+0x1e2>
 8009f02:	9b07      	ldr	r3, [sp, #28]
 8009f04:	3702      	adds	r7, #2
 8009f06:	1d1a      	adds	r2, r3, #4
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	9207      	str	r2, [sp, #28]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	db2d      	blt.n	8009f6c <_vfiprintf_r+0x1dc>
 8009f10:	9309      	str	r3, [sp, #36]	; 0x24
 8009f12:	2203      	movs	r2, #3
 8009f14:	7839      	ldrb	r1, [r7, #0]
 8009f16:	4837      	ldr	r0, [pc, #220]	; (8009ff4 <_vfiprintf_r+0x264>)
 8009f18:	f7fe ff0c 	bl	8008d34 <memchr>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d007      	beq.n	8009f30 <_vfiprintf_r+0x1a0>
 8009f20:	4b34      	ldr	r3, [pc, #208]	; (8009ff4 <_vfiprintf_r+0x264>)
 8009f22:	682a      	ldr	r2, [r5, #0]
 8009f24:	1ac0      	subs	r0, r0, r3
 8009f26:	2340      	movs	r3, #64	; 0x40
 8009f28:	4083      	lsls	r3, r0
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	3701      	adds	r7, #1
 8009f2e:	602b      	str	r3, [r5, #0]
 8009f30:	7839      	ldrb	r1, [r7, #0]
 8009f32:	1c7b      	adds	r3, r7, #1
 8009f34:	2206      	movs	r2, #6
 8009f36:	4830      	ldr	r0, [pc, #192]	; (8009ff8 <_vfiprintf_r+0x268>)
 8009f38:	9303      	str	r3, [sp, #12]
 8009f3a:	7629      	strb	r1, [r5, #24]
 8009f3c:	f7fe fefa 	bl	8008d34 <memchr>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d045      	beq.n	8009fd0 <_vfiprintf_r+0x240>
 8009f44:	4b2d      	ldr	r3, [pc, #180]	; (8009ffc <_vfiprintf_r+0x26c>)
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d127      	bne.n	8009f9a <_vfiprintf_r+0x20a>
 8009f4a:	2207      	movs	r2, #7
 8009f4c:	9b07      	ldr	r3, [sp, #28]
 8009f4e:	3307      	adds	r3, #7
 8009f50:	4393      	bics	r3, r2
 8009f52:	3308      	adds	r3, #8
 8009f54:	9307      	str	r3, [sp, #28]
 8009f56:	696b      	ldr	r3, [r5, #20]
 8009f58:	9a04      	ldr	r2, [sp, #16]
 8009f5a:	189b      	adds	r3, r3, r2
 8009f5c:	616b      	str	r3, [r5, #20]
 8009f5e:	e75d      	b.n	8009e1c <_vfiprintf_r+0x8c>
 8009f60:	210a      	movs	r1, #10
 8009f62:	434b      	muls	r3, r1
 8009f64:	4667      	mov	r7, ip
 8009f66:	189b      	adds	r3, r3, r2
 8009f68:	3909      	subs	r1, #9
 8009f6a:	e7a3      	b.n	8009eb4 <_vfiprintf_r+0x124>
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	425b      	negs	r3, r3
 8009f70:	e7ce      	b.n	8009f10 <_vfiprintf_r+0x180>
 8009f72:	2300      	movs	r3, #0
 8009f74:	001a      	movs	r2, r3
 8009f76:	3701      	adds	r7, #1
 8009f78:	606b      	str	r3, [r5, #4]
 8009f7a:	7839      	ldrb	r1, [r7, #0]
 8009f7c:	1c78      	adds	r0, r7, #1
 8009f7e:	3930      	subs	r1, #48	; 0x30
 8009f80:	4684      	mov	ip, r0
 8009f82:	2909      	cmp	r1, #9
 8009f84:	d903      	bls.n	8009f8e <_vfiprintf_r+0x1fe>
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0c3      	beq.n	8009f12 <_vfiprintf_r+0x182>
 8009f8a:	9209      	str	r2, [sp, #36]	; 0x24
 8009f8c:	e7c1      	b.n	8009f12 <_vfiprintf_r+0x182>
 8009f8e:	230a      	movs	r3, #10
 8009f90:	435a      	muls	r2, r3
 8009f92:	4667      	mov	r7, ip
 8009f94:	1852      	adds	r2, r2, r1
 8009f96:	3b09      	subs	r3, #9
 8009f98:	e7ef      	b.n	8009f7a <_vfiprintf_r+0x1ea>
 8009f9a:	ab07      	add	r3, sp, #28
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	0022      	movs	r2, r4
 8009fa0:	0029      	movs	r1, r5
 8009fa2:	0030      	movs	r0, r6
 8009fa4:	4b16      	ldr	r3, [pc, #88]	; (800a000 <_vfiprintf_r+0x270>)
 8009fa6:	f7fb ffd5 	bl	8005f54 <_printf_float>
 8009faa:	9004      	str	r0, [sp, #16]
 8009fac:	9b04      	ldr	r3, [sp, #16]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	d1d1      	bne.n	8009f56 <_vfiprintf_r+0x1c6>
 8009fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fb4:	07db      	lsls	r3, r3, #31
 8009fb6:	d405      	bmi.n	8009fc4 <_vfiprintf_r+0x234>
 8009fb8:	89a3      	ldrh	r3, [r4, #12]
 8009fba:	059b      	lsls	r3, r3, #22
 8009fbc:	d402      	bmi.n	8009fc4 <_vfiprintf_r+0x234>
 8009fbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fc0:	f000 fac6 	bl	800a550 <__retarget_lock_release_recursive>
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	065b      	lsls	r3, r3, #25
 8009fc8:	d500      	bpl.n	8009fcc <_vfiprintf_r+0x23c>
 8009fca:	e70a      	b.n	8009de2 <_vfiprintf_r+0x52>
 8009fcc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009fce:	e70a      	b.n	8009de6 <_vfiprintf_r+0x56>
 8009fd0:	ab07      	add	r3, sp, #28
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	0022      	movs	r2, r4
 8009fd6:	0029      	movs	r1, r5
 8009fd8:	0030      	movs	r0, r6
 8009fda:	4b09      	ldr	r3, [pc, #36]	; (800a000 <_vfiprintf_r+0x270>)
 8009fdc:	f7fc fa6c 	bl	80064b8 <_printf_i>
 8009fe0:	e7e3      	b.n	8009faa <_vfiprintf_r+0x21a>
 8009fe2:	46c0      	nop			; (mov r8, r8)
 8009fe4:	0800addc 	.word	0x0800addc
 8009fe8:	0800adfc 	.word	0x0800adfc
 8009fec:	0800adbc 	.word	0x0800adbc
 8009ff0:	0800ad6c 	.word	0x0800ad6c
 8009ff4:	0800ad72 	.word	0x0800ad72
 8009ff8:	0800ad76 	.word	0x0800ad76
 8009ffc:	08005f55 	.word	0x08005f55
 800a000:	08009d6d 	.word	0x08009d6d

0800a004 <__swbuf_r>:
 800a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a006:	0005      	movs	r5, r0
 800a008:	000e      	movs	r6, r1
 800a00a:	0014      	movs	r4, r2
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d004      	beq.n	800a01a <__swbuf_r+0x16>
 800a010:	6983      	ldr	r3, [r0, #24]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <__swbuf_r+0x16>
 800a016:	f000 f9f9 	bl	800a40c <__sinit>
 800a01a:	4b22      	ldr	r3, [pc, #136]	; (800a0a4 <__swbuf_r+0xa0>)
 800a01c:	429c      	cmp	r4, r3
 800a01e:	d12e      	bne.n	800a07e <__swbuf_r+0x7a>
 800a020:	686c      	ldr	r4, [r5, #4]
 800a022:	69a3      	ldr	r3, [r4, #24]
 800a024:	60a3      	str	r3, [r4, #8]
 800a026:	89a3      	ldrh	r3, [r4, #12]
 800a028:	071b      	lsls	r3, r3, #28
 800a02a:	d532      	bpl.n	800a092 <__swbuf_r+0x8e>
 800a02c:	6923      	ldr	r3, [r4, #16]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d02f      	beq.n	800a092 <__swbuf_r+0x8e>
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	6922      	ldr	r2, [r4, #16]
 800a036:	b2f7      	uxtb	r7, r6
 800a038:	1a98      	subs	r0, r3, r2
 800a03a:	6963      	ldr	r3, [r4, #20]
 800a03c:	b2f6      	uxtb	r6, r6
 800a03e:	4283      	cmp	r3, r0
 800a040:	dc05      	bgt.n	800a04e <__swbuf_r+0x4a>
 800a042:	0021      	movs	r1, r4
 800a044:	0028      	movs	r0, r5
 800a046:	f000 f93f 	bl	800a2c8 <_fflush_r>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	d127      	bne.n	800a09e <__swbuf_r+0x9a>
 800a04e:	68a3      	ldr	r3, [r4, #8]
 800a050:	3001      	adds	r0, #1
 800a052:	3b01      	subs	r3, #1
 800a054:	60a3      	str	r3, [r4, #8]
 800a056:	6823      	ldr	r3, [r4, #0]
 800a058:	1c5a      	adds	r2, r3, #1
 800a05a:	6022      	str	r2, [r4, #0]
 800a05c:	701f      	strb	r7, [r3, #0]
 800a05e:	6963      	ldr	r3, [r4, #20]
 800a060:	4283      	cmp	r3, r0
 800a062:	d004      	beq.n	800a06e <__swbuf_r+0x6a>
 800a064:	89a3      	ldrh	r3, [r4, #12]
 800a066:	07db      	lsls	r3, r3, #31
 800a068:	d507      	bpl.n	800a07a <__swbuf_r+0x76>
 800a06a:	2e0a      	cmp	r6, #10
 800a06c:	d105      	bne.n	800a07a <__swbuf_r+0x76>
 800a06e:	0021      	movs	r1, r4
 800a070:	0028      	movs	r0, r5
 800a072:	f000 f929 	bl	800a2c8 <_fflush_r>
 800a076:	2800      	cmp	r0, #0
 800a078:	d111      	bne.n	800a09e <__swbuf_r+0x9a>
 800a07a:	0030      	movs	r0, r6
 800a07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a07e:	4b0a      	ldr	r3, [pc, #40]	; (800a0a8 <__swbuf_r+0xa4>)
 800a080:	429c      	cmp	r4, r3
 800a082:	d101      	bne.n	800a088 <__swbuf_r+0x84>
 800a084:	68ac      	ldr	r4, [r5, #8]
 800a086:	e7cc      	b.n	800a022 <__swbuf_r+0x1e>
 800a088:	4b08      	ldr	r3, [pc, #32]	; (800a0ac <__swbuf_r+0xa8>)
 800a08a:	429c      	cmp	r4, r3
 800a08c:	d1c9      	bne.n	800a022 <__swbuf_r+0x1e>
 800a08e:	68ec      	ldr	r4, [r5, #12]
 800a090:	e7c7      	b.n	800a022 <__swbuf_r+0x1e>
 800a092:	0021      	movs	r1, r4
 800a094:	0028      	movs	r0, r5
 800a096:	f000 f80b 	bl	800a0b0 <__swsetup_r>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d0c9      	beq.n	800a032 <__swbuf_r+0x2e>
 800a09e:	2601      	movs	r6, #1
 800a0a0:	4276      	negs	r6, r6
 800a0a2:	e7ea      	b.n	800a07a <__swbuf_r+0x76>
 800a0a4:	0800addc 	.word	0x0800addc
 800a0a8:	0800adfc 	.word	0x0800adfc
 800a0ac:	0800adbc 	.word	0x0800adbc

0800a0b0 <__swsetup_r>:
 800a0b0:	4b37      	ldr	r3, [pc, #220]	; (800a190 <__swsetup_r+0xe0>)
 800a0b2:	b570      	push	{r4, r5, r6, lr}
 800a0b4:	681d      	ldr	r5, [r3, #0]
 800a0b6:	0006      	movs	r6, r0
 800a0b8:	000c      	movs	r4, r1
 800a0ba:	2d00      	cmp	r5, #0
 800a0bc:	d005      	beq.n	800a0ca <__swsetup_r+0x1a>
 800a0be:	69ab      	ldr	r3, [r5, #24]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d102      	bne.n	800a0ca <__swsetup_r+0x1a>
 800a0c4:	0028      	movs	r0, r5
 800a0c6:	f000 f9a1 	bl	800a40c <__sinit>
 800a0ca:	4b32      	ldr	r3, [pc, #200]	; (800a194 <__swsetup_r+0xe4>)
 800a0cc:	429c      	cmp	r4, r3
 800a0ce:	d10f      	bne.n	800a0f0 <__swsetup_r+0x40>
 800a0d0:	686c      	ldr	r4, [r5, #4]
 800a0d2:	230c      	movs	r3, #12
 800a0d4:	5ee2      	ldrsh	r2, [r4, r3]
 800a0d6:	b293      	uxth	r3, r2
 800a0d8:	0711      	lsls	r1, r2, #28
 800a0da:	d42d      	bmi.n	800a138 <__swsetup_r+0x88>
 800a0dc:	06d9      	lsls	r1, r3, #27
 800a0de:	d411      	bmi.n	800a104 <__swsetup_r+0x54>
 800a0e0:	2309      	movs	r3, #9
 800a0e2:	2001      	movs	r0, #1
 800a0e4:	6033      	str	r3, [r6, #0]
 800a0e6:	3337      	adds	r3, #55	; 0x37
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	81a3      	strh	r3, [r4, #12]
 800a0ec:	4240      	negs	r0, r0
 800a0ee:	bd70      	pop	{r4, r5, r6, pc}
 800a0f0:	4b29      	ldr	r3, [pc, #164]	; (800a198 <__swsetup_r+0xe8>)
 800a0f2:	429c      	cmp	r4, r3
 800a0f4:	d101      	bne.n	800a0fa <__swsetup_r+0x4a>
 800a0f6:	68ac      	ldr	r4, [r5, #8]
 800a0f8:	e7eb      	b.n	800a0d2 <__swsetup_r+0x22>
 800a0fa:	4b28      	ldr	r3, [pc, #160]	; (800a19c <__swsetup_r+0xec>)
 800a0fc:	429c      	cmp	r4, r3
 800a0fe:	d1e8      	bne.n	800a0d2 <__swsetup_r+0x22>
 800a100:	68ec      	ldr	r4, [r5, #12]
 800a102:	e7e6      	b.n	800a0d2 <__swsetup_r+0x22>
 800a104:	075b      	lsls	r3, r3, #29
 800a106:	d513      	bpl.n	800a130 <__swsetup_r+0x80>
 800a108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a10a:	2900      	cmp	r1, #0
 800a10c:	d008      	beq.n	800a120 <__swsetup_r+0x70>
 800a10e:	0023      	movs	r3, r4
 800a110:	3344      	adds	r3, #68	; 0x44
 800a112:	4299      	cmp	r1, r3
 800a114:	d002      	beq.n	800a11c <__swsetup_r+0x6c>
 800a116:	0030      	movs	r0, r6
 800a118:	f7ff fb16 	bl	8009748 <_free_r>
 800a11c:	2300      	movs	r3, #0
 800a11e:	6363      	str	r3, [r4, #52]	; 0x34
 800a120:	2224      	movs	r2, #36	; 0x24
 800a122:	89a3      	ldrh	r3, [r4, #12]
 800a124:	4393      	bics	r3, r2
 800a126:	81a3      	strh	r3, [r4, #12]
 800a128:	2300      	movs	r3, #0
 800a12a:	6063      	str	r3, [r4, #4]
 800a12c:	6923      	ldr	r3, [r4, #16]
 800a12e:	6023      	str	r3, [r4, #0]
 800a130:	2308      	movs	r3, #8
 800a132:	89a2      	ldrh	r2, [r4, #12]
 800a134:	4313      	orrs	r3, r2
 800a136:	81a3      	strh	r3, [r4, #12]
 800a138:	6923      	ldr	r3, [r4, #16]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10b      	bne.n	800a156 <__swsetup_r+0xa6>
 800a13e:	21a0      	movs	r1, #160	; 0xa0
 800a140:	2280      	movs	r2, #128	; 0x80
 800a142:	89a3      	ldrh	r3, [r4, #12]
 800a144:	0089      	lsls	r1, r1, #2
 800a146:	0092      	lsls	r2, r2, #2
 800a148:	400b      	ands	r3, r1
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d003      	beq.n	800a156 <__swsetup_r+0xa6>
 800a14e:	0021      	movs	r1, r4
 800a150:	0030      	movs	r0, r6
 800a152:	f000 fa27 	bl	800a5a4 <__smakebuf_r>
 800a156:	220c      	movs	r2, #12
 800a158:	5ea3      	ldrsh	r3, [r4, r2]
 800a15a:	2001      	movs	r0, #1
 800a15c:	001a      	movs	r2, r3
 800a15e:	b299      	uxth	r1, r3
 800a160:	4002      	ands	r2, r0
 800a162:	4203      	tst	r3, r0
 800a164:	d00f      	beq.n	800a186 <__swsetup_r+0xd6>
 800a166:	2200      	movs	r2, #0
 800a168:	60a2      	str	r2, [r4, #8]
 800a16a:	6962      	ldr	r2, [r4, #20]
 800a16c:	4252      	negs	r2, r2
 800a16e:	61a2      	str	r2, [r4, #24]
 800a170:	2000      	movs	r0, #0
 800a172:	6922      	ldr	r2, [r4, #16]
 800a174:	4282      	cmp	r2, r0
 800a176:	d1ba      	bne.n	800a0ee <__swsetup_r+0x3e>
 800a178:	060a      	lsls	r2, r1, #24
 800a17a:	d5b8      	bpl.n	800a0ee <__swsetup_r+0x3e>
 800a17c:	2240      	movs	r2, #64	; 0x40
 800a17e:	4313      	orrs	r3, r2
 800a180:	81a3      	strh	r3, [r4, #12]
 800a182:	3801      	subs	r0, #1
 800a184:	e7b3      	b.n	800a0ee <__swsetup_r+0x3e>
 800a186:	0788      	lsls	r0, r1, #30
 800a188:	d400      	bmi.n	800a18c <__swsetup_r+0xdc>
 800a18a:	6962      	ldr	r2, [r4, #20]
 800a18c:	60a2      	str	r2, [r4, #8]
 800a18e:	e7ef      	b.n	800a170 <__swsetup_r+0xc0>
 800a190:	2000000c 	.word	0x2000000c
 800a194:	0800addc 	.word	0x0800addc
 800a198:	0800adfc 	.word	0x0800adfc
 800a19c:	0800adbc 	.word	0x0800adbc

0800a1a0 <abort>:
 800a1a0:	2006      	movs	r0, #6
 800a1a2:	b510      	push	{r4, lr}
 800a1a4:	f000 fa74 	bl	800a690 <raise>
 800a1a8:	2001      	movs	r0, #1
 800a1aa:	f7f8 fcc5 	bl	8002b38 <_exit>
	...

0800a1b0 <__sflush_r>:
 800a1b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1b2:	898b      	ldrh	r3, [r1, #12]
 800a1b4:	0005      	movs	r5, r0
 800a1b6:	000c      	movs	r4, r1
 800a1b8:	071a      	lsls	r2, r3, #28
 800a1ba:	d45f      	bmi.n	800a27c <__sflush_r+0xcc>
 800a1bc:	684a      	ldr	r2, [r1, #4]
 800a1be:	2a00      	cmp	r2, #0
 800a1c0:	dc04      	bgt.n	800a1cc <__sflush_r+0x1c>
 800a1c2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a1c4:	2a00      	cmp	r2, #0
 800a1c6:	dc01      	bgt.n	800a1cc <__sflush_r+0x1c>
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a1cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a1ce:	2f00      	cmp	r7, #0
 800a1d0:	d0fa      	beq.n	800a1c8 <__sflush_r+0x18>
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	2180      	movs	r1, #128	; 0x80
 800a1d6:	682e      	ldr	r6, [r5, #0]
 800a1d8:	602a      	str	r2, [r5, #0]
 800a1da:	001a      	movs	r2, r3
 800a1dc:	0149      	lsls	r1, r1, #5
 800a1de:	400a      	ands	r2, r1
 800a1e0:	420b      	tst	r3, r1
 800a1e2:	d034      	beq.n	800a24e <__sflush_r+0x9e>
 800a1e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1e6:	89a3      	ldrh	r3, [r4, #12]
 800a1e8:	075b      	lsls	r3, r3, #29
 800a1ea:	d506      	bpl.n	800a1fa <__sflush_r+0x4a>
 800a1ec:	6863      	ldr	r3, [r4, #4]
 800a1ee:	1ac0      	subs	r0, r0, r3
 800a1f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <__sflush_r+0x4a>
 800a1f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1f8:	1ac0      	subs	r0, r0, r3
 800a1fa:	0002      	movs	r2, r0
 800a1fc:	6a21      	ldr	r1, [r4, #32]
 800a1fe:	2300      	movs	r3, #0
 800a200:	0028      	movs	r0, r5
 800a202:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a204:	47b8      	blx	r7
 800a206:	89a1      	ldrh	r1, [r4, #12]
 800a208:	1c43      	adds	r3, r0, #1
 800a20a:	d106      	bne.n	800a21a <__sflush_r+0x6a>
 800a20c:	682b      	ldr	r3, [r5, #0]
 800a20e:	2b1d      	cmp	r3, #29
 800a210:	d831      	bhi.n	800a276 <__sflush_r+0xc6>
 800a212:	4a2c      	ldr	r2, [pc, #176]	; (800a2c4 <__sflush_r+0x114>)
 800a214:	40da      	lsrs	r2, r3
 800a216:	07d3      	lsls	r3, r2, #31
 800a218:	d52d      	bpl.n	800a276 <__sflush_r+0xc6>
 800a21a:	2300      	movs	r3, #0
 800a21c:	6063      	str	r3, [r4, #4]
 800a21e:	6923      	ldr	r3, [r4, #16]
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	04cb      	lsls	r3, r1, #19
 800a224:	d505      	bpl.n	800a232 <__sflush_r+0x82>
 800a226:	1c43      	adds	r3, r0, #1
 800a228:	d102      	bne.n	800a230 <__sflush_r+0x80>
 800a22a:	682b      	ldr	r3, [r5, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d100      	bne.n	800a232 <__sflush_r+0x82>
 800a230:	6560      	str	r0, [r4, #84]	; 0x54
 800a232:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a234:	602e      	str	r6, [r5, #0]
 800a236:	2900      	cmp	r1, #0
 800a238:	d0c6      	beq.n	800a1c8 <__sflush_r+0x18>
 800a23a:	0023      	movs	r3, r4
 800a23c:	3344      	adds	r3, #68	; 0x44
 800a23e:	4299      	cmp	r1, r3
 800a240:	d002      	beq.n	800a248 <__sflush_r+0x98>
 800a242:	0028      	movs	r0, r5
 800a244:	f7ff fa80 	bl	8009748 <_free_r>
 800a248:	2000      	movs	r0, #0
 800a24a:	6360      	str	r0, [r4, #52]	; 0x34
 800a24c:	e7bd      	b.n	800a1ca <__sflush_r+0x1a>
 800a24e:	2301      	movs	r3, #1
 800a250:	0028      	movs	r0, r5
 800a252:	6a21      	ldr	r1, [r4, #32]
 800a254:	47b8      	blx	r7
 800a256:	1c43      	adds	r3, r0, #1
 800a258:	d1c5      	bne.n	800a1e6 <__sflush_r+0x36>
 800a25a:	682b      	ldr	r3, [r5, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d0c2      	beq.n	800a1e6 <__sflush_r+0x36>
 800a260:	2b1d      	cmp	r3, #29
 800a262:	d001      	beq.n	800a268 <__sflush_r+0xb8>
 800a264:	2b16      	cmp	r3, #22
 800a266:	d101      	bne.n	800a26c <__sflush_r+0xbc>
 800a268:	602e      	str	r6, [r5, #0]
 800a26a:	e7ad      	b.n	800a1c8 <__sflush_r+0x18>
 800a26c:	2340      	movs	r3, #64	; 0x40
 800a26e:	89a2      	ldrh	r2, [r4, #12]
 800a270:	4313      	orrs	r3, r2
 800a272:	81a3      	strh	r3, [r4, #12]
 800a274:	e7a9      	b.n	800a1ca <__sflush_r+0x1a>
 800a276:	2340      	movs	r3, #64	; 0x40
 800a278:	430b      	orrs	r3, r1
 800a27a:	e7fa      	b.n	800a272 <__sflush_r+0xc2>
 800a27c:	690f      	ldr	r7, [r1, #16]
 800a27e:	2f00      	cmp	r7, #0
 800a280:	d0a2      	beq.n	800a1c8 <__sflush_r+0x18>
 800a282:	680a      	ldr	r2, [r1, #0]
 800a284:	600f      	str	r7, [r1, #0]
 800a286:	1bd2      	subs	r2, r2, r7
 800a288:	9201      	str	r2, [sp, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	079b      	lsls	r3, r3, #30
 800a28e:	d100      	bne.n	800a292 <__sflush_r+0xe2>
 800a290:	694a      	ldr	r2, [r1, #20]
 800a292:	60a2      	str	r2, [r4, #8]
 800a294:	9b01      	ldr	r3, [sp, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	dc00      	bgt.n	800a29c <__sflush_r+0xec>
 800a29a:	e795      	b.n	800a1c8 <__sflush_r+0x18>
 800a29c:	003a      	movs	r2, r7
 800a29e:	0028      	movs	r0, r5
 800a2a0:	9b01      	ldr	r3, [sp, #4]
 800a2a2:	6a21      	ldr	r1, [r4, #32]
 800a2a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a2a6:	47b0      	blx	r6
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	dc06      	bgt.n	800a2ba <__sflush_r+0x10a>
 800a2ac:	2340      	movs	r3, #64	; 0x40
 800a2ae:	2001      	movs	r0, #1
 800a2b0:	89a2      	ldrh	r2, [r4, #12]
 800a2b2:	4240      	negs	r0, r0
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	81a3      	strh	r3, [r4, #12]
 800a2b8:	e787      	b.n	800a1ca <__sflush_r+0x1a>
 800a2ba:	9b01      	ldr	r3, [sp, #4]
 800a2bc:	183f      	adds	r7, r7, r0
 800a2be:	1a1b      	subs	r3, r3, r0
 800a2c0:	9301      	str	r3, [sp, #4]
 800a2c2:	e7e7      	b.n	800a294 <__sflush_r+0xe4>
 800a2c4:	20400001 	.word	0x20400001

0800a2c8 <_fflush_r>:
 800a2c8:	690b      	ldr	r3, [r1, #16]
 800a2ca:	b570      	push	{r4, r5, r6, lr}
 800a2cc:	0005      	movs	r5, r0
 800a2ce:	000c      	movs	r4, r1
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d102      	bne.n	800a2da <_fflush_r+0x12>
 800a2d4:	2500      	movs	r5, #0
 800a2d6:	0028      	movs	r0, r5
 800a2d8:	bd70      	pop	{r4, r5, r6, pc}
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d004      	beq.n	800a2e8 <_fflush_r+0x20>
 800a2de:	6983      	ldr	r3, [r0, #24]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d101      	bne.n	800a2e8 <_fflush_r+0x20>
 800a2e4:	f000 f892 	bl	800a40c <__sinit>
 800a2e8:	4b14      	ldr	r3, [pc, #80]	; (800a33c <_fflush_r+0x74>)
 800a2ea:	429c      	cmp	r4, r3
 800a2ec:	d11b      	bne.n	800a326 <_fflush_r+0x5e>
 800a2ee:	686c      	ldr	r4, [r5, #4]
 800a2f0:	220c      	movs	r2, #12
 800a2f2:	5ea3      	ldrsh	r3, [r4, r2]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d0ed      	beq.n	800a2d4 <_fflush_r+0xc>
 800a2f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2fa:	07d2      	lsls	r2, r2, #31
 800a2fc:	d404      	bmi.n	800a308 <_fflush_r+0x40>
 800a2fe:	059b      	lsls	r3, r3, #22
 800a300:	d402      	bmi.n	800a308 <_fflush_r+0x40>
 800a302:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a304:	f000 f923 	bl	800a54e <__retarget_lock_acquire_recursive>
 800a308:	0028      	movs	r0, r5
 800a30a:	0021      	movs	r1, r4
 800a30c:	f7ff ff50 	bl	800a1b0 <__sflush_r>
 800a310:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a312:	0005      	movs	r5, r0
 800a314:	07db      	lsls	r3, r3, #31
 800a316:	d4de      	bmi.n	800a2d6 <_fflush_r+0xe>
 800a318:	89a3      	ldrh	r3, [r4, #12]
 800a31a:	059b      	lsls	r3, r3, #22
 800a31c:	d4db      	bmi.n	800a2d6 <_fflush_r+0xe>
 800a31e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a320:	f000 f916 	bl	800a550 <__retarget_lock_release_recursive>
 800a324:	e7d7      	b.n	800a2d6 <_fflush_r+0xe>
 800a326:	4b06      	ldr	r3, [pc, #24]	; (800a340 <_fflush_r+0x78>)
 800a328:	429c      	cmp	r4, r3
 800a32a:	d101      	bne.n	800a330 <_fflush_r+0x68>
 800a32c:	68ac      	ldr	r4, [r5, #8]
 800a32e:	e7df      	b.n	800a2f0 <_fflush_r+0x28>
 800a330:	4b04      	ldr	r3, [pc, #16]	; (800a344 <_fflush_r+0x7c>)
 800a332:	429c      	cmp	r4, r3
 800a334:	d1dc      	bne.n	800a2f0 <_fflush_r+0x28>
 800a336:	68ec      	ldr	r4, [r5, #12]
 800a338:	e7da      	b.n	800a2f0 <_fflush_r+0x28>
 800a33a:	46c0      	nop			; (mov r8, r8)
 800a33c:	0800addc 	.word	0x0800addc
 800a340:	0800adfc 	.word	0x0800adfc
 800a344:	0800adbc 	.word	0x0800adbc

0800a348 <std>:
 800a348:	2300      	movs	r3, #0
 800a34a:	b510      	push	{r4, lr}
 800a34c:	0004      	movs	r4, r0
 800a34e:	6003      	str	r3, [r0, #0]
 800a350:	6043      	str	r3, [r0, #4]
 800a352:	6083      	str	r3, [r0, #8]
 800a354:	8181      	strh	r1, [r0, #12]
 800a356:	6643      	str	r3, [r0, #100]	; 0x64
 800a358:	0019      	movs	r1, r3
 800a35a:	81c2      	strh	r2, [r0, #14]
 800a35c:	6103      	str	r3, [r0, #16]
 800a35e:	6143      	str	r3, [r0, #20]
 800a360:	6183      	str	r3, [r0, #24]
 800a362:	2208      	movs	r2, #8
 800a364:	305c      	adds	r0, #92	; 0x5c
 800a366:	f7fb fd43 	bl	8005df0 <memset>
 800a36a:	4b05      	ldr	r3, [pc, #20]	; (800a380 <std+0x38>)
 800a36c:	6224      	str	r4, [r4, #32]
 800a36e:	6263      	str	r3, [r4, #36]	; 0x24
 800a370:	4b04      	ldr	r3, [pc, #16]	; (800a384 <std+0x3c>)
 800a372:	62a3      	str	r3, [r4, #40]	; 0x28
 800a374:	4b04      	ldr	r3, [pc, #16]	; (800a388 <std+0x40>)
 800a376:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a378:	4b04      	ldr	r3, [pc, #16]	; (800a38c <std+0x44>)
 800a37a:	6323      	str	r3, [r4, #48]	; 0x30
 800a37c:	bd10      	pop	{r4, pc}
 800a37e:	46c0      	nop			; (mov r8, r8)
 800a380:	0800a6d1 	.word	0x0800a6d1
 800a384:	0800a6f9 	.word	0x0800a6f9
 800a388:	0800a731 	.word	0x0800a731
 800a38c:	0800a75d 	.word	0x0800a75d

0800a390 <_cleanup_r>:
 800a390:	b510      	push	{r4, lr}
 800a392:	4902      	ldr	r1, [pc, #8]	; (800a39c <_cleanup_r+0xc>)
 800a394:	f000 f8ba 	bl	800a50c <_fwalk_reent>
 800a398:	bd10      	pop	{r4, pc}
 800a39a:	46c0      	nop			; (mov r8, r8)
 800a39c:	0800a2c9 	.word	0x0800a2c9

0800a3a0 <__sfmoreglue>:
 800a3a0:	b570      	push	{r4, r5, r6, lr}
 800a3a2:	2568      	movs	r5, #104	; 0x68
 800a3a4:	1e4a      	subs	r2, r1, #1
 800a3a6:	4355      	muls	r5, r2
 800a3a8:	000e      	movs	r6, r1
 800a3aa:	0029      	movs	r1, r5
 800a3ac:	3174      	adds	r1, #116	; 0x74
 800a3ae:	f7ff fa37 	bl	8009820 <_malloc_r>
 800a3b2:	1e04      	subs	r4, r0, #0
 800a3b4:	d008      	beq.n	800a3c8 <__sfmoreglue+0x28>
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	002a      	movs	r2, r5
 800a3ba:	6001      	str	r1, [r0, #0]
 800a3bc:	6046      	str	r6, [r0, #4]
 800a3be:	300c      	adds	r0, #12
 800a3c0:	60a0      	str	r0, [r4, #8]
 800a3c2:	3268      	adds	r2, #104	; 0x68
 800a3c4:	f7fb fd14 	bl	8005df0 <memset>
 800a3c8:	0020      	movs	r0, r4
 800a3ca:	bd70      	pop	{r4, r5, r6, pc}

0800a3cc <__sfp_lock_acquire>:
 800a3cc:	b510      	push	{r4, lr}
 800a3ce:	4802      	ldr	r0, [pc, #8]	; (800a3d8 <__sfp_lock_acquire+0xc>)
 800a3d0:	f000 f8bd 	bl	800a54e <__retarget_lock_acquire_recursive>
 800a3d4:	bd10      	pop	{r4, pc}
 800a3d6:	46c0      	nop			; (mov r8, r8)
 800a3d8:	200003a1 	.word	0x200003a1

0800a3dc <__sfp_lock_release>:
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	4802      	ldr	r0, [pc, #8]	; (800a3e8 <__sfp_lock_release+0xc>)
 800a3e0:	f000 f8b6 	bl	800a550 <__retarget_lock_release_recursive>
 800a3e4:	bd10      	pop	{r4, pc}
 800a3e6:	46c0      	nop			; (mov r8, r8)
 800a3e8:	200003a1 	.word	0x200003a1

0800a3ec <__sinit_lock_acquire>:
 800a3ec:	b510      	push	{r4, lr}
 800a3ee:	4802      	ldr	r0, [pc, #8]	; (800a3f8 <__sinit_lock_acquire+0xc>)
 800a3f0:	f000 f8ad 	bl	800a54e <__retarget_lock_acquire_recursive>
 800a3f4:	bd10      	pop	{r4, pc}
 800a3f6:	46c0      	nop			; (mov r8, r8)
 800a3f8:	200003a2 	.word	0x200003a2

0800a3fc <__sinit_lock_release>:
 800a3fc:	b510      	push	{r4, lr}
 800a3fe:	4802      	ldr	r0, [pc, #8]	; (800a408 <__sinit_lock_release+0xc>)
 800a400:	f000 f8a6 	bl	800a550 <__retarget_lock_release_recursive>
 800a404:	bd10      	pop	{r4, pc}
 800a406:	46c0      	nop			; (mov r8, r8)
 800a408:	200003a2 	.word	0x200003a2

0800a40c <__sinit>:
 800a40c:	b513      	push	{r0, r1, r4, lr}
 800a40e:	0004      	movs	r4, r0
 800a410:	f7ff ffec 	bl	800a3ec <__sinit_lock_acquire>
 800a414:	69a3      	ldr	r3, [r4, #24]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d002      	beq.n	800a420 <__sinit+0x14>
 800a41a:	f7ff ffef 	bl	800a3fc <__sinit_lock_release>
 800a41e:	bd13      	pop	{r0, r1, r4, pc}
 800a420:	64a3      	str	r3, [r4, #72]	; 0x48
 800a422:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a424:	6523      	str	r3, [r4, #80]	; 0x50
 800a426:	4b13      	ldr	r3, [pc, #76]	; (800a474 <__sinit+0x68>)
 800a428:	4a13      	ldr	r2, [pc, #76]	; (800a478 <__sinit+0x6c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	42a3      	cmp	r3, r4
 800a432:	d101      	bne.n	800a438 <__sinit+0x2c>
 800a434:	2301      	movs	r3, #1
 800a436:	61a3      	str	r3, [r4, #24]
 800a438:	0020      	movs	r0, r4
 800a43a:	f000 f81f 	bl	800a47c <__sfp>
 800a43e:	6060      	str	r0, [r4, #4]
 800a440:	0020      	movs	r0, r4
 800a442:	f000 f81b 	bl	800a47c <__sfp>
 800a446:	60a0      	str	r0, [r4, #8]
 800a448:	0020      	movs	r0, r4
 800a44a:	f000 f817 	bl	800a47c <__sfp>
 800a44e:	2200      	movs	r2, #0
 800a450:	2104      	movs	r1, #4
 800a452:	60e0      	str	r0, [r4, #12]
 800a454:	6860      	ldr	r0, [r4, #4]
 800a456:	f7ff ff77 	bl	800a348 <std>
 800a45a:	2201      	movs	r2, #1
 800a45c:	2109      	movs	r1, #9
 800a45e:	68a0      	ldr	r0, [r4, #8]
 800a460:	f7ff ff72 	bl	800a348 <std>
 800a464:	2202      	movs	r2, #2
 800a466:	2112      	movs	r1, #18
 800a468:	68e0      	ldr	r0, [r4, #12]
 800a46a:	f7ff ff6d 	bl	800a348 <std>
 800a46e:	2301      	movs	r3, #1
 800a470:	61a3      	str	r3, [r4, #24]
 800a472:	e7d2      	b.n	800a41a <__sinit+0xe>
 800a474:	0800a978 	.word	0x0800a978
 800a478:	0800a391 	.word	0x0800a391

0800a47c <__sfp>:
 800a47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47e:	0007      	movs	r7, r0
 800a480:	f7ff ffa4 	bl	800a3cc <__sfp_lock_acquire>
 800a484:	4b1f      	ldr	r3, [pc, #124]	; (800a504 <__sfp+0x88>)
 800a486:	681e      	ldr	r6, [r3, #0]
 800a488:	69b3      	ldr	r3, [r6, #24]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d102      	bne.n	800a494 <__sfp+0x18>
 800a48e:	0030      	movs	r0, r6
 800a490:	f7ff ffbc 	bl	800a40c <__sinit>
 800a494:	3648      	adds	r6, #72	; 0x48
 800a496:	68b4      	ldr	r4, [r6, #8]
 800a498:	6873      	ldr	r3, [r6, #4]
 800a49a:	3b01      	subs	r3, #1
 800a49c:	d504      	bpl.n	800a4a8 <__sfp+0x2c>
 800a49e:	6833      	ldr	r3, [r6, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d022      	beq.n	800a4ea <__sfp+0x6e>
 800a4a4:	6836      	ldr	r6, [r6, #0]
 800a4a6:	e7f6      	b.n	800a496 <__sfp+0x1a>
 800a4a8:	220c      	movs	r2, #12
 800a4aa:	5ea5      	ldrsh	r5, [r4, r2]
 800a4ac:	2d00      	cmp	r5, #0
 800a4ae:	d11a      	bne.n	800a4e6 <__sfp+0x6a>
 800a4b0:	0020      	movs	r0, r4
 800a4b2:	4b15      	ldr	r3, [pc, #84]	; (800a508 <__sfp+0x8c>)
 800a4b4:	3058      	adds	r0, #88	; 0x58
 800a4b6:	60e3      	str	r3, [r4, #12]
 800a4b8:	6665      	str	r5, [r4, #100]	; 0x64
 800a4ba:	f000 f847 	bl	800a54c <__retarget_lock_init_recursive>
 800a4be:	f7ff ff8d 	bl	800a3dc <__sfp_lock_release>
 800a4c2:	0020      	movs	r0, r4
 800a4c4:	2208      	movs	r2, #8
 800a4c6:	0029      	movs	r1, r5
 800a4c8:	6025      	str	r5, [r4, #0]
 800a4ca:	60a5      	str	r5, [r4, #8]
 800a4cc:	6065      	str	r5, [r4, #4]
 800a4ce:	6125      	str	r5, [r4, #16]
 800a4d0:	6165      	str	r5, [r4, #20]
 800a4d2:	61a5      	str	r5, [r4, #24]
 800a4d4:	305c      	adds	r0, #92	; 0x5c
 800a4d6:	f7fb fc8b 	bl	8005df0 <memset>
 800a4da:	6365      	str	r5, [r4, #52]	; 0x34
 800a4dc:	63a5      	str	r5, [r4, #56]	; 0x38
 800a4de:	64a5      	str	r5, [r4, #72]	; 0x48
 800a4e0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a4e2:	0020      	movs	r0, r4
 800a4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4e6:	3468      	adds	r4, #104	; 0x68
 800a4e8:	e7d7      	b.n	800a49a <__sfp+0x1e>
 800a4ea:	2104      	movs	r1, #4
 800a4ec:	0038      	movs	r0, r7
 800a4ee:	f7ff ff57 	bl	800a3a0 <__sfmoreglue>
 800a4f2:	1e04      	subs	r4, r0, #0
 800a4f4:	6030      	str	r0, [r6, #0]
 800a4f6:	d1d5      	bne.n	800a4a4 <__sfp+0x28>
 800a4f8:	f7ff ff70 	bl	800a3dc <__sfp_lock_release>
 800a4fc:	230c      	movs	r3, #12
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	e7ef      	b.n	800a4e2 <__sfp+0x66>
 800a502:	46c0      	nop			; (mov r8, r8)
 800a504:	0800a978 	.word	0x0800a978
 800a508:	ffff0001 	.word	0xffff0001

0800a50c <_fwalk_reent>:
 800a50c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a50e:	0004      	movs	r4, r0
 800a510:	0006      	movs	r6, r0
 800a512:	2700      	movs	r7, #0
 800a514:	9101      	str	r1, [sp, #4]
 800a516:	3448      	adds	r4, #72	; 0x48
 800a518:	6863      	ldr	r3, [r4, #4]
 800a51a:	68a5      	ldr	r5, [r4, #8]
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	9b00      	ldr	r3, [sp, #0]
 800a520:	3b01      	subs	r3, #1
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	d504      	bpl.n	800a530 <_fwalk_reent+0x24>
 800a526:	6824      	ldr	r4, [r4, #0]
 800a528:	2c00      	cmp	r4, #0
 800a52a:	d1f5      	bne.n	800a518 <_fwalk_reent+0xc>
 800a52c:	0038      	movs	r0, r7
 800a52e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a530:	89ab      	ldrh	r3, [r5, #12]
 800a532:	2b01      	cmp	r3, #1
 800a534:	d908      	bls.n	800a548 <_fwalk_reent+0x3c>
 800a536:	220e      	movs	r2, #14
 800a538:	5eab      	ldrsh	r3, [r5, r2]
 800a53a:	3301      	adds	r3, #1
 800a53c:	d004      	beq.n	800a548 <_fwalk_reent+0x3c>
 800a53e:	0029      	movs	r1, r5
 800a540:	0030      	movs	r0, r6
 800a542:	9b01      	ldr	r3, [sp, #4]
 800a544:	4798      	blx	r3
 800a546:	4307      	orrs	r7, r0
 800a548:	3568      	adds	r5, #104	; 0x68
 800a54a:	e7e8      	b.n	800a51e <_fwalk_reent+0x12>

0800a54c <__retarget_lock_init_recursive>:
 800a54c:	4770      	bx	lr

0800a54e <__retarget_lock_acquire_recursive>:
 800a54e:	4770      	bx	lr

0800a550 <__retarget_lock_release_recursive>:
 800a550:	4770      	bx	lr
	...

0800a554 <__swhatbuf_r>:
 800a554:	b570      	push	{r4, r5, r6, lr}
 800a556:	000e      	movs	r6, r1
 800a558:	001d      	movs	r5, r3
 800a55a:	230e      	movs	r3, #14
 800a55c:	5ec9      	ldrsh	r1, [r1, r3]
 800a55e:	0014      	movs	r4, r2
 800a560:	b096      	sub	sp, #88	; 0x58
 800a562:	2900      	cmp	r1, #0
 800a564:	da08      	bge.n	800a578 <__swhatbuf_r+0x24>
 800a566:	220c      	movs	r2, #12
 800a568:	5eb3      	ldrsh	r3, [r6, r2]
 800a56a:	2200      	movs	r2, #0
 800a56c:	602a      	str	r2, [r5, #0]
 800a56e:	061b      	lsls	r3, r3, #24
 800a570:	d411      	bmi.n	800a596 <__swhatbuf_r+0x42>
 800a572:	2380      	movs	r3, #128	; 0x80
 800a574:	00db      	lsls	r3, r3, #3
 800a576:	e00f      	b.n	800a598 <__swhatbuf_r+0x44>
 800a578:	466a      	mov	r2, sp
 800a57a:	f000 f91b 	bl	800a7b4 <_fstat_r>
 800a57e:	2800      	cmp	r0, #0
 800a580:	dbf1      	blt.n	800a566 <__swhatbuf_r+0x12>
 800a582:	23f0      	movs	r3, #240	; 0xf0
 800a584:	9901      	ldr	r1, [sp, #4]
 800a586:	021b      	lsls	r3, r3, #8
 800a588:	4019      	ands	r1, r3
 800a58a:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <__swhatbuf_r+0x4c>)
 800a58c:	18c9      	adds	r1, r1, r3
 800a58e:	424b      	negs	r3, r1
 800a590:	4159      	adcs	r1, r3
 800a592:	6029      	str	r1, [r5, #0]
 800a594:	e7ed      	b.n	800a572 <__swhatbuf_r+0x1e>
 800a596:	2340      	movs	r3, #64	; 0x40
 800a598:	2000      	movs	r0, #0
 800a59a:	6023      	str	r3, [r4, #0]
 800a59c:	b016      	add	sp, #88	; 0x58
 800a59e:	bd70      	pop	{r4, r5, r6, pc}
 800a5a0:	ffffe000 	.word	0xffffe000

0800a5a4 <__smakebuf_r>:
 800a5a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5a6:	2602      	movs	r6, #2
 800a5a8:	898b      	ldrh	r3, [r1, #12]
 800a5aa:	0005      	movs	r5, r0
 800a5ac:	000c      	movs	r4, r1
 800a5ae:	4233      	tst	r3, r6
 800a5b0:	d006      	beq.n	800a5c0 <__smakebuf_r+0x1c>
 800a5b2:	0023      	movs	r3, r4
 800a5b4:	3347      	adds	r3, #71	; 0x47
 800a5b6:	6023      	str	r3, [r4, #0]
 800a5b8:	6123      	str	r3, [r4, #16]
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	6163      	str	r3, [r4, #20]
 800a5be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a5c0:	466a      	mov	r2, sp
 800a5c2:	ab01      	add	r3, sp, #4
 800a5c4:	f7ff ffc6 	bl	800a554 <__swhatbuf_r>
 800a5c8:	9900      	ldr	r1, [sp, #0]
 800a5ca:	0007      	movs	r7, r0
 800a5cc:	0028      	movs	r0, r5
 800a5ce:	f7ff f927 	bl	8009820 <_malloc_r>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	d108      	bne.n	800a5e8 <__smakebuf_r+0x44>
 800a5d6:	220c      	movs	r2, #12
 800a5d8:	5ea3      	ldrsh	r3, [r4, r2]
 800a5da:	059a      	lsls	r2, r3, #22
 800a5dc:	d4ef      	bmi.n	800a5be <__smakebuf_r+0x1a>
 800a5de:	2203      	movs	r2, #3
 800a5e0:	4393      	bics	r3, r2
 800a5e2:	431e      	orrs	r6, r3
 800a5e4:	81a6      	strh	r6, [r4, #12]
 800a5e6:	e7e4      	b.n	800a5b2 <__smakebuf_r+0xe>
 800a5e8:	4b0f      	ldr	r3, [pc, #60]	; (800a628 <__smakebuf_r+0x84>)
 800a5ea:	62ab      	str	r3, [r5, #40]	; 0x28
 800a5ec:	2380      	movs	r3, #128	; 0x80
 800a5ee:	89a2      	ldrh	r2, [r4, #12]
 800a5f0:	6020      	str	r0, [r4, #0]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	81a3      	strh	r3, [r4, #12]
 800a5f6:	9b00      	ldr	r3, [sp, #0]
 800a5f8:	6120      	str	r0, [r4, #16]
 800a5fa:	6163      	str	r3, [r4, #20]
 800a5fc:	9b01      	ldr	r3, [sp, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00d      	beq.n	800a61e <__smakebuf_r+0x7a>
 800a602:	0028      	movs	r0, r5
 800a604:	230e      	movs	r3, #14
 800a606:	5ee1      	ldrsh	r1, [r4, r3]
 800a608:	f000 f8e6 	bl	800a7d8 <_isatty_r>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d006      	beq.n	800a61e <__smakebuf_r+0x7a>
 800a610:	2203      	movs	r2, #3
 800a612:	89a3      	ldrh	r3, [r4, #12]
 800a614:	4393      	bics	r3, r2
 800a616:	001a      	movs	r2, r3
 800a618:	2301      	movs	r3, #1
 800a61a:	4313      	orrs	r3, r2
 800a61c:	81a3      	strh	r3, [r4, #12]
 800a61e:	89a0      	ldrh	r0, [r4, #12]
 800a620:	4307      	orrs	r7, r0
 800a622:	81a7      	strh	r7, [r4, #12]
 800a624:	e7cb      	b.n	800a5be <__smakebuf_r+0x1a>
 800a626:	46c0      	nop			; (mov r8, r8)
 800a628:	0800a391 	.word	0x0800a391

0800a62c <_malloc_usable_size_r>:
 800a62c:	1f0b      	subs	r3, r1, #4
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	1f18      	subs	r0, r3, #4
 800a632:	2b00      	cmp	r3, #0
 800a634:	da01      	bge.n	800a63a <_malloc_usable_size_r+0xe>
 800a636:	580b      	ldr	r3, [r1, r0]
 800a638:	18c0      	adds	r0, r0, r3
 800a63a:	4770      	bx	lr

0800a63c <_raise_r>:
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	0004      	movs	r4, r0
 800a640:	000d      	movs	r5, r1
 800a642:	291f      	cmp	r1, #31
 800a644:	d904      	bls.n	800a650 <_raise_r+0x14>
 800a646:	2316      	movs	r3, #22
 800a648:	6003      	str	r3, [r0, #0]
 800a64a:	2001      	movs	r0, #1
 800a64c:	4240      	negs	r0, r0
 800a64e:	bd70      	pop	{r4, r5, r6, pc}
 800a650:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a652:	2b00      	cmp	r3, #0
 800a654:	d004      	beq.n	800a660 <_raise_r+0x24>
 800a656:	008a      	lsls	r2, r1, #2
 800a658:	189b      	adds	r3, r3, r2
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	2a00      	cmp	r2, #0
 800a65e:	d108      	bne.n	800a672 <_raise_r+0x36>
 800a660:	0020      	movs	r0, r4
 800a662:	f000 f831 	bl	800a6c8 <_getpid_r>
 800a666:	002a      	movs	r2, r5
 800a668:	0001      	movs	r1, r0
 800a66a:	0020      	movs	r0, r4
 800a66c:	f000 f81a 	bl	800a6a4 <_kill_r>
 800a670:	e7ed      	b.n	800a64e <_raise_r+0x12>
 800a672:	2000      	movs	r0, #0
 800a674:	2a01      	cmp	r2, #1
 800a676:	d0ea      	beq.n	800a64e <_raise_r+0x12>
 800a678:	1c51      	adds	r1, r2, #1
 800a67a:	d103      	bne.n	800a684 <_raise_r+0x48>
 800a67c:	2316      	movs	r3, #22
 800a67e:	3001      	adds	r0, #1
 800a680:	6023      	str	r3, [r4, #0]
 800a682:	e7e4      	b.n	800a64e <_raise_r+0x12>
 800a684:	2400      	movs	r4, #0
 800a686:	0028      	movs	r0, r5
 800a688:	601c      	str	r4, [r3, #0]
 800a68a:	4790      	blx	r2
 800a68c:	0020      	movs	r0, r4
 800a68e:	e7de      	b.n	800a64e <_raise_r+0x12>

0800a690 <raise>:
 800a690:	b510      	push	{r4, lr}
 800a692:	4b03      	ldr	r3, [pc, #12]	; (800a6a0 <raise+0x10>)
 800a694:	0001      	movs	r1, r0
 800a696:	6818      	ldr	r0, [r3, #0]
 800a698:	f7ff ffd0 	bl	800a63c <_raise_r>
 800a69c:	bd10      	pop	{r4, pc}
 800a69e:	46c0      	nop			; (mov r8, r8)
 800a6a0:	2000000c 	.word	0x2000000c

0800a6a4 <_kill_r>:
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	b570      	push	{r4, r5, r6, lr}
 800a6a8:	4d06      	ldr	r5, [pc, #24]	; (800a6c4 <_kill_r+0x20>)
 800a6aa:	0004      	movs	r4, r0
 800a6ac:	0008      	movs	r0, r1
 800a6ae:	0011      	movs	r1, r2
 800a6b0:	602b      	str	r3, [r5, #0]
 800a6b2:	f7f8 fa31 	bl	8002b18 <_kill>
 800a6b6:	1c43      	adds	r3, r0, #1
 800a6b8:	d103      	bne.n	800a6c2 <_kill_r+0x1e>
 800a6ba:	682b      	ldr	r3, [r5, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d000      	beq.n	800a6c2 <_kill_r+0x1e>
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	bd70      	pop	{r4, r5, r6, pc}
 800a6c4:	2000039c 	.word	0x2000039c

0800a6c8 <_getpid_r>:
 800a6c8:	b510      	push	{r4, lr}
 800a6ca:	f7f8 fa1f 	bl	8002b0c <_getpid>
 800a6ce:	bd10      	pop	{r4, pc}

0800a6d0 <__sread>:
 800a6d0:	b570      	push	{r4, r5, r6, lr}
 800a6d2:	000c      	movs	r4, r1
 800a6d4:	250e      	movs	r5, #14
 800a6d6:	5f49      	ldrsh	r1, [r1, r5]
 800a6d8:	f000 f8a4 	bl	800a824 <_read_r>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	db03      	blt.n	800a6e8 <__sread+0x18>
 800a6e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a6e2:	181b      	adds	r3, r3, r0
 800a6e4:	6563      	str	r3, [r4, #84]	; 0x54
 800a6e6:	bd70      	pop	{r4, r5, r6, pc}
 800a6e8:	89a3      	ldrh	r3, [r4, #12]
 800a6ea:	4a02      	ldr	r2, [pc, #8]	; (800a6f4 <__sread+0x24>)
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	81a3      	strh	r3, [r4, #12]
 800a6f0:	e7f9      	b.n	800a6e6 <__sread+0x16>
 800a6f2:	46c0      	nop			; (mov r8, r8)
 800a6f4:	ffffefff 	.word	0xffffefff

0800a6f8 <__swrite>:
 800a6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fa:	001f      	movs	r7, r3
 800a6fc:	898b      	ldrh	r3, [r1, #12]
 800a6fe:	0005      	movs	r5, r0
 800a700:	000c      	movs	r4, r1
 800a702:	0016      	movs	r6, r2
 800a704:	05db      	lsls	r3, r3, #23
 800a706:	d505      	bpl.n	800a714 <__swrite+0x1c>
 800a708:	230e      	movs	r3, #14
 800a70a:	5ec9      	ldrsh	r1, [r1, r3]
 800a70c:	2200      	movs	r2, #0
 800a70e:	2302      	movs	r3, #2
 800a710:	f000 f874 	bl	800a7fc <_lseek_r>
 800a714:	89a3      	ldrh	r3, [r4, #12]
 800a716:	4a05      	ldr	r2, [pc, #20]	; (800a72c <__swrite+0x34>)
 800a718:	0028      	movs	r0, r5
 800a71a:	4013      	ands	r3, r2
 800a71c:	81a3      	strh	r3, [r4, #12]
 800a71e:	0032      	movs	r2, r6
 800a720:	230e      	movs	r3, #14
 800a722:	5ee1      	ldrsh	r1, [r4, r3]
 800a724:	003b      	movs	r3, r7
 800a726:	f000 f81f 	bl	800a768 <_write_r>
 800a72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a72c:	ffffefff 	.word	0xffffefff

0800a730 <__sseek>:
 800a730:	b570      	push	{r4, r5, r6, lr}
 800a732:	000c      	movs	r4, r1
 800a734:	250e      	movs	r5, #14
 800a736:	5f49      	ldrsh	r1, [r1, r5]
 800a738:	f000 f860 	bl	800a7fc <_lseek_r>
 800a73c:	89a3      	ldrh	r3, [r4, #12]
 800a73e:	1c42      	adds	r2, r0, #1
 800a740:	d103      	bne.n	800a74a <__sseek+0x1a>
 800a742:	4a05      	ldr	r2, [pc, #20]	; (800a758 <__sseek+0x28>)
 800a744:	4013      	ands	r3, r2
 800a746:	81a3      	strh	r3, [r4, #12]
 800a748:	bd70      	pop	{r4, r5, r6, pc}
 800a74a:	2280      	movs	r2, #128	; 0x80
 800a74c:	0152      	lsls	r2, r2, #5
 800a74e:	4313      	orrs	r3, r2
 800a750:	81a3      	strh	r3, [r4, #12]
 800a752:	6560      	str	r0, [r4, #84]	; 0x54
 800a754:	e7f8      	b.n	800a748 <__sseek+0x18>
 800a756:	46c0      	nop			; (mov r8, r8)
 800a758:	ffffefff 	.word	0xffffefff

0800a75c <__sclose>:
 800a75c:	b510      	push	{r4, lr}
 800a75e:	230e      	movs	r3, #14
 800a760:	5ec9      	ldrsh	r1, [r1, r3]
 800a762:	f000 f815 	bl	800a790 <_close_r>
 800a766:	bd10      	pop	{r4, pc}

0800a768 <_write_r>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	0004      	movs	r4, r0
 800a76c:	0008      	movs	r0, r1
 800a76e:	0011      	movs	r1, r2
 800a770:	001a      	movs	r2, r3
 800a772:	2300      	movs	r3, #0
 800a774:	4d05      	ldr	r5, [pc, #20]	; (800a78c <_write_r+0x24>)
 800a776:	602b      	str	r3, [r5, #0]
 800a778:	f7f8 fa07 	bl	8002b8a <_write>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d103      	bne.n	800a788 <_write_r+0x20>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d000      	beq.n	800a788 <_write_r+0x20>
 800a786:	6023      	str	r3, [r4, #0]
 800a788:	bd70      	pop	{r4, r5, r6, pc}
 800a78a:	46c0      	nop			; (mov r8, r8)
 800a78c:	2000039c 	.word	0x2000039c

0800a790 <_close_r>:
 800a790:	2300      	movs	r3, #0
 800a792:	b570      	push	{r4, r5, r6, lr}
 800a794:	4d06      	ldr	r5, [pc, #24]	; (800a7b0 <_close_r+0x20>)
 800a796:	0004      	movs	r4, r0
 800a798:	0008      	movs	r0, r1
 800a79a:	602b      	str	r3, [r5, #0]
 800a79c:	f7f8 fa11 	bl	8002bc2 <_close>
 800a7a0:	1c43      	adds	r3, r0, #1
 800a7a2:	d103      	bne.n	800a7ac <_close_r+0x1c>
 800a7a4:	682b      	ldr	r3, [r5, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d000      	beq.n	800a7ac <_close_r+0x1c>
 800a7aa:	6023      	str	r3, [r4, #0]
 800a7ac:	bd70      	pop	{r4, r5, r6, pc}
 800a7ae:	46c0      	nop			; (mov r8, r8)
 800a7b0:	2000039c 	.word	0x2000039c

0800a7b4 <_fstat_r>:
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	b570      	push	{r4, r5, r6, lr}
 800a7b8:	4d06      	ldr	r5, [pc, #24]	; (800a7d4 <_fstat_r+0x20>)
 800a7ba:	0004      	movs	r4, r0
 800a7bc:	0008      	movs	r0, r1
 800a7be:	0011      	movs	r1, r2
 800a7c0:	602b      	str	r3, [r5, #0]
 800a7c2:	f7f8 fa08 	bl	8002bd6 <_fstat>
 800a7c6:	1c43      	adds	r3, r0, #1
 800a7c8:	d103      	bne.n	800a7d2 <_fstat_r+0x1e>
 800a7ca:	682b      	ldr	r3, [r5, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d000      	beq.n	800a7d2 <_fstat_r+0x1e>
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	bd70      	pop	{r4, r5, r6, pc}
 800a7d4:	2000039c 	.word	0x2000039c

0800a7d8 <_isatty_r>:
 800a7d8:	2300      	movs	r3, #0
 800a7da:	b570      	push	{r4, r5, r6, lr}
 800a7dc:	4d06      	ldr	r5, [pc, #24]	; (800a7f8 <_isatty_r+0x20>)
 800a7de:	0004      	movs	r4, r0
 800a7e0:	0008      	movs	r0, r1
 800a7e2:	602b      	str	r3, [r5, #0]
 800a7e4:	f7f8 fa05 	bl	8002bf2 <_isatty>
 800a7e8:	1c43      	adds	r3, r0, #1
 800a7ea:	d103      	bne.n	800a7f4 <_isatty_r+0x1c>
 800a7ec:	682b      	ldr	r3, [r5, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d000      	beq.n	800a7f4 <_isatty_r+0x1c>
 800a7f2:	6023      	str	r3, [r4, #0]
 800a7f4:	bd70      	pop	{r4, r5, r6, pc}
 800a7f6:	46c0      	nop			; (mov r8, r8)
 800a7f8:	2000039c 	.word	0x2000039c

0800a7fc <_lseek_r>:
 800a7fc:	b570      	push	{r4, r5, r6, lr}
 800a7fe:	0004      	movs	r4, r0
 800a800:	0008      	movs	r0, r1
 800a802:	0011      	movs	r1, r2
 800a804:	001a      	movs	r2, r3
 800a806:	2300      	movs	r3, #0
 800a808:	4d05      	ldr	r5, [pc, #20]	; (800a820 <_lseek_r+0x24>)
 800a80a:	602b      	str	r3, [r5, #0]
 800a80c:	f7f8 f9fa 	bl	8002c04 <_lseek>
 800a810:	1c43      	adds	r3, r0, #1
 800a812:	d103      	bne.n	800a81c <_lseek_r+0x20>
 800a814:	682b      	ldr	r3, [r5, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d000      	beq.n	800a81c <_lseek_r+0x20>
 800a81a:	6023      	str	r3, [r4, #0]
 800a81c:	bd70      	pop	{r4, r5, r6, pc}
 800a81e:	46c0      	nop			; (mov r8, r8)
 800a820:	2000039c 	.word	0x2000039c

0800a824 <_read_r>:
 800a824:	b570      	push	{r4, r5, r6, lr}
 800a826:	0004      	movs	r4, r0
 800a828:	0008      	movs	r0, r1
 800a82a:	0011      	movs	r1, r2
 800a82c:	001a      	movs	r2, r3
 800a82e:	2300      	movs	r3, #0
 800a830:	4d05      	ldr	r5, [pc, #20]	; (800a848 <_read_r+0x24>)
 800a832:	602b      	str	r3, [r5, #0]
 800a834:	f7f8 f98c 	bl	8002b50 <_read>
 800a838:	1c43      	adds	r3, r0, #1
 800a83a:	d103      	bne.n	800a844 <_read_r+0x20>
 800a83c:	682b      	ldr	r3, [r5, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d000      	beq.n	800a844 <_read_r+0x20>
 800a842:	6023      	str	r3, [r4, #0]
 800a844:	bd70      	pop	{r4, r5, r6, pc}
 800a846:	46c0      	nop			; (mov r8, r8)
 800a848:	2000039c 	.word	0x2000039c

0800a84c <_init>:
 800a84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a84e:	46c0      	nop			; (mov r8, r8)
 800a850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a852:	bc08      	pop	{r3}
 800a854:	469e      	mov	lr, r3
 800a856:	4770      	bx	lr

0800a858 <_fini>:
 800a858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85a:	46c0      	nop			; (mov r8, r8)
 800a85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a85e:	bc08      	pop	{r3}
 800a860:	469e      	mov	lr, r3
 800a862:	4770      	bx	lr
